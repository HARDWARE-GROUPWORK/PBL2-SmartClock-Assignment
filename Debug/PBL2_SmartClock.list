
PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e968  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800eb68  0800eb68  0001eb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f314  0800f314  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800f314  0800f314  0001f314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f31c  0800f31c  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f31c  0800f31c  0001f31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f320  0800f320  0001f320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800f324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200002b0  0800f5d0  000202b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  0800f5d0  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfec  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405c  00000000  00000000  0003e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00042328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00043b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2d3  00000000  00000000  00045200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e70b  00000000  00000000  000714d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073fe  00000000  00000000  0008fbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196fdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007488  00000000  00000000  00197030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b0 	.word	0x200002b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800eb50 	.word	0x0800eb50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b4 	.word	0x200002b4
 800023c:	0800eb50 	.word	0x0800eb50

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f007 fa39 	bl	8007b1c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f006 f895 	bl	80067f4 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200003f8 	.word	0x200003f8

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200003ac 	.word	0x200003ac

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f007 fa69 	bl	8007d44 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200003f8 	.word	0x200003f8

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00b fb34 	bl	800bf38 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f007 f917 	bl	8007b1c <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f005 ff80 	bl	80067f4 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200003f8 	.word	0x200003f8

08000900 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_ADC1_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC1_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800091e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ADC1_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ADC1_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_ADC1_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_ADC1_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_ADC1_Init+0x98>)
 8000962:	f005 ff6b 	bl	800683c <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800096c:	f004 fa14 	bl	8004d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000970:	230a      	movs	r3, #10
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC1_Init+0x98>)
 8000982:	f006 f905 	bl	8006b90 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800098c:	f004 fa04 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200003b0 	.word	0x200003b0
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d123      	bne.n	8000a0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x7c>)
 8000a0a:	f006 fc17 	bl	800723c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800

08000a24 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b97      	ldr	r3, [pc, #604]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a96      	ldr	r2, [pc, #600]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b94      	ldr	r3, [pc, #592]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b91      	ldr	r3, [pc, #580]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b8b      	ldr	r3, [pc, #556]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a8a      	ldr	r2, [pc, #552]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b88      	ldr	r3, [pc, #544]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b85      	ldr	r3, [pc, #532]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a84      	ldr	r2, [pc, #528]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7e      	ldr	r2, [pc, #504]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a78      	ldr	r2, [pc, #480]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a72      	ldr	r2, [pc, #456]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6c      	ldr	r2, [pc, #432]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2168      	movs	r1, #104	; 0x68
 8000afe:	4867      	ldr	r0, [pc, #412]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b00:	f006 fd60 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b0a:	4865      	ldr	r0, [pc, #404]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000b0c:	f006 fd5a 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4863      	ldr	r0, [pc, #396]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000b16:	f006 fd55 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b20:	4861      	ldr	r0, [pc, #388]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b22:	f006 fd4f 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000b26:	2314      	movs	r3, #20
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4858      	ldr	r0, [pc, #352]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b3a:	f006 fb7f 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000b3e:	2368      	movs	r3, #104	; 0x68
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4851      	ldr	r0, [pc, #324]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b56:	f006 fb71 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <MX_GPIO_Init+0x288>)
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	484e      	ldr	r0, [pc, #312]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b70:	f006 fb64 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b74:	2332      	movs	r3, #50	; 0x32
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4846      	ldr	r0, [pc, #280]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b90:	f006 fb54 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b94:	2386      	movs	r3, #134	; 0x86
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4840      	ldr	r0, [pc, #256]	; (8000cb0 <MX_GPIO_Init+0x28c>)
 8000bb0:	f006 fb44 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4833      	ldr	r0, [pc, #204]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bd2:	f006 fb33 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bd6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bf0:	f006 fb24 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c0c:	f006 fb16 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c24:	f006 fb0a 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000c28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000c42:	f006 fafb 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23f0      	movs	r3, #240	; 0xf0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000c5a:	f006 faef 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c7c:	f006 fade 	bl	800723c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2103      	movs	r1, #3
 8000c84:	2028      	movs	r0, #40	; 0x28
 8000c86:	f006 faa2 	bl	80071ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8a:	2028      	movs	r0, #40	; 0x28
 8000c8c:	f006 fabb 	bl	8007206 <HAL_NVIC_EnableIRQ>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020c00 	.word	0x40020c00

08000cb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f006 fc98 	bl	8007628 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f004 f84b 	bl	8004d98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f007 fbbf 	bl	8008488 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f004 f842 	bl	8004d98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f007 fc01 	bl	800851e <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f004 f839 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003f8 	.word	0x200003f8
 8000d30:	40005400 	.word	0x40005400
 8000d34:	00c0eaff 	.word	0x00c0eaff

08000d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_I2C_MspInit+0x7c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d128      	bne.n	8000dac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d90:	f006 fa54 	bl	800723c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
}
 8000dc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dca:	f3bf 8f6f 	isb	sy
}
 8000dce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd8:	f3bf 8f4f 	dsb	sy
}
 8000ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dde:	f3bf 8f6f 	isb	sy
}
 8000de2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SCB_EnableICache+0x48>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df0:	f3bf 8f4f 	dsb	sy
}
 8000df4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000df6:	f3bf 8f6f 	isb	sy
}
 8000dfa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
}
 8000e1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e26:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0b5b      	lsrs	r3, r3, #13
 8000e2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	015a      	lsls	r2, r3, #5
 8000e40:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e44:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4a:	4911      	ldr	r1, [pc, #68]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ef      	bne.n	8000e3c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	60fa      	str	r2, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e5      	bne.n	8000e32 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e66:	f3bf 8f4f 	dsb	sy
}
 8000e6a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e78:	f3bf 8f4f 	dsb	sy
}
 8000e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e7e:	f3bf 8f6f 	isb	sy
}
 8000e82:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <println>:
uint8_t SerialNumber[] = {0x00, 0x00, 0x7E, 0x00, 0xD0, 0x01, 0x03, 0x2B, 0x7E};
static int pre_define_data_size = 70;

// Utility function
void println(char input[])
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	char stringBuffer[30];
	sprintf(stringBuffer, "%s\r\n", input);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <println+0x38>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00b fc91 	bl	800c7cc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f9c6 	bl	8000240 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 0108 	add.w	r1, r7, #8
 8000ebc:	23c8      	movs	r3, #200	; 0xc8
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <println+0x3c>)
 8000ec0:	f00a fae2 	bl	800b488 <HAL_UART_Transmit>
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0800eb68 	.word	0x0800eb68
 8000ed0:	2000068c 	.word	0x2000068c

08000ed4 <sensirion_bytes_to_float>:
	HAL_UART_Transmit(&huart3, (uint8_t *)data, pre_define_data_size, 1000);
}

// For convert concatenate hex to float ieee754
float sensirion_bytes_to_float(const uint32_t bytes)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32_value;
		float float32;
	} tmp;

	tmp.u32_value = bytes;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
	return tmp.float32;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	ee07 3a90 	vmov	s15, r3
}
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <wake_sensirion>:

// Wake up SPS30 by sent start frame
uint8_t *wake_sensirion()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent start frame");

	static uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e007      	b.n	8000f10 <wake_sensirion+0x1c>
	{
		data[i] = 0x00;
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <wake_sensirion+0x68>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b45      	cmp	r3, #69	; 0x45
 8000f14:	d9f4      	bls.n	8000f00 <wake_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f16:	bf00      	nop
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <wake_sensirion+0x6c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	2b40      	cmp	r3, #64	; 0x40
 8000f24:	d1f8      	bne.n	8000f18 <wake_sensirion+0x24>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	490d      	ldr	r1, [pc, #52]	; (8000f64 <wake_sensirion+0x70>)
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <wake_sensirion+0x6c>)
 8000f30:	f00a faaa 	bl	800b488 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f34:	bf00      	nop
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <wake_sensirion+0x6c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	2b40      	cmp	r3, #64	; 0x40
 8000f42:	d1f8      	bne.n	8000f36 <wake_sensirion+0x42>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	2246      	movs	r2, #70	; 0x46
 8000f4a:	4904      	ldr	r1, [pc, #16]	; (8000f5c <wake_sensirion+0x68>)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <wake_sensirion+0x6c>)
 8000f4e:	f00a fb2e 	bl	800b5ae <HAL_UART_Receive>

	//HAL_Delay(1000);
	//println("Wakeup");
	return data;
 8000f52:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <wake_sensirion+0x68>)
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000330 	.word	0x20000330
 8000f60:	20000710 	.word	0x20000710
 8000f64:	20000000 	.word	0x20000000

08000f68 <read_sensirion>:

// Read from SPS30 by sent read frame
float *read_sensirion()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0a0      	sub	sp, #128	; 0x80
 8000f6c:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent read frame");

	uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f72:	e008      	b.n	8000f86 <read_sensirion+0x1e>
	{
		data[i] = 0x00;
 8000f74:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f82:	3301      	adds	r3, #1
 8000f84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f88:	2b45      	cmp	r3, #69	; 0x45
 8000f8a:	d9f3      	bls.n	8000f74 <read_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f8c:	bf00      	nop
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <read_sensirion+0x150>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	2b40      	cmp	r3, #64	; 0x40
 8000f9a:	d1f8      	bne.n	8000f8e <read_sensirion+0x26>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4946      	ldr	r1, [pc, #280]	; (80010bc <read_sensirion+0x154>)
 8000fa4:	4844      	ldr	r0, [pc, #272]	; (80010b8 <read_sensirion+0x150>)
 8000fa6:	f00a fa6f 	bl	800b488 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000faa:	bf00      	nop
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <read_sensirion+0x150>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	2b40      	cmp	r3, #64	; 0x40
 8000fb8:	d1f8      	bne.n	8000fac <read_sensirion+0x44>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data),  200); // from 1000 to 200
 8000fba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000fbe:	23c8      	movs	r3, #200	; 0xc8
 8000fc0:	2246      	movs	r2, #70	; 0x46
 8000fc2:	483d      	ldr	r0, [pc, #244]	; (80010b8 <read_sensirion+0x150>)
 8000fc4:	f00a faf3 	bl	800b5ae <HAL_UART_Receive>
//	HAL_UART_Transmit(&huart3, (uint8_t *)data, sizeof(data), 100);


	//println("Try to Read");
	// Check for start frame
	if (data[0] == 0x7E && data[1] == 0x00)
 8000fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fcc:	2b7e      	cmp	r3, #126	; 0x7e
 8000fce:	d16e      	bne.n	80010ae <read_sensirion+0x146>
 8000fd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d16a      	bne.n	80010ae <read_sensirion+0x146>
//		uint8_t length = data[4];
//		uint8_t state = data[5];

		uint8_t checksum;
		// Find checksum frame by start from the back of the array
		for (uint8_t i = sizeof(data); i > 0; i--)
 8000fd8:	2346      	movs	r3, #70	; 0x46
 8000fda:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8000fde:	e017      	b.n	8001010 <read_sensirion+0xa8>
		{
			if (data[i] == 0x7E)
 8000fe0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000fe4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000fe8:	4413      	add	r3, r2
 8000fea:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8000fee:	2b7e      	cmp	r3, #126	; 0x7e
 8000ff0:	d109      	bne.n	8001006 <read_sensirion+0x9e>
			{
				data[i - 1] = checksum;
 8000ff2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001002:	f803 2c54 	strb.w	r2, [r3, #-84]
		for (uint8_t i = sizeof(data); i > 0; i--)
 8001006:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800100a:	3b01      	subs	r3, #1
 800100c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001010:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e3      	bne.n	8000fe0 <read_sensirion+0x78>
		}

		uint32_t concatenateHex[10];
		static float actualValue[10];
		// Concatenate HEX(2,2,2,2) into HEX(8) and convert concatenate hex to float ieee754
		for (int i = 0; i < 10; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	677b      	str	r3, [r7, #116]	; 0x74
 800101c:	e042      	b.n	80010a4 <read_sensirion+0x13c>
		{
			// 40 HEX(2) into 10 Groups
			// Skip first 5 bits (header)
			concatenateHex[i] = ((data[4 * i + 5]) << 24) + ((data[(4 * i) + 1 + 5]) << 16) + ((data[(4 * i) + 2 + 5]) << 8) + (data[(4 * i) + 3 + 5]);
 800101e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	3305      	adds	r3, #5
 8001024:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001028:	4413      	add	r3, r2
 800102a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800102e:	061a      	lsls	r2, r3, #24
 8001030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	3306      	adds	r3, #6
 8001036:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800103a:	440b      	add	r3, r1
 800103c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	441a      	add	r2, r3
 8001044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	3307      	adds	r3, #7
 800104a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800104e:	440b      	add	r3, r1
 8001050:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	4413      	add	r3, r2
 8001058:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800105a:	3202      	adds	r2, #2
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001062:	440a      	add	r2, r1
 8001064:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8001068:	4413      	add	r3, r2
 800106a:	461a      	mov	r2, r3
 800106c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001074:	440b      	add	r3, r1
 8001076:	f843 2c7c 	str.w	r2, [r3, #-124]

			// Convert sensirion bytes to float
			actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 800107a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001082:	4413      	add	r3, r2
 8001084:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff23 	bl	8000ed4 <sensirion_bytes_to_float>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <read_sensirion+0x158>)
 8001094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 10; i++)
 800109e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010a0:	3301      	adds	r3, #1
 80010a2:	677b      	str	r3, [r7, #116]	; 0x74
 80010a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010a6:	2b09      	cmp	r3, #9
 80010a8:	ddb9      	ble.n	800101e <read_sensirion+0xb6>
//			sprintf(stringBuffer, "%.4f\r\n", actualValue[i]);
//			HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
			//println("Read completed");
		}
		//HAL_Delay(1000);
		return actualValue;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <read_sensirion+0x158>)
 80010ac:	e000      	b.n	80010b0 <read_sensirion+0x148>
	}
	else
	{
		//println("Error: Can't read sensor");
		//HAL_Delay(1000);
		return NULL;
 80010ae:	2300      	movs	r3, #0
	}
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3780      	adds	r7, #128	; 0x80
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000710 	.word	0x20000710
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	20000378 	.word	0x20000378

080010c4 <sent_string_to_mcu>:
#include "string.h"
#include "stdio.h"

void sent_string_to_mcu(char data[]){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	6018      	str	r0, [r3, #0]
	char stringBuffer[500];
	sprintf(stringBuffer, "%s\n" , data);
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	f107 000c 	add.w	r0, r7, #12
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	490a      	ldr	r1, [pc, #40]	; (8001104 <sent_string_to_mcu+0x40>)
 80010da:	f00b fb77 	bl	800c7cc <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f8ac 	bl	8000240 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f107 010c 	add.w	r1, r7, #12
 80010f0:	23c8      	movs	r3, #200	; 0xc8
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <sent_string_to_mcu+0x44>)
 80010f4:	f00a f9c8 	bl	800b488 <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	0800eb70 	.word	0x0800eb70
 8001108:	20000794 	.word	0x20000794

0800110c <buzzerSound>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Buzzer Sound
void buzzerSound(uint32_t delay){
 800110c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]

	if(alarmIsAlert == false){
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <buzzerSound+0x170>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f083 0301 	eor.w	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d032      	beq.n	800118a <buzzerSound+0x7e>
		if(buzzerIsOn == true){
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <buzzerSound+0x174>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <buzzerSound+0x32>
	//		char hexString[30];
	//		sprintf(hexString,"BUZZER....\r\n");
	//		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

			htim4.Instance->CCR1 = (1000 - 1) * 0.5;
 800112c:	4b55      	ldr	r3, [pc, #340]	; (8001284 <buzzerSound+0x178>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001136:	2100      	movs	r1, #0
 8001138:	4852      	ldr	r0, [pc, #328]	; (8001284 <buzzerSound+0x178>)
 800113a:	f009 f84b 	bl	800a1d4 <HAL_TIM_PWM_Start>
		}

		if(buzzerIsOn == true && millisecondHAL - buzzerPrevMillisecondHAL >= delay){
 800113e:	4b50      	ldr	r3, [pc, #320]	; (8001280 <buzzerSound+0x174>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8095 	beq.w	8001272 <buzzerSound+0x166>
 8001148:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <buzzerSound+0x17c>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <buzzerSound+0x180>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	ebb0 0a02 	subs.w	sl, r0, r2
 8001158:	eb61 0b03 	sbc.w	fp, r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	461a      	mov	r2, r3
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	459b      	cmp	fp, r3
 8001166:	bf08      	it	eq
 8001168:	4592      	cmpeq	sl, r2
 800116a:	f0c0 8082 	bcc.w	8001272 <buzzerSound+0x166>
	//		char hexString[30];
	//		sprintf(hexString,"QUIT BUZZER\r\n");
	//		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800116e:	2100      	movs	r1, #0
 8001170:	4844      	ldr	r0, [pc, #272]	; (8001284 <buzzerSound+0x178>)
 8001172:	f009 f929 	bl	800a3c8 <HAL_TIM_PWM_Stop>
			buzzerIsOn = false;
 8001176:	4b42      	ldr	r3, [pc, #264]	; (8001280 <buzzerSound+0x174>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 800117c:	4b42      	ldr	r3, [pc, #264]	; (8001288 <buzzerSound+0x17c>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	4942      	ldr	r1, [pc, #264]	; (800128c <buzzerSound+0x180>)
 8001184:	e9c1 2300 	strd	r2, r3, [r1]

		}

	}

}
 8001188:	e073      	b.n	8001272 <buzzerSound+0x166>
		delay += 90;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	335a      	adds	r3, #90	; 0x5a
 800118e:	607b      	str	r3, [r7, #4]
		if(alarmNumOfAlert >= 60){
 8001190:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <buzzerSound+0x184>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b3b      	cmp	r3, #59	; 0x3b
 8001196:	d905      	bls.n	80011a4 <buzzerSound+0x98>
			alarmNumOfAlert = 0;
 8001198:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <buzzerSound+0x184>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
			alarmIsAlert = false;
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <buzzerSound+0x170>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		if(alarmNumOfAlert % 4 == 0){
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <buzzerSound+0x184>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d104      	bne.n	80011bc <buzzerSound+0xb0>
			delay += delay*2;
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	607b      	str	r3, [r7, #4]
		if(buzzerIsOn == false && millisecondHAL - buzzerPrevMillisecondHAL >= delay && alarmNumOfAlert < 60){
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <buzzerSound+0x174>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f083 0301 	eor.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d024      	beq.n	8001214 <buzzerSound+0x108>
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <buzzerSound+0x17c>)
 80011cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <buzzerSound+0x180>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	ebb0 0802 	subs.w	r8, r0, r2
 80011da:	eb61 0903 	sbc.w	r9, r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	461a      	mov	r2, r3
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	4599      	cmp	r9, r3
 80011e8:	bf08      	it	eq
 80011ea:	4590      	cmpeq	r8, r2
 80011ec:	d312      	bcc.n	8001214 <buzzerSound+0x108>
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <buzzerSound+0x184>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b3b      	cmp	r3, #59	; 0x3b
 80011f4:	d80e      	bhi.n	8001214 <buzzerSound+0x108>
			buzzerIsOn = true;
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <buzzerSound+0x174>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <buzzerSound+0x17c>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	4922      	ldr	r1, [pc, #136]	; (800128c <buzzerSound+0x180>)
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
			alarmNumOfAlert++;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <buzzerSound+0x184>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <buzzerSound+0x184>)
 8001212:	701a      	strb	r2, [r3, #0]
		if(buzzerIsOn == true){
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <buzzerSound+0x174>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <buzzerSound+0x122>
			htim4.Instance->CCR1 = (1000 - 1) * 0.5;
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <buzzerSound+0x178>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001226:	2100      	movs	r1, #0
 8001228:	4816      	ldr	r0, [pc, #88]	; (8001284 <buzzerSound+0x178>)
 800122a:	f008 ffd3 	bl	800a1d4 <HAL_TIM_PWM_Start>
		if(buzzerIsOn == true && millisecondHAL - buzzerPrevMillisecondHAL >= delay){
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <buzzerSound+0x174>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01d      	beq.n	8001272 <buzzerSound+0x166>
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <buzzerSound+0x17c>)
 8001238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <buzzerSound+0x180>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	1a84      	subs	r4, r0, r2
 8001244:	eb61 0503 	sbc.w	r5, r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	461a      	mov	r2, r3
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	429d      	cmp	r5, r3
 8001252:	bf08      	it	eq
 8001254:	4294      	cmpeq	r4, r2
 8001256:	d30c      	bcc.n	8001272 <buzzerSound+0x166>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001258:	2100      	movs	r1, #0
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <buzzerSound+0x178>)
 800125c:	f009 f8b4 	bl	800a3c8 <HAL_TIM_PWM_Stop>
			buzzerIsOn = false;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <buzzerSound+0x174>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <buzzerSound+0x17c>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <buzzerSound+0x180>)
 800126e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800127c:	200002f0 	.word	0x200002f0
 8001280:	20000318 	.word	0x20000318
 8001284:	2000055c 	.word	0x2000055c
 8001288:	20000300 	.word	0x20000300
 800128c:	20000310 	.word	0x20000310
 8001290:	20000319 	.word	0x20000319

08001294 <saveData>:

// Save EEPROM
void saveData(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	//Clock
	EEPROM_Write_NUM (1, 0, hourNum);
 8001298:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <saveData+0x100>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	2100      	movs	r1, #0
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff fa62 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (2, 0, minuteNum);
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <saveData+0x104>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	2100      	movs	r1, #0
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff fa56 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (3, 0, secondNum);
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <saveData+0x108>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	2100      	movs	r1, #0
 80012da:	2003      	movs	r0, #3
 80012dc:	f7ff fa4a 	bl	8000774 <EEPROM_Write_NUM>

	//Date
	EEPROM_Write_NUM (4, 0, dayIndex);
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <saveData+0x10c>)
 80012e2:	f993 3000 	ldrsb.w	r3, [r3]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	2100      	movs	r1, #0
 80012f4:	2004      	movs	r0, #4
 80012f6:	f7ff fa3d 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (5, 0, date);
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <saveData+0x110>)
 80012fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	2100      	movs	r1, #0
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fa30 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (6, 0, monthIndex);
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <saveData+0x114>)
 8001316:	f993 3000 	ldrsb.w	r3, [r3]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	2100      	movs	r1, #0
 8001328:	2006      	movs	r0, #6
 800132a:	f7ff fa23 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (7, 0, year);
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <saveData+0x118>)
 8001330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133c:	eeb0 0a67 	vmov.f32	s0, s15
 8001340:	2100      	movs	r1, #0
 8001342:	2007      	movs	r0, #7
 8001344:	f7ff fa16 	bl	8000774 <EEPROM_Write_NUM>

	//Alarm
	EEPROM_Write_NUM (8, 0, alarmHour);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <saveData+0x11c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	2100      	movs	r1, #0
 800135a:	2008      	movs	r0, #8
 800135c:	f7ff fa0a 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (9, 0, alarmMinute);
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <saveData+0x120>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	2100      	movs	r1, #0
 8001372:	2009      	movs	r0, #9
 8001374:	f7ff f9fe 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (10, 0, alarmIsOn);
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <saveData+0x124>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	2100      	movs	r1, #0
 800138a:	200a      	movs	r0, #10
 800138c:	f7ff f9f2 	bl	8000774 <EEPROM_Write_NUM>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000040 	.word	0x20000040
 8001398:	2000003c 	.word	0x2000003c
 800139c:	20000038 	.word	0x20000038
 80013a0:	200000b0 	.word	0x200000b0
 80013a4:	20000061 	.word	0x20000061
 80013a8:	200000b1 	.word	0x200000b1
 80013ac:	200000b2 	.word	0x200000b2
 80013b0:	200002d0 	.word	0x200002d0
 80013b4:	200002cc 	.word	0x200002cc
 80013b8:	20000060 	.word	0x20000060

080013bc <readData>:
// Read EEPROM
void readData(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	//Clock
	hourNum = EEPROM_Read_NUM (1, 0);
 80013c2:	2100      	movs	r1, #0
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff f9f1 	bl	80007ac <EEPROM_Read_NUM>
 80013ca:	eef0 7a40 	vmov.f32	s15, s0
 80013ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d2:	ee17 2a90 	vmov	r2, s15
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <readData+0x114>)
 80013d8:	601a      	str	r2, [r3, #0]
	minuteNum = EEPROM_Read_NUM (2, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	2002      	movs	r0, #2
 80013de:	f7ff f9e5 	bl	80007ac <EEPROM_Read_NUM>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
 80013e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ea:	ee17 2a90 	vmov	r2, s15
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <readData+0x118>)
 80013f0:	601a      	str	r2, [r3, #0]
	secondNum = EEPROM_Read_NUM (3, 0);
 80013f2:	2100      	movs	r1, #0
 80013f4:	2003      	movs	r0, #3
 80013f6:	f7ff f9d9 	bl	80007ac <EEPROM_Read_NUM>
 80013fa:	eef0 7a40 	vmov.f32	s15, s0
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 2a90 	vmov	r2, s15
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <readData+0x11c>)
 8001408:	601a      	str	r2, [r3, #0]

	//Date
	dayIndex = EEPROM_Read_NUM (4, 0);
 800140a:	2100      	movs	r1, #0
 800140c:	2004      	movs	r0, #4
 800140e:	f7ff f9cd 	bl	80007ac <EEPROM_Read_NUM>
 8001412:	eef0 7a40 	vmov.f32	s15, s0
 8001416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141a:	edc7 7a01 	vstr	s15, [r7, #4]
 800141e:	793b      	ldrb	r3, [r7, #4]
 8001420:	b25a      	sxtb	r2, r3
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <readData+0x120>)
 8001424:	701a      	strb	r2, [r3, #0]
	date = EEPROM_Read_NUM (5, 0);
 8001426:	2100      	movs	r1, #0
 8001428:	2005      	movs	r0, #5
 800142a:	f7ff f9bf 	bl	80007ac <EEPROM_Read_NUM>
 800142e:	eef0 7a40 	vmov.f32	s15, s0
 8001432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001436:	edc7 7a01 	vstr	s15, [r7, #4]
 800143a:	793b      	ldrb	r3, [r7, #4]
 800143c:	b25a      	sxtb	r2, r3
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <readData+0x124>)
 8001440:	701a      	strb	r2, [r3, #0]
	monthIndex = EEPROM_Read_NUM (6, 0);
 8001442:	2100      	movs	r1, #0
 8001444:	2006      	movs	r0, #6
 8001446:	f7ff f9b1 	bl	80007ac <EEPROM_Read_NUM>
 800144a:	eef0 7a40 	vmov.f32	s15, s0
 800144e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001452:	edc7 7a01 	vstr	s15, [r7, #4]
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <readData+0x128>)
 800145c:	701a      	strb	r2, [r3, #0]
	year = EEPROM_Read_NUM (7, 0);
 800145e:	2100      	movs	r1, #0
 8001460:	2007      	movs	r0, #7
 8001462:	f7ff f9a3 	bl	80007ac <EEPROM_Read_NUM>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146e:	ee17 3a90 	vmov	r3, s15
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <readData+0x12c>)
 8001476:	801a      	strh	r2, [r3, #0]

	//Alarm
	alarmHour = EEPROM_Read_NUM (8, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	2008      	movs	r0, #8
 800147c:	f7ff f996 	bl	80007ac <EEPROM_Read_NUM>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 2a90 	vmov	r2, s15
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <readData+0x130>)
 800148e:	601a      	str	r2, [r3, #0]
	alarmMinute = EEPROM_Read_NUM (9, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	2009      	movs	r0, #9
 8001494:	f7ff f98a 	bl	80007ac <EEPROM_Read_NUM>
 8001498:	eef0 7a40 	vmov.f32	s15, s0
 800149c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a0:	ee17 2a90 	vmov	r2, s15
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <readData+0x134>)
 80014a6:	601a      	str	r2, [r3, #0]
	alarmIsOn = EEPROM_Read_NUM (10, 0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	200a      	movs	r0, #10
 80014ac:	f7ff f97e 	bl	80007ac <EEPROM_Read_NUM>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
 80014b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <readData+0x138>)
 80014c6:	701a      	strb	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000040 	.word	0x20000040
 80014d4:	2000003c 	.word	0x2000003c
 80014d8:	20000038 	.word	0x20000038
 80014dc:	200000b0 	.word	0x200000b0
 80014e0:	20000061 	.word	0x20000061
 80014e4:	200000b1 	.word	0x200000b1
 80014e8:	200000b2 	.word	0x200000b2
 80014ec:	200002d0 	.word	0x200002d0
 80014f0:	200002cc 	.word	0x200002cc
 80014f4:	20000060 	.word	0x20000060

080014f8 <eraseAllData>:

// Erase EERPOM
void eraseAllData(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	e007      	b.n	8001514 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	b29b      	uxth	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f9cd 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3301      	adds	r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151a:	dbf3      	blt.n	8001504 <eraseAllData+0xc>
	}
	year = 2021;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <eraseAllData+0x54>)
 800151e:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8001522:	801a      	strh	r2, [r3, #0]
	EEPROM_Write_NUM (7, 0, year); // override year
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <eraseAllData+0x54>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	2100      	movs	r1, #0
 8001538:	2007      	movs	r0, #7
 800153a:	f7ff f91b 	bl	8000774 <EEPROM_Write_NUM>
	readData(); // Read from Clean EEPROM
 800153e:	f7ff ff3d 	bl	80013bc <readData>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000b2 	.word	0x200000b2

08001550 <checkResetData>:

void checkResetData(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	if(userResetButton == 1){
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <checkResetData+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <checkResetData+0x16>
		eraseAllData();
 800155c:	f7ff ffcc 	bl	80014f8 <eraseAllData>
		userResetButton = 0;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <checkResetData+0x1c>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	}
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002ee 	.word	0x200002ee

08001570 <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fee9 	bl	8006354 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001582:	2001      	movs	r0, #1
 8001584:	f004 fce0 	bl	8005f48 <ILI9341_Set_Rotation>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <check31Days>:

bool check31Days(){
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	if(monthIndex == 0 || monthIndex == 2 || monthIndex == 4 || monthIndex == 6 || monthIndex == 7 || monthIndex == 9 || monthIndex == 11){
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <check31Days+0x5c>)
 8001596:	f993 3000 	ldrsb.w	r3, [r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01d      	beq.n	80015da <check31Days+0x4a>
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <check31Days+0x5c>)
 80015a0:	f993 3000 	ldrsb.w	r3, [r3]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d018      	beq.n	80015da <check31Days+0x4a>
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <check31Days+0x5c>)
 80015aa:	f993 3000 	ldrsb.w	r3, [r3]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d013      	beq.n	80015da <check31Days+0x4a>
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <check31Days+0x5c>)
 80015b4:	f993 3000 	ldrsb.w	r3, [r3]
 80015b8:	2b06      	cmp	r3, #6
 80015ba:	d00e      	beq.n	80015da <check31Days+0x4a>
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <check31Days+0x5c>)
 80015be:	f993 3000 	ldrsb.w	r3, [r3]
 80015c2:	2b07      	cmp	r3, #7
 80015c4:	d009      	beq.n	80015da <check31Days+0x4a>
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <check31Days+0x5c>)
 80015c8:	f993 3000 	ldrsb.w	r3, [r3]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d004      	beq.n	80015da <check31Days+0x4a>
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <check31Days+0x5c>)
 80015d2:	f993 3000 	ldrsb.w	r3, [r3]
 80015d6:	2b0b      	cmp	r3, #11
 80015d8:	d101      	bne.n	80015de <check31Days+0x4e>
		return true;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <check31Days+0x50>
	}else{
		return false;
 80015de:	2300      	movs	r3, #0
	}
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200000b1 	.word	0x200000b1

080015f0 <setDayOneIncrementMonth>:
void setDayOneIncrementMonth(uint8_t num){
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	if(date > num){
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <setDayOneIncrementMonth+0x48>)
 80015fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001600:	461a      	mov	r2, r3
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	429a      	cmp	r2, r3
 8001606:	dd10      	ble.n	800162a <setDayOneIncrementMonth+0x3a>
		date = 1;
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <setDayOneIncrementMonth+0x48>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
		if(mode != 100){
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <setDayOneIncrementMonth+0x4c>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	2b64      	cmp	r3, #100	; 0x64
 8001616:	d008      	beq.n	800162a <setDayOneIncrementMonth+0x3a>
			monthIndex++;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <setDayOneIncrementMonth+0x50>)
 800161a:	f993 3000 	ldrsb.w	r3, [r3]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	3301      	adds	r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	b25a      	sxtb	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <setDayOneIncrementMonth+0x50>)
 8001628:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000061 	.word	0x20000061
 800163c:	200002e4 	.word	0x200002e4
 8001640:	200000b1 	.word	0x200000b1

08001644 <setDayX>:
void setDayX(uint8_t num){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	date = num;
 800164e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <setDayX+0x20>)
 8001654:	701a      	strb	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000061 	.word	0x20000061

08001668 <compareAlarmClock>:

void compareAlarmClock(){ //Check If alarmIsOn and equal to alarm setting, alert!
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
//	char hexString[30];
//	sprintf(hexString,"%d %d %d // %d %d\r\n",hourNum,minuteNum,secondNum,alarmHour,alarmMinute);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);
	if(alarmIsOn == true && hourNum == alarmHour && minuteNum == alarmMinute && secondNum == 0){
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <compareAlarmClock+0x60>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d023      	beq.n	80016be <compareAlarmClock+0x56>
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <compareAlarmClock+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <compareAlarmClock+0x68>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d11d      	bne.n	80016be <compareAlarmClock+0x56>
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <compareAlarmClock+0x6c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <compareAlarmClock+0x70>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d117      	bne.n	80016be <compareAlarmClock+0x56>
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <compareAlarmClock+0x74>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d113      	bne.n	80016be <compareAlarmClock+0x56>
		alarmIsAlert = true;
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <compareAlarmClock+0x78>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
		char hexString[30];
		sprintf(hexString,"Clock Alert! First Time\r\n");
 800169c:	463b      	mov	r3, r7
 800169e:	4911      	ldr	r1, [pc, #68]	; (80016e4 <compareAlarmClock+0x7c>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00b f893 	bl	800c7cc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fdc9 	bl	8000240 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4639      	mov	r1, r7
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <compareAlarmClock+0x80>)
 80016ba:	f009 fee5 	bl	800b488 <HAL_UART_Transmit>
	}
}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000060 	.word	0x20000060
 80016cc:	20000040 	.word	0x20000040
 80016d0:	200002d0 	.word	0x200002d0
 80016d4:	2000003c 	.word	0x2000003c
 80016d8:	200002cc 	.word	0x200002cc
 80016dc:	20000038 	.word	0x20000038
 80016e0:	200002f0 	.word	0x200002f0
 80016e4:	0800ebc0 	.word	0x0800ebc0
 80016e8:	2000068c 	.word	0x2000068c

080016ec <calculationClock>:


}

//Calculation
void calculationClock(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

	millisecondHAL = HAL_GetTick();
 80016f0:	f005 f874 	bl	80067dc <HAL_GetTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	498c      	ldr	r1, [pc, #560]	; (8001930 <calculationClock+0x244>)
 80016fe:	e9c1 2300 	strd	r2, r3, [r1]
//	char hexString[30];
//	sprintf(hexString,"%d\r\n", millisecond);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

	//Normal Clock
	if (millisecond >= 1000){
 8001702:	4b8c      	ldr	r3, [pc, #560]	; (8001934 <calculationClock+0x248>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800170a:	d30a      	bcc.n	8001722 <calculationClock+0x36>
		millisecond = millisecond - 1000;
 800170c:	4b89      	ldr	r3, [pc, #548]	; (8001934 <calculationClock+0x248>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001714:	4a87      	ldr	r2, [pc, #540]	; (8001934 <calculationClock+0x248>)
 8001716:	6013      	str	r3, [r2, #0]
		secondNum++;
 8001718:	4b87      	ldr	r3, [pc, #540]	; (8001938 <calculationClock+0x24c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a86      	ldr	r2, [pc, #536]	; (8001938 <calculationClock+0x24c>)
 8001720:	6013      	str	r3, [r2, #0]
	}
	if (secondNum >= 60){
 8001722:	4b85      	ldr	r3, [pc, #532]	; (8001938 <calculationClock+0x24c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b3b      	cmp	r3, #59	; 0x3b
 8001728:	dd0e      	ble.n	8001748 <calculationClock+0x5c>
		secondNum = 0;
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <calculationClock+0x24c>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001730:	4b82      	ldr	r3, [pc, #520]	; (800193c <calculationClock+0x250>)
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d004      	beq.n	8001744 <calculationClock+0x58>
			minuteNum++;
 800173a:	4b81      	ldr	r3, [pc, #516]	; (8001940 <calculationClock+0x254>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a7f      	ldr	r2, [pc, #508]	; (8001940 <calculationClock+0x254>)
 8001742:	6013      	str	r3, [r2, #0]
		}
		compareAlarmClock();
 8001744:	f7ff ff90 	bl	8001668 <compareAlarmClock>
	}
	if (minuteNum >= 60){
 8001748:	4b7d      	ldr	r3, [pc, #500]	; (8001940 <calculationClock+0x254>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b3b      	cmp	r3, #59	; 0x3b
 800174e:	dd0c      	ble.n	800176a <calculationClock+0x7e>
		minuteNum = 0;
 8001750:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <calculationClock+0x254>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001756:	4b79      	ldr	r3, [pc, #484]	; (800193c <calculationClock+0x250>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	2b64      	cmp	r3, #100	; 0x64
 800175e:	d004      	beq.n	800176a <calculationClock+0x7e>
			hourNum++;
 8001760:	4b78      	ldr	r3, [pc, #480]	; (8001944 <calculationClock+0x258>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a77      	ldr	r2, [pc, #476]	; (8001944 <calculationClock+0x258>)
 8001768:	6013      	str	r3, [r2, #0]
		}
	}
	if (hourNum >= 24){
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <calculationClock+0x258>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b17      	cmp	r3, #23
 8001770:	dd19      	ble.n	80017a6 <calculationClock+0xba>
		hourNum = 0;
 8001772:	4b74      	ldr	r3, [pc, #464]	; (8001944 <calculationClock+0x258>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001778:	4b70      	ldr	r3, [pc, #448]	; (800193c <calculationClock+0x250>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d011      	beq.n	80017a6 <calculationClock+0xba>
			dayIndex++;
 8001782:	4b71      	ldr	r3, [pc, #452]	; (8001948 <calculationClock+0x25c>)
 8001784:	f993 3000 	ldrsb.w	r3, [r3]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	3301      	adds	r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	b25a      	sxtb	r2, r3
 8001790:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <calculationClock+0x25c>)
 8001792:	701a      	strb	r2, [r3, #0]
			date++;
 8001794:	4b6d      	ldr	r3, [pc, #436]	; (800194c <calculationClock+0x260>)
 8001796:	f993 3000 	ldrsb.w	r3, [r3]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	b25a      	sxtb	r2, r3
 80017a2:	4b6a      	ldr	r3, [pc, #424]	; (800194c <calculationClock+0x260>)
 80017a4:	701a      	strb	r2, [r3, #0]
		}
	}
	//Normal Date
	if (dayIndex >= 7){
 80017a6:	4b68      	ldr	r3, [pc, #416]	; (8001948 <calculationClock+0x25c>)
 80017a8:	f993 3000 	ldrsb.w	r3, [r3]
 80017ac:	2b06      	cmp	r3, #6
 80017ae:	dd02      	ble.n	80017b6 <calculationClock+0xca>
		dayIndex = 0;
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <calculationClock+0x25c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
	}
	if (year % 4 == 0){ //check for FEB 29 days
 80017b6:	4b66      	ldr	r3, [pc, #408]	; (8001950 <calculationClock+0x264>)
 80017b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d115      	bne.n	80017f4 <calculationClock+0x108>
		if(monthIndex == 1){
 80017c8:	4b62      	ldr	r3, [pc, #392]	; (8001954 <calculationClock+0x268>)
 80017ca:	f993 3000 	ldrsb.w	r3, [r3]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d103      	bne.n	80017da <calculationClock+0xee>
			setDayOneIncrementMonth(29); // 29 days
 80017d2:	201d      	movs	r0, #29
 80017d4:	f7ff ff0c 	bl	80015f0 <setDayOneIncrementMonth>
 80017d8:	e021      	b.n	800181e <calculationClock+0x132>
		}else if(check31Days() == true){
 80017da:	f7ff fed9 	bl	8001590 <check31Days>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <calculationClock+0x100>
			setDayOneIncrementMonth(31); // 31 days
 80017e4:	201f      	movs	r0, #31
 80017e6:	f7ff ff03 	bl	80015f0 <setDayOneIncrementMonth>
 80017ea:	e018      	b.n	800181e <calculationClock+0x132>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 80017ec:	201e      	movs	r0, #30
 80017ee:	f7ff feff 	bl	80015f0 <setDayOneIncrementMonth>
 80017f2:	e014      	b.n	800181e <calculationClock+0x132>
		}
	}else{
		if(monthIndex == 1){
 80017f4:	4b57      	ldr	r3, [pc, #348]	; (8001954 <calculationClock+0x268>)
 80017f6:	f993 3000 	ldrsb.w	r3, [r3]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d103      	bne.n	8001806 <calculationClock+0x11a>
			setDayOneIncrementMonth(28); // 28 days
 80017fe:	201c      	movs	r0, #28
 8001800:	f7ff fef6 	bl	80015f0 <setDayOneIncrementMonth>
 8001804:	e00b      	b.n	800181e <calculationClock+0x132>
		}else if(check31Days() == true){
 8001806:	f7ff fec3 	bl	8001590 <check31Days>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <calculationClock+0x12c>
			setDayOneIncrementMonth(31); // 31 days
 8001810:	201f      	movs	r0, #31
 8001812:	f7ff feed 	bl	80015f0 <setDayOneIncrementMonth>
 8001816:	e002      	b.n	800181e <calculationClock+0x132>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 8001818:	201e      	movs	r0, #30
 800181a:	f7ff fee9 	bl	80015f0 <setDayOneIncrementMonth>
		}
	}
	if (monthIndex >= 12){
 800181e:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <calculationClock+0x268>)
 8001820:	f993 3000 	ldrsb.w	r3, [r3]
 8001824:	2b0b      	cmp	r3, #11
 8001826:	dd10      	ble.n	800184a <calculationClock+0x15e>
		monthIndex = 0;
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <calculationClock+0x268>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
		if (mode != 100){
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <calculationClock+0x250>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d008      	beq.n	800184a <calculationClock+0x15e>
			year++;
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <calculationClock+0x264>)
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	b29b      	uxth	r3, r3
 8001840:	3301      	adds	r3, #1
 8001842:	b29b      	uxth	r3, r3
 8001844:	b21a      	sxth	r2, r3
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <calculationClock+0x264>)
 8001848:	801a      	strh	r2, [r3, #0]
		}
	}
	if (year >= 10000){
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <calculationClock+0x264>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	f242 720f 	movw	r2, #9999	; 0x270f
 8001854:	4293      	cmp	r3, r2
 8001856:	dd02      	ble.n	800185e <calculationClock+0x172>
		year = 1;
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <calculationClock+0x264>)
 800185a:	2201      	movs	r2, #1
 800185c:	801a      	strh	r2, [r3, #0]
	}

	//check for editMode
	if(mode == 100){
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <calculationClock+0x250>)
 8001860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	d15f      	bne.n	8001928 <calculationClock+0x23c>
		if (minuteNum < 0){
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <calculationClock+0x254>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da02      	bge.n	8001876 <calculationClock+0x18a>
			minuteNum = 59;
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <calculationClock+0x254>)
 8001872:	223b      	movs	r2, #59	; 0x3b
 8001874:	601a      	str	r2, [r3, #0]
		}
		if (hourNum < 0){
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <calculationClock+0x258>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	da02      	bge.n	8001884 <calculationClock+0x198>
			hourNum = 23;
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <calculationClock+0x258>)
 8001880:	2217      	movs	r2, #23
 8001882:	601a      	str	r2, [r3, #0]
		}
		if (dayIndex < 0){
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <calculationClock+0x25c>)
 8001886:	f993 3000 	ldrsb.w	r3, [r3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	da02      	bge.n	8001894 <calculationClock+0x1a8>
			dayIndex = 6;
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <calculationClock+0x25c>)
 8001890:	2206      	movs	r2, #6
 8001892:	701a      	strb	r2, [r3, #0]
		}
		if (date < 1){
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <calculationClock+0x260>)
 8001896:	f993 3000 	ldrsb.w	r3, [r3]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dc33      	bgt.n	8001906 <calculationClock+0x21a>
			if (year % 4 == 0){ //check for FEB 29 days
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <calculationClock+0x264>)
 80018a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d115      	bne.n	80018dc <calculationClock+0x1f0>
				if(monthIndex == 1){
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <calculationClock+0x268>)
 80018b2:	f993 3000 	ldrsb.w	r3, [r3]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d103      	bne.n	80018c2 <calculationClock+0x1d6>
					setDayX(29); // 29 days
 80018ba:	201d      	movs	r0, #29
 80018bc:	f7ff fec2 	bl	8001644 <setDayX>
 80018c0:	e021      	b.n	8001906 <calculationClock+0x21a>
				}else if(check31Days() == true){
 80018c2:	f7ff fe65 	bl	8001590 <check31Days>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <calculationClock+0x1e8>
					setDayX(31); // 31 days
 80018cc:	201f      	movs	r0, #31
 80018ce:	f7ff feb9 	bl	8001644 <setDayX>
 80018d2:	e018      	b.n	8001906 <calculationClock+0x21a>
				}else{
					setDayX(30); // 30 days
 80018d4:	201e      	movs	r0, #30
 80018d6:	f7ff feb5 	bl	8001644 <setDayX>
 80018da:	e014      	b.n	8001906 <calculationClock+0x21a>
				}
			}else{
				if(monthIndex == 1){
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <calculationClock+0x268>)
 80018de:	f993 3000 	ldrsb.w	r3, [r3]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d103      	bne.n	80018ee <calculationClock+0x202>
					setDayX(28); // 28 days
 80018e6:	201c      	movs	r0, #28
 80018e8:	f7ff feac 	bl	8001644 <setDayX>
 80018ec:	e00b      	b.n	8001906 <calculationClock+0x21a>
				}else if(check31Days() == true){
 80018ee:	f7ff fe4f 	bl	8001590 <check31Days>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <calculationClock+0x214>
					setDayX(31); // 31 days
 80018f8:	201f      	movs	r0, #31
 80018fa:	f7ff fea3 	bl	8001644 <setDayX>
 80018fe:	e002      	b.n	8001906 <calculationClock+0x21a>
				}else{
					setDayX(30); // 30 days
 8001900:	201e      	movs	r0, #30
 8001902:	f7ff fe9f 	bl	8001644 <setDayX>
				}
			}
		}
		if (monthIndex < 0){
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <calculationClock+0x268>)
 8001908:	f993 3000 	ldrsb.w	r3, [r3]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da02      	bge.n	8001916 <calculationClock+0x22a>
			monthIndex = 11;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <calculationClock+0x268>)
 8001912:	220b      	movs	r2, #11
 8001914:	701a      	strb	r2, [r3, #0]
		}
		if (year < 1){
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <calculationClock+0x264>)
 8001918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191c:	2b00      	cmp	r3, #0
 800191e:	dc03      	bgt.n	8001928 <calculationClock+0x23c>
			year = 9999;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <calculationClock+0x264>)
 8001922:	f242 720f 	movw	r2, #9999	; 0x270f
 8001926:	801a      	strh	r2, [r3, #0]
		}
	}

	saveData();
 8001928:	f7ff fcb4 	bl	8001294 <saveData>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000300 	.word	0x20000300
 8001934:	200002d4 	.word	0x200002d4
 8001938:	20000038 	.word	0x20000038
 800193c:	200002e4 	.word	0x200002e4
 8001940:	2000003c 	.word	0x2000003c
 8001944:	20000040 	.word	0x20000040
 8001948:	200000b0 	.word	0x200000b0
 800194c:	20000061 	.word	0x20000061
 8001950:	200000b2 	.word	0x200000b2
 8001954:	200000b1 	.word	0x200000b1

08001958 <dayScreen>:

//Date Clock Atomic
void dayScreen(bool status, bool isEdit){
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af02      	add	r7, sp, #8
 800195e:	4603      	mov	r3, r0
 8001960:	460a      	mov	r2, r1
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]

	if (prevDayIndex != dayIndex || isEdit == true){
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <dayScreen+0xe0>)
 800196a:	f993 2000 	ldrsb.w	r2, [r3]
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <dayScreen+0xe4>)
 8001970:	f993 3000 	ldrsb.w	r3, [r3]
 8001974:	429a      	cmp	r2, r3
 8001976:	d102      	bne.n	800197e <dayScreen+0x26>
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d054      	beq.n	8001a28 <dayScreen+0xd0>
		if (status == true){
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d02a      	beq.n	80019da <dayScreen+0x82>
			sprintf(Temp_Buffer_text, "%s", dayText[dayIndex]);
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <dayScreen+0xe4>)
 8001986:	f993 3000 	ldrsb.w	r3, [r3]
 800198a:	461a      	mov	r2, r3
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <dayScreen+0xe8>)
 800198e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001992:	461a      	mov	r2, r3
 8001994:	492b      	ldr	r1, [pc, #172]	; (8001a44 <dayScreen+0xec>)
 8001996:	482c      	ldr	r0, [pc, #176]	; (8001a48 <dayScreen+0xf0>)
 8001998:	f00a ff18 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <dayScreen+0xf4>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3b05      	subs	r3, #5
 80019a4:	b2d9      	uxtb	r1, r3
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <dayScreen+0xf8>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019b2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001a30 <dayScreen+0xd8>
 80019b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019be:	edc7 7a00 	vstr	s15, [r7]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	2300      	movs	r3, #0
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	2302      	movs	r3, #2
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d2:	481d      	ldr	r0, [pc, #116]	; (8001a48 <dayScreen+0xf0>)
 80019d4:	f004 f9b8 	bl	8005d48 <ILI9341_Draw_Text>
 80019d8:	e021      	b.n	8001a1e <dayScreen+0xc6>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 80019da:	491e      	ldr	r1, [pc, #120]	; (8001a54 <dayScreen+0xfc>)
 80019dc:	481a      	ldr	r0, [pc, #104]	; (8001a48 <dayScreen+0xf0>)
 80019de:	f00a fef5 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <dayScreen+0xf4>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3b05      	subs	r3, #5
 80019ea:	b2d9      	uxtb	r1, r3
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <dayScreen+0xf8>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019f8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001a30 <dayScreen+0xd8>
 80019fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a04:	edc7 7a00 	vstr	s15, [r7]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <dayScreen+0xf0>)
 8001a1a:	f004 f995 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevDayIndex = dayIndex;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <dayScreen+0xe4>)
 8001a20:	f993 2000 	ldrsb.w	r2, [r3]
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <dayScreen+0xe0>)
 8001a26:	701a      	strb	r2, [r3, #0]
	}
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	9999999a 	.word	0x9999999a
 8001a34:	3fb99999 	.word	0x3fb99999
 8001a38:	200000b5 	.word	0x200000b5
 8001a3c:	200000b0 	.word	0x200000b0
 8001a40:	20000064 	.word	0x20000064
 8001a44:	0800ebdc 	.word	0x0800ebdc
 8001a48:	20000484 	.word	0x20000484
 8001a4c:	20000054 	.word	0x20000054
 8001a50:	20000056 	.word	0x20000056
 8001a54:	0800ebe0 	.word	0x0800ebe0

08001a58 <dateScreen>:
void dateScreen(bool status, bool isEdit){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71bb      	strb	r3, [r7, #6]
	if (prevDate != date || isEdit == true){
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <dateScreen+0xf0>)
 8001a6a:	f993 2000 	ldrsb.w	r2, [r3]
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <dateScreen+0xf4>)
 8001a70:	f993 3000 	ldrsb.w	r3, [r3]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d102      	bne.n	8001a7e <dateScreen+0x26>
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d05a      	beq.n	8001b34 <dateScreen+0xdc>
		if (status == true){
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d02b      	beq.n	8001adc <dateScreen+0x84>
			sprintf(Temp_Buffer_text, "%02d", (int)date);
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <dateScreen+0xf4>)
 8001a86:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4930      	ldr	r1, [pc, #192]	; (8001b50 <dateScreen+0xf8>)
 8001a8e:	4831      	ldr	r0, [pc, #196]	; (8001b54 <dateScreen+0xfc>)
 8001a90:	f00a fe9c 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <dateScreen+0x100>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <dateScreen+0x104>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	b2d9      	uxtb	r1, r3
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <dateScreen+0x108>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ab4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001b40 <dateScreen+0xe8>
 8001ab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001abc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ac0:	edc7 7a00 	vstr	s15, [r7]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2302      	movs	r3, #2
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad4:	481f      	ldr	r0, [pc, #124]	; (8001b54 <dateScreen+0xfc>)
 8001ad6:	f004 f937 	bl	8005d48 <ILI9341_Draw_Text>
 8001ada:	e026      	b.n	8001b2a <dateScreen+0xd2>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001adc:	4921      	ldr	r1, [pc, #132]	; (8001b64 <dateScreen+0x10c>)
 8001ade:	481d      	ldr	r0, [pc, #116]	; (8001b54 <dateScreen+0xfc>)
 8001ae0:	f00a fe74 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <dateScreen+0x100>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <dateScreen+0x104>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3303      	adds	r3, #3
 8001af6:	b2d9      	uxtb	r1, r3
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <dateScreen+0x108>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b04:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001b40 <dateScreen+0xe8>
 8001b08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b10:	edc7 7a00 	vstr	s15, [r7]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <dateScreen+0xfc>)
 8001b26:	f004 f90f 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevDate = date;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <dateScreen+0xf4>)
 8001b2c:	f993 2000 	ldrsb.w	r2, [r3]
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <dateScreen+0xf0>)
 8001b32:	701a      	strb	r2, [r3, #0]
	}
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	f3af 8000 	nop.w
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3fb99999 	.word	0x3fb99999
 8001b48:	200000b4 	.word	0x200000b4
 8001b4c:	20000061 	.word	0x20000061
 8001b50:	0800ebe4 	.word	0x0800ebe4
 8001b54:	20000484 	.word	0x20000484
 8001b58:	20000054 	.word	0x20000054
 8001b5c:	20000058 	.word	0x20000058
 8001b60:	20000056 	.word	0x20000056
 8001b64:	0800ebec 	.word	0x0800ebec

08001b68 <monthScreen>:
void monthScreen(bool status, bool isEdit){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	if (prevMonthIndex != monthIndex || isEdit == true){
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <monthScreen+0x100>)
 8001b7a:	f993 2000 	ldrsb.w	r2, [r3]
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <monthScreen+0x104>)
 8001b80:	f993 3000 	ldrsb.w	r3, [r3]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d102      	bne.n	8001b8e <monthScreen+0x26>
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d062      	beq.n	8001c54 <monthScreen+0xec>
		if (status == true){
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d031      	beq.n	8001bf8 <monthScreen+0x90>
			sprintf(Temp_Buffer_text, "%s", monthText[monthIndex]);
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <monthScreen+0x104>)
 8001b96:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <monthScreen+0x108>)
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4933      	ldr	r1, [pc, #204]	; (8001c74 <monthScreen+0x10c>)
 8001ba6:	4834      	ldr	r0, [pc, #208]	; (8001c78 <monthScreen+0x110>)
 8001ba8:	f00a fe10 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <monthScreen+0x114>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <monthScreen+0x118>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	b2d9      	uxtb	r1, r3
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <monthScreen+0x11c>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bd0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001c60 <monthScreen+0xf8>
 8001bd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bdc:	edc7 7a00 	vstr	s15, [r7]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2302      	movs	r3, #2
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf0:	4821      	ldr	r0, [pc, #132]	; (8001c78 <monthScreen+0x110>)
 8001bf2:	f004 f8a9 	bl	8005d48 <ILI9341_Draw_Text>
 8001bf6:	e028      	b.n	8001c4a <monthScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001bf8:	4923      	ldr	r1, [pc, #140]	; (8001c88 <monthScreen+0x120>)
 8001bfa:	481f      	ldr	r0, [pc, #124]	; (8001c78 <monthScreen+0x110>)
 8001bfc:	f00a fde6 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <monthScreen+0x114>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <monthScreen+0x118>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3b05      	subs	r3, #5
 8001c16:	b2d9      	uxtb	r1, r3
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <monthScreen+0x11c>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c24:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001c60 <monthScreen+0xf8>
 8001c28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c30:	edc7 7a00 	vstr	s15, [r7]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <monthScreen+0x110>)
 8001c46:	f004 f87f 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevMonthIndex = monthIndex;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <monthScreen+0x104>)
 8001c4c:	f993 2000 	ldrsb.w	r2, [r3]
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <monthScreen+0x100>)
 8001c52:	701a      	strb	r2, [r3, #0]
	}
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fb99999 	.word	0x3fb99999
 8001c68:	200000b6 	.word	0x200000b6
 8001c6c:	200000b1 	.word	0x200000b1
 8001c70:	20000080 	.word	0x20000080
 8001c74:	0800ebdc 	.word	0x0800ebdc
 8001c78:	20000484 	.word	0x20000484
 8001c7c:	20000054 	.word	0x20000054
 8001c80:	20000058 	.word	0x20000058
 8001c84:	20000056 	.word	0x20000056
 8001c88:	0800ebe0 	.word	0x0800ebe0
 8001c8c:	00000000 	.word	0x00000000

08001c90 <yearScreen>:
void yearScreen(bool status, bool isEdit){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	4603      	mov	r3, r0
 8001c98:	460a      	mov	r2, r1
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	71bb      	strb	r3, [r7, #6]
	if (prevYear != year || isEdit == true){
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <yearScreen+0x100>)
 8001ca2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <yearScreen+0x104>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d102      	bne.n	8001cb6 <yearScreen+0x26>
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d062      	beq.n	8001d7c <yearScreen+0xec>
		if (status == true){
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d02f      	beq.n	8001d1c <yearScreen+0x8c>
			sprintf(Temp_Buffer_text, "%04d", (int)year);
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <yearScreen+0x104>)
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4934      	ldr	r1, [pc, #208]	; (8001d98 <yearScreen+0x108>)
 8001cc6:	4835      	ldr	r0, [pc, #212]	; (8001d9c <yearScreen+0x10c>)
 8001cc8:	f00a fd80 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <yearScreen+0x110>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <yearScreen+0x114>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	0049      	lsls	r1, r1, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	b2d9      	uxtb	r1, r3
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <yearScreen+0x118>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cf4:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001d88 <yearScreen+0xf8>
 8001cf8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cfc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d00:	edc7 7a00 	vstr	s15, [r7]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	4821      	ldr	r0, [pc, #132]	; (8001d9c <yearScreen+0x10c>)
 8001d16:	f004 f817 	bl	8005d48 <ILI9341_Draw_Text>
 8001d1a:	e02a      	b.n	8001d72 <yearScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "    ");
 8001d1c:	4923      	ldr	r1, [pc, #140]	; (8001dac <yearScreen+0x11c>)
 8001d1e:	481f      	ldr	r0, [pc, #124]	; (8001d9c <yearScreen+0x10c>)
 8001d20:	f00a fd54 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <yearScreen+0x110>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <yearScreen+0x114>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	0049      	lsls	r1, r1, #1
 8001d34:	440b      	add	r3, r1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	b2d9      	uxtb	r1, r3
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <yearScreen+0x118>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d4c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001d88 <yearScreen+0xf8>
 8001d50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d58:	edc7 7a00 	vstr	s15, [r7]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	2302      	movs	r3, #2
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6c:	480b      	ldr	r0, [pc, #44]	; (8001d9c <yearScreen+0x10c>)
 8001d6e:	f003 ffeb 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevYear = year;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <yearScreen+0x104>)
 8001d74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <yearScreen+0x100>)
 8001d7a:	801a      	strh	r2, [r3, #0]
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	f3af 8000 	nop.w
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fb99999 	.word	0x3fb99999
 8001d90:	200000b8 	.word	0x200000b8
 8001d94:	200000b2 	.word	0x200000b2
 8001d98:	0800ebf0 	.word	0x0800ebf0
 8001d9c:	20000484 	.word	0x20000484
 8001da0:	20000054 	.word	0x20000054
 8001da4:	20000058 	.word	0x20000058
 8001da8:	20000056 	.word	0x20000056
 8001dac:	0800ebf8 	.word	0x0800ebf8

08001db0 <displayDateScreen>:

//Display Date Clock Screen
void displayDateScreen(){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2001      	movs	r0, #1
 8001db8:	f7ff fdce 	bl	8001958 <dayScreen>
	dateScreen(true, false);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff fe4a 	bl	8001a58 <dateScreen>
	monthScreen(true, false);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff fece 	bl	8001b68 <monthScreen>
	yearScreen(true, false);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff ff5e 	bl	8001c90 <yearScreen>
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <displayAlarmIcon>:

void displayAlarmIcon(bool on){
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	if(on == true){
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8139 	beq.w	800205c <displayAlarmIcon+0x284>
		//Alarm
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, YELLOW);
 8001dea:	4b99      	ldr	r3, [pc, #612]	; (8002050 <displayAlarmIcon+0x278>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001df6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002028 <displayAlarmIcon+0x250>
 8001dfa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dfe:	4b95      	ldr	r3, [pc, #596]	; (8002054 <displayAlarmIcon+0x27c>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e12:	ee17 3a90 	vmov	r3, s15
 8001e16:	b298      	uxth	r0, r3
 8001e18:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <displayAlarmIcon+0x280>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e24:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002030 <displayAlarmIcon+0x258>
 8001e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e30:	ee17 3a90 	vmov	r3, s15
 8001e34:	b299      	uxth	r1, r3
 8001e36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e3a:	2206      	movs	r2, #6
 8001e3c:	f003 fd81 	bl	8005942 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, YELLOW);
 8001e40:	4b83      	ldr	r3, [pc, #524]	; (8002050 <displayAlarmIcon+0x278>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e4c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002028 <displayAlarmIcon+0x250>
 8001e50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e54:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <displayAlarmIcon+0x27c>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e68:	ee17 3a90 	vmov	r3, s15
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	4b7a      	ldr	r3, [pc, #488]	; (8002058 <displayAlarmIcon+0x280>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e7a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8002038 <displayAlarmIcon+0x260>
 8001e7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e8e:	ee17 3a90 	vmov	r3, s15
 8001e92:	b299      	uxth	r1, r3
 8001e94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e98:	2203      	movs	r2, #3
 8001e9a:	f003 fd52 	bl	8005942 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, YELLOW);
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <displayAlarmIcon+0x278>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eaa:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002040 <displayAlarmIcon+0x268>
 8001eae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001eb2:	4b68      	ldr	r3, [pc, #416]	; (8002054 <displayAlarmIcon+0x27c>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ebe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ec2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001ec6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001eca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ece:	ee17 3a90 	vmov	r3, s15
 8001ed2:	b298      	uxth	r0, r3
 8001ed4:	4b60      	ldr	r3, [pc, #384]	; (8002058 <displayAlarmIcon+0x280>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ee0:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8002048 <displayAlarmIcon+0x270>
 8001ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ee8:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ef0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ef4:	ee17 3a90 	vmov	r3, s15
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	4b55      	ldr	r3, [pc, #340]	; (8002050 <displayAlarmIcon+0x278>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f06:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8002040 <displayAlarmIcon+0x268>
 8001f0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f0e:	4b51      	ldr	r3, [pc, #324]	; (8002054 <displayAlarmIcon+0x27c>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f1e:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001f22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f2a:	ee17 3a90 	vmov	r3, s15
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b49      	ldr	r3, [pc, #292]	; (8002058 <displayAlarmIcon+0x280>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f3c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002048 <displayAlarmIcon+0x270>
 8001f40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f44:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001f48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f50:	ee17 3a90 	vmov	r3, s15
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8001f5a:	9400      	str	r4, [sp, #0]
 8001f5c:	f003 fdfa 	bl	8005b54 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <displayAlarmIcon+0x278>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f6c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8002040 <displayAlarmIcon+0x268>
 8001f70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <displayAlarmIcon+0x27c>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f84:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001f88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f90:	ee17 3a90 	vmov	r3, s15
 8001f94:	b298      	uxth	r0, r3
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <displayAlarmIcon+0x280>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fa2:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002048 <displayAlarmIcon+0x270>
 8001fa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001faa:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001fae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	b299      	uxth	r1, r3
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <displayAlarmIcon+0x278>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fc8:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002040 <displayAlarmIcon+0x268>
 8001fcc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <displayAlarmIcon+0x27c>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fdc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fe0:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001fe4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fe8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fec:	ee17 3a90 	vmov	r3, s15
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <displayAlarmIcon+0x280>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ffe:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002048 <displayAlarmIcon+0x270>
 8002002:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002006:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 800200a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800200e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002012:	ee17 3a90 	vmov	r3, s15
 8002016:	b29b      	uxth	r3, r3
 8002018:	2400      	movs	r4, #0
 800201a:	9400      	str	r4, [sp, #0]
 800201c:	f003 fd19 	bl	8005a52 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
	}
}
 8002020:	e134      	b.n	800228c <displayAlarmIcon+0x4b4>
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	d70a3d71 	.word	0xd70a3d71
 800202c:	3fed70a3 	.word	0x3fed70a3
 8002030:	0a3d70a4 	.word	0x0a3d70a4
 8002034:	3fc0a3d7 	.word	0x3fc0a3d7
 8002038:	47ae147b 	.word	0x47ae147b
 800203c:	3fc47ae1 	.word	0x3fc47ae1
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	3feccccc 	.word	0x3feccccc
 8002048:	9999999a 	.word	0x9999999a
 800204c:	3fb99999 	.word	0x3fb99999
 8002050:	20000052 	.word	0x20000052
 8002054:	20000054 	.word	0x20000054
 8002058:	20000056 	.word	0x20000056
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
 800205c:	4b98      	ldr	r3, [pc, #608]	; (80022c0 <displayAlarmIcon+0x4e8>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002068:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002298 <displayAlarmIcon+0x4c0>
 800206c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002070:	4b94      	ldr	r3, [pc, #592]	; (80022c4 <displayAlarmIcon+0x4ec>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800207c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002080:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002084:	ee17 3a90 	vmov	r3, s15
 8002088:	b298      	uxth	r0, r3
 800208a:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <displayAlarmIcon+0x4f0>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002096:	ed9f 6b82 	vldr	d6, [pc, #520]	; 80022a0 <displayAlarmIcon+0x4c8>
 800209a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800209e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a2:	ee17 3a90 	vmov	r3, s15
 80020a6:	b299      	uxth	r1, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	2206      	movs	r2, #6
 80020ac:	f003 fc49 	bl	8005942 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
 80020b0:	4b83      	ldr	r3, [pc, #524]	; (80022c0 <displayAlarmIcon+0x4e8>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020bc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002298 <displayAlarmIcon+0x4c0>
 80020c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020c4:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <displayAlarmIcon+0x4ec>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	b298      	uxth	r0, r3
 80020de:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <displayAlarmIcon+0x4f0>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020ea:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80022a8 <displayAlarmIcon+0x4d0>
 80020ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80020f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020fe:	ee17 3a90 	vmov	r3, s15
 8002102:	b299      	uxth	r1, r3
 8002104:	2300      	movs	r3, #0
 8002106:	2203      	movs	r2, #3
 8002108:	f003 fc1b 	bl	8005942 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 800210c:	4b6c      	ldr	r3, [pc, #432]	; (80022c0 <displayAlarmIcon+0x4e8>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002118:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80022b0 <displayAlarmIcon+0x4d8>
 800211c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <displayAlarmIcon+0x4ec>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800212c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002130:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8002134:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002138:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800213c:	ee17 3a90 	vmov	r3, s15
 8002140:	b298      	uxth	r0, r3
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <displayAlarmIcon+0x4f0>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800214e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80022b8 <displayAlarmIcon+0x4e0>
 8002152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002156:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 800215a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800215e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002162:	ee17 3a90 	vmov	r3, s15
 8002166:	b299      	uxth	r1, r3
 8002168:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <displayAlarmIcon+0x4e8>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002174:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80022b0 <displayAlarmIcon+0x4d8>
 8002178:	ee27 6b06 	vmul.f64	d6, d7, d6
 800217c:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <displayAlarmIcon+0x4ec>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800218c:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002190:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002194:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002198:	ee17 3a90 	vmov	r3, s15
 800219c:	b29a      	uxth	r2, r3
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <displayAlarmIcon+0x4f0>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80021aa:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80022b8 <displayAlarmIcon+0x4e0>
 80021ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021b2:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 80021b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021be:	ee17 3a90 	vmov	r3, s15
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2400      	movs	r4, #0
 80021c6:	9400      	str	r4, [sp, #0]
 80021c8:	f003 fcc4 	bl	8005b54 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 80021cc:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <displayAlarmIcon+0x4e8>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80021d8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80022b0 <displayAlarmIcon+0x4d8>
 80021dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <displayAlarmIcon+0x4ec>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80021ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021f0:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80021f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021fc:	ee17 3a90 	vmov	r3, s15
 8002200:	b298      	uxth	r0, r3
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <displayAlarmIcon+0x4f0>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800220e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80022b8 <displayAlarmIcon+0x4e0>
 8002212:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002216:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 800221a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800221e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002222:	ee17 3a90 	vmov	r3, s15
 8002226:	b299      	uxth	r1, r3
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <displayAlarmIcon+0x4e8>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002234:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80022b0 <displayAlarmIcon+0x4d8>
 8002238:	ee27 6b06 	vmul.f64	d6, d7, d6
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <displayAlarmIcon+0x4ec>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002248:	ee36 7b07 	vadd.f64	d7, d6, d7
 800224c:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002250:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002254:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002258:	ee17 3a90 	vmov	r3, s15
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <displayAlarmIcon+0x4f0>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800226a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80022b8 <displayAlarmIcon+0x4e0>
 800226e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002272:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8002276:	ee37 7b06 	vadd.f64	d7, d7, d6
 800227a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800227e:	ee17 3a90 	vmov	r3, s15
 8002282:	b29b      	uxth	r3, r3
 8002284:	2400      	movs	r4, #0
 8002286:	9400      	str	r4, [sp, #0]
 8002288:	f003 fbe3 	bl	8005a52 <ILI9341_Draw_Hollow_Rectangle_Coord>
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	f3af 8000 	nop.w
 8002298:	d70a3d71 	.word	0xd70a3d71
 800229c:	3fed70a3 	.word	0x3fed70a3
 80022a0:	0a3d70a4 	.word	0x0a3d70a4
 80022a4:	3fc0a3d7 	.word	0x3fc0a3d7
 80022a8:	47ae147b 	.word	0x47ae147b
 80022ac:	3fc47ae1 	.word	0x3fc47ae1
 80022b0:	cccccccd 	.word	0xcccccccd
 80022b4:	3feccccc 	.word	0x3feccccc
 80022b8:	9999999a 	.word	0x9999999a
 80022bc:	3fb99999 	.word	0x3fb99999
 80022c0:	20000052 	.word	0x20000052
 80022c4:	20000054 	.word	0x20000054
 80022c8:	20000056 	.word	0x20000056

080022cc <topBarScreen>:

//Top Screen
void topBarScreen(){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	displayDateScreen();
 80022d0:	f7ff fd6e 	bl	8001db0 <displayDateScreen>

	displayAlarmIcon(alarmIsOn);
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <topBarScreen+0x18>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fd7d 	bl	8001dd8 <displayAlarmIcon>
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000060 	.word	0x20000060

080022e8 <resetPrevNum>:

//Reset Prev Values
void resetPrevNum(){
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <resetPrevNum+0x54>)
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295
 80022f2:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <resetPrevNum+0x58>)
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <resetPrevNum+0x5c>)
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002302:	601a      	str	r2, [r3, #0]

	prevDayIndex = -1;
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <resetPrevNum+0x60>)
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	701a      	strb	r2, [r3, #0]
	prevDate = -1;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <resetPrevNum+0x64>)
 800230c:	22ff      	movs	r2, #255	; 0xff
 800230e:	701a      	strb	r2, [r3, #0]
	prevMonthIndex = -1;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <resetPrevNum+0x68>)
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	701a      	strb	r2, [r3, #0]
	prevYear = -1;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <resetPrevNum+0x6c>)
 8002318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231c:	801a      	strh	r2, [r3, #0]

	prevTemp = -1.0;
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <resetPrevNum+0x70>)
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <resetPrevNum+0x74>)
 8002322:	601a      	str	r2, [r3, #0]
	prevHumid = -1.0;
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <resetPrevNum+0x78>)
 8002326:	4a0d      	ldr	r2, [pc, #52]	; (800235c <resetPrevNum+0x74>)
 8002328:	601a      	str	r2, [r3, #0]
	prevPmTwoPointFive = -1.0;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <resetPrevNum+0x7c>)
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <resetPrevNum+0x74>)
 800232e:	601a      	str	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000044 	.word	0x20000044
 8002340:	20000048 	.word	0x20000048
 8002344:	2000004c 	.word	0x2000004c
 8002348:	200000b5 	.word	0x200000b5
 800234c:	200000b4 	.word	0x200000b4
 8002350:	200000b6 	.word	0x200000b6
 8002354:	200000b8 	.word	0x200000b8
 8002358:	20000024 	.word	0x20000024
 800235c:	bf800000 	.word	0xbf800000
 8002360:	20000028 	.word	0x20000028
 8002364:	2000002c 	.word	0x2000002c

08002368 <hourScreen>:

//Clock Screen Atomic
void hourScreen(bool status, bool isEdit){
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af02      	add	r7, sp, #8
 800236e:	4603      	mov	r3, r0
 8002370:	460a      	mov	r2, r1
 8002372:	71fb      	strb	r3, [r7, #7]
 8002374:	4613      	mov	r3, r2
 8002376:	71bb      	strb	r3, [r7, #6]
	if (prevHourNum != hourNum || isEdit == true){
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <hourScreen+0xd0>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b2f      	ldr	r3, [pc, #188]	; (800243c <hourScreen+0xd4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d102      	bne.n	800238a <hourScreen+0x22>
 8002384:	79bb      	ldrb	r3, [r7, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04e      	beq.n	8002428 <hourScreen+0xc0>
		if (status == true){
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d025      	beq.n	80023dc <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <hourScreen+0xd4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	492a      	ldr	r1, [pc, #168]	; (8002440 <hourScreen+0xd8>)
 8002398:	482a      	ldr	r0, [pc, #168]	; (8002444 <hourScreen+0xdc>)
 800239a:	f00a fa17 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <hourScreen+0xe0>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3b05      	subs	r3, #5
 80023a6:	b2d9      	uxtb	r1, r3
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <hourScreen+0xe4>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023b4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002430 <hourScreen+0xc8>
 80023b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023c0:	edc7 7a00 	vstr	s15, [r7]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	2300      	movs	r3, #0
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	2306      	movs	r3, #6
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	481b      	ldr	r0, [pc, #108]	; (8002444 <hourScreen+0xdc>)
 80023d6:	f003 fcb7 	bl	8005d48 <ILI9341_Draw_Text>
 80023da:	e021      	b.n	8002420 <hourScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80023dc:	491c      	ldr	r1, [pc, #112]	; (8002450 <hourScreen+0xe8>)
 80023de:	4819      	ldr	r0, [pc, #100]	; (8002444 <hourScreen+0xdc>)
 80023e0:	f00a f9f4 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <hourScreen+0xe0>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3b05      	subs	r3, #5
 80023ec:	b2d9      	uxtb	r1, r3
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <hourScreen+0xe4>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023fa:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002430 <hourScreen+0xc8>
 80023fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002402:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002406:	edc7 7a00 	vstr	s15, [r7]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	2300      	movs	r3, #0
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2306      	movs	r3, #6
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241a:	480a      	ldr	r0, [pc, #40]	; (8002444 <hourScreen+0xdc>)
 800241c:	f003 fc94 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <hourScreen+0xd4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <hourScreen+0xd0>)
 8002426:	6013      	str	r3, [r2, #0]
	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	33333333 	.word	0x33333333
 8002434:	3fd33333 	.word	0x3fd33333
 8002438:	2000004c 	.word	0x2000004c
 800243c:	20000040 	.word	0x20000040
 8002440:	0800ebe4 	.word	0x0800ebe4
 8002444:	20000484 	.word	0x20000484
 8002448:	20000054 	.word	0x20000054
 800244c:	20000056 	.word	0x20000056
 8002450:	0800ebec 	.word	0x0800ebec
 8002454:	00000000 	.word	0x00000000

08002458 <colonScreen>:

void colonScreen(bool status){
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af02      	add	r7, sp, #8
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	if (status == true){
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d022      	beq.n	80024ae <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8002468:	4927      	ldr	r1, [pc, #156]	; (8002508 <colonScreen+0xb0>)
 800246a:	4828      	ldr	r0, [pc, #160]	; (800250c <colonScreen+0xb4>)
 800246c:	f00a f9ae 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <colonScreen+0xb8>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3349      	adds	r3, #73	; 0x49
 8002478:	b2d9      	uxtb	r1, r3
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <colonScreen+0xbc>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002486:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002500 <colonScreen+0xa8>
 800248a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800248e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002492:	edc7 7a00 	vstr	s15, [r7]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	2300      	movs	r3, #0
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2304      	movs	r3, #4
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024a6:	4819      	ldr	r0, [pc, #100]	; (800250c <colonScreen+0xb4>)
 80024a8:	f003 fc4e 	bl	8005d48 <ILI9341_Draw_Text>
	}
	else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
	}
}
 80024ac:	e021      	b.n	80024f2 <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 80024ae:	491a      	ldr	r1, [pc, #104]	; (8002518 <colonScreen+0xc0>)
 80024b0:	4816      	ldr	r0, [pc, #88]	; (800250c <colonScreen+0xb4>)
 80024b2:	f00a f98b 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <colonScreen+0xb8>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3349      	adds	r3, #73	; 0x49
 80024be:	b2d9      	uxtb	r1, r3
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <colonScreen+0xbc>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024cc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002500 <colonScreen+0xa8>
 80024d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024d8:	edc7 7a00 	vstr	s15, [r7]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2304      	movs	r3, #4
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ec:	4807      	ldr	r0, [pc, #28]	; (800250c <colonScreen+0xb4>)
 80024ee:	f003 fc2b 	bl	8005d48 <ILI9341_Draw_Text>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	f3af 8000 	nop.w
 8002500:	66666666 	.word	0x66666666
 8002504:	3fd66666 	.word	0x3fd66666
 8002508:	0800ec00 	.word	0x0800ec00
 800250c:	20000484 	.word	0x20000484
 8002510:	20000054 	.word	0x20000054
 8002514:	20000056 	.word	0x20000056
 8002518:	0800ec04 	.word	0x0800ec04
 800251c:	00000000 	.word	0x00000000

08002520 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af02      	add	r7, sp, #8
 8002526:	4603      	mov	r3, r0
 8002528:	460a      	mov	r2, r1
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	4613      	mov	r3, r2
 800252e:	71bb      	strb	r3, [r7, #6]
	if (prevMinuteNum != minuteNum || isEdit == true){
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <minuteScreen+0xd0>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <minuteScreen+0xd4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d102      	bne.n	8002542 <minuteScreen+0x22>
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d04e      	beq.n	80025e0 <minuteScreen+0xc0>
		if (status == true){
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d025      	beq.n	8002594 <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <minuteScreen+0xd4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	492a      	ldr	r1, [pc, #168]	; (80025f8 <minuteScreen+0xd8>)
 8002550:	482a      	ldr	r0, [pc, #168]	; (80025fc <minuteScreen+0xdc>)
 8002552:	f00a f93b 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <minuteScreen+0xe0>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	b2d9      	uxtb	r1, r3
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <minuteScreen+0xe4>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800256c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80025e8 <minuteScreen+0xc8>
 8002570:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002574:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002578:	edc7 7a00 	vstr	s15, [r7]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2306      	movs	r3, #6
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800258c:	481b      	ldr	r0, [pc, #108]	; (80025fc <minuteScreen+0xdc>)
 800258e:	f003 fbdb 	bl	8005d48 <ILI9341_Draw_Text>
 8002592:	e021      	b.n	80025d8 <minuteScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8002594:	491c      	ldr	r1, [pc, #112]	; (8002608 <minuteScreen+0xe8>)
 8002596:	4819      	ldr	r0, [pc, #100]	; (80025fc <minuteScreen+0xdc>)
 8002598:	f00a f918 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <minuteScreen+0xe0>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3361      	adds	r3, #97	; 0x61
 80025a4:	b2d9      	uxtb	r1, r3
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <minuteScreen+0xe4>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025b2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80025e8 <minuteScreen+0xc8>
 80025b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025be:	edc7 7a00 	vstr	s15, [r7]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2306      	movs	r3, #6
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d2:	480a      	ldr	r0, [pc, #40]	; (80025fc <minuteScreen+0xdc>)
 80025d4:	f003 fbb8 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <minuteScreen+0xd4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <minuteScreen+0xd0>)
 80025de:	6013      	str	r3, [r2, #0]
	}
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	33333333 	.word	0x33333333
 80025ec:	3fd33333 	.word	0x3fd33333
 80025f0:	20000048 	.word	0x20000048
 80025f4:	2000003c 	.word	0x2000003c
 80025f8:	0800ebe4 	.word	0x0800ebe4
 80025fc:	20000484 	.word	0x20000484
 8002600:	20000054 	.word	0x20000054
 8002604:	20000056 	.word	0x20000056
 8002608:	0800ebec 	.word	0x0800ebec
 800260c:	00000000 	.word	0x00000000

08002610 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af02      	add	r7, sp, #8
 8002616:	4603      	mov	r3, r0
 8002618:	460a      	mov	r2, r1
 800261a:	71fb      	strb	r3, [r7, #7]
 800261c:	4613      	mov	r3, r2
 800261e:	71bb      	strb	r3, [r7, #6]
	if (prevSecondNum != secondNum || isEdit == true){
 8002620:	4b49      	ldr	r3, [pc, #292]	; (8002748 <secondScreen+0x138>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b49      	ldr	r3, [pc, #292]	; (800274c <secondScreen+0x13c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d102      	bne.n	8002632 <secondScreen+0x22>
 800262c:	79bb      	ldrb	r3, [r7, #6]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07c      	beq.n	800272c <secondScreen+0x11c>
		if (status == true){
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d03c      	beq.n	80026b2 <secondScreen+0xa2>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8002638:	4b44      	ldr	r3, [pc, #272]	; (800274c <secondScreen+0x13c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4944      	ldr	r1, [pc, #272]	; (8002750 <secondScreen+0x140>)
 8002640:	4844      	ldr	r0, [pc, #272]	; (8002754 <secondScreen+0x144>)
 8002642:	f00a f8c3 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 8002646:	4b44      	ldr	r3, [pc, #272]	; (8002758 <secondScreen+0x148>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002652:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002738 <secondScreen+0x128>
 8002656:	ee27 6b06 	vmul.f64	d6, d7, d6
 800265a:	4b40      	ldr	r3, [pc, #256]	; (800275c <secondScreen+0x14c>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002666:	ee36 7b07 	vadd.f64	d7, d6, d7
 800266a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800266e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002672:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002676:	edc7 7a00 	vstr	s15, [r7]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2d9      	uxtb	r1, r3
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <secondScreen+0x150>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	ee07 3a90 	vmov	s15, r3
 8002686:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800268a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002740 <secondScreen+0x130>
 800268e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002692:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002696:	edc7 7a00 	vstr	s15, [r7]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	2300      	movs	r3, #0
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2302      	movs	r3, #2
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026aa:	482a      	ldr	r0, [pc, #168]	; (8002754 <secondScreen+0x144>)
 80026ac:	f003 fb4c 	bl	8005d48 <ILI9341_Draw_Text>
 80026b0:	e038      	b.n	8002724 <secondScreen+0x114>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80026b2:	492c      	ldr	r1, [pc, #176]	; (8002764 <secondScreen+0x154>)
 80026b4:	4827      	ldr	r0, [pc, #156]	; (8002754 <secondScreen+0x144>)
 80026b6:	f00a f889 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <secondScreen+0x148>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026c6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002738 <secondScreen+0x128>
 80026ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <secondScreen+0x14c>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026de:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80026e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80026e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026ea:	edc7 7a00 	vstr	s15, [r7]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2d9      	uxtb	r1, r3
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <secondScreen+0x150>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026fe:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002740 <secondScreen+0x130>
 8002702:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002706:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800270a:	edc7 7a00 	vstr	s15, [r7]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	2300      	movs	r3, #0
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2302      	movs	r3, #2
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271e:	480d      	ldr	r0, [pc, #52]	; (8002754 <secondScreen+0x144>)
 8002720:	f003 fb12 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <secondScreen+0x13c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <secondScreen+0x138>)
 800272a:	6013      	str	r3, [r2, #0]
	}
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	f3af 8000 	nop.w
 8002738:	cccccccd 	.word	0xcccccccd
 800273c:	3feccccc 	.word	0x3feccccc
 8002740:	ae147ae1 	.word	0xae147ae1
 8002744:	3fdae147 	.word	0x3fdae147
 8002748:	20000044 	.word	0x20000044
 800274c:	20000038 	.word	0x20000038
 8002750:	0800ebe4 	.word	0x0800ebe4
 8002754:	20000484 	.word	0x20000484
 8002758:	20000052 	.word	0x20000052
 800275c:	20000054 	.word	0x20000054
 8002760:	20000056 	.word	0x20000056
 8002764:	0800ebec 	.word	0x0800ebec

08002768 <displayClockScreen>:

//Display Clock Screen
void displayClockScreen(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

	if (halfsecondState == false){ // colon behaviour
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <displayClockScreen+0x3c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <displayClockScreen+0x1a>
		colonScreen(true);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff fe6c 	bl	8002458 <colonScreen>
 8002780:	e002      	b.n	8002788 <displayClockScreen+0x20>
	}
	else{
		colonScreen(false);
 8002782:	2000      	movs	r0, #0
 8002784:	f7ff fe68 	bl	8002458 <colonScreen>
	}

	secondScreen(true, false);
 8002788:	2100      	movs	r1, #0
 800278a:	2001      	movs	r0, #1
 800278c:	f7ff ff40 	bl	8002610 <secondScreen>
	minuteScreen(true, false);
 8002790:	2100      	movs	r1, #0
 8002792:	2001      	movs	r0, #1
 8002794:	f7ff fec4 	bl	8002520 <minuteScreen>
	hourScreen(true, false);
 8002798:	2100      	movs	r1, #0
 800279a:	2001      	movs	r0, #1
 800279c:	f7ff fde4 	bl	8002368 <hourScreen>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000050 	.word	0x20000050

080027a8 <staticClockScreen>:

void staticClockScreen(){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	colonScreen(true);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7ff fe53 	bl	8002458 <colonScreen>
	hourScreen(true, false);
 80027b2:	2100      	movs	r1, #0
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7ff fdd7 	bl	8002368 <hourScreen>
	minuteScreen(true, false);
 80027ba:	2100      	movs	r1, #0
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff feaf 	bl	8002520 <minuteScreen>
	secondScreen(true, false);
 80027c2:	2100      	movs	r1, #0
 80027c4:	2001      	movs	r0, #1
 80027c6:	f7ff ff23 	bl	8002610 <secondScreen>
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <editHourScreen>:

//Edit Clock Screen
void editHourScreen()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	displayDateScreen(); // Init first
 80027d4:	f7ff faec 	bl	8001db0 <displayDateScreen>
	colonScreen(true);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7ff fe3d 	bl	8002458 <colonScreen>
	minuteScreen(true, false);
 80027de:	2100      	movs	r1, #0
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7ff fe9d 	bl	8002520 <minuteScreen>
	secondScreen(true, false);
 80027e6:	2100      	movs	r1, #0
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7ff ff11 	bl	8002610 <secondScreen>

	if (halfsecondState == false){ // hour
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <editHourScreen+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <editHourScreen+0x36>
		hourScreen(false, true);
 80027fc:	2101      	movs	r1, #1
 80027fe:	2000      	movs	r0, #0
 8002800:	f7ff fdb2 	bl	8002368 <hourScreen>
	}
	else{
		hourScreen(true, true);
	}
}
 8002804:	e003      	b.n	800280e <editHourScreen+0x3e>
		hourScreen(true, true);
 8002806:	2101      	movs	r1, #1
 8002808:	2001      	movs	r0, #1
 800280a:	f7ff fdad 	bl	8002368 <hourScreen>
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000050 	.word	0x20000050

08002818 <editMinuteScreen>:
void editMinuteScreen(){
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0

	colonScreen(true);
 800281c:	2001      	movs	r0, #1
 800281e:	f7ff fe1b 	bl	8002458 <colonScreen>
	hourScreen(true, false);
 8002822:	2100      	movs	r1, #0
 8002824:	2001      	movs	r0, #1
 8002826:	f7ff fd9f 	bl	8002368 <hourScreen>
	secondScreen(true, false);
 800282a:	2100      	movs	r1, #0
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff feef 	bl	8002610 <secondScreen>

	if (halfsecondState == false){ //minute
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <editMinuteScreen+0x40>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <editMinuteScreen+0x32>
		minuteScreen(false, true);
 8002840:	2101      	movs	r1, #1
 8002842:	2000      	movs	r0, #0
 8002844:	f7ff fe6c 	bl	8002520 <minuteScreen>
	}
	else{
		minuteScreen(true, true);
	}
}
 8002848:	e003      	b.n	8002852 <editMinuteScreen+0x3a>
		minuteScreen(true, true);
 800284a:	2101      	movs	r1, #1
 800284c:	2001      	movs	r0, #1
 800284e:	f7ff fe67 	bl	8002520 <minuteScreen>
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000050 	.word	0x20000050

0800285c <editSecondScreen>:
void editSecondScreen(){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002860:	2001      	movs	r0, #1
 8002862:	f7ff fdf9 	bl	8002458 <colonScreen>
	hourScreen(true, false);
 8002866:	2100      	movs	r1, #0
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff fd7d 	bl	8002368 <hourScreen>
	minuteScreen(true, false);
 800286e:	2100      	movs	r1, #0
 8002870:	2001      	movs	r0, #1
 8002872:	f7ff fe55 	bl	8002520 <minuteScreen>

	if (halfsecondState == false){ //second
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <editSecondScreen+0x40>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <editSecondScreen+0x32>
		secondScreen(false, true);
 8002884:	2101      	movs	r1, #1
 8002886:	2000      	movs	r0, #0
 8002888:	f7ff fec2 	bl	8002610 <secondScreen>
	}
	else{
		secondScreen(true, true);
	}
}
 800288c:	e003      	b.n	8002896 <editSecondScreen+0x3a>
		secondScreen(true, true);
 800288e:	2101      	movs	r1, #1
 8002890:	2001      	movs	r0, #1
 8002892:	f7ff febd 	bl	8002610 <secondScreen>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000050 	.word	0x20000050

080028a0 <editDayScreen>:

//Edit Date Clock Screen
void editDayScreen()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	dateScreen(true, false);
 80028a4:	2100      	movs	r1, #0
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7ff f8d6 	bl	8001a58 <dateScreen>
	monthScreen(true, false);
 80028ac:	2100      	movs	r1, #0
 80028ae:	2001      	movs	r0, #1
 80028b0:	f7ff f95a 	bl	8001b68 <monthScreen>
	yearScreen(true, false);
 80028b4:	2100      	movs	r1, #0
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7ff f9ea 	bl	8001c90 <yearScreen>

	if (halfsecondState == false){ // day
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <editDayScreen+0x40>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	f083 0301 	eor.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <editDayScreen+0x34>
		dayScreen(false, true);
 80028ca:	2101      	movs	r1, #1
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7ff f843 	bl	8001958 <dayScreen>
	}
	else{
		dayScreen(true, true);
	}
}
 80028d2:	e003      	b.n	80028dc <editDayScreen+0x3c>
		dayScreen(true, true);
 80028d4:	2101      	movs	r1, #1
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7ff f83e 	bl	8001958 <dayScreen>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000050 	.word	0x20000050

080028e4 <editDateScreen>:
void editDateScreen()
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 80028e8:	2100      	movs	r1, #0
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7ff f834 	bl	8001958 <dayScreen>
	monthScreen(true, false);
 80028f0:	2100      	movs	r1, #0
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7ff f938 	bl	8001b68 <monthScreen>
	yearScreen(true, false);
 80028f8:	2100      	movs	r1, #0
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7ff f9c8 	bl	8001c90 <yearScreen>

	if (halfsecondState == false){ // date
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <editDateScreen+0x40>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <editDateScreen+0x34>
		dateScreen(false, true);
 800290e:	2101      	movs	r1, #1
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff f8a1 	bl	8001a58 <dateScreen>
	}
	else{
		dateScreen(true, true);
	}
}
 8002916:	e003      	b.n	8002920 <editDateScreen+0x3c>
		dateScreen(true, true);
 8002918:	2101      	movs	r1, #1
 800291a:	2001      	movs	r0, #1
 800291c:	f7ff f89c 	bl	8001a58 <dateScreen>
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000050 	.word	0x20000050

08002928 <editMonthScreen>:
void editMonthScreen()
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 800292c:	2100      	movs	r1, #0
 800292e:	2001      	movs	r0, #1
 8002930:	f7ff f812 	bl	8001958 <dayScreen>
	dateScreen(true, false);
 8002934:	2100      	movs	r1, #0
 8002936:	2001      	movs	r0, #1
 8002938:	f7ff f88e 	bl	8001a58 <dateScreen>
	yearScreen(true, false);
 800293c:	2100      	movs	r1, #0
 800293e:	2001      	movs	r0, #1
 8002940:	f7ff f9a6 	bl	8001c90 <yearScreen>

	if (halfsecondState == false){ // month
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <editMonthScreen+0x40>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	f083 0301 	eor.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <editMonthScreen+0x34>
		monthScreen(false, true);
 8002952:	2101      	movs	r1, #1
 8002954:	2000      	movs	r0, #0
 8002956:	f7ff f907 	bl	8001b68 <monthScreen>
	}
	else{
		monthScreen(true, true);
	}
}
 800295a:	e003      	b.n	8002964 <editMonthScreen+0x3c>
		monthScreen(true, true);
 800295c:	2101      	movs	r1, #1
 800295e:	2001      	movs	r0, #1
 8002960:	f7ff f902 	bl	8001b68 <monthScreen>
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000050 	.word	0x20000050

0800296c <editYearScreen>:
void editYearScreen()
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	staticClockScreen(); // init Clock first in editing mode
 8002970:	f7ff ff1a 	bl	80027a8 <staticClockScreen>
	dayScreen(true, false);
 8002974:	2100      	movs	r1, #0
 8002976:	2001      	movs	r0, #1
 8002978:	f7fe ffee 	bl	8001958 <dayScreen>
	dateScreen(true, false);
 800297c:	2100      	movs	r1, #0
 800297e:	2001      	movs	r0, #1
 8002980:	f7ff f86a 	bl	8001a58 <dateScreen>
	monthScreen(true, false);
 8002984:	2100      	movs	r1, #0
 8002986:	2001      	movs	r0, #1
 8002988:	f7ff f8ee 	bl	8001b68 <monthScreen>

	if (halfsecondState == false){ // day
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <editYearScreen+0x44>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <editYearScreen+0x38>
		yearScreen(false, true);
 800299a:	2101      	movs	r1, #1
 800299c:	2000      	movs	r0, #0
 800299e:	f7ff f977 	bl	8001c90 <yearScreen>
	}
	else{
		yearScreen(true, true);
	}
}
 80029a2:	e003      	b.n	80029ac <editYearScreen+0x40>
		yearScreen(true, true);
 80029a4:	2101      	movs	r1, #1
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7ff f972 	bl	8001c90 <yearScreen>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000050 	.word	0x20000050
 80029b4:	00000000 	.word	0x00000000

080029b8 <bottomBarScreen>:

//Bottom Screen
void bottomBarScreen(){
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 80029be:	2302      	movs	r3, #2
 80029c0:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomHeight = maxHeight * 0.87;
 80029c2:	4bb3      	ldr	r3, [pc, #716]	; (8002c90 <bottomBarScreen+0x2d8>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029ce:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002c78 <bottomBarScreen+0x2c0>
 80029d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029da:	edc7 7a01 	vstr	s15, [r7, #4]
 80029de:	793b      	ldrb	r3, [r7, #4]
 80029e0:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 80029e2:	2333      	movs	r3, #51	; 0x33
 80029e4:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth * 0.25 + 51;
 80029e6:	4bab      	ldr	r3, [pc, #684]	; (8002c94 <bottomBarScreen+0x2dc>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029f2:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80029f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029fa:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002c80 <bottomBarScreen+0x2c8>
 80029fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a06:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a0a:	793b      	ldrb	r3, [r7, #4]
 8002a0c:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth * 0.50 + 51;
 8002a0e:	4ba1      	ldr	r3, [pc, #644]	; (8002c94 <bottomBarScreen+0x2dc>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a1a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a22:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002c80 <bottomBarScreen+0x2c8>
 8002a26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a32:	793b      	ldrb	r3, [r7, #4]
 8002a34:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002a36:	4b97      	ldr	r3, [pc, #604]	; (8002c94 <bottomBarScreen+0x2dc>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a42:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002a46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a4a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002c80 <bottomBarScreen+0x2c8>
 8002a4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a56:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a5a:	793b      	ldrb	r3, [r7, #4]
 8002a5c:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 8002a5e:	2337      	movs	r3, #55	; 0x37
 8002a60:	727b      	strb	r3, [r7, #9]

	//Rectangle Background Color
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1 + bottomWidth, maxHeight, RED);
 8002a62:	7b7b      	ldrb	r3, [r7, #13]
 8002a64:	b298      	uxth	r0, r3
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	7b7b      	ldrb	r3, [r7, #13]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	7a7b      	ldrb	r3, [r7, #9]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002a7e:	9400      	str	r4, [sp, #0]
 8002a80:	f003 f868 	bl	8005b54 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2 + bottomWidth, maxHeight, YELLOW);
 8002a84:	7b3b      	ldrb	r3, [r7, #12]
 8002a86:	b298      	uxth	r0, r3
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	b299      	uxth	r1, r3
 8002a8c:	7b3b      	ldrb	r3, [r7, #12]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	7a7b      	ldrb	r3, [r7, #9]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4b7d      	ldr	r3, [pc, #500]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8002aa0:	9400      	str	r4, [sp, #0]
 8002aa2:	f003 f857 	bl	8005b54 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3 + bottomWidth, maxHeight, CYAN);
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	b298      	uxth	r0, r3
 8002aaa:	7bbb      	ldrb	r3, [r7, #14]
 8002aac:	b299      	uxth	r1, r3
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	7a7b      	ldrb	r3, [r7, #9]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8002ac2:	9400      	str	r4, [sp, #0]
 8002ac4:	f003 f846 	bl	8005b54 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4 + bottomWidth, maxHeight, GREEN);
 8002ac8:	7abb      	ldrb	r3, [r7, #10]
 8002aca:	b298      	uxth	r0, r3
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	b299      	uxth	r1, r3
 8002ad0:	7abb      	ldrb	r3, [r7, #10]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	7a7b      	ldrb	r3, [r7, #9]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	4b6c      	ldr	r3, [pc, #432]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8002ae4:	9400      	str	r4, [sp, #0]
 8002ae6:	f003 f835 	bl	8005b54 <ILI9341_Draw_Filled_Rectangle_Coord>

	//Text Layout
	sprintf(Temp_Buffer_text, "MOD");
 8002aea:	496b      	ldr	r1, [pc, #428]	; (8002c98 <bottomBarScreen+0x2e0>)
 8002aec:	486b      	ldr	r0, [pc, #428]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002aee:	f009 fe6d 	bl	800c7cc <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.9, BLACK, size, RED);
 8002af2:	4b6b      	ldr	r3, [pc, #428]	; (8002ca0 <bottomBarScreen+0x2e8>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b2d9      	uxtb	r1, r3
 8002af8:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b04:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002c88 <bottomBarScreen+0x2d0>
 8002b08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b10:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b14:	793b      	ldrb	r3, [r7, #4]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002b20:	9001      	str	r0, [sp, #4]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2300      	movs	r3, #0
 8002b26:	485d      	ldr	r0, [pc, #372]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002b28:	f003 f90e 	bl	8005d48 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "ADJ");
 8002b2c:	495d      	ldr	r1, [pc, #372]	; (8002ca4 <bottomBarScreen+0x2ec>)
 8002b2e:	485b      	ldr	r0, [pc, #364]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002b30:	f009 fe4c 	bl	800c7cc <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.25 + offsetWidth, maxHeight * 0.9, BLACK, size, YELLOW);
 8002b34:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <bottomBarScreen+0x2dc>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b40:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002b44:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b48:	4b55      	ldr	r3, [pc, #340]	; (8002ca0 <bottomBarScreen+0x2e8>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b60:	793b      	ldrb	r3, [r7, #4]
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b70:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002c88 <bottomBarScreen+0x2d0>
 8002b74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b80:	793b      	ldrb	r3, [r7, #4]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002b8c:	9001      	str	r0, [sp, #4]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2300      	movs	r3, #0
 8002b92:	4842      	ldr	r0, [pc, #264]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002b94:	f003 f8d8 	bl	8005d48 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "BWD");
 8002b98:	4943      	ldr	r1, [pc, #268]	; (8002ca8 <bottomBarScreen+0x2f0>)
 8002b9a:	4840      	ldr	r0, [pc, #256]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002b9c:	f009 fe16 	bl	800c7cc <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.5 + offsetWidth, maxHeight * 0.9, BLACK, size, CYAN);
 8002ba0:	4b3c      	ldr	r3, [pc, #240]	; (8002c94 <bottomBarScreen+0x2dc>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	ee07 3a90 	vmov	s15, r3
 8002ba8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002bb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <bottomBarScreen+0x2e8>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bcc:	793b      	ldrb	r3, [r7, #4]
 8002bce:	b2d9      	uxtb	r1, r3
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bdc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002c88 <bottomBarScreen+0x2d0>
 8002be0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002be4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002be8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bec:	793b      	ldrb	r3, [r7, #4]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002bf8:	9001      	str	r0, [sp, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	4827      	ldr	r0, [pc, #156]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002c00:	f003 f8a2 	bl	8005d48 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "FWD");
 8002c04:	4929      	ldr	r1, [pc, #164]	; (8002cac <bottomBarScreen+0x2f4>)
 8002c06:	4825      	ldr	r0, [pc, #148]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002c08:	f009 fde0 	bl	800c7cc <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.75 + offsetWidth, maxHeight * 0.9, BLACK, size, GREEN);
 8002c0c:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <bottomBarScreen+0x2dc>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c18:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002c1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <bottomBarScreen+0x2e8>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c34:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c38:	793b      	ldrb	r3, [r7, #4]
 8002c3a:	b2d9      	uxtb	r1, r3
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <bottomBarScreen+0x2d8>)
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c48:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002c88 <bottomBarScreen+0x2d0>
 8002c4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c50:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c54:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c58:	793b      	ldrb	r3, [r7, #4]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002c64:	9001      	str	r0, [sp, #4]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	480c      	ldr	r0, [pc, #48]	; (8002c9c <bottomBarScreen+0x2e4>)
 8002c6c:	f003 f86c 	bl	8005d48 <ILI9341_Draw_Text>
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	3d70a3d7 	.word	0x3d70a3d7
 8002c7c:	3febd70a 	.word	0x3febd70a
 8002c80:	00000000 	.word	0x00000000
 8002c84:	40498000 	.word	0x40498000
 8002c88:	cccccccd 	.word	0xcccccccd
 8002c8c:	3feccccc 	.word	0x3feccccc
 8002c90:	20000056 	.word	0x20000056
 8002c94:	20000052 	.word	0x20000052
 8002c98:	0800ec08 	.word	0x0800ec08
 8002c9c:	20000484 	.word	0x20000484
 8002ca0:	20000054 	.word	0x20000054
 8002ca4:	0800ec0c 	.word	0x0800ec0c
 8002ca8:	0800ec10 	.word	0x0800ec10
 8002cac:	0800ec14 	.word	0x0800ec14

08002cb0 <bottomBarScreenUpdate>:
void bottomBarScreenUpdate(){
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 8002cba:	2333      	movs	r3, #51	; 0x33
 8002cbc:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomHeight = maxHeight * 0.87;
 8002cbe:	4bc6      	ldr	r3, [pc, #792]	; (8002fd8 <bottomBarScreenUpdate+0x328>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cca:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8002fb0 <bottomBarScreenUpdate+0x300>
 8002cce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002cda:	793b      	ldrb	r3, [r7, #4]
 8002cdc:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002cde:	4bbf      	ldr	r3, [pc, #764]	; (8002fdc <bottomBarScreenUpdate+0x32c>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cea:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002cee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cf2:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8002fb8 <bottomBarScreenUpdate+0x308>
 8002cf6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cfe:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d02:	793b      	ldrb	r3, [r7, #4]
 8002d04:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth = 55;
 8002d06:	2337      	movs	r3, #55	; 0x37
 8002d08:	72fb      	strb	r3, [r7, #11]

	//Update Temperature
	if(prevTemp != temp){
 8002d0a:	4bb5      	ldr	r3, [pc, #724]	; (8002fe0 <bottomBarScreenUpdate+0x330>)
 8002d0c:	ed93 7a00 	vldr	s14, [r3]
 8002d10:	4bb4      	ldr	r3, [pc, #720]	; (8002fe4 <bottomBarScreenUpdate+0x334>)
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1e:	d059      	beq.n	8002dd4 <bottomBarScreenUpdate+0x124>
		sprintf(Temp_Buffer_text, "%0.1f 'C", temp);
 8002d20:	4bb0      	ldr	r3, [pc, #704]	; (8002fe4 <bottomBarScreenUpdate+0x334>)
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d2a:	ec53 2b17 	vmov	r2, r3, d7
 8002d2e:	49ae      	ldr	r1, [pc, #696]	; (8002fe8 <bottomBarScreenUpdate+0x338>)
 8002d30:	48ae      	ldr	r0, [pc, #696]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002d32:	f009 fd4b 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002d36:	4ba9      	ldr	r3, [pc, #676]	; (8002fdc <bottomBarScreenUpdate+0x32c>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	ee07 3a90 	vmov	s15, r3
 8002d3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d42:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8002fc0 <bottomBarScreenUpdate+0x310>
 8002d46:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d4a:	4ba9      	ldr	r3, [pc, #676]	; (8002ff0 <bottomBarScreenUpdate+0x340>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d62:	793b      	ldrb	r3, [r7, #4]
 8002d64:	b2d9      	uxtb	r1, r3
 8002d66:	4b9c      	ldr	r3, [pc, #624]	; (8002fd8 <bottomBarScreenUpdate+0x328>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d72:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002fc8 <bottomBarScreenUpdate+0x318>
 8002d76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002d7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d86:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d8a:	793b      	ldrb	r3, [r7, #4]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2000      	movs	r0, #0
 8002d94:	9001      	str	r0, [sp, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9c:	4893      	ldr	r0, [pc, #588]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002d9e:	f002 ffd3 	bl	8005d48 <ILI9341_Draw_Text>
		prevTemp = temp;
 8002da2:	4b90      	ldr	r3, [pc, #576]	; (8002fe4 <bottomBarScreenUpdate+0x334>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a8e      	ldr	r2, [pc, #568]	; (8002fe0 <bottomBarScreenUpdate+0x330>)
 8002da8:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
 8002dac:	b298      	uxth	r0, r3
 8002dae:	7b7b      	ldrb	r3, [r7, #13]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b37      	subs	r3, #55	; 0x37
 8002db4:	b299      	uxth	r1, r3
 8002db6:	7b3b      	ldrb	r3, [r7, #12]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <bottomBarScreenUpdate+0x328>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	3b3e      	subs	r3, #62	; 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002dce:	9400      	str	r4, [sp, #0]
 8002dd0:	f002 fe3f 	bl	8005a52 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update Humidity
	if(prevHumid != humid){
 8002dd4:	4b87      	ldr	r3, [pc, #540]	; (8002ff4 <bottomBarScreenUpdate+0x344>)
 8002dd6:	ed93 7a00 	vldr	s14, [r3]
 8002dda:	4b87      	ldr	r3, [pc, #540]	; (8002ff8 <bottomBarScreenUpdate+0x348>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de8:	d059      	beq.n	8002e9e <bottomBarScreenUpdate+0x1ee>
		sprintf(Temp_Buffer_text, "%0.1f %%", humid);
 8002dea:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <bottomBarScreenUpdate+0x348>)
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002df4:	ec53 2b17 	vmov	r2, r3, d7
 8002df8:	4980      	ldr	r1, [pc, #512]	; (8002ffc <bottomBarScreenUpdate+0x34c>)
 8002dfa:	487c      	ldr	r0, [pc, #496]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002dfc:	f009 fce6 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.55 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002e00:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <bottomBarScreenUpdate+0x32c>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e0c:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002fd0 <bottomBarScreenUpdate+0x320>
 8002e10:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e14:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <bottomBarScreenUpdate+0x340>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e28:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e2c:	793b      	ldrb	r3, [r7, #4]
 8002e2e:	b2d9      	uxtb	r1, r3
 8002e30:	4b69      	ldr	r3, [pc, #420]	; (8002fd8 <bottomBarScreenUpdate+0x328>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e3c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002fc8 <bottomBarScreenUpdate+0x318>
 8002e40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e44:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002e48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e50:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e54:	793b      	ldrb	r3, [r7, #4]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	9001      	str	r0, [sp, #4]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e66:	4861      	ldr	r0, [pc, #388]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002e68:	f002 ff6e 	bl	8005d48 <ILI9341_Draw_Text>
		prevHumid = humid;
 8002e6c:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <bottomBarScreenUpdate+0x348>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a60      	ldr	r2, [pc, #384]	; (8002ff4 <bottomBarScreenUpdate+0x344>)
 8002e72:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002e74:	7bbb      	ldrb	r3, [r7, #14]
 8002e76:	b298      	uxth	r0, r3
 8002e78:	7b7b      	ldrb	r3, [r7, #13]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b37      	subs	r3, #55	; 0x37
 8002e7e:	b299      	uxth	r1, r3
 8002e80:	7b3b      	ldrb	r3, [r7, #12]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <bottomBarScreenUpdate+0x328>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	3b3e      	subs	r3, #62	; 0x3e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002e98:	9400      	str	r4, [sp, #0]
 8002e9a:	f002 fdda 	bl	8005a52 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update PM2.5
	if(prevPmTwoPointFive != pmTwoPointFive){ // update this value please
 8002e9e:	4b58      	ldr	r3, [pc, #352]	; (8003000 <bottomBarScreenUpdate+0x350>)
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	4b57      	ldr	r3, [pc, #348]	; (8003004 <bottomBarScreenUpdate+0x354>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	eeb4 7a67 	vcmp.f32	s14, s15
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	f000 80c6 	beq.w	8003042 <bottomBarScreenUpdate+0x392>
		sprintf(Temp_Buffer_text, "      %03d ug/m^3", (int)pmTwoPointFive);
 8002eb6:	4b53      	ldr	r3, [pc, #332]	; (8003004 <bottomBarScreenUpdate+0x354>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec0:	ee17 2a90 	vmov	r2, s15
 8002ec4:	4950      	ldr	r1, [pc, #320]	; (8003008 <bottomBarScreenUpdate+0x358>)
 8002ec6:	4849      	ldr	r0, [pc, #292]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002ec8:	f009 fc80 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK); // Change color
 8002ecc:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <bottomBarScreenUpdate+0x32c>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ed8:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002fc0 <bottomBarScreenUpdate+0x310>
 8002edc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <bottomBarScreenUpdate+0x340>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002eec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ef0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ef4:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ef8:	793b      	ldrb	r3, [r7, #4]
 8002efa:	b2d9      	uxtb	r1, r3
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <bottomBarScreenUpdate+0x328>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f08:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8002fc8 <bottomBarScreenUpdate+0x318>
 8002f0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f10:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002f14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f20:	793b      	ldrb	r3, [r7, #4]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2000      	movs	r0, #0
 8002f2a:	9001      	str	r0, [sp, #4]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f32:	482e      	ldr	r0, [pc, #184]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002f34:	f002 ff08 	bl	8005d48 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, "PM2.5");
 8002f38:	4934      	ldr	r1, [pc, #208]	; (800300c <bottomBarScreenUpdate+0x35c>)
 8002f3a:	482c      	ldr	r0, [pc, #176]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002f3c:	f009 fc46 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK);
 8002f40:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <bottomBarScreenUpdate+0x32c>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f4c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002fc0 <bottomBarScreenUpdate+0x310>
 8002f50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f54:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <bottomBarScreenUpdate+0x340>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f68:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f6c:	793b      	ldrb	r3, [r7, #4]
 8002f6e:	b2d9      	uxtb	r1, r3
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <bottomBarScreenUpdate+0x328>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f7c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002fc8 <bottomBarScreenUpdate+0x318>
 8002f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f84:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002f88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f90:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f94:	793b      	ldrb	r3, [r7, #4]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	9001      	str	r0, [sp, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa6:	4811      	ldr	r0, [pc, #68]	; (8002fec <bottomBarScreenUpdate+0x33c>)
 8002fa8:	f002 fece 	bl	8005d48 <ILI9341_Draw_Text>
 8002fac:	e030      	b.n	8003010 <bottomBarScreenUpdate+0x360>
 8002fae:	bf00      	nop
 8002fb0:	3d70a3d7 	.word	0x3d70a3d7
 8002fb4:	3febd70a 	.word	0x3febd70a
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	40498000 	.word	0x40498000
	...
 8002fc8:	66666666 	.word	0x66666666
 8002fcc:	3fe66666 	.word	0x3fe66666
 8002fd0:	9999999a 	.word	0x9999999a
 8002fd4:	3fe19999 	.word	0x3fe19999
 8002fd8:	20000056 	.word	0x20000056
 8002fdc:	20000052 	.word	0x20000052
 8002fe0:	20000024 	.word	0x20000024
 8002fe4:	20000018 	.word	0x20000018
 8002fe8:	0800ec18 	.word	0x0800ec18
 8002fec:	20000484 	.word	0x20000484
 8002ff0:	20000054 	.word	0x20000054
 8002ff4:	20000028 	.word	0x20000028
 8002ff8:	2000001c 	.word	0x2000001c
 8002ffc:	0800ec24 	.word	0x0800ec24
 8003000:	2000002c 	.word	0x2000002c
 8003004:	20000020 	.word	0x20000020
 8003008:	0800ec30 	.word	0x0800ec30
 800300c:	0800ec44 	.word	0x0800ec44

		prevPmTwoPointFive = pmTwoPointFive;
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <bottomBarScreenUpdate+0x39c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <bottomBarScreenUpdate+0x3a0>)
 8003016:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45+18, bottomWidth4 + bottomWidth, maxHeight-52+18, WHITE);
 8003018:	7bbb      	ldrb	r3, [r7, #14]
 800301a:	b298      	uxth	r0, r3
 800301c:	7b7b      	ldrb	r3, [r7, #13]
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b1b      	subs	r3, #27
 8003022:	b299      	uxth	r1, r3
 8003024:	7b3b      	ldrb	r3, [r7, #12]
 8003026:	b29a      	uxth	r2, r3
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4413      	add	r3, r2
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <bottomBarScreenUpdate+0x3a4>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	3b22      	subs	r3, #34	; 0x22
 8003036:	b29b      	uxth	r3, r3
 8003038:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800303c:	9400      	str	r4, [sp, #0]
 800303e:	f002 fd08 	bl	8005a52 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	20000020 	.word	0x20000020
 8003050:	2000002c 	.word	0x2000002c
 8003054:	20000056 	.word	0x20000056

08003058 <notifyPm>:

void notifyPm(){
 8003058:	b5b0      	push	{r4, r5, r7, lr}
 800305a:	ed2d 8b04 	vpush	{d8-d9}
 800305e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8003062:	af12      	add	r7, sp, #72	; 0x48
	float *respondRead;
		respondRead = read_sensirion();
 8003064:	f7fd ff80 	bl	8000f68 <read_sensirion>
 8003068:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

	if(respondRead[1] >= 999){
 800306c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003070:	3304      	adds	r3, #4
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8003370 <notifyPm+0x318>
 800307a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	db04      	blt.n	800308e <notifyPm+0x36>
		respondRead[1] = 999;
 8003084:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003088:	3304      	adds	r3, #4
 800308a:	4aba      	ldr	r2, [pc, #744]	; (8003374 <notifyPm+0x31c>)
 800308c:	601a      	str	r2, [r3, #0]
	}
	if(respondRead[2] >= 999){
 800308e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003092:	3308      	adds	r3, #8
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003370 <notifyPm+0x318>
 800309c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	db04      	blt.n	80030b0 <notifyPm+0x58>
		respondRead[2] = 999;
 80030a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030aa:	3308      	adds	r3, #8
 80030ac:	4ab1      	ldr	r2, [pc, #708]	; (8003374 <notifyPm+0x31c>)
 80030ae:	601a      	str	r2, [r3, #0]
	}
	if(respondRead[3] >= 999){
 80030b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030b4:	330c      	adds	r3, #12
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003370 <notifyPm+0x318>
 80030be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	db04      	blt.n	80030d2 <notifyPm+0x7a>
		respondRead[3] = 999;
 80030c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030cc:	330c      	adds	r3, #12
 80030ce:	4aa9      	ldr	r2, [pc, #676]	; (8003374 <notifyPm+0x31c>)
 80030d0:	601a      	str	r2, [r3, #0]
	}
	if(respondRead[4] >= 999){
 80030d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030d6:	3310      	adds	r3, #16
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003370 <notifyPm+0x318>
 80030e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	db04      	blt.n	80030f4 <notifyPm+0x9c>
		respondRead[4] = 999;
 80030ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030ee:	3310      	adds	r3, #16
 80030f0:	4aa0      	ldr	r2, [pc, #640]	; (8003374 <notifyPm+0x31c>)
 80030f2:	601a      	str	r2, [r3, #0]
	}

	if(respondRead[1] > 0 && respondRead[1] <= 9999 &&
 80030f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030f8:	3304      	adds	r3, #4
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003106:	f340 8111 	ble.w	800332c <notifyPm+0x2d4>
 800310a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800310e:	3304      	adds	r3, #4
 8003110:	edd3 7a00 	vldr	s15, [r3]
 8003114:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8003378 <notifyPm+0x320>
 8003118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003120:	f200 8104 	bhi.w	800332c <notifyPm+0x2d4>
		respondRead[2] > 0 && respondRead[2] <= 9999 &&
 8003124:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003128:	3308      	adds	r3, #8
 800312a:	edd3 7a00 	vldr	s15, [r3]
	if(respondRead[1] > 0 && respondRead[1] <= 9999 &&
 800312e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003136:	f340 80f9 	ble.w	800332c <notifyPm+0x2d4>
		respondRead[2] > 0 && respondRead[2] <= 9999 &&
 800313a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800313e:	3308      	adds	r3, #8
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003378 <notifyPm+0x320>
 8003148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	f200 80ec 	bhi.w	800332c <notifyPm+0x2d4>
		respondRead[3] > 0 && respondRead[3] <= 9999 &&
 8003154:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003158:	330c      	adds	r3, #12
 800315a:	edd3 7a00 	vldr	s15, [r3]
		respondRead[2] > 0 && respondRead[2] <= 9999 &&
 800315e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	f340 80e1 	ble.w	800332c <notifyPm+0x2d4>
		respondRead[3] > 0 && respondRead[3] <= 9999 &&
 800316a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800316e:	330c      	adds	r3, #12
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003378 <notifyPm+0x320>
 8003178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	f200 80d4 	bhi.w	800332c <notifyPm+0x2d4>
		respondRead[4] > 0 && respondRead[4] <= 9999){
 8003184:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003188:	3310      	adds	r3, #16
 800318a:	edd3 7a00 	vldr	s15, [r3]
		respondRead[3] > 0 && respondRead[3] <= 9999 &&
 800318e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	f340 80c9 	ble.w	800332c <notifyPm+0x2d4>
		respondRead[4] > 0 && respondRead[4] <= 9999){
 800319a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800319e:	3310      	adds	r3, #16
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003378 <notifyPm+0x320>
 80031a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	f200 80bc 	bhi.w	800332c <notifyPm+0x2d4>

		pmTwoPointFive = respondRead[1];
 80031b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4a70      	ldr	r2, [pc, #448]	; (800337c <notifyPm+0x324>)
 80031bc:	6013      	str	r3, [r2, #0]

		if(isPmSend == false){
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <notifyPm+0x328>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	f083 0301 	eor.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80af 	beq.w	800332c <notifyPm+0x2d4>
			if(respondRead[1]>=250){
 80031ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031d2:	3304      	adds	r3, #4
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003384 <notifyPm+0x32c>
 80031dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	db03      	blt.n	80031ee <notifyPm+0x196>
				sent_string_to_mcu("HAZ");
 80031e6:	4868      	ldr	r0, [pc, #416]	; (8003388 <notifyPm+0x330>)
 80031e8:	f7fd ff6c 	bl	80010c4 <sent_string_to_mcu>
 80031ec:	e01e      	b.n	800322c <notifyPm+0x1d4>
			}
			else if(respondRead[1]>=150){
 80031ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031f2:	3304      	adds	r3, #4
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800338c <notifyPm+0x334>
 80031fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	db03      	blt.n	800320e <notifyPm+0x1b6>
				sent_string_to_mcu("VUH");
 8003206:	4862      	ldr	r0, [pc, #392]	; (8003390 <notifyPm+0x338>)
 8003208:	f7fd ff5c 	bl	80010c4 <sent_string_to_mcu>
 800320c:	e00e      	b.n	800322c <notifyPm+0x1d4>
			}
			else if(respondRead[1]>=55){
 800320e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003212:	3304      	adds	r3, #4
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003394 <notifyPm+0x33c>
 800321c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	db02      	blt.n	800322c <notifyPm+0x1d4>
				sent_string_to_mcu("UHT");
 8003226:	485c      	ldr	r0, [pc, #368]	; (8003398 <notifyPm+0x340>)
 8003228:	f7fd ff4c 	bl	80010c4 <sent_string_to_mcu>
			}
			if(respondRead[1]>=55){
 800322c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003230:	3304      	adds	r3, #4
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003394 <notifyPm+0x33c>
 800323a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	db70      	blt.n	8003326 <notifyPm+0x2ce>
				println("Danger Air");
 8003244:	4855      	ldr	r0, [pc, #340]	; (800339c <notifyPm+0x344>)
 8003246:	f7fd fe25 	bl	8000e94 <println>
				println("Sending");
 800324a:	4855      	ldr	r0, [pc, #340]	; (80033a0 <notifyPm+0x348>)
 800324c:	f7fd fe22 	bl	8000e94 <println>
				char stringBuffer[500];
				sprintf(stringBuffer, "EXC %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f" , respondRead[0], respondRead[1], respondRead[2], respondRead[3], respondRead[4], respondRead[5], respondRead[6], respondRead[7], respondRead[8], respondRead[9]);
 8003250:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800325c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003260:	3304      	adds	r3, #4
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800326a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800326e:	3308      	adds	r3, #8
 8003270:	edd3 6a00 	vldr	s13, [r3]
 8003274:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003278:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800327c:	330c      	adds	r3, #12
 800327e:	edd3 5a00 	vldr	s11, [r3]
 8003282:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8003286:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800328a:	3310      	adds	r3, #16
 800328c:	edd3 4a00 	vldr	s9, [r3]
 8003290:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8003294:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003298:	3314      	adds	r3, #20
 800329a:	edd3 3a00 	vldr	s7, [r3]
 800329e:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80032a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032a6:	3318      	adds	r3, #24
 80032a8:	edd3 2a00 	vldr	s5, [r3]
 80032ac:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80032b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032b4:	331c      	adds	r3, #28
 80032b6:	edd3 1a00 	vldr	s3, [r3]
 80032ba:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80032be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032c2:	3320      	adds	r3, #32
 80032c4:	edd3 0a00 	vldr	s1, [r3]
 80032c8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80032cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032d0:	3324      	adds	r3, #36	; 0x24
 80032d2:	ed93 8a00 	vldr	s16, [r3]
 80032d6:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80032da:	4638      	mov	r0, r7
 80032dc:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 80032e0:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 80032e4:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 80032e8:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 80032ec:	ed8d 3b08 	vstr	d3, [sp, #32]
 80032f0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80032f4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80032f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80032fc:	ed8d 7b00 	vstr	d7, [sp]
 8003300:	ec53 2b19 	vmov	r2, r3, d9
 8003304:	4927      	ldr	r1, [pc, #156]	; (80033a4 <notifyPm+0x34c>)
 8003306:	f009 fa61 	bl	800c7cc <siprintf>
				sent_string_to_mcu(stringBuffer);
 800330a:	463b      	mov	r3, r7
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd fed9 	bl	80010c4 <sent_string_to_mcu>

				isPmSend = true;
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <notifyPm+0x328>)
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
				pmSendPrevMillisecondHAL = millisecondHAL;
 8003318:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <notifyPm+0x350>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	4923      	ldr	r1, [pc, #140]	; (80033ac <notifyPm+0x354>)
 8003320:	e9c1 2300 	strd	r2, r3, [r1]
 8003324:	e002      	b.n	800332c <notifyPm+0x2d4>
			}
			else{
				println("Normal Air");
 8003326:	4822      	ldr	r0, [pc, #136]	; (80033b0 <notifyPm+0x358>)
 8003328:	f7fd fdb4 	bl	8000e94 <println>
			}
		}

	}

	if(millisecondHAL - pmSendPrevMillisecondHAL >= 10000){
 800332c:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <notifyPm+0x350>)
 800332e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <notifyPm+0x354>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	1a84      	subs	r4, r0, r2
 800333a:	eb61 0503 	sbc.w	r5, r1, r3
 800333e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	42ab      	cmp	r3, r5
 8003348:	bf08      	it	eq
 800334a:	42a2      	cmpeq	r2, r4
 800334c:	d208      	bcs.n	8003360 <notifyPm+0x308>
		isPmSend = false;
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <notifyPm+0x328>)
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
		pmSendPrevMillisecondHAL = millisecondHAL;
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <notifyPm+0x350>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	4914      	ldr	r1, [pc, #80]	; (80033ac <notifyPm+0x354>)
 800335c:	e9c1 2300 	strd	r2, r3, [r1]
//
//	if(millisecondHAL - pmSendPrevMillisecondHAL >= 10000){
//		isPmSend = false;
//		pmSendPrevMillisecondHAL = millisecondHAL;
//	}
}
 8003360:	bf00      	nop
 8003362:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8003366:	46bd      	mov	sp, r7
 8003368:	ecbd 8b04 	vpop	{d8-d9}
 800336c:	bdb0      	pop	{r4, r5, r7, pc}
 800336e:	bf00      	nop
 8003370:	4479c000 	.word	0x4479c000
 8003374:	4479c000 	.word	0x4479c000
 8003378:	461c3c00 	.word	0x461c3c00
 800337c:	20000020 	.word	0x20000020
 8003380:	200002ef 	.word	0x200002ef
 8003384:	437a0000 	.word	0x437a0000
 8003388:	0800ec4c 	.word	0x0800ec4c
 800338c:	43160000 	.word	0x43160000
 8003390:	0800ec50 	.word	0x0800ec50
 8003394:	425c0000 	.word	0x425c0000
 8003398:	0800ec54 	.word	0x0800ec54
 800339c:	0800ec58 	.word	0x0800ec58
 80033a0:	0800ec64 	.word	0x0800ec64
 80033a4:	0800ec6c 	.word	0x0800ec6c
 80033a8:	20000300 	.word	0x20000300
 80033ac:	20000308 	.word	0x20000308
 80033b0:	0800eca4 	.word	0x0800eca4
 80033b4:	00000000 	.word	0x00000000

080033b8 <resisterMonitor>:

void resisterMonitor(){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0

	  float dutyCycleScreen = 0.0;
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 80033c4:	bf00      	nop
 80033c6:	2164      	movs	r1, #100	; 0x64
 80033c8:	4829      	ldr	r0, [pc, #164]	; (8003470 <resisterMonitor+0xb8>)
 80033ca:	f003 fb49 	bl	8006a60 <HAL_ADC_PollForConversion>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f8      	bne.n	80033c6 <resisterMonitor+0xe>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 80033d4:	4826      	ldr	r0, [pc, #152]	; (8003470 <resisterMonitor+0xb8>)
 80033d6:	f003 fbce 	bl	8006b76 <HAL_ADC_GetValue>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a25      	ldr	r2, [pc, #148]	; (8003474 <resisterMonitor+0xbc>)
 80033de:	6013      	str	r3, [r2, #0]
	  lightPercent = adc_val*100 / 4095;
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <resisterMonitor+0xbc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2264      	movs	r2, #100	; 0x64
 80033e6:	fb02 f203 	mul.w	r2, r2, r3
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <resisterMonitor+0xc0>)
 80033ec:	fba3 1302 	umull	r1, r3, r3, r2
 80033f0:	1ad2      	subs	r2, r2, r3
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	0adb      	lsrs	r3, r3, #11
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <resisterMonitor+0xc4>)
 80033fc:	601a      	str	r2, [r3, #0]

	  //Change Screen Light Output
	  //PWM
	  dutyCycleScreen = ((adc_val/4095.0) * 0.8) + 0.2;
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <resisterMonitor+0xbc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800340a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8003458 <resisterMonitor+0xa0>
 800340e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003412:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003460 <resisterMonitor+0xa8>
 8003416:	ee27 7b06 	vmul.f64	d7, d7, d6
 800341a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003468 <resisterMonitor+0xb0>
 800341e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003422:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003426:	edc7 7a01 	vstr	s15, [r7, #4]
	  //No. 2
	  htim3.Instance -> CCR1 = (100-1) * dutyCycleScreen;
 800342a:	edd7 7a01 	vldr	s15, [r7, #4]
 800342e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003480 <resisterMonitor+0xc8>
 8003432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <resisterMonitor+0xcc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800343e:	ee17 2a90 	vmov	r2, s15
 8003442:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003444:	2100      	movs	r1, #0
 8003446:	480f      	ldr	r0, [pc, #60]	; (8003484 <resisterMonitor+0xcc>)
 8003448:	f006 fec4 	bl	800a1d4 <HAL_TIM_PWM_Start>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	f3af 8000 	nop.w
 8003458:	00000000 	.word	0x00000000
 800345c:	40affe00 	.word	0x40affe00
 8003460:	9999999a 	.word	0x9999999a
 8003464:	3fe99999 	.word	0x3fe99999
 8003468:	9999999a 	.word	0x9999999a
 800346c:	3fc99999 	.word	0x3fc99999
 8003470:	200003b0 	.word	0x200003b0
 8003474:	200002e0 	.word	0x200002e0
 8003478:	00100101 	.word	0x00100101
 800347c:	20000014 	.word	0x20000014
 8003480:	42c60000 	.word	0x42c60000
 8003484:	200005a8 	.word	0x200005a8

08003488 <resetPrevStopWatch>:
//State
bool initialStopWatchScreen = false;
bool isStopWatchRunning = false;


void resetPrevStopWatch(){
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
	prevStopWatchHour = -1;
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <resetPrevStopWatch+0x30>)
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	601a      	str	r2, [r3, #0]
	prevStopWatchMinute = -1;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <resetPrevStopWatch+0x34>)
 8003496:	f04f 32ff 	mov.w	r2, #4294967295
 800349a:	601a      	str	r2, [r3, #0]
	prevStopWatchSecond = -1;
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <resetPrevStopWatch+0x38>)
 800349e:	f04f 32ff 	mov.w	r2, #4294967295
 80034a2:	601a      	str	r2, [r3, #0]
	prevStopWatchMillisecond = -1;
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <resetPrevStopWatch+0x3c>)
 80034a6:	f04f 32ff 	mov.w	r2, #4294967295
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	200000bc 	.word	0x200000bc
 80034bc:	200000c0 	.word	0x200000c0
 80034c0:	200000c4 	.word	0x200000c4
 80034c4:	200000c8 	.word	0x200000c8

080034c8 <resetStopWatch>:
void resetStopWatch(){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
	stopWatchHour = 0;
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <resetStopWatch+0x24>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
	stopWatchMinute = 0;
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <resetStopWatch+0x28>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
	stopWatchSecond = 0;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <resetStopWatch+0x2c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
	stopWatchMillisecond = 0;
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <resetStopWatch+0x30>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
	resetPrevStopWatch();
 80034e4:	f7ff ffd0 	bl	8003488 <resetPrevStopWatch>
}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	2000031c 	.word	0x2000031c
 80034f0:	20000320 	.word	0x20000320
 80034f4:	20000324 	.word	0x20000324
 80034f8:	20000328 	.word	0x20000328
 80034fc:	00000000 	.word	0x00000000

08003500 <displayStopWatchScreen>:

void displayStopWatchScreen(){
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af02      	add	r7, sp, #8
	if(stopWatchHour < 1){ // Normal StopWatch Mode
 8003506:	4ba8      	ldr	r3, [pc, #672]	; (80037a8 <displayStopWatchScreen+0x2a8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f300 80a8 	bgt.w	8003660 <displayStopWatchScreen+0x160>
		if(prevStopWatchMinute != stopWatchMinute){
 8003510:	4ba6      	ldr	r3, [pc, #664]	; (80037ac <displayStopWatchScreen+0x2ac>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4ba6      	ldr	r3, [pc, #664]	; (80037b0 <displayStopWatchScreen+0x2b0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d02a      	beq.n	8003572 <displayStopWatchScreen+0x72>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 800351c:	4ba4      	ldr	r3, [pc, #656]	; (80037b0 <displayStopWatchScreen+0x2b0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	49a4      	ldr	r1, [pc, #656]	; (80037b4 <displayStopWatchScreen+0x2b4>)
 8003524:	48a4      	ldr	r0, [pc, #656]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 8003526:	f009 f951 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800352a:	4ba4      	ldr	r3, [pc, #656]	; (80037bc <displayStopWatchScreen+0x2bc>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b2d9      	uxtb	r1, r3
 8003530:	4ba3      	ldr	r3, [pc, #652]	; (80037c0 <displayStopWatchScreen+0x2c0>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800353c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80037a0 <displayStopWatchScreen+0x2a0>
 8003540:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003544:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003548:	ee37 7b06 	vadd.f64	d7, d7, d6
 800354c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003550:	edc7 7a01 	vstr	s15, [r7, #4]
 8003554:	793b      	ldrb	r3, [r7, #4]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	2300      	movs	r3, #0
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2305      	movs	r3, #5
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003564:	4894      	ldr	r0, [pc, #592]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 8003566:	f002 fbef 	bl	8005d48 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 800356a:	4b91      	ldr	r3, [pc, #580]	; (80037b0 <displayStopWatchScreen+0x2b0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a8f      	ldr	r2, [pc, #572]	; (80037ac <displayStopWatchScreen+0x2ac>)
 8003570:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchSecond != stopWatchSecond){
 8003572:	4b94      	ldr	r3, [pc, #592]	; (80037c4 <displayStopWatchScreen+0x2c4>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b94      	ldr	r3, [pc, #592]	; (80037c8 <displayStopWatchScreen+0x2c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d02c      	beq.n	80035d8 <displayStopWatchScreen+0xd8>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 800357e:	4b92      	ldr	r3, [pc, #584]	; (80037c8 <displayStopWatchScreen+0x2c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	498b      	ldr	r1, [pc, #556]	; (80037b4 <displayStopWatchScreen+0x2b4>)
 8003586:	488c      	ldr	r0, [pc, #560]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 8003588:	f009 f920 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800358c:	4b8b      	ldr	r3, [pc, #556]	; (80037bc <displayStopWatchScreen+0x2bc>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3346      	adds	r3, #70	; 0x46
 8003594:	b2d9      	uxtb	r1, r3
 8003596:	4b8a      	ldr	r3, [pc, #552]	; (80037c0 <displayStopWatchScreen+0x2c0>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035a2:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80037a0 <displayStopWatchScreen+0x2a0>
 80035a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035aa:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80035ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80035ba:	793b      	ldrb	r3, [r7, #4]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	2305      	movs	r3, #5
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ca:	487b      	ldr	r0, [pc, #492]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 80035cc:	f002 fbbc 	bl	8005d48 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 80035d0:	4b7d      	ldr	r3, [pc, #500]	; (80037c8 <displayStopWatchScreen+0x2c8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7b      	ldr	r2, [pc, #492]	; (80037c4 <displayStopWatchScreen+0x2c4>)
 80035d6:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchMillisecond != stopWatchMillisecond){
 80035d8:	4b7c      	ldr	r3, [pc, #496]	; (80037cc <displayStopWatchScreen+0x2cc>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <displayStopWatchScreen+0x2d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f000 80d9 	beq.w	8003798 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)((stopWatchMillisecond/10)%100));
 80035e6:	4b7a      	ldr	r3, [pc, #488]	; (80037d0 <displayStopWatchScreen+0x2d0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7a      	ldr	r2, [pc, #488]	; (80037d4 <displayStopWatchScreen+0x2d4>)
 80035ec:	fb82 1203 	smull	r1, r2, r2, r3
 80035f0:	1092      	asrs	r2, r2, #2
 80035f2:	17db      	asrs	r3, r3, #31
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	4a78      	ldr	r2, [pc, #480]	; (80037d8 <displayStopWatchScreen+0x2d8>)
 80035f8:	fb82 1203 	smull	r1, r2, r2, r3
 80035fc:	1151      	asrs	r1, r2, #5
 80035fe:	17da      	asrs	r2, r3, #31
 8003600:	1a8a      	subs	r2, r1, r2
 8003602:	2164      	movs	r1, #100	; 0x64
 8003604:	fb01 f202 	mul.w	r2, r1, r2
 8003608:	1a9a      	subs	r2, r3, r2
 800360a:	496a      	ldr	r1, [pc, #424]	; (80037b4 <displayStopWatchScreen+0x2b4>)
 800360c:	486a      	ldr	r0, [pc, #424]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 800360e:	f009 f8dd 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8003612:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <displayStopWatchScreen+0x2bc>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3b74      	subs	r3, #116	; 0x74
 800361a:	b2d9      	uxtb	r1, r3
 800361c:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <displayStopWatchScreen+0x2c0>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003628:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80037a0 <displayStopWatchScreen+0x2a0>
 800362c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003630:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003634:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003638:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800363c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003640:	793b      	ldrb	r3, [r7, #4]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	2305      	movs	r3, #5
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003650:	4859      	ldr	r0, [pc, #356]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 8003652:	f002 fb79 	bl	8005d48 <ILI9341_Draw_Text>
			prevStopWatchMillisecond = stopWatchMillisecond;
 8003656:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <displayStopWatchScreen+0x2d0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5c      	ldr	r2, [pc, #368]	; (80037cc <displayStopWatchScreen+0x2cc>)
 800365c:	6013      	str	r3, [r2, #0]
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
			prevStopWatchSecond = stopWatchSecond;
		}
	}
}
 800365e:	e09b      	b.n	8003798 <displayStopWatchScreen+0x298>
	}else if (stopWatchHour >= 1){ // counting more than equal to 1 hour
 8003660:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <displayStopWatchScreen+0x2a8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f340 8097 	ble.w	8003798 <displayStopWatchScreen+0x298>
		if(prevStopWatchHour != stopWatchHour){
 800366a:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <displayStopWatchScreen+0x2dc>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <displayStopWatchScreen+0x2a8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d02a      	beq.n	80036cc <displayStopWatchScreen+0x1cc>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchHour);
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <displayStopWatchScreen+0x2a8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	494d      	ldr	r1, [pc, #308]	; (80037b4 <displayStopWatchScreen+0x2b4>)
 800367e:	484e      	ldr	r0, [pc, #312]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 8003680:	f009 f8a4 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8003684:	4b4d      	ldr	r3, [pc, #308]	; (80037bc <displayStopWatchScreen+0x2bc>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b2d9      	uxtb	r1, r3
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <displayStopWatchScreen+0x2c0>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003696:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80037a0 <displayStopWatchScreen+0x2a0>
 800369a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800369e:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80036a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80036ae:	793b      	ldrb	r3, [r7, #4]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	2300      	movs	r3, #0
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	2305      	movs	r3, #5
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036be:	483e      	ldr	r0, [pc, #248]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 80036c0:	f002 fb42 	bl	8005d48 <ILI9341_Draw_Text>
			prevStopWatchHour = stopWatchHour;
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <displayStopWatchScreen+0x2a8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a44      	ldr	r2, [pc, #272]	; (80037dc <displayStopWatchScreen+0x2dc>)
 80036ca:	6013      	str	r3, [r2, #0]
		if(prevStopWatchMinute != stopWatchMinute){
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <displayStopWatchScreen+0x2ac>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <displayStopWatchScreen+0x2b0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d02c      	beq.n	8003732 <displayStopWatchScreen+0x232>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <displayStopWatchScreen+0x2b0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4935      	ldr	r1, [pc, #212]	; (80037b4 <displayStopWatchScreen+0x2b4>)
 80036e0:	4835      	ldr	r0, [pc, #212]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 80036e2:	f009 f873 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80036e6:	4b35      	ldr	r3, [pc, #212]	; (80037bc <displayStopWatchScreen+0x2bc>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3346      	adds	r3, #70	; 0x46
 80036ee:	b2d9      	uxtb	r1, r3
 80036f0:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <displayStopWatchScreen+0x2c0>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036fc:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80037a0 <displayStopWatchScreen+0x2a0>
 8003700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003704:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003708:	ee37 7b06 	vadd.f64	d7, d7, d6
 800370c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003710:	edc7 7a01 	vstr	s15, [r7, #4]
 8003714:	793b      	ldrb	r3, [r7, #4]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2305      	movs	r3, #5
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003724:	4824      	ldr	r0, [pc, #144]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 8003726:	f002 fb0f 	bl	8005d48 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <displayStopWatchScreen+0x2b0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <displayStopWatchScreen+0x2ac>)
 8003730:	6013      	str	r3, [r2, #0]
		if(prevStopWatchSecond != stopWatchSecond){
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <displayStopWatchScreen+0x2c4>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <displayStopWatchScreen+0x2c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d02c      	beq.n	8003798 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 800373e:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <displayStopWatchScreen+0x2c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	491b      	ldr	r1, [pc, #108]	; (80037b4 <displayStopWatchScreen+0x2b4>)
 8003746:	481c      	ldr	r0, [pc, #112]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 8003748:	f009 f840 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <displayStopWatchScreen+0x2bc>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	3b74      	subs	r3, #116	; 0x74
 8003754:	b2d9      	uxtb	r1, r3
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <displayStopWatchScreen+0x2c0>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003762:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80037a0 <displayStopWatchScreen+0x2a0>
 8003766:	ee27 7b06 	vmul.f64	d7, d7, d6
 800376a:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800376e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003772:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003776:	edc7 7a01 	vstr	s15, [r7, #4]
 800377a:	793b      	ldrb	r3, [r7, #4]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2305      	movs	r3, #5
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378a:	480b      	ldr	r0, [pc, #44]	; (80037b8 <displayStopWatchScreen+0x2b8>)
 800378c:	f002 fadc 	bl	8005d48 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <displayStopWatchScreen+0x2c8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <displayStopWatchScreen+0x2c4>)
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	66666666 	.word	0x66666666
 80037a4:	3fd66666 	.word	0x3fd66666
 80037a8:	2000031c 	.word	0x2000031c
 80037ac:	200000c0 	.word	0x200000c0
 80037b0:	20000320 	.word	0x20000320
 80037b4:	0800ebe4 	.word	0x0800ebe4
 80037b8:	20000484 	.word	0x20000484
 80037bc:	20000054 	.word	0x20000054
 80037c0:	20000056 	.word	0x20000056
 80037c4:	200000c4 	.word	0x200000c4
 80037c8:	20000324 	.word	0x20000324
 80037cc:	200000c8 	.word	0x200000c8
 80037d0:	20000328 	.word	0x20000328
 80037d4:	66666667 	.word	0x66666667
 80037d8:	51eb851f 	.word	0x51eb851f
 80037dc:	200000bc 	.word	0x200000bc

080037e0 <stopWatchScreen>:

void stopWatchScreen(){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af02      	add	r7, sp, #8

	if(initialStopWatchScreen == false){
 80037e6:	4b66      	ldr	r3, [pc, #408]	; (8003980 <stopWatchScreen+0x1a0>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	f083 0301 	eor.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d075      	beq.n	80038e0 <stopWatchScreen+0x100>
		resetPrevStopWatch();
 80037f4:	f7ff fe48 	bl	8003488 <resetPrevStopWatch>
		//Statics
		displayAlarmIcon(alarmIsOn);
 80037f8:	4b62      	ldr	r3, [pc, #392]	; (8003984 <stopWatchScreen+0x1a4>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe faeb 	bl	8001dd8 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Stopwatch");
 8003802:	4961      	ldr	r1, [pc, #388]	; (8003988 <stopWatchScreen+0x1a8>)
 8003804:	4861      	ldr	r0, [pc, #388]	; (800398c <stopWatchScreen+0x1ac>)
 8003806:	f008 ffe1 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 800380a:	4b61      	ldr	r3, [pc, #388]	; (8003990 <stopWatchScreen+0x1b0>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b2d9      	uxtb	r1, r3
 8003810:	4b60      	ldr	r3, [pc, #384]	; (8003994 <stopWatchScreen+0x1b4>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800381c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8003970 <stopWatchScreen+0x190>
 8003820:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003824:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003828:	edc7 7a01 	vstr	s15, [r7, #4]
 800382c:	793b      	ldrb	r3, [r7, #4]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	2302      	movs	r3, #2
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800383c:	4853      	ldr	r0, [pc, #332]	; (800398c <stopWatchScreen+0x1ac>)
 800383e:	f002 fa83 	bl	8005d48 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, ":");
 8003842:	4955      	ldr	r1, [pc, #340]	; (8003998 <stopWatchScreen+0x1b8>)
 8003844:	4851      	ldr	r0, [pc, #324]	; (800398c <stopWatchScreen+0x1ac>)
 8003846:	f008 ffc1 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+60, maxHeight * 0.37+16, WHITE, 4, BLACK);
 800384a:	4b51      	ldr	r3, [pc, #324]	; (8003990 <stopWatchScreen+0x1b0>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	333c      	adds	r3, #60	; 0x3c
 8003852:	b2d9      	uxtb	r1, r3
 8003854:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <stopWatchScreen+0x1b4>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003860:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003978 <stopWatchScreen+0x198>
 8003864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003868:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800386c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003870:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003874:	edc7 7a01 	vstr	s15, [r7, #4]
 8003878:	793b      	ldrb	r3, [r7, #4]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	2300      	movs	r3, #0
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2304      	movs	r3, #4
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003888:	4840      	ldr	r0, [pc, #256]	; (800398c <stopWatchScreen+0x1ac>)
 800388a:	f002 fa5d 	bl	8005d48 <ILI9341_Draw_Text>
		sprintf(Temp_Buffer_text, ":");
 800388e:	4942      	ldr	r1, [pc, #264]	; (8003998 <stopWatchScreen+0x1b8>)
 8003890:	483e      	ldr	r0, [pc, #248]	; (800398c <stopWatchScreen+0x1ac>)
 8003892:	f008 ff9b 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+130, maxHeight * 0.37+16, WHITE, 4, BLACK);
 8003896:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <stopWatchScreen+0x1b0>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	3b7e      	subs	r3, #126	; 0x7e
 800389e:	b2d9      	uxtb	r1, r3
 80038a0:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <stopWatchScreen+0x1b4>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038ac:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003978 <stopWatchScreen+0x198>
 80038b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038b4:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80038b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80038c4:	793b      	ldrb	r3, [r7, #4]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	2300      	movs	r3, #0
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	2304      	movs	r3, #4
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d4:	482d      	ldr	r0, [pc, #180]	; (800398c <stopWatchScreen+0x1ac>)
 80038d6:	f002 fa37 	bl	8005d48 <ILI9341_Draw_Text>

		initialStopWatchScreen = true;
 80038da:	4b29      	ldr	r3, [pc, #164]	; (8003980 <stopWatchScreen+0x1a0>)
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
	}

	//Time running
	if(isStopWatchRunning == true){
 80038e0:	4b2e      	ldr	r3, [pc, #184]	; (800399c <stopWatchScreen+0x1bc>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <stopWatchScreen+0x120>
		stopWatchMillisecond += millisecondStopWatch;
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <stopWatchScreen+0x1c0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <stopWatchScreen+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <stopWatchScreen+0x1c0>)
 80038f8:	601a      	str	r2, [r3, #0]
		millisecondStopWatch = 0;
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <stopWatchScreen+0x1c4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
	}

	//Normal Clock
	if (stopWatchMillisecond >= 1000){
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <stopWatchScreen+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003908:	db0a      	blt.n	8003920 <stopWatchScreen+0x140>
		stopWatchMillisecond = stopWatchMillisecond - 1000; //Keep remainder of millisecondStopWatch
 800390a:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <stopWatchScreen+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003912:	4a23      	ldr	r2, [pc, #140]	; (80039a0 <stopWatchScreen+0x1c0>)
 8003914:	6013      	str	r3, [r2, #0]
		stopWatchSecond++;
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <stopWatchScreen+0x1c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <stopWatchScreen+0x1c8>)
 800391e:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchSecond >= 60){
 8003920:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <stopWatchScreen+0x1c8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b3b      	cmp	r3, #59	; 0x3b
 8003926:	dd07      	ble.n	8003938 <stopWatchScreen+0x158>
		stopWatchSecond = 0;
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <stopWatchScreen+0x1c8>)
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
		stopWatchMinute++;
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <stopWatchScreen+0x1cc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <stopWatchScreen+0x1cc>)
 8003936:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchMinute >= 60){
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <stopWatchScreen+0x1cc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b3b      	cmp	r3, #59	; 0x3b
 800393e:	dd07      	ble.n	8003950 <stopWatchScreen+0x170>
		stopWatchMinute = 0;
 8003940:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <stopWatchScreen+0x1cc>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
		stopWatchHour++;
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <stopWatchScreen+0x1d0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <stopWatchScreen+0x1d0>)
 800394e:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchHour >= 99){
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <stopWatchScreen+0x1d0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b62      	cmp	r3, #98	; 0x62
 8003956:	dd02      	ble.n	800395e <stopWatchScreen+0x17e>
		stopWatchHour = 0;
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <stopWatchScreen+0x1d0>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
	}

	//Running
	displayStopWatchScreen();
 800395e:	f7ff fdcf 	bl	8003500 <displayStopWatchScreen>

//	char hexString[30];
//	sprintf(hexString,"%d %d\r\n",prevStopWatchHour,stopWatchHour);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	9999999a 	.word	0x9999999a
 8003974:	3fb99999 	.word	0x3fb99999
 8003978:	7ae147ae 	.word	0x7ae147ae
 800397c:	3fd7ae14 	.word	0x3fd7ae14
 8003980:	2000032c 	.word	0x2000032c
 8003984:	20000060 	.word	0x20000060
 8003988:	0800ecb0 	.word	0x0800ecb0
 800398c:	20000484 	.word	0x20000484
 8003990:	20000054 	.word	0x20000054
 8003994:	20000056 	.word	0x20000056
 8003998:	0800ec00 	.word	0x0800ec00
 800399c:	2000032d 	.word	0x2000032d
 80039a0:	20000328 	.word	0x20000328
 80039a4:	200002d8 	.word	0x200002d8
 80039a8:	20000324 	.word	0x20000324
 80039ac:	20000320 	.word	0x20000320
 80039b0:	2000031c 	.word	0x2000031c

080039b4 <resetPrevAlarm>:

//State
bool initialAlarmClockScreen = false;
bool initialEditAlarmClockScreen = false;

void resetPrevAlarm(){
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
	prevAlarmMinute = -1;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <resetPrevAlarm+0x20>)
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295
 80039be:	601a      	str	r2, [r3, #0]
	prevAlarmHour = -1;
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <resetPrevAlarm+0x24>)
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	601a      	str	r2, [r3, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000030 	.word	0x20000030
 80039d8:	20000034 	.word	0x20000034
 80039dc:	00000000 	.word	0x00000000

080039e0 <hourAlarmScreen>:

void hourAlarmScreen(bool status, bool isEdit){
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	4603      	mov	r3, r0
 80039e8:	460a      	mov	r2, r1
 80039ea:	71fb      	strb	r3, [r7, #7]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmHour != alarmHour || isEdit == true){
 80039f0:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <hourAlarmScreen+0xd8>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b31      	ldr	r3, [pc, #196]	; (8003abc <hourAlarmScreen+0xdc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d102      	bne.n	8003a02 <hourAlarmScreen+0x22>
 80039fc:	79bb      	ldrb	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d052      	beq.n	8003aa8 <hourAlarmScreen+0xc8>
		if (status == true){
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d027      	beq.n	8003a58 <hourAlarmScreen+0x78>
			sprintf(Temp_Buffer_text, "%02d", (int)alarmHour);
 8003a08:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <hourAlarmScreen+0xdc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	492c      	ldr	r1, [pc, #176]	; (8003ac0 <hourAlarmScreen+0xe0>)
 8003a10:	482c      	ldr	r0, [pc, #176]	; (8003ac4 <hourAlarmScreen+0xe4>)
 8003a12:	f008 fedb 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003a16:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <hourAlarmScreen+0xe8>)
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b2d9      	uxtb	r1, r3
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <hourAlarmScreen+0xec>)
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a28:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8003ab0 <hourAlarmScreen+0xd0>
 8003a2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a30:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a3c:	edc7 7a00 	vstr	s15, [r7]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2306      	movs	r3, #6
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a50:	481c      	ldr	r0, [pc, #112]	; (8003ac4 <hourAlarmScreen+0xe4>)
 8003a52:	f002 f979 	bl	8005d48 <ILI9341_Draw_Text>
 8003a56:	e023      	b.n	8003aa0 <hourAlarmScreen+0xc0>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003a58:	491d      	ldr	r1, [pc, #116]	; (8003ad0 <hourAlarmScreen+0xf0>)
 8003a5a:	481a      	ldr	r0, [pc, #104]	; (8003ac4 <hourAlarmScreen+0xe4>)
 8003a5c:	f008 feb6 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <hourAlarmScreen+0xe8>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b2d9      	uxtb	r1, r3
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <hourAlarmScreen+0xec>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a72:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003ab0 <hourAlarmScreen+0xd0>
 8003a76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003a7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a86:	edc7 7a00 	vstr	s15, [r7]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	2306      	movs	r3, #6
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <hourAlarmScreen+0xe4>)
 8003a9c:	f002 f954 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevAlarmHour = alarmHour;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <hourAlarmScreen+0xdc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <hourAlarmScreen+0xd8>)
 8003aa6:	6013      	str	r3, [r2, #0]
	}
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	33333333 	.word	0x33333333
 8003ab4:	3fd33333 	.word	0x3fd33333
 8003ab8:	20000034 	.word	0x20000034
 8003abc:	200002d0 	.word	0x200002d0
 8003ac0:	0800ebe4 	.word	0x0800ebe4
 8003ac4:	20000484 	.word	0x20000484
 8003ac8:	20000054 	.word	0x20000054
 8003acc:	20000056 	.word	0x20000056
 8003ad0:	0800ebec 	.word	0x0800ebec
 8003ad4:	00000000 	.word	0x00000000

08003ad8 <minuteAlarmScreen>:

void minuteAlarmScreen(bool status, bool isEdit){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmMinute != alarmMinute || isEdit == true){
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <minuteAlarmScreen+0xe0>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <minuteAlarmScreen+0xe4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d102      	bne.n	8003afa <minuteAlarmScreen+0x22>
 8003af4:	79bb      	ldrb	r3, [r7, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d056      	beq.n	8003ba8 <minuteAlarmScreen+0xd0>
		if (status == true){
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d029      	beq.n	8003b54 <minuteAlarmScreen+0x7c>

			sprintf(Temp_Buffer_text, "%02d", (int)alarmMinute);
 8003b00:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <minuteAlarmScreen+0xe4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	492e      	ldr	r1, [pc, #184]	; (8003bc0 <minuteAlarmScreen+0xe8>)
 8003b08:	482e      	ldr	r0, [pc, #184]	; (8003bc4 <minuteAlarmScreen+0xec>)
 8003b0a:	f008 fe5f 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <minuteAlarmScreen+0xf0>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	336e      	adds	r3, #110	; 0x6e
 8003b16:	b2d9      	uxtb	r1, r3
 8003b18:	4b2c      	ldr	r3, [pc, #176]	; (8003bcc <minuteAlarmScreen+0xf4>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b24:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8003bb0 <minuteAlarmScreen+0xd8>
 8003b28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b2c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003b30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b38:	edc7 7a00 	vstr	s15, [r7]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	2300      	movs	r3, #0
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2306      	movs	r3, #6
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b4c:	481d      	ldr	r0, [pc, #116]	; (8003bc4 <minuteAlarmScreen+0xec>)
 8003b4e:	f002 f8fb 	bl	8005d48 <ILI9341_Draw_Text>
 8003b52:	e025      	b.n	8003ba0 <minuteAlarmScreen+0xc8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003b54:	491e      	ldr	r1, [pc, #120]	; (8003bd0 <minuteAlarmScreen+0xf8>)
 8003b56:	481b      	ldr	r0, [pc, #108]	; (8003bc4 <minuteAlarmScreen+0xec>)
 8003b58:	f008 fe38 	bl	800c7cc <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <minuteAlarmScreen+0xf0>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	336e      	adds	r3, #110	; 0x6e
 8003b64:	b2d9      	uxtb	r1, r3
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <minuteAlarmScreen+0xf4>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b72:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003bb0 <minuteAlarmScreen+0xd8>
 8003b76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003b7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b86:	edc7 7a00 	vstr	s15, [r7]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2306      	movs	r3, #6
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b9a:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <minuteAlarmScreen+0xec>)
 8003b9c:	f002 f8d4 	bl	8005d48 <ILI9341_Draw_Text>
		}
		prevAlarmMinute = alarmMinute;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <minuteAlarmScreen+0xe4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <minuteAlarmScreen+0xe0>)
 8003ba6:	6013      	str	r3, [r2, #0]
	}
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	33333333 	.word	0x33333333
 8003bb4:	3fd33333 	.word	0x3fd33333
 8003bb8:	20000030 	.word	0x20000030
 8003bbc:	200002cc 	.word	0x200002cc
 8003bc0:	0800ebe4 	.word	0x0800ebe4
 8003bc4:	20000484 	.word	0x20000484
 8003bc8:	20000054 	.word	0x20000054
 8003bcc:	20000056 	.word	0x20000056
 8003bd0:	0800ebec 	.word	0x0800ebec
 8003bd4:	00000000 	.word	0x00000000

08003bd8 <colonAlarmScreen>:
void colonAlarmScreen(){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af02      	add	r7, sp, #8
	sprintf(Temp_Buffer_text, ":");
 8003bde:	4918      	ldr	r1, [pc, #96]	; (8003c40 <colonAlarmScreen+0x68>)
 8003be0:	4818      	ldr	r0, [pc, #96]	; (8003c44 <colonAlarmScreen+0x6c>)
 8003be2:	f008 fdf3 	bl	800c7cc <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 80, maxHeight * 0.35 +10, WHITE, 4, BLACK);
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <colonAlarmScreen+0x70>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	3350      	adds	r3, #80	; 0x50
 8003bee:	b2d9      	uxtb	r1, r3
 8003bf0:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <colonAlarmScreen+0x74>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	ee07 3a90 	vmov	s15, r3
 8003bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003bfc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003c38 <colonAlarmScreen+0x60>
 8003c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c04:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c10:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c14:	793b      	ldrb	r3, [r7, #4]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c24:	4807      	ldr	r0, [pc, #28]	; (8003c44 <colonAlarmScreen+0x6c>)
 8003c26:	f002 f88f 	bl	8005d48 <ILI9341_Draw_Text>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	f3af 8000 	nop.w
 8003c38:	66666666 	.word	0x66666666
 8003c3c:	3fd66666 	.word	0x3fd66666
 8003c40:	0800ec00 	.word	0x0800ec00
 8003c44:	20000484 	.word	0x20000484
 8003c48:	20000054 	.word	0x20000054
 8003c4c:	20000056 	.word	0x20000056

08003c50 <alarmClockScreen>:

void alarmClockScreen(){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af02      	add	r7, sp, #8
	if(initialAlarmClockScreen == false){
 8003c56:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <alarmClockScreen+0x90>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f083 0301 	eor.w	r3, r3, #1
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d033      	beq.n	8003ccc <alarmClockScreen+0x7c>
		resetPrevAlarm();
 8003c64:	f7ff fea6 	bl	80039b4 <resetPrevAlarm>

		//Statics
		sprintf(Temp_Buffer_text, "Alarm");
 8003c68:	491e      	ldr	r1, [pc, #120]	; (8003ce4 <alarmClockScreen+0x94>)
 8003c6a:	481f      	ldr	r0, [pc, #124]	; (8003ce8 <alarmClockScreen+0x98>)
 8003c6c:	f008 fdae 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <alarmClockScreen+0x9c>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b2d9      	uxtb	r1, r3
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <alarmClockScreen+0xa0>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c82:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8003cd8 <alarmClockScreen+0x88>
 8003c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c92:	793b      	ldrb	r3, [r7, #4]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	2300      	movs	r3, #0
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ca2:	4811      	ldr	r0, [pc, #68]	; (8003ce8 <alarmClockScreen+0x98>)
 8003ca4:	f002 f850 	bl	8005d48 <ILI9341_Draw_Text>

		displayAlarmIcon(alarmIsOn);
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <alarmClockScreen+0xa4>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe f893 	bl	8001dd8 <displayAlarmIcon>

		colonAlarmScreen();
 8003cb2:	f7ff ff91 	bl	8003bd8 <colonAlarmScreen>
		hourAlarmScreen(true,false);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f7ff fe91 	bl	80039e0 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f7ff ff09 	bl	8003ad8 <minuteAlarmScreen>

		initialAlarmClockScreen = true;
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <alarmClockScreen+0x90>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
	}
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	9999999a 	.word	0x9999999a
 8003cdc:	3fb99999 	.word	0x3fb99999
 8003ce0:	2000032e 	.word	0x2000032e
 8003ce4:	0800ecbc 	.word	0x0800ecbc
 8003ce8:	20000484 	.word	0x20000484
 8003cec:	20000054 	.word	0x20000054
 8003cf0:	20000056 	.word	0x20000056
 8003cf4:	20000060 	.word	0x20000060

08003cf8 <editScreen>:

void editScreen(){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	if(modeEdit == 1){
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <editScreen+0x78>)
 8003cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <editScreen+0x14>
		editYearScreen();
 8003d06:	f7fe fe31 	bl	800296c <editYearScreen>
	}else if (modeEdit == 6){
		editMinuteScreen();
	}else if (modeEdit == 7){
		editSecondScreen();
	}
}
 8003d0a:	e02e      	b.n	8003d6a <editScreen+0x72>
	}else if (modeEdit == 2){
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <editScreen+0x78>)
 8003d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d102      	bne.n	8003d1c <editScreen+0x24>
		editMonthScreen();
 8003d16:	f7fe fe07 	bl	8002928 <editMonthScreen>
}
 8003d1a:	e026      	b.n	8003d6a <editScreen+0x72>
	}else if (modeEdit == 3){
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <editScreen+0x78>)
 8003d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d102      	bne.n	8003d2c <editScreen+0x34>
		editDateScreen();
 8003d26:	f7fe fddd 	bl	80028e4 <editDateScreen>
}
 8003d2a:	e01e      	b.n	8003d6a <editScreen+0x72>
	}else if (modeEdit == 4){
 8003d2c:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <editScreen+0x78>)
 8003d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d102      	bne.n	8003d3c <editScreen+0x44>
		editDayScreen();
 8003d36:	f7fe fdb3 	bl	80028a0 <editDayScreen>
}
 8003d3a:	e016      	b.n	8003d6a <editScreen+0x72>
	}else if (modeEdit == 5){
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <editScreen+0x78>)
 8003d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d102      	bne.n	8003d4c <editScreen+0x54>
		editHourScreen();
 8003d46:	f7fe fd43 	bl	80027d0 <editHourScreen>
}
 8003d4a:	e00e      	b.n	8003d6a <editScreen+0x72>
	}else if (modeEdit == 6){
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <editScreen+0x78>)
 8003d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d102      	bne.n	8003d5c <editScreen+0x64>
		editMinuteScreen();
 8003d56:	f7fe fd5f 	bl	8002818 <editMinuteScreen>
}
 8003d5a:	e006      	b.n	8003d6a <editScreen+0x72>
	}else if (modeEdit == 7){
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <editScreen+0x78>)
 8003d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d62:	2b07      	cmp	r3, #7
 8003d64:	d101      	bne.n	8003d6a <editScreen+0x72>
		editSecondScreen();
 8003d66:	f7fe fd79 	bl	800285c <editSecondScreen>
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000005a 	.word	0x2000005a

08003d74 <editAlarmHourScreen>:
void editAlarmHourScreen(){
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0

	minuteAlarmScreen(true,false);
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f7ff feac 	bl	8003ad8 <minuteAlarmScreen>

	if (halfsecondState == false){ // Hour
 8003d80:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <editAlarmHourScreen+0x30>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <editAlarmHourScreen+0x24>
		hourAlarmScreen(false, true);
 8003d8e:	2101      	movs	r1, #1
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7ff fe25 	bl	80039e0 <hourAlarmScreen>
	}
	else{
		hourAlarmScreen(true, true);
	}
}
 8003d96:	e003      	b.n	8003da0 <editAlarmHourScreen+0x2c>
		hourAlarmScreen(true, true);
 8003d98:	2101      	movs	r1, #1
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	f7ff fe20 	bl	80039e0 <hourAlarmScreen>
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000050 	.word	0x20000050

08003da8 <editAlarmMinuteScreen>:

void editAlarmMinuteScreen(){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	hourAlarmScreen(true,false);
 8003dac:	2100      	movs	r1, #0
 8003dae:	2001      	movs	r0, #1
 8003db0:	f7ff fe16 	bl	80039e0 <hourAlarmScreen>

	if (halfsecondState == false){ // Minute
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <editAlarmMinuteScreen+0x30>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	f083 0301 	eor.w	r3, r3, #1
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <editAlarmMinuteScreen+0x24>
		minuteAlarmScreen(false, true);
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7ff fe87 	bl	8003ad8 <minuteAlarmScreen>
	}
	else{
		minuteAlarmScreen(true, true);
	}
}
 8003dca:	e003      	b.n	8003dd4 <editAlarmMinuteScreen+0x2c>
		minuteAlarmScreen(true, true);
 8003dcc:	2101      	movs	r1, #1
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f7ff fe82 	bl	8003ad8 <minuteAlarmScreen>
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000050 	.word	0x20000050
 8003ddc:	00000000 	.word	0x00000000

08003de0 <editAlarmScreen>:
void editAlarmScreen(){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af02      	add	r7, sp, #8
	if(initialEditAlarmClockScreen == false){
 8003de6:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <editAlarmScreen+0xe8>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	f083 0301 	eor.w	r3, r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d031      	beq.n	8003e58 <editAlarmScreen+0x78>
		resetPrevAlarm();
 8003df4:	f7ff fdde 	bl	80039b4 <resetPrevAlarm>
		displayAlarmIcon(alarmIsOn);
 8003df8:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <editAlarmScreen+0xec>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd ffeb 	bl	8001dd8 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Alarm");
 8003e02:	4933      	ldr	r1, [pc, #204]	; (8003ed0 <editAlarmScreen+0xf0>)
 8003e04:	4833      	ldr	r0, [pc, #204]	; (8003ed4 <editAlarmScreen+0xf4>)
 8003e06:	f008 fce1 	bl	800c7cc <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003e0a:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <editAlarmScreen+0xf8>)
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b2d9      	uxtb	r1, r3
 8003e10:	4b32      	ldr	r3, [pc, #200]	; (8003edc <editAlarmScreen+0xfc>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e1c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8003ec0 <editAlarmScreen+0xe0>
 8003e20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003e28:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e2c:	793b      	ldrb	r3, [r7, #4]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	2300      	movs	r3, #0
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	2302      	movs	r3, #2
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e3c:	4825      	ldr	r0, [pc, #148]	; (8003ed4 <editAlarmScreen+0xf4>)
 8003e3e:	f001 ff83 	bl	8005d48 <ILI9341_Draw_Text>

		hourAlarmScreen(true,false);
 8003e42:	2100      	movs	r1, #0
 8003e44:	2001      	movs	r0, #1
 8003e46:	f7ff fdcb 	bl	80039e0 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f7ff fe43 	bl	8003ad8 <minuteAlarmScreen>

		initialEditAlarmClockScreen = true;
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <editAlarmScreen+0xe8>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
	}

	//Algorithm Calculation
	if (alarmMinute >= 60){
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <editAlarmScreen+0x100>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b3b      	cmp	r3, #59	; 0x3b
 8003e5e:	dd03      	ble.n	8003e68 <editAlarmScreen+0x88>
		alarmMinute = 0;
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <editAlarmScreen+0x100>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e006      	b.n	8003e76 <editAlarmScreen+0x96>
	}
	else if(alarmMinute < 0){
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <editAlarmScreen+0x100>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da02      	bge.n	8003e76 <editAlarmScreen+0x96>
		alarmMinute = 59;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <editAlarmScreen+0x100>)
 8003e72:	223b      	movs	r2, #59	; 0x3b
 8003e74:	601a      	str	r2, [r3, #0]
	}
	if (alarmHour >= 24){
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <editAlarmScreen+0x104>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b17      	cmp	r3, #23
 8003e7c:	dd03      	ble.n	8003e86 <editAlarmScreen+0xa6>
		alarmHour = 0;
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <editAlarmScreen+0x104>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e006      	b.n	8003e94 <editAlarmScreen+0xb4>
	}
	else if(alarmHour < 0){
 8003e86:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <editAlarmScreen+0x104>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da02      	bge.n	8003e94 <editAlarmScreen+0xb4>
		alarmHour = 23;
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <editAlarmScreen+0x104>)
 8003e90:	2217      	movs	r2, #23
 8003e92:	601a      	str	r2, [r3, #0]
	}

	if(modeEdit == 1){
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <editAlarmScreen+0x108>)
 8003e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <editAlarmScreen+0xc4>
		editAlarmHourScreen();
 8003e9e:	f7ff ff69 	bl	8003d74 <editAlarmHourScreen>
	}else if (modeEdit == 2){
		editAlarmMinuteScreen();
	}
}
 8003ea2:	e006      	b.n	8003eb2 <editAlarmScreen+0xd2>
	}else if (modeEdit == 2){
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <editAlarmScreen+0x108>)
 8003ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d101      	bne.n	8003eb2 <editAlarmScreen+0xd2>
		editAlarmMinuteScreen();
 8003eae:	f7ff ff7b 	bl	8003da8 <editAlarmMinuteScreen>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w
 8003ec0:	9999999a 	.word	0x9999999a
 8003ec4:	3fb99999 	.word	0x3fb99999
 8003ec8:	2000032f 	.word	0x2000032f
 8003ecc:	20000060 	.word	0x20000060
 8003ed0:	0800ecbc 	.word	0x0800ecbc
 8003ed4:	20000484 	.word	0x20000484
 8003ed8:	20000054 	.word	0x20000054
 8003edc:	20000056 	.word	0x20000056
 8003ee0:	200002cc 	.word	0x200002cc
 8003ee4:	200002d0 	.word	0x200002d0
 8003ee8:	2000005a 	.word	0x2000005a

08003eec <tempMonitor>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void tempMonitor(){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af02      	add	r7, sp, #8
	//Temperature
	cmdBuffer[0] = 0x03;
 8003ef2:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <tempMonitor+0x108>)
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003ef8:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <tempMonitor+0x108>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <tempMonitor+0x108>)
 8003f00:	2204      	movs	r2, #4
 8003f02:	709a      	strb	r2, [r3, #2]

	//HAL_Delay(5000); //>3000 ms
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003f04:	23c8      	movs	r3, #200	; 0xc8
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2303      	movs	r3, #3
 8003f0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ff4 <tempMonitor+0x108>)
 8003f0c:	21b8      	movs	r1, #184	; 0xb8
 8003f0e:	483a      	ldr	r0, [pc, #232]	; (8003ff8 <tempMonitor+0x10c>)
 8003f10:	f003 fc1a 	bl	8007748 <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003f14:	23c8      	movs	r3, #200	; 0xc8
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	2303      	movs	r3, #3
 8003f1a:	4a36      	ldr	r2, [pc, #216]	; (8003ff4 <tempMonitor+0x108>)
 8003f1c:	21b8      	movs	r1, #184	; 0xb8
 8003f1e:	4836      	ldr	r0, [pc, #216]	; (8003ff8 <tempMonitor+0x10c>)
 8003f20:	f003 fc12 	bl	8007748 <HAL_I2C_Master_Transmit>

	HAL_Delay(80); // 50 is too low, 80 is okay
 8003f24:	2050      	movs	r0, #80	; 0x50
 8003f26:	f002 fc65 	bl	80067f4 <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8003f2a:	23c8      	movs	r3, #200	; 0xc8
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	2308      	movs	r3, #8
 8003f30:	4a32      	ldr	r2, [pc, #200]	; (8003ffc <tempMonitor+0x110>)
 8003f32:	21b8      	movs	r1, #184	; 0xb8
 8003f34:	4830      	ldr	r0, [pc, #192]	; (8003ff8 <tempMonitor+0x10c>)
 8003f36:	f003 fcfb 	bl	8007930 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 8003f3a:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <tempMonitor+0x110>)
 8003f3c:	79db      	ldrb	r3, [r3, #7]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8003f44:	4b2d      	ldr	r3, [pc, #180]	; (8003ffc <tempMonitor+0x110>)
 8003f46:	799b      	ldrb	r3, [r3, #6]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8003f50:	2106      	movs	r1, #6
 8003f52:	482a      	ldr	r0, [pc, #168]	; (8003ffc <tempMonitor+0x110>)
 8003f54:	f000 febe 	bl	8004cd4 <CRC16_2>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d143      	bne.n	8003fea <tempMonitor+0xfe>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8003f62:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <tempMonitor+0x110>)
 8003f64:	791b      	ldrb	r3, [r3, #4]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <tempMonitor+0x110>)
 8003f72:	795b      	ldrb	r3, [r3, #5]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 8003f7a:	88bb      	ldrh	r3, [r7, #4]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f84:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003f88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <tempMonitor+0x114>)
 8003f92:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <tempMonitor+0x110>)
 8003f98:	791b      	ldrb	r3, [r3, #4]
 8003f9a:	09db      	lsrs	r3, r3, #7
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <tempMonitor+0xc2>
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <tempMonitor+0x114>)
 8003fa4:	edd3 7a00 	vldr	s15, [r3]
 8003fa8:	eef1 7a67 	vneg.f32	s15, s15
 8003fac:	e002      	b.n	8003fb4 <tempMonitor+0xc8>
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <tempMonitor+0x114>)
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <tempMonitor+0x114>)
 8003fb6:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <tempMonitor+0x110>)
 8003fbc:	789b      	ldrb	r3, [r3, #2]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <tempMonitor+0x110>)
 8003fc6:	78db      	ldrb	r3, [r3, #3]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003fd8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003fdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003fe0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003fe4:	4b07      	ldr	r3, [pc, #28]	; (8004004 <tempMonitor+0x118>)
 8003fe6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000444 	.word	0x20000444
 8003ff8:	200003f8 	.word	0x200003f8
 8003ffc:	20000448 	.word	0x20000448
 8004000:	20000018 	.word	0x20000018
 8004004:	2000001c 	.word	0x2000001c

08004008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8004010:	f7fc fed6 	bl	8000dc0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8004014:	f7fc fefa 	bl	8000e0c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004018:	f002 fb80 	bl	800671c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800401c:	f000 fdbc 	bl	8004b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004020:	f7fc fd00 	bl	8000a24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8004024:	f001 fb7c 	bl	8005720 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8004028:	f000 feee 	bl	8004e08 <MX_SPI5_Init>
  MX_TIM1_Init();
 800402c:	f001 f8c2 	bl	80051b4 <MX_TIM1_Init>
  MX_RNG_Init();
 8004030:	f000 feb6 	bl	8004da0 <MX_RNG_Init>
  MX_I2C1_Init();
 8004034:	f7fc fe40 	bl	8000cb8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8004038:	f001 f910 	bl	800525c <MX_TIM2_Init>
  MX_TIM3_Init();
 800403c:	f001 f95c 	bl	80052f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004040:	f001 fb3e 	bl	80056c0 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8004044:	f001 fb0c 	bl	8005660 <MX_UART4_Init>
  MX_ADC1_Init();
 8004048:	f7fc fc5a 	bl	8000900 <MX_ADC1_Init>
  MX_TIM4_Init();
 800404c:	f001 f9ca 	bl	80053e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//Temp but not has code in here yet
	cmdBuffer[0] = 0x03;
 8004050:	4b5a      	ldr	r3, [pc, #360]	; (80041bc <main+0x1b4>)
 8004052:	2203      	movs	r2, #3
 8004054:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8004056:	4b59      	ldr	r3, [pc, #356]	; (80041bc <main+0x1b4>)
 8004058:	2200      	movs	r2, #0
 800405a:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 800405c:	4b57      	ldr	r3, [pc, #348]	; (80041bc <main+0x1b4>)
 800405e:	2204      	movs	r2, #4
 8004060:	709a      	strb	r2, [r3, #2]

	//initial driver setup to drive ili9341
	ILI9341_Init();
 8004062:	f001 ffcf 	bl	8006004 <ILI9341_Init>

	//Interrupt millisecond
	HAL_TIM_Base_Start_IT(&htim1);
 8004066:	4856      	ldr	r0, [pc, #344]	; (80041c0 <main+0x1b8>)
 8004068:	f005 ffda 	bl	800a020 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800406c:	4855      	ldr	r0, [pc, #340]	; (80041c4 <main+0x1bc>)
 800406e:	f005 ffd7 	bl	800a020 <HAL_TIM_Base_Start_IT>

	//Reset Screen
	setHorizontalScreen(BLACK);
 8004072:	2000      	movs	r0, #0
 8004074:	f7fd fa7c 	bl	8001570 <setHorizontalScreen>

	//Read EEPROM First Time
	readData();
 8004078:	f7fd f9a0 	bl	80013bc <readData>

	//ADC Input variable Resister(Light)
	HAL_ADC_Start(&hadc1);
 800407c:	4852      	ldr	r0, [pc, #328]	; (80041c8 <main+0x1c0>)
 800407e:	f002 fc21 	bl	80068c4 <HAL_ADC_Start>

	// Setup PM Sensor
	uint8_t* respondStart;
	respondStart = wake_sensirion();
 8004082:	f7fc ff37 	bl	8000ef4 <wake_sensirion>
 8004086:	6178      	str	r0, [r7, #20]
	sent_string_to_mcu("STA");
 8004088:	4850      	ldr	r0, [pc, #320]	; (80041cc <main+0x1c4>)
 800408a:	f7fd f81b 	bl	80010c4 <sent_string_to_mcu>

		// REAL CODE BEGIN



		calculationClock();
 800408e:	f7fd fb2d 	bl	80016ec <calculationClock>
		checkResetData();
 8004092:	f7fd fa5d 	bl	8001550 <checkResetData>
		resisterMonitor(); //light screen
 8004096:	f7ff f98f 	bl	80033b8 <resisterMonitor>

		if (prevMode != mode || prevModeEdit != modeEdit){
 800409a:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <main+0x1c8>)
 800409c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040a0:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <main+0x1cc>)
 80040a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d107      	bne.n	80040ba <main+0xb2>
 80040aa:	4b4b      	ldr	r3, [pc, #300]	; (80041d8 <main+0x1d0>)
 80040ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040b0:	4b4a      	ldr	r3, [pc, #296]	; (80041dc <main+0x1d4>)
 80040b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d008      	beq.n	80040cc <main+0xc4>
			prevModeEdit = modeEdit;
 80040ba:	4b48      	ldr	r3, [pc, #288]	; (80041dc <main+0x1d4>)
 80040bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040c0:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <main+0x1d0>)
 80040c2:	801a      	strh	r2, [r3, #0]
			resetPrevNum();
 80040c4:	f7fe f910 	bl	80022e8 <resetPrevNum>
			resetPrevAlarm();
 80040c8:	f7ff fc74 	bl	80039b4 <resetPrevAlarm>
		}
		// When Change Mode
		if (prevMode != mode){
 80040cc:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <main+0x1c8>)
 80040ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040d2:	4b40      	ldr	r3, [pc, #256]	; (80041d4 <main+0x1cc>)
 80040d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d012      	beq.n	8004102 <main+0xfa>
			prevMode = mode;
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <main+0x1cc>)
 80040de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040e2:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <main+0x1c8>)
 80040e4:	801a      	strh	r2, [r3, #0]
			setHorizontalScreen(BLACK);
 80040e6:	2000      	movs	r0, #0
 80040e8:	f7fd fa42 	bl	8001570 <setHorizontalScreen>
			bottomBarScreen();
 80040ec:	f7fe fc64 	bl	80029b8 <bottomBarScreen>

			//For Mode 1 StopWatch
			initialStopWatchScreen = false;
 80040f0:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <main+0x1d8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
			//For Mode 2 Alarm
			initialAlarmClockScreen = false;
 80040f6:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <main+0x1dc>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
			//For mode 200 Edit Alarm
			initialEditAlarmClockScreen = false;
 80040fc:	4b3a      	ldr	r3, [pc, #232]	; (80041e8 <main+0x1e0>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 0){
 8004102:	4b34      	ldr	r3, [pc, #208]	; (80041d4 <main+0x1cc>)
 8004104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d121      	bne.n	8004150 <main+0x148>
			if (halfsecond == 1){	// render every 500 ms
 800410c:	4b37      	ldr	r3, [pc, #220]	; (80041ec <main+0x1e4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	f040 808e 	bne.w	8004232 <main+0x22a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8004116:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <main+0x1e8>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <main+0x1e8>)
 8004132:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8004134:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <main+0x1e4>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

				tempMonitor(); // read every 500 ms
 800413a:	f7ff fed7 	bl	8003eec <tempMonitor>
				notifyPm(); // read every 500 ms
 800413e:	f7fe ff8b 	bl	8003058 <notifyPm>

				topBarScreen();
 8004142:	f7fe f8c3 	bl	80022cc <topBarScreen>
				displayClockScreen();
 8004146:	f7fe fb0f 	bl	8002768 <displayClockScreen>
				bottomBarScreenUpdate();
 800414a:	f7fe fdb1 	bl	8002cb0 <bottomBarScreenUpdate>
 800414e:	e070      	b.n	8004232 <main+0x22a>
			}
		}else if(mode == 1){	// No Notify Line at this mode because has delay
 8004150:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <main+0x1cc>)
 8004152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d102      	bne.n	8004160 <main+0x158>
			stopWatchScreen();
 800415a:	f7ff fb41 	bl	80037e0 <stopWatchScreen>
 800415e:	e068      	b.n	8004232 <main+0x22a>
		}else if(mode == 2){
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <main+0x1cc>)
 8004162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d108      	bne.n	800417c <main+0x174>
			alarmClockScreen();
 800416a:	f7ff fd71 	bl	8003c50 <alarmClockScreen>
			if(halfsecond ==1){
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <main+0x1e4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d15d      	bne.n	8004232 <main+0x22a>
				notifyPm(); // read every 500 ms
 8004176:	f7fe ff6f 	bl	8003058 <notifyPm>
 800417a:	e05a      	b.n	8004232 <main+0x22a>
			}
		}else if (mode == 100){ // Adjust modeEdit 1-year, 2-month, 3-date, 4-day, 5-hour, 6-minute, 7-second
 800417c:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <main+0x1cc>)
 800417e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d136      	bne.n	80041f4 <main+0x1ec>

			if(halfsecond == 1){ // render every 500 ms
 8004186:	4b19      	ldr	r3, [pc, #100]	; (80041ec <main+0x1e4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d151      	bne.n	8004232 <main+0x22a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <main+0x1e8>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf14      	ite	ne
 8004196:	2301      	movne	r3, #1
 8004198:	2300      	moveq	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f083 0301 	eor.w	r3, r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <main+0x1e8>)
 80041aa:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <main+0x1e4>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 80041b2:	f7fe ff51 	bl	8003058 <notifyPm>
				editScreen();
 80041b6:	f7ff fd9f 	bl	8003cf8 <editScreen>
 80041ba:	e03a      	b.n	8004232 <main+0x22a>
 80041bc:	20000444 	.word	0x20000444
 80041c0:	200005f4 	.word	0x200005f4
 80041c4:	20000640 	.word	0x20000640
 80041c8:	200003b0 	.word	0x200003b0
 80041cc:	0800ecc4 	.word	0x0800ecc4
 80041d0:	2000005c 	.word	0x2000005c
 80041d4:	200002e4 	.word	0x200002e4
 80041d8:	2000005e 	.word	0x2000005e
 80041dc:	2000005a 	.word	0x2000005a
 80041e0:	2000032c 	.word	0x2000032c
 80041e4:	2000032e 	.word	0x2000032e
 80041e8:	2000032f 	.word	0x2000032f
 80041ec:	200002dc 	.word	0x200002dc
 80041f0:	20000050 	.word	0x20000050
			}
		}else if (mode == 200){
 80041f4:	4ba2      	ldr	r3, [pc, #648]	; (8004480 <main+0x478>)
 80041f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041fa:	2bc8      	cmp	r3, #200	; 0xc8
 80041fc:	d119      	bne.n	8004232 <main+0x22a>
			if(halfsecond == 1){ // render every 500 ms
 80041fe:	4ba1      	ldr	r3, [pc, #644]	; (8004484 <main+0x47c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d115      	bne.n	8004232 <main+0x22a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8004206:	4ba0      	ldr	r3, [pc, #640]	; (8004488 <main+0x480>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f083 0301 	eor.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b99      	ldr	r3, [pc, #612]	; (8004488 <main+0x480>)
 8004222:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8004224:	4b97      	ldr	r3, [pc, #604]	; (8004484 <main+0x47c>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 800422a:	f7fe ff15 	bl	8003058 <notifyPm>
				editAlarmScreen();
 800422e:	f7ff fdd7 	bl	8003de0 <editAlarmScreen>
			}
		}


		pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	4895      	ldr	r0, [pc, #596]	; (800448c <main+0x484>)
 8004236:	f003 f9ad 	bl	8007594 <HAL_GPIO_ReadPin>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b92      	ldr	r3, [pc, #584]	; (8004490 <main+0x488>)
 8004248:	701a      	strb	r2, [r3, #0]
		pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	488f      	ldr	r0, [pc, #572]	; (800448c <main+0x484>)
 800424e:	f003 f9a1 	bl	8007594 <HAL_GPIO_ReadPin>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4b8d      	ldr	r3, [pc, #564]	; (8004494 <main+0x48c>)
 8004260:	701a      	strb	r2, [r3, #0]
		pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8004262:	2120      	movs	r1, #32
 8004264:	4889      	ldr	r0, [pc, #548]	; (800448c <main+0x484>)
 8004266:	f003 f995 	bl	8007594 <HAL_GPIO_ReadPin>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4b88      	ldr	r3, [pc, #544]	; (8004498 <main+0x490>)
 8004278:	701a      	strb	r2, [r3, #0]
		pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 800427a:	2110      	movs	r1, #16
 800427c:	4883      	ldr	r0, [pc, #524]	; (800448c <main+0x484>)
 800427e:	f003 f989 	bl	8007594 <HAL_GPIO_ReadPin>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b83      	ldr	r3, [pc, #524]	; (800449c <main+0x494>)
 8004290:	701a      	strb	r2, [r3, #0]
//		pressButton2 = 0;
//		pressButton3 = 0;
//		pressButton4 = 0;

		//Buzzer
		if ((pressButton1 == true && isPressButton1 == false) ||
 8004292:	4b7f      	ldr	r3, [pc, #508]	; (8004490 <main+0x488>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <main+0x2a0>
 800429a:	4b81      	ldr	r3, [pc, #516]	; (80044a0 <main+0x498>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	f083 0301 	eor.w	r3, r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d120      	bne.n	80042ea <main+0x2e2>
			(pressButton2 == true && isPressButton2 == false) ||
 80042a8:	4b7a      	ldr	r3, [pc, #488]	; (8004494 <main+0x48c>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
		if ((pressButton1 == true && isPressButton1 == false) ||
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <main+0x2b6>
			(pressButton2 == true && isPressButton2 == false) ||
 80042b0:	4b7c      	ldr	r3, [pc, #496]	; (80044a4 <main+0x49c>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d115      	bne.n	80042ea <main+0x2e2>
			(pressButton3 == true && isPressButton3 == false) ||
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <main+0x490>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
			(pressButton2 == true && isPressButton2 == false) ||
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <main+0x2cc>
			(pressButton3 == true && isPressButton3 == false) ||
 80042c6:	4b78      	ldr	r3, [pc, #480]	; (80044a8 <main+0x4a0>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	f083 0301 	eor.w	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <main+0x2e2>
			(pressButton4 == true && isPressButton4 == false)){
 80042d4:	4b71      	ldr	r3, [pc, #452]	; (800449c <main+0x494>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
			(pressButton3 == true && isPressButton3 == false) ||
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00f      	beq.n	80042fc <main+0x2f4>
			(pressButton4 == true && isPressButton4 == false)){
 80042dc:	4b73      	ldr	r3, [pc, #460]	; (80044ac <main+0x4a4>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f083 0301 	eor.w	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <main+0x2f4>
			buzzerIsOn = true;
 80042ea:	4b71      	ldr	r3, [pc, #452]	; (80044b0 <main+0x4a8>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 80042f0:	4b70      	ldr	r3, [pc, #448]	; (80044b4 <main+0x4ac>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	4970      	ldr	r1, [pc, #448]	; (80044b8 <main+0x4b0>)
 80042f8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		buzzerSound(40);
 80042fc:	2028      	movs	r0, #40	; 0x28
 80042fe:	f7fc ff05 	bl	800110c <buzzerSound>

		//General Mode
		if (pressButton1 == true && isPressButton1 == false && !(mode == 100 || mode == 200)){ // increase mode only once
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <main+0x488>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02a      	beq.n	8004360 <main+0x358>
 800430a:	4b65      	ldr	r3, [pc, #404]	; (80044a0 <main+0x498>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	f083 0301 	eor.w	r3, r3, #1
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d023      	beq.n	8004360 <main+0x358>
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <main+0x478>)
 800431a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d01e      	beq.n	8004360 <main+0x358>
 8004322:	4b57      	ldr	r3, [pc, #348]	; (8004480 <main+0x478>)
 8004324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004328:	2bc8      	cmp	r3, #200	; 0xc8
 800432a:	d019      	beq.n	8004360 <main+0x358>
			mode++;
 800432c:	4b54      	ldr	r3, [pc, #336]	; (8004480 <main+0x478>)
 800432e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004332:	b29b      	uxth	r3, r3
 8004334:	3301      	adds	r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	b21a      	sxth	r2, r3
 800433a:	4b51      	ldr	r3, [pc, #324]	; (8004480 <main+0x478>)
 800433c:	801a      	strh	r2, [r3, #0]
			if(mode == 3){
 800433e:	4b50      	ldr	r3, [pc, #320]	; (8004480 <main+0x478>)
 8004340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d102      	bne.n	800434e <main+0x346>
				mode = 0;
 8004348:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <main+0x478>)
 800434a:	2200      	movs	r2, #0
 800434c:	801a      	strh	r2, [r3, #0]
			}
			isPressButton1 = true;
 800434e:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <main+0x498>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004354:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <main+0x4ac>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	4958      	ldr	r1, [pc, #352]	; (80044bc <main+0x4b4>)
 800435c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//StopWatch Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 1 && isStopWatchRunning != true){ //Reset StopWatch
 8004360:	4b4c      	ldr	r3, [pc, #304]	; (8004494 <main+0x48c>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01d      	beq.n	80043a4 <main+0x39c>
 8004368:	4b4e      	ldr	r3, [pc, #312]	; (80044a4 <main+0x49c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f083 0301 	eor.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <main+0x39c>
 8004376:	4b42      	ldr	r3, [pc, #264]	; (8004480 <main+0x478>)
 8004378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d111      	bne.n	80043a4 <main+0x39c>
 8004380:	4b4f      	ldr	r3, [pc, #316]	; (80044c0 <main+0x4b8>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f083 0301 	eor.w	r3, r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <main+0x39c>
			isPressButton2 = true;
 800438e:	4b45      	ldr	r3, [pc, #276]	; (80044a4 <main+0x49c>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
			resetStopWatch();
 8004394:	f7ff f898 	bl	80034c8 <resetStopWatch>
			prevSecondCounter = millisecondHAL;
 8004398:	4b46      	ldr	r3, [pc, #280]	; (80044b4 <main+0x4ac>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	4947      	ldr	r1, [pc, #284]	; (80044bc <main+0x4b4>)
 80043a0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (pressButton3 == true && isPressButton3 == false && mode == 1){ //Running/Stop StopWatch
 80043a4:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <main+0x490>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d025      	beq.n	80043f8 <main+0x3f0>
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <main+0x4a0>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	f083 0301 	eor.w	r3, r3, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01e      	beq.n	80043f8 <main+0x3f0>
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <main+0x478>)
 80043bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d119      	bne.n	80043f8 <main+0x3f0>
			isPressButton3 = true;
 80043c4:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <main+0x4a0>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
			if(isStopWatchRunning == false){ // press button
 80043ca:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <main+0x4b8>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d006      	beq.n	80043e6 <main+0x3de>
				millisecondStopWatch = 0;
 80043d8:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <main+0x4bc>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
				isStopWatchRunning = true;
 80043de:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <main+0x4b8>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e002      	b.n	80043ec <main+0x3e4>
			}else{
				isStopWatchRunning = false;
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <main+0x4b8>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
			}
			prevSecondCounter = millisecondHAL;
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <main+0x4ac>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	4932      	ldr	r1, [pc, #200]	; (80044bc <main+0x4b4>)
 80043f4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Alarm Clock press when want to stop
		if((pressButton1|| pressButton2 || pressButton3 || pressButton4) && alarmIsAlert == true){
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <main+0x488>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <main+0x410>
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <main+0x48c>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d107      	bne.n	8004418 <main+0x410>
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <main+0x490>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <main+0x410>
 8004410:	4b22      	ldr	r3, [pc, #136]	; (800449c <main+0x494>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <main+0x442>
 8004418:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <main+0x4c0>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d014      	beq.n	800444a <main+0x442>
			isPressButton1 = true;
 8004420:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <main+0x498>)
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
			isPressButton2 = true;
 8004426:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <main+0x49c>)
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
			isPressButton3 = true;
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <main+0x4a0>)
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
			isPressButton4 = true;
 8004432:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <main+0x4a4>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <main+0x4ac>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	491f      	ldr	r1, [pc, #124]	; (80044bc <main+0x4b4>)
 8004440:	e9c1 2300 	strd	r2, r3, [r1]
			alarmIsAlert = false;
 8004444:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <main+0x4c0>)
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
		}

		//Adjust Time Mode For Mode 0 and 100
		if (pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <main+0x48c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d03c      	beq.n	80044cc <main+0x4c4>
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <main+0x49c>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d035      	beq.n	80044cc <main+0x4c4>
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <main+0x478>)
 8004462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d130      	bne.n	80044cc <main+0x4c4>
			isPressButton2 = true;
 800446a:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <main+0x49c>)
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <main+0x4ac>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	4911      	ldr	r1, [pc, #68]	; (80044bc <main+0x4b4>)
 8004478:	e9c1 2300 	strd	r2, r3, [r1]
 800447c:	e05c      	b.n	8004538 <main+0x530>
 800447e:	bf00      	nop
 8004480:	200002e4 	.word	0x200002e4
 8004484:	200002dc 	.word	0x200002dc
 8004488:	20000050 	.word	0x20000050
 800448c:	40020c00 	.word	0x40020c00
 8004490:	200002e6 	.word	0x200002e6
 8004494:	200002e7 	.word	0x200002e7
 8004498:	200002e8 	.word	0x200002e8
 800449c:	200002e9 	.word	0x200002e9
 80044a0:	200002ea 	.word	0x200002ea
 80044a4:	200002eb 	.word	0x200002eb
 80044a8:	200002ec 	.word	0x200002ec
 80044ac:	200002ed 	.word	0x200002ed
 80044b0:	20000318 	.word	0x20000318
 80044b4:	20000300 	.word	0x20000300
 80044b8:	20000310 	.word	0x20000310
 80044bc:	200002f8 	.word	0x200002f8
 80044c0:	2000032d 	.word	0x2000032d
 80044c4:	200002d8 	.word	0x200002d8
 80044c8:	200002f0 	.word	0x200002f0
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 80044cc:	4ba5      	ldr	r3, [pc, #660]	; (8004764 <main+0x75c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d031      	beq.n	8004538 <main+0x530>
 80044d4:	4ba4      	ldr	r3, [pc, #656]	; (8004768 <main+0x760>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02d      	beq.n	8004538 <main+0x530>
 80044dc:	4ba3      	ldr	r3, [pc, #652]	; (800476c <main+0x764>)
 80044de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d128      	bne.n	8004538 <main+0x530>
 80044e6:	4ba2      	ldr	r3, [pc, #648]	; (8004770 <main+0x768>)
 80044e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044ec:	4ba1      	ldr	r3, [pc, #644]	; (8004774 <main+0x76c>)
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	1a84      	subs	r4, r0, r2
 80044f4:	eb61 0503 	sbc.w	r5, r1, r3
 80044f8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	42ab      	cmp	r3, r5
 8004502:	bf08      	it	eq
 8004504:	42a2      	cmpeq	r2, r4
 8004506:	d217      	bcs.n	8004538 <main+0x530>
			buzzerIsOn = true;
 8004508:	4b9b      	ldr	r3, [pc, #620]	; (8004778 <main+0x770>)
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 800450e:	4b98      	ldr	r3, [pc, #608]	; (8004770 <main+0x768>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	4999      	ldr	r1, [pc, #612]	; (800477c <main+0x774>)
 8004516:	e9c1 2300 	strd	r2, r3, [r1]
			buzzerSound(50);
 800451a:	2032      	movs	r0, #50	; 0x32
 800451c:	f7fc fdf6 	bl	800110c <buzzerSound>

			modeEdit = 1; // Reset to Year First time
 8004520:	4b97      	ldr	r3, [pc, #604]	; (8004780 <main+0x778>)
 8004522:	2201      	movs	r2, #1
 8004524:	801a      	strh	r2, [r3, #0]
			mode = 100;
 8004526:	4b91      	ldr	r3, [pc, #580]	; (800476c <main+0x764>)
 8004528:	2264      	movs	r2, #100	; 0x64
 800452a:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 800452c:	4b90      	ldr	r3, [pc, #576]	; (8004770 <main+0x768>)
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	4990      	ldr	r1, [pc, #576]	; (8004774 <main+0x76c>)
 8004534:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 8004538:	4b8a      	ldr	r3, [pc, #552]	; (8004764 <main+0x75c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02c      	beq.n	800459a <main+0x592>
 8004540:	4b89      	ldr	r3, [pc, #548]	; (8004768 <main+0x760>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	f083 0301 	eor.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d025      	beq.n	800459a <main+0x592>
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <main+0x768>)
 8004550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004554:	4b87      	ldr	r3, [pc, #540]	; (8004774 <main+0x76c>)
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	ebb0 0802 	subs.w	r8, r0, r2
 800455e:	eb61 0903 	sbc.w	r9, r1, r3
 8004562:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	454b      	cmp	r3, r9
 800456c:	bf08      	it	eq
 800456e:	4542      	cmpeq	r2, r8
 8004570:	d213      	bcs.n	800459a <main+0x592>
 8004572:	4b7e      	ldr	r3, [pc, #504]	; (800476c <main+0x764>)
 8004574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004578:	2b64      	cmp	r3, #100	; 0x64
 800457a:	d10e      	bne.n	800459a <main+0x592>
			isPressButton2 = true;
 800457c:	4b7a      	ldr	r3, [pc, #488]	; (8004768 <main+0x760>)
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Year First time
 8004582:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <main+0x778>)
 8004584:	2201      	movs	r2, #1
 8004586:	801a      	strh	r2, [r3, #0]
			mode = 0;
 8004588:	4b78      	ldr	r3, [pc, #480]	; (800476c <main+0x764>)
 800458a:	2200      	movs	r2, #0
 800458c:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 800458e:	4b78      	ldr	r3, [pc, #480]	; (8004770 <main+0x768>)
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	4977      	ldr	r1, [pc, #476]	; (8004774 <main+0x76c>)
 8004596:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 800459a:	4b7a      	ldr	r3, [pc, #488]	; (8004784 <main+0x77c>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d028      	beq.n	80045f4 <main+0x5ec>
 80045a2:	4b79      	ldr	r3, [pc, #484]	; (8004788 <main+0x780>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f083 0301 	eor.w	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d021      	beq.n	80045f4 <main+0x5ec>
 80045b0:	4b6e      	ldr	r3, [pc, #440]	; (800476c <main+0x764>)
 80045b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d11c      	bne.n	80045f4 <main+0x5ec>
			modeEdit++;
 80045ba:	4b71      	ldr	r3, [pc, #452]	; (8004780 <main+0x778>)
 80045bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b21a      	sxth	r2, r3
 80045c8:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <main+0x778>)
 80045ca:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 80045cc:	4b6e      	ldr	r3, [pc, #440]	; (8004788 <main+0x780>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 8){	 // finish loop edit
 80045d2:	4b6b      	ldr	r3, [pc, #428]	; (8004780 <main+0x778>)
 80045d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d105      	bne.n	80045e8 <main+0x5e0>
				modeEdit = 1; // Reset to Year
 80045dc:	4b68      	ldr	r3, [pc, #416]	; (8004780 <main+0x778>)
 80045de:	2201      	movs	r2, #1
 80045e0:	801a      	strh	r2, [r3, #0]
				mode = 0;	  // Back to General Mode
 80045e2:	4b62      	ldr	r3, [pc, #392]	; (800476c <main+0x764>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	801a      	strh	r2, [r3, #0]
			}
			prevSecondCounter = millisecondHAL;
 80045e8:	4b61      	ldr	r3, [pc, #388]	; (8004770 <main+0x768>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	4961      	ldr	r1, [pc, #388]	; (8004774 <main+0x76c>)
 80045f0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 80045f4:	4b65      	ldr	r3, [pc, #404]	; (800478c <main+0x784>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d073      	beq.n	80046e4 <main+0x6dc>
 80045fc:	4b64      	ldr	r3, [pc, #400]	; (8004790 <main+0x788>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f083 0301 	eor.w	r3, r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d06c      	beq.n	80046e4 <main+0x6dc>
 800460a:	4b58      	ldr	r3, [pc, #352]	; (800476c <main+0x764>)
 800460c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004610:	2b64      	cmp	r3, #100	; 0x64
 8004612:	d167      	bne.n	80046e4 <main+0x6dc>
			if (modeEdit == 1){
 8004614:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <main+0x778>)
 8004616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d109      	bne.n	8004632 <main+0x62a>
				year--;
 800461e:	4b5d      	ldr	r3, [pc, #372]	; (8004794 <main+0x78c>)
 8004620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	b21a      	sxth	r2, r3
 800462c:	4b59      	ldr	r3, [pc, #356]	; (8004794 <main+0x78c>)
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	e04a      	b.n	80046c8 <main+0x6c0>
			}else if (modeEdit == 2){
 8004632:	4b53      	ldr	r3, [pc, #332]	; (8004780 <main+0x778>)
 8004634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d109      	bne.n	8004650 <main+0x648>
				monthIndex--;
 800463c:	4b56      	ldr	r3, [pc, #344]	; (8004798 <main+0x790>)
 800463e:	f993 3000 	ldrsb.w	r3, [r3]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	b25a      	sxtb	r2, r3
 800464a:	4b53      	ldr	r3, [pc, #332]	; (8004798 <main+0x790>)
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e03b      	b.n	80046c8 <main+0x6c0>
			}else if (modeEdit == 3){
 8004650:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <main+0x778>)
 8004652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d109      	bne.n	800466e <main+0x666>
				date--;
 800465a:	4b50      	ldr	r3, [pc, #320]	; (800479c <main+0x794>)
 800465c:	f993 3000 	ldrsb.w	r3, [r3]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	b25a      	sxtb	r2, r3
 8004668:	4b4c      	ldr	r3, [pc, #304]	; (800479c <main+0x794>)
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e02c      	b.n	80046c8 <main+0x6c0>
			}else if (modeEdit == 4){
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <main+0x778>)
 8004670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d109      	bne.n	800468c <main+0x684>
				dayIndex--;
 8004678:	4b49      	ldr	r3, [pc, #292]	; (80047a0 <main+0x798>)
 800467a:	f993 3000 	ldrsb.w	r3, [r3]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	b25a      	sxtb	r2, r3
 8004686:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <main+0x798>)
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e01d      	b.n	80046c8 <main+0x6c0>
			}else if (modeEdit == 5){
 800468c:	4b3c      	ldr	r3, [pc, #240]	; (8004780 <main+0x778>)
 800468e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d105      	bne.n	80046a2 <main+0x69a>
				hourNum--;
 8004696:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <main+0x79c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3b01      	subs	r3, #1
 800469c:	4a41      	ldr	r2, [pc, #260]	; (80047a4 <main+0x79c>)
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e012      	b.n	80046c8 <main+0x6c0>
			}else if (modeEdit == 6){
 80046a2:	4b37      	ldr	r3, [pc, #220]	; (8004780 <main+0x778>)
 80046a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d105      	bne.n	80046b8 <main+0x6b0>
				minuteNum--;
 80046ac:	4b3e      	ldr	r3, [pc, #248]	; (80047a8 <main+0x7a0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4a3d      	ldr	r2, [pc, #244]	; (80047a8 <main+0x7a0>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e007      	b.n	80046c8 <main+0x6c0>
			}else if (modeEdit == 7){
 80046b8:	4b31      	ldr	r3, [pc, #196]	; (8004780 <main+0x778>)
 80046ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046be:	2b07      	cmp	r3, #7
 80046c0:	d102      	bne.n	80046c8 <main+0x6c0>
				secondNum = 0;
 80046c2:	4b3a      	ldr	r3, [pc, #232]	; (80047ac <main+0x7a4>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <main+0x7a8>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 80046ce:	f7fd fe0b 	bl	80022e8 <resetPrevNum>
			isPressButton3 = true;
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <main+0x788>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <main+0x768>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	4925      	ldr	r1, [pc, #148]	; (8004774 <main+0x76c>)
 80046e0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 80046e4:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <main+0x7ac>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80a2 	beq.w	8004832 <main+0x82a>
 80046ee:	4b32      	ldr	r3, [pc, #200]	; (80047b8 <main+0x7b0>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 809a 	beq.w	8004832 <main+0x82a>
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <main+0x764>)
 8004700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004704:	2b64      	cmp	r3, #100	; 0x64
 8004706:	f040 8094 	bne.w	8004832 <main+0x82a>
			if (modeEdit == 1){
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <main+0x778>)
 800470c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d109      	bne.n	8004728 <main+0x720>
				year++;
 8004714:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <main+0x78c>)
 8004716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800471a:	b29b      	uxth	r3, r3
 800471c:	3301      	adds	r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	b21a      	sxth	r2, r3
 8004722:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <main+0x78c>)
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	e076      	b.n	8004816 <main+0x80e>
			}else if (modeEdit == 2){
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <main+0x778>)
 800472a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d109      	bne.n	8004746 <main+0x73e>
				monthIndex++;
 8004732:	4b19      	ldr	r3, [pc, #100]	; (8004798 <main+0x790>)
 8004734:	f993 3000 	ldrsb.w	r3, [r3]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	3301      	adds	r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	b25a      	sxtb	r2, r3
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <main+0x790>)
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e067      	b.n	8004816 <main+0x80e>
			}else if (modeEdit == 3){
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <main+0x778>)
 8004748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d135      	bne.n	80047bc <main+0x7b4>
				date++;
 8004750:	4b12      	ldr	r3, [pc, #72]	; (800479c <main+0x794>)
 8004752:	f993 3000 	ldrsb.w	r3, [r3]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3301      	adds	r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	b25a      	sxtb	r2, r3
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <main+0x794>)
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e058      	b.n	8004816 <main+0x80e>
 8004764:	200002e7 	.word	0x200002e7
 8004768:	200002eb 	.word	0x200002eb
 800476c:	200002e4 	.word	0x200002e4
 8004770:	20000300 	.word	0x20000300
 8004774:	200002f8 	.word	0x200002f8
 8004778:	20000318 	.word	0x20000318
 800477c:	20000310 	.word	0x20000310
 8004780:	2000005a 	.word	0x2000005a
 8004784:	200002e6 	.word	0x200002e6
 8004788:	200002ea 	.word	0x200002ea
 800478c:	200002e8 	.word	0x200002e8
 8004790:	200002ec 	.word	0x200002ec
 8004794:	200000b2 	.word	0x200000b2
 8004798:	200000b1 	.word	0x200000b1
 800479c:	20000061 	.word	0x20000061
 80047a0:	200000b0 	.word	0x200000b0
 80047a4:	20000040 	.word	0x20000040
 80047a8:	2000003c 	.word	0x2000003c
 80047ac:	20000038 	.word	0x20000038
 80047b0:	20000050 	.word	0x20000050
 80047b4:	200002e9 	.word	0x200002e9
 80047b8:	200002ed 	.word	0x200002ed
			}else if (modeEdit == 4){
 80047bc:	4ba8      	ldr	r3, [pc, #672]	; (8004a60 <main+0xa58>)
 80047be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d109      	bne.n	80047da <main+0x7d2>
				dayIndex++;
 80047c6:	4ba7      	ldr	r3, [pc, #668]	; (8004a64 <main+0xa5c>)
 80047c8:	f993 3000 	ldrsb.w	r3, [r3]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	b25a      	sxtb	r2, r3
 80047d4:	4ba3      	ldr	r3, [pc, #652]	; (8004a64 <main+0xa5c>)
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e01d      	b.n	8004816 <main+0x80e>
			}else if (modeEdit == 5){
 80047da:	4ba1      	ldr	r3, [pc, #644]	; (8004a60 <main+0xa58>)
 80047dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d105      	bne.n	80047f0 <main+0x7e8>
				hourNum++;
 80047e4:	4ba0      	ldr	r3, [pc, #640]	; (8004a68 <main+0xa60>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	4a9f      	ldr	r2, [pc, #636]	; (8004a68 <main+0xa60>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e012      	b.n	8004816 <main+0x80e>
			}else if (modeEdit == 6){
 80047f0:	4b9b      	ldr	r3, [pc, #620]	; (8004a60 <main+0xa58>)
 80047f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d105      	bne.n	8004806 <main+0x7fe>
				minuteNum++;
 80047fa:	4b9c      	ldr	r3, [pc, #624]	; (8004a6c <main+0xa64>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3301      	adds	r3, #1
 8004800:	4a9a      	ldr	r2, [pc, #616]	; (8004a6c <main+0xa64>)
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e007      	b.n	8004816 <main+0x80e>
			}else if (modeEdit == 7){
 8004806:	4b96      	ldr	r3, [pc, #600]	; (8004a60 <main+0xa58>)
 8004808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800480c:	2b07      	cmp	r3, #7
 800480e:	d102      	bne.n	8004816 <main+0x80e>
				secondNum = 0;
 8004810:	4b97      	ldr	r3, [pc, #604]	; (8004a70 <main+0xa68>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8004816:	4b97      	ldr	r3, [pc, #604]	; (8004a74 <main+0xa6c>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 800481c:	f7fd fd64 	bl	80022e8 <resetPrevNum>
			isPressButton4 = true;
 8004820:	4b95      	ldr	r3, [pc, #596]	; (8004a78 <main+0xa70>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004826:	4b95      	ldr	r3, [pc, #596]	; (8004a7c <main+0xa74>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	4994      	ldr	r1, [pc, #592]	; (8004a80 <main+0xa78>)
 800482e:	e9c1 2300 	strd	r2, r3, [r1]
		}



		//Adjust Alarm Mode For Mode 2 and 200
		if (pressButton2 == true && isPressButton2 == false && mode == 2){ // initial time when pressButton2
 8004832:	4b94      	ldr	r3, [pc, #592]	; (8004a84 <main+0xa7c>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d029      	beq.n	800488e <main+0x886>
 800483a:	4b93      	ldr	r3, [pc, #588]	; (8004a88 <main+0xa80>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	f083 0301 	eor.w	r3, r3, #1
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d022      	beq.n	800488e <main+0x886>
 8004848:	4b90      	ldr	r3, [pc, #576]	; (8004a8c <main+0xa84>)
 800484a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d11d      	bne.n	800488e <main+0x886>
			isPressButton2 = true;
 8004852:	4b8d      	ldr	r3, [pc, #564]	; (8004a88 <main+0xa80>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
			alarmIsOn = !alarmIsOn;
 8004858:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <main+0xa88>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f083 0301 	eor.w	r3, r3, #1
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b87      	ldr	r3, [pc, #540]	; (8004a90 <main+0xa88>)
 8004874:	701a      	strb	r2, [r3, #0]
			displayAlarmIcon(alarmIsOn);
 8004876:	4b86      	ldr	r3, [pc, #536]	; (8004a90 <main+0xa88>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fd faac 	bl	8001dd8 <displayAlarmIcon>
			prevSecondCounter = millisecondHAL;
 8004880:	4b7e      	ldr	r3, [pc, #504]	; (8004a7c <main+0xa74>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	497e      	ldr	r1, [pc, #504]	; (8004a80 <main+0xa78>)
 8004888:	e9c1 2300 	strd	r2, r3, [r1]
 800488c:	e039      	b.n	8004902 <main+0x8fa>
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 2 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 800488e:	4b7d      	ldr	r3, [pc, #500]	; (8004a84 <main+0xa7c>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d035      	beq.n	8004902 <main+0x8fa>
 8004896:	4b7c      	ldr	r3, [pc, #496]	; (8004a88 <main+0xa80>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d031      	beq.n	8004902 <main+0x8fa>
 800489e:	4b7b      	ldr	r3, [pc, #492]	; (8004a8c <main+0xa84>)
 80048a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d12c      	bne.n	8004902 <main+0x8fa>
 80048a8:	4b74      	ldr	r3, [pc, #464]	; (8004a7c <main+0xa74>)
 80048aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <main+0xa78>)
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	ebb0 0a02 	subs.w	sl, r0, r2
 80048b8:	eb61 0b03 	sbc.w	fp, r1, r3
 80048bc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	455b      	cmp	r3, fp
 80048c6:	bf08      	it	eq
 80048c8:	4552      	cmpeq	r2, sl
 80048ca:	d21a      	bcs.n	8004902 <main+0x8fa>
			buzzerIsOn = true;
 80048cc:	4b71      	ldr	r3, [pc, #452]	; (8004a94 <main+0xa8c>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <main+0xa74>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	496f      	ldr	r1, [pc, #444]	; (8004a98 <main+0xa90>)
 80048da:	e9c1 2300 	strd	r2, r3, [r1]
			buzzerSound(50);
 80048de:	2032      	movs	r0, #50	; 0x32
 80048e0:	f7fc fc14 	bl	800110c <buzzerSound>

			modeEdit = 1; // Reset to Hour First time
 80048e4:	4b5e      	ldr	r3, [pc, #376]	; (8004a60 <main+0xa58>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	801a      	strh	r2, [r3, #0]
			mode = 200;
 80048ea:	4b68      	ldr	r3, [pc, #416]	; (8004a8c <main+0xa84>)
 80048ec:	22c8      	movs	r2, #200	; 0xc8
 80048ee:	801a      	strh	r2, [r3, #0]
			alarmIsOn = true; // always on when editing this alarm
 80048f0:	4b67      	ldr	r3, [pc, #412]	; (8004a90 <main+0xa88>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80048f6:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <main+0xa74>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	4960      	ldr	r1, [pc, #384]	; (8004a80 <main+0xa78>)
 80048fe:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Alarm Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 200){
 8004902:	4b60      	ldr	r3, [pc, #384]	; (8004a84 <main+0xa7c>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02f      	beq.n	800496a <main+0x962>
 800490a:	4b5f      	ldr	r3, [pc, #380]	; (8004a88 <main+0xa80>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	f083 0301 	eor.w	r3, r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d028      	beq.n	800496a <main+0x962>
 8004918:	4b58      	ldr	r3, [pc, #352]	; (8004a7c <main+0xa74>)
 800491a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491e:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <main+0xa78>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	1a86      	subs	r6, r0, r2
 8004926:	60be      	str	r6, [r7, #8]
 8004928:	eb61 0303 	sbc.w	r3, r1, r3
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800493a:	428b      	cmp	r3, r1
 800493c:	bf08      	it	eq
 800493e:	4282      	cmpeq	r2, r0
 8004940:	d213      	bcs.n	800496a <main+0x962>
 8004942:	4b52      	ldr	r3, [pc, #328]	; (8004a8c <main+0xa84>)
 8004944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004948:	2bc8      	cmp	r3, #200	; 0xc8
 800494a:	d10e      	bne.n	800496a <main+0x962>
			isPressButton2 = true;
 800494c:	4b4e      	ldr	r3, [pc, #312]	; (8004a88 <main+0xa80>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Hour First time
 8004952:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <main+0xa58>)
 8004954:	2201      	movs	r2, #1
 8004956:	801a      	strh	r2, [r3, #0]
			mode = 2;
 8004958:	4b4c      	ldr	r3, [pc, #304]	; (8004a8c <main+0xa84>)
 800495a:	2202      	movs	r2, #2
 800495c:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <main+0xa74>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	4946      	ldr	r1, [pc, #280]	; (8004a80 <main+0xa78>)
 8004966:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 200){ // increase mode only once
 800496a:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <main+0xa94>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d028      	beq.n	80049c4 <main+0x9bc>
 8004972:	4b4b      	ldr	r3, [pc, #300]	; (8004aa0 <main+0xa98>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	f083 0301 	eor.w	r3, r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d021      	beq.n	80049c4 <main+0x9bc>
 8004980:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <main+0xa84>)
 8004982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004986:	2bc8      	cmp	r3, #200	; 0xc8
 8004988:	d11c      	bne.n	80049c4 <main+0x9bc>
			modeEdit++;
 800498a:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <main+0xa58>)
 800498c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004990:	b29b      	uxth	r3, r3
 8004992:	3301      	adds	r3, #1
 8004994:	b29b      	uxth	r3, r3
 8004996:	b21a      	sxth	r2, r3
 8004998:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <main+0xa58>)
 800499a:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 800499c:	4b40      	ldr	r3, [pc, #256]	; (8004aa0 <main+0xa98>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 3){	 // finish loop edit
 80049a2:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <main+0xa58>)
 80049a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d105      	bne.n	80049b8 <main+0x9b0>
				modeEdit = 1; // Reset to Hour
 80049ac:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <main+0xa58>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	801a      	strh	r2, [r3, #0]
				mode = 2;	  // Back to Alarm Mode
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <main+0xa84>)
 80049b4:	2202      	movs	r2, #2
 80049b6:	801a      	strh	r2, [r3, #0]
			}
			prevSecondCounter = millisecondHAL;
 80049b8:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <main+0xa74>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	4930      	ldr	r1, [pc, #192]	; (8004a80 <main+0xa78>)
 80049c0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 200){ // increase value
 80049c4:	4b37      	ldr	r3, [pc, #220]	; (8004aa4 <main+0xa9c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02e      	beq.n	8004a2a <main+0xa22>
 80049cc:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <main+0xaa0>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	f083 0301 	eor.w	r3, r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d027      	beq.n	8004a2a <main+0xa22>
 80049da:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <main+0xa84>)
 80049dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e0:	2bc8      	cmp	r3, #200	; 0xc8
 80049e2:	d122      	bne.n	8004a2a <main+0xa22>
			if (modeEdit == 1){
 80049e4:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <main+0xa58>)
 80049e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d105      	bne.n	80049fa <main+0x9f2>
				alarmHour--;
 80049ee:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <main+0xaa4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <main+0xaa4>)
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e009      	b.n	8004a0e <main+0xa06>
			}else if (modeEdit == 2){
 80049fa:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <main+0xa58>)
 80049fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d104      	bne.n	8004a0e <main+0xa06>
				alarmMinute--;
 8004a04:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <main+0xaa8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	4a29      	ldr	r2, [pc, #164]	; (8004ab0 <main+0xaa8>)
 8004a0c:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <main+0xa6c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 8004a14:	f7fe ffce 	bl	80039b4 <resetPrevAlarm>
			isPressButton3 = true;
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <main+0xaa0>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <main+0xa74>)
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	4916      	ldr	r1, [pc, #88]	; (8004a80 <main+0xa78>)
 8004a26:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 200){ // decrease value
 8004a2a:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <main+0xaac>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d05a      	beq.n	8004ae8 <main+0xae0>
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <main+0xa70>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f083 0301 	eor.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d053      	beq.n	8004ae8 <main+0xae0>
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <main+0xa84>)
 8004a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a46:	2bc8      	cmp	r3, #200	; 0xc8
 8004a48:	d14e      	bne.n	8004ae8 <main+0xae0>
			if (modeEdit == 1){
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <main+0xa58>)
 8004a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d131      	bne.n	8004ab8 <main+0xab0>
				alarmHour++;
 8004a54:	4b15      	ldr	r3, [pc, #84]	; (8004aac <main+0xaa4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	4a14      	ldr	r2, [pc, #80]	; (8004aac <main+0xaa4>)
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e035      	b.n	8004acc <main+0xac4>
 8004a60:	2000005a 	.word	0x2000005a
 8004a64:	200000b0 	.word	0x200000b0
 8004a68:	20000040 	.word	0x20000040
 8004a6c:	2000003c 	.word	0x2000003c
 8004a70:	20000038 	.word	0x20000038
 8004a74:	20000050 	.word	0x20000050
 8004a78:	200002ed 	.word	0x200002ed
 8004a7c:	20000300 	.word	0x20000300
 8004a80:	200002f8 	.word	0x200002f8
 8004a84:	200002e7 	.word	0x200002e7
 8004a88:	200002eb 	.word	0x200002eb
 8004a8c:	200002e4 	.word	0x200002e4
 8004a90:	20000060 	.word	0x20000060
 8004a94:	20000318 	.word	0x20000318
 8004a98:	20000310 	.word	0x20000310
 8004a9c:	200002e6 	.word	0x200002e6
 8004aa0:	200002ea 	.word	0x200002ea
 8004aa4:	200002e8 	.word	0x200002e8
 8004aa8:	200002ec 	.word	0x200002ec
 8004aac:	200002d0 	.word	0x200002d0
 8004ab0:	200002cc 	.word	0x200002cc
 8004ab4:	200002e9 	.word	0x200002e9
			}else if (modeEdit == 2){
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <main+0xb5c>)
 8004aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d104      	bne.n	8004acc <main+0xac4>
				alarmMinute++;
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <main+0xb60>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <main+0xb60>)
 8004aca:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <main+0xb64>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 8004ad2:	f7fe ff6f 	bl	80039b4 <resetPrevAlarm>
			isPressButton4 = true;
 8004ad6:	4b26      	ldr	r3, [pc, #152]	; (8004b70 <main+0xb68>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <main+0xb6c>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	4925      	ldr	r1, [pc, #148]	; (8004b78 <main+0xb70>)
 8004ae4:	e9c1 2300 	strd	r2, r3, [r1]
		}



		if(millisecondHAL - prevSecondCounter >= 150){
 8004ae8:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <main+0xb6c>)
 8004aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aee:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <main+0xb70>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	1a86      	subs	r6, r0, r2
 8004af6:	603e      	str	r6, [r7, #0]
 8004af8:	eb61 0303 	sbc.w	r3, r1, r3
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf08      	it	eq
 8004b06:	2a96      	cmpeq	r2, #150	; 0x96
 8004b08:	f4ff aac1 	bcc.w	800408e <main+0x86>
			//Reset isPressButton
			if (pressButton1 == false){
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <main+0xb74>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f083 0301 	eor.w	r3, r3, #1
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <main+0xb18>
				isPressButton1 = false;
 8004b1a:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <main+0xb78>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
			}
			if (pressButton2 == false){
 8004b20:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <main+0xb7c>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f083 0301 	eor.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <main+0xb2c>
				isPressButton2 = false;
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <main+0xb80>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
			}
			if (pressButton3 == false){
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <main+0xb84>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f083 0301 	eor.w	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <main+0xb40>
				isPressButton3 = false;
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <main+0xb88>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
			}
			if (pressButton4 == false){
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <main+0xb8c>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f083 0301 	eor.w	r3, r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f43f aa9b 	beq.w	800408e <main+0x86>
				isPressButton4 = false;
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <main+0xb68>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
		calculationClock();
 8004b5e:	f7ff ba96 	b.w	800408e <main+0x86>
 8004b62:	bf00      	nop
 8004b64:	2000005a 	.word	0x2000005a
 8004b68:	200002cc 	.word	0x200002cc
 8004b6c:	20000050 	.word	0x20000050
 8004b70:	200002ed 	.word	0x200002ed
 8004b74:	20000300 	.word	0x20000300
 8004b78:	200002f8 	.word	0x200002f8
 8004b7c:	200002e6 	.word	0x200002e6
 8004b80:	200002ea 	.word	0x200002ea
 8004b84:	200002e7 	.word	0x200002e7
 8004b88:	200002eb 	.word	0x200002eb
 8004b8c:	200002e8 	.word	0x200002e8
 8004b90:	200002ec 	.word	0x200002ec
 8004b94:	200002e9 	.word	0x200002e9

08004b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b0b8      	sub	sp, #224	; 0xe0
 8004b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ba2:	2234      	movs	r2, #52	; 0x34
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f007 f9c6 	bl	800bf38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	2290      	movs	r2, #144	; 0x90
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f007 f9b7 	bl	800bf38 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004bca:	f003 fcf5 	bl	80085b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <SystemClock_Config+0x130>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a3d      	ldr	r2, [pc, #244]	; (8004cc8 <SystemClock_Config+0x130>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <SystemClock_Config+0x130>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004be6:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <SystemClock_Config+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a38      	ldr	r2, [pc, #224]	; (8004ccc <SystemClock_Config+0x134>)
 8004bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <SystemClock_Config+0x134>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004c04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8004c20:	23c8      	movs	r3, #200	; 0xc8
 8004c22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c26:	2302      	movs	r3, #2
 8004c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004c2c:	2309      	movs	r3, #9
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004c32:	2302      	movs	r3, #2
 8004c34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f003 fd1b 	bl	8008678 <HAL_RCC_OscConfig>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004c48:	f000 f8a6 	bl	8004d98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004c4c:	f003 fcc4 	bl	80085d8 <HAL_PWREx_EnableOverDrive>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004c56:	f000 f89f 	bl	8004d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c5a:	230f      	movs	r3, #15
 8004c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c60:	2302      	movs	r3, #2
 8004c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004c7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c80:	2106      	movs	r1, #6
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 ffa6 	bl	8008bd4 <HAL_RCC_ClockConfig>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8004c8e:	f000 f883 	bl	8004d98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <SystemClock_Config+0x138>)
 8004c94:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c96:	2300      	movs	r3, #0
 8004c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cac:	f107 0308 	add.w	r3, r7, #8
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f004 f991 	bl	8008fd8 <HAL_RCCEx_PeriphCLKConfig>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8004cbc:	f000 f86c 	bl	8004d98 <Error_Handler>
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	37e0      	adds	r7, #224	; 0xe0
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	00204340 	.word	0x00204340

08004cd4 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8004ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ce4:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	737b      	strb	r3, [r7, #13]

	while (length--){
 8004cea:	e023      	b.n	8004d34 <CRC16_2+0x60>
		crc ^= *ptr++;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	89fb      	ldrh	r3, [r7, #14]
 8004cf8:	4053      	eors	r3, r2
 8004cfa:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	737b      	strb	r3, [r7, #13]
 8004d00:	e015      	b.n	8004d2e <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8004d02:	89fb      	ldrh	r3, [r7, #14]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <CRC16_2+0x4e>
				crc >>= 1;
 8004d0c:	89fb      	ldrh	r3, [r7, #14]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8004d18:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	81fb      	strh	r3, [r7, #14]
 8004d20:	e002      	b.n	8004d28 <CRC16_2+0x54>
			}
			else
				crc >>= 1;
 8004d22:	89fb      	ldrh	r3, [r7, #14]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8004d28:	7b7b      	ldrb	r3, [r7, #13]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	737b      	strb	r3, [r7, #13]
 8004d2e:	7b7b      	ldrb	r3, [r7, #13]
 8004d30:	2b07      	cmp	r3, #7
 8004d32:	d9e6      	bls.n	8004d02 <CRC16_2+0x2e>
	while (length--){
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	1e5a      	subs	r2, r3, #1
 8004d38:	70fa      	strb	r2, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1d6      	bne.n	8004cec <CRC16_2+0x18>
		}
	}
	return crc;
 8004d3e:	89fb      	ldrh	r3, [r7, #14]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	80fb      	strh	r3, [r7, #6]

	//On Board
	//Blue
	if (GPIO_Pin == GPIO_PIN_13){
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5c:	d110      	bne.n	8004d80 <HAL_GPIO_EXTI_Callback+0x34>
		userResetButton = 1;
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Interrupt pin13 \n\r");
 8004d64:	4909      	ldr	r1, [pc, #36]	; (8004d8c <HAL_GPIO_EXTI_Callback+0x40>)
 8004d66:	480a      	ldr	r0, [pc, #40]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d68:	f007 fd30 	bl	800c7cc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8004d6c:	4808      	ldr	r0, [pc, #32]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d6e:	f7fb fa67 	bl	8000240 <strlen>
 8004d72:	4603      	mov	r3, r0
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	23c8      	movs	r3, #200	; 0xc8
 8004d78:	4905      	ldr	r1, [pc, #20]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d7a:	4806      	ldr	r0, [pc, #24]	; (8004d94 <HAL_GPIO_EXTI_Callback+0x48>)
 8004d7c:	f006 fb84 	bl	800b488 <HAL_UART_Transmit>
	}

}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	200002ee 	.word	0x200002ee
 8004d8c:	0800ecc8 	.word	0x0800ecc8
 8004d90:	20000450 	.word	0x20000450
 8004d94:	2000068c 	.word	0x2000068c

08004d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8004d9c:	e7fe      	b.n	8004d9c <Error_Handler+0x4>
	...

08004da0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <MX_RNG_Init+0x20>)
 8004da6:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <MX_RNG_Init+0x24>)
 8004da8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004daa:	4805      	ldr	r0, [pc, #20]	; (8004dc0 <MX_RNG_Init+0x20>)
 8004dac:	f004 fd3c 	bl	8009828 <HAL_RNG_Init>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8004db6:	f7ff ffef 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200004e8 	.word	0x200004e8
 8004dc4:	50060800 	.word	0x50060800

08004dc8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <HAL_RNG_MspInit+0x38>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10b      	bne.n	8004df2 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <HAL_RNG_MspInit+0x3c>)
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <HAL_RNG_MspInit+0x3c>)
 8004de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de4:	6353      	str	r3, [r2, #52]	; 0x34
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <HAL_RNG_MspInit+0x3c>)
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	50060800 	.word	0x50060800
 8004e04:	40023800 	.word	0x40023800

08004e08 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <MX_SPI5_Init+0x78>)
 8004e10:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e18:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e26:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004e34:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e3a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e42:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e56:	2207      	movs	r2, #7
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004e5a:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004e60:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004e66:	4805      	ldr	r0, [pc, #20]	; (8004e7c <MX_SPI5_Init+0x74>)
 8004e68:	f004 fd08 	bl	800987c <HAL_SPI_Init>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8004e72:	f7ff ff91 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200004f8 	.word	0x200004f8
 8004e80:	40015000 	.word	0x40015000

08004e84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <HAL_SPI_MspInit+0x7c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d128      	bne.n	8004ef8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004ea6:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <HAL_SPI_MspInit+0x80>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <HAL_SPI_MspInit+0x80>)
 8004eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb2:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <HAL_SPI_MspInit+0x80>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <HAL_SPI_MspInit+0x80>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <HAL_SPI_MspInit+0x80>)
 8004ec4:	f043 0320 	orr.w	r3, r3, #32
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <HAL_SPI_MspInit+0x80>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004ed6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	2302      	movs	r3, #2
 8004ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004ee8:	2305      	movs	r3, #5
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4805      	ldr	r0, [pc, #20]	; (8004f08 <HAL_SPI_MspInit+0x84>)
 8004ef4:	f002 f9a2 	bl	800723c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40015000 	.word	0x40015000
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40021400 	.word	0x40021400

08004f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_MspInit+0x44>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <HAL_MspInit+0x44>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_MspInit+0x44>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_MspInit+0x44>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <HAL_MspInit+0x44>)
 8004f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f34:	6453      	str	r3, [r2, #68]	; 0x44
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_MspInit+0x44>)
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800

08004f54 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f58:	f001 fc2c 	bl	80067b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f5c:	bf00      	nop
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f64:	4807      	ldr	r0, [pc, #28]	; (8004f84 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8004f66:	f005 faaf 	bl	800a4c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004f72:	6013      	str	r3, [r2, #0]
  millisecondStopWatch++;
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004f7c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	200005f4 	.word	0x200005f4
 8004f88:	200002d4 	.word	0x200002d4
 8004f8c:	200002d8 	.word	0x200002d8

08004f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f94:	4803      	ldr	r0, [pc, #12]	; (8004fa4 <TIM2_IRQHandler+0x14>)
 8004f96:	f005 fa97 	bl	800a4c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8004f9a:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <TIM2_IRQHandler+0x18>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8004fa0:	bf00      	nop
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000640 	.word	0x20000640
 8004fa8:	200002dc 	.word	0x200002dc

08004fac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004fb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fb4:	f002 fb20 	bl	80075f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fb8:	bf00      	nop
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
	return 1;
 8004fc0:	2301      	movs	r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <_kill>:

int _kill(int pid, int sig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fd6:	f006 ff85 	bl	800bee4 <__errno>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2216      	movs	r2, #22
 8004fde:	601a      	str	r2, [r3, #0]
	return -1;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <_exit>:

void _exit (int status)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ffe7 	bl	8004fcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ffe:	e7fe      	b.n	8004ffe <_exit+0x12>

08005000 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e00a      	b.n	8005028 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005012:	f3af 8000 	nop.w
 8005016:	4601      	mov	r1, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	60ba      	str	r2, [r7, #8]
 800501e:	b2ca      	uxtb	r2, r1
 8005020:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	3301      	adds	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	dbf0      	blt.n	8005012 <_read+0x12>
	}

return len;
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e009      	b.n	8005060 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	60ba      	str	r2, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	dbf1      	blt.n	800504c <_write+0x12>
	}
	return len;
 8005068:	687b      	ldr	r3, [r7, #4]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <_close>:

int _close(int file)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
	return -1;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800509a:	605a      	str	r2, [r3, #4]
	return 0;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <_isatty>:

int _isatty(int file)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
	return 1;
 80050b2:	2301      	movs	r3, #1
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
	return 0;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <_sbrk+0x5c>)
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <_sbrk+0x60>)
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050f0:	4b13      	ldr	r3, [pc, #76]	; (8005140 <_sbrk+0x64>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050f8:	4b11      	ldr	r3, [pc, #68]	; (8005140 <_sbrk+0x64>)
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <_sbrk+0x68>)
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <_sbrk+0x64>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	429a      	cmp	r2, r3
 800510a:	d207      	bcs.n	800511c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800510c:	f006 feea 	bl	800bee4 <__errno>
 8005110:	4603      	mov	r3, r0
 8005112:	220c      	movs	r2, #12
 8005114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e009      	b.n	8005130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <_sbrk+0x64>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <_sbrk+0x64>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4413      	add	r3, r2
 800512a:	4a05      	ldr	r2, [pc, #20]	; (8005140 <_sbrk+0x64>)
 800512c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20080000 	.word	0x20080000
 800513c:	00000400 	.word	0x00000400
 8005140:	200003a0 	.word	0x200003a0
 8005144:	20000830 	.word	0x20000830

08005148 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800514c:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <SystemInit+0x5c>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <SystemInit+0x5c>)
 8005154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <SystemInit+0x60>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a11      	ldr	r2, [pc, #68]	; (80051a8 <SystemInit+0x60>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <SystemInit+0x60>)
 800516a:	2200      	movs	r2, #0
 800516c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <SystemInit+0x60>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	490d      	ldr	r1, [pc, #52]	; (80051a8 <SystemInit+0x60>)
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <SystemInit+0x64>)
 8005176:	4013      	ands	r3, r2
 8005178:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <SystemInit+0x60>)
 800517c:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <SystemInit+0x68>)
 800517e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <SystemInit+0x60>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <SystemInit+0x60>)
 8005186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <SystemInit+0x60>)
 800518e:	2200      	movs	r2, #0
 8005190:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <SystemInit+0x5c>)
 8005194:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005198:	609a      	str	r2, [r3, #8]
#endif
}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00
 80051a8:	40023800 	.word	0x40023800
 80051ac:	fef6ffff 	.word	0xfef6ffff
 80051b0:	24003010 	.word	0x24003010

080051b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	609a      	str	r2, [r3, #8]
 80051c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	605a      	str	r2, [r3, #4]
 80051d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <MX_TIM1_Init+0xa0>)
 80051d4:	4a20      	ldr	r2, [pc, #128]	; (8005258 <MX_TIM1_Init+0xa4>)
 80051d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <MX_TIM1_Init+0xa0>)
 80051da:	22c7      	movs	r2, #199	; 0xc7
 80051dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <MX_TIM1_Init+0xa0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <MX_TIM1_Init+0xa0>)
 80051e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <MX_TIM1_Init+0xa0>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80051f2:	4b18      	ldr	r3, [pc, #96]	; (8005254 <MX_TIM1_Init+0xa0>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051f8:	4b16      	ldr	r3, [pc, #88]	; (8005254 <MX_TIM1_Init+0xa0>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80051fe:	4815      	ldr	r0, [pc, #84]	; (8005254 <MX_TIM1_Init+0xa0>)
 8005200:	f004 feb6 	bl	8009f70 <HAL_TIM_Base_Init>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800520a:	f7ff fdc5 	bl	8004d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800520e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005212:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	4619      	mov	r1, r3
 800521a:	480e      	ldr	r0, [pc, #56]	; (8005254 <MX_TIM1_Init+0xa0>)
 800521c:	f005 fb84 	bl	800a928 <HAL_TIM_ConfigClockSource>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8005226:	f7ff fdb7 	bl	8004d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4806      	ldr	r0, [pc, #24]	; (8005254 <MX_TIM1_Init+0xa0>)
 800523c:	f006 f82a 	bl	800b294 <HAL_TIMEx_MasterConfigSynchronization>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005246:	f7ff fda7 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800524a:	bf00      	nop
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200005f4 	.word	0x200005f4
 8005258:	40010000 	.word	0x40010000

0800525c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005262:	f107 0310 	add.w	r3, r7, #16
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005270:	1d3b      	adds	r3, r7, #4
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	605a      	str	r2, [r3, #4]
 8005278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800527a:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <MX_TIM2_Init+0x98>)
 800527c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <MX_TIM2_Init+0x98>)
 8005284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800528a:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <MX_TIM2_Init+0x98>)
 800528c:	2200      	movs	r2, #0
 800528e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <MX_TIM2_Init+0x98>)
 8005292:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005298:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <MX_TIM2_Init+0x98>)
 800529a:	2200      	movs	r2, #0
 800529c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800529e:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <MX_TIM2_Init+0x98>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052a4:	4813      	ldr	r0, [pc, #76]	; (80052f4 <MX_TIM2_Init+0x98>)
 80052a6:	f004 fe63 	bl	8009f70 <HAL_TIM_Base_Init>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80052b0:	f7ff fd72 	bl	8004d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052ba:	f107 0310 	add.w	r3, r7, #16
 80052be:	4619      	mov	r1, r3
 80052c0:	480c      	ldr	r0, [pc, #48]	; (80052f4 <MX_TIM2_Init+0x98>)
 80052c2:	f005 fb31 	bl	800a928 <HAL_TIM_ConfigClockSource>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80052cc:	f7ff fd64 	bl	8004d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052d0:	2300      	movs	r3, #0
 80052d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4805      	ldr	r0, [pc, #20]	; (80052f4 <MX_TIM2_Init+0x98>)
 80052de:	f005 ffd9 	bl	800b294 <HAL_TIMEx_MasterConfigSynchronization>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80052e8:	f7ff fd56 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80052ec:	bf00      	nop
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20000640 	.word	0x20000640

080052f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	; 0x38
 80052fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	609a      	str	r2, [r3, #8]
 800530a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800530c:	f107 031c 	add.w	r3, r7, #28
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005318:	463b      	mov	r3, r7
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	609a      	str	r2, [r3, #8]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	611a      	str	r2, [r3, #16]
 8005326:	615a      	str	r2, [r3, #20]
 8005328:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800532a:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <MX_TIM3_Init+0xe4>)
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <MX_TIM3_Init+0xe8>)
 800532e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 8005330:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <MX_TIM3_Init+0xe4>)
 8005332:	22f9      	movs	r2, #249	; 0xf9
 8005334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005336:	4b29      	ldr	r3, [pc, #164]	; (80053dc <MX_TIM3_Init+0xe4>)
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800533c:	4b27      	ldr	r3, [pc, #156]	; (80053dc <MX_TIM3_Init+0xe4>)
 800533e:	2263      	movs	r2, #99	; 0x63
 8005340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005342:	4b26      	ldr	r3, [pc, #152]	; (80053dc <MX_TIM3_Init+0xe4>)
 8005344:	2200      	movs	r2, #0
 8005346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005348:	4b24      	ldr	r3, [pc, #144]	; (80053dc <MX_TIM3_Init+0xe4>)
 800534a:	2200      	movs	r2, #0
 800534c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800534e:	4823      	ldr	r0, [pc, #140]	; (80053dc <MX_TIM3_Init+0xe4>)
 8005350:	f004 fe0e 	bl	8009f70 <HAL_TIM_Base_Init>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800535a:	f7ff fd1d 	bl	8004d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800535e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005368:	4619      	mov	r1, r3
 800536a:	481c      	ldr	r0, [pc, #112]	; (80053dc <MX_TIM3_Init+0xe4>)
 800536c:	f005 fadc 	bl	800a928 <HAL_TIM_ConfigClockSource>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005376:	f7ff fd0f 	bl	8004d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800537a:	4818      	ldr	r0, [pc, #96]	; (80053dc <MX_TIM3_Init+0xe4>)
 800537c:	f004 fec8 	bl	800a110 <HAL_TIM_PWM_Init>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005386:	f7ff fd07 	bl	8004d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005392:	f107 031c 	add.w	r3, r7, #28
 8005396:	4619      	mov	r1, r3
 8005398:	4810      	ldr	r0, [pc, #64]	; (80053dc <MX_TIM3_Init+0xe4>)
 800539a:	f005 ff7b 	bl	800b294 <HAL_TIMEx_MasterConfigSynchronization>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80053a4:	f7ff fcf8 	bl	8004d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053a8:	2360      	movs	r3, #96	; 0x60
 80053aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 80053ac:	2363      	movs	r3, #99	; 0x63
 80053ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053b8:	463b      	mov	r3, r7
 80053ba:	2200      	movs	r2, #0
 80053bc:	4619      	mov	r1, r3
 80053be:	4807      	ldr	r0, [pc, #28]	; (80053dc <MX_TIM3_Init+0xe4>)
 80053c0:	f005 f9a2 	bl	800a708 <HAL_TIM_PWM_ConfigChannel>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80053ca:	f7ff fce5 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80053ce:	4803      	ldr	r0, [pc, #12]	; (80053dc <MX_TIM3_Init+0xe4>)
 80053d0:	f000 f8e8 	bl	80055a4 <HAL_TIM_MspPostInit>

}
 80053d4:	bf00      	nop
 80053d6:	3738      	adds	r7, #56	; 0x38
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200005a8 	.word	0x200005a8
 80053e0:	40000400 	.word	0x40000400

080053e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	609a      	str	r2, [r3, #8]
 80053f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053f8:	f107 031c 	add.w	r3, r7, #28
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005404:	463b      	mov	r3, r7
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	60da      	str	r2, [r3, #12]
 8005410:	611a      	str	r2, [r3, #16]
 8005412:	615a      	str	r2, [r3, #20]
 8005414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005416:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <MX_TIM4_Init+0xe8>)
 8005418:	4a2d      	ldr	r2, [pc, #180]	; (80054d0 <MX_TIM4_Init+0xec>)
 800541a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250-1;
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <MX_TIM4_Init+0xe8>)
 800541e:	22f9      	movs	r2, #249	; 0xf9
 8005420:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <MX_TIM4_Init+0xe8>)
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8005428:	4b28      	ldr	r3, [pc, #160]	; (80054cc <MX_TIM4_Init+0xe8>)
 800542a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800542e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005430:	4b26      	ldr	r3, [pc, #152]	; (80054cc <MX_TIM4_Init+0xe8>)
 8005432:	2200      	movs	r2, #0
 8005434:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005436:	4b25      	ldr	r3, [pc, #148]	; (80054cc <MX_TIM4_Init+0xe8>)
 8005438:	2200      	movs	r2, #0
 800543a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800543c:	4823      	ldr	r0, [pc, #140]	; (80054cc <MX_TIM4_Init+0xe8>)
 800543e:	f004 fd97 	bl	8009f70 <HAL_TIM_Base_Init>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005448:	f7ff fca6 	bl	8004d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800544c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005456:	4619      	mov	r1, r3
 8005458:	481c      	ldr	r0, [pc, #112]	; (80054cc <MX_TIM4_Init+0xe8>)
 800545a:	f005 fa65 	bl	800a928 <HAL_TIM_ConfigClockSource>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005464:	f7ff fc98 	bl	8004d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005468:	4818      	ldr	r0, [pc, #96]	; (80054cc <MX_TIM4_Init+0xe8>)
 800546a:	f004 fe51 	bl	800a110 <HAL_TIM_PWM_Init>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005474:	f7ff fc90 	bl	8004d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005480:	f107 031c 	add.w	r3, r7, #28
 8005484:	4619      	mov	r1, r3
 8005486:	4811      	ldr	r0, [pc, #68]	; (80054cc <MX_TIM4_Init+0xe8>)
 8005488:	f005 ff04 	bl	800b294 <HAL_TIMEx_MasterConfigSynchronization>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005492:	f7ff fc81 	bl	8004d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005496:	2360      	movs	r3, #96	; 0x60
 8005498:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 800549a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800549e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054a8:	463b      	mov	r3, r7
 80054aa:	2200      	movs	r2, #0
 80054ac:	4619      	mov	r1, r3
 80054ae:	4807      	ldr	r0, [pc, #28]	; (80054cc <MX_TIM4_Init+0xe8>)
 80054b0:	f005 f92a 	bl	800a708 <HAL_TIM_PWM_ConfigChannel>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80054ba:	f7ff fc6d 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80054be:	4803      	ldr	r0, [pc, #12]	; (80054cc <MX_TIM4_Init+0xe8>)
 80054c0:	f000 f870 	bl	80055a4 <HAL_TIM_MspPostInit>

}
 80054c4:	bf00      	nop
 80054c6:	3738      	adds	r7, #56	; 0x38
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	2000055c 	.word	0x2000055c
 80054d0:	40000800 	.word	0x40000800

080054d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2c      	ldr	r2, [pc, #176]	; (8005594 <HAL_TIM_Base_MspInit+0xc0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d114      	bne.n	8005510 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054e6:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 80054e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ea:	4a2b      	ldr	r2, [pc, #172]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	6453      	str	r3, [r2, #68]	; 0x44
 80054f2:	4b29      	ldr	r3, [pc, #164]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80054fe:	2200      	movs	r2, #0
 8005500:	2101      	movs	r1, #1
 8005502:	2019      	movs	r0, #25
 8005504:	f001 fe63 	bl	80071ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005508:	2019      	movs	r0, #25
 800550a:	f001 fe7c 	bl	8007206 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800550e:	e03c      	b.n	800558a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d114      	bne.n	8005544 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800551a:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	6413      	str	r3, [r2, #64]	; 0x40
 8005526:	4b1c      	ldr	r3, [pc, #112]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8005532:	2200      	movs	r2, #0
 8005534:	2102      	movs	r1, #2
 8005536:	201c      	movs	r0, #28
 8005538:	f001 fe49 	bl	80071ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800553c:	201c      	movs	r0, #28
 800553e:	f001 fe62 	bl	8007206 <HAL_NVIC_EnableIRQ>
}
 8005542:	e022      	b.n	800558a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a14      	ldr	r2, [pc, #80]	; (800559c <HAL_TIM_Base_MspInit+0xc8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10c      	bne.n	8005568 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	4a11      	ldr	r2, [pc, #68]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 8005554:	f043 0302 	orr.w	r3, r3, #2
 8005558:	6413      	str	r3, [r2, #64]	; 0x40
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
}
 8005566:	e010      	b.n	800558a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <HAL_TIM_Base_MspInit+0xcc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10b      	bne.n	800558a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 8005578:	f043 0304 	orr.w	r3, r3, #4
 800557c:	6413      	str	r3, [r2, #64]	; 0x40
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_TIM_Base_MspInit+0xc4>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
}
 800558a:	bf00      	nop
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000
 8005598:	40023800 	.word	0x40023800
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800

080055a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_TIM_MspPostInit+0xa8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d11c      	bne.n	8005600 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c6:	4b22      	ldr	r3, [pc, #136]	; (8005650 <HAL_TIM_MspPostInit+0xac>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	4a21      	ldr	r2, [pc, #132]	; (8005650 <HAL_TIM_MspPostInit+0xac>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6313      	str	r3, [r2, #48]	; 0x30
 80055d2:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <HAL_TIM_MspPostInit+0xac>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80055de:	2340      	movs	r3, #64	; 0x40
 80055e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ea:	2300      	movs	r3, #0
 80055ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055ee:	2302      	movs	r3, #2
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f2:	f107 0314 	add.w	r3, r7, #20
 80055f6:	4619      	mov	r1, r3
 80055f8:	4816      	ldr	r0, [pc, #88]	; (8005654 <HAL_TIM_MspPostInit+0xb0>)
 80055fa:	f001 fe1f 	bl	800723c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80055fe:	e021      	b.n	8005644 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <HAL_TIM_MspPostInit+0xb4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d11c      	bne.n	8005644 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_TIM_MspPostInit+0xac>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_TIM_MspPostInit+0xac>)
 8005610:	f043 0308 	orr.w	r3, r3, #8
 8005614:	6313      	str	r3, [r2, #48]	; 0x30
 8005616:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <HAL_TIM_MspPostInit+0xac>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005628:	2302      	movs	r3, #2
 800562a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005630:	2300      	movs	r3, #0
 8005632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005634:	2302      	movs	r3, #2
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	4619      	mov	r1, r3
 800563e:	4807      	ldr	r0, [pc, #28]	; (800565c <HAL_TIM_MspPostInit+0xb8>)
 8005640:	f001 fdfc 	bl	800723c <HAL_GPIO_Init>
}
 8005644:	bf00      	nop
 8005646:	3728      	adds	r7, #40	; 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40000400 	.word	0x40000400
 8005650:	40023800 	.word	0x40023800
 8005654:	40020000 	.word	0x40020000
 8005658:	40000800 	.word	0x40000800
 800565c:	40020c00 	.word	0x40020c00

08005660 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <MX_UART4_Init+0x58>)
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <MX_UART4_Init+0x5c>)
 8005668:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800566a:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <MX_UART4_Init+0x58>)
 800566c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005670:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005672:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <MX_UART4_Init+0x58>)
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <MX_UART4_Init+0x58>)
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800567e:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <MX_UART4_Init+0x58>)
 8005680:	2200      	movs	r2, #0
 8005682:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <MX_UART4_Init+0x58>)
 8005686:	220c      	movs	r2, #12
 8005688:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <MX_UART4_Init+0x58>)
 800568c:	2200      	movs	r2, #0
 800568e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005690:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <MX_UART4_Init+0x58>)
 8005692:	2200      	movs	r2, #0
 8005694:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <MX_UART4_Init+0x58>)
 8005698:	2200      	movs	r2, #0
 800569a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <MX_UART4_Init+0x58>)
 800569e:	2200      	movs	r2, #0
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80056a2:	4805      	ldr	r0, [pc, #20]	; (80056b8 <MX_UART4_Init+0x58>)
 80056a4:	f005 fea2 	bl	800b3ec <HAL_UART_Init>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80056ae:	f7ff fb73 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000794 	.word	0x20000794
 80056bc:	40004c00 	.word	0x40004c00

080056c0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <MX_USART1_UART_Init+0x5c>)
 80056c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056d2:	4b11      	ldr	r3, [pc, #68]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056de:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056e6:	220c      	movs	r2, #12
 80056e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <MX_USART1_UART_Init+0x58>)
 80056fe:	2200      	movs	r2, #0
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005702:	4805      	ldr	r0, [pc, #20]	; (8005718 <MX_USART1_UART_Init+0x58>)
 8005704:	f005 fe72 	bl	800b3ec <HAL_UART_Init>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800570e:	f7ff fb43 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000710 	.word	0x20000710
 800571c:	40011000 	.word	0x40011000

08005720 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005724:	4b14      	ldr	r3, [pc, #80]	; (8005778 <MX_USART3_UART_Init+0x58>)
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <MX_USART3_UART_Init+0x5c>)
 8005728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <MX_USART3_UART_Init+0x58>)
 800572c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <MX_USART3_UART_Init+0x58>)
 8005734:	2200      	movs	r2, #0
 8005736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <MX_USART3_UART_Init+0x58>)
 800573a:	2200      	movs	r2, #0
 800573c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <MX_USART3_UART_Init+0x58>)
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <MX_USART3_UART_Init+0x58>)
 8005746:	220c      	movs	r2, #12
 8005748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800574a:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <MX_USART3_UART_Init+0x58>)
 800574c:	2200      	movs	r2, #0
 800574e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005750:	4b09      	ldr	r3, [pc, #36]	; (8005778 <MX_USART3_UART_Init+0x58>)
 8005752:	2200      	movs	r2, #0
 8005754:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <MX_USART3_UART_Init+0x58>)
 8005758:	2200      	movs	r2, #0
 800575a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <MX_USART3_UART_Init+0x58>)
 800575e:	2200      	movs	r2, #0
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005762:	4805      	ldr	r0, [pc, #20]	; (8005778 <MX_USART3_UART_Init+0x58>)
 8005764:	f005 fe42 	bl	800b3ec <HAL_UART_Init>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800576e:	f7ff fb13 	bl	8004d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005772:	bf00      	nop
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	2000068c 	.word	0x2000068c
 800577c:	40004800 	.word	0x40004800

08005780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a4e      	ldr	r2, [pc, #312]	; (80058d8 <HAL_UART_MspInit+0x158>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d128      	bne.n	80057f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80057a2:	4b4e      	ldr	r3, [pc, #312]	; (80058dc <HAL_UART_MspInit+0x15c>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	4a4d      	ldr	r2, [pc, #308]	; (80058dc <HAL_UART_MspInit+0x15c>)
 80057a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ac:	6413      	str	r3, [r2, #64]	; 0x40
 80057ae:	4b4b      	ldr	r3, [pc, #300]	; (80058dc <HAL_UART_MspInit+0x15c>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057ba:	4b48      	ldr	r3, [pc, #288]	; (80058dc <HAL_UART_MspInit+0x15c>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	4a47      	ldr	r2, [pc, #284]	; (80058dc <HAL_UART_MspInit+0x15c>)
 80057c0:	f043 0308 	orr.w	r3, r3, #8
 80057c4:	6313      	str	r3, [r2, #48]	; 0x30
 80057c6:	4b45      	ldr	r3, [pc, #276]	; (80058dc <HAL_UART_MspInit+0x15c>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	61fb      	str	r3, [r7, #28]
 80057d0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057d2:	2303      	movs	r3, #3
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d6:	2302      	movs	r3, #2
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057de:	2303      	movs	r3, #3
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80057e2:	2308      	movs	r3, #8
 80057e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ea:	4619      	mov	r1, r3
 80057ec:	483c      	ldr	r0, [pc, #240]	; (80058e0 <HAL_UART_MspInit+0x160>)
 80057ee:	f001 fd25 	bl	800723c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80057f2:	e06c      	b.n	80058ce <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <HAL_UART_MspInit+0x164>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d139      	bne.n	8005872 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	4a36      	ldr	r2, [pc, #216]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005804:	f043 0310 	orr.w	r3, r3, #16
 8005808:	6453      	str	r3, [r2, #68]	; 0x44
 800580a:	4b34      	ldr	r3, [pc, #208]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005816:	4b31      	ldr	r3, [pc, #196]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	4a30      	ldr	r2, [pc, #192]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	6313      	str	r3, [r2, #48]	; 0x30
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800582e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005834:	2302      	movs	r3, #2
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005838:	2300      	movs	r3, #0
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800583c:	2303      	movs	r3, #3
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005840:	2304      	movs	r3, #4
 8005842:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005848:	4619      	mov	r1, r3
 800584a:	4827      	ldr	r0, [pc, #156]	; (80058e8 <HAL_UART_MspInit+0x168>)
 800584c:	f001 fcf6 	bl	800723c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005850:	2340      	movs	r3, #64	; 0x40
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005854:	2302      	movs	r3, #2
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005858:	2300      	movs	r3, #0
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800585c:	2303      	movs	r3, #3
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005860:	2307      	movs	r3, #7
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005868:	4619      	mov	r1, r3
 800586a:	481f      	ldr	r0, [pc, #124]	; (80058e8 <HAL_UART_MspInit+0x168>)
 800586c:	f001 fce6 	bl	800723c <HAL_GPIO_Init>
}
 8005870:	e02d      	b.n	80058ce <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART3)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <HAL_UART_MspInit+0x16c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d128      	bne.n	80058ce <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	4a16      	ldr	r2, [pc, #88]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005886:	6413      	str	r3, [r2, #64]	; 0x40
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005894:	4b11      	ldr	r3, [pc, #68]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	4a10      	ldr	r2, [pc, #64]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800589a:	f043 0308 	orr.w	r3, r3, #8
 800589e:	6313      	str	r3, [r2, #48]	; 0x30
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <HAL_UART_MspInit+0x15c>)
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80058ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b2:	2302      	movs	r3, #2
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ba:	2303      	movs	r3, #3
 80058bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058be:	2307      	movs	r3, #7
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c6:	4619      	mov	r1, r3
 80058c8:	4805      	ldr	r0, [pc, #20]	; (80058e0 <HAL_UART_MspInit+0x160>)
 80058ca:	f001 fcb7 	bl	800723c <HAL_GPIO_Init>
}
 80058ce:	bf00      	nop
 80058d0:	3738      	adds	r7, #56	; 0x38
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40004c00 	.word	0x40004c00
 80058dc:	40023800 	.word	0x40023800
 80058e0:	40020c00 	.word	0x40020c00
 80058e4:	40011000 	.word	0x40011000
 80058e8:	40020400 	.word	0x40020400
 80058ec:	40004800 	.word	0x40004800

080058f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80058f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005928 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80058f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80058f6:	e003      	b.n	8005900 <LoopCopyDataInit>

080058f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80058fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80058fe:	3104      	adds	r1, #4

08005900 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005900:	480b      	ldr	r0, [pc, #44]	; (8005930 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005904:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005906:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005908:	d3f6      	bcc.n	80058f8 <CopyDataInit>
  ldr  r2, =_sbss
 800590a:	4a0b      	ldr	r2, [pc, #44]	; (8005938 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800590c:	e002      	b.n	8005914 <LoopFillZerobss>

0800590e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800590e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005910:	f842 3b04 	str.w	r3, [r2], #4

08005914 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005916:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005918:	d3f9      	bcc.n	800590e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800591a:	f7ff fc15 	bl	8005148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800591e:	f006 fae7 	bl	800bef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005922:	f7fe fb71 	bl	8004008 <main>
  bx  lr    
 8005926:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005928:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800592c:	0800f324 	.word	0x0800f324
  ldr  r0, =_sdata
 8005930:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005934:	200002ac 	.word	0x200002ac
  ldr  r2, =_sbss
 8005938:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 800593c:	2000082c 	.word	0x2000082c

08005940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005940:	e7fe      	b.n	8005940 <ADC_IRQHandler>

08005942 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8005942:	b590      	push	{r4, r7, lr}
 8005944:	b08b      	sub	sp, #44	; 0x2c
 8005946:	af00      	add	r7, sp, #0
 8005948:	4604      	mov	r4, r0
 800594a:	4608      	mov	r0, r1
 800594c:	4611      	mov	r1, r2
 800594e:	461a      	mov	r2, r3
 8005950:	4623      	mov	r3, r4
 8005952:	80fb      	strh	r3, [r7, #6]
 8005954:	4603      	mov	r3, r0
 8005956:	80bb      	strh	r3, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
 800595c:	4613      	mov	r3, r2
 800595e:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	f1c3 0301 	rsb	r3, r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800597a:	e061      	b.n	8005a40 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	e018      	b.n	80059b8 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	b298      	uxth	r0, r3
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	b29a      	uxth	r2, r3
 800598e:	88bb      	ldrh	r3, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	b29b      	uxth	r3, r3
 8005994:	883a      	ldrh	r2, [r7, #0]
 8005996:	4619      	mov	r1, r3
 8005998:	f000 fd02 	bl	80063a0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	b298      	uxth	r0, r3
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	88ba      	ldrh	r2, [r7, #4]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	883a      	ldrh	r2, [r7, #0]
 80059ac:	4619      	mov	r1, r3
 80059ae:	f000 fcf7 	bl	80063a0 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3301      	adds	r3, #1
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	4413      	add	r3, r2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	dde0      	ble.n	8005986 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e018      	b.n	8005a00 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	b298      	uxth	r0, r3
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	88bb      	ldrh	r3, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	b29b      	uxth	r3, r3
 80059dc:	883a      	ldrh	r2, [r7, #0]
 80059de:	4619      	mov	r1, r3
 80059e0:	f000 fcde 	bl	80063a0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	b298      	uxth	r0, r3
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	88ba      	ldrh	r2, [r7, #4]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	883a      	ldrh	r2, [r7, #0]
 80059f4:	4619      	mov	r1, r3
 80059f6:	f000 fcd3 	bl	80063a0 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	88fa      	ldrh	r2, [r7, #6]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	4413      	add	r3, r2
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	dde0      	ble.n	80059ce <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	4413      	add	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	005a      	lsls	r2, r3, #1
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dd09      	ble.n	8005a40 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	da99      	bge.n	800597c <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	372c      	adds	r7, #44	; 0x2c
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}

08005a52 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8005a52:	b590      	push	{r4, r7, lr}
 8005a54:	b087      	sub	sp, #28
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	4604      	mov	r4, r0
 8005a5a:	4608      	mov	r0, r1
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4623      	mov	r3, r4
 8005a62:	80fb      	strh	r3, [r7, #6]
 8005a64:	4603      	mov	r3, r0
 8005a66:	80bb      	strh	r3, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	807b      	strh	r3, [r7, #2]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a94:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8005a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	d501      	bpl.n	8005aaa <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8005ab0:	883a      	ldrh	r2, [r7, #0]
 8005ab2:	88bb      	ldrh	r3, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005abe:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8005ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ace:	d501      	bpl.n	8005ad4 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	82fb      	strh	r3, [r7, #22]
 8005ae2:	e003      	b.n	8005aec <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8005ae4:	88fa      	ldrh	r2, [r7, #6]
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8005aec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005aee:	8afa      	ldrh	r2, [r7, #22]
 8005af0:	88b9      	ldrh	r1, [r7, #4]
 8005af2:	88f8      	ldrh	r0, [r7, #6]
 8005af4:	f000 fd8a 	bl	800660c <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8005af8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005afa:	8afa      	ldrh	r2, [r7, #22]
 8005afc:	8839      	ldrh	r1, [r7, #0]
 8005afe:	88f8      	ldrh	r0, [r7, #6]
 8005b00:	f000 fd84 	bl	800660c <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005b04:	7cbb      	ldrb	r3, [r7, #18]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8005b0a:	883a      	ldrh	r2, [r7, #0]
 8005b0c:	88bb      	ldrh	r3, [r7, #4]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	82bb      	strh	r3, [r7, #20]
 8005b12:	e003      	b.n	8005b1c <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8005b14:	88ba      	ldrh	r2, [r7, #4]
 8005b16:	883b      	ldrh	r3, [r7, #0]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8005b1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b1e:	8aba      	ldrh	r2, [r7, #20]
 8005b20:	88b9      	ldrh	r1, [r7, #4]
 8005b22:	88f8      	ldrh	r0, [r7, #6]
 8005b24:	f000 fdb6 	bl	8006694 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8005b28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b2a:	8aba      	ldrh	r2, [r7, #20]
 8005b2c:	88b9      	ldrh	r1, [r7, #4]
 8005b2e:	8878      	ldrh	r0, [r7, #2]
 8005b30:	f000 fdb0 	bl	8006694 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8005b34:	8afb      	ldrh	r3, [r7, #22]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8005b3a:	8abb      	ldrh	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8005b40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b42:	8839      	ldrh	r1, [r7, #0]
 8005b44:	887b      	ldrh	r3, [r7, #2]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fc2a 	bl	80063a0 <ILI9341_Draw_Pixel>
	}
	
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd90      	pop	{r4, r7, pc}

08005b54 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	80fb      	strh	r3, [r7, #6]
 8005b66:	4603      	mov	r3, r0
 8005b68:	80bb      	strh	r3, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	807b      	strh	r3, [r7, #2]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da01      	bge.n	8005ba0 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8005ba4:	883a      	ldrh	r2, [r7, #0]
 8005ba6:	88bb      	ldrh	r3, [r7, #4]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da01      	bge.n	8005bb6 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8005bb6:	7cfb      	ldrb	r3, [r7, #19]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8005bbc:	887a      	ldrh	r2, [r7, #2]
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	823b      	strh	r3, [r7, #16]
 8005bc8:	e005      	b.n	8005bd6 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	887b      	ldrh	r3, [r7, #2]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005bd6:	7cbb      	ldrb	r3, [r7, #18]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8005bdc:	883a      	ldrh	r2, [r7, #0]
 8005bde:	88bb      	ldrh	r3, [r7, #4]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8005be4:	88bb      	ldrh	r3, [r7, #4]
 8005be6:	81fb      	strh	r3, [r7, #14]
 8005be8:	e005      	b.n	8005bf6 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8005bea:	88ba      	ldrh	r2, [r7, #4]
 8005bec:	883b      	ldrh	r3, [r7, #0]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8005bf2:	883b      	ldrh	r3, [r7, #0]
 8005bf4:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8005bf6:	8abc      	ldrh	r4, [r7, #20]
 8005bf8:	8afa      	ldrh	r2, [r7, #22]
 8005bfa:	89f9      	ldrh	r1, [r7, #14]
 8005bfc:	8a38      	ldrh	r0, [r7, #16]
 8005bfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	4623      	mov	r3, r4
 8005c04:	f000 fca6 	bl	8006554 <ILI9341_Draw_Rectangle>
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}

08005c10 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	4603      	mov	r3, r0
 8005c24:	71bb      	strb	r3, [r7, #6]
 8005c26:	460b      	mov	r3, r1
 8005c28:	717b      	strb	r3, [r7, #5]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b1f      	cmp	r3, #31
 8005c36:	d802      	bhi.n	8005c3e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	71fb      	strb	r3, [r7, #7]
 8005c3c:	e002      	b.n	8005c44 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	3b20      	subs	r3, #32
 8005c42:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	753b      	strb	r3, [r7, #20]
 8005c48:	e012      	b.n	8005c70 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8005c4a:	7dfa      	ldrb	r2, [r7, #23]
 8005c4c:	7d38      	ldrb	r0, [r7, #20]
 8005c4e:	7d39      	ldrb	r1, [r7, #20]
 8005c50:	4c3c      	ldr	r4, [pc, #240]	; (8005d44 <ILI9341_Draw_Char+0x134>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	4413      	add	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4423      	add	r3, r4
 8005c5c:	4403      	add	r3, r0
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	f107 0318 	add.w	r3, r7, #24
 8005c64:	440b      	add	r3, r1
 8005c66:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005c6a:	7d3b      	ldrb	r3, [r7, #20]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	753b      	strb	r3, [r7, #20]
 8005c70:	7d3b      	ldrb	r3, [r7, #20]
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	d9e9      	bls.n	8005c4a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8005c76:	79bb      	ldrb	r3, [r7, #6]
 8005c78:	b298      	uxth	r0, r3
 8005c7a:	797b      	ldrb	r3, [r7, #5]
 8005c7c:	b299      	uxth	r1, r3
 8005c7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c80:	461a      	mov	r2, r3
 8005c82:	0052      	lsls	r2, r2, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	b29c      	uxth	r4, r3
 8005c90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	4623      	mov	r3, r4
 8005c96:	f000 fc5d 	bl	8006554 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	757b      	strb	r3, [r7, #21]
 8005c9e:	e048      	b.n	8005d32 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	75bb      	strb	r3, [r7, #22]
 8005ca4:	e03f      	b.n	8005d26 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8005ca6:	7d7b      	ldrb	r3, [r7, #21]
 8005ca8:	f107 0218 	add.w	r2, r7, #24
 8005cac:	4413      	add	r3, r2
 8005cae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	7dbb      	ldrb	r3, [r7, #22]
 8005cb6:	fa42 f303 	asr.w	r3, r2, r3
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02e      	beq.n	8005d20 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8005cc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d110      	bne.n	8005cea <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8005cc8:	79bb      	ldrb	r3, [r7, #6]
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	7d7b      	ldrb	r3, [r7, #21]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	b298      	uxth	r0, r3
 8005cd4:	797b      	ldrb	r3, [r7, #5]
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	7dbb      	ldrb	r3, [r7, #22]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f000 fb5c 	bl	80063a0 <ILI9341_Draw_Pixel>
 8005ce8:	e01a      	b.n	8005d20 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8005cea:	79bb      	ldrb	r3, [r7, #6]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	7d7b      	ldrb	r3, [r7, #21]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005cf4:	fb11 f303 	smulbb	r3, r1, r3
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	b298      	uxth	r0, r3
 8005cfe:	797b      	ldrb	r3, [r7, #5]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	7dbb      	ldrb	r3, [r7, #22]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005d08:	fb11 f303 	smulbb	r3, r1, r3
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	4413      	add	r3, r2
 8005d10:	b299      	uxth	r1, r3
 8005d12:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8005d14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d16:	887b      	ldrh	r3, [r7, #2]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	f000 fc1a 	bl	8006554 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005d20:	7dbb      	ldrb	r3, [r7, #22]
 8005d22:	3301      	adds	r3, #1
 8005d24:	75bb      	strb	r3, [r7, #22]
 8005d26:	7dbb      	ldrb	r3, [r7, #22]
 8005d28:	2b07      	cmp	r3, #7
 8005d2a:	d9bc      	bls.n	8005ca6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005d2c:	7d7b      	ldrb	r3, [r7, #21]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	757b      	strb	r3, [r7, #21]
 8005d32:	7d7b      	ldrb	r3, [r7, #21]
 8005d34:	2b05      	cmp	r3, #5
 8005d36:	d9b3      	bls.n	8005ca0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}
 8005d42:	bf00      	nop
 8005d44:	0800ecf4 	.word	0x0800ecf4

08005d48 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	70fb      	strb	r3, [r7, #3]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70bb      	strb	r3, [r7, #2]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8005d62:	e017      	b.n	8005d94 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	7818      	ldrb	r0, [r3, #0]
 8005d6c:	883c      	ldrh	r4, [r7, #0]
 8005d6e:	78ba      	ldrb	r2, [r7, #2]
 8005d70:	78f9      	ldrb	r1, [r7, #3]
 8005d72:	8bbb      	ldrh	r3, [r7, #28]
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	8b3b      	ldrh	r3, [r7, #24]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	4623      	mov	r3, r4
 8005d7c:	f7ff ff48 	bl	8005c10 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8005d80:	8b3b      	ldrh	r3, [r7, #24]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	0052      	lsls	r2, r2, #1
 8005d88:	4413      	add	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	4413      	add	r3, r2
 8005d92:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e3      	bne.n	8005d64 <ILI9341_Draw_Text+0x1c>
    }
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}
	...

08005da8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8005dac:	f7ff f82c 	bl	8004e08 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8005db0:	f7fa fe38 	bl	8000a24 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8005db4:	2200      	movs	r2, #0
 8005db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dba:	4802      	ldr	r0, [pc, #8]	; (8005dc4 <ILI9341_SPI_Init+0x1c>)
 8005dbc:	f001 fc02 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8005dc0:	bf00      	nop
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40020800 	.word	0x40020800

08005dc8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005dd2:	1df9      	adds	r1, r7, #7
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4803      	ldr	r0, [pc, #12]	; (8005de8 <ILI9341_SPI_Send+0x20>)
 8005dda:	f003 fdfa 	bl	80099d2 <HAL_SPI_Transmit>
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200004f8 	.word	0x200004f8

08005dec <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005df6:	2200      	movs	r2, #0
 8005df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dfc:	480b      	ldr	r0, [pc, #44]	; (8005e2c <ILI9341_Write_Command+0x40>)
 8005dfe:	f001 fbe1 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005e02:	2200      	movs	r2, #0
 8005e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e08:	4808      	ldr	r0, [pc, #32]	; (8005e2c <ILI9341_Write_Command+0x40>)
 8005e0a:	f001 fbdb 	bl	80075c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff ffd9 	bl	8005dc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005e16:	2201      	movs	r2, #1
 8005e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e1c:	4803      	ldr	r0, [pc, #12]	; (8005e2c <ILI9341_Write_Command+0x40>)
 8005e1e:	f001 fbd1 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40020800 	.word	0x40020800

08005e30 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e40:	480b      	ldr	r0, [pc, #44]	; (8005e70 <ILI9341_Write_Data+0x40>)
 8005e42:	f001 fbbf 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005e46:	2200      	movs	r2, #0
 8005e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e4c:	4808      	ldr	r0, [pc, #32]	; (8005e70 <ILI9341_Write_Data+0x40>)
 8005e4e:	f001 fbb9 	bl	80075c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff ffb7 	bl	8005dc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e60:	4803      	ldr	r0, [pc, #12]	; (8005e70 <ILI9341_Write_Data+0x40>)
 8005e62:	f001 fbaf 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40020800 	.word	0x40020800

08005e74 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	4623      	mov	r3, r4
 8005e84:	80fb      	strh	r3, [r7, #6]
 8005e86:	4603      	mov	r3, r0
 8005e88:	80bb      	strh	r3, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	807b      	strh	r3, [r7, #2]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8005e92:	202a      	movs	r0, #42	; 0x2a
 8005e94:	f7ff ffaa 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ffc5 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ffc0 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff ffb9 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8005ebe:	887b      	ldrh	r3, [r7, #2]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ffb4 	bl	8005e30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8005ec8:	202b      	movs	r0, #43	; 0x2b
 8005eca:	f7ff ff8f 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8005ece:	88bb      	ldrh	r3, [r7, #4]
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ffaa 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8005edc:	88bb      	ldrh	r3, [r7, #4]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff ffa5 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8005ee6:	883b      	ldrh	r3, [r7, #0]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff ff9e 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8005ef4:	883b      	ldrh	r3, [r7, #0]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff ff99 	bl	8005e30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8005efe:	202c      	movs	r0, #44	; 0x2c
 8005f00:	f7ff ff74 	bl	8005dec <ILI9341_Write_Command>
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd90      	pop	{r4, r7, pc}

08005f0c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005f10:	2201      	movs	r2, #1
 8005f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f16:	480b      	ldr	r0, [pc, #44]	; (8005f44 <ILI9341_Reset+0x38>)
 8005f18:	f001 fb54 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005f1c:	20c8      	movs	r0, #200	; 0xc8
 8005f1e:	f000 fc69 	bl	80067f4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005f22:	2200      	movs	r2, #0
 8005f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f28:	4806      	ldr	r0, [pc, #24]	; (8005f44 <ILI9341_Reset+0x38>)
 8005f2a:	f001 fb4b 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005f2e:	20c8      	movs	r0, #200	; 0xc8
 8005f30:	f000 fc60 	bl	80067f4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8005f34:	2201      	movs	r2, #1
 8005f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f3a:	4802      	ldr	r0, [pc, #8]	; (8005f44 <ILI9341_Reset+0x38>)
 8005f3c:	f001 fb42 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40020800 	.word	0x40020800

08005f48 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8005f56:	2036      	movs	r0, #54	; 0x36
 8005f58:	f7ff ff48 	bl	8005dec <ILI9341_Write_Command>
HAL_Delay(1);
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	f000 fc49 	bl	80067f4 <HAL_Delay>
	
switch(screen_rotation) 
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d837      	bhi.n	8005fd8 <ILI9341_Set_Rotation+0x90>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <ILI9341_Set_Rotation+0x28>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f97 	.word	0x08005f97
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	08005fc3 	.word	0x08005fc3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8005f80:	2048      	movs	r0, #72	; 0x48
 8005f82:	f7ff ff55 	bl	8005e30 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8005f86:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <ILI9341_Set_Rotation+0x9c>)
 8005f88:	22f0      	movs	r2, #240	; 0xf0
 8005f8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <ILI9341_Set_Rotation+0xa0>)
 8005f8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f92:	801a      	strh	r2, [r3, #0]
			break;
 8005f94:	e021      	b.n	8005fda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8005f96:	2028      	movs	r0, #40	; 0x28
 8005f98:	f7ff ff4a 	bl	8005e30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <ILI9341_Set_Rotation+0x9c>)
 8005f9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005fa2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005fa4:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <ILI9341_Set_Rotation+0xa0>)
 8005fa6:	22f0      	movs	r2, #240	; 0xf0
 8005fa8:	801a      	strh	r2, [r3, #0]
			break;
 8005faa:	e016      	b.n	8005fda <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8005fac:	2088      	movs	r0, #136	; 0x88
 8005fae:	f7ff ff3f 	bl	8005e30 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <ILI9341_Set_Rotation+0x9c>)
 8005fb4:	22f0      	movs	r2, #240	; 0xf0
 8005fb6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <ILI9341_Set_Rotation+0xa0>)
 8005fba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005fbe:	801a      	strh	r2, [r3, #0]
			break;
 8005fc0:	e00b      	b.n	8005fda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8005fc2:	20e8      	movs	r0, #232	; 0xe8
 8005fc4:	f7ff ff34 	bl	8005e30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <ILI9341_Set_Rotation+0x9c>)
 8005fca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005fce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005fd0:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <ILI9341_Set_Rotation+0xa0>)
 8005fd2:	22f0      	movs	r2, #240	; 0xf0
 8005fd4:	801a      	strh	r2, [r3, #0]
			break;
 8005fd6:	e000      	b.n	8005fda <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8005fd8:	bf00      	nop
	}
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200000d2 	.word	0x200000d2
 8005fe8:	200000d0 	.word	0x200000d0

08005fec <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ff6:	4802      	ldr	r0, [pc, #8]	; (8006000 <ILI9341_Enable+0x14>)
 8005ff8:	f001 fae4 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8005ffc:	bf00      	nop
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40020800 	.word	0x40020800

08006004 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8006008:	f7ff fff0 	bl	8005fec <ILI9341_Enable>
ILI9341_SPI_Init();
 800600c:	f7ff fecc 	bl	8005da8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8006010:	f7ff ff7c 	bl	8005f0c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8006014:	2001      	movs	r0, #1
 8006016:	f7ff fee9 	bl	8005dec <ILI9341_Write_Command>
HAL_Delay(1000);
 800601a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800601e:	f000 fbe9 	bl	80067f4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8006022:	20cb      	movs	r0, #203	; 0xcb
 8006024:	f7ff fee2 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8006028:	2039      	movs	r0, #57	; 0x39
 800602a:	f7ff ff01 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800602e:	202c      	movs	r0, #44	; 0x2c
 8006030:	f7ff fefe 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006034:	2000      	movs	r0, #0
 8006036:	f7ff fefb 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800603a:	2034      	movs	r0, #52	; 0x34
 800603c:	f7ff fef8 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8006040:	2002      	movs	r0, #2
 8006042:	f7ff fef5 	bl	8005e30 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8006046:	20cf      	movs	r0, #207	; 0xcf
 8006048:	f7ff fed0 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800604c:	2000      	movs	r0, #0
 800604e:	f7ff feef 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8006052:	20c1      	movs	r0, #193	; 0xc1
 8006054:	f7ff feec 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8006058:	2030      	movs	r0, #48	; 0x30
 800605a:	f7ff fee9 	bl	8005e30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800605e:	20e8      	movs	r0, #232	; 0xe8
 8006060:	f7ff fec4 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8006064:	2085      	movs	r0, #133	; 0x85
 8006066:	f7ff fee3 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800606a:	2000      	movs	r0, #0
 800606c:	f7ff fee0 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8006070:	2078      	movs	r0, #120	; 0x78
 8006072:	f7ff fedd 	bl	8005e30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8006076:	20ea      	movs	r0, #234	; 0xea
 8006078:	f7ff feb8 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800607c:	2000      	movs	r0, #0
 800607e:	f7ff fed7 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006082:	2000      	movs	r0, #0
 8006084:	f7ff fed4 	bl	8005e30 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8006088:	20ed      	movs	r0, #237	; 0xed
 800608a:	f7ff feaf 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800608e:	2064      	movs	r0, #100	; 0x64
 8006090:	f7ff fece 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006094:	2003      	movs	r0, #3
 8006096:	f7ff fecb 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800609a:	2012      	movs	r0, #18
 800609c:	f7ff fec8 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80060a0:	2081      	movs	r0, #129	; 0x81
 80060a2:	f7ff fec5 	bl	8005e30 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80060a6:	20f7      	movs	r0, #247	; 0xf7
 80060a8:	f7ff fea0 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80060ac:	2020      	movs	r0, #32
 80060ae:	f7ff febf 	bl	8005e30 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80060b2:	20c0      	movs	r0, #192	; 0xc0
 80060b4:	f7ff fe9a 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80060b8:	2023      	movs	r0, #35	; 0x23
 80060ba:	f7ff feb9 	bl	8005e30 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80060be:	20c1      	movs	r0, #193	; 0xc1
 80060c0:	f7ff fe94 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80060c4:	2010      	movs	r0, #16
 80060c6:	f7ff feb3 	bl	8005e30 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80060ca:	20c5      	movs	r0, #197	; 0xc5
 80060cc:	f7ff fe8e 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80060d0:	203e      	movs	r0, #62	; 0x3e
 80060d2:	f7ff fead 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80060d6:	2028      	movs	r0, #40	; 0x28
 80060d8:	f7ff feaa 	bl	8005e30 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80060dc:	20c7      	movs	r0, #199	; 0xc7
 80060de:	f7ff fe85 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80060e2:	2086      	movs	r0, #134	; 0x86
 80060e4:	f7ff fea4 	bl	8005e30 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80060e8:	2036      	movs	r0, #54	; 0x36
 80060ea:	f7ff fe7f 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80060ee:	2048      	movs	r0, #72	; 0x48
 80060f0:	f7ff fe9e 	bl	8005e30 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80060f4:	203a      	movs	r0, #58	; 0x3a
 80060f6:	f7ff fe79 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80060fa:	2055      	movs	r0, #85	; 0x55
 80060fc:	f7ff fe98 	bl	8005e30 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8006100:	20b1      	movs	r0, #177	; 0xb1
 8006102:	f7ff fe73 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006106:	2000      	movs	r0, #0
 8006108:	f7ff fe92 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800610c:	2018      	movs	r0, #24
 800610e:	f7ff fe8f 	bl	8005e30 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8006112:	20b6      	movs	r0, #182	; 0xb6
 8006114:	f7ff fe6a 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8006118:	2008      	movs	r0, #8
 800611a:	f7ff fe89 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800611e:	2082      	movs	r0, #130	; 0x82
 8006120:	f7ff fe86 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8006124:	2027      	movs	r0, #39	; 0x27
 8006126:	f7ff fe83 	bl	8005e30 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800612a:	20f2      	movs	r0, #242	; 0xf2
 800612c:	f7ff fe5e 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006130:	2000      	movs	r0, #0
 8006132:	f7ff fe7d 	bl	8005e30 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8006136:	2026      	movs	r0, #38	; 0x26
 8006138:	f7ff fe58 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800613c:	2001      	movs	r0, #1
 800613e:	f7ff fe77 	bl	8005e30 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8006142:	20e0      	movs	r0, #224	; 0xe0
 8006144:	f7ff fe52 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8006148:	200f      	movs	r0, #15
 800614a:	f7ff fe71 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800614e:	2031      	movs	r0, #49	; 0x31
 8006150:	f7ff fe6e 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8006154:	202b      	movs	r0, #43	; 0x2b
 8006156:	f7ff fe6b 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800615a:	200c      	movs	r0, #12
 800615c:	f7ff fe68 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006160:	200e      	movs	r0, #14
 8006162:	f7ff fe65 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8006166:	2008      	movs	r0, #8
 8006168:	f7ff fe62 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800616c:	204e      	movs	r0, #78	; 0x4e
 800616e:	f7ff fe5f 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8006172:	20f1      	movs	r0, #241	; 0xf1
 8006174:	f7ff fe5c 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8006178:	2037      	movs	r0, #55	; 0x37
 800617a:	f7ff fe59 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800617e:	2007      	movs	r0, #7
 8006180:	f7ff fe56 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8006184:	2010      	movs	r0, #16
 8006186:	f7ff fe53 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800618a:	2003      	movs	r0, #3
 800618c:	f7ff fe50 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006190:	200e      	movs	r0, #14
 8006192:	f7ff fe4d 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8006196:	2009      	movs	r0, #9
 8006198:	f7ff fe4a 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800619c:	2000      	movs	r0, #0
 800619e:	f7ff fe47 	bl	8005e30 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80061a2:	20e1      	movs	r0, #225	; 0xe1
 80061a4:	f7ff fe22 	bl	8005dec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80061a8:	2000      	movs	r0, #0
 80061aa:	f7ff fe41 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80061ae:	200e      	movs	r0, #14
 80061b0:	f7ff fe3e 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80061b4:	2014      	movs	r0, #20
 80061b6:	f7ff fe3b 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80061ba:	2003      	movs	r0, #3
 80061bc:	f7ff fe38 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80061c0:	2011      	movs	r0, #17
 80061c2:	f7ff fe35 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80061c6:	2007      	movs	r0, #7
 80061c8:	f7ff fe32 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80061cc:	2031      	movs	r0, #49	; 0x31
 80061ce:	f7ff fe2f 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80061d2:	20c1      	movs	r0, #193	; 0xc1
 80061d4:	f7ff fe2c 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80061d8:	2048      	movs	r0, #72	; 0x48
 80061da:	f7ff fe29 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80061de:	2008      	movs	r0, #8
 80061e0:	f7ff fe26 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80061e4:	200f      	movs	r0, #15
 80061e6:	f7ff fe23 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80061ea:	200c      	movs	r0, #12
 80061ec:	f7ff fe20 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80061f0:	2031      	movs	r0, #49	; 0x31
 80061f2:	f7ff fe1d 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80061f6:	2036      	movs	r0, #54	; 0x36
 80061f8:	f7ff fe1a 	bl	8005e30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80061fc:	200f      	movs	r0, #15
 80061fe:	f7ff fe17 	bl	8005e30 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8006202:	2011      	movs	r0, #17
 8006204:	f7ff fdf2 	bl	8005dec <ILI9341_Write_Command>
HAL_Delay(120);
 8006208:	2078      	movs	r0, #120	; 0x78
 800620a:	f000 faf3 	bl	80067f4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800620e:	2029      	movs	r0, #41	; 0x29
 8006210:	f7ff fdec 	bl	8005dec <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8006214:	2000      	movs	r0, #0
 8006216:	f7ff fe97 	bl	8005f48 <ILI9341_Set_Rotation>
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b08c      	sub	sp, #48	; 0x30
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	80fb      	strh	r3, [r7, #6]
 800622c:	466b      	mov	r3, sp
 800622e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800623c:	d202      	bcs.n	8006244 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
 8006242:	e002      	b.n	800624a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8006244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800624a:	2201      	movs	r2, #1
 800624c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006250:	483e      	ldr	r0, [pc, #248]	; (800634c <ILI9341_Draw_Colour_Burst+0x12c>)
 8006252:	f001 f9b7 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006256:	2200      	movs	r2, #0
 8006258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800625c:	483b      	ldr	r0, [pc, #236]	; (800634c <ILI9341_Draw_Colour_Burst+0x12c>)
 800625e:	f001 f9b1 	bl	80075c4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	0a1b      	lsrs	r3, r3, #8
 8006266:	b29b      	uxth	r3, r3
 8006268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800626c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800626e:	4623      	mov	r3, r4
 8006270:	3b01      	subs	r3, #1
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	4620      	mov	r0, r4
 8006276:	f04f 0100 	mov.w	r1, #0
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	00cb      	lsls	r3, r1, #3
 8006284:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006288:	00c2      	lsls	r2, r0, #3
 800628a:	4620      	mov	r0, r4
 800628c:	f04f 0100 	mov.w	r1, #0
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	00cb      	lsls	r3, r1, #3
 800629a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800629e:	00c2      	lsls	r2, r0, #3
 80062a0:	1de3      	adds	r3, r4, #7
 80062a2:	08db      	lsrs	r3, r3, #3
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	ebad 0d03 	sub.w	sp, sp, r3
 80062aa:	466b      	mov	r3, sp
 80062ac:	3300      	adds	r3, #0
 80062ae:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80062b0:	2300      	movs	r3, #0
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b4:	e00e      	b.n	80062d4 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	4413      	add	r3, r2
 80062bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80062c0:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	3301      	adds	r3, #1
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	b2d1      	uxtb	r1, r2
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	3302      	adds	r3, #2
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3ec      	bcc.n	80062b6 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80062f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062f6:	fb01 f202 	mul.w	r2, r1, r2
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d010      	beq.n	8006326 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006304:	2300      	movs	r3, #0
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006308:	e009      	b.n	800631e <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800630a:	69b9      	ldr	r1, [r7, #24]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	b29a      	uxth	r2, r3
 8006310:	230a      	movs	r3, #10
 8006312:	480f      	ldr	r0, [pc, #60]	; (8006350 <ILI9341_Draw_Colour_Burst+0x130>)
 8006314:	f003 fb5d 	bl	80099d2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	3301      	adds	r3, #1
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	429a      	cmp	r2, r3
 8006324:	d3f1      	bcc.n	800630a <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8006326:	69b9      	ldr	r1, [r7, #24]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	b29a      	uxth	r2, r3
 800632c:	230a      	movs	r3, #10
 800632e:	4808      	ldr	r0, [pc, #32]	; (8006350 <ILI9341_Draw_Colour_Burst+0x130>)
 8006330:	f003 fb4f 	bl	80099d2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006334:	2201      	movs	r2, #1
 8006336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800633a:	4804      	ldr	r0, [pc, #16]	; (800634c <ILI9341_Draw_Colour_Burst+0x12c>)
 800633c:	f001 f942 	bl	80075c4 <HAL_GPIO_WritePin>
 8006340:	46ad      	mov	sp, r5
}
 8006342:	bf00      	nop
 8006344:	3730      	adds	r7, #48	; 0x30
 8006346:	46bd      	mov	sp, r7
 8006348:	bdb0      	pop	{r4, r5, r7, pc}
 800634a:	bf00      	nop
 800634c:	40020800 	.word	0x40020800
 8006350:	200004f8 	.word	0x200004f8

08006354 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800635e:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <ILI9341_Fill_Screen+0x44>)
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29a      	uxth	r2, r3
 8006364:	4b0d      	ldr	r3, [pc, #52]	; (800639c <ILI9341_Fill_Screen+0x48>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	2100      	movs	r1, #0
 800636c:	2000      	movs	r0, #0
 800636e:	f7ff fd81 	bl	8005e74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <ILI9341_Fill_Screen+0x44>)
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	4b08      	ldr	r3, [pc, #32]	; (800639c <ILI9341_Fill_Screen+0x48>)
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	fb03 f302 	mul.w	r3, r3, r2
 8006384:	461a      	mov	r2, r3
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff ff48 	bl	8006220 <ILI9341_Draw_Colour_Burst>
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200000d2 	.word	0x200000d2
 800639c:	200000d0 	.word	0x200000d0

080063a0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	80fb      	strh	r3, [r7, #6]
 80063aa:	460b      	mov	r3, r1
 80063ac:	80bb      	strh	r3, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80063b2:	4b64      	ldr	r3, [pc, #400]	; (8006544 <ILI9341_Draw_Pixel+0x1a4>)
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	f080 80be 	bcs.w	800653c <ILI9341_Draw_Pixel+0x19c>
 80063c0:	4b61      	ldr	r3, [pc, #388]	; (8006548 <ILI9341_Draw_Pixel+0x1a8>)
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	88ba      	ldrh	r2, [r7, #4]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	f080 80b7 	bcs.w	800653c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80063ce:	2200      	movs	r2, #0
 80063d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063d4:	485d      	ldr	r0, [pc, #372]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 80063d6:	f001 f8f5 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80063da:	2200      	movs	r2, #0
 80063dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063e0:	485a      	ldr	r0, [pc, #360]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 80063e2:	f001 f8ef 	bl	80075c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80063e6:	202a      	movs	r0, #42	; 0x2a
 80063e8:	f7ff fcee 	bl	8005dc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80063ec:	2201      	movs	r2, #1
 80063ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063f2:	4856      	ldr	r0, [pc, #344]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 80063f4:	f001 f8e6 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80063f8:	2201      	movs	r2, #1
 80063fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063fe:	4853      	ldr	r0, [pc, #332]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 8006400:	f001 f8e0 	bl	80075c4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800640a:	4850      	ldr	r0, [pc, #320]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 800640c:	f001 f8da 	bl	80075c4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	b29b      	uxth	r3, r3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	753b      	strb	r3, [r7, #20]
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	757b      	strb	r3, [r7, #21]
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	3301      	adds	r3, #1
 8006424:	121b      	asrs	r3, r3, #8
 8006426:	b2db      	uxtb	r3, r3
 8006428:	75bb      	strb	r3, [r7, #22]
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	3301      	adds	r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8006434:	f107 0114 	add.w	r1, r7, #20
 8006438:	2301      	movs	r3, #1
 800643a:	2204      	movs	r2, #4
 800643c:	4844      	ldr	r0, [pc, #272]	; (8006550 <ILI9341_Draw_Pixel+0x1b0>)
 800643e:	f003 fac8 	bl	80099d2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006442:	2201      	movs	r2, #1
 8006444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006448:	4840      	ldr	r0, [pc, #256]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 800644a:	f001 f8bb 	bl	80075c4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800644e:	2200      	movs	r2, #0
 8006450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006454:	483d      	ldr	r0, [pc, #244]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 8006456:	f001 f8b5 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800645a:	2200      	movs	r2, #0
 800645c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006460:	483a      	ldr	r0, [pc, #232]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 8006462:	f001 f8af 	bl	80075c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8006466:	202b      	movs	r0, #43	; 0x2b
 8006468:	f7ff fcae 	bl	8005dc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800646c:	2201      	movs	r2, #1
 800646e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006472:	4836      	ldr	r0, [pc, #216]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 8006474:	f001 f8a6 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006478:	2201      	movs	r2, #1
 800647a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800647e:	4833      	ldr	r0, [pc, #204]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 8006480:	f001 f8a0 	bl	80075c4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006484:	2200      	movs	r2, #0
 8006486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800648a:	4830      	ldr	r0, [pc, #192]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 800648c:	f001 f89a 	bl	80075c4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8006490:	88bb      	ldrh	r3, [r7, #4]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	b29b      	uxth	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	743b      	strb	r3, [r7, #16]
 800649a:	88bb      	ldrh	r3, [r7, #4]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	747b      	strb	r3, [r7, #17]
 80064a0:	88bb      	ldrh	r3, [r7, #4]
 80064a2:	3301      	adds	r3, #1
 80064a4:	121b      	asrs	r3, r3, #8
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	74bb      	strb	r3, [r7, #18]
 80064aa:	88bb      	ldrh	r3, [r7, #4]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	3301      	adds	r3, #1
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80064b4:	f107 0110 	add.w	r1, r7, #16
 80064b8:	2301      	movs	r3, #1
 80064ba:	2204      	movs	r2, #4
 80064bc:	4824      	ldr	r0, [pc, #144]	; (8006550 <ILI9341_Draw_Pixel+0x1b0>)
 80064be:	f003 fa88 	bl	80099d2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80064c2:	2201      	movs	r2, #1
 80064c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064c8:	4820      	ldr	r0, [pc, #128]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 80064ca:	f001 f87b 	bl	80075c4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80064ce:	2200      	movs	r2, #0
 80064d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064d4:	481d      	ldr	r0, [pc, #116]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 80064d6:	f001 f875 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80064da:	2200      	movs	r2, #0
 80064dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064e0:	481a      	ldr	r0, [pc, #104]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 80064e2:	f001 f86f 	bl	80075c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80064e6:	202c      	movs	r0, #44	; 0x2c
 80064e8:	f7ff fc6e 	bl	8005dc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80064ec:	2201      	movs	r2, #1
 80064ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064f2:	4816      	ldr	r0, [pc, #88]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 80064f4:	f001 f866 	bl	80075c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80064f8:	2201      	movs	r2, #1
 80064fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064fe:	4813      	ldr	r0, [pc, #76]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 8006500:	f001 f860 	bl	80075c4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800650a:	4810      	ldr	r0, [pc, #64]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 800650c:	f001 f85a 	bl	80075c4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8006510:	887b      	ldrh	r3, [r7, #2]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	b29b      	uxth	r3, r3
 8006516:	b2db      	uxtb	r3, r3
 8006518:	733b      	strb	r3, [r7, #12]
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8006520:	f107 010c 	add.w	r1, r7, #12
 8006524:	2301      	movs	r3, #1
 8006526:	2202      	movs	r2, #2
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <ILI9341_Draw_Pixel+0x1b0>)
 800652a:	f003 fa52 	bl	80099d2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800652e:	2201      	movs	r2, #1
 8006530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006534:	4805      	ldr	r0, [pc, #20]	; (800654c <ILI9341_Draw_Pixel+0x1ac>)
 8006536:	f001 f845 	bl	80075c4 <HAL_GPIO_WritePin>
 800653a:	e000      	b.n	800653e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800653c:	bf00      	nop
	
}
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	200000d2 	.word	0x200000d2
 8006548:	200000d0 	.word	0x200000d0
 800654c:	40020800 	.word	0x40020800
 8006550:	200004f8 	.word	0x200004f8

08006554 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	4611      	mov	r1, r2
 8006560:	461a      	mov	r2, r3
 8006562:	4623      	mov	r3, r4
 8006564:	80fb      	strh	r3, [r7, #6]
 8006566:	4603      	mov	r3, r0
 8006568:	80bb      	strh	r3, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	807b      	strh	r3, [r7, #2]
 800656e:	4613      	mov	r3, r2
 8006570:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <ILI9341_Draw_Rectangle+0xb0>)
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	429a      	cmp	r2, r3
 800657c:	d23d      	bcs.n	80065fa <ILI9341_Draw_Rectangle+0xa6>
 800657e:	4b22      	ldr	r3, [pc, #136]	; (8006608 <ILI9341_Draw_Rectangle+0xb4>)
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	88ba      	ldrh	r2, [r7, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d237      	bcs.n	80065fa <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	887b      	ldrh	r3, [r7, #2]
 800658e:	4413      	add	r3, r2
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <ILI9341_Draw_Rectangle+0xb0>)
 8006592:	8812      	ldrh	r2, [r2, #0]
 8006594:	b292      	uxth	r2, r2
 8006596:	4293      	cmp	r3, r2
 8006598:	dd05      	ble.n	80065a6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800659a:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <ILI9341_Draw_Rectangle+0xb0>)
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29a      	uxth	r2, r3
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80065a6:	88ba      	ldrh	r2, [r7, #4]
 80065a8:	883b      	ldrh	r3, [r7, #0]
 80065aa:	4413      	add	r3, r2
 80065ac:	4a16      	ldr	r2, [pc, #88]	; (8006608 <ILI9341_Draw_Rectangle+0xb4>)
 80065ae:	8812      	ldrh	r2, [r2, #0]
 80065b0:	b292      	uxth	r2, r2
 80065b2:	4293      	cmp	r3, r2
 80065b4:	dd05      	ble.n	80065c2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <ILI9341_Draw_Rectangle+0xb4>)
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	88bb      	ldrh	r3, [r7, #4]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	887b      	ldrh	r3, [r7, #2]
 80065c6:	4413      	add	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29c      	uxth	r4, r3
 80065ce:	88ba      	ldrh	r2, [r7, #4]
 80065d0:	883b      	ldrh	r3, [r7, #0]
 80065d2:	4413      	add	r3, r2
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29b      	uxth	r3, r3
 80065da:	88b9      	ldrh	r1, [r7, #4]
 80065dc:	88f8      	ldrh	r0, [r7, #6]
 80065de:	4622      	mov	r2, r4
 80065e0:	f7ff fc48 	bl	8005e74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80065e4:	883b      	ldrh	r3, [r7, #0]
 80065e6:	887a      	ldrh	r2, [r7, #2]
 80065e8:	fb02 f303 	mul.w	r3, r2, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	8b3b      	ldrh	r3, [r7, #24]
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fe14 	bl	8006220 <ILI9341_Draw_Colour_Burst>
 80065f8:	e000      	b.n	80065fc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80065fa:	bf00      	nop
}
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd90      	pop	{r4, r7, pc}
 8006602:	bf00      	nop
 8006604:	200000d2 	.word	0x200000d2
 8006608:	200000d0 	.word	0x200000d0

0800660c <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	461a      	mov	r2, r3
 800661a:	4623      	mov	r3, r4
 800661c:	80fb      	strh	r3, [r7, #6]
 800661e:	4603      	mov	r3, r0
 8006620:	80bb      	strh	r3, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	807b      	strh	r3, [r7, #2]
 8006626:	4613      	mov	r3, r2
 8006628:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800662a:	4b18      	ldr	r3, [pc, #96]	; (800668c <ILI9341_Draw_Horizontal_Line+0x80>)
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	429a      	cmp	r2, r3
 8006634:	d225      	bcs.n	8006682 <ILI9341_Draw_Horizontal_Line+0x76>
 8006636:	4b16      	ldr	r3, [pc, #88]	; (8006690 <ILI9341_Draw_Horizontal_Line+0x84>)
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	88ba      	ldrh	r2, [r7, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d21f      	bcs.n	8006682 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	4413      	add	r3, r2
 8006648:	4a10      	ldr	r2, [pc, #64]	; (800668c <ILI9341_Draw_Horizontal_Line+0x80>)
 800664a:	8812      	ldrh	r2, [r2, #0]
 800664c:	b292      	uxth	r2, r2
 800664e:	4293      	cmp	r3, r2
 8006650:	dd05      	ble.n	800665e <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8006652:	4b0e      	ldr	r3, [pc, #56]	; (800668c <ILI9341_Draw_Horizontal_Line+0x80>)
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29a      	uxth	r2, r3
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	887b      	ldrh	r3, [r7, #2]
 8006662:	4413      	add	r3, r2
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	88bb      	ldrh	r3, [r7, #4]
 800666c:	88b9      	ldrh	r1, [r7, #4]
 800666e:	88f8      	ldrh	r0, [r7, #6]
 8006670:	f7ff fc00 	bl	8005e74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8006674:	887a      	ldrh	r2, [r7, #2]
 8006676:	883b      	ldrh	r3, [r7, #0]
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fdd0 	bl	8006220 <ILI9341_Draw_Colour_Burst>
 8006680:	e000      	b.n	8006684 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006682:	bf00      	nop
}
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bd90      	pop	{r4, r7, pc}
 800668a:	bf00      	nop
 800668c:	200000d2 	.word	0x200000d2
 8006690:	200000d0 	.word	0x200000d0

08006694 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4623      	mov	r3, r4
 80066a4:	80fb      	strh	r3, [r7, #6]
 80066a6:	4603      	mov	r3, r0
 80066a8:	80bb      	strh	r3, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	807b      	strh	r3, [r7, #2]
 80066ae:	4613      	mov	r3, r2
 80066b0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80066b2:	4b18      	ldr	r3, [pc, #96]	; (8006714 <ILI9341_Draw_Vertical_Line+0x80>)
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d225      	bcs.n	800670a <ILI9341_Draw_Vertical_Line+0x76>
 80066be:	4b16      	ldr	r3, [pc, #88]	; (8006718 <ILI9341_Draw_Vertical_Line+0x84>)
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	88ba      	ldrh	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d21f      	bcs.n	800670a <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 80066ca:	88ba      	ldrh	r2, [r7, #4]
 80066cc:	887b      	ldrh	r3, [r7, #2]
 80066ce:	4413      	add	r3, r2
 80066d0:	4a11      	ldr	r2, [pc, #68]	; (8006718 <ILI9341_Draw_Vertical_Line+0x84>)
 80066d2:	8812      	ldrh	r2, [r2, #0]
 80066d4:	b292      	uxth	r2, r2
 80066d6:	4293      	cmp	r3, r2
 80066d8:	dd05      	ble.n	80066e6 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80066da:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <ILI9341_Draw_Vertical_Line+0x84>)
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	88bb      	ldrh	r3, [r7, #4]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80066e6:	88ba      	ldrh	r2, [r7, #4]
 80066e8:	887b      	ldrh	r3, [r7, #2]
 80066ea:	4413      	add	r3, r2
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	88fa      	ldrh	r2, [r7, #6]
 80066f4:	88b9      	ldrh	r1, [r7, #4]
 80066f6:	88f8      	ldrh	r0, [r7, #6]
 80066f8:	f7ff fbbc 	bl	8005e74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80066fc:	887a      	ldrh	r2, [r7, #2]
 80066fe:	883b      	ldrh	r3, [r7, #0]
 8006700:	4611      	mov	r1, r2
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fd8c 	bl	8006220 <ILI9341_Draw_Colour_Burst>
 8006708:	e000      	b.n	800670c <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800670a:	bf00      	nop
}
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}
 8006712:	bf00      	nop
 8006714:	200000d2 	.word	0x200000d2
 8006718:	200000d0 	.word	0x200000d0

0800671c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_Init+0x34>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0a      	ldr	r2, [pc, #40]	; (8006750 <HAL_Init+0x34>)
 8006726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800672a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <HAL_Init+0x34>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a07      	ldr	r2, [pc, #28]	; (8006750 <HAL_Init+0x34>)
 8006732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006738:	2003      	movs	r0, #3
 800673a:	f000 fd3d 	bl	80071b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800673e:	2000      	movs	r0, #0
 8006740:	f000 f808 	bl	8006754 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006744:	f7fe fbe2 	bl	8004f0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40023c00 	.word	0x40023c00

08006754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800675c:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <HAL_InitTick+0x54>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b12      	ldr	r3, [pc, #72]	; (80067ac <HAL_InitTick+0x58>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	4619      	mov	r1, r3
 8006766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800676a:	fbb3 f3f1 	udiv	r3, r3, r1
 800676e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fd55 	bl	8007222 <HAL_SYSTICK_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e00e      	b.n	80067a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d80a      	bhi.n	800679e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006788:	2200      	movs	r2, #0
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	f000 fd1d 	bl	80071ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006794:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <HAL_InitTick+0x5c>)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e000      	b.n	80067a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	200000cc 	.word	0x200000cc
 80067ac:	200000d8 	.word	0x200000d8
 80067b0:	200000d4 	.word	0x200000d4

080067b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_IncTick+0x20>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <HAL_IncTick+0x24>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4413      	add	r3, r2
 80067c4:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <HAL_IncTick+0x24>)
 80067c6:	6013      	str	r3, [r2, #0]
}
 80067c8:	bf00      	nop
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	200000d8 	.word	0x200000d8
 80067d8:	20000818 	.word	0x20000818

080067dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  return uwTick;
 80067e0:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <HAL_GetTick+0x14>)
 80067e2:	681b      	ldr	r3, [r3, #0]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000818 	.word	0x20000818

080067f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067fc:	f7ff ffee 	bl	80067dc <HAL_GetTick>
 8006800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d005      	beq.n	800681a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <HAL_Delay+0x44>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800681a:	bf00      	nop
 800681c:	f7ff ffde 	bl	80067dc <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	429a      	cmp	r2, r3
 800682a:	d8f7      	bhi.n	800681c <HAL_Delay+0x28>
  {
  }
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200000d8 	.word	0x200000d8

0800683c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e031      	b.n	80068b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fa f8a2 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b00      	cmp	r3, #0
 8006878:	d116      	bne.n	80068a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_ADC_Init+0x84>)
 8006880:	4013      	ands	r3, r2
 8006882:	f043 0202 	orr.w	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 faca 	bl	8006e24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	f043 0201 	orr.w	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
 80068a6:	e001      	b.n	80068ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	ffffeefd 	.word	0xffffeefd

080068c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_ADC_Start+0x1a>
 80068da:	2302      	movs	r3, #2
 80068dc:	e0ad      	b.n	8006a3a <HAL_ADC_Start+0x176>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d018      	beq.n	8006926 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006904:	4b50      	ldr	r3, [pc, #320]	; (8006a48 <HAL_ADC_Start+0x184>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a50      	ldr	r2, [pc, #320]	; (8006a4c <HAL_ADC_Start+0x188>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	0c9a      	lsrs	r2, r3, #18
 8006910:	4613      	mov	r3, r2
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	4413      	add	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006918:	e002      	b.n	8006920 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3b01      	subs	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f9      	bne.n	800691a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d175      	bne.n	8006a20 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006938:	4b45      	ldr	r3, [pc, #276]	; (8006a50 <HAL_ADC_Start+0x18c>)
 800693a:	4013      	ands	r3, r2
 800693c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800695a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696e:	d106      	bne.n	800697e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	f023 0206 	bic.w	r2, r3, #6
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	645a      	str	r2, [r3, #68]	; 0x44
 800697c:	e002      	b.n	8006984 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006994:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006996:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <HAL_ADC_Start+0x190>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d143      	bne.n	8006a38 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	e03a      	b.n	8006a38 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a24      	ldr	r2, [pc, #144]	; (8006a58 <HAL_ADC_Start+0x194>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d10e      	bne.n	80069ea <HAL_ADC_Start+0x126>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <HAL_ADC_Start+0x190>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d120      	bne.n	8006a38 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_ADC_Start+0x198>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d11b      	bne.n	8006a38 <HAL_ADC_Start+0x174>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d114      	bne.n	8006a38 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a1c:	609a      	str	r2, [r3, #8]
 8006a1e:	e00b      	b.n	8006a38 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	f043 0210 	orr.w	r2, r3, #16
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a30:	f043 0201 	orr.w	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	200000cc 	.word	0x200000cc
 8006a4c:	431bde83 	.word	0x431bde83
 8006a50:	fffff8fe 	.word	0xfffff8fe
 8006a54:	40012300 	.word	0x40012300
 8006a58:	40012000 	.word	0x40012000
 8006a5c:	40012200 	.word	0x40012200

08006a60 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7c:	d113      	bne.n	8006aa6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8c:	d10b      	bne.n	8006aa6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e063      	b.n	8006b6e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006aa6:	f7ff fe99 	bl	80067dc <HAL_GetTick>
 8006aaa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006aac:	e021      	b.n	8006af2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d01d      	beq.n	8006af2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <HAL_ADC_PollForConversion+0x6c>
 8006abc:	f7ff fe8e 	bl	80067dc <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d212      	bcs.n	8006af2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d00b      	beq.n	8006af2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f043 0204 	orr.w	r2, r3, #4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e03d      	b.n	8006b6e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d1d6      	bne.n	8006aae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0212 	mvn.w	r2, #18
 8006b08:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d123      	bne.n	8006b6c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11f      	bne.n	8006b6c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d111      	bne.n	8006b6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d105      	bne.n	8006b6c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	f043 0201 	orr.w	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_ADC_ConfigChannel+0x1c>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e12a      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x272>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b09      	cmp	r3, #9
 8006bba:	d93a      	bls.n	8006c32 <HAL_ADC_ConfigChannel+0xa2>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc4:	d035      	beq.n	8006c32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68d9      	ldr	r1, [r3, #12]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	4413      	add	r3, r2
 8006bda:	3b1e      	subs	r3, #30
 8006bdc:	2207      	movs	r2, #7
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	43da      	mvns	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	400a      	ands	r2, r1
 8006bea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a87      	ldr	r2, [pc, #540]	; (8006e10 <HAL_ADC_ConfigChannel+0x280>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d10a      	bne.n	8006c0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68d9      	ldr	r1, [r3, #12]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	061a      	lsls	r2, r3, #24
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c0a:	e035      	b.n	8006c78 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68d9      	ldr	r1, [r3, #12]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4403      	add	r3, r0
 8006c24:	3b1e      	subs	r3, #30
 8006c26:	409a      	lsls	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c30:	e022      	b.n	8006c78 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6919      	ldr	r1, [r3, #16]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	4613      	mov	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4413      	add	r3, r2
 8006c46:	2207      	movs	r2, #7
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	43da      	mvns	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	400a      	ands	r2, r1
 8006c54:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6919      	ldr	r1, [r3, #16]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4618      	mov	r0, r3
 8006c68:	4603      	mov	r3, r0
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	4403      	add	r3, r0
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b06      	cmp	r3, #6
 8006c7e:	d824      	bhi.n	8006cca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	3b05      	subs	r3, #5
 8006c92:	221f      	movs	r2, #31
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	43da      	mvns	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	400a      	ands	r2, r1
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	4618      	mov	r0, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	3b05      	subs	r3, #5
 8006cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	635a      	str	r2, [r3, #52]	; 0x34
 8006cc8:	e04c      	b.n	8006d64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b0c      	cmp	r3, #12
 8006cd0:	d824      	bhi.n	8006d1c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3b23      	subs	r3, #35	; 0x23
 8006ce4:	221f      	movs	r2, #31
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	43da      	mvns	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	400a      	ands	r2, r1
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4618      	mov	r0, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3b23      	subs	r3, #35	; 0x23
 8006d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1a:	e023      	b.n	8006d64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	3b41      	subs	r3, #65	; 0x41
 8006d2e:	221f      	movs	r2, #31
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	43da      	mvns	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	400a      	ands	r2, r1
 8006d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	3b41      	subs	r3, #65	; 0x41
 8006d58:	fa00 f203 	lsl.w	r2, r0, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a2a      	ldr	r2, [pc, #168]	; (8006e14 <HAL_ADC_ConfigChannel+0x284>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10a      	bne.n	8006d84 <HAL_ADC_ConfigChannel+0x1f4>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d76:	d105      	bne.n	8006d84 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006d78:	4b27      	ldr	r3, [pc, #156]	; (8006e18 <HAL_ADC_ConfigChannel+0x288>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4a26      	ldr	r2, [pc, #152]	; (8006e18 <HAL_ADC_ConfigChannel+0x288>)
 8006d7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006d82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a22      	ldr	r2, [pc, #136]	; (8006e14 <HAL_ADC_ConfigChannel+0x284>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d109      	bne.n	8006da2 <HAL_ADC_ConfigChannel+0x212>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b12      	cmp	r3, #18
 8006d94:	d105      	bne.n	8006da2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006d96:	4b20      	ldr	r3, [pc, #128]	; (8006e18 <HAL_ADC_ConfigChannel+0x288>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4a1f      	ldr	r2, [pc, #124]	; (8006e18 <HAL_ADC_ConfigChannel+0x288>)
 8006d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006da0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <HAL_ADC_ConfigChannel+0x284>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d125      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x268>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <HAL_ADC_ConfigChannel+0x280>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d003      	beq.n	8006dbe <HAL_ADC_ConfigChannel+0x22e>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b11      	cmp	r3, #17
 8006dbc:	d11c      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006dbe:	4b16      	ldr	r3, [pc, #88]	; (8006e18 <HAL_ADC_ConfigChannel+0x288>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <HAL_ADC_ConfigChannel+0x288>)
 8006dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dc8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a10      	ldr	r2, [pc, #64]	; (8006e10 <HAL_ADC_ConfigChannel+0x280>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d111      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <HAL_ADC_ConfigChannel+0x28c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a11      	ldr	r2, [pc, #68]	; (8006e20 <HAL_ADC_ConfigChannel+0x290>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	0c9a      	lsrs	r2, r3, #18
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006dea:	e002      	b.n	8006df2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f9      	bne.n	8006dec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	10000012 	.word	0x10000012
 8006e14:	40012000 	.word	0x40012000
 8006e18:	40012300 	.word	0x40012300
 8006e1c:	200000cc 	.word	0x200000cc
 8006e20:	431bde83 	.word	0x431bde83

08006e24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006e2c:	4b78      	ldr	r3, [pc, #480]	; (8007010 <ADC_Init+0x1ec>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4a77      	ldr	r2, [pc, #476]	; (8007010 <ADC_Init+0x1ec>)
 8006e32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006e36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006e38:	4b75      	ldr	r3, [pc, #468]	; (8007010 <ADC_Init+0x1ec>)
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4973      	ldr	r1, [pc, #460]	; (8007010 <ADC_Init+0x1ec>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6859      	ldr	r1, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	021a      	lsls	r2, r3, #8
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6859      	ldr	r1, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6899      	ldr	r1, [r3, #8]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	4a58      	ldr	r2, [pc, #352]	; (8007014 <ADC_Init+0x1f0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ec6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6899      	ldr	r1, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6899      	ldr	r1, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	609a      	str	r2, [r3, #8]
 8006efc:	e00f      	b.n	8006f1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0202 	bic.w	r2, r2, #2
 8006f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6899      	ldr	r1, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	005a      	lsls	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6859      	ldr	r1, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	3b01      	subs	r3, #1
 8006f78:	035a      	lsls	r2, r3, #13
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	e007      	b.n	8006f94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	051a      	lsls	r2, r3, #20
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006fc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6899      	ldr	r1, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fd6:	025a      	lsls	r2, r3, #9
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6899      	ldr	r1, [r3, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	029a      	lsls	r2, r3, #10
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	40012300 	.word	0x40012300
 8007014:	0f000001 	.word	0x0f000001

08007018 <__NVIC_SetPriorityGrouping>:
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <__NVIC_SetPriorityGrouping+0x40>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007034:	4013      	ands	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <__NVIC_SetPriorityGrouping+0x44>)
 8007042:	4313      	orrs	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007046:	4a04      	ldr	r2, [pc, #16]	; (8007058 <__NVIC_SetPriorityGrouping+0x40>)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	60d3      	str	r3, [r2, #12]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	e000ed00 	.word	0xe000ed00
 800705c:	05fa0000 	.word	0x05fa0000

08007060 <__NVIC_GetPriorityGrouping>:
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <__NVIC_GetPriorityGrouping+0x18>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	f003 0307 	and.w	r3, r3, #7
}
 800706e:	4618      	mov	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	e000ed00 	.word	0xe000ed00

0800707c <__NVIC_EnableIRQ>:
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800708a:	2b00      	cmp	r3, #0
 800708c:	db0b      	blt.n	80070a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	f003 021f 	and.w	r2, r3, #31
 8007094:	4907      	ldr	r1, [pc, #28]	; (80070b4 <__NVIC_EnableIRQ+0x38>)
 8007096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	2001      	movs	r0, #1
 800709e:	fa00 f202 	lsl.w	r2, r0, r2
 80070a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	e000e100 	.word	0xe000e100

080070b8 <__NVIC_SetPriority>:
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	db0a      	blt.n	80070e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	490c      	ldr	r1, [pc, #48]	; (8007104 <__NVIC_SetPriority+0x4c>)
 80070d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d6:	0112      	lsls	r2, r2, #4
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	440b      	add	r3, r1
 80070dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070e0:	e00a      	b.n	80070f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	4908      	ldr	r1, [pc, #32]	; (8007108 <__NVIC_SetPriority+0x50>)
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	3b04      	subs	r3, #4
 80070f0:	0112      	lsls	r2, r2, #4
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	440b      	add	r3, r1
 80070f6:	761a      	strb	r2, [r3, #24]
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	e000e100 	.word	0xe000e100
 8007108:	e000ed00 	.word	0xe000ed00

0800710c <NVIC_EncodePriority>:
{
 800710c:	b480      	push	{r7}
 800710e:	b089      	sub	sp, #36	; 0x24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f1c3 0307 	rsb	r3, r3, #7
 8007126:	2b04      	cmp	r3, #4
 8007128:	bf28      	it	cs
 800712a:	2304      	movcs	r3, #4
 800712c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	3304      	adds	r3, #4
 8007132:	2b06      	cmp	r3, #6
 8007134:	d902      	bls.n	800713c <NVIC_EncodePriority+0x30>
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	3b03      	subs	r3, #3
 800713a:	e000      	b.n	800713e <NVIC_EncodePriority+0x32>
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007140:	f04f 32ff 	mov.w	r2, #4294967295
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	43da      	mvns	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	401a      	ands	r2, r3
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007154:	f04f 31ff 	mov.w	r1, #4294967295
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	fa01 f303 	lsl.w	r3, r1, r3
 800715e:	43d9      	mvns	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007164:	4313      	orrs	r3, r2
}
 8007166:	4618      	mov	r0, r3
 8007168:	3724      	adds	r7, #36	; 0x24
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3b01      	subs	r3, #1
 8007180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007184:	d301      	bcc.n	800718a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007186:	2301      	movs	r3, #1
 8007188:	e00f      	b.n	80071aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800718a:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <SysTick_Config+0x40>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3b01      	subs	r3, #1
 8007190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007192:	210f      	movs	r1, #15
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	f7ff ff8e 	bl	80070b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <SysTick_Config+0x40>)
 800719e:	2200      	movs	r2, #0
 80071a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071a2:	4b04      	ldr	r3, [pc, #16]	; (80071b4 <SysTick_Config+0x40>)
 80071a4:	2207      	movs	r2, #7
 80071a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	e000e010 	.word	0xe000e010

080071b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff ff29 	bl	8007018 <__NVIC_SetPriorityGrouping>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	4603      	mov	r3, r0
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071e0:	f7ff ff3e 	bl	8007060 <__NVIC_GetPriorityGrouping>
 80071e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	f7ff ff8e 	bl	800710c <NVIC_EncodePriority>
 80071f0:	4602      	mov	r2, r0
 80071f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f6:	4611      	mov	r1, r2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ff5d 	bl	80070b8 <__NVIC_SetPriority>
}
 80071fe:	bf00      	nop
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	4603      	mov	r3, r0
 800720e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff ff31 	bl	800707c <__NVIC_EnableIRQ>
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff ffa2 	bl	8007174 <SysTick_Config>
 8007230:	4603      	mov	r3, r0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800723c:	b480      	push	{r7}
 800723e:	b089      	sub	sp, #36	; 0x24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007246:	2300      	movs	r3, #0
 8007248:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800724a:	2300      	movs	r3, #0
 800724c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800724e:	2300      	movs	r3, #0
 8007250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	e175      	b.n	8007548 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800725c:	2201      	movs	r2, #1
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4013      	ands	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	429a      	cmp	r2, r3
 8007276:	f040 8164 	bne.w	8007542 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d00b      	beq.n	800729a <HAL_GPIO_Init+0x5e>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d007      	beq.n	800729a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800728e:	2b11      	cmp	r3, #17
 8007290:	d003      	beq.n	800729a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b12      	cmp	r3, #18
 8007298:	d130      	bne.n	80072fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	2203      	movs	r2, #3
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	43db      	mvns	r3, r3
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	4013      	ands	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	fa02 f303 	lsl.w	r3, r2, r3
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072d0:	2201      	movs	r2, #1
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	43db      	mvns	r3, r3
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4013      	ands	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	091b      	lsrs	r3, r3, #4
 80072e6:	f003 0201 	and.w	r2, r3, #1
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	2203      	movs	r2, #3
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	43db      	mvns	r3, r3
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	4013      	ands	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	4313      	orrs	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d003      	beq.n	800733c <HAL_GPIO_Init+0x100>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b12      	cmp	r3, #18
 800733a:	d123      	bne.n	8007384 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	08da      	lsrs	r2, r3, #3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3208      	adds	r2, #8
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	220f      	movs	r2, #15
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
 8007358:	43db      	mvns	r3, r3
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	4013      	ands	r3, r2
 800735e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4313      	orrs	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	08da      	lsrs	r2, r3, #3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3208      	adds	r2, #8
 800737e:	69b9      	ldr	r1, [r7, #24]
 8007380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	2203      	movs	r2, #3
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	43db      	mvns	r3, r3
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	4013      	ands	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 0203 	and.w	r2, r3, #3
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80be 	beq.w	8007542 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c6:	4b66      	ldr	r3, [pc, #408]	; (8007560 <HAL_GPIO_Init+0x324>)
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	4a65      	ldr	r2, [pc, #404]	; (8007560 <HAL_GPIO_Init+0x324>)
 80073cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073d0:	6453      	str	r3, [r2, #68]	; 0x44
 80073d2:	4b63      	ldr	r3, [pc, #396]	; (8007560 <HAL_GPIO_Init+0x324>)
 80073d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80073de:	4a61      	ldr	r2, [pc, #388]	; (8007564 <HAL_GPIO_Init+0x328>)
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	3302      	adds	r3, #2
 80073e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	220f      	movs	r2, #15
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43db      	mvns	r3, r3
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	4013      	ands	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a58      	ldr	r2, [pc, #352]	; (8007568 <HAL_GPIO_Init+0x32c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d037      	beq.n	800747a <HAL_GPIO_Init+0x23e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a57      	ldr	r2, [pc, #348]	; (800756c <HAL_GPIO_Init+0x330>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d031      	beq.n	8007476 <HAL_GPIO_Init+0x23a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a56      	ldr	r2, [pc, #344]	; (8007570 <HAL_GPIO_Init+0x334>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d02b      	beq.n	8007472 <HAL_GPIO_Init+0x236>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a55      	ldr	r2, [pc, #340]	; (8007574 <HAL_GPIO_Init+0x338>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d025      	beq.n	800746e <HAL_GPIO_Init+0x232>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a54      	ldr	r2, [pc, #336]	; (8007578 <HAL_GPIO_Init+0x33c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01f      	beq.n	800746a <HAL_GPIO_Init+0x22e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a53      	ldr	r2, [pc, #332]	; (800757c <HAL_GPIO_Init+0x340>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d019      	beq.n	8007466 <HAL_GPIO_Init+0x22a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a52      	ldr	r2, [pc, #328]	; (8007580 <HAL_GPIO_Init+0x344>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_GPIO_Init+0x226>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a51      	ldr	r2, [pc, #324]	; (8007584 <HAL_GPIO_Init+0x348>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00d      	beq.n	800745e <HAL_GPIO_Init+0x222>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a50      	ldr	r2, [pc, #320]	; (8007588 <HAL_GPIO_Init+0x34c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <HAL_GPIO_Init+0x21e>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a4f      	ldr	r2, [pc, #316]	; (800758c <HAL_GPIO_Init+0x350>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d101      	bne.n	8007456 <HAL_GPIO_Init+0x21a>
 8007452:	2309      	movs	r3, #9
 8007454:	e012      	b.n	800747c <HAL_GPIO_Init+0x240>
 8007456:	230a      	movs	r3, #10
 8007458:	e010      	b.n	800747c <HAL_GPIO_Init+0x240>
 800745a:	2308      	movs	r3, #8
 800745c:	e00e      	b.n	800747c <HAL_GPIO_Init+0x240>
 800745e:	2307      	movs	r3, #7
 8007460:	e00c      	b.n	800747c <HAL_GPIO_Init+0x240>
 8007462:	2306      	movs	r3, #6
 8007464:	e00a      	b.n	800747c <HAL_GPIO_Init+0x240>
 8007466:	2305      	movs	r3, #5
 8007468:	e008      	b.n	800747c <HAL_GPIO_Init+0x240>
 800746a:	2304      	movs	r3, #4
 800746c:	e006      	b.n	800747c <HAL_GPIO_Init+0x240>
 800746e:	2303      	movs	r3, #3
 8007470:	e004      	b.n	800747c <HAL_GPIO_Init+0x240>
 8007472:	2302      	movs	r3, #2
 8007474:	e002      	b.n	800747c <HAL_GPIO_Init+0x240>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <HAL_GPIO_Init+0x240>
 800747a:	2300      	movs	r3, #0
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	f002 0203 	and.w	r2, r2, #3
 8007482:	0092      	lsls	r2, r2, #2
 8007484:	4093      	lsls	r3, r2
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4313      	orrs	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800748c:	4935      	ldr	r1, [pc, #212]	; (8007564 <HAL_GPIO_Init+0x328>)
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	089b      	lsrs	r3, r3, #2
 8007492:	3302      	adds	r3, #2
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800749a:	4b3d      	ldr	r3, [pc, #244]	; (8007590 <HAL_GPIO_Init+0x354>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	43db      	mvns	r3, r3
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	4013      	ands	r3, r2
 80074a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074be:	4a34      	ldr	r2, [pc, #208]	; (8007590 <HAL_GPIO_Init+0x354>)
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80074c4:	4b32      	ldr	r3, [pc, #200]	; (8007590 <HAL_GPIO_Init+0x354>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4013      	ands	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074e8:	4a29      	ldr	r2, [pc, #164]	; (8007590 <HAL_GPIO_Init+0x354>)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074ee:	4b28      	ldr	r3, [pc, #160]	; (8007590 <HAL_GPIO_Init+0x354>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007512:	4a1f      	ldr	r2, [pc, #124]	; (8007590 <HAL_GPIO_Init+0x354>)
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007518:	4b1d      	ldr	r3, [pc, #116]	; (8007590 <HAL_GPIO_Init+0x354>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	43db      	mvns	r3, r3
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	4013      	ands	r3, r2
 8007526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800753c:	4a14      	ldr	r2, [pc, #80]	; (8007590 <HAL_GPIO_Init+0x354>)
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	3301      	adds	r3, #1
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2b0f      	cmp	r3, #15
 800754c:	f67f ae86 	bls.w	800725c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	3724      	adds	r7, #36	; 0x24
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40023800 	.word	0x40023800
 8007564:	40013800 	.word	0x40013800
 8007568:	40020000 	.word	0x40020000
 800756c:	40020400 	.word	0x40020400
 8007570:	40020800 	.word	0x40020800
 8007574:	40020c00 	.word	0x40020c00
 8007578:	40021000 	.word	0x40021000
 800757c:	40021400 	.word	0x40021400
 8007580:	40021800 	.word	0x40021800
 8007584:	40021c00 	.word	0x40021c00
 8007588:	40022000 	.word	0x40022000
 800758c:	40022400 	.word	0x40022400
 8007590:	40013c00 	.word	0x40013c00

08007594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691a      	ldr	r2, [r3, #16]
 80075a4:	887b      	ldrh	r3, [r7, #2]
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
 80075b0:	e001      	b.n	80075b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
 80075d0:	4613      	mov	r3, r2
 80075d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075d4:	787b      	ldrb	r3, [r7, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075da:	887a      	ldrh	r2, [r7, #2]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80075e0:	e003      	b.n	80075ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	041a      	lsls	r2, r3, #16
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	619a      	str	r2, [r3, #24]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007604:	695a      	ldr	r2, [r3, #20]
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	4013      	ands	r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d006      	beq.n	800761c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800760e:	4a05      	ldr	r2, [pc, #20]	; (8007624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	4618      	mov	r0, r3
 8007618:	f7fd fb98 	bl	8004d4c <HAL_GPIO_EXTI_Callback>
  }
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40013c00 	.word	0x40013c00

08007628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e07f      	b.n	800773a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7f9 fb72 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2224      	movs	r2, #36	; 0x24
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007678:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007688:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d107      	bne.n	80076a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800769e:	609a      	str	r2, [r3, #8]
 80076a0:	e006      	b.n	80076b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80076ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d104      	bne.n	80076c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6859      	ldr	r1, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b1d      	ldr	r3, [pc, #116]	; (8007744 <HAL_I2C_Init+0x11c>)
 80076ce:	430b      	orrs	r3, r1
 80076d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	ea42 0103 	orr.w	r1, r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1a      	ldr	r2, [r3, #32]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	02008000 	.word	0x02008000

08007748 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	461a      	mov	r2, r3
 8007754:	460b      	mov	r3, r1
 8007756:	817b      	strh	r3, [r7, #10]
 8007758:	4613      	mov	r3, r2
 800775a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b20      	cmp	r3, #32
 8007766:	f040 80da 	bne.w	800791e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_I2C_Master_Transmit+0x30>
 8007774:	2302      	movs	r3, #2
 8007776:	e0d3      	b.n	8007920 <HAL_I2C_Master_Transmit+0x1d8>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007780:	f7ff f82c 	bl	80067dc <HAL_GetTick>
 8007784:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2319      	movs	r3, #25
 800778c:	2201      	movs	r2, #1
 800778e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fcbc 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e0be      	b.n	8007920 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2221      	movs	r2, #33	; 0x21
 80077a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2210      	movs	r2, #16
 80077ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	893a      	ldrh	r2, [r7, #8]
 80077c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2bff      	cmp	r3, #255	; 0xff
 80077d2:	d90e      	bls.n	80077f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	22ff      	movs	r2, #255	; 0xff
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	8979      	ldrh	r1, [r7, #10]
 80077e2:	4b51      	ldr	r3, [pc, #324]	; (8007928 <HAL_I2C_Master_Transmit+0x1e0>)
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fe1e 	bl	800842c <I2C_TransferConfig>
 80077f0:	e06c      	b.n	80078cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007800:	b2da      	uxtb	r2, r3
 8007802:	8979      	ldrh	r1, [r7, #10]
 8007804:	4b48      	ldr	r3, [pc, #288]	; (8007928 <HAL_I2C_Master_Transmit+0x1e0>)
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fe0d 	bl	800842c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007812:	e05b      	b.n	80078cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	6a39      	ldr	r1, [r7, #32]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 fcb9 	bl	8008190 <I2C_WaitOnTXISFlagUntilTimeout>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e07b      	b.n	8007920 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d034      	beq.n	80078cc <HAL_I2C_Master_Transmit+0x184>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d130      	bne.n	80078cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	2200      	movs	r2, #0
 8007872:	2180      	movs	r1, #128	; 0x80
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fc4b 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e04d      	b.n	8007920 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007888:	b29b      	uxth	r3, r3
 800788a:	2bff      	cmp	r3, #255	; 0xff
 800788c:	d90e      	bls.n	80078ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	22ff      	movs	r2, #255	; 0xff
 8007892:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007898:	b2da      	uxtb	r2, r3
 800789a:	8979      	ldrh	r1, [r7, #10]
 800789c:	2300      	movs	r3, #0
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fdc1 	bl	800842c <I2C_TransferConfig>
 80078aa:	e00f      	b.n	80078cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	8979      	ldrh	r1, [r7, #10]
 80078be:	2300      	movs	r3, #0
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fdb0 	bl	800842c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d19e      	bne.n	8007814 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	6a39      	ldr	r1, [r7, #32]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fc98 	bl	8008210 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e01a      	b.n	8007920 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2220      	movs	r2, #32
 80078f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6859      	ldr	r1, [r3, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <HAL_I2C_Master_Transmit+0x1e4>)
 80078fe:	400b      	ands	r3, r1
 8007900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e000      	b.n	8007920 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800791e:	2302      	movs	r3, #2
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	80002000 	.word	0x80002000
 800792c:	fe00e800 	.word	0xfe00e800

08007930 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	607a      	str	r2, [r7, #4]
 800793a:	461a      	mov	r2, r3
 800793c:	460b      	mov	r3, r1
 800793e:	817b      	strh	r3, [r7, #10]
 8007940:	4613      	mov	r3, r2
 8007942:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b20      	cmp	r3, #32
 800794e:	f040 80db 	bne.w	8007b08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_I2C_Master_Receive+0x30>
 800795c:	2302      	movs	r3, #2
 800795e:	e0d4      	b.n	8007b0a <HAL_I2C_Master_Receive+0x1da>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007968:	f7fe ff38 	bl	80067dc <HAL_GetTick>
 800796c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	2319      	movs	r3, #25
 8007974:	2201      	movs	r2, #1
 8007976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fbc8 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e0bf      	b.n	8007b0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2222      	movs	r2, #34	; 0x22
 800798e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2210      	movs	r2, #16
 8007996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	893a      	ldrh	r2, [r7, #8]
 80079aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2bff      	cmp	r3, #255	; 0xff
 80079ba:	d90e      	bls.n	80079da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	22ff      	movs	r2, #255	; 0xff
 80079c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	8979      	ldrh	r1, [r7, #10]
 80079ca:	4b52      	ldr	r3, [pc, #328]	; (8007b14 <HAL_I2C_Master_Receive+0x1e4>)
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 fd2a 	bl	800842c <I2C_TransferConfig>
 80079d8:	e06d      	b.n	8007ab6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	8979      	ldrh	r1, [r7, #10]
 80079ec:	4b49      	ldr	r3, [pc, #292]	; (8007b14 <HAL_I2C_Master_Receive+0x1e4>)
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fd19 	bl	800842c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80079fa:	e05c      	b.n	8007ab6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	6a39      	ldr	r1, [r7, #32]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fc41 	bl	8008288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e07c      	b.n	8007b0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d034      	beq.n	8007ab6 <HAL_I2C_Master_Receive+0x186>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d130      	bne.n	8007ab6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2180      	movs	r1, #128	; 0x80
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fb56 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e04d      	b.n	8007b0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2bff      	cmp	r3, #255	; 0xff
 8007a76:	d90e      	bls.n	8007a96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	22ff      	movs	r2, #255	; 0xff
 8007a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	8979      	ldrh	r1, [r7, #10]
 8007a86:	2300      	movs	r3, #0
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fccc 	bl	800842c <I2C_TransferConfig>
 8007a94:	e00f      	b.n	8007ab6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	8979      	ldrh	r1, [r7, #10]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fcbb 	bl	800842c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d19d      	bne.n	80079fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	6a39      	ldr	r1, [r7, #32]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fba3 	bl	8008210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e01a      	b.n	8007b0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6859      	ldr	r1, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <HAL_I2C_Master_Receive+0x1e8>)
 8007ae8:	400b      	ands	r3, r1
 8007aea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	e000      	b.n	8007b0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007b08:	2302      	movs	r3, #2
  }
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	80002400 	.word	0x80002400
 8007b18:	fe00e800 	.word	0xfe00e800

08007b1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	817b      	strh	r3, [r7, #10]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	813b      	strh	r3, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	f040 80f9 	bne.w	8007d36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_I2C_Mem_Write+0x34>
 8007b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e0ed      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_I2C_Mem_Write+0x4e>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e0e6      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b72:	f7fe fe33 	bl	80067dc <HAL_GetTick>
 8007b76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	2319      	movs	r3, #25
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fac3 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0d1      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2221      	movs	r2, #33	; 0x21
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2240      	movs	r2, #64	; 0x40
 8007ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a3a      	ldr	r2, [r7, #32]
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bbc:	88f8      	ldrh	r0, [r7, #6]
 8007bbe:	893a      	ldrh	r2, [r7, #8]
 8007bc0:	8979      	ldrh	r1, [r7, #10]
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	4603      	mov	r3, r0
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f9d3 	bl	8007f78 <I2C_RequestMemoryWrite>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e0a9      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2bff      	cmp	r3, #255	; 0xff
 8007bec:	d90e      	bls.n	8007c0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	22ff      	movs	r2, #255	; 0xff
 8007bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	8979      	ldrh	r1, [r7, #10]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fc11 	bl	800842c <I2C_TransferConfig>
 8007c0a:	e00f      	b.n	8007c2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	8979      	ldrh	r1, [r7, #10]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fc00 	bl	800842c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 faad 	bl	8008190 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e07b      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	781a      	ldrb	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d034      	beq.n	8007ce4 <HAL_I2C_Mem_Write+0x1c8>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d130      	bne.n	8007ce4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2180      	movs	r1, #128	; 0x80
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fa3f 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e04d      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2bff      	cmp	r3, #255	; 0xff
 8007ca4:	d90e      	bls.n	8007cc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	22ff      	movs	r2, #255	; 0xff
 8007caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	8979      	ldrh	r1, [r7, #10]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fbb5 	bl	800842c <I2C_TransferConfig>
 8007cc2:	e00f      	b.n	8007ce4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	8979      	ldrh	r1, [r7, #10]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fba4 	bl	800842c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d19e      	bne.n	8007c2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa8c 	bl	8008210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e01a      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2220      	movs	r2, #32
 8007d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6859      	ldr	r1, [r3, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <HAL_I2C_Mem_Write+0x224>)
 8007d16:	400b      	ands	r3, r1
 8007d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	e000      	b.n	8007d38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007d36:	2302      	movs	r3, #2
  }
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	fe00e800 	.word	0xfe00e800

08007d44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	461a      	mov	r2, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	817b      	strh	r3, [r7, #10]
 8007d56:	460b      	mov	r3, r1
 8007d58:	813b      	strh	r3, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	f040 80fd 	bne.w	8007f66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <HAL_I2C_Mem_Read+0x34>
 8007d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d105      	bne.n	8007d84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0f1      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_I2C_Mem_Read+0x4e>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e0ea      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d9a:	f7fe fd1f 	bl	80067dc <HAL_GetTick>
 8007d9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2319      	movs	r3, #25
 8007da6:	2201      	movs	r2, #1
 8007da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f9af 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e0d5      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2222      	movs	r2, #34	; 0x22
 8007dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2240      	movs	r2, #64	; 0x40
 8007dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a3a      	ldr	r2, [r7, #32]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007de4:	88f8      	ldrh	r0, [r7, #6]
 8007de6:	893a      	ldrh	r2, [r7, #8]
 8007de8:	8979      	ldrh	r1, [r7, #10]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4603      	mov	r3, r0
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f913 	bl	8008020 <I2C_RequestMemoryRead>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e0ad      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d90e      	bls.n	8007e34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	8979      	ldrh	r1, [r7, #10]
 8007e24:	4b52      	ldr	r3, [pc, #328]	; (8007f70 <HAL_I2C_Mem_Read+0x22c>)
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fafd 	bl	800842c <I2C_TransferConfig>
 8007e32:	e00f      	b.n	8007e54 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	8979      	ldrh	r1, [r7, #10]
 8007e46:	4b4a      	ldr	r3, [pc, #296]	; (8007f70 <HAL_I2C_Mem_Read+0x22c>)
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 faec 	bl	800842c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f956 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e07c      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d034      	beq.n	8007f14 <HAL_I2C_Mem_Read+0x1d0>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d130      	bne.n	8007f14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 f927 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e04d      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2bff      	cmp	r3, #255	; 0xff
 8007ed4:	d90e      	bls.n	8007ef4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	22ff      	movs	r2, #255	; 0xff
 8007eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	8979      	ldrh	r1, [r7, #10]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fa9d 	bl	800842c <I2C_TransferConfig>
 8007ef2:	e00f      	b.n	8007f14 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	8979      	ldrh	r1, [r7, #10]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fa8c 	bl	800842c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d19a      	bne.n	8007e54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f974 	bl	8008210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e01a      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2220      	movs	r2, #32
 8007f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6859      	ldr	r1, [r3, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <HAL_I2C_Mem_Read+0x230>)
 8007f46:	400b      	ands	r3, r1
 8007f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e000      	b.n	8007f68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007f66:	2302      	movs	r3, #2
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	80002400 	.word	0x80002400
 8007f74:	fe00e800 	.word	0xfe00e800

08007f78 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	817b      	strh	r3, [r7, #10]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	813b      	strh	r3, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	8979      	ldrh	r1, [r7, #10]
 8007f98:	4b20      	ldr	r3, [pc, #128]	; (800801c <I2C_RequestMemoryWrite+0xa4>)
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fa43 	bl	800842c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fa6:	69fa      	ldr	r2, [r7, #28]
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f8f0 	bl	8008190 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e02c      	b.n	8008014 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d105      	bne.n	8007fcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fc0:	893b      	ldrh	r3, [r7, #8]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8007fca:	e015      	b.n	8007ff8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007fcc:	893b      	ldrh	r3, [r7, #8]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	69b9      	ldr	r1, [r7, #24]
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f8d6 	bl	8008190 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e012      	b.n	8008014 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fee:	893b      	ldrh	r3, [r7, #8]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2180      	movs	r1, #128	; 0x80
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 f884 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	80002000 	.word	0x80002000

08008020 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	4608      	mov	r0, r1
 800802a:	4611      	mov	r1, r2
 800802c:	461a      	mov	r2, r3
 800802e:	4603      	mov	r3, r0
 8008030:	817b      	strh	r3, [r7, #10]
 8008032:	460b      	mov	r3, r1
 8008034:	813b      	strh	r3, [r7, #8]
 8008036:	4613      	mov	r3, r2
 8008038:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	b2da      	uxtb	r2, r3
 800803e:	8979      	ldrh	r1, [r7, #10]
 8008040:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <I2C_RequestMemoryRead+0xa4>)
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	2300      	movs	r3, #0
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 f9f0 	bl	800842c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	69b9      	ldr	r1, [r7, #24]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f89d 	bl	8008190 <I2C_WaitOnTXISFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e02c      	b.n	80080ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d105      	bne.n	8008072 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008066:	893b      	ldrh	r3, [r7, #8]
 8008068:	b2da      	uxtb	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	629a      	str	r2, [r3, #40]	; 0x28
 8008070:	e015      	b.n	800809e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008072:	893b      	ldrh	r3, [r7, #8]
 8008074:	0a1b      	lsrs	r3, r3, #8
 8008076:	b29b      	uxth	r3, r3
 8008078:	b2da      	uxtb	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	69b9      	ldr	r1, [r7, #24]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f883 	bl	8008190 <I2C_WaitOnTXISFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e012      	b.n	80080ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008094:	893b      	ldrh	r3, [r7, #8]
 8008096:	b2da      	uxtb	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2200      	movs	r2, #0
 80080a6:	2140      	movs	r1, #64	; 0x40
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f831 	bl	8008110 <I2C_WaitOnFlagUntilTimeout>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	80002000 	.word	0x80002000

080080c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d103      	bne.n	80080e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2200      	movs	r2, #0
 80080e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d007      	beq.n	8008104 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	619a      	str	r2, [r3, #24]
  }
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	4613      	mov	r3, r2
 800811e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008120:	e022      	b.n	8008168 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d01e      	beq.n	8008168 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812a:	f7fe fb57 	bl	80067dc <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d302      	bcc.n	8008140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d113      	bne.n	8008168 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008144:	f043 0220 	orr.w	r2, r3, #32
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2220      	movs	r2, #32
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e00f      	b.n	8008188 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4013      	ands	r3, r2
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	429a      	cmp	r2, r3
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	429a      	cmp	r2, r3
 8008184:	d0cd      	beq.n	8008122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800819c:	e02c      	b.n	80081f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	68b9      	ldr	r1, [r7, #8]
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f8dc 	bl	8008360 <I2C_IsAcknowledgeFailed>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e02a      	b.n	8008208 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b8:	d01e      	beq.n	80081f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ba:	f7fe fb0f 	bl	80067dc <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d302      	bcc.n	80081d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d113      	bne.n	80081f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d4:	f043 0220 	orr.w	r2, r3, #32
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e007      	b.n	8008208 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b02      	cmp	r3, #2
 8008204:	d1cb      	bne.n	800819e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800821c:	e028      	b.n	8008270 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 f89c 	bl	8008360 <I2C_IsAcknowledgeFailed>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e026      	b.n	8008280 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fe fad3 	bl	80067dc <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d113      	bne.n	8008270 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824c:	f043 0220 	orr.w	r2, r3, #32
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e007      	b.n	8008280 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b20      	cmp	r3, #32
 800827c:	d1cf      	bne.n	800821e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008294:	e055      	b.n	8008342 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f860 	bl	8008360 <I2C_IsAcknowledgeFailed>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e053      	b.n	8008352 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d129      	bne.n	800830c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d105      	bne.n	80082d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e03f      	b.n	8008352 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2220      	movs	r2, #32
 80082d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6859      	ldr	r1, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4b1d      	ldr	r3, [pc, #116]	; (800835c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80082e6:	400b      	ands	r3, r1
 80082e8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e022      	b.n	8008352 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830c:	f7fe fa66 	bl	80067dc <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	429a      	cmp	r2, r3
 800831a:	d302      	bcc.n	8008322 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10f      	bne.n	8008342 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2220      	movs	r2, #32
 8008332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e007      	b.n	8008352 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b04      	cmp	r3, #4
 800834e:	d1a2      	bne.n	8008296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	fe00e800 	.word	0xfe00e800

08008360 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	2b10      	cmp	r3, #16
 8008378:	d151      	bne.n	800841e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800837a:	e022      	b.n	80083c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008382:	d01e      	beq.n	80083c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008384:	f7fe fa2a 	bl	80067dc <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	429a      	cmp	r2, r3
 8008392:	d302      	bcc.n	800839a <I2C_IsAcknowledgeFailed+0x3a>
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d113      	bne.n	80083c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839e:	f043 0220 	orr.w	r2, r3, #32
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e02e      	b.n	8008420 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d1d5      	bne.n	800837c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2210      	movs	r2, #16
 80083d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2220      	movs	r2, #32
 80083de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fe71 	bl	80080c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6859      	ldr	r1, [r3, #4]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <I2C_IsAcknowledgeFailed+0xc8>)
 80083f2:	400b      	ands	r3, r1
 80083f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	f043 0204 	orr.w	r2, r3, #4
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2220      	movs	r2, #32
 8008406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	fe00e800 	.word	0xfe00e800

0800842c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	817b      	strh	r3, [r7, #10]
 800843a:	4613      	mov	r3, r2
 800843c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	0d5b      	lsrs	r3, r3, #21
 8008448:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800844c:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <I2C_TransferConfig+0x58>)
 800844e:	430b      	orrs	r3, r1
 8008450:	43db      	mvns	r3, r3
 8008452:	ea02 0103 	and.w	r1, r2, r3
 8008456:	897b      	ldrh	r3, [r7, #10]
 8008458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800845c:	7a7b      	ldrb	r3, [r7, #9]
 800845e:	041b      	lsls	r3, r3, #16
 8008460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	431a      	orrs	r2, r3
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	431a      	orrs	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	03ff63ff 	.word	0x03ff63ff

08008488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b20      	cmp	r3, #32
 800849c:	d138      	bne.n	8008510 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d101      	bne.n	80084ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e032      	b.n	8008512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2224      	movs	r2, #36	; 0x24
 80084b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 0201 	bic.w	r2, r2, #1
 80084ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6819      	ldr	r1, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	e000      	b.n	8008512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008510:	2302      	movs	r3, #2
  }
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b20      	cmp	r3, #32
 8008532:	d139      	bne.n	80085a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800853e:	2302      	movs	r3, #2
 8008540:	e033      	b.n	80085aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2224      	movs	r2, #36	; 0x24
 800854e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0201 	bic.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008570:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e000      	b.n	80085aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085a8:	2302      	movs	r3, #2
  }
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
	...

080085b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085bc:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a04      	ldr	r2, [pc, #16]	; (80085d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085c6:	6013      	str	r3, [r2, #0]
}
 80085c8:	bf00      	nop
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40007000 	.word	0x40007000

080085d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80085e2:	4b23      	ldr	r3, [pc, #140]	; (8008670 <HAL_PWREx_EnableOverDrive+0x98>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	4a22      	ldr	r2, [pc, #136]	; (8008670 <HAL_PWREx_EnableOverDrive+0x98>)
 80085e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ec:	6413      	str	r3, [r2, #64]	; 0x40
 80085ee:	4b20      	ldr	r3, [pc, #128]	; (8008670 <HAL_PWREx_EnableOverDrive+0x98>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80085fa:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <HAL_PWREx_EnableOverDrive+0x9c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1d      	ldr	r2, [pc, #116]	; (8008674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008604:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008606:	f7fe f8e9 	bl	80067dc <HAL_GetTick>
 800860a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800860c:	e009      	b.n	8008622 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800860e:	f7fe f8e5 	bl	80067dc <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800861c:	d901      	bls.n	8008622 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e022      	b.n	8008668 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008622:	4b14      	ldr	r3, [pc, #80]	; (8008674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800862a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800862e:	d1ee      	bne.n	800860e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008630:	4b10      	ldr	r3, [pc, #64]	; (8008674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a0f      	ldr	r2, [pc, #60]	; (8008674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800863a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800863c:	f7fe f8ce 	bl	80067dc <HAL_GetTick>
 8008640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008642:	e009      	b.n	8008658 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008644:	f7fe f8ca 	bl	80067dc <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008652:	d901      	bls.n	8008658 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e007      	b.n	8008668 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008658:	4b06      	ldr	r3, [pc, #24]	; (8008674 <HAL_PWREx_EnableOverDrive+0x9c>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008664:	d1ee      	bne.n	8008644 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	40023800 	.word	0x40023800
 8008674:	40007000 	.word	0x40007000

08008678 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008680:	2300      	movs	r3, #0
 8008682:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e29b      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 8087 	beq.w	80087aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800869c:	4b96      	ldr	r3, [pc, #600]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f003 030c 	and.w	r3, r3, #12
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d00c      	beq.n	80086c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086a8:	4b93      	ldr	r3, [pc, #588]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f003 030c 	and.w	r3, r3, #12
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d112      	bne.n	80086da <HAL_RCC_OscConfig+0x62>
 80086b4:	4b90      	ldr	r3, [pc, #576]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086c0:	d10b      	bne.n	80086da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086c2:	4b8d      	ldr	r3, [pc, #564]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d06c      	beq.n	80087a8 <HAL_RCC_OscConfig+0x130>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d168      	bne.n	80087a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e275      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e2:	d106      	bne.n	80086f2 <HAL_RCC_OscConfig+0x7a>
 80086e4:	4b84      	ldr	r3, [pc, #528]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a83      	ldr	r2, [pc, #524]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80086ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	e02e      	b.n	8008750 <HAL_RCC_OscConfig+0xd8>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10c      	bne.n	8008714 <HAL_RCC_OscConfig+0x9c>
 80086fa:	4b7f      	ldr	r3, [pc, #508]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a7e      	ldr	r2, [pc, #504]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	4b7c      	ldr	r3, [pc, #496]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a7b      	ldr	r2, [pc, #492]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800870c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	e01d      	b.n	8008750 <HAL_RCC_OscConfig+0xd8>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800871c:	d10c      	bne.n	8008738 <HAL_RCC_OscConfig+0xc0>
 800871e:	4b76      	ldr	r3, [pc, #472]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a75      	ldr	r2, [pc, #468]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	4b73      	ldr	r3, [pc, #460]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a72      	ldr	r2, [pc, #456]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	e00b      	b.n	8008750 <HAL_RCC_OscConfig+0xd8>
 8008738:	4b6f      	ldr	r3, [pc, #444]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a6e      	ldr	r2, [pc, #440]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800873e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	4b6c      	ldr	r3, [pc, #432]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a6b      	ldr	r2, [pc, #428]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800874a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800874e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d013      	beq.n	8008780 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008758:	f7fe f840 	bl	80067dc <HAL_GetTick>
 800875c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800875e:	e008      	b.n	8008772 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008760:	f7fe f83c 	bl	80067dc <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b64      	cmp	r3, #100	; 0x64
 800876c:	d901      	bls.n	8008772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e229      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008772:	4b61      	ldr	r3, [pc, #388]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0f0      	beq.n	8008760 <HAL_RCC_OscConfig+0xe8>
 800877e:	e014      	b.n	80087aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008780:	f7fe f82c 	bl	80067dc <HAL_GetTick>
 8008784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008788:	f7fe f828 	bl	80067dc <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b64      	cmp	r3, #100	; 0x64
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e215      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800879a:	4b57      	ldr	r3, [pc, #348]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f0      	bne.n	8008788 <HAL_RCC_OscConfig+0x110>
 80087a6:	e000      	b.n	80087aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d069      	beq.n	800888a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087b6:	4b50      	ldr	r3, [pc, #320]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f003 030c 	and.w	r3, r3, #12
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087c2:	4b4d      	ldr	r3, [pc, #308]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f003 030c 	and.w	r3, r3, #12
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d11c      	bne.n	8008808 <HAL_RCC_OscConfig+0x190>
 80087ce:	4b4a      	ldr	r3, [pc, #296]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d116      	bne.n	8008808 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087da:	4b47      	ldr	r3, [pc, #284]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <HAL_RCC_OscConfig+0x17a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d001      	beq.n	80087f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e1e9      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f2:	4b41      	ldr	r3, [pc, #260]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	493d      	ldr	r1, [pc, #244]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008802:	4313      	orrs	r3, r2
 8008804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008806:	e040      	b.n	800888a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d023      	beq.n	8008858 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008810:	4b39      	ldr	r3, [pc, #228]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a38      	ldr	r2, [pc, #224]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fd ffde 	bl	80067dc <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008824:	f7fd ffda 	bl	80067dc <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e1c7      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008836:	4b30      	ldr	r3, [pc, #192]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008842:	4b2d      	ldr	r3, [pc, #180]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	4929      	ldr	r1, [pc, #164]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008852:	4313      	orrs	r3, r2
 8008854:	600b      	str	r3, [r1, #0]
 8008856:	e018      	b.n	800888a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008858:	4b27      	ldr	r3, [pc, #156]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a26      	ldr	r2, [pc, #152]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 800885e:	f023 0301 	bic.w	r3, r3, #1
 8008862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008864:	f7fd ffba 	bl	80067dc <HAL_GetTick>
 8008868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800886c:	f7fd ffb6 	bl	80067dc <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e1a3      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800887e:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f0      	bne.n	800886c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d038      	beq.n	8008908 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d019      	beq.n	80088d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800889e:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80088a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80088a4:	f043 0301 	orr.w	r3, r3, #1
 80088a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088aa:	f7fd ff97 	bl	80067dc <HAL_GetTick>
 80088ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088b2:	f7fd ff93 	bl	80067dc <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e180      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80088c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f0      	beq.n	80088b2 <HAL_RCC_OscConfig+0x23a>
 80088d0:	e01a      	b.n	8008908 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088d2:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80088d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d6:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <HAL_RCC_OscConfig+0x280>)
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088de:	f7fd ff7d 	bl	80067dc <HAL_GetTick>
 80088e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088e4:	e00a      	b.n	80088fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088e6:	f7fd ff79 	bl	80067dc <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d903      	bls.n	80088fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e166      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
 80088f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088fc:	4b92      	ldr	r3, [pc, #584]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80088fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1ee      	bne.n	80088e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80a4 	beq.w	8008a5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008916:	4b8c      	ldr	r3, [pc, #560]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10d      	bne.n	800893e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008922:	4b89      	ldr	r3, [pc, #548]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	4a88      	ldr	r2, [pc, #544]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800892c:	6413      	str	r3, [r2, #64]	; 0x40
 800892e:	4b86      	ldr	r3, [pc, #536]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800893a:	2301      	movs	r3, #1
 800893c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800893e:	4b83      	ldr	r3, [pc, #524]	; (8008b4c <HAL_RCC_OscConfig+0x4d4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008946:	2b00      	cmp	r3, #0
 8008948:	d118      	bne.n	800897c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800894a:	4b80      	ldr	r3, [pc, #512]	; (8008b4c <HAL_RCC_OscConfig+0x4d4>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a7f      	ldr	r2, [pc, #508]	; (8008b4c <HAL_RCC_OscConfig+0x4d4>)
 8008950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008956:	f7fd ff41 	bl	80067dc <HAL_GetTick>
 800895a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800895c:	e008      	b.n	8008970 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895e:	f7fd ff3d 	bl	80067dc <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b64      	cmp	r3, #100	; 0x64
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e12a      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008970:	4b76      	ldr	r3, [pc, #472]	; (8008b4c <HAL_RCC_OscConfig+0x4d4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0f0      	beq.n	800895e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d106      	bne.n	8008992 <HAL_RCC_OscConfig+0x31a>
 8008984:	4b70      	ldr	r3, [pc, #448]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008988:	4a6f      	ldr	r2, [pc, #444]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	6713      	str	r3, [r2, #112]	; 0x70
 8008990:	e02d      	b.n	80089ee <HAL_RCC_OscConfig+0x376>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10c      	bne.n	80089b4 <HAL_RCC_OscConfig+0x33c>
 800899a:	4b6b      	ldr	r3, [pc, #428]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	4a6a      	ldr	r2, [pc, #424]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	6713      	str	r3, [r2, #112]	; 0x70
 80089a6:	4b68      	ldr	r3, [pc, #416]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089aa:	4a67      	ldr	r2, [pc, #412]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089ac:	f023 0304 	bic.w	r3, r3, #4
 80089b0:	6713      	str	r3, [r2, #112]	; 0x70
 80089b2:	e01c      	b.n	80089ee <HAL_RCC_OscConfig+0x376>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d10c      	bne.n	80089d6 <HAL_RCC_OscConfig+0x35e>
 80089bc:	4b62      	ldr	r3, [pc, #392]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	4a61      	ldr	r2, [pc, #388]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089c2:	f043 0304 	orr.w	r3, r3, #4
 80089c6:	6713      	str	r3, [r2, #112]	; 0x70
 80089c8:	4b5f      	ldr	r3, [pc, #380]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089cc:	4a5e      	ldr	r2, [pc, #376]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	6713      	str	r3, [r2, #112]	; 0x70
 80089d4:	e00b      	b.n	80089ee <HAL_RCC_OscConfig+0x376>
 80089d6:	4b5c      	ldr	r3, [pc, #368]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089da:	4a5b      	ldr	r2, [pc, #364]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089dc:	f023 0301 	bic.w	r3, r3, #1
 80089e0:	6713      	str	r3, [r2, #112]	; 0x70
 80089e2:	4b59      	ldr	r3, [pc, #356]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e6:	4a58      	ldr	r2, [pc, #352]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 80089e8:	f023 0304 	bic.w	r3, r3, #4
 80089ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d015      	beq.n	8008a22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f6:	f7fd fef1 	bl	80067dc <HAL_GetTick>
 80089fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089fc:	e00a      	b.n	8008a14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089fe:	f7fd feed 	bl	80067dc <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d901      	bls.n	8008a14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e0d8      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a14:	4b4c      	ldr	r3, [pc, #304]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0ee      	beq.n	80089fe <HAL_RCC_OscConfig+0x386>
 8008a20:	e014      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a22:	f7fd fedb 	bl	80067dc <HAL_GetTick>
 8008a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a28:	e00a      	b.n	8008a40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a2a:	f7fd fed7 	bl	80067dc <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e0c2      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a40:	4b41      	ldr	r3, [pc, #260]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1ee      	bne.n	8008a2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d105      	bne.n	8008a5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a52:	4b3d      	ldr	r3, [pc, #244]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	4a3c      	ldr	r2, [pc, #240]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80ae 	beq.w	8008bc4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a68:	4b37      	ldr	r3, [pc, #220]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 030c 	and.w	r3, r3, #12
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d06d      	beq.n	8008b50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d14b      	bne.n	8008b14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a7c:	4b32      	ldr	r3, [pc, #200]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a31      	ldr	r2, [pc, #196]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fd fea8 	bl	80067dc <HAL_GetTick>
 8008a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a90:	f7fd fea4 	bl	80067dc <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e091      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa2:	4b29      	ldr	r3, [pc, #164]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f0      	bne.n	8008a90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69da      	ldr	r2, [r3, #28]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	019b      	lsls	r3, r3, #6
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	085b      	lsrs	r3, r3, #1
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	061b      	lsls	r3, r3, #24
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad8:	071b      	lsls	r3, r3, #28
 8008ada:	491b      	ldr	r1, [pc, #108]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ae0:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aec:	f7fd fe76 	bl	80067dc <HAL_GetTick>
 8008af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af4:	f7fd fe72 	bl	80067dc <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e05f      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b06:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCC_OscConfig+0x47c>
 8008b12:	e057      	b.n	8008bc4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b14:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a0b      	ldr	r2, [pc, #44]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b20:	f7fd fe5c 	bl	80067dc <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b28:	f7fd fe58 	bl	80067dc <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e045      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b3a:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <HAL_RCC_OscConfig+0x4d0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x4b0>
 8008b46:	e03d      	b.n	8008bc4 <HAL_RCC_OscConfig+0x54c>
 8008b48:	40023800 	.word	0x40023800
 8008b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008b50:	4b1f      	ldr	r3, [pc, #124]	; (8008bd0 <HAL_RCC_OscConfig+0x558>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d030      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d129      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d122      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b80:	4013      	ands	r3, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d119      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d10f      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	40023800 	.word	0x40023800

08008bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e0d0      	b.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bec:	4b6a      	ldr	r3, [pc, #424]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d910      	bls.n	8008c1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bfa:	4b67      	ldr	r3, [pc, #412]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f023 020f 	bic.w	r2, r3, #15
 8008c02:	4965      	ldr	r1, [pc, #404]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0a:	4b63      	ldr	r3, [pc, #396]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d001      	beq.n	8008c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e0b8      	b.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d020      	beq.n	8008c6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c34:	4b59      	ldr	r3, [pc, #356]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	4a58      	ldr	r2, [pc, #352]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c4c:	4b53      	ldr	r3, [pc, #332]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	4a52      	ldr	r2, [pc, #328]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c58:	4b50      	ldr	r3, [pc, #320]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	494d      	ldr	r1, [pc, #308]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d040      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d107      	bne.n	8008c8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c7e:	4b47      	ldr	r3, [pc, #284]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d115      	bne.n	8008cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e07f      	b.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d107      	bne.n	8008ca6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c96:	4b41      	ldr	r3, [pc, #260]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e073      	b.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca6:	4b3d      	ldr	r3, [pc, #244]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e06b      	b.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cb6:	4b39      	ldr	r3, [pc, #228]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f023 0203 	bic.w	r2, r3, #3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	4936      	ldr	r1, [pc, #216]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc8:	f7fd fd88 	bl	80067dc <HAL_GetTick>
 8008ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cce:	e00a      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cd0:	f7fd fd84 	bl	80067dc <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e053      	b.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce6:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 020c 	and.w	r2, r3, #12
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d1eb      	bne.n	8008cd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf8:	4b27      	ldr	r3, [pc, #156]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d210      	bcs.n	8008d28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f023 020f 	bic.w	r2, r3, #15
 8008d0e:	4922      	ldr	r1, [pc, #136]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d16:	4b20      	ldr	r3, [pc, #128]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d001      	beq.n	8008d28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e032      	b.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d008      	beq.n	8008d46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d34:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	4916      	ldr	r1, [pc, #88]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d009      	beq.n	8008d66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d52:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	490e      	ldr	r1, [pc, #56]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d66:	f000 f821 	bl	8008dac <HAL_RCC_GetSysClockFreq>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	091b      	lsrs	r3, r3, #4
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	490a      	ldr	r1, [pc, #40]	; (8008da0 <HAL_RCC_ClockConfig+0x1cc>)
 8008d78:	5ccb      	ldrb	r3, [r1, r3]
 8008d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7e:	4a09      	ldr	r2, [pc, #36]	; (8008da4 <HAL_RCC_ClockConfig+0x1d0>)
 8008d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <HAL_RCC_ClockConfig+0x1d4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fd fce4 	bl	8006754 <HAL_InitTick>

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	40023c00 	.word	0x40023c00
 8008d9c:	40023800 	.word	0x40023800
 8008da0:	0800ecdc 	.word	0x0800ecdc
 8008da4:	200000cc 	.word	0x200000cc
 8008da8:	200000d4 	.word	0x200000d4

08008dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dc4:	4b67      	ldr	r3, [pc, #412]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 030c 	and.w	r3, r3, #12
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d00d      	beq.n	8008dec <HAL_RCC_GetSysClockFreq+0x40>
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	f200 80bd 	bhi.w	8008f50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_RCC_GetSysClockFreq+0x34>
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d003      	beq.n	8008de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dde:	e0b7      	b.n	8008f50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008de0:	4b61      	ldr	r3, [pc, #388]	; (8008f68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008de2:	60bb      	str	r3, [r7, #8]
      break;
 8008de4:	e0b7      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008de6:	4b61      	ldr	r3, [pc, #388]	; (8008f6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008de8:	60bb      	str	r3, [r7, #8]
      break;
 8008dea:	e0b4      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dec:	4b5d      	ldr	r3, [pc, #372]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008df4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008df6:	4b5b      	ldr	r3, [pc, #364]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d04d      	beq.n	8008e9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e02:	4b58      	ldr	r3, [pc, #352]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	099b      	lsrs	r3, r3, #6
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f04f 0300 	mov.w	r3, #0
 8008e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008e12:	f04f 0100 	mov.w	r1, #0
 8008e16:	ea02 0800 	and.w	r8, r2, r0
 8008e1a:	ea03 0901 	and.w	r9, r3, r1
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f04f 0200 	mov.w	r2, #0
 8008e26:	f04f 0300 	mov.w	r3, #0
 8008e2a:	014b      	lsls	r3, r1, #5
 8008e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008e30:	0142      	lsls	r2, r0, #5
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	ebb0 0008 	subs.w	r0, r0, r8
 8008e3a:	eb61 0109 	sbc.w	r1, r1, r9
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	f04f 0300 	mov.w	r3, #0
 8008e46:	018b      	lsls	r3, r1, #6
 8008e48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008e4c:	0182      	lsls	r2, r0, #6
 8008e4e:	1a12      	subs	r2, r2, r0
 8008e50:	eb63 0301 	sbc.w	r3, r3, r1
 8008e54:	f04f 0000 	mov.w	r0, #0
 8008e58:	f04f 0100 	mov.w	r1, #0
 8008e5c:	00d9      	lsls	r1, r3, #3
 8008e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e62:	00d0      	lsls	r0, r2, #3
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	eb12 0208 	adds.w	r2, r2, r8
 8008e6c:	eb43 0309 	adc.w	r3, r3, r9
 8008e70:	f04f 0000 	mov.w	r0, #0
 8008e74:	f04f 0100 	mov.w	r1, #0
 8008e78:	0259      	lsls	r1, r3, #9
 8008e7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008e7e:	0250      	lsls	r0, r2, #9
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	4610      	mov	r0, r2
 8008e86:	4619      	mov	r1, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	f7f7 fa2e 	bl	80002f0 <__aeabi_uldivmod>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4613      	mov	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e04a      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e9e:	4b31      	ldr	r3, [pc, #196]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	099b      	lsrs	r3, r3, #6
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f04f 0300 	mov.w	r3, #0
 8008eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008eae:	f04f 0100 	mov.w	r1, #0
 8008eb2:	ea02 0400 	and.w	r4, r2, r0
 8008eb6:	ea03 0501 	and.w	r5, r3, r1
 8008eba:	4620      	mov	r0, r4
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	014b      	lsls	r3, r1, #5
 8008ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008ecc:	0142      	lsls	r2, r0, #5
 8008ece:	4610      	mov	r0, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	1b00      	subs	r0, r0, r4
 8008ed4:	eb61 0105 	sbc.w	r1, r1, r5
 8008ed8:	f04f 0200 	mov.w	r2, #0
 8008edc:	f04f 0300 	mov.w	r3, #0
 8008ee0:	018b      	lsls	r3, r1, #6
 8008ee2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008ee6:	0182      	lsls	r2, r0, #6
 8008ee8:	1a12      	subs	r2, r2, r0
 8008eea:	eb63 0301 	sbc.w	r3, r3, r1
 8008eee:	f04f 0000 	mov.w	r0, #0
 8008ef2:	f04f 0100 	mov.w	r1, #0
 8008ef6:	00d9      	lsls	r1, r3, #3
 8008ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008efc:	00d0      	lsls	r0, r2, #3
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	1912      	adds	r2, r2, r4
 8008f04:	eb45 0303 	adc.w	r3, r5, r3
 8008f08:	f04f 0000 	mov.w	r0, #0
 8008f0c:	f04f 0100 	mov.w	r1, #0
 8008f10:	0299      	lsls	r1, r3, #10
 8008f12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008f16:	0290      	lsls	r0, r2, #10
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4619      	mov	r1, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f04f 0300 	mov.w	r3, #0
 8008f28:	f7f7 f9e2 	bl	80002f0 <__aeabi_uldivmod>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4613      	mov	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	0c1b      	lsrs	r3, r3, #16
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	3301      	adds	r3, #1
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f4c:	60bb      	str	r3, [r7, #8]
      break;
 8008f4e:	e002      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008f52:	60bb      	str	r3, [r7, #8]
      break;
 8008f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f56:	68bb      	ldr	r3, [r7, #8]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008f62:	bf00      	nop
 8008f64:	40023800 	.word	0x40023800
 8008f68:	00f42400 	.word	0x00f42400
 8008f6c:	007a1200 	.word	0x007a1200

08008f70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f76:	681b      	ldr	r3, [r3, #0]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	200000cc 	.word	0x200000cc

08008f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f8c:	f7ff fff0 	bl	8008f70 <HAL_RCC_GetHCLKFreq>
 8008f90:	4602      	mov	r2, r0
 8008f92:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	0a9b      	lsrs	r3, r3, #10
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	4903      	ldr	r1, [pc, #12]	; (8008fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f9e:	5ccb      	ldrb	r3, [r1, r3]
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	0800ecec 	.word	0x0800ecec

08008fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fb4:	f7ff ffdc 	bl	8008f70 <HAL_RCC_GetHCLKFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	0b5b      	lsrs	r3, r3, #13
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	4903      	ldr	r1, [pc, #12]	; (8008fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	0800ecec 	.word	0x0800ecec

08008fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d012      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009000:	4b69      	ldr	r3, [pc, #420]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	4a68      	ldr	r2, [pc, #416]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009006:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800900a:	6093      	str	r3, [r2, #8]
 800900c:	4b66      	ldr	r3, [pc, #408]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009014:	4964      	ldr	r1, [pc, #400]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009016:	4313      	orrs	r3, r2
 8009018:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009022:	2301      	movs	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d017      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009032:	4b5d      	ldr	r3, [pc, #372]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009040:	4959      	ldr	r1, [pc, #356]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009042:	4313      	orrs	r3, r2
 8009044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009050:	d101      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800905e:	2301      	movs	r3, #1
 8009060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d017      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800906e:	4b4e      	ldr	r3, [pc, #312]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907c:	494a      	ldr	r1, [pc, #296]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800907e:	4313      	orrs	r3, r2
 8009080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800908c:	d101      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800908e:	2301      	movs	r3, #1
 8009090:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800909a:	2301      	movs	r3, #1
 800909c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80090aa:	2301      	movs	r3, #1
 80090ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 808b 	beq.w	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090bc:	4b3a      	ldr	r3, [pc, #232]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	4a39      	ldr	r2, [pc, #228]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090c6:	6413      	str	r3, [r2, #64]	; 0x40
 80090c8:	4b37      	ldr	r3, [pc, #220]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d0:	60bb      	str	r3, [r7, #8]
 80090d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090d4:	4b35      	ldr	r3, [pc, #212]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a34      	ldr	r2, [pc, #208]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e0:	f7fd fb7c 	bl	80067dc <HAL_GetTick>
 80090e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090e6:	e008      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090e8:	f7fd fb78 	bl	80067dc <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b64      	cmp	r3, #100	; 0x64
 80090f4:	d901      	bls.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e38f      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090fa:	4b2c      	ldr	r3, [pc, #176]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0f0      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009106:	4b28      	ldr	r3, [pc, #160]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d035      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	429a      	cmp	r2, r3
 8009122:	d02e      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009124:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800912c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800912e:	4b1e      	ldr	r3, [pc, #120]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009132:	4a1d      	ldr	r2, [pc, #116]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009138:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800913a:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800913c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913e:	4a1a      	ldr	r2, [pc, #104]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009144:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009146:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800914c:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800914e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b01      	cmp	r3, #1
 8009156:	d114      	bne.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009158:	f7fd fb40 	bl	80067dc <HAL_GetTick>
 800915c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800915e:	e00a      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009160:	f7fd fb3c 	bl	80067dc <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	f241 3288 	movw	r2, #5000	; 0x1388
 800916e:	4293      	cmp	r3, r2
 8009170:	d901      	bls.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e351      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009176:	4b0c      	ldr	r3, [pc, #48]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0ee      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800918a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800918e:	d111      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009190:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800919c:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800919e:	400b      	ands	r3, r1
 80091a0:	4901      	ldr	r1, [pc, #4]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	608b      	str	r3, [r1, #8]
 80091a6:	e00b      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80091a8:	40023800 	.word	0x40023800
 80091ac:	40007000 	.word	0x40007000
 80091b0:	0ffffcff 	.word	0x0ffffcff
 80091b4:	4bb3      	ldr	r3, [pc, #716]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	4ab2      	ldr	r2, [pc, #712]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091be:	6093      	str	r3, [r2, #8]
 80091c0:	4bb0      	ldr	r3, [pc, #704]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091cc:	49ad      	ldr	r1, [pc, #692]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d010      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091de:	4ba9      	ldr	r3, [pc, #676]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e4:	4aa7      	ldr	r2, [pc, #668]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80091ee:	4ba5      	ldr	r3, [pc, #660]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	49a2      	ldr	r1, [pc, #648]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800920c:	4b9d      	ldr	r3, [pc, #628]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800920e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009212:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800921a:	499a      	ldr	r1, [pc, #616]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800921c:	4313      	orrs	r3, r2
 800921e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800922e:	4b95      	ldr	r3, [pc, #596]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800923c:	4991      	ldr	r1, [pc, #580]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800923e:	4313      	orrs	r3, r2
 8009240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009250:	4b8c      	ldr	r3, [pc, #560]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925e:	4989      	ldr	r1, [pc, #548]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009272:	4b84      	ldr	r3, [pc, #528]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009278:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009280:	4980      	ldr	r1, [pc, #512]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009282:	4313      	orrs	r3, r2
 8009284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009294:	4b7b      	ldr	r3, [pc, #492]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800929a:	f023 0203 	bic.w	r2, r3, #3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a2:	4978      	ldr	r1, [pc, #480]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80092b6:	4b73      	ldr	r3, [pc, #460]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092bc:	f023 020c 	bic.w	r2, r3, #12
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c4:	496f      	ldr	r1, [pc, #444]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80092d8:	4b6a      	ldr	r3, [pc, #424]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e6:	4967      	ldr	r1, [pc, #412]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092fa:	4b62      	ldr	r3, [pc, #392]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009300:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009308:	495e      	ldr	r1, [pc, #376]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800930a:	4313      	orrs	r3, r2
 800930c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00a      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800931c:	4b59      	ldr	r3, [pc, #356]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800931e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	4956      	ldr	r1, [pc, #344]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800932c:	4313      	orrs	r3, r2
 800932e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00a      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800933e:	4b51      	ldr	r3, [pc, #324]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009344:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934c:	494d      	ldr	r1, [pc, #308]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800934e:	4313      	orrs	r3, r2
 8009350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00a      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009360:	4b48      	ldr	r3, [pc, #288]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009366:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936e:	4945      	ldr	r1, [pc, #276]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009370:	4313      	orrs	r3, r2
 8009372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00a      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009382:	4b40      	ldr	r3, [pc, #256]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009390:	493c      	ldr	r1, [pc, #240]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093a4:	4b37      	ldr	r3, [pc, #220]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093b2:	4934      	ldr	r1, [pc, #208]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d011      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80093c6:	4b2f      	ldr	r3, [pc, #188]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d4:	492b      	ldr	r1, [pc, #172]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093e4:	d101      	bne.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80093e6:	2301      	movs	r3, #1
 80093e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80093f6:	2301      	movs	r3, #1
 80093f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009406:	4b1f      	ldr	r3, [pc, #124]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009414:	491b      	ldr	r1, [pc, #108]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009416:	4313      	orrs	r3, r2
 8009418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009428:	4b16      	ldr	r3, [pc, #88]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800942a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009438:	4912      	ldr	r1, [pc, #72]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800943a:	4313      	orrs	r3, r2
 800943c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800944e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009452:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800945c:	4909      	ldr	r1, [pc, #36]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00f      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009470:	4b04      	ldr	r3, [pc, #16]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009476:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009480:	e002      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009482:	bf00      	nop
 8009484:	40023800 	.word	0x40023800
 8009488:	4986      	ldr	r1, [pc, #536]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800948a:	4313      	orrs	r3, r2
 800948c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800949c:	4b81      	ldr	r3, [pc, #516]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800949e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ac:	497d      	ldr	r1, [pc, #500]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d006      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80d6 	beq.w	8009674 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094c8:	4b76      	ldr	r3, [pc, #472]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a75      	ldr	r2, [pc, #468]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d4:	f7fd f982 	bl	80067dc <HAL_GetTick>
 80094d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094da:	e008      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80094dc:	f7fd f97e 	bl	80067dc <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b64      	cmp	r3, #100	; 0x64
 80094e8:	d901      	bls.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e195      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094ee:	4b6d      	ldr	r3, [pc, #436]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1f0      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d021      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950a:	2b00      	cmp	r3, #0
 800950c:	d11d      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800950e:	4b65      	ldr	r3, [pc, #404]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009514:	0c1b      	lsrs	r3, r3, #16
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800951c:	4b61      	ldr	r3, [pc, #388]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800951e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009522:	0e1b      	lsrs	r3, r3, #24
 8009524:	f003 030f 	and.w	r3, r3, #15
 8009528:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	019a      	lsls	r2, r3, #6
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	431a      	orrs	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	061b      	lsls	r3, r3, #24
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	071b      	lsls	r3, r3, #28
 8009542:	4958      	ldr	r1, [pc, #352]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800955e:	d00a      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009568:	2b00      	cmp	r3, #0
 800956a:	d02e      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009574:	d129      	bne.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009576:	4b4b      	ldr	r3, [pc, #300]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800957c:	0c1b      	lsrs	r3, r3, #16
 800957e:	f003 0303 	and.w	r3, r3, #3
 8009582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009584:	4b47      	ldr	r3, [pc, #284]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800958a:	0f1b      	lsrs	r3, r3, #28
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	019a      	lsls	r2, r3, #6
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	061b      	lsls	r3, r3, #24
 80095a4:	431a      	orrs	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	071b      	lsls	r3, r3, #28
 80095aa:	493e      	ldr	r1, [pc, #248]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80095b2:	4b3c      	ldr	r3, [pc, #240]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b8:	f023 021f 	bic.w	r2, r3, #31
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	3b01      	subs	r3, #1
 80095c2:	4938      	ldr	r1, [pc, #224]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01d      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80095d6:	4b33      	ldr	r3, [pc, #204]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095dc:	0e1b      	lsrs	r3, r3, #24
 80095de:	f003 030f 	and.w	r3, r3, #15
 80095e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80095e4:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ea:	0f1b      	lsrs	r3, r3, #28
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	019a      	lsls	r2, r3, #6
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	041b      	lsls	r3, r3, #16
 80095fe:	431a      	orrs	r2, r3
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	061b      	lsls	r3, r3, #24
 8009604:	431a      	orrs	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	071b      	lsls	r3, r3, #28
 800960a:	4926      	ldr	r1, [pc, #152]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800960c:	4313      	orrs	r3, r2
 800960e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d011      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	019a      	lsls	r2, r3, #6
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	061b      	lsls	r3, r3, #24
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	071b      	lsls	r3, r3, #28
 800963a:	491a      	ldr	r1, [pc, #104]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800963c:	4313      	orrs	r3, r2
 800963e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009642:	4b18      	ldr	r3, [pc, #96]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a17      	ldr	r2, [pc, #92]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800964c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800964e:	f7fd f8c5 	bl	80067dc <HAL_GetTick>
 8009652:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009654:	e008      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009656:	f7fd f8c1 	bl	80067dc <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b64      	cmp	r3, #100	; 0x64
 8009662:	d901      	bls.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e0d8      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009668:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0f0      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2b01      	cmp	r3, #1
 8009678:	f040 80ce 	bne.w	8009818 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a08      	ldr	r2, [pc, #32]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009688:	f7fd f8a8 	bl	80067dc <HAL_GetTick>
 800968c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800968e:	e00b      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009690:	f7fd f8a4 	bl	80067dc <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b64      	cmp	r3, #100	; 0x64
 800969c:	d904      	bls.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e0bb      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80096a2:	bf00      	nop
 80096a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80096a8:	4b5e      	ldr	r3, [pc, #376]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b4:	d0ec      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d02e      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d12a      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80096de:	4b51      	ldr	r3, [pc, #324]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e4:	0c1b      	lsrs	r3, r3, #16
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80096ec:	4b4d      	ldr	r3, [pc, #308]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f2:	0f1b      	lsrs	r3, r3, #28
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	019a      	lsls	r2, r3, #6
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	041b      	lsls	r3, r3, #16
 8009704:	431a      	orrs	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	061b      	lsls	r3, r3, #24
 800970c:	431a      	orrs	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	071b      	lsls	r3, r3, #28
 8009712:	4944      	ldr	r1, [pc, #272]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009714:	4313      	orrs	r3, r2
 8009716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800971a:	4b42      	ldr	r3, [pc, #264]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800971c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009720:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009728:	3b01      	subs	r3, #1
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	493d      	ldr	r1, [pc, #244]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800972e:	4313      	orrs	r3, r2
 8009730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d022      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009748:	d11d      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800974a:	4b36      	ldr	r3, [pc, #216]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800974c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009750:	0e1b      	lsrs	r3, r3, #24
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009758:	4b32      	ldr	r3, [pc, #200]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800975a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975e:	0f1b      	lsrs	r3, r3, #28
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	019a      	lsls	r2, r3, #6
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	041b      	lsls	r3, r3, #16
 8009772:	431a      	orrs	r2, r3
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	061b      	lsls	r3, r3, #24
 8009778:	431a      	orrs	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	071b      	lsls	r3, r3, #28
 800977e:	4929      	ldr	r1, [pc, #164]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009780:	4313      	orrs	r3, r2
 8009782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d028      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009792:	4b24      	ldr	r3, [pc, #144]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009798:	0e1b      	lsrs	r3, r3, #24
 800979a:	f003 030f 	and.w	r3, r3, #15
 800979e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80097a0:	4b20      	ldr	r3, [pc, #128]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a6:	0c1b      	lsrs	r3, r3, #16
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	019a      	lsls	r2, r3, #6
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	431a      	orrs	r2, r3
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	061b      	lsls	r3, r3, #24
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	071b      	lsls	r3, r3, #28
 80097c6:	4917      	ldr	r1, [pc, #92]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097dc:	4911      	ldr	r1, [pc, #68]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a0e      	ldr	r2, [pc, #56]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097f0:	f7fc fff4 	bl	80067dc <HAL_GetTick>
 80097f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097f6:	e008      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80097f8:	f7fc fff0 	bl	80067dc <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	2b64      	cmp	r3, #100	; 0x64
 8009804:	d901      	bls.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e007      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009816:	d1ef      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	40023800 	.word	0x40023800

08009828 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e01c      	b.n	8009874 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	795b      	ldrb	r3, [r3, #5]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d105      	bne.n	8009850 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7fb fabc 	bl	8004dc8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0204 	orr.w	r2, r2, #4
 8009864:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e09d      	b.n	80099ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	2b00      	cmp	r3, #0
 8009894:	d108      	bne.n	80098a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800989e:	d009      	beq.n	80098b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	61da      	str	r2, [r3, #28]
 80098a6:	e005      	b.n	80098b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fb fad8 	bl	8004e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098f4:	d902      	bls.n	80098fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e002      	b.n	8009902 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009900:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800990a:	d007      	beq.n	800991c <HAL_SPI_Init+0xa0>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009914:	d002      	beq.n	800991c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800992c:	431a      	orrs	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	f003 0302 	and.w	r3, r3, #2
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	431a      	orrs	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009954:	431a      	orrs	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995e:	ea42 0103 	orr.w	r1, r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	0c1b      	lsrs	r3, r3, #16
 8009978:	f003 0204 	and.w	r2, r3, #4
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	f003 0310 	and.w	r3, r3, #16
 8009984:	431a      	orrs	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	f003 0308 	and.w	r3, r3, #8
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009998:	ea42 0103 	orr.w	r1, r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	69da      	ldr	r2, [r3, #28]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b088      	sub	sp, #32
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	603b      	str	r3, [r7, #0]
 80099de:	4613      	mov	r3, r2
 80099e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_SPI_Transmit+0x22>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e158      	b.n	8009ca6 <HAL_SPI_Transmit+0x2d4>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099fc:	f7fc feee 	bl	80067dc <HAL_GetTick>
 8009a00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d002      	beq.n	8009a18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a12:	2302      	movs	r3, #2
 8009a14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a16:	e13d      	b.n	8009c94 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <HAL_SPI_Transmit+0x52>
 8009a1e:	88fb      	ldrh	r3, [r7, #6]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a28:	e134      	b.n	8009c94 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	88fa      	ldrh	r2, [r7, #6]
 8009a42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	88fa      	ldrh	r2, [r7, #6]
 8009a48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a74:	d10f      	bne.n	8009a96 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa0:	2b40      	cmp	r3, #64	; 0x40
 8009aa2:	d007      	beq.n	8009ab4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ab2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009abc:	d94b      	bls.n	8009b56 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <HAL_SPI_Transmit+0xfa>
 8009ac6:	8afb      	ldrh	r3, [r7, #22]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d13e      	bne.n	8009b4a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	881a      	ldrh	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	1c9a      	adds	r2, r3, #2
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009af0:	e02b      	b.n	8009b4a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d112      	bne.n	8009b26 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b04:	881a      	ldrh	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	1c9a      	adds	r2, r3, #2
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b24:	e011      	b.n	8009b4a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b26:	f7fc fe59 	bl	80067dc <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d803      	bhi.n	8009b3e <HAL_SPI_Transmit+0x16c>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3c:	d102      	bne.n	8009b44 <HAL_SPI_Transmit+0x172>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b48:	e0a4      	b.n	8009c94 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1ce      	bne.n	8009af2 <HAL_SPI_Transmit+0x120>
 8009b54:	e07c      	b.n	8009c50 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d002      	beq.n	8009b64 <HAL_SPI_Transmit+0x192>
 8009b5e:	8afb      	ldrh	r3, [r7, #22]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d170      	bne.n	8009c46 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d912      	bls.n	8009b94 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	881a      	ldrh	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	1c9a      	adds	r2, r3, #2
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	3b02      	subs	r3, #2
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b92:	e058      	b.n	8009c46 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009bba:	e044      	b.n	8009c46 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d12b      	bne.n	8009c22 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d912      	bls.n	8009bfa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	881a      	ldrh	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	1c9a      	adds	r2, r3, #2
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3b02      	subs	r3, #2
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bf8:	e025      	b.n	8009c46 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	330c      	adds	r3, #12
 8009c04:	7812      	ldrb	r2, [r2, #0]
 8009c06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c20:	e011      	b.n	8009c46 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c22:	f7fc fddb 	bl	80067dc <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d803      	bhi.n	8009c3a <HAL_SPI_Transmit+0x268>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c38:	d102      	bne.n	8009c40 <HAL_SPI_Transmit+0x26e>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c44:	e026      	b.n	8009c94 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1b5      	bne.n	8009bbc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c50:	69ba      	ldr	r2, [r7, #24]
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 f945 	bl	8009ee4 <SPI_EndRxTxTransaction>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2220      	movs	r2, #32
 8009c64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c6e:	2300      	movs	r3, #0
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	613b      	str	r3, [r7, #16]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	77fb      	strb	r3, [r7, #31]
 8009c90:	e000      	b.n	8009c94 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009c92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009cc0:	f7fc fd8c 	bl	80067dc <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	1a9b      	subs	r3, r3, r2
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	4413      	add	r3, r2
 8009cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009cd0:	f7fc fd84 	bl	80067dc <HAL_GetTick>
 8009cd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009cd6:	4b39      	ldr	r3, [pc, #228]	; (8009dbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	015b      	lsls	r3, r3, #5
 8009cdc:	0d1b      	lsrs	r3, r3, #20
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	fb02 f303 	mul.w	r3, r2, r3
 8009ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ce6:	e054      	b.n	8009d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d050      	beq.n	8009d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009cf0:	f7fc fd74 	bl	80067dc <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d902      	bls.n	8009d06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d13d      	bne.n	8009d82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d1e:	d111      	bne.n	8009d44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d28:	d004      	beq.n	8009d34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d32:	d107      	bne.n	8009d44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d4c:	d10f      	bne.n	8009d6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e017      	b.n	8009db2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	bf0c      	ite	eq
 8009da2:	2301      	moveq	r3, #1
 8009da4:	2300      	movne	r3, #0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	461a      	mov	r2, r3
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d19b      	bne.n	8009ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3720      	adds	r7, #32
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	200000cc 	.word	0x200000cc

08009dc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009dce:	f7fc fd05 	bl	80067dc <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	1a9b      	subs	r3, r3, r2
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	4413      	add	r3, r2
 8009ddc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009dde:	f7fc fcfd 	bl	80067dc <HAL_GetTick>
 8009de2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009de4:	4b3e      	ldr	r3, [pc, #248]	; (8009ee0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	00da      	lsls	r2, r3, #3
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	0d1b      	lsrs	r3, r3, #20
 8009df4:	69fa      	ldr	r2, [r7, #28]
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8009dfc:	e062      	b.n	8009ec4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009e04:	d109      	bne.n	8009e1a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d106      	bne.n	8009e1a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	330c      	adds	r3, #12
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8009e18:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e20:	d050      	beq.n	8009ec4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e22:	f7fc fcdb 	bl	80067dc <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	69fa      	ldr	r2, [r7, #28]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d902      	bls.n	8009e38 <SPI_WaitFifoStateUntilTimeout+0x78>
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d13d      	bne.n	8009eb4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e50:	d111      	bne.n	8009e76 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e5a:	d004      	beq.n	8009e66 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e64:	d107      	bne.n	8009e76 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e7e:	d10f      	bne.n	8009ea0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e010      	b.n	8009ed6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d194      	bne.n	8009dfe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3720      	adds	r7, #32
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	200000cc 	.word	0x200000cc

08009ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff ff5f 	bl	8009dc0 <SPI_WaitFifoStateUntilTimeout>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d007      	beq.n	8009f18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f0c:	f043 0220 	orr.w	r2, r3, #32
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e027      	b.n	8009f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2180      	movs	r1, #128	; 0x80
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f7ff fec4 	bl	8009cb0 <SPI_WaitFlagStateUntilTimeout>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d007      	beq.n	8009f3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f32:	f043 0220 	orr.w	r2, r3, #32
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e014      	b.n	8009f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff ff38 	bl	8009dc0 <SPI_WaitFifoStateUntilTimeout>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f5a:	f043 0220 	orr.w	r2, r3, #32
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e000      	b.n	8009f68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e049      	b.n	800a016 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fb fa9c 	bl	80054d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f000 fdb2 	bl	800ab18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b01      	cmp	r3, #1
 800a032:	d001      	beq.n	800a038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e054      	b.n	800a0e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f042 0201 	orr.w	r2, r2, #1
 800a04e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a26      	ldr	r2, [pc, #152]	; (800a0f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d022      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x80>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a062:	d01d      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x80>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a22      	ldr	r2, [pc, #136]	; (800a0f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d018      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x80>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a21      	ldr	r2, [pc, #132]	; (800a0f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d013      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x80>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a1f      	ldr	r2, [pc, #124]	; (800a0fc <HAL_TIM_Base_Start_IT+0xdc>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d00e      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x80>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a1e      	ldr	r2, [pc, #120]	; (800a100 <HAL_TIM_Base_Start_IT+0xe0>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d009      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x80>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a1c      	ldr	r2, [pc, #112]	; (800a104 <HAL_TIM_Base_Start_IT+0xe4>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d004      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x80>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a1b      	ldr	r2, [pc, #108]	; (800a108 <HAL_TIM_Base_Start_IT+0xe8>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d115      	bne.n	800a0cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689a      	ldr	r2, [r3, #8]
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <HAL_TIM_Base_Start_IT+0xec>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b06      	cmp	r3, #6
 800a0b0:	d015      	beq.n	800a0de <HAL_TIM_Base_Start_IT+0xbe>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0b8:	d011      	beq.n	800a0de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0201 	orr.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ca:	e008      	b.n	800a0de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0201 	orr.w	r2, r2, #1
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	e000      	b.n	800a0e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40010000 	.word	0x40010000
 800a0f4:	40000400 	.word	0x40000400
 800a0f8:	40000800 	.word	0x40000800
 800a0fc:	40000c00 	.word	0x40000c00
 800a100:	40010400 	.word	0x40010400
 800a104:	40014000 	.word	0x40014000
 800a108:	40001800 	.word	0x40001800
 800a10c:	00010007 	.word	0x00010007

0800a110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e049      	b.n	800a1b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f841 	bl	800a1be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2202      	movs	r2, #2
 800a140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	f000 fce2 	bl	800ab18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
	...

0800a1d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d109      	bne.n	800a1f8 <HAL_TIM_PWM_Start+0x24>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	bf14      	ite	ne
 800a1f0:	2301      	movne	r3, #1
 800a1f2:	2300      	moveq	r3, #0
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	e03c      	b.n	800a272 <HAL_TIM_PWM_Start+0x9e>
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	d109      	bne.n	800a212 <HAL_TIM_PWM_Start+0x3e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b01      	cmp	r3, #1
 800a208:	bf14      	ite	ne
 800a20a:	2301      	movne	r3, #1
 800a20c:	2300      	moveq	r3, #0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	e02f      	b.n	800a272 <HAL_TIM_PWM_Start+0x9e>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b08      	cmp	r3, #8
 800a216:	d109      	bne.n	800a22c <HAL_TIM_PWM_Start+0x58>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b01      	cmp	r3, #1
 800a222:	bf14      	ite	ne
 800a224:	2301      	movne	r3, #1
 800a226:	2300      	moveq	r3, #0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	e022      	b.n	800a272 <HAL_TIM_PWM_Start+0x9e>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2b0c      	cmp	r3, #12
 800a230:	d109      	bne.n	800a246 <HAL_TIM_PWM_Start+0x72>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	bf14      	ite	ne
 800a23e:	2301      	movne	r3, #1
 800a240:	2300      	moveq	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	e015      	b.n	800a272 <HAL_TIM_PWM_Start+0x9e>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b10      	cmp	r3, #16
 800a24a:	d109      	bne.n	800a260 <HAL_TIM_PWM_Start+0x8c>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b01      	cmp	r3, #1
 800a256:	bf14      	ite	ne
 800a258:	2301      	movne	r3, #1
 800a25a:	2300      	moveq	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	e008      	b.n	800a272 <HAL_TIM_PWM_Start+0x9e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b01      	cmp	r3, #1
 800a26a:	bf14      	ite	ne
 800a26c:	2301      	movne	r3, #1
 800a26e:	2300      	moveq	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e092      	b.n	800a3a0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d104      	bne.n	800a28a <HAL_TIM_PWM_Start+0xb6>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a288:	e023      	b.n	800a2d2 <HAL_TIM_PWM_Start+0xfe>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d104      	bne.n	800a29a <HAL_TIM_PWM_Start+0xc6>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a298:	e01b      	b.n	800a2d2 <HAL_TIM_PWM_Start+0xfe>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d104      	bne.n	800a2aa <HAL_TIM_PWM_Start+0xd6>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2a8:	e013      	b.n	800a2d2 <HAL_TIM_PWM_Start+0xfe>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b0c      	cmp	r3, #12
 800a2ae:	d104      	bne.n	800a2ba <HAL_TIM_PWM_Start+0xe6>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2b8:	e00b      	b.n	800a2d2 <HAL_TIM_PWM_Start+0xfe>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b10      	cmp	r3, #16
 800a2be:	d104      	bne.n	800a2ca <HAL_TIM_PWM_Start+0xf6>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2c8:	e003      	b.n	800a2d2 <HAL_TIM_PWM_Start+0xfe>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 ffb4 	bl	800b248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a30      	ldr	r2, [pc, #192]	; (800a3a8 <HAL_TIM_PWM_Start+0x1d4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d004      	beq.n	800a2f4 <HAL_TIM_PWM_Start+0x120>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a2f      	ldr	r2, [pc, #188]	; (800a3ac <HAL_TIM_PWM_Start+0x1d8>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d101      	bne.n	800a2f8 <HAL_TIM_PWM_Start+0x124>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e000      	b.n	800a2fa <HAL_TIM_PWM_Start+0x126>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d007      	beq.n	800a30e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a30c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a25      	ldr	r2, [pc, #148]	; (800a3a8 <HAL_TIM_PWM_Start+0x1d4>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d022      	beq.n	800a35e <HAL_TIM_PWM_Start+0x18a>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a320:	d01d      	beq.n	800a35e <HAL_TIM_PWM_Start+0x18a>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a22      	ldr	r2, [pc, #136]	; (800a3b0 <HAL_TIM_PWM_Start+0x1dc>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d018      	beq.n	800a35e <HAL_TIM_PWM_Start+0x18a>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <HAL_TIM_PWM_Start+0x1e0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d013      	beq.n	800a35e <HAL_TIM_PWM_Start+0x18a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a1f      	ldr	r2, [pc, #124]	; (800a3b8 <HAL_TIM_PWM_Start+0x1e4>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d00e      	beq.n	800a35e <HAL_TIM_PWM_Start+0x18a>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a19      	ldr	r2, [pc, #100]	; (800a3ac <HAL_TIM_PWM_Start+0x1d8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d009      	beq.n	800a35e <HAL_TIM_PWM_Start+0x18a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1b      	ldr	r2, [pc, #108]	; (800a3bc <HAL_TIM_PWM_Start+0x1e8>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d004      	beq.n	800a35e <HAL_TIM_PWM_Start+0x18a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a19      	ldr	r2, [pc, #100]	; (800a3c0 <HAL_TIM_PWM_Start+0x1ec>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d115      	bne.n	800a38a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	4b17      	ldr	r3, [pc, #92]	; (800a3c4 <HAL_TIM_PWM_Start+0x1f0>)
 800a366:	4013      	ands	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b06      	cmp	r3, #6
 800a36e:	d015      	beq.n	800a39c <HAL_TIM_PWM_Start+0x1c8>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a376:	d011      	beq.n	800a39c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f042 0201 	orr.w	r2, r2, #1
 800a386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a388:	e008      	b.n	800a39c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0201 	orr.w	r2, r2, #1
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	e000      	b.n	800a39e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	40010000 	.word	0x40010000
 800a3ac:	40010400 	.word	0x40010400
 800a3b0:	40000400 	.word	0x40000400
 800a3b4:	40000800 	.word	0x40000800
 800a3b8:	40000c00 	.word	0x40000c00
 800a3bc:	40014000 	.word	0x40014000
 800a3c0:	40001800 	.word	0x40001800
 800a3c4:	00010007 	.word	0x00010007

0800a3c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 ff34 	bl	800b248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a36      	ldr	r2, [pc, #216]	; (800a4c0 <HAL_TIM_PWM_Stop+0xf8>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d004      	beq.n	800a3f4 <HAL_TIM_PWM_Stop+0x2c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a35      	ldr	r2, [pc, #212]	; (800a4c4 <HAL_TIM_PWM_Stop+0xfc>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d101      	bne.n	800a3f8 <HAL_TIM_PWM_Stop+0x30>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e000      	b.n	800a3fa <HAL_TIM_PWM_Stop+0x32>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d017      	beq.n	800a42e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6a1a      	ldr	r2, [r3, #32]
 800a404:	f241 1311 	movw	r3, #4369	; 0x1111
 800a408:	4013      	ands	r3, r2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10f      	bne.n	800a42e <HAL_TIM_PWM_Stop+0x66>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6a1a      	ldr	r2, [r3, #32]
 800a414:	f240 4344 	movw	r3, #1092	; 0x444
 800a418:	4013      	ands	r3, r2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d107      	bne.n	800a42e <HAL_TIM_PWM_Stop+0x66>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a42c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6a1a      	ldr	r2, [r3, #32]
 800a434:	f241 1311 	movw	r3, #4369	; 0x1111
 800a438:	4013      	ands	r3, r2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10f      	bne.n	800a45e <HAL_TIM_PWM_Stop+0x96>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6a1a      	ldr	r2, [r3, #32]
 800a444:	f240 4344 	movw	r3, #1092	; 0x444
 800a448:	4013      	ands	r3, r2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d107      	bne.n	800a45e <HAL_TIM_PWM_Stop+0x96>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0201 	bic.w	r2, r2, #1
 800a45c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d104      	bne.n	800a46e <HAL_TIM_PWM_Stop+0xa6>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a46c:	e023      	b.n	800a4b6 <HAL_TIM_PWM_Stop+0xee>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b04      	cmp	r3, #4
 800a472:	d104      	bne.n	800a47e <HAL_TIM_PWM_Stop+0xb6>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a47c:	e01b      	b.n	800a4b6 <HAL_TIM_PWM_Stop+0xee>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b08      	cmp	r3, #8
 800a482:	d104      	bne.n	800a48e <HAL_TIM_PWM_Stop+0xc6>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a48c:	e013      	b.n	800a4b6 <HAL_TIM_PWM_Stop+0xee>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b0c      	cmp	r3, #12
 800a492:	d104      	bne.n	800a49e <HAL_TIM_PWM_Stop+0xd6>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a49c:	e00b      	b.n	800a4b6 <HAL_TIM_PWM_Stop+0xee>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	d104      	bne.n	800a4ae <HAL_TIM_PWM_Stop+0xe6>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4ac:	e003      	b.n	800a4b6 <HAL_TIM_PWM_Stop+0xee>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d122      	bne.n	800a524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d11b      	bne.n	800a524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f06f 0202 	mvn.w	r2, #2
 800a4f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	f003 0303 	and.w	r3, r3, #3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fae6 	bl	800aadc <HAL_TIM_IC_CaptureCallback>
 800a510:	e005      	b.n	800a51e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fad8 	bl	800aac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fae9 	bl	800aaf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	f003 0304 	and.w	r3, r3, #4
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d122      	bne.n	800a578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f003 0304 	and.w	r3, r3, #4
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d11b      	bne.n	800a578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f06f 0204 	mvn.w	r2, #4
 800a548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2202      	movs	r2, #2
 800a54e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fabc 	bl	800aadc <HAL_TIM_IC_CaptureCallback>
 800a564:	e005      	b.n	800a572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 faae 	bl	800aac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fabf 	bl	800aaf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	2b08      	cmp	r3, #8
 800a584:	d122      	bne.n	800a5cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	f003 0308 	and.w	r3, r3, #8
 800a590:	2b08      	cmp	r3, #8
 800a592:	d11b      	bne.n	800a5cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0208 	mvn.w	r2, #8
 800a59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fa92 	bl	800aadc <HAL_TIM_IC_CaptureCallback>
 800a5b8:	e005      	b.n	800a5c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fa84 	bl	800aac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fa95 	bl	800aaf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	f003 0310 	and.w	r3, r3, #16
 800a5d6:	2b10      	cmp	r3, #16
 800a5d8:	d122      	bne.n	800a620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	f003 0310 	and.w	r3, r3, #16
 800a5e4:	2b10      	cmp	r3, #16
 800a5e6:	d11b      	bne.n	800a620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f06f 0210 	mvn.w	r2, #16
 800a5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2208      	movs	r2, #8
 800a5f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fa68 	bl	800aadc <HAL_TIM_IC_CaptureCallback>
 800a60c:	e005      	b.n	800a61a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fa5a 	bl	800aac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fa6b 	bl	800aaf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d10e      	bne.n	800a64c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d107      	bne.n	800a64c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f06f 0201 	mvn.w	r2, #1
 800a644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fa34 	bl	800aab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a656:	2b80      	cmp	r3, #128	; 0x80
 800a658:	d10e      	bne.n	800a678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a664:	2b80      	cmp	r3, #128	; 0x80
 800a666:	d107      	bne.n	800a678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fea6 	bl	800b3c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a686:	d10e      	bne.n	800a6a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d107      	bne.n	800a6a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fe99 	bl	800b3d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b0:	2b40      	cmp	r3, #64	; 0x40
 800a6b2:	d10e      	bne.n	800a6d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6be:	2b40      	cmp	r3, #64	; 0x40
 800a6c0:	d107      	bne.n	800a6d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fa19 	bl	800ab04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	f003 0320 	and.w	r3, r3, #32
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d10e      	bne.n	800a6fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f003 0320 	and.w	r3, r3, #32
 800a6ea:	2b20      	cmp	r3, #32
 800a6ec:	d107      	bne.n	800a6fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f06f 0220 	mvn.w	r2, #32
 800a6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fe59 	bl	800b3b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d101      	bne.n	800a722 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a71e:	2302      	movs	r3, #2
 800a720:	e0fd      	b.n	800a91e <HAL_TIM_PWM_ConfigChannel+0x216>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b14      	cmp	r3, #20
 800a72e:	f200 80f0 	bhi.w	800a912 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a732:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a78d 	.word	0x0800a78d
 800a73c:	0800a913 	.word	0x0800a913
 800a740:	0800a913 	.word	0x0800a913
 800a744:	0800a913 	.word	0x0800a913
 800a748:	0800a7cd 	.word	0x0800a7cd
 800a74c:	0800a913 	.word	0x0800a913
 800a750:	0800a913 	.word	0x0800a913
 800a754:	0800a913 	.word	0x0800a913
 800a758:	0800a80f 	.word	0x0800a80f
 800a75c:	0800a913 	.word	0x0800a913
 800a760:	0800a913 	.word	0x0800a913
 800a764:	0800a913 	.word	0x0800a913
 800a768:	0800a84f 	.word	0x0800a84f
 800a76c:	0800a913 	.word	0x0800a913
 800a770:	0800a913 	.word	0x0800a913
 800a774:	0800a913 	.word	0x0800a913
 800a778:	0800a891 	.word	0x0800a891
 800a77c:	0800a913 	.word	0x0800a913
 800a780:	0800a913 	.word	0x0800a913
 800a784:	0800a913 	.word	0x0800a913
 800a788:	0800a8d1 	.word	0x0800a8d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fa60 	bl	800ac58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0208 	orr.w	r2, r2, #8
 800a7a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0204 	bic.w	r2, r2, #4
 800a7b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6999      	ldr	r1, [r3, #24]
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	691a      	ldr	r2, [r3, #16]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	619a      	str	r2, [r3, #24]
      break;
 800a7ca:	e0a3      	b.n	800a914 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68b9      	ldr	r1, [r7, #8]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 fab2 	bl	800ad3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699a      	ldr	r2, [r3, #24]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6999      	ldr	r1, [r3, #24]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	021a      	lsls	r2, r3, #8
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	619a      	str	r2, [r3, #24]
      break;
 800a80c:	e082      	b.n	800a914 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fb09 	bl	800ae2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69da      	ldr	r2, [r3, #28]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f042 0208 	orr.w	r2, r2, #8
 800a828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69da      	ldr	r2, [r3, #28]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 0204 	bic.w	r2, r2, #4
 800a838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	69d9      	ldr	r1, [r3, #28]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	61da      	str	r2, [r3, #28]
      break;
 800a84c:	e062      	b.n	800a914 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68b9      	ldr	r1, [r7, #8]
 800a854:	4618      	mov	r0, r3
 800a856:	f000 fb5f 	bl	800af18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69da      	ldr	r2, [r3, #28]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	69da      	ldr	r2, [r3, #28]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	69d9      	ldr	r1, [r3, #28]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	021a      	lsls	r2, r3, #8
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	61da      	str	r2, [r3, #28]
      break;
 800a88e:	e041      	b.n	800a914 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fb96 	bl	800afc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f042 0208 	orr.w	r2, r2, #8
 800a8aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0204 	bic.w	r2, r2, #4
 800a8ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	691a      	ldr	r2, [r3, #16]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8ce:	e021      	b.n	800a914 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 fbc8 	bl	800b06c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	021a      	lsls	r2, r3, #8
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a910:	e000      	b.n	800a914 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop

0800a928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d101      	bne.n	800a940 <HAL_TIM_ConfigClockSource+0x18>
 800a93c:	2302      	movs	r3, #2
 800a93e:	e0b3      	b.n	800aaa8 <HAL_TIM_ConfigClockSource+0x180>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4b55      	ldr	r3, [pc, #340]	; (800aab0 <HAL_TIM_ConfigClockSource+0x188>)
 800a95c:	4013      	ands	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a978:	d03e      	beq.n	800a9f8 <HAL_TIM_ConfigClockSource+0xd0>
 800a97a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a97e:	f200 8087 	bhi.w	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a986:	f000 8085 	beq.w	800aa94 <HAL_TIM_ConfigClockSource+0x16c>
 800a98a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a98e:	d87f      	bhi.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a990:	2b70      	cmp	r3, #112	; 0x70
 800a992:	d01a      	beq.n	800a9ca <HAL_TIM_ConfigClockSource+0xa2>
 800a994:	2b70      	cmp	r3, #112	; 0x70
 800a996:	d87b      	bhi.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a998:	2b60      	cmp	r3, #96	; 0x60
 800a99a:	d050      	beq.n	800aa3e <HAL_TIM_ConfigClockSource+0x116>
 800a99c:	2b60      	cmp	r3, #96	; 0x60
 800a99e:	d877      	bhi.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a9a0:	2b50      	cmp	r3, #80	; 0x50
 800a9a2:	d03c      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0xf6>
 800a9a4:	2b50      	cmp	r3, #80	; 0x50
 800a9a6:	d873      	bhi.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a9a8:	2b40      	cmp	r3, #64	; 0x40
 800a9aa:	d058      	beq.n	800aa5e <HAL_TIM_ConfigClockSource+0x136>
 800a9ac:	2b40      	cmp	r3, #64	; 0x40
 800a9ae:	d86f      	bhi.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a9b0:	2b30      	cmp	r3, #48	; 0x30
 800a9b2:	d064      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0x156>
 800a9b4:	2b30      	cmp	r3, #48	; 0x30
 800a9b6:	d86b      	bhi.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a9b8:	2b20      	cmp	r3, #32
 800a9ba:	d060      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0x156>
 800a9bc:	2b20      	cmp	r3, #32
 800a9be:	d867      	bhi.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d05c      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0x156>
 800a9c4:	2b10      	cmp	r3, #16
 800a9c6:	d05a      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a9c8:	e062      	b.n	800aa90 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6818      	ldr	r0, [r3, #0]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	6899      	ldr	r1, [r3, #8]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f000 fc15 	bl	800b208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	609a      	str	r2, [r3, #8]
      break;
 800a9f6:	e04e      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6818      	ldr	r0, [r3, #0]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	6899      	ldr	r1, [r3, #8]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f000 fbfe 	bl	800b208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa1a:	609a      	str	r2, [r3, #8]
      break;
 800aa1c:	e03b      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	6859      	ldr	r1, [r3, #4]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f000 fb72 	bl	800b114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2150      	movs	r1, #80	; 0x50
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fbcb 	bl	800b1d2 <TIM_ITRx_SetConfig>
      break;
 800aa3c:	e02b      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6818      	ldr	r0, [r3, #0]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	6859      	ldr	r1, [r3, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f000 fb91 	bl	800b172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2160      	movs	r1, #96	; 0x60
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fbbb 	bl	800b1d2 <TIM_ITRx_SetConfig>
      break;
 800aa5c:	e01b      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6859      	ldr	r1, [r3, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f000 fb52 	bl	800b114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2140      	movs	r1, #64	; 0x40
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fbab 	bl	800b1d2 <TIM_ITRx_SetConfig>
      break;
 800aa7c:	e00b      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f000 fba2 	bl	800b1d2 <TIM_ITRx_SetConfig>
        break;
 800aa8e:	e002      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aa90:	bf00      	nop
 800aa92:	e000      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aa94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	fffeff88 	.word	0xfffeff88

0800aab4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a40      	ldr	r2, [pc, #256]	; (800ac2c <TIM_Base_SetConfig+0x114>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d013      	beq.n	800ab58 <TIM_Base_SetConfig+0x40>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab36:	d00f      	beq.n	800ab58 <TIM_Base_SetConfig+0x40>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a3d      	ldr	r2, [pc, #244]	; (800ac30 <TIM_Base_SetConfig+0x118>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d00b      	beq.n	800ab58 <TIM_Base_SetConfig+0x40>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a3c      	ldr	r2, [pc, #240]	; (800ac34 <TIM_Base_SetConfig+0x11c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d007      	beq.n	800ab58 <TIM_Base_SetConfig+0x40>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a3b      	ldr	r2, [pc, #236]	; (800ac38 <TIM_Base_SetConfig+0x120>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d003      	beq.n	800ab58 <TIM_Base_SetConfig+0x40>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a3a      	ldr	r2, [pc, #232]	; (800ac3c <TIM_Base_SetConfig+0x124>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d108      	bne.n	800ab6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a2f      	ldr	r2, [pc, #188]	; (800ac2c <TIM_Base_SetConfig+0x114>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d02b      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab78:	d027      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a2c      	ldr	r2, [pc, #176]	; (800ac30 <TIM_Base_SetConfig+0x118>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d023      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a2b      	ldr	r2, [pc, #172]	; (800ac34 <TIM_Base_SetConfig+0x11c>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d01f      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a2a      	ldr	r2, [pc, #168]	; (800ac38 <TIM_Base_SetConfig+0x120>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d01b      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a29      	ldr	r2, [pc, #164]	; (800ac3c <TIM_Base_SetConfig+0x124>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d017      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a28      	ldr	r2, [pc, #160]	; (800ac40 <TIM_Base_SetConfig+0x128>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d013      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a27      	ldr	r2, [pc, #156]	; (800ac44 <TIM_Base_SetConfig+0x12c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00f      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a26      	ldr	r2, [pc, #152]	; (800ac48 <TIM_Base_SetConfig+0x130>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d00b      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a25      	ldr	r2, [pc, #148]	; (800ac4c <TIM_Base_SetConfig+0x134>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d007      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a24      	ldr	r2, [pc, #144]	; (800ac50 <TIM_Base_SetConfig+0x138>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d003      	beq.n	800abca <TIM_Base_SetConfig+0xb2>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a23      	ldr	r2, [pc, #140]	; (800ac54 <TIM_Base_SetConfig+0x13c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d108      	bne.n	800abdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a0a      	ldr	r2, [pc, #40]	; (800ac2c <TIM_Base_SetConfig+0x114>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d003      	beq.n	800ac10 <TIM_Base_SetConfig+0xf8>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a0c      	ldr	r2, [pc, #48]	; (800ac3c <TIM_Base_SetConfig+0x124>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d103      	bne.n	800ac18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	691a      	ldr	r2, [r3, #16]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	615a      	str	r2, [r3, #20]
}
 800ac1e:	bf00      	nop
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	40010000 	.word	0x40010000
 800ac30:	40000400 	.word	0x40000400
 800ac34:	40000800 	.word	0x40000800
 800ac38:	40000c00 	.word	0x40000c00
 800ac3c:	40010400 	.word	0x40010400
 800ac40:	40014000 	.word	0x40014000
 800ac44:	40014400 	.word	0x40014400
 800ac48:	40014800 	.word	0x40014800
 800ac4c:	40001800 	.word	0x40001800
 800ac50:	40001c00 	.word	0x40001c00
 800ac54:	40002000 	.word	0x40002000

0800ac58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	f023 0201 	bic.w	r2, r3, #1
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4b2b      	ldr	r3, [pc, #172]	; (800ad30 <TIM_OC1_SetConfig+0xd8>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0303 	bic.w	r3, r3, #3
 800ac8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f023 0302 	bic.w	r3, r3, #2
 800aca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a21      	ldr	r2, [pc, #132]	; (800ad34 <TIM_OC1_SetConfig+0xdc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_OC1_SetConfig+0x64>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a20      	ldr	r2, [pc, #128]	; (800ad38 <TIM_OC1_SetConfig+0xe0>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d10c      	bne.n	800acd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f023 0308 	bic.w	r3, r3, #8
 800acc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	4313      	orrs	r3, r2
 800accc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f023 0304 	bic.w	r3, r3, #4
 800acd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a16      	ldr	r2, [pc, #88]	; (800ad34 <TIM_OC1_SetConfig+0xdc>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d003      	beq.n	800ace6 <TIM_OC1_SetConfig+0x8e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <TIM_OC1_SetConfig+0xe0>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d111      	bne.n	800ad0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	621a      	str	r2, [r3, #32]
}
 800ad24:	bf00      	nop
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	fffeff8f 	.word	0xfffeff8f
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400

0800ad3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0210 	bic.w	r2, r3, #16
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4b2e      	ldr	r3, [pc, #184]	; (800ae20 <TIM_OC2_SetConfig+0xe4>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f023 0320 	bic.w	r3, r3, #32
 800ad86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a23      	ldr	r2, [pc, #140]	; (800ae24 <TIM_OC2_SetConfig+0xe8>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d003      	beq.n	800ada4 <TIM_OC2_SetConfig+0x68>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a22      	ldr	r2, [pc, #136]	; (800ae28 <TIM_OC2_SetConfig+0xec>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d10d      	bne.n	800adc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a18      	ldr	r2, [pc, #96]	; (800ae24 <TIM_OC2_SetConfig+0xe8>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d003      	beq.n	800add0 <TIM_OC2_SetConfig+0x94>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a17      	ldr	r2, [pc, #92]	; (800ae28 <TIM_OC2_SetConfig+0xec>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d113      	bne.n	800adf8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800add6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	4313      	orrs	r3, r2
 800adea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	621a      	str	r2, [r3, #32]
}
 800ae12:	bf00      	nop
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	feff8fff 	.word	0xfeff8fff
 800ae24:	40010000 	.word	0x40010000
 800ae28:	40010400 	.word	0x40010400

0800ae2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4b2d      	ldr	r3, [pc, #180]	; (800af0c <TIM_OC3_SetConfig+0xe0>)
 800ae58:	4013      	ands	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	021b      	lsls	r3, r3, #8
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a22      	ldr	r2, [pc, #136]	; (800af10 <TIM_OC3_SetConfig+0xe4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d003      	beq.n	800ae92 <TIM_OC3_SetConfig+0x66>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a21      	ldr	r2, [pc, #132]	; (800af14 <TIM_OC3_SetConfig+0xe8>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d10d      	bne.n	800aeae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aeac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a17      	ldr	r2, [pc, #92]	; (800af10 <TIM_OC3_SetConfig+0xe4>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d003      	beq.n	800aebe <TIM_OC3_SetConfig+0x92>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a16      	ldr	r2, [pc, #88]	; (800af14 <TIM_OC3_SetConfig+0xe8>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d113      	bne.n	800aee6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	011b      	lsls	r3, r3, #4
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	621a      	str	r2, [r3, #32]
}
 800af00:	bf00      	nop
 800af02:	371c      	adds	r7, #28
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	fffeff8f 	.word	0xfffeff8f
 800af10:	40010000 	.word	0x40010000
 800af14:	40010400 	.word	0x40010400

0800af18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4b1e      	ldr	r3, [pc, #120]	; (800afbc <TIM_OC4_SetConfig+0xa4>)
 800af44:	4013      	ands	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	021b      	lsls	r3, r3, #8
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	4313      	orrs	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	031b      	lsls	r3, r3, #12
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a13      	ldr	r2, [pc, #76]	; (800afc0 <TIM_OC4_SetConfig+0xa8>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d003      	beq.n	800af80 <TIM_OC4_SetConfig+0x68>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a12      	ldr	r2, [pc, #72]	; (800afc4 <TIM_OC4_SetConfig+0xac>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d109      	bne.n	800af94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	019b      	lsls	r3, r3, #6
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4313      	orrs	r3, r2
 800af92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685a      	ldr	r2, [r3, #4]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	621a      	str	r2, [r3, #32]
}
 800afae:	bf00      	nop
 800afb0:	371c      	adds	r7, #28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	feff8fff 	.word	0xfeff8fff
 800afc0:	40010000 	.word	0x40010000
 800afc4:	40010400 	.word	0x40010400

0800afc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	4b1b      	ldr	r3, [pc, #108]	; (800b060 <TIM_OC5_SetConfig+0x98>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b008:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	041b      	lsls	r3, r3, #16
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	4313      	orrs	r3, r2
 800b014:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a12      	ldr	r2, [pc, #72]	; (800b064 <TIM_OC5_SetConfig+0x9c>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d003      	beq.n	800b026 <TIM_OC5_SetConfig+0x5e>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a11      	ldr	r2, [pc, #68]	; (800b068 <TIM_OC5_SetConfig+0xa0>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d109      	bne.n	800b03a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b02c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	021b      	lsls	r3, r3, #8
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	4313      	orrs	r3, r2
 800b038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	621a      	str	r2, [r3, #32]
}
 800b054:	bf00      	nop
 800b056:	371c      	adds	r7, #28
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	fffeff8f 	.word	0xfffeff8f
 800b064:	40010000 	.word	0x40010000
 800b068:	40010400 	.word	0x40010400

0800b06c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <TIM_OC6_SetConfig+0x9c>)
 800b098:	4013      	ands	r3, r2
 800b09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	021b      	lsls	r3, r3, #8
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b0ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	051b      	lsls	r3, r3, #20
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a13      	ldr	r2, [pc, #76]	; (800b10c <TIM_OC6_SetConfig+0xa0>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d003      	beq.n	800b0cc <TIM_OC6_SetConfig+0x60>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a12      	ldr	r2, [pc, #72]	; (800b110 <TIM_OC6_SetConfig+0xa4>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d109      	bne.n	800b0e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	029b      	lsls	r3, r3, #10
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	621a      	str	r2, [r3, #32]
}
 800b0fa:	bf00      	nop
 800b0fc:	371c      	adds	r7, #28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	feff8fff 	.word	0xfeff8fff
 800b10c:	40010000 	.word	0x40010000
 800b110:	40010400 	.word	0x40010400

0800b114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	f023 0201 	bic.w	r2, r3, #1
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b13e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	011b      	lsls	r3, r3, #4
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	4313      	orrs	r3, r2
 800b148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f023 030a 	bic.w	r3, r3, #10
 800b150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	4313      	orrs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	621a      	str	r2, [r3, #32]
}
 800b166:	bf00      	nop
 800b168:	371c      	adds	r7, #28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b172:	b480      	push	{r7}
 800b174:	b087      	sub	sp, #28
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	f023 0210 	bic.w	r2, r3, #16
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b19c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	031b      	lsls	r3, r3, #12
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b1ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	011b      	lsls	r3, r3, #4
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	621a      	str	r2, [r3, #32]
}
 800b1c6:	bf00      	nop
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b085      	sub	sp, #20
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	f043 0307 	orr.w	r3, r3, #7
 800b1f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	609a      	str	r2, [r3, #8]
}
 800b1fc:	bf00      	nop
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	021a      	lsls	r2, r3, #8
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	431a      	orrs	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	4313      	orrs	r3, r2
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	609a      	str	r2, [r3, #8]
}
 800b23c:	bf00      	nop
 800b23e:	371c      	adds	r7, #28
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b248:	b480      	push	{r7}
 800b24a:	b087      	sub	sp, #28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	f003 031f 	and.w	r3, r3, #31
 800b25a:	2201      	movs	r2, #1
 800b25c:	fa02 f303 	lsl.w	r3, r2, r3
 800b260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6a1a      	ldr	r2, [r3, #32]
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	43db      	mvns	r3, r3
 800b26a:	401a      	ands	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6a1a      	ldr	r2, [r3, #32]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	f003 031f 	and.w	r3, r3, #31
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	fa01 f303 	lsl.w	r3, r1, r3
 800b280:	431a      	orrs	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	621a      	str	r2, [r3, #32]
}
 800b286:	bf00      	nop
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
	...

0800b294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d101      	bne.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	e06d      	b.n	800b388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a30      	ldr	r2, [pc, #192]	; (800b394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d004      	beq.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a2f      	ldr	r2, [pc, #188]	; (800b398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d108      	bne.n	800b2f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b2e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	4313      	orrs	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a20      	ldr	r2, [pc, #128]	; (800b394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d022      	beq.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31e:	d01d      	beq.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a1d      	ldr	r2, [pc, #116]	; (800b39c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d018      	beq.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a1c      	ldr	r2, [pc, #112]	; (800b3a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d013      	beq.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a1a      	ldr	r2, [pc, #104]	; (800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d00e      	beq.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a15      	ldr	r2, [pc, #84]	; (800b398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d009      	beq.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a16      	ldr	r2, [pc, #88]	; (800b3a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d004      	beq.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a15      	ldr	r2, [pc, #84]	; (800b3ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d10c      	bne.n	800b376 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	40010000 	.word	0x40010000
 800b398:	40010400 	.word	0x40010400
 800b39c:	40000400 	.word	0x40000400
 800b3a0:	40000800 	.word	0x40000800
 800b3a4:	40000c00 	.word	0x40000c00
 800b3a8:	40014000 	.word	0x40014000
 800b3ac:	40001800 	.word	0x40001800

0800b3b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e040      	b.n	800b480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7fa f9b6 	bl	8005780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2224      	movs	r2, #36	; 0x24
 800b418:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f022 0201 	bic.w	r2, r2, #1
 800b428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f990 	bl	800b750 <UART_SetConfig>
 800b430:	4603      	mov	r3, r0
 800b432:	2b01      	cmp	r3, #1
 800b434:	d101      	bne.n	800b43a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e022      	b.n	800b480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fbe6 	bl	800bc14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689a      	ldr	r2, [r3, #8]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f042 0201 	orr.w	r2, r2, #1
 800b476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fc6d 	bl	800bd58 <UART_CheckIdleState>
 800b47e:	4603      	mov	r3, r0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	; 0x28
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	603b      	str	r3, [r7, #0]
 800b494:	4613      	mov	r3, r2
 800b496:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b49c:	2b20      	cmp	r3, #32
 800b49e:	f040 8081 	bne.w	800b5a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <HAL_UART_Transmit+0x26>
 800b4a8:	88fb      	ldrh	r3, [r7, #6]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e079      	b.n	800b5a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d101      	bne.n	800b4c0 <HAL_UART_Transmit+0x38>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e072      	b.n	800b5a6 <HAL_UART_Transmit+0x11e>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2221      	movs	r2, #33	; 0x21
 800b4d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4d6:	f7fb f981 	bl	80067dc <HAL_GetTick>
 800b4da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	88fa      	ldrh	r2, [r7, #6]
 800b4e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	88fa      	ldrh	r2, [r7, #6]
 800b4e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4f4:	d108      	bne.n	800b508 <HAL_UART_Transmit+0x80>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d104      	bne.n	800b508 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	61bb      	str	r3, [r7, #24]
 800b506:	e003      	b.n	800b510 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b518:	e02c      	b.n	800b574 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	2200      	movs	r2, #0
 800b522:	2180      	movs	r1, #128	; 0x80
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f000 fc60 	bl	800bdea <UART_WaitOnFlagUntilTimeout>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e038      	b.n	800b5a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10b      	bne.n	800b552 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b548:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	3302      	adds	r3, #2
 800b54e:	61bb      	str	r3, [r7, #24]
 800b550:	e007      	b.n	800b562 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	3301      	adds	r3, #1
 800b560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b568:	b29b      	uxth	r3, r3
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1cc      	bne.n	800b51a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	2200      	movs	r2, #0
 800b588:	2140      	movs	r1, #64	; 0x40
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f000 fc2d 	bl	800bdea <UART_WaitOnFlagUntilTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e005      	b.n	800b5a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2220      	movs	r2, #32
 800b59e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e000      	b.n	800b5a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b5a4:	2302      	movs	r3, #2
  }
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b08a      	sub	sp, #40	; 0x28
 800b5b2:	af02      	add	r7, sp, #8
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	603b      	str	r3, [r7, #0]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5c2:	2b20      	cmp	r3, #32
 800b5c4:	f040 80be 	bne.w	800b744 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <HAL_UART_Receive+0x26>
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e0b6      	b.n	800b746 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d101      	bne.n	800b5e6 <HAL_UART_Receive+0x38>
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	e0af      	b.n	800b746 <HAL_UART_Receive+0x198>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2222      	movs	r2, #34	; 0x22
 800b5fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b602:	f7fb f8eb 	bl	80067dc <HAL_GetTick>
 800b606:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	88fa      	ldrh	r2, [r7, #6]
 800b60c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	88fa      	ldrh	r2, [r7, #6]
 800b614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b620:	d10e      	bne.n	800b640 <HAL_UART_Receive+0x92>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d105      	bne.n	800b636 <HAL_UART_Receive+0x88>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b634:	e02d      	b.n	800b692 <HAL_UART_Receive+0xe4>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	22ff      	movs	r2, #255	; 0xff
 800b63a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b63e:	e028      	b.n	800b692 <HAL_UART_Receive+0xe4>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <HAL_UART_Receive+0xb6>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d104      	bne.n	800b65a <HAL_UART_Receive+0xac>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	22ff      	movs	r2, #255	; 0xff
 800b654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b658:	e01b      	b.n	800b692 <HAL_UART_Receive+0xe4>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	227f      	movs	r2, #127	; 0x7f
 800b65e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b662:	e016      	b.n	800b692 <HAL_UART_Receive+0xe4>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b66c:	d10d      	bne.n	800b68a <HAL_UART_Receive+0xdc>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d104      	bne.n	800b680 <HAL_UART_Receive+0xd2>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	227f      	movs	r2, #127	; 0x7f
 800b67a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b67e:	e008      	b.n	800b692 <HAL_UART_Receive+0xe4>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	223f      	movs	r2, #63	; 0x3f
 800b684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b688:	e003      	b.n	800b692 <HAL_UART_Receive+0xe4>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b698:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a2:	d108      	bne.n	800b6b6 <HAL_UART_Receive+0x108>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d104      	bne.n	800b6b6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	61bb      	str	r3, [r7, #24]
 800b6b4:	e003      	b.n	800b6be <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b6c6:	e032      	b.n	800b72e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2120      	movs	r1, #32
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 fb89 	bl	800bdea <UART_WaitOnFlagUntilTimeout>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e031      	b.n	800b746 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10c      	bne.n	800b702 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	8a7b      	ldrh	r3, [r7, #18]
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	3302      	adds	r3, #2
 800b6fe:	61bb      	str	r3, [r7, #24]
 800b700:	e00c      	b.n	800b71c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	8a7b      	ldrh	r3, [r7, #18]
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	4013      	ands	r3, r2
 800b710:	b2da      	uxtb	r2, r3
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	3301      	adds	r3, #1
 800b71a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b722:	b29b      	uxth	r3, r3
 800b724:	3b01      	subs	r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b734:	b29b      	uxth	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1c6      	bne.n	800b6c8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2220      	movs	r2, #32
 800b73e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	e000      	b.n	800b746 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800b744:	2302      	movs	r3, #2
  }
}
 800b746:	4618      	mov	r0, r3
 800b748:	3720      	adds	r7, #32
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
	...

0800b750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689a      	ldr	r2, [r3, #8]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	431a      	orrs	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	431a      	orrs	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	4ba7      	ldr	r3, [pc, #668]	; (800ba18 <UART_SetConfig+0x2c8>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	6812      	ldr	r2, [r2, #0]
 800b782:	6979      	ldr	r1, [r7, #20]
 800b784:	430b      	orrs	r3, r1
 800b786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	430a      	orrs	r2, r1
 800b79c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a95      	ldr	r2, [pc, #596]	; (800ba1c <UART_SetConfig+0x2cc>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d120      	bne.n	800b80e <UART_SetConfig+0xbe>
 800b7cc:	4b94      	ldr	r3, [pc, #592]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b7ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d2:	f003 0303 	and.w	r3, r3, #3
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d816      	bhi.n	800b808 <UART_SetConfig+0xb8>
 800b7da:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <UART_SetConfig+0x90>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b7f1 	.word	0x0800b7f1
 800b7e4:	0800b7fd 	.word	0x0800b7fd
 800b7e8:	0800b7f7 	.word	0x0800b7f7
 800b7ec:	0800b803 	.word	0x0800b803
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	77fb      	strb	r3, [r7, #31]
 800b7f4:	e14f      	b.n	800ba96 <UART_SetConfig+0x346>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	77fb      	strb	r3, [r7, #31]
 800b7fa:	e14c      	b.n	800ba96 <UART_SetConfig+0x346>
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	77fb      	strb	r3, [r7, #31]
 800b800:	e149      	b.n	800ba96 <UART_SetConfig+0x346>
 800b802:	2308      	movs	r3, #8
 800b804:	77fb      	strb	r3, [r7, #31]
 800b806:	e146      	b.n	800ba96 <UART_SetConfig+0x346>
 800b808:	2310      	movs	r3, #16
 800b80a:	77fb      	strb	r3, [r7, #31]
 800b80c:	e143      	b.n	800ba96 <UART_SetConfig+0x346>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a84      	ldr	r2, [pc, #528]	; (800ba24 <UART_SetConfig+0x2d4>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d132      	bne.n	800b87e <UART_SetConfig+0x12e>
 800b818:	4b81      	ldr	r3, [pc, #516]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b81e:	f003 030c 	and.w	r3, r3, #12
 800b822:	2b0c      	cmp	r3, #12
 800b824:	d828      	bhi.n	800b878 <UART_SetConfig+0x128>
 800b826:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <UART_SetConfig+0xdc>)
 800b828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82c:	0800b861 	.word	0x0800b861
 800b830:	0800b879 	.word	0x0800b879
 800b834:	0800b879 	.word	0x0800b879
 800b838:	0800b879 	.word	0x0800b879
 800b83c:	0800b86d 	.word	0x0800b86d
 800b840:	0800b879 	.word	0x0800b879
 800b844:	0800b879 	.word	0x0800b879
 800b848:	0800b879 	.word	0x0800b879
 800b84c:	0800b867 	.word	0x0800b867
 800b850:	0800b879 	.word	0x0800b879
 800b854:	0800b879 	.word	0x0800b879
 800b858:	0800b879 	.word	0x0800b879
 800b85c:	0800b873 	.word	0x0800b873
 800b860:	2300      	movs	r3, #0
 800b862:	77fb      	strb	r3, [r7, #31]
 800b864:	e117      	b.n	800ba96 <UART_SetConfig+0x346>
 800b866:	2302      	movs	r3, #2
 800b868:	77fb      	strb	r3, [r7, #31]
 800b86a:	e114      	b.n	800ba96 <UART_SetConfig+0x346>
 800b86c:	2304      	movs	r3, #4
 800b86e:	77fb      	strb	r3, [r7, #31]
 800b870:	e111      	b.n	800ba96 <UART_SetConfig+0x346>
 800b872:	2308      	movs	r3, #8
 800b874:	77fb      	strb	r3, [r7, #31]
 800b876:	e10e      	b.n	800ba96 <UART_SetConfig+0x346>
 800b878:	2310      	movs	r3, #16
 800b87a:	77fb      	strb	r3, [r7, #31]
 800b87c:	e10b      	b.n	800ba96 <UART_SetConfig+0x346>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a69      	ldr	r2, [pc, #420]	; (800ba28 <UART_SetConfig+0x2d8>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d120      	bne.n	800b8ca <UART_SetConfig+0x17a>
 800b888:	4b65      	ldr	r3, [pc, #404]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b88e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b892:	2b30      	cmp	r3, #48	; 0x30
 800b894:	d013      	beq.n	800b8be <UART_SetConfig+0x16e>
 800b896:	2b30      	cmp	r3, #48	; 0x30
 800b898:	d814      	bhi.n	800b8c4 <UART_SetConfig+0x174>
 800b89a:	2b20      	cmp	r3, #32
 800b89c:	d009      	beq.n	800b8b2 <UART_SetConfig+0x162>
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	d810      	bhi.n	800b8c4 <UART_SetConfig+0x174>
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d002      	beq.n	800b8ac <UART_SetConfig+0x15c>
 800b8a6:	2b10      	cmp	r3, #16
 800b8a8:	d006      	beq.n	800b8b8 <UART_SetConfig+0x168>
 800b8aa:	e00b      	b.n	800b8c4 <UART_SetConfig+0x174>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	77fb      	strb	r3, [r7, #31]
 800b8b0:	e0f1      	b.n	800ba96 <UART_SetConfig+0x346>
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	77fb      	strb	r3, [r7, #31]
 800b8b6:	e0ee      	b.n	800ba96 <UART_SetConfig+0x346>
 800b8b8:	2304      	movs	r3, #4
 800b8ba:	77fb      	strb	r3, [r7, #31]
 800b8bc:	e0eb      	b.n	800ba96 <UART_SetConfig+0x346>
 800b8be:	2308      	movs	r3, #8
 800b8c0:	77fb      	strb	r3, [r7, #31]
 800b8c2:	e0e8      	b.n	800ba96 <UART_SetConfig+0x346>
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	77fb      	strb	r3, [r7, #31]
 800b8c8:	e0e5      	b.n	800ba96 <UART_SetConfig+0x346>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a57      	ldr	r2, [pc, #348]	; (800ba2c <UART_SetConfig+0x2dc>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d120      	bne.n	800b916 <UART_SetConfig+0x1c6>
 800b8d4:	4b52      	ldr	r3, [pc, #328]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b8de:	2bc0      	cmp	r3, #192	; 0xc0
 800b8e0:	d013      	beq.n	800b90a <UART_SetConfig+0x1ba>
 800b8e2:	2bc0      	cmp	r3, #192	; 0xc0
 800b8e4:	d814      	bhi.n	800b910 <UART_SetConfig+0x1c0>
 800b8e6:	2b80      	cmp	r3, #128	; 0x80
 800b8e8:	d009      	beq.n	800b8fe <UART_SetConfig+0x1ae>
 800b8ea:	2b80      	cmp	r3, #128	; 0x80
 800b8ec:	d810      	bhi.n	800b910 <UART_SetConfig+0x1c0>
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <UART_SetConfig+0x1a8>
 800b8f2:	2b40      	cmp	r3, #64	; 0x40
 800b8f4:	d006      	beq.n	800b904 <UART_SetConfig+0x1b4>
 800b8f6:	e00b      	b.n	800b910 <UART_SetConfig+0x1c0>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	77fb      	strb	r3, [r7, #31]
 800b8fc:	e0cb      	b.n	800ba96 <UART_SetConfig+0x346>
 800b8fe:	2302      	movs	r3, #2
 800b900:	77fb      	strb	r3, [r7, #31]
 800b902:	e0c8      	b.n	800ba96 <UART_SetConfig+0x346>
 800b904:	2304      	movs	r3, #4
 800b906:	77fb      	strb	r3, [r7, #31]
 800b908:	e0c5      	b.n	800ba96 <UART_SetConfig+0x346>
 800b90a:	2308      	movs	r3, #8
 800b90c:	77fb      	strb	r3, [r7, #31]
 800b90e:	e0c2      	b.n	800ba96 <UART_SetConfig+0x346>
 800b910:	2310      	movs	r3, #16
 800b912:	77fb      	strb	r3, [r7, #31]
 800b914:	e0bf      	b.n	800ba96 <UART_SetConfig+0x346>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a45      	ldr	r2, [pc, #276]	; (800ba30 <UART_SetConfig+0x2e0>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d125      	bne.n	800b96c <UART_SetConfig+0x21c>
 800b920:	4b3f      	ldr	r3, [pc, #252]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b92a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b92e:	d017      	beq.n	800b960 <UART_SetConfig+0x210>
 800b930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b934:	d817      	bhi.n	800b966 <UART_SetConfig+0x216>
 800b936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b93a:	d00b      	beq.n	800b954 <UART_SetConfig+0x204>
 800b93c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b940:	d811      	bhi.n	800b966 <UART_SetConfig+0x216>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <UART_SetConfig+0x1fe>
 800b946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b94a:	d006      	beq.n	800b95a <UART_SetConfig+0x20a>
 800b94c:	e00b      	b.n	800b966 <UART_SetConfig+0x216>
 800b94e:	2300      	movs	r3, #0
 800b950:	77fb      	strb	r3, [r7, #31]
 800b952:	e0a0      	b.n	800ba96 <UART_SetConfig+0x346>
 800b954:	2302      	movs	r3, #2
 800b956:	77fb      	strb	r3, [r7, #31]
 800b958:	e09d      	b.n	800ba96 <UART_SetConfig+0x346>
 800b95a:	2304      	movs	r3, #4
 800b95c:	77fb      	strb	r3, [r7, #31]
 800b95e:	e09a      	b.n	800ba96 <UART_SetConfig+0x346>
 800b960:	2308      	movs	r3, #8
 800b962:	77fb      	strb	r3, [r7, #31]
 800b964:	e097      	b.n	800ba96 <UART_SetConfig+0x346>
 800b966:	2310      	movs	r3, #16
 800b968:	77fb      	strb	r3, [r7, #31]
 800b96a:	e094      	b.n	800ba96 <UART_SetConfig+0x346>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a30      	ldr	r2, [pc, #192]	; (800ba34 <UART_SetConfig+0x2e4>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d125      	bne.n	800b9c2 <UART_SetConfig+0x272>
 800b976:	4b2a      	ldr	r3, [pc, #168]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b97c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b984:	d017      	beq.n	800b9b6 <UART_SetConfig+0x266>
 800b986:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b98a:	d817      	bhi.n	800b9bc <UART_SetConfig+0x26c>
 800b98c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b990:	d00b      	beq.n	800b9aa <UART_SetConfig+0x25a>
 800b992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b996:	d811      	bhi.n	800b9bc <UART_SetConfig+0x26c>
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <UART_SetConfig+0x254>
 800b99c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9a0:	d006      	beq.n	800b9b0 <UART_SetConfig+0x260>
 800b9a2:	e00b      	b.n	800b9bc <UART_SetConfig+0x26c>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	77fb      	strb	r3, [r7, #31]
 800b9a8:	e075      	b.n	800ba96 <UART_SetConfig+0x346>
 800b9aa:	2302      	movs	r3, #2
 800b9ac:	77fb      	strb	r3, [r7, #31]
 800b9ae:	e072      	b.n	800ba96 <UART_SetConfig+0x346>
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	77fb      	strb	r3, [r7, #31]
 800b9b4:	e06f      	b.n	800ba96 <UART_SetConfig+0x346>
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	77fb      	strb	r3, [r7, #31]
 800b9ba:	e06c      	b.n	800ba96 <UART_SetConfig+0x346>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	77fb      	strb	r3, [r7, #31]
 800b9c0:	e069      	b.n	800ba96 <UART_SetConfig+0x346>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a1c      	ldr	r2, [pc, #112]	; (800ba38 <UART_SetConfig+0x2e8>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d137      	bne.n	800ba3c <UART_SetConfig+0x2ec>
 800b9cc:	4b14      	ldr	r3, [pc, #80]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b9d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9da:	d017      	beq.n	800ba0c <UART_SetConfig+0x2bc>
 800b9dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9e0:	d817      	bhi.n	800ba12 <UART_SetConfig+0x2c2>
 800b9e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9e6:	d00b      	beq.n	800ba00 <UART_SetConfig+0x2b0>
 800b9e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ec:	d811      	bhi.n	800ba12 <UART_SetConfig+0x2c2>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <UART_SetConfig+0x2aa>
 800b9f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9f6:	d006      	beq.n	800ba06 <UART_SetConfig+0x2b6>
 800b9f8:	e00b      	b.n	800ba12 <UART_SetConfig+0x2c2>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	77fb      	strb	r3, [r7, #31]
 800b9fe:	e04a      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba00:	2302      	movs	r3, #2
 800ba02:	77fb      	strb	r3, [r7, #31]
 800ba04:	e047      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba06:	2304      	movs	r3, #4
 800ba08:	77fb      	strb	r3, [r7, #31]
 800ba0a:	e044      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba0c:	2308      	movs	r3, #8
 800ba0e:	77fb      	strb	r3, [r7, #31]
 800ba10:	e041      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba12:	2310      	movs	r3, #16
 800ba14:	77fb      	strb	r3, [r7, #31]
 800ba16:	e03e      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba18:	efff69f3 	.word	0xefff69f3
 800ba1c:	40011000 	.word	0x40011000
 800ba20:	40023800 	.word	0x40023800
 800ba24:	40004400 	.word	0x40004400
 800ba28:	40004800 	.word	0x40004800
 800ba2c:	40004c00 	.word	0x40004c00
 800ba30:	40005000 	.word	0x40005000
 800ba34:	40011400 	.word	0x40011400
 800ba38:	40007800 	.word	0x40007800
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a71      	ldr	r2, [pc, #452]	; (800bc08 <UART_SetConfig+0x4b8>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d125      	bne.n	800ba92 <UART_SetConfig+0x342>
 800ba46:	4b71      	ldr	r3, [pc, #452]	; (800bc0c <UART_SetConfig+0x4bc>)
 800ba48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ba50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ba54:	d017      	beq.n	800ba86 <UART_SetConfig+0x336>
 800ba56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ba5a:	d817      	bhi.n	800ba8c <UART_SetConfig+0x33c>
 800ba5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba60:	d00b      	beq.n	800ba7a <UART_SetConfig+0x32a>
 800ba62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba66:	d811      	bhi.n	800ba8c <UART_SetConfig+0x33c>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <UART_SetConfig+0x324>
 800ba6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba70:	d006      	beq.n	800ba80 <UART_SetConfig+0x330>
 800ba72:	e00b      	b.n	800ba8c <UART_SetConfig+0x33c>
 800ba74:	2300      	movs	r3, #0
 800ba76:	77fb      	strb	r3, [r7, #31]
 800ba78:	e00d      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	77fb      	strb	r3, [r7, #31]
 800ba7e:	e00a      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba80:	2304      	movs	r3, #4
 800ba82:	77fb      	strb	r3, [r7, #31]
 800ba84:	e007      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba86:	2308      	movs	r3, #8
 800ba88:	77fb      	strb	r3, [r7, #31]
 800ba8a:	e004      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba8c:	2310      	movs	r3, #16
 800ba8e:	77fb      	strb	r3, [r7, #31]
 800ba90:	e001      	b.n	800ba96 <UART_SetConfig+0x346>
 800ba92:	2310      	movs	r3, #16
 800ba94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	69db      	ldr	r3, [r3, #28]
 800ba9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba9e:	d15b      	bne.n	800bb58 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800baa0:	7ffb      	ldrb	r3, [r7, #31]
 800baa2:	2b08      	cmp	r3, #8
 800baa4:	d827      	bhi.n	800baf6 <UART_SetConfig+0x3a6>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <UART_SetConfig+0x35c>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bad1 	.word	0x0800bad1
 800bab0:	0800bad9 	.word	0x0800bad9
 800bab4:	0800bae1 	.word	0x0800bae1
 800bab8:	0800baf7 	.word	0x0800baf7
 800babc:	0800bae7 	.word	0x0800bae7
 800bac0:	0800baf7 	.word	0x0800baf7
 800bac4:	0800baf7 	.word	0x0800baf7
 800bac8:	0800baf7 	.word	0x0800baf7
 800bacc:	0800baef 	.word	0x0800baef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bad0:	f7fd fa5a 	bl	8008f88 <HAL_RCC_GetPCLK1Freq>
 800bad4:	61b8      	str	r0, [r7, #24]
        break;
 800bad6:	e013      	b.n	800bb00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bad8:	f7fd fa6a 	bl	8008fb0 <HAL_RCC_GetPCLK2Freq>
 800badc:	61b8      	str	r0, [r7, #24]
        break;
 800bade:	e00f      	b.n	800bb00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bae0:	4b4b      	ldr	r3, [pc, #300]	; (800bc10 <UART_SetConfig+0x4c0>)
 800bae2:	61bb      	str	r3, [r7, #24]
        break;
 800bae4:	e00c      	b.n	800bb00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bae6:	f7fd f961 	bl	8008dac <HAL_RCC_GetSysClockFreq>
 800baea:	61b8      	str	r0, [r7, #24]
        break;
 800baec:	e008      	b.n	800bb00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baf2:	61bb      	str	r3, [r7, #24]
        break;
 800baf4:	e004      	b.n	800bb00 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	77bb      	strb	r3, [r7, #30]
        break;
 800bafe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d074      	beq.n	800bbf0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	005a      	lsls	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	085b      	lsrs	r3, r3, #1
 800bb10:	441a      	add	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	2b0f      	cmp	r3, #15
 800bb22:	d916      	bls.n	800bb52 <UART_SetConfig+0x402>
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb2a:	d212      	bcs.n	800bb52 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f023 030f 	bic.w	r3, r3, #15
 800bb34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	085b      	lsrs	r3, r3, #1
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	f003 0307 	and.w	r3, r3, #7
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	89fb      	ldrh	r3, [r7, #14]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	89fa      	ldrh	r2, [r7, #14]
 800bb4e:	60da      	str	r2, [r3, #12]
 800bb50:	e04e      	b.n	800bbf0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	77bb      	strb	r3, [r7, #30]
 800bb56:	e04b      	b.n	800bbf0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb58:	7ffb      	ldrb	r3, [r7, #31]
 800bb5a:	2b08      	cmp	r3, #8
 800bb5c:	d827      	bhi.n	800bbae <UART_SetConfig+0x45e>
 800bb5e:	a201      	add	r2, pc, #4	; (adr r2, 800bb64 <UART_SetConfig+0x414>)
 800bb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb64:	0800bb89 	.word	0x0800bb89
 800bb68:	0800bb91 	.word	0x0800bb91
 800bb6c:	0800bb99 	.word	0x0800bb99
 800bb70:	0800bbaf 	.word	0x0800bbaf
 800bb74:	0800bb9f 	.word	0x0800bb9f
 800bb78:	0800bbaf 	.word	0x0800bbaf
 800bb7c:	0800bbaf 	.word	0x0800bbaf
 800bb80:	0800bbaf 	.word	0x0800bbaf
 800bb84:	0800bba7 	.word	0x0800bba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb88:	f7fd f9fe 	bl	8008f88 <HAL_RCC_GetPCLK1Freq>
 800bb8c:	61b8      	str	r0, [r7, #24]
        break;
 800bb8e:	e013      	b.n	800bbb8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb90:	f7fd fa0e 	bl	8008fb0 <HAL_RCC_GetPCLK2Freq>
 800bb94:	61b8      	str	r0, [r7, #24]
        break;
 800bb96:	e00f      	b.n	800bbb8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb98:	4b1d      	ldr	r3, [pc, #116]	; (800bc10 <UART_SetConfig+0x4c0>)
 800bb9a:	61bb      	str	r3, [r7, #24]
        break;
 800bb9c:	e00c      	b.n	800bbb8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb9e:	f7fd f905 	bl	8008dac <HAL_RCC_GetSysClockFreq>
 800bba2:	61b8      	str	r0, [r7, #24]
        break;
 800bba4:	e008      	b.n	800bbb8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbaa:	61bb      	str	r3, [r7, #24]
        break;
 800bbac:	e004      	b.n	800bbb8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	77bb      	strb	r3, [r7, #30]
        break;
 800bbb6:	bf00      	nop
    }

    if (pclk != 0U)
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d018      	beq.n	800bbf0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	085a      	lsrs	r2, r3, #1
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	441a      	add	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d908      	bls.n	800bbec <UART_SetConfig+0x49c>
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe0:	d204      	bcs.n	800bbec <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	60da      	str	r2, [r3, #12]
 800bbea:	e001      	b.n	800bbf0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bbfc:	7fbb      	ldrb	r3, [r7, #30]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3720      	adds	r7, #32
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	40007c00 	.word	0x40007c00
 800bc0c:	40023800 	.word	0x40023800
 800bc10:	00f42400 	.word	0x00f42400

0800bc14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00a      	beq.n	800bc3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc42:	f003 0302 	and.w	r3, r3, #2
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00a      	beq.n	800bc60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	430a      	orrs	r2, r1
 800bc5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	f003 0304 	and.w	r3, r3, #4
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00a      	beq.n	800bc82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	430a      	orrs	r2, r1
 800bc80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	430a      	orrs	r2, r1
 800bca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	f003 0310 	and.w	r3, r3, #16
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00a      	beq.n	800bcc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00a      	beq.n	800bce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	430a      	orrs	r2, r1
 800bce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01a      	beq.n	800bd2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	430a      	orrs	r2, r1
 800bd08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd12:	d10a      	bne.n	800bd2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	605a      	str	r2, [r3, #4]
  }
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd68:	f7fa fd38 	bl	80067dc <HAL_GetTick>
 800bd6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0308 	and.w	r3, r3, #8
 800bd78:	2b08      	cmp	r3, #8
 800bd7a:	d10e      	bne.n	800bd9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f82d 	bl	800bdea <UART_WaitOnFlagUntilTimeout>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e023      	b.n	800bde2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0304 	and.w	r3, r3, #4
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	d10e      	bne.n	800bdc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bda8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f817 	bl	800bdea <UART_WaitOnFlagUntilTimeout>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e00d      	b.n	800bde2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2220      	movs	r2, #32
 800bdd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	60f8      	str	r0, [r7, #12]
 800bdf2:	60b9      	str	r1, [r7, #8]
 800bdf4:	603b      	str	r3, [r7, #0]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdfa:	e05e      	b.n	800beba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be02:	d05a      	beq.n	800beba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be04:	f7fa fcea 	bl	80067dc <HAL_GetTick>
 800be08:	4602      	mov	r2, r0
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	429a      	cmp	r2, r3
 800be12:	d302      	bcc.n	800be1a <UART_WaitOnFlagUntilTimeout+0x30>
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d11b      	bne.n	800be52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	689a      	ldr	r2, [r3, #8]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 0201 	bic.w	r2, r2, #1
 800be38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2220      	movs	r2, #32
 800be3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2220      	movs	r2, #32
 800be44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800be4e:	2303      	movs	r3, #3
 800be50:	e043      	b.n	800beda <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d02c      	beq.n	800beba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	69db      	ldr	r3, [r3, #28]
 800be66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be6e:	d124      	bne.n	800beba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689a      	ldr	r2, [r3, #8]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f022 0201 	bic.w	r2, r2, #1
 800be98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2220      	movs	r2, #32
 800be9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2220      	movs	r2, #32
 800bea4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2220      	movs	r2, #32
 800beaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e00f      	b.n	800beda <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	69da      	ldr	r2, [r3, #28]
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	4013      	ands	r3, r2
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	bf0c      	ite	eq
 800beca:	2301      	moveq	r3, #1
 800becc:	2300      	movne	r3, #0
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	461a      	mov	r2, r3
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d091      	beq.n	800bdfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
	...

0800bee4 <__errno>:
 800bee4:	4b01      	ldr	r3, [pc, #4]	; (800beec <__errno+0x8>)
 800bee6:	6818      	ldr	r0, [r3, #0]
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	200000dc 	.word	0x200000dc

0800bef0 <__libc_init_array>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	4d0d      	ldr	r5, [pc, #52]	; (800bf28 <__libc_init_array+0x38>)
 800bef4:	4c0d      	ldr	r4, [pc, #52]	; (800bf2c <__libc_init_array+0x3c>)
 800bef6:	1b64      	subs	r4, r4, r5
 800bef8:	10a4      	asrs	r4, r4, #2
 800befa:	2600      	movs	r6, #0
 800befc:	42a6      	cmp	r6, r4
 800befe:	d109      	bne.n	800bf14 <__libc_init_array+0x24>
 800bf00:	4d0b      	ldr	r5, [pc, #44]	; (800bf30 <__libc_init_array+0x40>)
 800bf02:	4c0c      	ldr	r4, [pc, #48]	; (800bf34 <__libc_init_array+0x44>)
 800bf04:	f002 fe24 	bl	800eb50 <_init>
 800bf08:	1b64      	subs	r4, r4, r5
 800bf0a:	10a4      	asrs	r4, r4, #2
 800bf0c:	2600      	movs	r6, #0
 800bf0e:	42a6      	cmp	r6, r4
 800bf10:	d105      	bne.n	800bf1e <__libc_init_array+0x2e>
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
 800bf14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf18:	4798      	blx	r3
 800bf1a:	3601      	adds	r6, #1
 800bf1c:	e7ee      	b.n	800befc <__libc_init_array+0xc>
 800bf1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf22:	4798      	blx	r3
 800bf24:	3601      	adds	r6, #1
 800bf26:	e7f2      	b.n	800bf0e <__libc_init_array+0x1e>
 800bf28:	0800f31c 	.word	0x0800f31c
 800bf2c:	0800f31c 	.word	0x0800f31c
 800bf30:	0800f31c 	.word	0x0800f31c
 800bf34:	0800f320 	.word	0x0800f320

0800bf38 <memset>:
 800bf38:	4402      	add	r2, r0
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d100      	bne.n	800bf42 <memset+0xa>
 800bf40:	4770      	bx	lr
 800bf42:	f803 1b01 	strb.w	r1, [r3], #1
 800bf46:	e7f9      	b.n	800bf3c <memset+0x4>

0800bf48 <__cvt>:
 800bf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4a:	ed2d 8b02 	vpush	{d8}
 800bf4e:	eeb0 8b40 	vmov.f64	d8, d0
 800bf52:	b085      	sub	sp, #20
 800bf54:	4617      	mov	r7, r2
 800bf56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bf58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bf5a:	ee18 2a90 	vmov	r2, s17
 800bf5e:	f025 0520 	bic.w	r5, r5, #32
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	bfb6      	itet	lt
 800bf66:	222d      	movlt	r2, #45	; 0x2d
 800bf68:	2200      	movge	r2, #0
 800bf6a:	eeb1 8b40 	vneglt.f64	d8, d0
 800bf6e:	2d46      	cmp	r5, #70	; 0x46
 800bf70:	460c      	mov	r4, r1
 800bf72:	701a      	strb	r2, [r3, #0]
 800bf74:	d004      	beq.n	800bf80 <__cvt+0x38>
 800bf76:	2d45      	cmp	r5, #69	; 0x45
 800bf78:	d100      	bne.n	800bf7c <__cvt+0x34>
 800bf7a:	3401      	adds	r4, #1
 800bf7c:	2102      	movs	r1, #2
 800bf7e:	e000      	b.n	800bf82 <__cvt+0x3a>
 800bf80:	2103      	movs	r1, #3
 800bf82:	ab03      	add	r3, sp, #12
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	ab02      	add	r3, sp, #8
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	4633      	mov	r3, r6
 800bf8e:	eeb0 0b48 	vmov.f64	d0, d8
 800bf92:	f000 fcc9 	bl	800c928 <_dtoa_r>
 800bf96:	2d47      	cmp	r5, #71	; 0x47
 800bf98:	d109      	bne.n	800bfae <__cvt+0x66>
 800bf9a:	07fb      	lsls	r3, r7, #31
 800bf9c:	d407      	bmi.n	800bfae <__cvt+0x66>
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfa2:	1a1b      	subs	r3, r3, r0
 800bfa4:	6013      	str	r3, [r2, #0]
 800bfa6:	b005      	add	sp, #20
 800bfa8:	ecbd 8b02 	vpop	{d8}
 800bfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfae:	2d46      	cmp	r5, #70	; 0x46
 800bfb0:	eb00 0204 	add.w	r2, r0, r4
 800bfb4:	d10c      	bne.n	800bfd0 <__cvt+0x88>
 800bfb6:	7803      	ldrb	r3, [r0, #0]
 800bfb8:	2b30      	cmp	r3, #48	; 0x30
 800bfba:	d107      	bne.n	800bfcc <__cvt+0x84>
 800bfbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc4:	bf1c      	itt	ne
 800bfc6:	f1c4 0401 	rsbne	r4, r4, #1
 800bfca:	6034      	strne	r4, [r6, #0]
 800bfcc:	6833      	ldr	r3, [r6, #0]
 800bfce:	441a      	add	r2, r3
 800bfd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd8:	bf08      	it	eq
 800bfda:	9203      	streq	r2, [sp, #12]
 800bfdc:	2130      	movs	r1, #48	; 0x30
 800bfde:	9b03      	ldr	r3, [sp, #12]
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d2dc      	bcs.n	800bf9e <__cvt+0x56>
 800bfe4:	1c5c      	adds	r4, r3, #1
 800bfe6:	9403      	str	r4, [sp, #12]
 800bfe8:	7019      	strb	r1, [r3, #0]
 800bfea:	e7f8      	b.n	800bfde <__cvt+0x96>

0800bfec <__exponent>:
 800bfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfee:	4603      	mov	r3, r0
 800bff0:	2900      	cmp	r1, #0
 800bff2:	bfb8      	it	lt
 800bff4:	4249      	neglt	r1, r1
 800bff6:	f803 2b02 	strb.w	r2, [r3], #2
 800bffa:	bfb4      	ite	lt
 800bffc:	222d      	movlt	r2, #45	; 0x2d
 800bffe:	222b      	movge	r2, #43	; 0x2b
 800c000:	2909      	cmp	r1, #9
 800c002:	7042      	strb	r2, [r0, #1]
 800c004:	dd2a      	ble.n	800c05c <__exponent+0x70>
 800c006:	f10d 0407 	add.w	r4, sp, #7
 800c00a:	46a4      	mov	ip, r4
 800c00c:	270a      	movs	r7, #10
 800c00e:	46a6      	mov	lr, r4
 800c010:	460a      	mov	r2, r1
 800c012:	fb91 f6f7 	sdiv	r6, r1, r7
 800c016:	fb07 1516 	mls	r5, r7, r6, r1
 800c01a:	3530      	adds	r5, #48	; 0x30
 800c01c:	2a63      	cmp	r2, #99	; 0x63
 800c01e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c022:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c026:	4631      	mov	r1, r6
 800c028:	dcf1      	bgt.n	800c00e <__exponent+0x22>
 800c02a:	3130      	adds	r1, #48	; 0x30
 800c02c:	f1ae 0502 	sub.w	r5, lr, #2
 800c030:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c034:	1c44      	adds	r4, r0, #1
 800c036:	4629      	mov	r1, r5
 800c038:	4561      	cmp	r1, ip
 800c03a:	d30a      	bcc.n	800c052 <__exponent+0x66>
 800c03c:	f10d 0209 	add.w	r2, sp, #9
 800c040:	eba2 020e 	sub.w	r2, r2, lr
 800c044:	4565      	cmp	r5, ip
 800c046:	bf88      	it	hi
 800c048:	2200      	movhi	r2, #0
 800c04a:	4413      	add	r3, r2
 800c04c:	1a18      	subs	r0, r3, r0
 800c04e:	b003      	add	sp, #12
 800c050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c052:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c056:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c05a:	e7ed      	b.n	800c038 <__exponent+0x4c>
 800c05c:	2330      	movs	r3, #48	; 0x30
 800c05e:	3130      	adds	r1, #48	; 0x30
 800c060:	7083      	strb	r3, [r0, #2]
 800c062:	70c1      	strb	r1, [r0, #3]
 800c064:	1d03      	adds	r3, r0, #4
 800c066:	e7f1      	b.n	800c04c <__exponent+0x60>

0800c068 <_printf_float>:
 800c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	b08b      	sub	sp, #44	; 0x2c
 800c06e:	460c      	mov	r4, r1
 800c070:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c074:	4616      	mov	r6, r2
 800c076:	461f      	mov	r7, r3
 800c078:	4605      	mov	r5, r0
 800c07a:	f001 f9d7 	bl	800d42c <_localeconv_r>
 800c07e:	f8d0 b000 	ldr.w	fp, [r0]
 800c082:	4658      	mov	r0, fp
 800c084:	f7f4 f8dc 	bl	8000240 <strlen>
 800c088:	2300      	movs	r3, #0
 800c08a:	9308      	str	r3, [sp, #32]
 800c08c:	f8d8 3000 	ldr.w	r3, [r8]
 800c090:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c094:	6822      	ldr	r2, [r4, #0]
 800c096:	3307      	adds	r3, #7
 800c098:	f023 0307 	bic.w	r3, r3, #7
 800c09c:	f103 0108 	add.w	r1, r3, #8
 800c0a0:	f8c8 1000 	str.w	r1, [r8]
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c0ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c310 <_printf_float+0x2a8>
 800c0b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c0b6:	eeb0 6bc0 	vabs.f64	d6, d0
 800c0ba:	eeb4 6b47 	vcmp.f64	d6, d7
 800c0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c2:	dd24      	ble.n	800c10e <_printf_float+0xa6>
 800c0c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0cc:	d502      	bpl.n	800c0d4 <_printf_float+0x6c>
 800c0ce:	232d      	movs	r3, #45	; 0x2d
 800c0d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0d4:	4b90      	ldr	r3, [pc, #576]	; (800c318 <_printf_float+0x2b0>)
 800c0d6:	4891      	ldr	r0, [pc, #580]	; (800c31c <_printf_float+0x2b4>)
 800c0d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c0dc:	bf94      	ite	ls
 800c0de:	4698      	movls	r8, r3
 800c0e0:	4680      	movhi	r8, r0
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	6123      	str	r3, [r4, #16]
 800c0e6:	f022 0204 	bic.w	r2, r2, #4
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	6022      	str	r2, [r4, #0]
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	9700      	str	r7, [sp, #0]
 800c0f2:	4633      	mov	r3, r6
 800c0f4:	aa09      	add	r2, sp, #36	; 0x24
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f000 f9d3 	bl	800c4a4 <_printf_common>
 800c0fe:	3001      	adds	r0, #1
 800c100:	f040 808a 	bne.w	800c218 <_printf_float+0x1b0>
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	b00b      	add	sp, #44	; 0x2c
 800c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10e:	eeb4 0b40 	vcmp.f64	d0, d0
 800c112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c116:	d709      	bvc.n	800c12c <_printf_float+0xc4>
 800c118:	ee10 3a90 	vmov	r3, s1
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	bfbc      	itt	lt
 800c120:	232d      	movlt	r3, #45	; 0x2d
 800c122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c126:	487e      	ldr	r0, [pc, #504]	; (800c320 <_printf_float+0x2b8>)
 800c128:	4b7e      	ldr	r3, [pc, #504]	; (800c324 <_printf_float+0x2bc>)
 800c12a:	e7d5      	b.n	800c0d8 <_printf_float+0x70>
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c132:	9104      	str	r1, [sp, #16]
 800c134:	1c59      	adds	r1, r3, #1
 800c136:	d13c      	bne.n	800c1b2 <_printf_float+0x14a>
 800c138:	2306      	movs	r3, #6
 800c13a:	6063      	str	r3, [r4, #4]
 800c13c:	2300      	movs	r3, #0
 800c13e:	9303      	str	r3, [sp, #12]
 800c140:	ab08      	add	r3, sp, #32
 800c142:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c14a:	ab07      	add	r3, sp, #28
 800c14c:	6861      	ldr	r1, [r4, #4]
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	6022      	str	r2, [r4, #0]
 800c152:	f10d 031b 	add.w	r3, sp, #27
 800c156:	4628      	mov	r0, r5
 800c158:	f7ff fef6 	bl	800bf48 <__cvt>
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	9907      	ldr	r1, [sp, #28]
 800c160:	2b47      	cmp	r3, #71	; 0x47
 800c162:	4680      	mov	r8, r0
 800c164:	d108      	bne.n	800c178 <_printf_float+0x110>
 800c166:	1cc8      	adds	r0, r1, #3
 800c168:	db02      	blt.n	800c170 <_printf_float+0x108>
 800c16a:	6863      	ldr	r3, [r4, #4]
 800c16c:	4299      	cmp	r1, r3
 800c16e:	dd41      	ble.n	800c1f4 <_printf_float+0x18c>
 800c170:	f1a9 0902 	sub.w	r9, r9, #2
 800c174:	fa5f f989 	uxtb.w	r9, r9
 800c178:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c17c:	d820      	bhi.n	800c1c0 <_printf_float+0x158>
 800c17e:	3901      	subs	r1, #1
 800c180:	464a      	mov	r2, r9
 800c182:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c186:	9107      	str	r1, [sp, #28]
 800c188:	f7ff ff30 	bl	800bfec <__exponent>
 800c18c:	9a08      	ldr	r2, [sp, #32]
 800c18e:	9004      	str	r0, [sp, #16]
 800c190:	1813      	adds	r3, r2, r0
 800c192:	2a01      	cmp	r2, #1
 800c194:	6123      	str	r3, [r4, #16]
 800c196:	dc02      	bgt.n	800c19e <_printf_float+0x136>
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	07d2      	lsls	r2, r2, #31
 800c19c:	d501      	bpl.n	800c1a2 <_printf_float+0x13a>
 800c19e:	3301      	adds	r3, #1
 800c1a0:	6123      	str	r3, [r4, #16]
 800c1a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d0a2      	beq.n	800c0f0 <_printf_float+0x88>
 800c1aa:	232d      	movs	r3, #45	; 0x2d
 800c1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1b0:	e79e      	b.n	800c0f0 <_printf_float+0x88>
 800c1b2:	9904      	ldr	r1, [sp, #16]
 800c1b4:	2947      	cmp	r1, #71	; 0x47
 800c1b6:	d1c1      	bne.n	800c13c <_printf_float+0xd4>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1bf      	bne.n	800c13c <_printf_float+0xd4>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e7bc      	b.n	800c13a <_printf_float+0xd2>
 800c1c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c1c4:	d118      	bne.n	800c1f8 <_printf_float+0x190>
 800c1c6:	2900      	cmp	r1, #0
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	dd0b      	ble.n	800c1e4 <_printf_float+0x17c>
 800c1cc:	6121      	str	r1, [r4, #16]
 800c1ce:	b913      	cbnz	r3, 800c1d6 <_printf_float+0x16e>
 800c1d0:	6822      	ldr	r2, [r4, #0]
 800c1d2:	07d0      	lsls	r0, r2, #31
 800c1d4:	d502      	bpl.n	800c1dc <_printf_float+0x174>
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	440b      	add	r3, r1
 800c1da:	6123      	str	r3, [r4, #16]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	65a1      	str	r1, [r4, #88]	; 0x58
 800c1e0:	9304      	str	r3, [sp, #16]
 800c1e2:	e7de      	b.n	800c1a2 <_printf_float+0x13a>
 800c1e4:	b913      	cbnz	r3, 800c1ec <_printf_float+0x184>
 800c1e6:	6822      	ldr	r2, [r4, #0]
 800c1e8:	07d2      	lsls	r2, r2, #31
 800c1ea:	d501      	bpl.n	800c1f0 <_printf_float+0x188>
 800c1ec:	3302      	adds	r3, #2
 800c1ee:	e7f4      	b.n	800c1da <_printf_float+0x172>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e7f2      	b.n	800c1da <_printf_float+0x172>
 800c1f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c1f8:	9b08      	ldr	r3, [sp, #32]
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	db05      	blt.n	800c20a <_printf_float+0x1a2>
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	6121      	str	r1, [r4, #16]
 800c202:	07d8      	lsls	r0, r3, #31
 800c204:	d5ea      	bpl.n	800c1dc <_printf_float+0x174>
 800c206:	1c4b      	adds	r3, r1, #1
 800c208:	e7e7      	b.n	800c1da <_printf_float+0x172>
 800c20a:	2900      	cmp	r1, #0
 800c20c:	bfd4      	ite	le
 800c20e:	f1c1 0202 	rsble	r2, r1, #2
 800c212:	2201      	movgt	r2, #1
 800c214:	4413      	add	r3, r2
 800c216:	e7e0      	b.n	800c1da <_printf_float+0x172>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	055a      	lsls	r2, r3, #21
 800c21c:	d407      	bmi.n	800c22e <_printf_float+0x1c6>
 800c21e:	6923      	ldr	r3, [r4, #16]
 800c220:	4642      	mov	r2, r8
 800c222:	4631      	mov	r1, r6
 800c224:	4628      	mov	r0, r5
 800c226:	47b8      	blx	r7
 800c228:	3001      	adds	r0, #1
 800c22a:	d12a      	bne.n	800c282 <_printf_float+0x21a>
 800c22c:	e76a      	b.n	800c104 <_printf_float+0x9c>
 800c22e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c232:	f240 80e2 	bls.w	800c3fa <_printf_float+0x392>
 800c236:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c23a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c242:	d133      	bne.n	800c2ac <_printf_float+0x244>
 800c244:	4a38      	ldr	r2, [pc, #224]	; (800c328 <_printf_float+0x2c0>)
 800c246:	2301      	movs	r3, #1
 800c248:	4631      	mov	r1, r6
 800c24a:	4628      	mov	r0, r5
 800c24c:	47b8      	blx	r7
 800c24e:	3001      	adds	r0, #1
 800c250:	f43f af58 	beq.w	800c104 <_printf_float+0x9c>
 800c254:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c258:	429a      	cmp	r2, r3
 800c25a:	db02      	blt.n	800c262 <_printf_float+0x1fa>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	07d8      	lsls	r0, r3, #31
 800c260:	d50f      	bpl.n	800c282 <_printf_float+0x21a>
 800c262:	4653      	mov	r3, sl
 800c264:	465a      	mov	r2, fp
 800c266:	4631      	mov	r1, r6
 800c268:	4628      	mov	r0, r5
 800c26a:	47b8      	blx	r7
 800c26c:	3001      	adds	r0, #1
 800c26e:	f43f af49 	beq.w	800c104 <_printf_float+0x9c>
 800c272:	f04f 0800 	mov.w	r8, #0
 800c276:	f104 091a 	add.w	r9, r4, #26
 800c27a:	9b08      	ldr	r3, [sp, #32]
 800c27c:	3b01      	subs	r3, #1
 800c27e:	4543      	cmp	r3, r8
 800c280:	dc09      	bgt.n	800c296 <_printf_float+0x22e>
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	079b      	lsls	r3, r3, #30
 800c286:	f100 8108 	bmi.w	800c49a <_printf_float+0x432>
 800c28a:	68e0      	ldr	r0, [r4, #12]
 800c28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28e:	4298      	cmp	r0, r3
 800c290:	bfb8      	it	lt
 800c292:	4618      	movlt	r0, r3
 800c294:	e738      	b.n	800c108 <_printf_float+0xa0>
 800c296:	2301      	movs	r3, #1
 800c298:	464a      	mov	r2, r9
 800c29a:	4631      	mov	r1, r6
 800c29c:	4628      	mov	r0, r5
 800c29e:	47b8      	blx	r7
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	f43f af2f 	beq.w	800c104 <_printf_float+0x9c>
 800c2a6:	f108 0801 	add.w	r8, r8, #1
 800c2aa:	e7e6      	b.n	800c27a <_printf_float+0x212>
 800c2ac:	9b07      	ldr	r3, [sp, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	dc3c      	bgt.n	800c32c <_printf_float+0x2c4>
 800c2b2:	4a1d      	ldr	r2, [pc, #116]	; (800c328 <_printf_float+0x2c0>)
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	47b8      	blx	r7
 800c2bc:	3001      	adds	r0, #1
 800c2be:	f43f af21 	beq.w	800c104 <_printf_float+0x9c>
 800c2c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	d102      	bne.n	800c2d0 <_printf_float+0x268>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	07d9      	lsls	r1, r3, #31
 800c2ce:	d5d8      	bpl.n	800c282 <_printf_float+0x21a>
 800c2d0:	4653      	mov	r3, sl
 800c2d2:	465a      	mov	r2, fp
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b8      	blx	r7
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f43f af12 	beq.w	800c104 <_printf_float+0x9c>
 800c2e0:	f04f 0900 	mov.w	r9, #0
 800c2e4:	f104 0a1a 	add.w	sl, r4, #26
 800c2e8:	9b07      	ldr	r3, [sp, #28]
 800c2ea:	425b      	negs	r3, r3
 800c2ec:	454b      	cmp	r3, r9
 800c2ee:	dc01      	bgt.n	800c2f4 <_printf_float+0x28c>
 800c2f0:	9b08      	ldr	r3, [sp, #32]
 800c2f2:	e795      	b.n	800c220 <_printf_float+0x1b8>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	4652      	mov	r2, sl
 800c2f8:	4631      	mov	r1, r6
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b8      	blx	r7
 800c2fe:	3001      	adds	r0, #1
 800c300:	f43f af00 	beq.w	800c104 <_printf_float+0x9c>
 800c304:	f109 0901 	add.w	r9, r9, #1
 800c308:	e7ee      	b.n	800c2e8 <_printf_float+0x280>
 800c30a:	bf00      	nop
 800c30c:	f3af 8000 	nop.w
 800c310:	ffffffff 	.word	0xffffffff
 800c314:	7fefffff 	.word	0x7fefffff
 800c318:	0800ef38 	.word	0x0800ef38
 800c31c:	0800ef3c 	.word	0x0800ef3c
 800c320:	0800ef44 	.word	0x0800ef44
 800c324:	0800ef40 	.word	0x0800ef40
 800c328:	0800ef48 	.word	0x0800ef48
 800c32c:	9a08      	ldr	r2, [sp, #32]
 800c32e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c330:	429a      	cmp	r2, r3
 800c332:	bfa8      	it	ge
 800c334:	461a      	movge	r2, r3
 800c336:	2a00      	cmp	r2, #0
 800c338:	4691      	mov	r9, r2
 800c33a:	dc38      	bgt.n	800c3ae <_printf_float+0x346>
 800c33c:	2300      	movs	r3, #0
 800c33e:	9305      	str	r3, [sp, #20]
 800c340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c344:	f104 021a 	add.w	r2, r4, #26
 800c348:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c34a:	9905      	ldr	r1, [sp, #20]
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	eba3 0309 	sub.w	r3, r3, r9
 800c352:	428b      	cmp	r3, r1
 800c354:	dc33      	bgt.n	800c3be <_printf_float+0x356>
 800c356:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	db3c      	blt.n	800c3d8 <_printf_float+0x370>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	07da      	lsls	r2, r3, #31
 800c362:	d439      	bmi.n	800c3d8 <_printf_float+0x370>
 800c364:	9a08      	ldr	r2, [sp, #32]
 800c366:	9b04      	ldr	r3, [sp, #16]
 800c368:	9907      	ldr	r1, [sp, #28]
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	eba2 0901 	sub.w	r9, r2, r1
 800c370:	4599      	cmp	r9, r3
 800c372:	bfa8      	it	ge
 800c374:	4699      	movge	r9, r3
 800c376:	f1b9 0f00 	cmp.w	r9, #0
 800c37a:	dc35      	bgt.n	800c3e8 <_printf_float+0x380>
 800c37c:	f04f 0800 	mov.w	r8, #0
 800c380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c384:	f104 0a1a 	add.w	sl, r4, #26
 800c388:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c38c:	1a9b      	subs	r3, r3, r2
 800c38e:	eba3 0309 	sub.w	r3, r3, r9
 800c392:	4543      	cmp	r3, r8
 800c394:	f77f af75 	ble.w	800c282 <_printf_float+0x21a>
 800c398:	2301      	movs	r3, #1
 800c39a:	4652      	mov	r2, sl
 800c39c:	4631      	mov	r1, r6
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b8      	blx	r7
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	f43f aeae 	beq.w	800c104 <_printf_float+0x9c>
 800c3a8:	f108 0801 	add.w	r8, r8, #1
 800c3ac:	e7ec      	b.n	800c388 <_printf_float+0x320>
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4642      	mov	r2, r8
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	47b8      	blx	r7
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	d1bf      	bne.n	800c33c <_printf_float+0x2d4>
 800c3bc:	e6a2      	b.n	800c104 <_printf_float+0x9c>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	9204      	str	r2, [sp, #16]
 800c3c6:	47b8      	blx	r7
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	f43f ae9b 	beq.w	800c104 <_printf_float+0x9c>
 800c3ce:	9b05      	ldr	r3, [sp, #20]
 800c3d0:	9a04      	ldr	r2, [sp, #16]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	e7b7      	b.n	800c348 <_printf_float+0x2e0>
 800c3d8:	4653      	mov	r3, sl
 800c3da:	465a      	mov	r2, fp
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b8      	blx	r7
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d1be      	bne.n	800c364 <_printf_float+0x2fc>
 800c3e6:	e68d      	b.n	800c104 <_printf_float+0x9c>
 800c3e8:	9a04      	ldr	r2, [sp, #16]
 800c3ea:	464b      	mov	r3, r9
 800c3ec:	4442      	add	r2, r8
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d1c1      	bne.n	800c37c <_printf_float+0x314>
 800c3f8:	e684      	b.n	800c104 <_printf_float+0x9c>
 800c3fa:	9a08      	ldr	r2, [sp, #32]
 800c3fc:	2a01      	cmp	r2, #1
 800c3fe:	dc01      	bgt.n	800c404 <_printf_float+0x39c>
 800c400:	07db      	lsls	r3, r3, #31
 800c402:	d537      	bpl.n	800c474 <_printf_float+0x40c>
 800c404:	2301      	movs	r3, #1
 800c406:	4642      	mov	r2, r8
 800c408:	4631      	mov	r1, r6
 800c40a:	4628      	mov	r0, r5
 800c40c:	47b8      	blx	r7
 800c40e:	3001      	adds	r0, #1
 800c410:	f43f ae78 	beq.w	800c104 <_printf_float+0x9c>
 800c414:	4653      	mov	r3, sl
 800c416:	465a      	mov	r2, fp
 800c418:	4631      	mov	r1, r6
 800c41a:	4628      	mov	r0, r5
 800c41c:	47b8      	blx	r7
 800c41e:	3001      	adds	r0, #1
 800c420:	f43f ae70 	beq.w	800c104 <_printf_float+0x9c>
 800c424:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c428:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c430:	d01b      	beq.n	800c46a <_printf_float+0x402>
 800c432:	9b08      	ldr	r3, [sp, #32]
 800c434:	f108 0201 	add.w	r2, r8, #1
 800c438:	3b01      	subs	r3, #1
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b8      	blx	r7
 800c440:	3001      	adds	r0, #1
 800c442:	d10e      	bne.n	800c462 <_printf_float+0x3fa>
 800c444:	e65e      	b.n	800c104 <_printf_float+0x9c>
 800c446:	2301      	movs	r3, #1
 800c448:	464a      	mov	r2, r9
 800c44a:	4631      	mov	r1, r6
 800c44c:	4628      	mov	r0, r5
 800c44e:	47b8      	blx	r7
 800c450:	3001      	adds	r0, #1
 800c452:	f43f ae57 	beq.w	800c104 <_printf_float+0x9c>
 800c456:	f108 0801 	add.w	r8, r8, #1
 800c45a:	9b08      	ldr	r3, [sp, #32]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4543      	cmp	r3, r8
 800c460:	dcf1      	bgt.n	800c446 <_printf_float+0x3de>
 800c462:	9b04      	ldr	r3, [sp, #16]
 800c464:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c468:	e6db      	b.n	800c222 <_printf_float+0x1ba>
 800c46a:	f04f 0800 	mov.w	r8, #0
 800c46e:	f104 091a 	add.w	r9, r4, #26
 800c472:	e7f2      	b.n	800c45a <_printf_float+0x3f2>
 800c474:	2301      	movs	r3, #1
 800c476:	4642      	mov	r2, r8
 800c478:	e7df      	b.n	800c43a <_printf_float+0x3d2>
 800c47a:	2301      	movs	r3, #1
 800c47c:	464a      	mov	r2, r9
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	f43f ae3d 	beq.w	800c104 <_printf_float+0x9c>
 800c48a:	f108 0801 	add.w	r8, r8, #1
 800c48e:	68e3      	ldr	r3, [r4, #12]
 800c490:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c492:	1a5b      	subs	r3, r3, r1
 800c494:	4543      	cmp	r3, r8
 800c496:	dcf0      	bgt.n	800c47a <_printf_float+0x412>
 800c498:	e6f7      	b.n	800c28a <_printf_float+0x222>
 800c49a:	f04f 0800 	mov.w	r8, #0
 800c49e:	f104 0919 	add.w	r9, r4, #25
 800c4a2:	e7f4      	b.n	800c48e <_printf_float+0x426>

0800c4a4 <_printf_common>:
 800c4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a8:	4616      	mov	r6, r2
 800c4aa:	4699      	mov	r9, r3
 800c4ac:	688a      	ldr	r2, [r1, #8]
 800c4ae:	690b      	ldr	r3, [r1, #16]
 800c4b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	bfb8      	it	lt
 800c4b8:	4613      	movlt	r3, r2
 800c4ba:	6033      	str	r3, [r6, #0]
 800c4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	b10a      	cbz	r2, 800c4ca <_printf_common+0x26>
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	6033      	str	r3, [r6, #0]
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	0699      	lsls	r1, r3, #26
 800c4ce:	bf42      	ittt	mi
 800c4d0:	6833      	ldrmi	r3, [r6, #0]
 800c4d2:	3302      	addmi	r3, #2
 800c4d4:	6033      	strmi	r3, [r6, #0]
 800c4d6:	6825      	ldr	r5, [r4, #0]
 800c4d8:	f015 0506 	ands.w	r5, r5, #6
 800c4dc:	d106      	bne.n	800c4ec <_printf_common+0x48>
 800c4de:	f104 0a19 	add.w	sl, r4, #25
 800c4e2:	68e3      	ldr	r3, [r4, #12]
 800c4e4:	6832      	ldr	r2, [r6, #0]
 800c4e6:	1a9b      	subs	r3, r3, r2
 800c4e8:	42ab      	cmp	r3, r5
 800c4ea:	dc26      	bgt.n	800c53a <_printf_common+0x96>
 800c4ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4f0:	1e13      	subs	r3, r2, #0
 800c4f2:	6822      	ldr	r2, [r4, #0]
 800c4f4:	bf18      	it	ne
 800c4f6:	2301      	movne	r3, #1
 800c4f8:	0692      	lsls	r2, r2, #26
 800c4fa:	d42b      	bmi.n	800c554 <_printf_common+0xb0>
 800c4fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c500:	4649      	mov	r1, r9
 800c502:	4638      	mov	r0, r7
 800c504:	47c0      	blx	r8
 800c506:	3001      	adds	r0, #1
 800c508:	d01e      	beq.n	800c548 <_printf_common+0xa4>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	68e5      	ldr	r5, [r4, #12]
 800c50e:	6832      	ldr	r2, [r6, #0]
 800c510:	f003 0306 	and.w	r3, r3, #6
 800c514:	2b04      	cmp	r3, #4
 800c516:	bf08      	it	eq
 800c518:	1aad      	subeq	r5, r5, r2
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	6922      	ldr	r2, [r4, #16]
 800c51e:	bf0c      	ite	eq
 800c520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c524:	2500      	movne	r5, #0
 800c526:	4293      	cmp	r3, r2
 800c528:	bfc4      	itt	gt
 800c52a:	1a9b      	subgt	r3, r3, r2
 800c52c:	18ed      	addgt	r5, r5, r3
 800c52e:	2600      	movs	r6, #0
 800c530:	341a      	adds	r4, #26
 800c532:	42b5      	cmp	r5, r6
 800c534:	d11a      	bne.n	800c56c <_printf_common+0xc8>
 800c536:	2000      	movs	r0, #0
 800c538:	e008      	b.n	800c54c <_printf_common+0xa8>
 800c53a:	2301      	movs	r3, #1
 800c53c:	4652      	mov	r2, sl
 800c53e:	4649      	mov	r1, r9
 800c540:	4638      	mov	r0, r7
 800c542:	47c0      	blx	r8
 800c544:	3001      	adds	r0, #1
 800c546:	d103      	bne.n	800c550 <_printf_common+0xac>
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	3501      	adds	r5, #1
 800c552:	e7c6      	b.n	800c4e2 <_printf_common+0x3e>
 800c554:	18e1      	adds	r1, r4, r3
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	2030      	movs	r0, #48	; 0x30
 800c55a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c55e:	4422      	add	r2, r4
 800c560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c568:	3302      	adds	r3, #2
 800c56a:	e7c7      	b.n	800c4fc <_printf_common+0x58>
 800c56c:	2301      	movs	r3, #1
 800c56e:	4622      	mov	r2, r4
 800c570:	4649      	mov	r1, r9
 800c572:	4638      	mov	r0, r7
 800c574:	47c0      	blx	r8
 800c576:	3001      	adds	r0, #1
 800c578:	d0e6      	beq.n	800c548 <_printf_common+0xa4>
 800c57a:	3601      	adds	r6, #1
 800c57c:	e7d9      	b.n	800c532 <_printf_common+0x8e>
	...

0800c580 <_printf_i>:
 800c580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c584:	460c      	mov	r4, r1
 800c586:	4691      	mov	r9, r2
 800c588:	7e27      	ldrb	r7, [r4, #24]
 800c58a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c58c:	2f78      	cmp	r7, #120	; 0x78
 800c58e:	4680      	mov	r8, r0
 800c590:	469a      	mov	sl, r3
 800c592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c596:	d807      	bhi.n	800c5a8 <_printf_i+0x28>
 800c598:	2f62      	cmp	r7, #98	; 0x62
 800c59a:	d80a      	bhi.n	800c5b2 <_printf_i+0x32>
 800c59c:	2f00      	cmp	r7, #0
 800c59e:	f000 80d8 	beq.w	800c752 <_printf_i+0x1d2>
 800c5a2:	2f58      	cmp	r7, #88	; 0x58
 800c5a4:	f000 80a3 	beq.w	800c6ee <_printf_i+0x16e>
 800c5a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5b0:	e03a      	b.n	800c628 <_printf_i+0xa8>
 800c5b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5b6:	2b15      	cmp	r3, #21
 800c5b8:	d8f6      	bhi.n	800c5a8 <_printf_i+0x28>
 800c5ba:	a001      	add	r0, pc, #4	; (adr r0, 800c5c0 <_printf_i+0x40>)
 800c5bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c5c0:	0800c619 	.word	0x0800c619
 800c5c4:	0800c62d 	.word	0x0800c62d
 800c5c8:	0800c5a9 	.word	0x0800c5a9
 800c5cc:	0800c5a9 	.word	0x0800c5a9
 800c5d0:	0800c5a9 	.word	0x0800c5a9
 800c5d4:	0800c5a9 	.word	0x0800c5a9
 800c5d8:	0800c62d 	.word	0x0800c62d
 800c5dc:	0800c5a9 	.word	0x0800c5a9
 800c5e0:	0800c5a9 	.word	0x0800c5a9
 800c5e4:	0800c5a9 	.word	0x0800c5a9
 800c5e8:	0800c5a9 	.word	0x0800c5a9
 800c5ec:	0800c739 	.word	0x0800c739
 800c5f0:	0800c65d 	.word	0x0800c65d
 800c5f4:	0800c71b 	.word	0x0800c71b
 800c5f8:	0800c5a9 	.word	0x0800c5a9
 800c5fc:	0800c5a9 	.word	0x0800c5a9
 800c600:	0800c75b 	.word	0x0800c75b
 800c604:	0800c5a9 	.word	0x0800c5a9
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c5a9 	.word	0x0800c5a9
 800c610:	0800c5a9 	.word	0x0800c5a9
 800c614:	0800c723 	.word	0x0800c723
 800c618:	680b      	ldr	r3, [r1, #0]
 800c61a:	1d1a      	adds	r2, r3, #4
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	600a      	str	r2, [r1, #0]
 800c620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c628:	2301      	movs	r3, #1
 800c62a:	e0a3      	b.n	800c774 <_printf_i+0x1f4>
 800c62c:	6825      	ldr	r5, [r4, #0]
 800c62e:	6808      	ldr	r0, [r1, #0]
 800c630:	062e      	lsls	r6, r5, #24
 800c632:	f100 0304 	add.w	r3, r0, #4
 800c636:	d50a      	bpl.n	800c64e <_printf_i+0xce>
 800c638:	6805      	ldr	r5, [r0, #0]
 800c63a:	600b      	str	r3, [r1, #0]
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	da03      	bge.n	800c648 <_printf_i+0xc8>
 800c640:	232d      	movs	r3, #45	; 0x2d
 800c642:	426d      	negs	r5, r5
 800c644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c648:	485e      	ldr	r0, [pc, #376]	; (800c7c4 <_printf_i+0x244>)
 800c64a:	230a      	movs	r3, #10
 800c64c:	e019      	b.n	800c682 <_printf_i+0x102>
 800c64e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c652:	6805      	ldr	r5, [r0, #0]
 800c654:	600b      	str	r3, [r1, #0]
 800c656:	bf18      	it	ne
 800c658:	b22d      	sxthne	r5, r5
 800c65a:	e7ef      	b.n	800c63c <_printf_i+0xbc>
 800c65c:	680b      	ldr	r3, [r1, #0]
 800c65e:	6825      	ldr	r5, [r4, #0]
 800c660:	1d18      	adds	r0, r3, #4
 800c662:	6008      	str	r0, [r1, #0]
 800c664:	0628      	lsls	r0, r5, #24
 800c666:	d501      	bpl.n	800c66c <_printf_i+0xec>
 800c668:	681d      	ldr	r5, [r3, #0]
 800c66a:	e002      	b.n	800c672 <_printf_i+0xf2>
 800c66c:	0669      	lsls	r1, r5, #25
 800c66e:	d5fb      	bpl.n	800c668 <_printf_i+0xe8>
 800c670:	881d      	ldrh	r5, [r3, #0]
 800c672:	4854      	ldr	r0, [pc, #336]	; (800c7c4 <_printf_i+0x244>)
 800c674:	2f6f      	cmp	r7, #111	; 0x6f
 800c676:	bf0c      	ite	eq
 800c678:	2308      	moveq	r3, #8
 800c67a:	230a      	movne	r3, #10
 800c67c:	2100      	movs	r1, #0
 800c67e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c682:	6866      	ldr	r6, [r4, #4]
 800c684:	60a6      	str	r6, [r4, #8]
 800c686:	2e00      	cmp	r6, #0
 800c688:	bfa2      	ittt	ge
 800c68a:	6821      	ldrge	r1, [r4, #0]
 800c68c:	f021 0104 	bicge.w	r1, r1, #4
 800c690:	6021      	strge	r1, [r4, #0]
 800c692:	b90d      	cbnz	r5, 800c698 <_printf_i+0x118>
 800c694:	2e00      	cmp	r6, #0
 800c696:	d04d      	beq.n	800c734 <_printf_i+0x1b4>
 800c698:	4616      	mov	r6, r2
 800c69a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c69e:	fb03 5711 	mls	r7, r3, r1, r5
 800c6a2:	5dc7      	ldrb	r7, [r0, r7]
 800c6a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6a8:	462f      	mov	r7, r5
 800c6aa:	42bb      	cmp	r3, r7
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	d9f4      	bls.n	800c69a <_printf_i+0x11a>
 800c6b0:	2b08      	cmp	r3, #8
 800c6b2:	d10b      	bne.n	800c6cc <_printf_i+0x14c>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	07df      	lsls	r7, r3, #31
 800c6b8:	d508      	bpl.n	800c6cc <_printf_i+0x14c>
 800c6ba:	6923      	ldr	r3, [r4, #16]
 800c6bc:	6861      	ldr	r1, [r4, #4]
 800c6be:	4299      	cmp	r1, r3
 800c6c0:	bfde      	ittt	le
 800c6c2:	2330      	movle	r3, #48	; 0x30
 800c6c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6cc:	1b92      	subs	r2, r2, r6
 800c6ce:	6122      	str	r2, [r4, #16]
 800c6d0:	f8cd a000 	str.w	sl, [sp]
 800c6d4:	464b      	mov	r3, r9
 800c6d6:	aa03      	add	r2, sp, #12
 800c6d8:	4621      	mov	r1, r4
 800c6da:	4640      	mov	r0, r8
 800c6dc:	f7ff fee2 	bl	800c4a4 <_printf_common>
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d14c      	bne.n	800c77e <_printf_i+0x1fe>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	b004      	add	sp, #16
 800c6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ee:	4835      	ldr	r0, [pc, #212]	; (800c7c4 <_printf_i+0x244>)
 800c6f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	680e      	ldr	r6, [r1, #0]
 800c6f8:	061f      	lsls	r7, r3, #24
 800c6fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800c6fe:	600e      	str	r6, [r1, #0]
 800c700:	d514      	bpl.n	800c72c <_printf_i+0x1ac>
 800c702:	07d9      	lsls	r1, r3, #31
 800c704:	bf44      	itt	mi
 800c706:	f043 0320 	orrmi.w	r3, r3, #32
 800c70a:	6023      	strmi	r3, [r4, #0]
 800c70c:	b91d      	cbnz	r5, 800c716 <_printf_i+0x196>
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	f023 0320 	bic.w	r3, r3, #32
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	2310      	movs	r3, #16
 800c718:	e7b0      	b.n	800c67c <_printf_i+0xfc>
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	f043 0320 	orr.w	r3, r3, #32
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	2378      	movs	r3, #120	; 0x78
 800c724:	4828      	ldr	r0, [pc, #160]	; (800c7c8 <_printf_i+0x248>)
 800c726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c72a:	e7e3      	b.n	800c6f4 <_printf_i+0x174>
 800c72c:	065e      	lsls	r6, r3, #25
 800c72e:	bf48      	it	mi
 800c730:	b2ad      	uxthmi	r5, r5
 800c732:	e7e6      	b.n	800c702 <_printf_i+0x182>
 800c734:	4616      	mov	r6, r2
 800c736:	e7bb      	b.n	800c6b0 <_printf_i+0x130>
 800c738:	680b      	ldr	r3, [r1, #0]
 800c73a:	6826      	ldr	r6, [r4, #0]
 800c73c:	6960      	ldr	r0, [r4, #20]
 800c73e:	1d1d      	adds	r5, r3, #4
 800c740:	600d      	str	r5, [r1, #0]
 800c742:	0635      	lsls	r5, r6, #24
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	d501      	bpl.n	800c74c <_printf_i+0x1cc>
 800c748:	6018      	str	r0, [r3, #0]
 800c74a:	e002      	b.n	800c752 <_printf_i+0x1d2>
 800c74c:	0671      	lsls	r1, r6, #25
 800c74e:	d5fb      	bpl.n	800c748 <_printf_i+0x1c8>
 800c750:	8018      	strh	r0, [r3, #0]
 800c752:	2300      	movs	r3, #0
 800c754:	6123      	str	r3, [r4, #16]
 800c756:	4616      	mov	r6, r2
 800c758:	e7ba      	b.n	800c6d0 <_printf_i+0x150>
 800c75a:	680b      	ldr	r3, [r1, #0]
 800c75c:	1d1a      	adds	r2, r3, #4
 800c75e:	600a      	str	r2, [r1, #0]
 800c760:	681e      	ldr	r6, [r3, #0]
 800c762:	6862      	ldr	r2, [r4, #4]
 800c764:	2100      	movs	r1, #0
 800c766:	4630      	mov	r0, r6
 800c768:	f7f3 fd72 	bl	8000250 <memchr>
 800c76c:	b108      	cbz	r0, 800c772 <_printf_i+0x1f2>
 800c76e:	1b80      	subs	r0, r0, r6
 800c770:	6060      	str	r0, [r4, #4]
 800c772:	6863      	ldr	r3, [r4, #4]
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	2300      	movs	r3, #0
 800c778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c77c:	e7a8      	b.n	800c6d0 <_printf_i+0x150>
 800c77e:	6923      	ldr	r3, [r4, #16]
 800c780:	4632      	mov	r2, r6
 800c782:	4649      	mov	r1, r9
 800c784:	4640      	mov	r0, r8
 800c786:	47d0      	blx	sl
 800c788:	3001      	adds	r0, #1
 800c78a:	d0ab      	beq.n	800c6e4 <_printf_i+0x164>
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	079b      	lsls	r3, r3, #30
 800c790:	d413      	bmi.n	800c7ba <_printf_i+0x23a>
 800c792:	68e0      	ldr	r0, [r4, #12]
 800c794:	9b03      	ldr	r3, [sp, #12]
 800c796:	4298      	cmp	r0, r3
 800c798:	bfb8      	it	lt
 800c79a:	4618      	movlt	r0, r3
 800c79c:	e7a4      	b.n	800c6e8 <_printf_i+0x168>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	47d0      	blx	sl
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d09b      	beq.n	800c6e4 <_printf_i+0x164>
 800c7ac:	3501      	adds	r5, #1
 800c7ae:	68e3      	ldr	r3, [r4, #12]
 800c7b0:	9903      	ldr	r1, [sp, #12]
 800c7b2:	1a5b      	subs	r3, r3, r1
 800c7b4:	42ab      	cmp	r3, r5
 800c7b6:	dcf2      	bgt.n	800c79e <_printf_i+0x21e>
 800c7b8:	e7eb      	b.n	800c792 <_printf_i+0x212>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	f104 0619 	add.w	r6, r4, #25
 800c7c0:	e7f5      	b.n	800c7ae <_printf_i+0x22e>
 800c7c2:	bf00      	nop
 800c7c4:	0800ef4a 	.word	0x0800ef4a
 800c7c8:	0800ef5b 	.word	0x0800ef5b

0800c7cc <siprintf>:
 800c7cc:	b40e      	push	{r1, r2, r3}
 800c7ce:	b500      	push	{lr}
 800c7d0:	b09c      	sub	sp, #112	; 0x70
 800c7d2:	ab1d      	add	r3, sp, #116	; 0x74
 800c7d4:	9002      	str	r0, [sp, #8]
 800c7d6:	9006      	str	r0, [sp, #24]
 800c7d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7dc:	4809      	ldr	r0, [pc, #36]	; (800c804 <siprintf+0x38>)
 800c7de:	9107      	str	r1, [sp, #28]
 800c7e0:	9104      	str	r1, [sp, #16]
 800c7e2:	4909      	ldr	r1, [pc, #36]	; (800c808 <siprintf+0x3c>)
 800c7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7e8:	9105      	str	r1, [sp, #20]
 800c7ea:	6800      	ldr	r0, [r0, #0]
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	a902      	add	r1, sp, #8
 800c7f0:	f001 faca 	bl	800dd88 <_svfiprintf_r>
 800c7f4:	9b02      	ldr	r3, [sp, #8]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	701a      	strb	r2, [r3, #0]
 800c7fa:	b01c      	add	sp, #112	; 0x70
 800c7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c800:	b003      	add	sp, #12
 800c802:	4770      	bx	lr
 800c804:	200000dc 	.word	0x200000dc
 800c808:	ffff0208 	.word	0xffff0208

0800c80c <quorem>:
 800c80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	6903      	ldr	r3, [r0, #16]
 800c812:	690c      	ldr	r4, [r1, #16]
 800c814:	42a3      	cmp	r3, r4
 800c816:	4607      	mov	r7, r0
 800c818:	f2c0 8081 	blt.w	800c91e <quorem+0x112>
 800c81c:	3c01      	subs	r4, #1
 800c81e:	f101 0814 	add.w	r8, r1, #20
 800c822:	f100 0514 	add.w	r5, r0, #20
 800c826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c82a:	9301      	str	r3, [sp, #4]
 800c82c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c834:	3301      	adds	r3, #1
 800c836:	429a      	cmp	r2, r3
 800c838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c83c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c840:	fbb2 f6f3 	udiv	r6, r2, r3
 800c844:	d331      	bcc.n	800c8aa <quorem+0x9e>
 800c846:	f04f 0e00 	mov.w	lr, #0
 800c84a:	4640      	mov	r0, r8
 800c84c:	46ac      	mov	ip, r5
 800c84e:	46f2      	mov	sl, lr
 800c850:	f850 2b04 	ldr.w	r2, [r0], #4
 800c854:	b293      	uxth	r3, r2
 800c856:	fb06 e303 	mla	r3, r6, r3, lr
 800c85a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c85e:	b29b      	uxth	r3, r3
 800c860:	ebaa 0303 	sub.w	r3, sl, r3
 800c864:	0c12      	lsrs	r2, r2, #16
 800c866:	f8dc a000 	ldr.w	sl, [ip]
 800c86a:	fb06 e202 	mla	r2, r6, r2, lr
 800c86e:	fa13 f38a 	uxtah	r3, r3, sl
 800c872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c876:	fa1f fa82 	uxth.w	sl, r2
 800c87a:	f8dc 2000 	ldr.w	r2, [ip]
 800c87e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c886:	b29b      	uxth	r3, r3
 800c888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c88c:	4581      	cmp	r9, r0
 800c88e:	f84c 3b04 	str.w	r3, [ip], #4
 800c892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c896:	d2db      	bcs.n	800c850 <quorem+0x44>
 800c898:	f855 300b 	ldr.w	r3, [r5, fp]
 800c89c:	b92b      	cbnz	r3, 800c8aa <quorem+0x9e>
 800c89e:	9b01      	ldr	r3, [sp, #4]
 800c8a0:	3b04      	subs	r3, #4
 800c8a2:	429d      	cmp	r5, r3
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	d32e      	bcc.n	800c906 <quorem+0xfa>
 800c8a8:	613c      	str	r4, [r7, #16]
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	f001 f856 	bl	800d95c <__mcmp>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	db24      	blt.n	800c8fe <quorem+0xf2>
 800c8b4:	3601      	adds	r6, #1
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f04f 0c00 	mov.w	ip, #0
 800c8bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8c0:	f8d0 e000 	ldr.w	lr, [r0]
 800c8c4:	b293      	uxth	r3, r2
 800c8c6:	ebac 0303 	sub.w	r3, ip, r3
 800c8ca:	0c12      	lsrs	r2, r2, #16
 800c8cc:	fa13 f38e 	uxtah	r3, r3, lr
 800c8d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c8d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8de:	45c1      	cmp	r9, r8
 800c8e0:	f840 3b04 	str.w	r3, [r0], #4
 800c8e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c8e8:	d2e8      	bcs.n	800c8bc <quorem+0xb0>
 800c8ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8f2:	b922      	cbnz	r2, 800c8fe <quorem+0xf2>
 800c8f4:	3b04      	subs	r3, #4
 800c8f6:	429d      	cmp	r5, r3
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	d30a      	bcc.n	800c912 <quorem+0x106>
 800c8fc:	613c      	str	r4, [r7, #16]
 800c8fe:	4630      	mov	r0, r6
 800c900:	b003      	add	sp, #12
 800c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c906:	6812      	ldr	r2, [r2, #0]
 800c908:	3b04      	subs	r3, #4
 800c90a:	2a00      	cmp	r2, #0
 800c90c:	d1cc      	bne.n	800c8a8 <quorem+0x9c>
 800c90e:	3c01      	subs	r4, #1
 800c910:	e7c7      	b.n	800c8a2 <quorem+0x96>
 800c912:	6812      	ldr	r2, [r2, #0]
 800c914:	3b04      	subs	r3, #4
 800c916:	2a00      	cmp	r2, #0
 800c918:	d1f0      	bne.n	800c8fc <quorem+0xf0>
 800c91a:	3c01      	subs	r4, #1
 800c91c:	e7eb      	b.n	800c8f6 <quorem+0xea>
 800c91e:	2000      	movs	r0, #0
 800c920:	e7ee      	b.n	800c900 <quorem+0xf4>
 800c922:	0000      	movs	r0, r0
 800c924:	0000      	movs	r0, r0
	...

0800c928 <_dtoa_r>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	ec59 8b10 	vmov	r8, r9, d0
 800c930:	b095      	sub	sp, #84	; 0x54
 800c932:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c934:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c936:	9107      	str	r1, [sp, #28]
 800c938:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c93c:	4606      	mov	r6, r0
 800c93e:	9209      	str	r2, [sp, #36]	; 0x24
 800c940:	9310      	str	r3, [sp, #64]	; 0x40
 800c942:	b975      	cbnz	r5, 800c962 <_dtoa_r+0x3a>
 800c944:	2010      	movs	r0, #16
 800c946:	f000 fd75 	bl	800d434 <malloc>
 800c94a:	4602      	mov	r2, r0
 800c94c:	6270      	str	r0, [r6, #36]	; 0x24
 800c94e:	b920      	cbnz	r0, 800c95a <_dtoa_r+0x32>
 800c950:	4bab      	ldr	r3, [pc, #684]	; (800cc00 <_dtoa_r+0x2d8>)
 800c952:	21ea      	movs	r1, #234	; 0xea
 800c954:	48ab      	ldr	r0, [pc, #684]	; (800cc04 <_dtoa_r+0x2dc>)
 800c956:	f001 fb27 	bl	800dfa8 <__assert_func>
 800c95a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c95e:	6005      	str	r5, [r0, #0]
 800c960:	60c5      	str	r5, [r0, #12]
 800c962:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c964:	6819      	ldr	r1, [r3, #0]
 800c966:	b151      	cbz	r1, 800c97e <_dtoa_r+0x56>
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	604a      	str	r2, [r1, #4]
 800c96c:	2301      	movs	r3, #1
 800c96e:	4093      	lsls	r3, r2
 800c970:	608b      	str	r3, [r1, #8]
 800c972:	4630      	mov	r0, r6
 800c974:	f000 fdb4 	bl	800d4e0 <_Bfree>
 800c978:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	f1b9 0300 	subs.w	r3, r9, #0
 800c982:	bfbb      	ittet	lt
 800c984:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c988:	9303      	strlt	r3, [sp, #12]
 800c98a:	2300      	movge	r3, #0
 800c98c:	2201      	movlt	r2, #1
 800c98e:	bfac      	ite	ge
 800c990:	6023      	strge	r3, [r4, #0]
 800c992:	6022      	strlt	r2, [r4, #0]
 800c994:	4b9c      	ldr	r3, [pc, #624]	; (800cc08 <_dtoa_r+0x2e0>)
 800c996:	9c03      	ldr	r4, [sp, #12]
 800c998:	43a3      	bics	r3, r4
 800c99a:	d11a      	bne.n	800c9d2 <_dtoa_r+0xaa>
 800c99c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c99e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c9a8:	ea53 0308 	orrs.w	r3, r3, r8
 800c9ac:	f000 8512 	beq.w	800d3d4 <_dtoa_r+0xaac>
 800c9b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c9b2:	b953      	cbnz	r3, 800c9ca <_dtoa_r+0xa2>
 800c9b4:	4b95      	ldr	r3, [pc, #596]	; (800cc0c <_dtoa_r+0x2e4>)
 800c9b6:	e01f      	b.n	800c9f8 <_dtoa_r+0xd0>
 800c9b8:	4b95      	ldr	r3, [pc, #596]	; (800cc10 <_dtoa_r+0x2e8>)
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	9800      	ldr	r0, [sp, #0]
 800c9c4:	b015      	add	sp, #84	; 0x54
 800c9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ca:	4b90      	ldr	r3, [pc, #576]	; (800cc0c <_dtoa_r+0x2e4>)
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	3303      	adds	r3, #3
 800c9d0:	e7f5      	b.n	800c9be <_dtoa_r+0x96>
 800c9d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9de:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c9e2:	d10b      	bne.n	800c9fc <_dtoa_r+0xd4>
 800c9e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 84ee 	beq.w	800d3ce <_dtoa_r+0xaa6>
 800c9f2:	4888      	ldr	r0, [pc, #544]	; (800cc14 <_dtoa_r+0x2ec>)
 800c9f4:	6018      	str	r0, [r3, #0]
 800c9f6:	1e43      	subs	r3, r0, #1
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	e7e2      	b.n	800c9c2 <_dtoa_r+0x9a>
 800c9fc:	a913      	add	r1, sp, #76	; 0x4c
 800c9fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ca02:	aa12      	add	r2, sp, #72	; 0x48
 800ca04:	4630      	mov	r0, r6
 800ca06:	f001 f84d 	bl	800daa4 <__d2b>
 800ca0a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ca0e:	4605      	mov	r5, r0
 800ca10:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca12:	2900      	cmp	r1, #0
 800ca14:	d047      	beq.n	800caa6 <_dtoa_r+0x17e>
 800ca16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ca18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca20:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ca24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca28:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ca2c:	2400      	movs	r4, #0
 800ca2e:	ec43 2b16 	vmov	d6, r2, r3
 800ca32:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ca36:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800cbe8 <_dtoa_r+0x2c0>
 800ca3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca3e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800cbf0 <_dtoa_r+0x2c8>
 800ca42:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ca46:	eeb0 7b46 	vmov.f64	d7, d6
 800ca4a:	ee06 1a90 	vmov	s13, r1
 800ca4e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ca52:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800cbf8 <_dtoa_r+0x2d0>
 800ca56:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ca5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ca5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	ee16 ba90 	vmov	fp, s13
 800ca6a:	9411      	str	r4, [sp, #68]	; 0x44
 800ca6c:	d508      	bpl.n	800ca80 <_dtoa_r+0x158>
 800ca6e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ca72:	eeb4 6b47 	vcmp.f64	d6, d7
 800ca76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7a:	bf18      	it	ne
 800ca7c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ca80:	f1bb 0f16 	cmp.w	fp, #22
 800ca84:	d832      	bhi.n	800caec <_dtoa_r+0x1c4>
 800ca86:	4b64      	ldr	r3, [pc, #400]	; (800cc18 <_dtoa_r+0x2f0>)
 800ca88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca8c:	ed93 7b00 	vldr	d7, [r3]
 800ca90:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ca94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9c:	d501      	bpl.n	800caa2 <_dtoa_r+0x17a>
 800ca9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800caa2:	2300      	movs	r3, #0
 800caa4:	e023      	b.n	800caee <_dtoa_r+0x1c6>
 800caa6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800caa8:	4401      	add	r1, r0
 800caaa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800caae:	2b20      	cmp	r3, #32
 800cab0:	bfc3      	ittte	gt
 800cab2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cab6:	fa04 f303 	lslgt.w	r3, r4, r3
 800caba:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800cabe:	f1c3 0320 	rsble	r3, r3, #32
 800cac2:	bfc6      	itte	gt
 800cac4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800cac8:	ea43 0308 	orrgt.w	r3, r3, r8
 800cacc:	fa08 f303 	lslle.w	r3, r8, r3
 800cad0:	ee07 3a90 	vmov	s15, r3
 800cad4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cad8:	3901      	subs	r1, #1
 800cada:	ed8d 7b00 	vstr	d7, [sp]
 800cade:	9c01      	ldr	r4, [sp, #4]
 800cae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cae4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800cae8:	2401      	movs	r4, #1
 800caea:	e7a0      	b.n	800ca2e <_dtoa_r+0x106>
 800caec:	2301      	movs	r3, #1
 800caee:	930f      	str	r3, [sp, #60]	; 0x3c
 800caf0:	1a43      	subs	r3, r0, r1
 800caf2:	1e5a      	subs	r2, r3, #1
 800caf4:	bf45      	ittet	mi
 800caf6:	f1c3 0301 	rsbmi	r3, r3, #1
 800cafa:	9305      	strmi	r3, [sp, #20]
 800cafc:	2300      	movpl	r3, #0
 800cafe:	2300      	movmi	r3, #0
 800cb00:	9206      	str	r2, [sp, #24]
 800cb02:	bf54      	ite	pl
 800cb04:	9305      	strpl	r3, [sp, #20]
 800cb06:	9306      	strmi	r3, [sp, #24]
 800cb08:	f1bb 0f00 	cmp.w	fp, #0
 800cb0c:	db18      	blt.n	800cb40 <_dtoa_r+0x218>
 800cb0e:	9b06      	ldr	r3, [sp, #24]
 800cb10:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800cb14:	445b      	add	r3, fp
 800cb16:	9306      	str	r3, [sp, #24]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9a07      	ldr	r2, [sp, #28]
 800cb1c:	2a09      	cmp	r2, #9
 800cb1e:	d849      	bhi.n	800cbb4 <_dtoa_r+0x28c>
 800cb20:	2a05      	cmp	r2, #5
 800cb22:	bfc4      	itt	gt
 800cb24:	3a04      	subgt	r2, #4
 800cb26:	9207      	strgt	r2, [sp, #28]
 800cb28:	9a07      	ldr	r2, [sp, #28]
 800cb2a:	f1a2 0202 	sub.w	r2, r2, #2
 800cb2e:	bfcc      	ite	gt
 800cb30:	2400      	movgt	r4, #0
 800cb32:	2401      	movle	r4, #1
 800cb34:	2a03      	cmp	r2, #3
 800cb36:	d848      	bhi.n	800cbca <_dtoa_r+0x2a2>
 800cb38:	e8df f002 	tbb	[pc, r2]
 800cb3c:	3a2c2e0b 	.word	0x3a2c2e0b
 800cb40:	9b05      	ldr	r3, [sp, #20]
 800cb42:	2200      	movs	r2, #0
 800cb44:	eba3 030b 	sub.w	r3, r3, fp
 800cb48:	9305      	str	r3, [sp, #20]
 800cb4a:	920e      	str	r2, [sp, #56]	; 0x38
 800cb4c:	f1cb 0300 	rsb	r3, fp, #0
 800cb50:	e7e3      	b.n	800cb1a <_dtoa_r+0x1f2>
 800cb52:	2200      	movs	r2, #0
 800cb54:	9208      	str	r2, [sp, #32]
 800cb56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb58:	2a00      	cmp	r2, #0
 800cb5a:	dc39      	bgt.n	800cbd0 <_dtoa_r+0x2a8>
 800cb5c:	f04f 0a01 	mov.w	sl, #1
 800cb60:	46d1      	mov	r9, sl
 800cb62:	4652      	mov	r2, sl
 800cb64:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cb68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	6079      	str	r1, [r7, #4]
 800cb6e:	2004      	movs	r0, #4
 800cb70:	f100 0c14 	add.w	ip, r0, #20
 800cb74:	4594      	cmp	ip, r2
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	d92f      	bls.n	800cbda <_dtoa_r+0x2b2>
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	930c      	str	r3, [sp, #48]	; 0x30
 800cb7e:	f000 fc6f 	bl	800d460 <_Balloc>
 800cb82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb84:	9000      	str	r0, [sp, #0]
 800cb86:	4602      	mov	r2, r0
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d149      	bne.n	800cc20 <_dtoa_r+0x2f8>
 800cb8c:	4b23      	ldr	r3, [pc, #140]	; (800cc1c <_dtoa_r+0x2f4>)
 800cb8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb92:	e6df      	b.n	800c954 <_dtoa_r+0x2c>
 800cb94:	2201      	movs	r2, #1
 800cb96:	e7dd      	b.n	800cb54 <_dtoa_r+0x22c>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	9208      	str	r2, [sp, #32]
 800cb9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb9e:	eb0b 0a02 	add.w	sl, fp, r2
 800cba2:	f10a 0901 	add.w	r9, sl, #1
 800cba6:	464a      	mov	r2, r9
 800cba8:	2a01      	cmp	r2, #1
 800cbaa:	bfb8      	it	lt
 800cbac:	2201      	movlt	r2, #1
 800cbae:	e7db      	b.n	800cb68 <_dtoa_r+0x240>
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	e7f2      	b.n	800cb9a <_dtoa_r+0x272>
 800cbb4:	2401      	movs	r4, #1
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cbbc:	f04f 3aff 	mov.w	sl, #4294967295
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	46d1      	mov	r9, sl
 800cbc4:	2212      	movs	r2, #18
 800cbc6:	9109      	str	r1, [sp, #36]	; 0x24
 800cbc8:	e7ce      	b.n	800cb68 <_dtoa_r+0x240>
 800cbca:	2201      	movs	r2, #1
 800cbcc:	9208      	str	r2, [sp, #32]
 800cbce:	e7f5      	b.n	800cbbc <_dtoa_r+0x294>
 800cbd0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800cbd4:	46d1      	mov	r9, sl
 800cbd6:	4652      	mov	r2, sl
 800cbd8:	e7c6      	b.n	800cb68 <_dtoa_r+0x240>
 800cbda:	3101      	adds	r1, #1
 800cbdc:	6079      	str	r1, [r7, #4]
 800cbde:	0040      	lsls	r0, r0, #1
 800cbe0:	e7c6      	b.n	800cb70 <_dtoa_r+0x248>
 800cbe2:	bf00      	nop
 800cbe4:	f3af 8000 	nop.w
 800cbe8:	636f4361 	.word	0x636f4361
 800cbec:	3fd287a7 	.word	0x3fd287a7
 800cbf0:	8b60c8b3 	.word	0x8b60c8b3
 800cbf4:	3fc68a28 	.word	0x3fc68a28
 800cbf8:	509f79fb 	.word	0x509f79fb
 800cbfc:	3fd34413 	.word	0x3fd34413
 800cc00:	0800ef79 	.word	0x0800ef79
 800cc04:	0800ef90 	.word	0x0800ef90
 800cc08:	7ff00000 	.word	0x7ff00000
 800cc0c:	0800ef75 	.word	0x0800ef75
 800cc10:	0800ef6c 	.word	0x0800ef6c
 800cc14:	0800ef49 	.word	0x0800ef49
 800cc18:	0800f088 	.word	0x0800f088
 800cc1c:	0800efef 	.word	0x0800efef
 800cc20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cc22:	9900      	ldr	r1, [sp, #0]
 800cc24:	6011      	str	r1, [r2, #0]
 800cc26:	f1b9 0f0e 	cmp.w	r9, #14
 800cc2a:	d872      	bhi.n	800cd12 <_dtoa_r+0x3ea>
 800cc2c:	2c00      	cmp	r4, #0
 800cc2e:	d070      	beq.n	800cd12 <_dtoa_r+0x3ea>
 800cc30:	f1bb 0f00 	cmp.w	fp, #0
 800cc34:	f340 80a6 	ble.w	800cd84 <_dtoa_r+0x45c>
 800cc38:	49ca      	ldr	r1, [pc, #808]	; (800cf64 <_dtoa_r+0x63c>)
 800cc3a:	f00b 020f 	and.w	r2, fp, #15
 800cc3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cc42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cc46:	ed92 7b00 	vldr	d7, [r2]
 800cc4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800cc4e:	f000 808d 	beq.w	800cd6c <_dtoa_r+0x444>
 800cc52:	4ac5      	ldr	r2, [pc, #788]	; (800cf68 <_dtoa_r+0x640>)
 800cc54:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800cc58:	ed92 6b08 	vldr	d6, [r2, #32]
 800cc5c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800cc60:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cc64:	f001 010f 	and.w	r1, r1, #15
 800cc68:	2203      	movs	r2, #3
 800cc6a:	48bf      	ldr	r0, [pc, #764]	; (800cf68 <_dtoa_r+0x640>)
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	d17f      	bne.n	800cd70 <_dtoa_r+0x448>
 800cc70:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cc74:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cc78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cc7e:	2900      	cmp	r1, #0
 800cc80:	f000 80b2 	beq.w	800cde8 <_dtoa_r+0x4c0>
 800cc84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cc88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	f140 80a8 	bpl.w	800cde8 <_dtoa_r+0x4c0>
 800cc98:	f1b9 0f00 	cmp.w	r9, #0
 800cc9c:	f000 80a4 	beq.w	800cde8 <_dtoa_r+0x4c0>
 800cca0:	f1ba 0f00 	cmp.w	sl, #0
 800cca4:	dd31      	ble.n	800cd0a <_dtoa_r+0x3e2>
 800cca6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ccaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ccae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ccb2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ccb6:	3201      	adds	r2, #1
 800ccb8:	4650      	mov	r0, sl
 800ccba:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ccbe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ccc2:	ee07 2a90 	vmov	s15, r2
 800ccc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ccca:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ccce:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ccd2:	9c03      	ldr	r4, [sp, #12]
 800ccd4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ccd8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	f040 8086 	bne.w	800cdee <_dtoa_r+0x4c6>
 800cce2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cce6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ccea:	ec42 1b17 	vmov	d7, r1, r2
 800ccee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf6:	f300 8272 	bgt.w	800d1de <_dtoa_r+0x8b6>
 800ccfa:	eeb1 7b47 	vneg.f64	d7, d7
 800ccfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd06:	f100 8267 	bmi.w	800d1d8 <_dtoa_r+0x8b0>
 800cd0a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800cd0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cd12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	f2c0 8129 	blt.w	800cf6c <_dtoa_r+0x644>
 800cd1a:	f1bb 0f0e 	cmp.w	fp, #14
 800cd1e:	f300 8125 	bgt.w	800cf6c <_dtoa_r+0x644>
 800cd22:	4b90      	ldr	r3, [pc, #576]	; (800cf64 <_dtoa_r+0x63c>)
 800cd24:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd28:	ed93 6b00 	vldr	d6, [r3]
 800cd2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f280 80c3 	bge.w	800ceba <_dtoa_r+0x592>
 800cd34:	f1b9 0f00 	cmp.w	r9, #0
 800cd38:	f300 80bf 	bgt.w	800ceba <_dtoa_r+0x592>
 800cd3c:	f040 824c 	bne.w	800d1d8 <_dtoa_r+0x8b0>
 800cd40:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cd44:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cd48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd54:	464c      	mov	r4, r9
 800cd56:	464f      	mov	r7, r9
 800cd58:	f280 8222 	bge.w	800d1a0 <_dtoa_r+0x878>
 800cd5c:	f8dd 8000 	ldr.w	r8, [sp]
 800cd60:	2331      	movs	r3, #49	; 0x31
 800cd62:	f808 3b01 	strb.w	r3, [r8], #1
 800cd66:	f10b 0b01 	add.w	fp, fp, #1
 800cd6a:	e21e      	b.n	800d1aa <_dtoa_r+0x882>
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	e77c      	b.n	800cc6a <_dtoa_r+0x342>
 800cd70:	07cc      	lsls	r4, r1, #31
 800cd72:	d504      	bpl.n	800cd7e <_dtoa_r+0x456>
 800cd74:	ed90 6b00 	vldr	d6, [r0]
 800cd78:	3201      	adds	r2, #1
 800cd7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd7e:	1049      	asrs	r1, r1, #1
 800cd80:	3008      	adds	r0, #8
 800cd82:	e773      	b.n	800cc6c <_dtoa_r+0x344>
 800cd84:	d02e      	beq.n	800cde4 <_dtoa_r+0x4bc>
 800cd86:	f1cb 0100 	rsb	r1, fp, #0
 800cd8a:	4a76      	ldr	r2, [pc, #472]	; (800cf64 <_dtoa_r+0x63c>)
 800cd8c:	f001 000f 	and.w	r0, r1, #15
 800cd90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cd94:	ed92 7b00 	vldr	d7, [r2]
 800cd98:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800cd9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cda0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cda4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800cda8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800cdac:	486e      	ldr	r0, [pc, #440]	; (800cf68 <_dtoa_r+0x640>)
 800cdae:	1109      	asrs	r1, r1, #4
 800cdb0:	2400      	movs	r4, #0
 800cdb2:	2202      	movs	r2, #2
 800cdb4:	b939      	cbnz	r1, 800cdc6 <_dtoa_r+0x49e>
 800cdb6:	2c00      	cmp	r4, #0
 800cdb8:	f43f af60 	beq.w	800cc7c <_dtoa_r+0x354>
 800cdbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cdc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdc4:	e75a      	b.n	800cc7c <_dtoa_r+0x354>
 800cdc6:	07cf      	lsls	r7, r1, #31
 800cdc8:	d509      	bpl.n	800cdde <_dtoa_r+0x4b6>
 800cdca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800cdce:	ed90 7b00 	vldr	d7, [r0]
 800cdd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cdd6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cdda:	3201      	adds	r2, #1
 800cddc:	2401      	movs	r4, #1
 800cdde:	1049      	asrs	r1, r1, #1
 800cde0:	3008      	adds	r0, #8
 800cde2:	e7e7      	b.n	800cdb4 <_dtoa_r+0x48c>
 800cde4:	2202      	movs	r2, #2
 800cde6:	e749      	b.n	800cc7c <_dtoa_r+0x354>
 800cde8:	465f      	mov	r7, fp
 800cdea:	4648      	mov	r0, r9
 800cdec:	e765      	b.n	800ccba <_dtoa_r+0x392>
 800cdee:	ec42 1b17 	vmov	d7, r1, r2
 800cdf2:	4a5c      	ldr	r2, [pc, #368]	; (800cf64 <_dtoa_r+0x63c>)
 800cdf4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cdf8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cdfc:	9a00      	ldr	r2, [sp, #0]
 800cdfe:	1814      	adds	r4, r2, r0
 800ce00:	9a08      	ldr	r2, [sp, #32]
 800ce02:	b352      	cbz	r2, 800ce5a <_dtoa_r+0x532>
 800ce04:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ce08:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ce0c:	f8dd 8000 	ldr.w	r8, [sp]
 800ce10:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ce14:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce18:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce20:	ee14 2a90 	vmov	r2, s9
 800ce24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce28:	3230      	adds	r2, #48	; 0x30
 800ce2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce36:	f808 2b01 	strb.w	r2, [r8], #1
 800ce3a:	d439      	bmi.n	800ceb0 <_dtoa_r+0x588>
 800ce3c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ce40:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ce44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce48:	d472      	bmi.n	800cf30 <_dtoa_r+0x608>
 800ce4a:	45a0      	cmp	r8, r4
 800ce4c:	f43f af5d 	beq.w	800cd0a <_dtoa_r+0x3e2>
 800ce50:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ce54:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ce58:	e7e0      	b.n	800ce1c <_dtoa_r+0x4f4>
 800ce5a:	f8dd 8000 	ldr.w	r8, [sp]
 800ce5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ce62:	4621      	mov	r1, r4
 800ce64:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce6c:	ee14 2a90 	vmov	r2, s9
 800ce70:	3230      	adds	r2, #48	; 0x30
 800ce72:	f808 2b01 	strb.w	r2, [r8], #1
 800ce76:	45a0      	cmp	r8, r4
 800ce78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce7c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce80:	d118      	bne.n	800ceb4 <_dtoa_r+0x58c>
 800ce82:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ce86:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ce8a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ce8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce92:	dc4d      	bgt.n	800cf30 <_dtoa_r+0x608>
 800ce94:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea0:	f57f af33 	bpl.w	800cd0a <_dtoa_r+0x3e2>
 800cea4:	4688      	mov	r8, r1
 800cea6:	3901      	subs	r1, #1
 800cea8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ceac:	2b30      	cmp	r3, #48	; 0x30
 800ceae:	d0f9      	beq.n	800cea4 <_dtoa_r+0x57c>
 800ceb0:	46bb      	mov	fp, r7
 800ceb2:	e02a      	b.n	800cf0a <_dtoa_r+0x5e2>
 800ceb4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ceb8:	e7d6      	b.n	800ce68 <_dtoa_r+0x540>
 800ceba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cebe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cec2:	f8dd 8000 	ldr.w	r8, [sp]
 800cec6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ceca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cece:	ee15 3a10 	vmov	r3, s10
 800ced2:	3330      	adds	r3, #48	; 0x30
 800ced4:	f808 3b01 	strb.w	r3, [r8], #1
 800ced8:	9b00      	ldr	r3, [sp, #0]
 800ceda:	eba8 0303 	sub.w	r3, r8, r3
 800cede:	4599      	cmp	r9, r3
 800cee0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cee4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cee8:	d133      	bne.n	800cf52 <_dtoa_r+0x62a>
 800ceea:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ceee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef6:	dc1a      	bgt.n	800cf2e <_dtoa_r+0x606>
 800cef8:	eeb4 7b46 	vcmp.f64	d7, d6
 800cefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf00:	d103      	bne.n	800cf0a <_dtoa_r+0x5e2>
 800cf02:	ee15 3a10 	vmov	r3, s10
 800cf06:	07d9      	lsls	r1, r3, #31
 800cf08:	d411      	bmi.n	800cf2e <_dtoa_r+0x606>
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	f000 fae7 	bl	800d4e0 <_Bfree>
 800cf12:	2300      	movs	r3, #0
 800cf14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf16:	f888 3000 	strb.w	r3, [r8]
 800cf1a:	f10b 0301 	add.w	r3, fp, #1
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f43f ad4d 	beq.w	800c9c2 <_dtoa_r+0x9a>
 800cf28:	f8c3 8000 	str.w	r8, [r3]
 800cf2c:	e549      	b.n	800c9c2 <_dtoa_r+0x9a>
 800cf2e:	465f      	mov	r7, fp
 800cf30:	4643      	mov	r3, r8
 800cf32:	4698      	mov	r8, r3
 800cf34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf38:	2a39      	cmp	r2, #57	; 0x39
 800cf3a:	d106      	bne.n	800cf4a <_dtoa_r+0x622>
 800cf3c:	9a00      	ldr	r2, [sp, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d1f7      	bne.n	800cf32 <_dtoa_r+0x60a>
 800cf42:	9900      	ldr	r1, [sp, #0]
 800cf44:	2230      	movs	r2, #48	; 0x30
 800cf46:	3701      	adds	r7, #1
 800cf48:	700a      	strb	r2, [r1, #0]
 800cf4a:	781a      	ldrb	r2, [r3, #0]
 800cf4c:	3201      	adds	r2, #1
 800cf4e:	701a      	strb	r2, [r3, #0]
 800cf50:	e7ae      	b.n	800ceb0 <_dtoa_r+0x588>
 800cf52:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cf56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5e:	d1b2      	bne.n	800cec6 <_dtoa_r+0x59e>
 800cf60:	e7d3      	b.n	800cf0a <_dtoa_r+0x5e2>
 800cf62:	bf00      	nop
 800cf64:	0800f088 	.word	0x0800f088
 800cf68:	0800f060 	.word	0x0800f060
 800cf6c:	9908      	ldr	r1, [sp, #32]
 800cf6e:	2900      	cmp	r1, #0
 800cf70:	f000 80d1 	beq.w	800d116 <_dtoa_r+0x7ee>
 800cf74:	9907      	ldr	r1, [sp, #28]
 800cf76:	2901      	cmp	r1, #1
 800cf78:	f300 80b4 	bgt.w	800d0e4 <_dtoa_r+0x7bc>
 800cf7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cf7e:	2900      	cmp	r1, #0
 800cf80:	f000 80ac 	beq.w	800d0dc <_dtoa_r+0x7b4>
 800cf84:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cf88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cf8c:	461c      	mov	r4, r3
 800cf8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf90:	9b05      	ldr	r3, [sp, #20]
 800cf92:	4413      	add	r3, r2
 800cf94:	9305      	str	r3, [sp, #20]
 800cf96:	9b06      	ldr	r3, [sp, #24]
 800cf98:	2101      	movs	r1, #1
 800cf9a:	4413      	add	r3, r2
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	9306      	str	r3, [sp, #24]
 800cfa0:	f000 fb5a 	bl	800d658 <__i2b>
 800cfa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa6:	4607      	mov	r7, r0
 800cfa8:	f1b8 0f00 	cmp.w	r8, #0
 800cfac:	dd0d      	ble.n	800cfca <_dtoa_r+0x6a2>
 800cfae:	9a06      	ldr	r2, [sp, #24]
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	dd0a      	ble.n	800cfca <_dtoa_r+0x6a2>
 800cfb4:	4542      	cmp	r2, r8
 800cfb6:	9905      	ldr	r1, [sp, #20]
 800cfb8:	bfa8      	it	ge
 800cfba:	4642      	movge	r2, r8
 800cfbc:	1a89      	subs	r1, r1, r2
 800cfbe:	9105      	str	r1, [sp, #20]
 800cfc0:	9906      	ldr	r1, [sp, #24]
 800cfc2:	eba8 0802 	sub.w	r8, r8, r2
 800cfc6:	1a8a      	subs	r2, r1, r2
 800cfc8:	9206      	str	r2, [sp, #24]
 800cfca:	b303      	cbz	r3, 800d00e <_dtoa_r+0x6e6>
 800cfcc:	9a08      	ldr	r2, [sp, #32]
 800cfce:	2a00      	cmp	r2, #0
 800cfd0:	f000 80a6 	beq.w	800d120 <_dtoa_r+0x7f8>
 800cfd4:	2c00      	cmp	r4, #0
 800cfd6:	dd13      	ble.n	800d000 <_dtoa_r+0x6d8>
 800cfd8:	4639      	mov	r1, r7
 800cfda:	4622      	mov	r2, r4
 800cfdc:	4630      	mov	r0, r6
 800cfde:	930c      	str	r3, [sp, #48]	; 0x30
 800cfe0:	f000 fbf6 	bl	800d7d0 <__pow5mult>
 800cfe4:	462a      	mov	r2, r5
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	4607      	mov	r7, r0
 800cfea:	4630      	mov	r0, r6
 800cfec:	f000 fb4a 	bl	800d684 <__multiply>
 800cff0:	4629      	mov	r1, r5
 800cff2:	900a      	str	r0, [sp, #40]	; 0x28
 800cff4:	4630      	mov	r0, r6
 800cff6:	f000 fa73 	bl	800d4e0 <_Bfree>
 800cffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cffe:	4615      	mov	r5, r2
 800d000:	1b1a      	subs	r2, r3, r4
 800d002:	d004      	beq.n	800d00e <_dtoa_r+0x6e6>
 800d004:	4629      	mov	r1, r5
 800d006:	4630      	mov	r0, r6
 800d008:	f000 fbe2 	bl	800d7d0 <__pow5mult>
 800d00c:	4605      	mov	r5, r0
 800d00e:	2101      	movs	r1, #1
 800d010:	4630      	mov	r0, r6
 800d012:	f000 fb21 	bl	800d658 <__i2b>
 800d016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d018:	2b00      	cmp	r3, #0
 800d01a:	4604      	mov	r4, r0
 800d01c:	f340 8082 	ble.w	800d124 <_dtoa_r+0x7fc>
 800d020:	461a      	mov	r2, r3
 800d022:	4601      	mov	r1, r0
 800d024:	4630      	mov	r0, r6
 800d026:	f000 fbd3 	bl	800d7d0 <__pow5mult>
 800d02a:	9b07      	ldr	r3, [sp, #28]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	4604      	mov	r4, r0
 800d030:	dd7b      	ble.n	800d12a <_dtoa_r+0x802>
 800d032:	2300      	movs	r3, #0
 800d034:	930a      	str	r3, [sp, #40]	; 0x28
 800d036:	6922      	ldr	r2, [r4, #16]
 800d038:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d03c:	6910      	ldr	r0, [r2, #16]
 800d03e:	f000 fabb 	bl	800d5b8 <__hi0bits>
 800d042:	f1c0 0020 	rsb	r0, r0, #32
 800d046:	9b06      	ldr	r3, [sp, #24]
 800d048:	4418      	add	r0, r3
 800d04a:	f010 001f 	ands.w	r0, r0, #31
 800d04e:	f000 808d 	beq.w	800d16c <_dtoa_r+0x844>
 800d052:	f1c0 0220 	rsb	r2, r0, #32
 800d056:	2a04      	cmp	r2, #4
 800d058:	f340 8086 	ble.w	800d168 <_dtoa_r+0x840>
 800d05c:	f1c0 001c 	rsb	r0, r0, #28
 800d060:	9b05      	ldr	r3, [sp, #20]
 800d062:	4403      	add	r3, r0
 800d064:	9305      	str	r3, [sp, #20]
 800d066:	9b06      	ldr	r3, [sp, #24]
 800d068:	4403      	add	r3, r0
 800d06a:	4480      	add	r8, r0
 800d06c:	9306      	str	r3, [sp, #24]
 800d06e:	9b05      	ldr	r3, [sp, #20]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dd05      	ble.n	800d080 <_dtoa_r+0x758>
 800d074:	4629      	mov	r1, r5
 800d076:	461a      	mov	r2, r3
 800d078:	4630      	mov	r0, r6
 800d07a:	f000 fc03 	bl	800d884 <__lshift>
 800d07e:	4605      	mov	r5, r0
 800d080:	9b06      	ldr	r3, [sp, #24]
 800d082:	2b00      	cmp	r3, #0
 800d084:	dd05      	ble.n	800d092 <_dtoa_r+0x76a>
 800d086:	4621      	mov	r1, r4
 800d088:	461a      	mov	r2, r3
 800d08a:	4630      	mov	r0, r6
 800d08c:	f000 fbfa 	bl	800d884 <__lshift>
 800d090:	4604      	mov	r4, r0
 800d092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d094:	2b00      	cmp	r3, #0
 800d096:	d06b      	beq.n	800d170 <_dtoa_r+0x848>
 800d098:	4621      	mov	r1, r4
 800d09a:	4628      	mov	r0, r5
 800d09c:	f000 fc5e 	bl	800d95c <__mcmp>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	da65      	bge.n	800d170 <_dtoa_r+0x848>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	220a      	movs	r2, #10
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f000 fa3a 	bl	800d524 <__multadd>
 800d0b0:	9b08      	ldr	r3, [sp, #32]
 800d0b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 8192 	beq.w	800d3e2 <_dtoa_r+0xaba>
 800d0be:	4639      	mov	r1, r7
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	220a      	movs	r2, #10
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 fa2d 	bl	800d524 <__multadd>
 800d0ca:	f1ba 0f00 	cmp.w	sl, #0
 800d0ce:	4607      	mov	r7, r0
 800d0d0:	f300 808e 	bgt.w	800d1f0 <_dtoa_r+0x8c8>
 800d0d4:	9b07      	ldr	r3, [sp, #28]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	dc51      	bgt.n	800d17e <_dtoa_r+0x856>
 800d0da:	e089      	b.n	800d1f0 <_dtoa_r+0x8c8>
 800d0dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d0e2:	e751      	b.n	800cf88 <_dtoa_r+0x660>
 800d0e4:	f109 34ff 	add.w	r4, r9, #4294967295
 800d0e8:	42a3      	cmp	r3, r4
 800d0ea:	bfbf      	itttt	lt
 800d0ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d0ee:	1ae3      	sublt	r3, r4, r3
 800d0f0:	18d2      	addlt	r2, r2, r3
 800d0f2:	4613      	movlt	r3, r2
 800d0f4:	bfb7      	itett	lt
 800d0f6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d0f8:	1b1c      	subge	r4, r3, r4
 800d0fa:	4623      	movlt	r3, r4
 800d0fc:	2400      	movlt	r4, #0
 800d0fe:	f1b9 0f00 	cmp.w	r9, #0
 800d102:	bfb5      	itete	lt
 800d104:	9a05      	ldrlt	r2, [sp, #20]
 800d106:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d10a:	eba2 0809 	sublt.w	r8, r2, r9
 800d10e:	464a      	movge	r2, r9
 800d110:	bfb8      	it	lt
 800d112:	2200      	movlt	r2, #0
 800d114:	e73b      	b.n	800cf8e <_dtoa_r+0x666>
 800d116:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d11a:	9f08      	ldr	r7, [sp, #32]
 800d11c:	461c      	mov	r4, r3
 800d11e:	e743      	b.n	800cfa8 <_dtoa_r+0x680>
 800d120:	461a      	mov	r2, r3
 800d122:	e76f      	b.n	800d004 <_dtoa_r+0x6dc>
 800d124:	9b07      	ldr	r3, [sp, #28]
 800d126:	2b01      	cmp	r3, #1
 800d128:	dc18      	bgt.n	800d15c <_dtoa_r+0x834>
 800d12a:	9b02      	ldr	r3, [sp, #8]
 800d12c:	b9b3      	cbnz	r3, 800d15c <_dtoa_r+0x834>
 800d12e:	9b03      	ldr	r3, [sp, #12]
 800d130:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d134:	b9a2      	cbnz	r2, 800d160 <_dtoa_r+0x838>
 800d136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d13a:	0d12      	lsrs	r2, r2, #20
 800d13c:	0512      	lsls	r2, r2, #20
 800d13e:	b18a      	cbz	r2, 800d164 <_dtoa_r+0x83c>
 800d140:	9b05      	ldr	r3, [sp, #20]
 800d142:	3301      	adds	r3, #1
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	9b06      	ldr	r3, [sp, #24]
 800d148:	3301      	adds	r3, #1
 800d14a:	9306      	str	r3, [sp, #24]
 800d14c:	2301      	movs	r3, #1
 800d14e:	930a      	str	r3, [sp, #40]	; 0x28
 800d150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d152:	2b00      	cmp	r3, #0
 800d154:	f47f af6f 	bne.w	800d036 <_dtoa_r+0x70e>
 800d158:	2001      	movs	r0, #1
 800d15a:	e774      	b.n	800d046 <_dtoa_r+0x71e>
 800d15c:	2300      	movs	r3, #0
 800d15e:	e7f6      	b.n	800d14e <_dtoa_r+0x826>
 800d160:	9b02      	ldr	r3, [sp, #8]
 800d162:	e7f4      	b.n	800d14e <_dtoa_r+0x826>
 800d164:	920a      	str	r2, [sp, #40]	; 0x28
 800d166:	e7f3      	b.n	800d150 <_dtoa_r+0x828>
 800d168:	d081      	beq.n	800d06e <_dtoa_r+0x746>
 800d16a:	4610      	mov	r0, r2
 800d16c:	301c      	adds	r0, #28
 800d16e:	e777      	b.n	800d060 <_dtoa_r+0x738>
 800d170:	f1b9 0f00 	cmp.w	r9, #0
 800d174:	dc37      	bgt.n	800d1e6 <_dtoa_r+0x8be>
 800d176:	9b07      	ldr	r3, [sp, #28]
 800d178:	2b02      	cmp	r3, #2
 800d17a:	dd34      	ble.n	800d1e6 <_dtoa_r+0x8be>
 800d17c:	46ca      	mov	sl, r9
 800d17e:	f1ba 0f00 	cmp.w	sl, #0
 800d182:	d10d      	bne.n	800d1a0 <_dtoa_r+0x878>
 800d184:	4621      	mov	r1, r4
 800d186:	4653      	mov	r3, sl
 800d188:	2205      	movs	r2, #5
 800d18a:	4630      	mov	r0, r6
 800d18c:	f000 f9ca 	bl	800d524 <__multadd>
 800d190:	4601      	mov	r1, r0
 800d192:	4604      	mov	r4, r0
 800d194:	4628      	mov	r0, r5
 800d196:	f000 fbe1 	bl	800d95c <__mcmp>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	f73f adde 	bgt.w	800cd5c <_dtoa_r+0x434>
 800d1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a2:	f8dd 8000 	ldr.w	r8, [sp]
 800d1a6:	ea6f 0b03 	mvn.w	fp, r3
 800d1aa:	f04f 0900 	mov.w	r9, #0
 800d1ae:	4621      	mov	r1, r4
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f000 f995 	bl	800d4e0 <_Bfree>
 800d1b6:	2f00      	cmp	r7, #0
 800d1b8:	f43f aea7 	beq.w	800cf0a <_dtoa_r+0x5e2>
 800d1bc:	f1b9 0f00 	cmp.w	r9, #0
 800d1c0:	d005      	beq.n	800d1ce <_dtoa_r+0x8a6>
 800d1c2:	45b9      	cmp	r9, r7
 800d1c4:	d003      	beq.n	800d1ce <_dtoa_r+0x8a6>
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f000 f989 	bl	800d4e0 <_Bfree>
 800d1ce:	4639      	mov	r1, r7
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f000 f985 	bl	800d4e0 <_Bfree>
 800d1d6:	e698      	b.n	800cf0a <_dtoa_r+0x5e2>
 800d1d8:	2400      	movs	r4, #0
 800d1da:	4627      	mov	r7, r4
 800d1dc:	e7e0      	b.n	800d1a0 <_dtoa_r+0x878>
 800d1de:	46bb      	mov	fp, r7
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4607      	mov	r7, r0
 800d1e4:	e5ba      	b.n	800cd5c <_dtoa_r+0x434>
 800d1e6:	9b08      	ldr	r3, [sp, #32]
 800d1e8:	46ca      	mov	sl, r9
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f000 8100 	beq.w	800d3f0 <_dtoa_r+0xac8>
 800d1f0:	f1b8 0f00 	cmp.w	r8, #0
 800d1f4:	dd05      	ble.n	800d202 <_dtoa_r+0x8da>
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	4642      	mov	r2, r8
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f000 fb42 	bl	800d884 <__lshift>
 800d200:	4607      	mov	r7, r0
 800d202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d204:	2b00      	cmp	r3, #0
 800d206:	d05d      	beq.n	800d2c4 <_dtoa_r+0x99c>
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	4630      	mov	r0, r6
 800d20c:	f000 f928 	bl	800d460 <_Balloc>
 800d210:	4680      	mov	r8, r0
 800d212:	b928      	cbnz	r0, 800d220 <_dtoa_r+0x8f8>
 800d214:	4b82      	ldr	r3, [pc, #520]	; (800d420 <_dtoa_r+0xaf8>)
 800d216:	4602      	mov	r2, r0
 800d218:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d21c:	f7ff bb9a 	b.w	800c954 <_dtoa_r+0x2c>
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	3202      	adds	r2, #2
 800d224:	0092      	lsls	r2, r2, #2
 800d226:	f107 010c 	add.w	r1, r7, #12
 800d22a:	300c      	adds	r0, #12
 800d22c:	f000 f90a 	bl	800d444 <memcpy>
 800d230:	2201      	movs	r2, #1
 800d232:	4641      	mov	r1, r8
 800d234:	4630      	mov	r0, r6
 800d236:	f000 fb25 	bl	800d884 <__lshift>
 800d23a:	9b00      	ldr	r3, [sp, #0]
 800d23c:	3301      	adds	r3, #1
 800d23e:	9305      	str	r3, [sp, #20]
 800d240:	9b00      	ldr	r3, [sp, #0]
 800d242:	4453      	add	r3, sl
 800d244:	9309      	str	r3, [sp, #36]	; 0x24
 800d246:	9b02      	ldr	r3, [sp, #8]
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	46b9      	mov	r9, r7
 800d24e:	9308      	str	r3, [sp, #32]
 800d250:	4607      	mov	r7, r0
 800d252:	9b05      	ldr	r3, [sp, #20]
 800d254:	4621      	mov	r1, r4
 800d256:	3b01      	subs	r3, #1
 800d258:	4628      	mov	r0, r5
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	f7ff fad6 	bl	800c80c <quorem>
 800d260:	4603      	mov	r3, r0
 800d262:	3330      	adds	r3, #48	; 0x30
 800d264:	9006      	str	r0, [sp, #24]
 800d266:	4649      	mov	r1, r9
 800d268:	4628      	mov	r0, r5
 800d26a:	930a      	str	r3, [sp, #40]	; 0x28
 800d26c:	f000 fb76 	bl	800d95c <__mcmp>
 800d270:	463a      	mov	r2, r7
 800d272:	4682      	mov	sl, r0
 800d274:	4621      	mov	r1, r4
 800d276:	4630      	mov	r0, r6
 800d278:	f000 fb8c 	bl	800d994 <__mdiff>
 800d27c:	68c2      	ldr	r2, [r0, #12]
 800d27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d280:	4680      	mov	r8, r0
 800d282:	bb0a      	cbnz	r2, 800d2c8 <_dtoa_r+0x9a0>
 800d284:	4601      	mov	r1, r0
 800d286:	4628      	mov	r0, r5
 800d288:	f000 fb68 	bl	800d95c <__mcmp>
 800d28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d28e:	4602      	mov	r2, r0
 800d290:	4641      	mov	r1, r8
 800d292:	4630      	mov	r0, r6
 800d294:	920e      	str	r2, [sp, #56]	; 0x38
 800d296:	930a      	str	r3, [sp, #40]	; 0x28
 800d298:	f000 f922 	bl	800d4e0 <_Bfree>
 800d29c:	9b07      	ldr	r3, [sp, #28]
 800d29e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d2a4:	ea43 0102 	orr.w	r1, r3, r2
 800d2a8:	9b08      	ldr	r3, [sp, #32]
 800d2aa:	430b      	orrs	r3, r1
 800d2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ae:	d10d      	bne.n	800d2cc <_dtoa_r+0x9a4>
 800d2b0:	2b39      	cmp	r3, #57	; 0x39
 800d2b2:	d029      	beq.n	800d308 <_dtoa_r+0x9e0>
 800d2b4:	f1ba 0f00 	cmp.w	sl, #0
 800d2b8:	dd01      	ble.n	800d2be <_dtoa_r+0x996>
 800d2ba:	9b06      	ldr	r3, [sp, #24]
 800d2bc:	3331      	adds	r3, #49	; 0x31
 800d2be:	9a02      	ldr	r2, [sp, #8]
 800d2c0:	7013      	strb	r3, [r2, #0]
 800d2c2:	e774      	b.n	800d1ae <_dtoa_r+0x886>
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	e7b8      	b.n	800d23a <_dtoa_r+0x912>
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	e7e1      	b.n	800d290 <_dtoa_r+0x968>
 800d2cc:	f1ba 0f00 	cmp.w	sl, #0
 800d2d0:	db06      	blt.n	800d2e0 <_dtoa_r+0x9b8>
 800d2d2:	9907      	ldr	r1, [sp, #28]
 800d2d4:	ea41 0a0a 	orr.w	sl, r1, sl
 800d2d8:	9908      	ldr	r1, [sp, #32]
 800d2da:	ea5a 0101 	orrs.w	r1, sl, r1
 800d2de:	d120      	bne.n	800d322 <_dtoa_r+0x9fa>
 800d2e0:	2a00      	cmp	r2, #0
 800d2e2:	ddec      	ble.n	800d2be <_dtoa_r+0x996>
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	9305      	str	r3, [sp, #20]
 800d2ec:	f000 faca 	bl	800d884 <__lshift>
 800d2f0:	4621      	mov	r1, r4
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	f000 fb32 	bl	800d95c <__mcmp>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	9b05      	ldr	r3, [sp, #20]
 800d2fc:	dc02      	bgt.n	800d304 <_dtoa_r+0x9dc>
 800d2fe:	d1de      	bne.n	800d2be <_dtoa_r+0x996>
 800d300:	07da      	lsls	r2, r3, #31
 800d302:	d5dc      	bpl.n	800d2be <_dtoa_r+0x996>
 800d304:	2b39      	cmp	r3, #57	; 0x39
 800d306:	d1d8      	bne.n	800d2ba <_dtoa_r+0x992>
 800d308:	9a02      	ldr	r2, [sp, #8]
 800d30a:	2339      	movs	r3, #57	; 0x39
 800d30c:	7013      	strb	r3, [r2, #0]
 800d30e:	4643      	mov	r3, r8
 800d310:	4698      	mov	r8, r3
 800d312:	3b01      	subs	r3, #1
 800d314:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d318:	2a39      	cmp	r2, #57	; 0x39
 800d31a:	d051      	beq.n	800d3c0 <_dtoa_r+0xa98>
 800d31c:	3201      	adds	r2, #1
 800d31e:	701a      	strb	r2, [r3, #0]
 800d320:	e745      	b.n	800d1ae <_dtoa_r+0x886>
 800d322:	2a00      	cmp	r2, #0
 800d324:	dd03      	ble.n	800d32e <_dtoa_r+0xa06>
 800d326:	2b39      	cmp	r3, #57	; 0x39
 800d328:	d0ee      	beq.n	800d308 <_dtoa_r+0x9e0>
 800d32a:	3301      	adds	r3, #1
 800d32c:	e7c7      	b.n	800d2be <_dtoa_r+0x996>
 800d32e:	9a05      	ldr	r2, [sp, #20]
 800d330:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d332:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d336:	428a      	cmp	r2, r1
 800d338:	d02b      	beq.n	800d392 <_dtoa_r+0xa6a>
 800d33a:	4629      	mov	r1, r5
 800d33c:	2300      	movs	r3, #0
 800d33e:	220a      	movs	r2, #10
 800d340:	4630      	mov	r0, r6
 800d342:	f000 f8ef 	bl	800d524 <__multadd>
 800d346:	45b9      	cmp	r9, r7
 800d348:	4605      	mov	r5, r0
 800d34a:	f04f 0300 	mov.w	r3, #0
 800d34e:	f04f 020a 	mov.w	r2, #10
 800d352:	4649      	mov	r1, r9
 800d354:	4630      	mov	r0, r6
 800d356:	d107      	bne.n	800d368 <_dtoa_r+0xa40>
 800d358:	f000 f8e4 	bl	800d524 <__multadd>
 800d35c:	4681      	mov	r9, r0
 800d35e:	4607      	mov	r7, r0
 800d360:	9b05      	ldr	r3, [sp, #20]
 800d362:	3301      	adds	r3, #1
 800d364:	9305      	str	r3, [sp, #20]
 800d366:	e774      	b.n	800d252 <_dtoa_r+0x92a>
 800d368:	f000 f8dc 	bl	800d524 <__multadd>
 800d36c:	4639      	mov	r1, r7
 800d36e:	4681      	mov	r9, r0
 800d370:	2300      	movs	r3, #0
 800d372:	220a      	movs	r2, #10
 800d374:	4630      	mov	r0, r6
 800d376:	f000 f8d5 	bl	800d524 <__multadd>
 800d37a:	4607      	mov	r7, r0
 800d37c:	e7f0      	b.n	800d360 <_dtoa_r+0xa38>
 800d37e:	f1ba 0f00 	cmp.w	sl, #0
 800d382:	9a00      	ldr	r2, [sp, #0]
 800d384:	bfcc      	ite	gt
 800d386:	46d0      	movgt	r8, sl
 800d388:	f04f 0801 	movle.w	r8, #1
 800d38c:	4490      	add	r8, r2
 800d38e:	f04f 0900 	mov.w	r9, #0
 800d392:	4629      	mov	r1, r5
 800d394:	2201      	movs	r2, #1
 800d396:	4630      	mov	r0, r6
 800d398:	9302      	str	r3, [sp, #8]
 800d39a:	f000 fa73 	bl	800d884 <__lshift>
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	f000 fadb 	bl	800d95c <__mcmp>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	dcb1      	bgt.n	800d30e <_dtoa_r+0x9e6>
 800d3aa:	d102      	bne.n	800d3b2 <_dtoa_r+0xa8a>
 800d3ac:	9b02      	ldr	r3, [sp, #8]
 800d3ae:	07db      	lsls	r3, r3, #31
 800d3b0:	d4ad      	bmi.n	800d30e <_dtoa_r+0x9e6>
 800d3b2:	4643      	mov	r3, r8
 800d3b4:	4698      	mov	r8, r3
 800d3b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3ba:	2a30      	cmp	r2, #48	; 0x30
 800d3bc:	d0fa      	beq.n	800d3b4 <_dtoa_r+0xa8c>
 800d3be:	e6f6      	b.n	800d1ae <_dtoa_r+0x886>
 800d3c0:	9a00      	ldr	r2, [sp, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d1a4      	bne.n	800d310 <_dtoa_r+0x9e8>
 800d3c6:	f10b 0b01 	add.w	fp, fp, #1
 800d3ca:	2331      	movs	r3, #49	; 0x31
 800d3cc:	e778      	b.n	800d2c0 <_dtoa_r+0x998>
 800d3ce:	4b15      	ldr	r3, [pc, #84]	; (800d424 <_dtoa_r+0xafc>)
 800d3d0:	f7ff bb12 	b.w	800c9f8 <_dtoa_r+0xd0>
 800d3d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f47f aaee 	bne.w	800c9b8 <_dtoa_r+0x90>
 800d3dc:	4b12      	ldr	r3, [pc, #72]	; (800d428 <_dtoa_r+0xb00>)
 800d3de:	f7ff bb0b 	b.w	800c9f8 <_dtoa_r+0xd0>
 800d3e2:	f1ba 0f00 	cmp.w	sl, #0
 800d3e6:	dc03      	bgt.n	800d3f0 <_dtoa_r+0xac8>
 800d3e8:	9b07      	ldr	r3, [sp, #28]
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	f73f aec7 	bgt.w	800d17e <_dtoa_r+0x856>
 800d3f0:	f8dd 8000 	ldr.w	r8, [sp]
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	f7ff fa08 	bl	800c80c <quorem>
 800d3fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d400:	f808 3b01 	strb.w	r3, [r8], #1
 800d404:	9a00      	ldr	r2, [sp, #0]
 800d406:	eba8 0202 	sub.w	r2, r8, r2
 800d40a:	4592      	cmp	sl, r2
 800d40c:	ddb7      	ble.n	800d37e <_dtoa_r+0xa56>
 800d40e:	4629      	mov	r1, r5
 800d410:	2300      	movs	r3, #0
 800d412:	220a      	movs	r2, #10
 800d414:	4630      	mov	r0, r6
 800d416:	f000 f885 	bl	800d524 <__multadd>
 800d41a:	4605      	mov	r5, r0
 800d41c:	e7ea      	b.n	800d3f4 <_dtoa_r+0xacc>
 800d41e:	bf00      	nop
 800d420:	0800efef 	.word	0x0800efef
 800d424:	0800ef48 	.word	0x0800ef48
 800d428:	0800ef6c 	.word	0x0800ef6c

0800d42c <_localeconv_r>:
 800d42c:	4800      	ldr	r0, [pc, #0]	; (800d430 <_localeconv_r+0x4>)
 800d42e:	4770      	bx	lr
 800d430:	20000230 	.word	0x20000230

0800d434 <malloc>:
 800d434:	4b02      	ldr	r3, [pc, #8]	; (800d440 <malloc+0xc>)
 800d436:	4601      	mov	r1, r0
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	f000 bbef 	b.w	800dc1c <_malloc_r>
 800d43e:	bf00      	nop
 800d440:	200000dc 	.word	0x200000dc

0800d444 <memcpy>:
 800d444:	440a      	add	r2, r1
 800d446:	4291      	cmp	r1, r2
 800d448:	f100 33ff 	add.w	r3, r0, #4294967295
 800d44c:	d100      	bne.n	800d450 <memcpy+0xc>
 800d44e:	4770      	bx	lr
 800d450:	b510      	push	{r4, lr}
 800d452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d45a:	4291      	cmp	r1, r2
 800d45c:	d1f9      	bne.n	800d452 <memcpy+0xe>
 800d45e:	bd10      	pop	{r4, pc}

0800d460 <_Balloc>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d464:	4604      	mov	r4, r0
 800d466:	460d      	mov	r5, r1
 800d468:	b976      	cbnz	r6, 800d488 <_Balloc+0x28>
 800d46a:	2010      	movs	r0, #16
 800d46c:	f7ff ffe2 	bl	800d434 <malloc>
 800d470:	4602      	mov	r2, r0
 800d472:	6260      	str	r0, [r4, #36]	; 0x24
 800d474:	b920      	cbnz	r0, 800d480 <_Balloc+0x20>
 800d476:	4b18      	ldr	r3, [pc, #96]	; (800d4d8 <_Balloc+0x78>)
 800d478:	4818      	ldr	r0, [pc, #96]	; (800d4dc <_Balloc+0x7c>)
 800d47a:	2166      	movs	r1, #102	; 0x66
 800d47c:	f000 fd94 	bl	800dfa8 <__assert_func>
 800d480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d484:	6006      	str	r6, [r0, #0]
 800d486:	60c6      	str	r6, [r0, #12]
 800d488:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d48a:	68f3      	ldr	r3, [r6, #12]
 800d48c:	b183      	cbz	r3, 800d4b0 <_Balloc+0x50>
 800d48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d496:	b9b8      	cbnz	r0, 800d4c8 <_Balloc+0x68>
 800d498:	2101      	movs	r1, #1
 800d49a:	fa01 f605 	lsl.w	r6, r1, r5
 800d49e:	1d72      	adds	r2, r6, #5
 800d4a0:	0092      	lsls	r2, r2, #2
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 fb5a 	bl	800db5c <_calloc_r>
 800d4a8:	b160      	cbz	r0, 800d4c4 <_Balloc+0x64>
 800d4aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4ae:	e00e      	b.n	800d4ce <_Balloc+0x6e>
 800d4b0:	2221      	movs	r2, #33	; 0x21
 800d4b2:	2104      	movs	r1, #4
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f000 fb51 	bl	800db5c <_calloc_r>
 800d4ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4bc:	60f0      	str	r0, [r6, #12]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1e4      	bne.n	800d48e <_Balloc+0x2e>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}
 800d4c8:	6802      	ldr	r2, [r0, #0]
 800d4ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4d4:	e7f7      	b.n	800d4c6 <_Balloc+0x66>
 800d4d6:	bf00      	nop
 800d4d8:	0800ef79 	.word	0x0800ef79
 800d4dc:	0800f000 	.word	0x0800f000

0800d4e0 <_Bfree>:
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	b976      	cbnz	r6, 800d508 <_Bfree+0x28>
 800d4ea:	2010      	movs	r0, #16
 800d4ec:	f7ff ffa2 	bl	800d434 <malloc>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	6268      	str	r0, [r5, #36]	; 0x24
 800d4f4:	b920      	cbnz	r0, 800d500 <_Bfree+0x20>
 800d4f6:	4b09      	ldr	r3, [pc, #36]	; (800d51c <_Bfree+0x3c>)
 800d4f8:	4809      	ldr	r0, [pc, #36]	; (800d520 <_Bfree+0x40>)
 800d4fa:	218a      	movs	r1, #138	; 0x8a
 800d4fc:	f000 fd54 	bl	800dfa8 <__assert_func>
 800d500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d504:	6006      	str	r6, [r0, #0]
 800d506:	60c6      	str	r6, [r0, #12]
 800d508:	b13c      	cbz	r4, 800d51a <_Bfree+0x3a>
 800d50a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d50c:	6862      	ldr	r2, [r4, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d514:	6021      	str	r1, [r4, #0]
 800d516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d51a:	bd70      	pop	{r4, r5, r6, pc}
 800d51c:	0800ef79 	.word	0x0800ef79
 800d520:	0800f000 	.word	0x0800f000

0800d524 <__multadd>:
 800d524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d528:	690e      	ldr	r6, [r1, #16]
 800d52a:	4607      	mov	r7, r0
 800d52c:	4698      	mov	r8, r3
 800d52e:	460c      	mov	r4, r1
 800d530:	f101 0014 	add.w	r0, r1, #20
 800d534:	2300      	movs	r3, #0
 800d536:	6805      	ldr	r5, [r0, #0]
 800d538:	b2a9      	uxth	r1, r5
 800d53a:	fb02 8101 	mla	r1, r2, r1, r8
 800d53e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d542:	0c2d      	lsrs	r5, r5, #16
 800d544:	fb02 c505 	mla	r5, r2, r5, ip
 800d548:	b289      	uxth	r1, r1
 800d54a:	3301      	adds	r3, #1
 800d54c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d550:	429e      	cmp	r6, r3
 800d552:	f840 1b04 	str.w	r1, [r0], #4
 800d556:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d55a:	dcec      	bgt.n	800d536 <__multadd+0x12>
 800d55c:	f1b8 0f00 	cmp.w	r8, #0
 800d560:	d022      	beq.n	800d5a8 <__multadd+0x84>
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	42b3      	cmp	r3, r6
 800d566:	dc19      	bgt.n	800d59c <__multadd+0x78>
 800d568:	6861      	ldr	r1, [r4, #4]
 800d56a:	4638      	mov	r0, r7
 800d56c:	3101      	adds	r1, #1
 800d56e:	f7ff ff77 	bl	800d460 <_Balloc>
 800d572:	4605      	mov	r5, r0
 800d574:	b928      	cbnz	r0, 800d582 <__multadd+0x5e>
 800d576:	4602      	mov	r2, r0
 800d578:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <__multadd+0x8c>)
 800d57a:	480e      	ldr	r0, [pc, #56]	; (800d5b4 <__multadd+0x90>)
 800d57c:	21b5      	movs	r1, #181	; 0xb5
 800d57e:	f000 fd13 	bl	800dfa8 <__assert_func>
 800d582:	6922      	ldr	r2, [r4, #16]
 800d584:	3202      	adds	r2, #2
 800d586:	f104 010c 	add.w	r1, r4, #12
 800d58a:	0092      	lsls	r2, r2, #2
 800d58c:	300c      	adds	r0, #12
 800d58e:	f7ff ff59 	bl	800d444 <memcpy>
 800d592:	4621      	mov	r1, r4
 800d594:	4638      	mov	r0, r7
 800d596:	f7ff ffa3 	bl	800d4e0 <_Bfree>
 800d59a:	462c      	mov	r4, r5
 800d59c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d5a0:	3601      	adds	r6, #1
 800d5a2:	f8c3 8014 	str.w	r8, [r3, #20]
 800d5a6:	6126      	str	r6, [r4, #16]
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ae:	bf00      	nop
 800d5b0:	0800efef 	.word	0x0800efef
 800d5b4:	0800f000 	.word	0x0800f000

0800d5b8 <__hi0bits>:
 800d5b8:	0c03      	lsrs	r3, r0, #16
 800d5ba:	041b      	lsls	r3, r3, #16
 800d5bc:	b9d3      	cbnz	r3, 800d5f4 <__hi0bits+0x3c>
 800d5be:	0400      	lsls	r0, r0, #16
 800d5c0:	2310      	movs	r3, #16
 800d5c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d5c6:	bf04      	itt	eq
 800d5c8:	0200      	lsleq	r0, r0, #8
 800d5ca:	3308      	addeq	r3, #8
 800d5cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d5d0:	bf04      	itt	eq
 800d5d2:	0100      	lsleq	r0, r0, #4
 800d5d4:	3304      	addeq	r3, #4
 800d5d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5da:	bf04      	itt	eq
 800d5dc:	0080      	lsleq	r0, r0, #2
 800d5de:	3302      	addeq	r3, #2
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	db05      	blt.n	800d5f0 <__hi0bits+0x38>
 800d5e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d5e8:	f103 0301 	add.w	r3, r3, #1
 800d5ec:	bf08      	it	eq
 800d5ee:	2320      	moveq	r3, #32
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	4770      	bx	lr
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e7e4      	b.n	800d5c2 <__hi0bits+0xa>

0800d5f8 <__lo0bits>:
 800d5f8:	6803      	ldr	r3, [r0, #0]
 800d5fa:	f013 0207 	ands.w	r2, r3, #7
 800d5fe:	4601      	mov	r1, r0
 800d600:	d00b      	beq.n	800d61a <__lo0bits+0x22>
 800d602:	07da      	lsls	r2, r3, #31
 800d604:	d424      	bmi.n	800d650 <__lo0bits+0x58>
 800d606:	0798      	lsls	r0, r3, #30
 800d608:	bf49      	itett	mi
 800d60a:	085b      	lsrmi	r3, r3, #1
 800d60c:	089b      	lsrpl	r3, r3, #2
 800d60e:	2001      	movmi	r0, #1
 800d610:	600b      	strmi	r3, [r1, #0]
 800d612:	bf5c      	itt	pl
 800d614:	600b      	strpl	r3, [r1, #0]
 800d616:	2002      	movpl	r0, #2
 800d618:	4770      	bx	lr
 800d61a:	b298      	uxth	r0, r3
 800d61c:	b9b0      	cbnz	r0, 800d64c <__lo0bits+0x54>
 800d61e:	0c1b      	lsrs	r3, r3, #16
 800d620:	2010      	movs	r0, #16
 800d622:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d626:	bf04      	itt	eq
 800d628:	0a1b      	lsreq	r3, r3, #8
 800d62a:	3008      	addeq	r0, #8
 800d62c:	071a      	lsls	r2, r3, #28
 800d62e:	bf04      	itt	eq
 800d630:	091b      	lsreq	r3, r3, #4
 800d632:	3004      	addeq	r0, #4
 800d634:	079a      	lsls	r2, r3, #30
 800d636:	bf04      	itt	eq
 800d638:	089b      	lsreq	r3, r3, #2
 800d63a:	3002      	addeq	r0, #2
 800d63c:	07da      	lsls	r2, r3, #31
 800d63e:	d403      	bmi.n	800d648 <__lo0bits+0x50>
 800d640:	085b      	lsrs	r3, r3, #1
 800d642:	f100 0001 	add.w	r0, r0, #1
 800d646:	d005      	beq.n	800d654 <__lo0bits+0x5c>
 800d648:	600b      	str	r3, [r1, #0]
 800d64a:	4770      	bx	lr
 800d64c:	4610      	mov	r0, r2
 800d64e:	e7e8      	b.n	800d622 <__lo0bits+0x2a>
 800d650:	2000      	movs	r0, #0
 800d652:	4770      	bx	lr
 800d654:	2020      	movs	r0, #32
 800d656:	4770      	bx	lr

0800d658 <__i2b>:
 800d658:	b510      	push	{r4, lr}
 800d65a:	460c      	mov	r4, r1
 800d65c:	2101      	movs	r1, #1
 800d65e:	f7ff feff 	bl	800d460 <_Balloc>
 800d662:	4602      	mov	r2, r0
 800d664:	b928      	cbnz	r0, 800d672 <__i2b+0x1a>
 800d666:	4b05      	ldr	r3, [pc, #20]	; (800d67c <__i2b+0x24>)
 800d668:	4805      	ldr	r0, [pc, #20]	; (800d680 <__i2b+0x28>)
 800d66a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d66e:	f000 fc9b 	bl	800dfa8 <__assert_func>
 800d672:	2301      	movs	r3, #1
 800d674:	6144      	str	r4, [r0, #20]
 800d676:	6103      	str	r3, [r0, #16]
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	bf00      	nop
 800d67c:	0800efef 	.word	0x0800efef
 800d680:	0800f000 	.word	0x0800f000

0800d684 <__multiply>:
 800d684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d688:	4614      	mov	r4, r2
 800d68a:	690a      	ldr	r2, [r1, #16]
 800d68c:	6923      	ldr	r3, [r4, #16]
 800d68e:	429a      	cmp	r2, r3
 800d690:	bfb8      	it	lt
 800d692:	460b      	movlt	r3, r1
 800d694:	460d      	mov	r5, r1
 800d696:	bfbc      	itt	lt
 800d698:	4625      	movlt	r5, r4
 800d69a:	461c      	movlt	r4, r3
 800d69c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d6a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d6a4:	68ab      	ldr	r3, [r5, #8]
 800d6a6:	6869      	ldr	r1, [r5, #4]
 800d6a8:	eb0a 0709 	add.w	r7, sl, r9
 800d6ac:	42bb      	cmp	r3, r7
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	bfb8      	it	lt
 800d6b2:	3101      	addlt	r1, #1
 800d6b4:	f7ff fed4 	bl	800d460 <_Balloc>
 800d6b8:	b930      	cbnz	r0, 800d6c8 <__multiply+0x44>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	4b42      	ldr	r3, [pc, #264]	; (800d7c8 <__multiply+0x144>)
 800d6be:	4843      	ldr	r0, [pc, #268]	; (800d7cc <__multiply+0x148>)
 800d6c0:	f240 115d 	movw	r1, #349	; 0x15d
 800d6c4:	f000 fc70 	bl	800dfa8 <__assert_func>
 800d6c8:	f100 0614 	add.w	r6, r0, #20
 800d6cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d6d0:	4633      	mov	r3, r6
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	4543      	cmp	r3, r8
 800d6d6:	d31e      	bcc.n	800d716 <__multiply+0x92>
 800d6d8:	f105 0c14 	add.w	ip, r5, #20
 800d6dc:	f104 0314 	add.w	r3, r4, #20
 800d6e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d6e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d6e8:	9202      	str	r2, [sp, #8]
 800d6ea:	ebac 0205 	sub.w	r2, ip, r5
 800d6ee:	3a15      	subs	r2, #21
 800d6f0:	f022 0203 	bic.w	r2, r2, #3
 800d6f4:	3204      	adds	r2, #4
 800d6f6:	f105 0115 	add.w	r1, r5, #21
 800d6fa:	458c      	cmp	ip, r1
 800d6fc:	bf38      	it	cc
 800d6fe:	2204      	movcc	r2, #4
 800d700:	9201      	str	r2, [sp, #4]
 800d702:	9a02      	ldr	r2, [sp, #8]
 800d704:	9303      	str	r3, [sp, #12]
 800d706:	429a      	cmp	r2, r3
 800d708:	d808      	bhi.n	800d71c <__multiply+0x98>
 800d70a:	2f00      	cmp	r7, #0
 800d70c:	dc55      	bgt.n	800d7ba <__multiply+0x136>
 800d70e:	6107      	str	r7, [r0, #16]
 800d710:	b005      	add	sp, #20
 800d712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d716:	f843 2b04 	str.w	r2, [r3], #4
 800d71a:	e7db      	b.n	800d6d4 <__multiply+0x50>
 800d71c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d720:	f1ba 0f00 	cmp.w	sl, #0
 800d724:	d020      	beq.n	800d768 <__multiply+0xe4>
 800d726:	f105 0e14 	add.w	lr, r5, #20
 800d72a:	46b1      	mov	r9, r6
 800d72c:	2200      	movs	r2, #0
 800d72e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d732:	f8d9 b000 	ldr.w	fp, [r9]
 800d736:	b2a1      	uxth	r1, r4
 800d738:	fa1f fb8b 	uxth.w	fp, fp
 800d73c:	fb0a b101 	mla	r1, sl, r1, fp
 800d740:	4411      	add	r1, r2
 800d742:	f8d9 2000 	ldr.w	r2, [r9]
 800d746:	0c24      	lsrs	r4, r4, #16
 800d748:	0c12      	lsrs	r2, r2, #16
 800d74a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d74e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d752:	b289      	uxth	r1, r1
 800d754:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d758:	45f4      	cmp	ip, lr
 800d75a:	f849 1b04 	str.w	r1, [r9], #4
 800d75e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d762:	d8e4      	bhi.n	800d72e <__multiply+0xaa>
 800d764:	9901      	ldr	r1, [sp, #4]
 800d766:	5072      	str	r2, [r6, r1]
 800d768:	9a03      	ldr	r2, [sp, #12]
 800d76a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d76e:	3304      	adds	r3, #4
 800d770:	f1b9 0f00 	cmp.w	r9, #0
 800d774:	d01f      	beq.n	800d7b6 <__multiply+0x132>
 800d776:	6834      	ldr	r4, [r6, #0]
 800d778:	f105 0114 	add.w	r1, r5, #20
 800d77c:	46b6      	mov	lr, r6
 800d77e:	f04f 0a00 	mov.w	sl, #0
 800d782:	880a      	ldrh	r2, [r1, #0]
 800d784:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d788:	fb09 b202 	mla	r2, r9, r2, fp
 800d78c:	4492      	add	sl, r2
 800d78e:	b2a4      	uxth	r4, r4
 800d790:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d794:	f84e 4b04 	str.w	r4, [lr], #4
 800d798:	f851 4b04 	ldr.w	r4, [r1], #4
 800d79c:	f8be 2000 	ldrh.w	r2, [lr]
 800d7a0:	0c24      	lsrs	r4, r4, #16
 800d7a2:	fb09 2404 	mla	r4, r9, r4, r2
 800d7a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d7aa:	458c      	cmp	ip, r1
 800d7ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d7b0:	d8e7      	bhi.n	800d782 <__multiply+0xfe>
 800d7b2:	9a01      	ldr	r2, [sp, #4]
 800d7b4:	50b4      	str	r4, [r6, r2]
 800d7b6:	3604      	adds	r6, #4
 800d7b8:	e7a3      	b.n	800d702 <__multiply+0x7e>
 800d7ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1a5      	bne.n	800d70e <__multiply+0x8a>
 800d7c2:	3f01      	subs	r7, #1
 800d7c4:	e7a1      	b.n	800d70a <__multiply+0x86>
 800d7c6:	bf00      	nop
 800d7c8:	0800efef 	.word	0x0800efef
 800d7cc:	0800f000 	.word	0x0800f000

0800d7d0 <__pow5mult>:
 800d7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7d4:	4615      	mov	r5, r2
 800d7d6:	f012 0203 	ands.w	r2, r2, #3
 800d7da:	4606      	mov	r6, r0
 800d7dc:	460f      	mov	r7, r1
 800d7de:	d007      	beq.n	800d7f0 <__pow5mult+0x20>
 800d7e0:	4c25      	ldr	r4, [pc, #148]	; (800d878 <__pow5mult+0xa8>)
 800d7e2:	3a01      	subs	r2, #1
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7ea:	f7ff fe9b 	bl	800d524 <__multadd>
 800d7ee:	4607      	mov	r7, r0
 800d7f0:	10ad      	asrs	r5, r5, #2
 800d7f2:	d03d      	beq.n	800d870 <__pow5mult+0xa0>
 800d7f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7f6:	b97c      	cbnz	r4, 800d818 <__pow5mult+0x48>
 800d7f8:	2010      	movs	r0, #16
 800d7fa:	f7ff fe1b 	bl	800d434 <malloc>
 800d7fe:	4602      	mov	r2, r0
 800d800:	6270      	str	r0, [r6, #36]	; 0x24
 800d802:	b928      	cbnz	r0, 800d810 <__pow5mult+0x40>
 800d804:	4b1d      	ldr	r3, [pc, #116]	; (800d87c <__pow5mult+0xac>)
 800d806:	481e      	ldr	r0, [pc, #120]	; (800d880 <__pow5mult+0xb0>)
 800d808:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d80c:	f000 fbcc 	bl	800dfa8 <__assert_func>
 800d810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d814:	6004      	str	r4, [r0, #0]
 800d816:	60c4      	str	r4, [r0, #12]
 800d818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d820:	b94c      	cbnz	r4, 800d836 <__pow5mult+0x66>
 800d822:	f240 2171 	movw	r1, #625	; 0x271
 800d826:	4630      	mov	r0, r6
 800d828:	f7ff ff16 	bl	800d658 <__i2b>
 800d82c:	2300      	movs	r3, #0
 800d82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d832:	4604      	mov	r4, r0
 800d834:	6003      	str	r3, [r0, #0]
 800d836:	f04f 0900 	mov.w	r9, #0
 800d83a:	07eb      	lsls	r3, r5, #31
 800d83c:	d50a      	bpl.n	800d854 <__pow5mult+0x84>
 800d83e:	4639      	mov	r1, r7
 800d840:	4622      	mov	r2, r4
 800d842:	4630      	mov	r0, r6
 800d844:	f7ff ff1e 	bl	800d684 <__multiply>
 800d848:	4639      	mov	r1, r7
 800d84a:	4680      	mov	r8, r0
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff fe47 	bl	800d4e0 <_Bfree>
 800d852:	4647      	mov	r7, r8
 800d854:	106d      	asrs	r5, r5, #1
 800d856:	d00b      	beq.n	800d870 <__pow5mult+0xa0>
 800d858:	6820      	ldr	r0, [r4, #0]
 800d85a:	b938      	cbnz	r0, 800d86c <__pow5mult+0x9c>
 800d85c:	4622      	mov	r2, r4
 800d85e:	4621      	mov	r1, r4
 800d860:	4630      	mov	r0, r6
 800d862:	f7ff ff0f 	bl	800d684 <__multiply>
 800d866:	6020      	str	r0, [r4, #0]
 800d868:	f8c0 9000 	str.w	r9, [r0]
 800d86c:	4604      	mov	r4, r0
 800d86e:	e7e4      	b.n	800d83a <__pow5mult+0x6a>
 800d870:	4638      	mov	r0, r7
 800d872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d876:	bf00      	nop
 800d878:	0800f150 	.word	0x0800f150
 800d87c:	0800ef79 	.word	0x0800ef79
 800d880:	0800f000 	.word	0x0800f000

0800d884 <__lshift>:
 800d884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d888:	460c      	mov	r4, r1
 800d88a:	6849      	ldr	r1, [r1, #4]
 800d88c:	6923      	ldr	r3, [r4, #16]
 800d88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d892:	68a3      	ldr	r3, [r4, #8]
 800d894:	4607      	mov	r7, r0
 800d896:	4691      	mov	r9, r2
 800d898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d89c:	f108 0601 	add.w	r6, r8, #1
 800d8a0:	42b3      	cmp	r3, r6
 800d8a2:	db0b      	blt.n	800d8bc <__lshift+0x38>
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	f7ff fddb 	bl	800d460 <_Balloc>
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	b948      	cbnz	r0, 800d8c2 <__lshift+0x3e>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	4b28      	ldr	r3, [pc, #160]	; (800d954 <__lshift+0xd0>)
 800d8b2:	4829      	ldr	r0, [pc, #164]	; (800d958 <__lshift+0xd4>)
 800d8b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d8b8:	f000 fb76 	bl	800dfa8 <__assert_func>
 800d8bc:	3101      	adds	r1, #1
 800d8be:	005b      	lsls	r3, r3, #1
 800d8c0:	e7ee      	b.n	800d8a0 <__lshift+0x1c>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f100 0114 	add.w	r1, r0, #20
 800d8c8:	f100 0210 	add.w	r2, r0, #16
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	4553      	cmp	r3, sl
 800d8d0:	db33      	blt.n	800d93a <__lshift+0xb6>
 800d8d2:	6920      	ldr	r0, [r4, #16]
 800d8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8d8:	f104 0314 	add.w	r3, r4, #20
 800d8dc:	f019 091f 	ands.w	r9, r9, #31
 800d8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8e8:	d02b      	beq.n	800d942 <__lshift+0xbe>
 800d8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800d8ee:	468a      	mov	sl, r1
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	6818      	ldr	r0, [r3, #0]
 800d8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800d8f8:	4302      	orrs	r2, r0
 800d8fa:	f84a 2b04 	str.w	r2, [sl], #4
 800d8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d902:	459c      	cmp	ip, r3
 800d904:	fa22 f20e 	lsr.w	r2, r2, lr
 800d908:	d8f3      	bhi.n	800d8f2 <__lshift+0x6e>
 800d90a:	ebac 0304 	sub.w	r3, ip, r4
 800d90e:	3b15      	subs	r3, #21
 800d910:	f023 0303 	bic.w	r3, r3, #3
 800d914:	3304      	adds	r3, #4
 800d916:	f104 0015 	add.w	r0, r4, #21
 800d91a:	4584      	cmp	ip, r0
 800d91c:	bf38      	it	cc
 800d91e:	2304      	movcc	r3, #4
 800d920:	50ca      	str	r2, [r1, r3]
 800d922:	b10a      	cbz	r2, 800d928 <__lshift+0xa4>
 800d924:	f108 0602 	add.w	r6, r8, #2
 800d928:	3e01      	subs	r6, #1
 800d92a:	4638      	mov	r0, r7
 800d92c:	612e      	str	r6, [r5, #16]
 800d92e:	4621      	mov	r1, r4
 800d930:	f7ff fdd6 	bl	800d4e0 <_Bfree>
 800d934:	4628      	mov	r0, r5
 800d936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d93e:	3301      	adds	r3, #1
 800d940:	e7c5      	b.n	800d8ce <__lshift+0x4a>
 800d942:	3904      	subs	r1, #4
 800d944:	f853 2b04 	ldr.w	r2, [r3], #4
 800d948:	f841 2f04 	str.w	r2, [r1, #4]!
 800d94c:	459c      	cmp	ip, r3
 800d94e:	d8f9      	bhi.n	800d944 <__lshift+0xc0>
 800d950:	e7ea      	b.n	800d928 <__lshift+0xa4>
 800d952:	bf00      	nop
 800d954:	0800efef 	.word	0x0800efef
 800d958:	0800f000 	.word	0x0800f000

0800d95c <__mcmp>:
 800d95c:	b530      	push	{r4, r5, lr}
 800d95e:	6902      	ldr	r2, [r0, #16]
 800d960:	690c      	ldr	r4, [r1, #16]
 800d962:	1b12      	subs	r2, r2, r4
 800d964:	d10e      	bne.n	800d984 <__mcmp+0x28>
 800d966:	f100 0314 	add.w	r3, r0, #20
 800d96a:	3114      	adds	r1, #20
 800d96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d97c:	42a5      	cmp	r5, r4
 800d97e:	d003      	beq.n	800d988 <__mcmp+0x2c>
 800d980:	d305      	bcc.n	800d98e <__mcmp+0x32>
 800d982:	2201      	movs	r2, #1
 800d984:	4610      	mov	r0, r2
 800d986:	bd30      	pop	{r4, r5, pc}
 800d988:	4283      	cmp	r3, r0
 800d98a:	d3f3      	bcc.n	800d974 <__mcmp+0x18>
 800d98c:	e7fa      	b.n	800d984 <__mcmp+0x28>
 800d98e:	f04f 32ff 	mov.w	r2, #4294967295
 800d992:	e7f7      	b.n	800d984 <__mcmp+0x28>

0800d994 <__mdiff>:
 800d994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d998:	460c      	mov	r4, r1
 800d99a:	4606      	mov	r6, r0
 800d99c:	4611      	mov	r1, r2
 800d99e:	4620      	mov	r0, r4
 800d9a0:	4617      	mov	r7, r2
 800d9a2:	f7ff ffdb 	bl	800d95c <__mcmp>
 800d9a6:	1e05      	subs	r5, r0, #0
 800d9a8:	d110      	bne.n	800d9cc <__mdiff+0x38>
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	f7ff fd57 	bl	800d460 <_Balloc>
 800d9b2:	b930      	cbnz	r0, 800d9c2 <__mdiff+0x2e>
 800d9b4:	4b39      	ldr	r3, [pc, #228]	; (800da9c <__mdiff+0x108>)
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	f240 2132 	movw	r1, #562	; 0x232
 800d9bc:	4838      	ldr	r0, [pc, #224]	; (800daa0 <__mdiff+0x10c>)
 800d9be:	f000 faf3 	bl	800dfa8 <__assert_func>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9cc:	bfa4      	itt	ge
 800d9ce:	463b      	movge	r3, r7
 800d9d0:	4627      	movge	r7, r4
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	6879      	ldr	r1, [r7, #4]
 800d9d6:	bfa6      	itte	ge
 800d9d8:	461c      	movge	r4, r3
 800d9da:	2500      	movge	r5, #0
 800d9dc:	2501      	movlt	r5, #1
 800d9de:	f7ff fd3f 	bl	800d460 <_Balloc>
 800d9e2:	b920      	cbnz	r0, 800d9ee <__mdiff+0x5a>
 800d9e4:	4b2d      	ldr	r3, [pc, #180]	; (800da9c <__mdiff+0x108>)
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9ec:	e7e6      	b.n	800d9bc <__mdiff+0x28>
 800d9ee:	693e      	ldr	r6, [r7, #16]
 800d9f0:	60c5      	str	r5, [r0, #12]
 800d9f2:	6925      	ldr	r5, [r4, #16]
 800d9f4:	f107 0114 	add.w	r1, r7, #20
 800d9f8:	f104 0914 	add.w	r9, r4, #20
 800d9fc:	f100 0e14 	add.w	lr, r0, #20
 800da00:	f107 0210 	add.w	r2, r7, #16
 800da04:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800da08:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800da0c:	46f2      	mov	sl, lr
 800da0e:	2700      	movs	r7, #0
 800da10:	f859 3b04 	ldr.w	r3, [r9], #4
 800da14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da18:	fa1f f883 	uxth.w	r8, r3
 800da1c:	fa17 f78b 	uxtah	r7, r7, fp
 800da20:	0c1b      	lsrs	r3, r3, #16
 800da22:	eba7 0808 	sub.w	r8, r7, r8
 800da26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da2e:	fa1f f888 	uxth.w	r8, r8
 800da32:	141f      	asrs	r7, r3, #16
 800da34:	454d      	cmp	r5, r9
 800da36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da3a:	f84a 3b04 	str.w	r3, [sl], #4
 800da3e:	d8e7      	bhi.n	800da10 <__mdiff+0x7c>
 800da40:	1b2b      	subs	r3, r5, r4
 800da42:	3b15      	subs	r3, #21
 800da44:	f023 0303 	bic.w	r3, r3, #3
 800da48:	3304      	adds	r3, #4
 800da4a:	3415      	adds	r4, #21
 800da4c:	42a5      	cmp	r5, r4
 800da4e:	bf38      	it	cc
 800da50:	2304      	movcc	r3, #4
 800da52:	4419      	add	r1, r3
 800da54:	4473      	add	r3, lr
 800da56:	469e      	mov	lr, r3
 800da58:	460d      	mov	r5, r1
 800da5a:	4565      	cmp	r5, ip
 800da5c:	d30e      	bcc.n	800da7c <__mdiff+0xe8>
 800da5e:	f10c 0203 	add.w	r2, ip, #3
 800da62:	1a52      	subs	r2, r2, r1
 800da64:	f022 0203 	bic.w	r2, r2, #3
 800da68:	3903      	subs	r1, #3
 800da6a:	458c      	cmp	ip, r1
 800da6c:	bf38      	it	cc
 800da6e:	2200      	movcc	r2, #0
 800da70:	441a      	add	r2, r3
 800da72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da76:	b17b      	cbz	r3, 800da98 <__mdiff+0x104>
 800da78:	6106      	str	r6, [r0, #16]
 800da7a:	e7a5      	b.n	800d9c8 <__mdiff+0x34>
 800da7c:	f855 8b04 	ldr.w	r8, [r5], #4
 800da80:	fa17 f488 	uxtah	r4, r7, r8
 800da84:	1422      	asrs	r2, r4, #16
 800da86:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800da8a:	b2a4      	uxth	r4, r4
 800da8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800da90:	f84e 4b04 	str.w	r4, [lr], #4
 800da94:	1417      	asrs	r7, r2, #16
 800da96:	e7e0      	b.n	800da5a <__mdiff+0xc6>
 800da98:	3e01      	subs	r6, #1
 800da9a:	e7ea      	b.n	800da72 <__mdiff+0xde>
 800da9c:	0800efef 	.word	0x0800efef
 800daa0:	0800f000 	.word	0x0800f000

0800daa4 <__d2b>:
 800daa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800daa8:	4689      	mov	r9, r1
 800daaa:	2101      	movs	r1, #1
 800daac:	ec57 6b10 	vmov	r6, r7, d0
 800dab0:	4690      	mov	r8, r2
 800dab2:	f7ff fcd5 	bl	800d460 <_Balloc>
 800dab6:	4604      	mov	r4, r0
 800dab8:	b930      	cbnz	r0, 800dac8 <__d2b+0x24>
 800daba:	4602      	mov	r2, r0
 800dabc:	4b25      	ldr	r3, [pc, #148]	; (800db54 <__d2b+0xb0>)
 800dabe:	4826      	ldr	r0, [pc, #152]	; (800db58 <__d2b+0xb4>)
 800dac0:	f240 310a 	movw	r1, #778	; 0x30a
 800dac4:	f000 fa70 	bl	800dfa8 <__assert_func>
 800dac8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dacc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dad0:	bb35      	cbnz	r5, 800db20 <__d2b+0x7c>
 800dad2:	2e00      	cmp	r6, #0
 800dad4:	9301      	str	r3, [sp, #4]
 800dad6:	d028      	beq.n	800db2a <__d2b+0x86>
 800dad8:	4668      	mov	r0, sp
 800dada:	9600      	str	r6, [sp, #0]
 800dadc:	f7ff fd8c 	bl	800d5f8 <__lo0bits>
 800dae0:	9900      	ldr	r1, [sp, #0]
 800dae2:	b300      	cbz	r0, 800db26 <__d2b+0x82>
 800dae4:	9a01      	ldr	r2, [sp, #4]
 800dae6:	f1c0 0320 	rsb	r3, r0, #32
 800daea:	fa02 f303 	lsl.w	r3, r2, r3
 800daee:	430b      	orrs	r3, r1
 800daf0:	40c2      	lsrs	r2, r0
 800daf2:	6163      	str	r3, [r4, #20]
 800daf4:	9201      	str	r2, [sp, #4]
 800daf6:	9b01      	ldr	r3, [sp, #4]
 800daf8:	61a3      	str	r3, [r4, #24]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	bf14      	ite	ne
 800dafe:	2202      	movne	r2, #2
 800db00:	2201      	moveq	r2, #1
 800db02:	6122      	str	r2, [r4, #16]
 800db04:	b1d5      	cbz	r5, 800db3c <__d2b+0x98>
 800db06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db0a:	4405      	add	r5, r0
 800db0c:	f8c9 5000 	str.w	r5, [r9]
 800db10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db14:	f8c8 0000 	str.w	r0, [r8]
 800db18:	4620      	mov	r0, r4
 800db1a:	b003      	add	sp, #12
 800db1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db24:	e7d5      	b.n	800dad2 <__d2b+0x2e>
 800db26:	6161      	str	r1, [r4, #20]
 800db28:	e7e5      	b.n	800daf6 <__d2b+0x52>
 800db2a:	a801      	add	r0, sp, #4
 800db2c:	f7ff fd64 	bl	800d5f8 <__lo0bits>
 800db30:	9b01      	ldr	r3, [sp, #4]
 800db32:	6163      	str	r3, [r4, #20]
 800db34:	2201      	movs	r2, #1
 800db36:	6122      	str	r2, [r4, #16]
 800db38:	3020      	adds	r0, #32
 800db3a:	e7e3      	b.n	800db04 <__d2b+0x60>
 800db3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db44:	f8c9 0000 	str.w	r0, [r9]
 800db48:	6918      	ldr	r0, [r3, #16]
 800db4a:	f7ff fd35 	bl	800d5b8 <__hi0bits>
 800db4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db52:	e7df      	b.n	800db14 <__d2b+0x70>
 800db54:	0800efef 	.word	0x0800efef
 800db58:	0800f000 	.word	0x0800f000

0800db5c <_calloc_r>:
 800db5c:	b513      	push	{r0, r1, r4, lr}
 800db5e:	434a      	muls	r2, r1
 800db60:	4611      	mov	r1, r2
 800db62:	9201      	str	r2, [sp, #4]
 800db64:	f000 f85a 	bl	800dc1c <_malloc_r>
 800db68:	4604      	mov	r4, r0
 800db6a:	b118      	cbz	r0, 800db74 <_calloc_r+0x18>
 800db6c:	9a01      	ldr	r2, [sp, #4]
 800db6e:	2100      	movs	r1, #0
 800db70:	f7fe f9e2 	bl	800bf38 <memset>
 800db74:	4620      	mov	r0, r4
 800db76:	b002      	add	sp, #8
 800db78:	bd10      	pop	{r4, pc}
	...

0800db7c <_free_r>:
 800db7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db7e:	2900      	cmp	r1, #0
 800db80:	d048      	beq.n	800dc14 <_free_r+0x98>
 800db82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db86:	9001      	str	r0, [sp, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f1a1 0404 	sub.w	r4, r1, #4
 800db8e:	bfb8      	it	lt
 800db90:	18e4      	addlt	r4, r4, r3
 800db92:	f000 fa65 	bl	800e060 <__malloc_lock>
 800db96:	4a20      	ldr	r2, [pc, #128]	; (800dc18 <_free_r+0x9c>)
 800db98:	9801      	ldr	r0, [sp, #4]
 800db9a:	6813      	ldr	r3, [r2, #0]
 800db9c:	4615      	mov	r5, r2
 800db9e:	b933      	cbnz	r3, 800dbae <_free_r+0x32>
 800dba0:	6063      	str	r3, [r4, #4]
 800dba2:	6014      	str	r4, [r2, #0]
 800dba4:	b003      	add	sp, #12
 800dba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbaa:	f000 ba5f 	b.w	800e06c <__malloc_unlock>
 800dbae:	42a3      	cmp	r3, r4
 800dbb0:	d90b      	bls.n	800dbca <_free_r+0x4e>
 800dbb2:	6821      	ldr	r1, [r4, #0]
 800dbb4:	1862      	adds	r2, r4, r1
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	bf04      	itt	eq
 800dbba:	681a      	ldreq	r2, [r3, #0]
 800dbbc:	685b      	ldreq	r3, [r3, #4]
 800dbbe:	6063      	str	r3, [r4, #4]
 800dbc0:	bf04      	itt	eq
 800dbc2:	1852      	addeq	r2, r2, r1
 800dbc4:	6022      	streq	r2, [r4, #0]
 800dbc6:	602c      	str	r4, [r5, #0]
 800dbc8:	e7ec      	b.n	800dba4 <_free_r+0x28>
 800dbca:	461a      	mov	r2, r3
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	b10b      	cbz	r3, 800dbd4 <_free_r+0x58>
 800dbd0:	42a3      	cmp	r3, r4
 800dbd2:	d9fa      	bls.n	800dbca <_free_r+0x4e>
 800dbd4:	6811      	ldr	r1, [r2, #0]
 800dbd6:	1855      	adds	r5, r2, r1
 800dbd8:	42a5      	cmp	r5, r4
 800dbda:	d10b      	bne.n	800dbf4 <_free_r+0x78>
 800dbdc:	6824      	ldr	r4, [r4, #0]
 800dbde:	4421      	add	r1, r4
 800dbe0:	1854      	adds	r4, r2, r1
 800dbe2:	42a3      	cmp	r3, r4
 800dbe4:	6011      	str	r1, [r2, #0]
 800dbe6:	d1dd      	bne.n	800dba4 <_free_r+0x28>
 800dbe8:	681c      	ldr	r4, [r3, #0]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	6053      	str	r3, [r2, #4]
 800dbee:	4421      	add	r1, r4
 800dbf0:	6011      	str	r1, [r2, #0]
 800dbf2:	e7d7      	b.n	800dba4 <_free_r+0x28>
 800dbf4:	d902      	bls.n	800dbfc <_free_r+0x80>
 800dbf6:	230c      	movs	r3, #12
 800dbf8:	6003      	str	r3, [r0, #0]
 800dbfa:	e7d3      	b.n	800dba4 <_free_r+0x28>
 800dbfc:	6825      	ldr	r5, [r4, #0]
 800dbfe:	1961      	adds	r1, r4, r5
 800dc00:	428b      	cmp	r3, r1
 800dc02:	bf04      	itt	eq
 800dc04:	6819      	ldreq	r1, [r3, #0]
 800dc06:	685b      	ldreq	r3, [r3, #4]
 800dc08:	6063      	str	r3, [r4, #4]
 800dc0a:	bf04      	itt	eq
 800dc0c:	1949      	addeq	r1, r1, r5
 800dc0e:	6021      	streq	r1, [r4, #0]
 800dc10:	6054      	str	r4, [r2, #4]
 800dc12:	e7c7      	b.n	800dba4 <_free_r+0x28>
 800dc14:	b003      	add	sp, #12
 800dc16:	bd30      	pop	{r4, r5, pc}
 800dc18:	200003a4 	.word	0x200003a4

0800dc1c <_malloc_r>:
 800dc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1e:	1ccd      	adds	r5, r1, #3
 800dc20:	f025 0503 	bic.w	r5, r5, #3
 800dc24:	3508      	adds	r5, #8
 800dc26:	2d0c      	cmp	r5, #12
 800dc28:	bf38      	it	cc
 800dc2a:	250c      	movcc	r5, #12
 800dc2c:	2d00      	cmp	r5, #0
 800dc2e:	4606      	mov	r6, r0
 800dc30:	db01      	blt.n	800dc36 <_malloc_r+0x1a>
 800dc32:	42a9      	cmp	r1, r5
 800dc34:	d903      	bls.n	800dc3e <_malloc_r+0x22>
 800dc36:	230c      	movs	r3, #12
 800dc38:	6033      	str	r3, [r6, #0]
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc3e:	f000 fa0f 	bl	800e060 <__malloc_lock>
 800dc42:	4921      	ldr	r1, [pc, #132]	; (800dcc8 <_malloc_r+0xac>)
 800dc44:	680a      	ldr	r2, [r1, #0]
 800dc46:	4614      	mov	r4, r2
 800dc48:	b99c      	cbnz	r4, 800dc72 <_malloc_r+0x56>
 800dc4a:	4f20      	ldr	r7, [pc, #128]	; (800dccc <_malloc_r+0xb0>)
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	b923      	cbnz	r3, 800dc5a <_malloc_r+0x3e>
 800dc50:	4621      	mov	r1, r4
 800dc52:	4630      	mov	r0, r6
 800dc54:	f000 f998 	bl	800df88 <_sbrk_r>
 800dc58:	6038      	str	r0, [r7, #0]
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	f000 f993 	bl	800df88 <_sbrk_r>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	d123      	bne.n	800dcae <_malloc_r+0x92>
 800dc66:	230c      	movs	r3, #12
 800dc68:	6033      	str	r3, [r6, #0]
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f000 f9fe 	bl	800e06c <__malloc_unlock>
 800dc70:	e7e3      	b.n	800dc3a <_malloc_r+0x1e>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	1b5b      	subs	r3, r3, r5
 800dc76:	d417      	bmi.n	800dca8 <_malloc_r+0x8c>
 800dc78:	2b0b      	cmp	r3, #11
 800dc7a:	d903      	bls.n	800dc84 <_malloc_r+0x68>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	441c      	add	r4, r3
 800dc80:	6025      	str	r5, [r4, #0]
 800dc82:	e004      	b.n	800dc8e <_malloc_r+0x72>
 800dc84:	6863      	ldr	r3, [r4, #4]
 800dc86:	42a2      	cmp	r2, r4
 800dc88:	bf0c      	ite	eq
 800dc8a:	600b      	streq	r3, [r1, #0]
 800dc8c:	6053      	strne	r3, [r2, #4]
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f000 f9ec 	bl	800e06c <__malloc_unlock>
 800dc94:	f104 000b 	add.w	r0, r4, #11
 800dc98:	1d23      	adds	r3, r4, #4
 800dc9a:	f020 0007 	bic.w	r0, r0, #7
 800dc9e:	1ac2      	subs	r2, r0, r3
 800dca0:	d0cc      	beq.n	800dc3c <_malloc_r+0x20>
 800dca2:	1a1b      	subs	r3, r3, r0
 800dca4:	50a3      	str	r3, [r4, r2]
 800dca6:	e7c9      	b.n	800dc3c <_malloc_r+0x20>
 800dca8:	4622      	mov	r2, r4
 800dcaa:	6864      	ldr	r4, [r4, #4]
 800dcac:	e7cc      	b.n	800dc48 <_malloc_r+0x2c>
 800dcae:	1cc4      	adds	r4, r0, #3
 800dcb0:	f024 0403 	bic.w	r4, r4, #3
 800dcb4:	42a0      	cmp	r0, r4
 800dcb6:	d0e3      	beq.n	800dc80 <_malloc_r+0x64>
 800dcb8:	1a21      	subs	r1, r4, r0
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f000 f964 	bl	800df88 <_sbrk_r>
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	d1dd      	bne.n	800dc80 <_malloc_r+0x64>
 800dcc4:	e7cf      	b.n	800dc66 <_malloc_r+0x4a>
 800dcc6:	bf00      	nop
 800dcc8:	200003a4 	.word	0x200003a4
 800dccc:	200003a8 	.word	0x200003a8

0800dcd0 <__ssputs_r>:
 800dcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd4:	688e      	ldr	r6, [r1, #8]
 800dcd6:	429e      	cmp	r6, r3
 800dcd8:	4682      	mov	sl, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	4690      	mov	r8, r2
 800dcde:	461f      	mov	r7, r3
 800dce0:	d838      	bhi.n	800dd54 <__ssputs_r+0x84>
 800dce2:	898a      	ldrh	r2, [r1, #12]
 800dce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dce8:	d032      	beq.n	800dd50 <__ssputs_r+0x80>
 800dcea:	6825      	ldr	r5, [r4, #0]
 800dcec:	6909      	ldr	r1, [r1, #16]
 800dcee:	eba5 0901 	sub.w	r9, r5, r1
 800dcf2:	6965      	ldr	r5, [r4, #20]
 800dcf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	444b      	add	r3, r9
 800dd00:	106d      	asrs	r5, r5, #1
 800dd02:	429d      	cmp	r5, r3
 800dd04:	bf38      	it	cc
 800dd06:	461d      	movcc	r5, r3
 800dd08:	0553      	lsls	r3, r2, #21
 800dd0a:	d531      	bpl.n	800dd70 <__ssputs_r+0xa0>
 800dd0c:	4629      	mov	r1, r5
 800dd0e:	f7ff ff85 	bl	800dc1c <_malloc_r>
 800dd12:	4606      	mov	r6, r0
 800dd14:	b950      	cbnz	r0, 800dd2c <__ssputs_r+0x5c>
 800dd16:	230c      	movs	r3, #12
 800dd18:	f8ca 3000 	str.w	r3, [sl]
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd22:	81a3      	strh	r3, [r4, #12]
 800dd24:	f04f 30ff 	mov.w	r0, #4294967295
 800dd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd2c:	6921      	ldr	r1, [r4, #16]
 800dd2e:	464a      	mov	r2, r9
 800dd30:	f7ff fb88 	bl	800d444 <memcpy>
 800dd34:	89a3      	ldrh	r3, [r4, #12]
 800dd36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd3e:	81a3      	strh	r3, [r4, #12]
 800dd40:	6126      	str	r6, [r4, #16]
 800dd42:	6165      	str	r5, [r4, #20]
 800dd44:	444e      	add	r6, r9
 800dd46:	eba5 0509 	sub.w	r5, r5, r9
 800dd4a:	6026      	str	r6, [r4, #0]
 800dd4c:	60a5      	str	r5, [r4, #8]
 800dd4e:	463e      	mov	r6, r7
 800dd50:	42be      	cmp	r6, r7
 800dd52:	d900      	bls.n	800dd56 <__ssputs_r+0x86>
 800dd54:	463e      	mov	r6, r7
 800dd56:	4632      	mov	r2, r6
 800dd58:	6820      	ldr	r0, [r4, #0]
 800dd5a:	4641      	mov	r1, r8
 800dd5c:	f000 f966 	bl	800e02c <memmove>
 800dd60:	68a3      	ldr	r3, [r4, #8]
 800dd62:	6822      	ldr	r2, [r4, #0]
 800dd64:	1b9b      	subs	r3, r3, r6
 800dd66:	4432      	add	r2, r6
 800dd68:	60a3      	str	r3, [r4, #8]
 800dd6a:	6022      	str	r2, [r4, #0]
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	e7db      	b.n	800dd28 <__ssputs_r+0x58>
 800dd70:	462a      	mov	r2, r5
 800dd72:	f000 f981 	bl	800e078 <_realloc_r>
 800dd76:	4606      	mov	r6, r0
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d1e1      	bne.n	800dd40 <__ssputs_r+0x70>
 800dd7c:	6921      	ldr	r1, [r4, #16]
 800dd7e:	4650      	mov	r0, sl
 800dd80:	f7ff fefc 	bl	800db7c <_free_r>
 800dd84:	e7c7      	b.n	800dd16 <__ssputs_r+0x46>
	...

0800dd88 <_svfiprintf_r>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	4698      	mov	r8, r3
 800dd8e:	898b      	ldrh	r3, [r1, #12]
 800dd90:	061b      	lsls	r3, r3, #24
 800dd92:	b09d      	sub	sp, #116	; 0x74
 800dd94:	4607      	mov	r7, r0
 800dd96:	460d      	mov	r5, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	d50e      	bpl.n	800ddba <_svfiprintf_r+0x32>
 800dd9c:	690b      	ldr	r3, [r1, #16]
 800dd9e:	b963      	cbnz	r3, 800ddba <_svfiprintf_r+0x32>
 800dda0:	2140      	movs	r1, #64	; 0x40
 800dda2:	f7ff ff3b 	bl	800dc1c <_malloc_r>
 800dda6:	6028      	str	r0, [r5, #0]
 800dda8:	6128      	str	r0, [r5, #16]
 800ddaa:	b920      	cbnz	r0, 800ddb6 <_svfiprintf_r+0x2e>
 800ddac:	230c      	movs	r3, #12
 800ddae:	603b      	str	r3, [r7, #0]
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	e0d1      	b.n	800df5a <_svfiprintf_r+0x1d2>
 800ddb6:	2340      	movs	r3, #64	; 0x40
 800ddb8:	616b      	str	r3, [r5, #20]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddbe:	2320      	movs	r3, #32
 800ddc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddc8:	2330      	movs	r3, #48	; 0x30
 800ddca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df74 <_svfiprintf_r+0x1ec>
 800ddce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddd2:	f04f 0901 	mov.w	r9, #1
 800ddd6:	4623      	mov	r3, r4
 800ddd8:	469a      	mov	sl, r3
 800ddda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddde:	b10a      	cbz	r2, 800dde4 <_svfiprintf_r+0x5c>
 800dde0:	2a25      	cmp	r2, #37	; 0x25
 800dde2:	d1f9      	bne.n	800ddd8 <_svfiprintf_r+0x50>
 800dde4:	ebba 0b04 	subs.w	fp, sl, r4
 800dde8:	d00b      	beq.n	800de02 <_svfiprintf_r+0x7a>
 800ddea:	465b      	mov	r3, fp
 800ddec:	4622      	mov	r2, r4
 800ddee:	4629      	mov	r1, r5
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	f7ff ff6d 	bl	800dcd0 <__ssputs_r>
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	f000 80aa 	beq.w	800df50 <_svfiprintf_r+0x1c8>
 800ddfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddfe:	445a      	add	r2, fp
 800de00:	9209      	str	r2, [sp, #36]	; 0x24
 800de02:	f89a 3000 	ldrb.w	r3, [sl]
 800de06:	2b00      	cmp	r3, #0
 800de08:	f000 80a2 	beq.w	800df50 <_svfiprintf_r+0x1c8>
 800de0c:	2300      	movs	r3, #0
 800de0e:	f04f 32ff 	mov.w	r2, #4294967295
 800de12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de16:	f10a 0a01 	add.w	sl, sl, #1
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	9307      	str	r3, [sp, #28]
 800de1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de22:	931a      	str	r3, [sp, #104]	; 0x68
 800de24:	4654      	mov	r4, sl
 800de26:	2205      	movs	r2, #5
 800de28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de2c:	4851      	ldr	r0, [pc, #324]	; (800df74 <_svfiprintf_r+0x1ec>)
 800de2e:	f7f2 fa0f 	bl	8000250 <memchr>
 800de32:	9a04      	ldr	r2, [sp, #16]
 800de34:	b9d8      	cbnz	r0, 800de6e <_svfiprintf_r+0xe6>
 800de36:	06d0      	lsls	r0, r2, #27
 800de38:	bf44      	itt	mi
 800de3a:	2320      	movmi	r3, #32
 800de3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de40:	0711      	lsls	r1, r2, #28
 800de42:	bf44      	itt	mi
 800de44:	232b      	movmi	r3, #43	; 0x2b
 800de46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de4a:	f89a 3000 	ldrb.w	r3, [sl]
 800de4e:	2b2a      	cmp	r3, #42	; 0x2a
 800de50:	d015      	beq.n	800de7e <_svfiprintf_r+0xf6>
 800de52:	9a07      	ldr	r2, [sp, #28]
 800de54:	4654      	mov	r4, sl
 800de56:	2000      	movs	r0, #0
 800de58:	f04f 0c0a 	mov.w	ip, #10
 800de5c:	4621      	mov	r1, r4
 800de5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de62:	3b30      	subs	r3, #48	; 0x30
 800de64:	2b09      	cmp	r3, #9
 800de66:	d94e      	bls.n	800df06 <_svfiprintf_r+0x17e>
 800de68:	b1b0      	cbz	r0, 800de98 <_svfiprintf_r+0x110>
 800de6a:	9207      	str	r2, [sp, #28]
 800de6c:	e014      	b.n	800de98 <_svfiprintf_r+0x110>
 800de6e:	eba0 0308 	sub.w	r3, r0, r8
 800de72:	fa09 f303 	lsl.w	r3, r9, r3
 800de76:	4313      	orrs	r3, r2
 800de78:	9304      	str	r3, [sp, #16]
 800de7a:	46a2      	mov	sl, r4
 800de7c:	e7d2      	b.n	800de24 <_svfiprintf_r+0x9c>
 800de7e:	9b03      	ldr	r3, [sp, #12]
 800de80:	1d19      	adds	r1, r3, #4
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	9103      	str	r1, [sp, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	bfbb      	ittet	lt
 800de8a:	425b      	neglt	r3, r3
 800de8c:	f042 0202 	orrlt.w	r2, r2, #2
 800de90:	9307      	strge	r3, [sp, #28]
 800de92:	9307      	strlt	r3, [sp, #28]
 800de94:	bfb8      	it	lt
 800de96:	9204      	strlt	r2, [sp, #16]
 800de98:	7823      	ldrb	r3, [r4, #0]
 800de9a:	2b2e      	cmp	r3, #46	; 0x2e
 800de9c:	d10c      	bne.n	800deb8 <_svfiprintf_r+0x130>
 800de9e:	7863      	ldrb	r3, [r4, #1]
 800dea0:	2b2a      	cmp	r3, #42	; 0x2a
 800dea2:	d135      	bne.n	800df10 <_svfiprintf_r+0x188>
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	1d1a      	adds	r2, r3, #4
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	9203      	str	r2, [sp, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	bfb8      	it	lt
 800deb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800deb4:	3402      	adds	r4, #2
 800deb6:	9305      	str	r3, [sp, #20]
 800deb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df84 <_svfiprintf_r+0x1fc>
 800debc:	7821      	ldrb	r1, [r4, #0]
 800debe:	2203      	movs	r2, #3
 800dec0:	4650      	mov	r0, sl
 800dec2:	f7f2 f9c5 	bl	8000250 <memchr>
 800dec6:	b140      	cbz	r0, 800deda <_svfiprintf_r+0x152>
 800dec8:	2340      	movs	r3, #64	; 0x40
 800deca:	eba0 000a 	sub.w	r0, r0, sl
 800dece:	fa03 f000 	lsl.w	r0, r3, r0
 800ded2:	9b04      	ldr	r3, [sp, #16]
 800ded4:	4303      	orrs	r3, r0
 800ded6:	3401      	adds	r4, #1
 800ded8:	9304      	str	r3, [sp, #16]
 800deda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dede:	4826      	ldr	r0, [pc, #152]	; (800df78 <_svfiprintf_r+0x1f0>)
 800dee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dee4:	2206      	movs	r2, #6
 800dee6:	f7f2 f9b3 	bl	8000250 <memchr>
 800deea:	2800      	cmp	r0, #0
 800deec:	d038      	beq.n	800df60 <_svfiprintf_r+0x1d8>
 800deee:	4b23      	ldr	r3, [pc, #140]	; (800df7c <_svfiprintf_r+0x1f4>)
 800def0:	bb1b      	cbnz	r3, 800df3a <_svfiprintf_r+0x1b2>
 800def2:	9b03      	ldr	r3, [sp, #12]
 800def4:	3307      	adds	r3, #7
 800def6:	f023 0307 	bic.w	r3, r3, #7
 800defa:	3308      	adds	r3, #8
 800defc:	9303      	str	r3, [sp, #12]
 800defe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df00:	4433      	add	r3, r6
 800df02:	9309      	str	r3, [sp, #36]	; 0x24
 800df04:	e767      	b.n	800ddd6 <_svfiprintf_r+0x4e>
 800df06:	fb0c 3202 	mla	r2, ip, r2, r3
 800df0a:	460c      	mov	r4, r1
 800df0c:	2001      	movs	r0, #1
 800df0e:	e7a5      	b.n	800de5c <_svfiprintf_r+0xd4>
 800df10:	2300      	movs	r3, #0
 800df12:	3401      	adds	r4, #1
 800df14:	9305      	str	r3, [sp, #20]
 800df16:	4619      	mov	r1, r3
 800df18:	f04f 0c0a 	mov.w	ip, #10
 800df1c:	4620      	mov	r0, r4
 800df1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df22:	3a30      	subs	r2, #48	; 0x30
 800df24:	2a09      	cmp	r2, #9
 800df26:	d903      	bls.n	800df30 <_svfiprintf_r+0x1a8>
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d0c5      	beq.n	800deb8 <_svfiprintf_r+0x130>
 800df2c:	9105      	str	r1, [sp, #20]
 800df2e:	e7c3      	b.n	800deb8 <_svfiprintf_r+0x130>
 800df30:	fb0c 2101 	mla	r1, ip, r1, r2
 800df34:	4604      	mov	r4, r0
 800df36:	2301      	movs	r3, #1
 800df38:	e7f0      	b.n	800df1c <_svfiprintf_r+0x194>
 800df3a:	ab03      	add	r3, sp, #12
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	462a      	mov	r2, r5
 800df40:	4b0f      	ldr	r3, [pc, #60]	; (800df80 <_svfiprintf_r+0x1f8>)
 800df42:	a904      	add	r1, sp, #16
 800df44:	4638      	mov	r0, r7
 800df46:	f7fe f88f 	bl	800c068 <_printf_float>
 800df4a:	1c42      	adds	r2, r0, #1
 800df4c:	4606      	mov	r6, r0
 800df4e:	d1d6      	bne.n	800defe <_svfiprintf_r+0x176>
 800df50:	89ab      	ldrh	r3, [r5, #12]
 800df52:	065b      	lsls	r3, r3, #25
 800df54:	f53f af2c 	bmi.w	800ddb0 <_svfiprintf_r+0x28>
 800df58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df5a:	b01d      	add	sp, #116	; 0x74
 800df5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df60:	ab03      	add	r3, sp, #12
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	462a      	mov	r2, r5
 800df66:	4b06      	ldr	r3, [pc, #24]	; (800df80 <_svfiprintf_r+0x1f8>)
 800df68:	a904      	add	r1, sp, #16
 800df6a:	4638      	mov	r0, r7
 800df6c:	f7fe fb08 	bl	800c580 <_printf_i>
 800df70:	e7eb      	b.n	800df4a <_svfiprintf_r+0x1c2>
 800df72:	bf00      	nop
 800df74:	0800f15c 	.word	0x0800f15c
 800df78:	0800f166 	.word	0x0800f166
 800df7c:	0800c069 	.word	0x0800c069
 800df80:	0800dcd1 	.word	0x0800dcd1
 800df84:	0800f162 	.word	0x0800f162

0800df88 <_sbrk_r>:
 800df88:	b538      	push	{r3, r4, r5, lr}
 800df8a:	4d06      	ldr	r5, [pc, #24]	; (800dfa4 <_sbrk_r+0x1c>)
 800df8c:	2300      	movs	r3, #0
 800df8e:	4604      	mov	r4, r0
 800df90:	4608      	mov	r0, r1
 800df92:	602b      	str	r3, [r5, #0]
 800df94:	f7f7 f8a2 	bl	80050dc <_sbrk>
 800df98:	1c43      	adds	r3, r0, #1
 800df9a:	d102      	bne.n	800dfa2 <_sbrk_r+0x1a>
 800df9c:	682b      	ldr	r3, [r5, #0]
 800df9e:	b103      	cbz	r3, 800dfa2 <_sbrk_r+0x1a>
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	bd38      	pop	{r3, r4, r5, pc}
 800dfa4:	2000081c 	.word	0x2000081c

0800dfa8 <__assert_func>:
 800dfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfaa:	4614      	mov	r4, r2
 800dfac:	461a      	mov	r2, r3
 800dfae:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <__assert_func+0x2c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	68d8      	ldr	r0, [r3, #12]
 800dfb6:	b14c      	cbz	r4, 800dfcc <__assert_func+0x24>
 800dfb8:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <__assert_func+0x30>)
 800dfba:	9100      	str	r1, [sp, #0]
 800dfbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfc0:	4906      	ldr	r1, [pc, #24]	; (800dfdc <__assert_func+0x34>)
 800dfc2:	462b      	mov	r3, r5
 800dfc4:	f000 f80e 	bl	800dfe4 <fiprintf>
 800dfc8:	f000 faa4 	bl	800e514 <abort>
 800dfcc:	4b04      	ldr	r3, [pc, #16]	; (800dfe0 <__assert_func+0x38>)
 800dfce:	461c      	mov	r4, r3
 800dfd0:	e7f3      	b.n	800dfba <__assert_func+0x12>
 800dfd2:	bf00      	nop
 800dfd4:	200000dc 	.word	0x200000dc
 800dfd8:	0800f16d 	.word	0x0800f16d
 800dfdc:	0800f17a 	.word	0x0800f17a
 800dfe0:	0800f1a8 	.word	0x0800f1a8

0800dfe4 <fiprintf>:
 800dfe4:	b40e      	push	{r1, r2, r3}
 800dfe6:	b503      	push	{r0, r1, lr}
 800dfe8:	4601      	mov	r1, r0
 800dfea:	ab03      	add	r3, sp, #12
 800dfec:	4805      	ldr	r0, [pc, #20]	; (800e004 <fiprintf+0x20>)
 800dfee:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff2:	6800      	ldr	r0, [r0, #0]
 800dff4:	9301      	str	r3, [sp, #4]
 800dff6:	f000 f88f 	bl	800e118 <_vfiprintf_r>
 800dffa:	b002      	add	sp, #8
 800dffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e000:	b003      	add	sp, #12
 800e002:	4770      	bx	lr
 800e004:	200000dc 	.word	0x200000dc

0800e008 <__ascii_mbtowc>:
 800e008:	b082      	sub	sp, #8
 800e00a:	b901      	cbnz	r1, 800e00e <__ascii_mbtowc+0x6>
 800e00c:	a901      	add	r1, sp, #4
 800e00e:	b142      	cbz	r2, 800e022 <__ascii_mbtowc+0x1a>
 800e010:	b14b      	cbz	r3, 800e026 <__ascii_mbtowc+0x1e>
 800e012:	7813      	ldrb	r3, [r2, #0]
 800e014:	600b      	str	r3, [r1, #0]
 800e016:	7812      	ldrb	r2, [r2, #0]
 800e018:	1e10      	subs	r0, r2, #0
 800e01a:	bf18      	it	ne
 800e01c:	2001      	movne	r0, #1
 800e01e:	b002      	add	sp, #8
 800e020:	4770      	bx	lr
 800e022:	4610      	mov	r0, r2
 800e024:	e7fb      	b.n	800e01e <__ascii_mbtowc+0x16>
 800e026:	f06f 0001 	mvn.w	r0, #1
 800e02a:	e7f8      	b.n	800e01e <__ascii_mbtowc+0x16>

0800e02c <memmove>:
 800e02c:	4288      	cmp	r0, r1
 800e02e:	b510      	push	{r4, lr}
 800e030:	eb01 0402 	add.w	r4, r1, r2
 800e034:	d902      	bls.n	800e03c <memmove+0x10>
 800e036:	4284      	cmp	r4, r0
 800e038:	4623      	mov	r3, r4
 800e03a:	d807      	bhi.n	800e04c <memmove+0x20>
 800e03c:	1e43      	subs	r3, r0, #1
 800e03e:	42a1      	cmp	r1, r4
 800e040:	d008      	beq.n	800e054 <memmove+0x28>
 800e042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e04a:	e7f8      	b.n	800e03e <memmove+0x12>
 800e04c:	4402      	add	r2, r0
 800e04e:	4601      	mov	r1, r0
 800e050:	428a      	cmp	r2, r1
 800e052:	d100      	bne.n	800e056 <memmove+0x2a>
 800e054:	bd10      	pop	{r4, pc}
 800e056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e05e:	e7f7      	b.n	800e050 <memmove+0x24>

0800e060 <__malloc_lock>:
 800e060:	4801      	ldr	r0, [pc, #4]	; (800e068 <__malloc_lock+0x8>)
 800e062:	f000 bc17 	b.w	800e894 <__retarget_lock_acquire_recursive>
 800e066:	bf00      	nop
 800e068:	20000824 	.word	0x20000824

0800e06c <__malloc_unlock>:
 800e06c:	4801      	ldr	r0, [pc, #4]	; (800e074 <__malloc_unlock+0x8>)
 800e06e:	f000 bc12 	b.w	800e896 <__retarget_lock_release_recursive>
 800e072:	bf00      	nop
 800e074:	20000824 	.word	0x20000824

0800e078 <_realloc_r>:
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07a:	4607      	mov	r7, r0
 800e07c:	4614      	mov	r4, r2
 800e07e:	460e      	mov	r6, r1
 800e080:	b921      	cbnz	r1, 800e08c <_realloc_r+0x14>
 800e082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e086:	4611      	mov	r1, r2
 800e088:	f7ff bdc8 	b.w	800dc1c <_malloc_r>
 800e08c:	b922      	cbnz	r2, 800e098 <_realloc_r+0x20>
 800e08e:	f7ff fd75 	bl	800db7c <_free_r>
 800e092:	4625      	mov	r5, r4
 800e094:	4628      	mov	r0, r5
 800e096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e098:	f000 fc62 	bl	800e960 <_malloc_usable_size_r>
 800e09c:	42a0      	cmp	r0, r4
 800e09e:	d20f      	bcs.n	800e0c0 <_realloc_r+0x48>
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f7ff fdba 	bl	800dc1c <_malloc_r>
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0f2      	beq.n	800e094 <_realloc_r+0x1c>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	f7ff f9c7 	bl	800d444 <memcpy>
 800e0b6:	4631      	mov	r1, r6
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f7ff fd5f 	bl	800db7c <_free_r>
 800e0be:	e7e9      	b.n	800e094 <_realloc_r+0x1c>
 800e0c0:	4635      	mov	r5, r6
 800e0c2:	e7e7      	b.n	800e094 <_realloc_r+0x1c>

0800e0c4 <__sfputc_r>:
 800e0c4:	6893      	ldr	r3, [r2, #8]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	b410      	push	{r4}
 800e0cc:	6093      	str	r3, [r2, #8]
 800e0ce:	da08      	bge.n	800e0e2 <__sfputc_r+0x1e>
 800e0d0:	6994      	ldr	r4, [r2, #24]
 800e0d2:	42a3      	cmp	r3, r4
 800e0d4:	db01      	blt.n	800e0da <__sfputc_r+0x16>
 800e0d6:	290a      	cmp	r1, #10
 800e0d8:	d103      	bne.n	800e0e2 <__sfputc_r+0x1e>
 800e0da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0de:	f000 b94b 	b.w	800e378 <__swbuf_r>
 800e0e2:	6813      	ldr	r3, [r2, #0]
 800e0e4:	1c58      	adds	r0, r3, #1
 800e0e6:	6010      	str	r0, [r2, #0]
 800e0e8:	7019      	strb	r1, [r3, #0]
 800e0ea:	4608      	mov	r0, r1
 800e0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <__sfputs_r>:
 800e0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	460f      	mov	r7, r1
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	18d5      	adds	r5, r2, r3
 800e0fc:	42ac      	cmp	r4, r5
 800e0fe:	d101      	bne.n	800e104 <__sfputs_r+0x12>
 800e100:	2000      	movs	r0, #0
 800e102:	e007      	b.n	800e114 <__sfputs_r+0x22>
 800e104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e108:	463a      	mov	r2, r7
 800e10a:	4630      	mov	r0, r6
 800e10c:	f7ff ffda 	bl	800e0c4 <__sfputc_r>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d1f3      	bne.n	800e0fc <__sfputs_r+0xa>
 800e114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e118 <_vfiprintf_r>:
 800e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11c:	460d      	mov	r5, r1
 800e11e:	b09d      	sub	sp, #116	; 0x74
 800e120:	4614      	mov	r4, r2
 800e122:	4698      	mov	r8, r3
 800e124:	4606      	mov	r6, r0
 800e126:	b118      	cbz	r0, 800e130 <_vfiprintf_r+0x18>
 800e128:	6983      	ldr	r3, [r0, #24]
 800e12a:	b90b      	cbnz	r3, 800e130 <_vfiprintf_r+0x18>
 800e12c:	f000 fb14 	bl	800e758 <__sinit>
 800e130:	4b89      	ldr	r3, [pc, #548]	; (800e358 <_vfiprintf_r+0x240>)
 800e132:	429d      	cmp	r5, r3
 800e134:	d11b      	bne.n	800e16e <_vfiprintf_r+0x56>
 800e136:	6875      	ldr	r5, [r6, #4]
 800e138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e13a:	07d9      	lsls	r1, r3, #31
 800e13c:	d405      	bmi.n	800e14a <_vfiprintf_r+0x32>
 800e13e:	89ab      	ldrh	r3, [r5, #12]
 800e140:	059a      	lsls	r2, r3, #22
 800e142:	d402      	bmi.n	800e14a <_vfiprintf_r+0x32>
 800e144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e146:	f000 fba5 	bl	800e894 <__retarget_lock_acquire_recursive>
 800e14a:	89ab      	ldrh	r3, [r5, #12]
 800e14c:	071b      	lsls	r3, r3, #28
 800e14e:	d501      	bpl.n	800e154 <_vfiprintf_r+0x3c>
 800e150:	692b      	ldr	r3, [r5, #16]
 800e152:	b9eb      	cbnz	r3, 800e190 <_vfiprintf_r+0x78>
 800e154:	4629      	mov	r1, r5
 800e156:	4630      	mov	r0, r6
 800e158:	f000 f96e 	bl	800e438 <__swsetup_r>
 800e15c:	b1c0      	cbz	r0, 800e190 <_vfiprintf_r+0x78>
 800e15e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e160:	07dc      	lsls	r4, r3, #31
 800e162:	d50e      	bpl.n	800e182 <_vfiprintf_r+0x6a>
 800e164:	f04f 30ff 	mov.w	r0, #4294967295
 800e168:	b01d      	add	sp, #116	; 0x74
 800e16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16e:	4b7b      	ldr	r3, [pc, #492]	; (800e35c <_vfiprintf_r+0x244>)
 800e170:	429d      	cmp	r5, r3
 800e172:	d101      	bne.n	800e178 <_vfiprintf_r+0x60>
 800e174:	68b5      	ldr	r5, [r6, #8]
 800e176:	e7df      	b.n	800e138 <_vfiprintf_r+0x20>
 800e178:	4b79      	ldr	r3, [pc, #484]	; (800e360 <_vfiprintf_r+0x248>)
 800e17a:	429d      	cmp	r5, r3
 800e17c:	bf08      	it	eq
 800e17e:	68f5      	ldreq	r5, [r6, #12]
 800e180:	e7da      	b.n	800e138 <_vfiprintf_r+0x20>
 800e182:	89ab      	ldrh	r3, [r5, #12]
 800e184:	0598      	lsls	r0, r3, #22
 800e186:	d4ed      	bmi.n	800e164 <_vfiprintf_r+0x4c>
 800e188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e18a:	f000 fb84 	bl	800e896 <__retarget_lock_release_recursive>
 800e18e:	e7e9      	b.n	800e164 <_vfiprintf_r+0x4c>
 800e190:	2300      	movs	r3, #0
 800e192:	9309      	str	r3, [sp, #36]	; 0x24
 800e194:	2320      	movs	r3, #32
 800e196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e19e:	2330      	movs	r3, #48	; 0x30
 800e1a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e364 <_vfiprintf_r+0x24c>
 800e1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1a8:	f04f 0901 	mov.w	r9, #1
 800e1ac:	4623      	mov	r3, r4
 800e1ae:	469a      	mov	sl, r3
 800e1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1b4:	b10a      	cbz	r2, 800e1ba <_vfiprintf_r+0xa2>
 800e1b6:	2a25      	cmp	r2, #37	; 0x25
 800e1b8:	d1f9      	bne.n	800e1ae <_vfiprintf_r+0x96>
 800e1ba:	ebba 0b04 	subs.w	fp, sl, r4
 800e1be:	d00b      	beq.n	800e1d8 <_vfiprintf_r+0xc0>
 800e1c0:	465b      	mov	r3, fp
 800e1c2:	4622      	mov	r2, r4
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f7ff ff93 	bl	800e0f2 <__sfputs_r>
 800e1cc:	3001      	adds	r0, #1
 800e1ce:	f000 80aa 	beq.w	800e326 <_vfiprintf_r+0x20e>
 800e1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1d4:	445a      	add	r2, fp
 800e1d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 80a2 	beq.w	800e326 <_vfiprintf_r+0x20e>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1ec:	f10a 0a01 	add.w	sl, sl, #1
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	9307      	str	r3, [sp, #28]
 800e1f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e1fa:	4654      	mov	r4, sl
 800e1fc:	2205      	movs	r2, #5
 800e1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e202:	4858      	ldr	r0, [pc, #352]	; (800e364 <_vfiprintf_r+0x24c>)
 800e204:	f7f2 f824 	bl	8000250 <memchr>
 800e208:	9a04      	ldr	r2, [sp, #16]
 800e20a:	b9d8      	cbnz	r0, 800e244 <_vfiprintf_r+0x12c>
 800e20c:	06d1      	lsls	r1, r2, #27
 800e20e:	bf44      	itt	mi
 800e210:	2320      	movmi	r3, #32
 800e212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e216:	0713      	lsls	r3, r2, #28
 800e218:	bf44      	itt	mi
 800e21a:	232b      	movmi	r3, #43	; 0x2b
 800e21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e220:	f89a 3000 	ldrb.w	r3, [sl]
 800e224:	2b2a      	cmp	r3, #42	; 0x2a
 800e226:	d015      	beq.n	800e254 <_vfiprintf_r+0x13c>
 800e228:	9a07      	ldr	r2, [sp, #28]
 800e22a:	4654      	mov	r4, sl
 800e22c:	2000      	movs	r0, #0
 800e22e:	f04f 0c0a 	mov.w	ip, #10
 800e232:	4621      	mov	r1, r4
 800e234:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e238:	3b30      	subs	r3, #48	; 0x30
 800e23a:	2b09      	cmp	r3, #9
 800e23c:	d94e      	bls.n	800e2dc <_vfiprintf_r+0x1c4>
 800e23e:	b1b0      	cbz	r0, 800e26e <_vfiprintf_r+0x156>
 800e240:	9207      	str	r2, [sp, #28]
 800e242:	e014      	b.n	800e26e <_vfiprintf_r+0x156>
 800e244:	eba0 0308 	sub.w	r3, r0, r8
 800e248:	fa09 f303 	lsl.w	r3, r9, r3
 800e24c:	4313      	orrs	r3, r2
 800e24e:	9304      	str	r3, [sp, #16]
 800e250:	46a2      	mov	sl, r4
 800e252:	e7d2      	b.n	800e1fa <_vfiprintf_r+0xe2>
 800e254:	9b03      	ldr	r3, [sp, #12]
 800e256:	1d19      	adds	r1, r3, #4
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	9103      	str	r1, [sp, #12]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	bfbb      	ittet	lt
 800e260:	425b      	neglt	r3, r3
 800e262:	f042 0202 	orrlt.w	r2, r2, #2
 800e266:	9307      	strge	r3, [sp, #28]
 800e268:	9307      	strlt	r3, [sp, #28]
 800e26a:	bfb8      	it	lt
 800e26c:	9204      	strlt	r2, [sp, #16]
 800e26e:	7823      	ldrb	r3, [r4, #0]
 800e270:	2b2e      	cmp	r3, #46	; 0x2e
 800e272:	d10c      	bne.n	800e28e <_vfiprintf_r+0x176>
 800e274:	7863      	ldrb	r3, [r4, #1]
 800e276:	2b2a      	cmp	r3, #42	; 0x2a
 800e278:	d135      	bne.n	800e2e6 <_vfiprintf_r+0x1ce>
 800e27a:	9b03      	ldr	r3, [sp, #12]
 800e27c:	1d1a      	adds	r2, r3, #4
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	9203      	str	r2, [sp, #12]
 800e282:	2b00      	cmp	r3, #0
 800e284:	bfb8      	it	lt
 800e286:	f04f 33ff 	movlt.w	r3, #4294967295
 800e28a:	3402      	adds	r4, #2
 800e28c:	9305      	str	r3, [sp, #20]
 800e28e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e374 <_vfiprintf_r+0x25c>
 800e292:	7821      	ldrb	r1, [r4, #0]
 800e294:	2203      	movs	r2, #3
 800e296:	4650      	mov	r0, sl
 800e298:	f7f1 ffda 	bl	8000250 <memchr>
 800e29c:	b140      	cbz	r0, 800e2b0 <_vfiprintf_r+0x198>
 800e29e:	2340      	movs	r3, #64	; 0x40
 800e2a0:	eba0 000a 	sub.w	r0, r0, sl
 800e2a4:	fa03 f000 	lsl.w	r0, r3, r0
 800e2a8:	9b04      	ldr	r3, [sp, #16]
 800e2aa:	4303      	orrs	r3, r0
 800e2ac:	3401      	adds	r4, #1
 800e2ae:	9304      	str	r3, [sp, #16]
 800e2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b4:	482c      	ldr	r0, [pc, #176]	; (800e368 <_vfiprintf_r+0x250>)
 800e2b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2ba:	2206      	movs	r2, #6
 800e2bc:	f7f1 ffc8 	bl	8000250 <memchr>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d03f      	beq.n	800e344 <_vfiprintf_r+0x22c>
 800e2c4:	4b29      	ldr	r3, [pc, #164]	; (800e36c <_vfiprintf_r+0x254>)
 800e2c6:	bb1b      	cbnz	r3, 800e310 <_vfiprintf_r+0x1f8>
 800e2c8:	9b03      	ldr	r3, [sp, #12]
 800e2ca:	3307      	adds	r3, #7
 800e2cc:	f023 0307 	bic.w	r3, r3, #7
 800e2d0:	3308      	adds	r3, #8
 800e2d2:	9303      	str	r3, [sp, #12]
 800e2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d6:	443b      	add	r3, r7
 800e2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2da:	e767      	b.n	800e1ac <_vfiprintf_r+0x94>
 800e2dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	e7a5      	b.n	800e232 <_vfiprintf_r+0x11a>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	3401      	adds	r4, #1
 800e2ea:	9305      	str	r3, [sp, #20]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	f04f 0c0a 	mov.w	ip, #10
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2f8:	3a30      	subs	r2, #48	; 0x30
 800e2fa:	2a09      	cmp	r2, #9
 800e2fc:	d903      	bls.n	800e306 <_vfiprintf_r+0x1ee>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0c5      	beq.n	800e28e <_vfiprintf_r+0x176>
 800e302:	9105      	str	r1, [sp, #20]
 800e304:	e7c3      	b.n	800e28e <_vfiprintf_r+0x176>
 800e306:	fb0c 2101 	mla	r1, ip, r1, r2
 800e30a:	4604      	mov	r4, r0
 800e30c:	2301      	movs	r3, #1
 800e30e:	e7f0      	b.n	800e2f2 <_vfiprintf_r+0x1da>
 800e310:	ab03      	add	r3, sp, #12
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	462a      	mov	r2, r5
 800e316:	4b16      	ldr	r3, [pc, #88]	; (800e370 <_vfiprintf_r+0x258>)
 800e318:	a904      	add	r1, sp, #16
 800e31a:	4630      	mov	r0, r6
 800e31c:	f7fd fea4 	bl	800c068 <_printf_float>
 800e320:	4607      	mov	r7, r0
 800e322:	1c78      	adds	r0, r7, #1
 800e324:	d1d6      	bne.n	800e2d4 <_vfiprintf_r+0x1bc>
 800e326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e328:	07d9      	lsls	r1, r3, #31
 800e32a:	d405      	bmi.n	800e338 <_vfiprintf_r+0x220>
 800e32c:	89ab      	ldrh	r3, [r5, #12]
 800e32e:	059a      	lsls	r2, r3, #22
 800e330:	d402      	bmi.n	800e338 <_vfiprintf_r+0x220>
 800e332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e334:	f000 faaf 	bl	800e896 <__retarget_lock_release_recursive>
 800e338:	89ab      	ldrh	r3, [r5, #12]
 800e33a:	065b      	lsls	r3, r3, #25
 800e33c:	f53f af12 	bmi.w	800e164 <_vfiprintf_r+0x4c>
 800e340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e342:	e711      	b.n	800e168 <_vfiprintf_r+0x50>
 800e344:	ab03      	add	r3, sp, #12
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	462a      	mov	r2, r5
 800e34a:	4b09      	ldr	r3, [pc, #36]	; (800e370 <_vfiprintf_r+0x258>)
 800e34c:	a904      	add	r1, sp, #16
 800e34e:	4630      	mov	r0, r6
 800e350:	f7fe f916 	bl	800c580 <_printf_i>
 800e354:	e7e4      	b.n	800e320 <_vfiprintf_r+0x208>
 800e356:	bf00      	nop
 800e358:	0800f2d4 	.word	0x0800f2d4
 800e35c:	0800f2f4 	.word	0x0800f2f4
 800e360:	0800f2b4 	.word	0x0800f2b4
 800e364:	0800f15c 	.word	0x0800f15c
 800e368:	0800f166 	.word	0x0800f166
 800e36c:	0800c069 	.word	0x0800c069
 800e370:	0800e0f3 	.word	0x0800e0f3
 800e374:	0800f162 	.word	0x0800f162

0800e378 <__swbuf_r>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	460e      	mov	r6, r1
 800e37c:	4614      	mov	r4, r2
 800e37e:	4605      	mov	r5, r0
 800e380:	b118      	cbz	r0, 800e38a <__swbuf_r+0x12>
 800e382:	6983      	ldr	r3, [r0, #24]
 800e384:	b90b      	cbnz	r3, 800e38a <__swbuf_r+0x12>
 800e386:	f000 f9e7 	bl	800e758 <__sinit>
 800e38a:	4b21      	ldr	r3, [pc, #132]	; (800e410 <__swbuf_r+0x98>)
 800e38c:	429c      	cmp	r4, r3
 800e38e:	d12b      	bne.n	800e3e8 <__swbuf_r+0x70>
 800e390:	686c      	ldr	r4, [r5, #4]
 800e392:	69a3      	ldr	r3, [r4, #24]
 800e394:	60a3      	str	r3, [r4, #8]
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	071a      	lsls	r2, r3, #28
 800e39a:	d52f      	bpl.n	800e3fc <__swbuf_r+0x84>
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	b36b      	cbz	r3, 800e3fc <__swbuf_r+0x84>
 800e3a0:	6923      	ldr	r3, [r4, #16]
 800e3a2:	6820      	ldr	r0, [r4, #0]
 800e3a4:	1ac0      	subs	r0, r0, r3
 800e3a6:	6963      	ldr	r3, [r4, #20]
 800e3a8:	b2f6      	uxtb	r6, r6
 800e3aa:	4283      	cmp	r3, r0
 800e3ac:	4637      	mov	r7, r6
 800e3ae:	dc04      	bgt.n	800e3ba <__swbuf_r+0x42>
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	f000 f93c 	bl	800e630 <_fflush_r>
 800e3b8:	bb30      	cbnz	r0, 800e408 <__swbuf_r+0x90>
 800e3ba:	68a3      	ldr	r3, [r4, #8]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	60a3      	str	r3, [r4, #8]
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	1c5a      	adds	r2, r3, #1
 800e3c4:	6022      	str	r2, [r4, #0]
 800e3c6:	701e      	strb	r6, [r3, #0]
 800e3c8:	6963      	ldr	r3, [r4, #20]
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	4283      	cmp	r3, r0
 800e3ce:	d004      	beq.n	800e3da <__swbuf_r+0x62>
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	07db      	lsls	r3, r3, #31
 800e3d4:	d506      	bpl.n	800e3e4 <__swbuf_r+0x6c>
 800e3d6:	2e0a      	cmp	r6, #10
 800e3d8:	d104      	bne.n	800e3e4 <__swbuf_r+0x6c>
 800e3da:	4621      	mov	r1, r4
 800e3dc:	4628      	mov	r0, r5
 800e3de:	f000 f927 	bl	800e630 <_fflush_r>
 800e3e2:	b988      	cbnz	r0, 800e408 <__swbuf_r+0x90>
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	; (800e414 <__swbuf_r+0x9c>)
 800e3ea:	429c      	cmp	r4, r3
 800e3ec:	d101      	bne.n	800e3f2 <__swbuf_r+0x7a>
 800e3ee:	68ac      	ldr	r4, [r5, #8]
 800e3f0:	e7cf      	b.n	800e392 <__swbuf_r+0x1a>
 800e3f2:	4b09      	ldr	r3, [pc, #36]	; (800e418 <__swbuf_r+0xa0>)
 800e3f4:	429c      	cmp	r4, r3
 800e3f6:	bf08      	it	eq
 800e3f8:	68ec      	ldreq	r4, [r5, #12]
 800e3fa:	e7ca      	b.n	800e392 <__swbuf_r+0x1a>
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4628      	mov	r0, r5
 800e400:	f000 f81a 	bl	800e438 <__swsetup_r>
 800e404:	2800      	cmp	r0, #0
 800e406:	d0cb      	beq.n	800e3a0 <__swbuf_r+0x28>
 800e408:	f04f 37ff 	mov.w	r7, #4294967295
 800e40c:	e7ea      	b.n	800e3e4 <__swbuf_r+0x6c>
 800e40e:	bf00      	nop
 800e410:	0800f2d4 	.word	0x0800f2d4
 800e414:	0800f2f4 	.word	0x0800f2f4
 800e418:	0800f2b4 	.word	0x0800f2b4

0800e41c <__ascii_wctomb>:
 800e41c:	b149      	cbz	r1, 800e432 <__ascii_wctomb+0x16>
 800e41e:	2aff      	cmp	r2, #255	; 0xff
 800e420:	bf85      	ittet	hi
 800e422:	238a      	movhi	r3, #138	; 0x8a
 800e424:	6003      	strhi	r3, [r0, #0]
 800e426:	700a      	strbls	r2, [r1, #0]
 800e428:	f04f 30ff 	movhi.w	r0, #4294967295
 800e42c:	bf98      	it	ls
 800e42e:	2001      	movls	r0, #1
 800e430:	4770      	bx	lr
 800e432:	4608      	mov	r0, r1
 800e434:	4770      	bx	lr
	...

0800e438 <__swsetup_r>:
 800e438:	4b32      	ldr	r3, [pc, #200]	; (800e504 <__swsetup_r+0xcc>)
 800e43a:	b570      	push	{r4, r5, r6, lr}
 800e43c:	681d      	ldr	r5, [r3, #0]
 800e43e:	4606      	mov	r6, r0
 800e440:	460c      	mov	r4, r1
 800e442:	b125      	cbz	r5, 800e44e <__swsetup_r+0x16>
 800e444:	69ab      	ldr	r3, [r5, #24]
 800e446:	b913      	cbnz	r3, 800e44e <__swsetup_r+0x16>
 800e448:	4628      	mov	r0, r5
 800e44a:	f000 f985 	bl	800e758 <__sinit>
 800e44e:	4b2e      	ldr	r3, [pc, #184]	; (800e508 <__swsetup_r+0xd0>)
 800e450:	429c      	cmp	r4, r3
 800e452:	d10f      	bne.n	800e474 <__swsetup_r+0x3c>
 800e454:	686c      	ldr	r4, [r5, #4]
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e45c:	0719      	lsls	r1, r3, #28
 800e45e:	d42c      	bmi.n	800e4ba <__swsetup_r+0x82>
 800e460:	06dd      	lsls	r5, r3, #27
 800e462:	d411      	bmi.n	800e488 <__swsetup_r+0x50>
 800e464:	2309      	movs	r3, #9
 800e466:	6033      	str	r3, [r6, #0]
 800e468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e46c:	81a3      	strh	r3, [r4, #12]
 800e46e:	f04f 30ff 	mov.w	r0, #4294967295
 800e472:	e03e      	b.n	800e4f2 <__swsetup_r+0xba>
 800e474:	4b25      	ldr	r3, [pc, #148]	; (800e50c <__swsetup_r+0xd4>)
 800e476:	429c      	cmp	r4, r3
 800e478:	d101      	bne.n	800e47e <__swsetup_r+0x46>
 800e47a:	68ac      	ldr	r4, [r5, #8]
 800e47c:	e7eb      	b.n	800e456 <__swsetup_r+0x1e>
 800e47e:	4b24      	ldr	r3, [pc, #144]	; (800e510 <__swsetup_r+0xd8>)
 800e480:	429c      	cmp	r4, r3
 800e482:	bf08      	it	eq
 800e484:	68ec      	ldreq	r4, [r5, #12]
 800e486:	e7e6      	b.n	800e456 <__swsetup_r+0x1e>
 800e488:	0758      	lsls	r0, r3, #29
 800e48a:	d512      	bpl.n	800e4b2 <__swsetup_r+0x7a>
 800e48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e48e:	b141      	cbz	r1, 800e4a2 <__swsetup_r+0x6a>
 800e490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e494:	4299      	cmp	r1, r3
 800e496:	d002      	beq.n	800e49e <__swsetup_r+0x66>
 800e498:	4630      	mov	r0, r6
 800e49a:	f7ff fb6f 	bl	800db7c <_free_r>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	6363      	str	r3, [r4, #52]	; 0x34
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4a8:	81a3      	strh	r3, [r4, #12]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	6063      	str	r3, [r4, #4]
 800e4ae:	6923      	ldr	r3, [r4, #16]
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	f043 0308 	orr.w	r3, r3, #8
 800e4b8:	81a3      	strh	r3, [r4, #12]
 800e4ba:	6923      	ldr	r3, [r4, #16]
 800e4bc:	b94b      	cbnz	r3, 800e4d2 <__swsetup_r+0x9a>
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4c8:	d003      	beq.n	800e4d2 <__swsetup_r+0x9a>
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	f000 fa07 	bl	800e8e0 <__smakebuf_r>
 800e4d2:	89a0      	ldrh	r0, [r4, #12]
 800e4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4d8:	f010 0301 	ands.w	r3, r0, #1
 800e4dc:	d00a      	beq.n	800e4f4 <__swsetup_r+0xbc>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	60a3      	str	r3, [r4, #8]
 800e4e2:	6963      	ldr	r3, [r4, #20]
 800e4e4:	425b      	negs	r3, r3
 800e4e6:	61a3      	str	r3, [r4, #24]
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	b943      	cbnz	r3, 800e4fe <__swsetup_r+0xc6>
 800e4ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4f0:	d1ba      	bne.n	800e468 <__swsetup_r+0x30>
 800e4f2:	bd70      	pop	{r4, r5, r6, pc}
 800e4f4:	0781      	lsls	r1, r0, #30
 800e4f6:	bf58      	it	pl
 800e4f8:	6963      	ldrpl	r3, [r4, #20]
 800e4fa:	60a3      	str	r3, [r4, #8]
 800e4fc:	e7f4      	b.n	800e4e8 <__swsetup_r+0xb0>
 800e4fe:	2000      	movs	r0, #0
 800e500:	e7f7      	b.n	800e4f2 <__swsetup_r+0xba>
 800e502:	bf00      	nop
 800e504:	200000dc 	.word	0x200000dc
 800e508:	0800f2d4 	.word	0x0800f2d4
 800e50c:	0800f2f4 	.word	0x0800f2f4
 800e510:	0800f2b4 	.word	0x0800f2b4

0800e514 <abort>:
 800e514:	b508      	push	{r3, lr}
 800e516:	2006      	movs	r0, #6
 800e518:	f000 fa52 	bl	800e9c0 <raise>
 800e51c:	2001      	movs	r0, #1
 800e51e:	f7f6 fd65 	bl	8004fec <_exit>
	...

0800e524 <__sflush_r>:
 800e524:	898a      	ldrh	r2, [r1, #12]
 800e526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52a:	4605      	mov	r5, r0
 800e52c:	0710      	lsls	r0, r2, #28
 800e52e:	460c      	mov	r4, r1
 800e530:	d458      	bmi.n	800e5e4 <__sflush_r+0xc0>
 800e532:	684b      	ldr	r3, [r1, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	dc05      	bgt.n	800e544 <__sflush_r+0x20>
 800e538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dc02      	bgt.n	800e544 <__sflush_r+0x20>
 800e53e:	2000      	movs	r0, #0
 800e540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e546:	2e00      	cmp	r6, #0
 800e548:	d0f9      	beq.n	800e53e <__sflush_r+0x1a>
 800e54a:	2300      	movs	r3, #0
 800e54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e550:	682f      	ldr	r7, [r5, #0]
 800e552:	602b      	str	r3, [r5, #0]
 800e554:	d032      	beq.n	800e5bc <__sflush_r+0x98>
 800e556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e558:	89a3      	ldrh	r3, [r4, #12]
 800e55a:	075a      	lsls	r2, r3, #29
 800e55c:	d505      	bpl.n	800e56a <__sflush_r+0x46>
 800e55e:	6863      	ldr	r3, [r4, #4]
 800e560:	1ac0      	subs	r0, r0, r3
 800e562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e564:	b10b      	cbz	r3, 800e56a <__sflush_r+0x46>
 800e566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e568:	1ac0      	subs	r0, r0, r3
 800e56a:	2300      	movs	r3, #0
 800e56c:	4602      	mov	r2, r0
 800e56e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e570:	6a21      	ldr	r1, [r4, #32]
 800e572:	4628      	mov	r0, r5
 800e574:	47b0      	blx	r6
 800e576:	1c43      	adds	r3, r0, #1
 800e578:	89a3      	ldrh	r3, [r4, #12]
 800e57a:	d106      	bne.n	800e58a <__sflush_r+0x66>
 800e57c:	6829      	ldr	r1, [r5, #0]
 800e57e:	291d      	cmp	r1, #29
 800e580:	d82c      	bhi.n	800e5dc <__sflush_r+0xb8>
 800e582:	4a2a      	ldr	r2, [pc, #168]	; (800e62c <__sflush_r+0x108>)
 800e584:	40ca      	lsrs	r2, r1
 800e586:	07d6      	lsls	r6, r2, #31
 800e588:	d528      	bpl.n	800e5dc <__sflush_r+0xb8>
 800e58a:	2200      	movs	r2, #0
 800e58c:	6062      	str	r2, [r4, #4]
 800e58e:	04d9      	lsls	r1, r3, #19
 800e590:	6922      	ldr	r2, [r4, #16]
 800e592:	6022      	str	r2, [r4, #0]
 800e594:	d504      	bpl.n	800e5a0 <__sflush_r+0x7c>
 800e596:	1c42      	adds	r2, r0, #1
 800e598:	d101      	bne.n	800e59e <__sflush_r+0x7a>
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	b903      	cbnz	r3, 800e5a0 <__sflush_r+0x7c>
 800e59e:	6560      	str	r0, [r4, #84]	; 0x54
 800e5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5a2:	602f      	str	r7, [r5, #0]
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	d0ca      	beq.n	800e53e <__sflush_r+0x1a>
 800e5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5ac:	4299      	cmp	r1, r3
 800e5ae:	d002      	beq.n	800e5b6 <__sflush_r+0x92>
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	f7ff fae3 	bl	800db7c <_free_r>
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	6360      	str	r0, [r4, #52]	; 0x34
 800e5ba:	e7c1      	b.n	800e540 <__sflush_r+0x1c>
 800e5bc:	6a21      	ldr	r1, [r4, #32]
 800e5be:	2301      	movs	r3, #1
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	47b0      	blx	r6
 800e5c4:	1c41      	adds	r1, r0, #1
 800e5c6:	d1c7      	bne.n	800e558 <__sflush_r+0x34>
 800e5c8:	682b      	ldr	r3, [r5, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d0c4      	beq.n	800e558 <__sflush_r+0x34>
 800e5ce:	2b1d      	cmp	r3, #29
 800e5d0:	d001      	beq.n	800e5d6 <__sflush_r+0xb2>
 800e5d2:	2b16      	cmp	r3, #22
 800e5d4:	d101      	bne.n	800e5da <__sflush_r+0xb6>
 800e5d6:	602f      	str	r7, [r5, #0]
 800e5d8:	e7b1      	b.n	800e53e <__sflush_r+0x1a>
 800e5da:	89a3      	ldrh	r3, [r4, #12]
 800e5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5e0:	81a3      	strh	r3, [r4, #12]
 800e5e2:	e7ad      	b.n	800e540 <__sflush_r+0x1c>
 800e5e4:	690f      	ldr	r7, [r1, #16]
 800e5e6:	2f00      	cmp	r7, #0
 800e5e8:	d0a9      	beq.n	800e53e <__sflush_r+0x1a>
 800e5ea:	0793      	lsls	r3, r2, #30
 800e5ec:	680e      	ldr	r6, [r1, #0]
 800e5ee:	bf08      	it	eq
 800e5f0:	694b      	ldreq	r3, [r1, #20]
 800e5f2:	600f      	str	r7, [r1, #0]
 800e5f4:	bf18      	it	ne
 800e5f6:	2300      	movne	r3, #0
 800e5f8:	eba6 0807 	sub.w	r8, r6, r7
 800e5fc:	608b      	str	r3, [r1, #8]
 800e5fe:	f1b8 0f00 	cmp.w	r8, #0
 800e602:	dd9c      	ble.n	800e53e <__sflush_r+0x1a>
 800e604:	6a21      	ldr	r1, [r4, #32]
 800e606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e608:	4643      	mov	r3, r8
 800e60a:	463a      	mov	r2, r7
 800e60c:	4628      	mov	r0, r5
 800e60e:	47b0      	blx	r6
 800e610:	2800      	cmp	r0, #0
 800e612:	dc06      	bgt.n	800e622 <__sflush_r+0xfe>
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e61a:	81a3      	strh	r3, [r4, #12]
 800e61c:	f04f 30ff 	mov.w	r0, #4294967295
 800e620:	e78e      	b.n	800e540 <__sflush_r+0x1c>
 800e622:	4407      	add	r7, r0
 800e624:	eba8 0800 	sub.w	r8, r8, r0
 800e628:	e7e9      	b.n	800e5fe <__sflush_r+0xda>
 800e62a:	bf00      	nop
 800e62c:	20400001 	.word	0x20400001

0800e630 <_fflush_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	690b      	ldr	r3, [r1, #16]
 800e634:	4605      	mov	r5, r0
 800e636:	460c      	mov	r4, r1
 800e638:	b913      	cbnz	r3, 800e640 <_fflush_r+0x10>
 800e63a:	2500      	movs	r5, #0
 800e63c:	4628      	mov	r0, r5
 800e63e:	bd38      	pop	{r3, r4, r5, pc}
 800e640:	b118      	cbz	r0, 800e64a <_fflush_r+0x1a>
 800e642:	6983      	ldr	r3, [r0, #24]
 800e644:	b90b      	cbnz	r3, 800e64a <_fflush_r+0x1a>
 800e646:	f000 f887 	bl	800e758 <__sinit>
 800e64a:	4b14      	ldr	r3, [pc, #80]	; (800e69c <_fflush_r+0x6c>)
 800e64c:	429c      	cmp	r4, r3
 800e64e:	d11b      	bne.n	800e688 <_fflush_r+0x58>
 800e650:	686c      	ldr	r4, [r5, #4]
 800e652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0ef      	beq.n	800e63a <_fflush_r+0xa>
 800e65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e65c:	07d0      	lsls	r0, r2, #31
 800e65e:	d404      	bmi.n	800e66a <_fflush_r+0x3a>
 800e660:	0599      	lsls	r1, r3, #22
 800e662:	d402      	bmi.n	800e66a <_fflush_r+0x3a>
 800e664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e666:	f000 f915 	bl	800e894 <__retarget_lock_acquire_recursive>
 800e66a:	4628      	mov	r0, r5
 800e66c:	4621      	mov	r1, r4
 800e66e:	f7ff ff59 	bl	800e524 <__sflush_r>
 800e672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e674:	07da      	lsls	r2, r3, #31
 800e676:	4605      	mov	r5, r0
 800e678:	d4e0      	bmi.n	800e63c <_fflush_r+0xc>
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	059b      	lsls	r3, r3, #22
 800e67e:	d4dd      	bmi.n	800e63c <_fflush_r+0xc>
 800e680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e682:	f000 f908 	bl	800e896 <__retarget_lock_release_recursive>
 800e686:	e7d9      	b.n	800e63c <_fflush_r+0xc>
 800e688:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <_fflush_r+0x70>)
 800e68a:	429c      	cmp	r4, r3
 800e68c:	d101      	bne.n	800e692 <_fflush_r+0x62>
 800e68e:	68ac      	ldr	r4, [r5, #8]
 800e690:	e7df      	b.n	800e652 <_fflush_r+0x22>
 800e692:	4b04      	ldr	r3, [pc, #16]	; (800e6a4 <_fflush_r+0x74>)
 800e694:	429c      	cmp	r4, r3
 800e696:	bf08      	it	eq
 800e698:	68ec      	ldreq	r4, [r5, #12]
 800e69a:	e7da      	b.n	800e652 <_fflush_r+0x22>
 800e69c:	0800f2d4 	.word	0x0800f2d4
 800e6a0:	0800f2f4 	.word	0x0800f2f4
 800e6a4:	0800f2b4 	.word	0x0800f2b4

0800e6a8 <std>:
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	b510      	push	{r4, lr}
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6b6:	6083      	str	r3, [r0, #8]
 800e6b8:	8181      	strh	r1, [r0, #12]
 800e6ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e6bc:	81c2      	strh	r2, [r0, #14]
 800e6be:	6183      	str	r3, [r0, #24]
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	2208      	movs	r2, #8
 800e6c4:	305c      	adds	r0, #92	; 0x5c
 800e6c6:	f7fd fc37 	bl	800bf38 <memset>
 800e6ca:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <std+0x38>)
 800e6cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e6ce:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <std+0x3c>)
 800e6d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6d2:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <std+0x40>)
 800e6d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6d6:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <std+0x44>)
 800e6d8:	6224      	str	r4, [r4, #32]
 800e6da:	6323      	str	r3, [r4, #48]	; 0x30
 800e6dc:	bd10      	pop	{r4, pc}
 800e6de:	bf00      	nop
 800e6e0:	0800e9f9 	.word	0x0800e9f9
 800e6e4:	0800ea1b 	.word	0x0800ea1b
 800e6e8:	0800ea53 	.word	0x0800ea53
 800e6ec:	0800ea77 	.word	0x0800ea77

0800e6f0 <_cleanup_r>:
 800e6f0:	4901      	ldr	r1, [pc, #4]	; (800e6f8 <_cleanup_r+0x8>)
 800e6f2:	f000 b8af 	b.w	800e854 <_fwalk_reent>
 800e6f6:	bf00      	nop
 800e6f8:	0800e631 	.word	0x0800e631

0800e6fc <__sfmoreglue>:
 800e6fc:	b570      	push	{r4, r5, r6, lr}
 800e6fe:	1e4a      	subs	r2, r1, #1
 800e700:	2568      	movs	r5, #104	; 0x68
 800e702:	4355      	muls	r5, r2
 800e704:	460e      	mov	r6, r1
 800e706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e70a:	f7ff fa87 	bl	800dc1c <_malloc_r>
 800e70e:	4604      	mov	r4, r0
 800e710:	b140      	cbz	r0, 800e724 <__sfmoreglue+0x28>
 800e712:	2100      	movs	r1, #0
 800e714:	e9c0 1600 	strd	r1, r6, [r0]
 800e718:	300c      	adds	r0, #12
 800e71a:	60a0      	str	r0, [r4, #8]
 800e71c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e720:	f7fd fc0a 	bl	800bf38 <memset>
 800e724:	4620      	mov	r0, r4
 800e726:	bd70      	pop	{r4, r5, r6, pc}

0800e728 <__sfp_lock_acquire>:
 800e728:	4801      	ldr	r0, [pc, #4]	; (800e730 <__sfp_lock_acquire+0x8>)
 800e72a:	f000 b8b3 	b.w	800e894 <__retarget_lock_acquire_recursive>
 800e72e:	bf00      	nop
 800e730:	20000828 	.word	0x20000828

0800e734 <__sfp_lock_release>:
 800e734:	4801      	ldr	r0, [pc, #4]	; (800e73c <__sfp_lock_release+0x8>)
 800e736:	f000 b8ae 	b.w	800e896 <__retarget_lock_release_recursive>
 800e73a:	bf00      	nop
 800e73c:	20000828 	.word	0x20000828

0800e740 <__sinit_lock_acquire>:
 800e740:	4801      	ldr	r0, [pc, #4]	; (800e748 <__sinit_lock_acquire+0x8>)
 800e742:	f000 b8a7 	b.w	800e894 <__retarget_lock_acquire_recursive>
 800e746:	bf00      	nop
 800e748:	20000823 	.word	0x20000823

0800e74c <__sinit_lock_release>:
 800e74c:	4801      	ldr	r0, [pc, #4]	; (800e754 <__sinit_lock_release+0x8>)
 800e74e:	f000 b8a2 	b.w	800e896 <__retarget_lock_release_recursive>
 800e752:	bf00      	nop
 800e754:	20000823 	.word	0x20000823

0800e758 <__sinit>:
 800e758:	b510      	push	{r4, lr}
 800e75a:	4604      	mov	r4, r0
 800e75c:	f7ff fff0 	bl	800e740 <__sinit_lock_acquire>
 800e760:	69a3      	ldr	r3, [r4, #24]
 800e762:	b11b      	cbz	r3, 800e76c <__sinit+0x14>
 800e764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e768:	f7ff bff0 	b.w	800e74c <__sinit_lock_release>
 800e76c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e770:	6523      	str	r3, [r4, #80]	; 0x50
 800e772:	4b13      	ldr	r3, [pc, #76]	; (800e7c0 <__sinit+0x68>)
 800e774:	4a13      	ldr	r2, [pc, #76]	; (800e7c4 <__sinit+0x6c>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	62a2      	str	r2, [r4, #40]	; 0x28
 800e77a:	42a3      	cmp	r3, r4
 800e77c:	bf04      	itt	eq
 800e77e:	2301      	moveq	r3, #1
 800e780:	61a3      	streq	r3, [r4, #24]
 800e782:	4620      	mov	r0, r4
 800e784:	f000 f820 	bl	800e7c8 <__sfp>
 800e788:	6060      	str	r0, [r4, #4]
 800e78a:	4620      	mov	r0, r4
 800e78c:	f000 f81c 	bl	800e7c8 <__sfp>
 800e790:	60a0      	str	r0, [r4, #8]
 800e792:	4620      	mov	r0, r4
 800e794:	f000 f818 	bl	800e7c8 <__sfp>
 800e798:	2200      	movs	r2, #0
 800e79a:	60e0      	str	r0, [r4, #12]
 800e79c:	2104      	movs	r1, #4
 800e79e:	6860      	ldr	r0, [r4, #4]
 800e7a0:	f7ff ff82 	bl	800e6a8 <std>
 800e7a4:	68a0      	ldr	r0, [r4, #8]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	2109      	movs	r1, #9
 800e7aa:	f7ff ff7d 	bl	800e6a8 <std>
 800e7ae:	68e0      	ldr	r0, [r4, #12]
 800e7b0:	2202      	movs	r2, #2
 800e7b2:	2112      	movs	r1, #18
 800e7b4:	f7ff ff78 	bl	800e6a8 <std>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	61a3      	str	r3, [r4, #24]
 800e7bc:	e7d2      	b.n	800e764 <__sinit+0xc>
 800e7be:	bf00      	nop
 800e7c0:	0800ef34 	.word	0x0800ef34
 800e7c4:	0800e6f1 	.word	0x0800e6f1

0800e7c8 <__sfp>:
 800e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ca:	4607      	mov	r7, r0
 800e7cc:	f7ff ffac 	bl	800e728 <__sfp_lock_acquire>
 800e7d0:	4b1e      	ldr	r3, [pc, #120]	; (800e84c <__sfp+0x84>)
 800e7d2:	681e      	ldr	r6, [r3, #0]
 800e7d4:	69b3      	ldr	r3, [r6, #24]
 800e7d6:	b913      	cbnz	r3, 800e7de <__sfp+0x16>
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f7ff ffbd 	bl	800e758 <__sinit>
 800e7de:	3648      	adds	r6, #72	; 0x48
 800e7e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	d503      	bpl.n	800e7f0 <__sfp+0x28>
 800e7e8:	6833      	ldr	r3, [r6, #0]
 800e7ea:	b30b      	cbz	r3, 800e830 <__sfp+0x68>
 800e7ec:	6836      	ldr	r6, [r6, #0]
 800e7ee:	e7f7      	b.n	800e7e0 <__sfp+0x18>
 800e7f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7f4:	b9d5      	cbnz	r5, 800e82c <__sfp+0x64>
 800e7f6:	4b16      	ldr	r3, [pc, #88]	; (800e850 <__sfp+0x88>)
 800e7f8:	60e3      	str	r3, [r4, #12]
 800e7fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7fe:	6665      	str	r5, [r4, #100]	; 0x64
 800e800:	f000 f847 	bl	800e892 <__retarget_lock_init_recursive>
 800e804:	f7ff ff96 	bl	800e734 <__sfp_lock_release>
 800e808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e80c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e810:	6025      	str	r5, [r4, #0]
 800e812:	61a5      	str	r5, [r4, #24]
 800e814:	2208      	movs	r2, #8
 800e816:	4629      	mov	r1, r5
 800e818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e81c:	f7fd fb8c 	bl	800bf38 <memset>
 800e820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e828:	4620      	mov	r0, r4
 800e82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e82c:	3468      	adds	r4, #104	; 0x68
 800e82e:	e7d9      	b.n	800e7e4 <__sfp+0x1c>
 800e830:	2104      	movs	r1, #4
 800e832:	4638      	mov	r0, r7
 800e834:	f7ff ff62 	bl	800e6fc <__sfmoreglue>
 800e838:	4604      	mov	r4, r0
 800e83a:	6030      	str	r0, [r6, #0]
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d1d5      	bne.n	800e7ec <__sfp+0x24>
 800e840:	f7ff ff78 	bl	800e734 <__sfp_lock_release>
 800e844:	230c      	movs	r3, #12
 800e846:	603b      	str	r3, [r7, #0]
 800e848:	e7ee      	b.n	800e828 <__sfp+0x60>
 800e84a:	bf00      	nop
 800e84c:	0800ef34 	.word	0x0800ef34
 800e850:	ffff0001 	.word	0xffff0001

0800e854 <_fwalk_reent>:
 800e854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e858:	4606      	mov	r6, r0
 800e85a:	4688      	mov	r8, r1
 800e85c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e860:	2700      	movs	r7, #0
 800e862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e866:	f1b9 0901 	subs.w	r9, r9, #1
 800e86a:	d505      	bpl.n	800e878 <_fwalk_reent+0x24>
 800e86c:	6824      	ldr	r4, [r4, #0]
 800e86e:	2c00      	cmp	r4, #0
 800e870:	d1f7      	bne.n	800e862 <_fwalk_reent+0xe>
 800e872:	4638      	mov	r0, r7
 800e874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e878:	89ab      	ldrh	r3, [r5, #12]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d907      	bls.n	800e88e <_fwalk_reent+0x3a>
 800e87e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e882:	3301      	adds	r3, #1
 800e884:	d003      	beq.n	800e88e <_fwalk_reent+0x3a>
 800e886:	4629      	mov	r1, r5
 800e888:	4630      	mov	r0, r6
 800e88a:	47c0      	blx	r8
 800e88c:	4307      	orrs	r7, r0
 800e88e:	3568      	adds	r5, #104	; 0x68
 800e890:	e7e9      	b.n	800e866 <_fwalk_reent+0x12>

0800e892 <__retarget_lock_init_recursive>:
 800e892:	4770      	bx	lr

0800e894 <__retarget_lock_acquire_recursive>:
 800e894:	4770      	bx	lr

0800e896 <__retarget_lock_release_recursive>:
 800e896:	4770      	bx	lr

0800e898 <__swhatbuf_r>:
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	460e      	mov	r6, r1
 800e89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a0:	2900      	cmp	r1, #0
 800e8a2:	b096      	sub	sp, #88	; 0x58
 800e8a4:	4614      	mov	r4, r2
 800e8a6:	461d      	mov	r5, r3
 800e8a8:	da07      	bge.n	800e8ba <__swhatbuf_r+0x22>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	602b      	str	r3, [r5, #0]
 800e8ae:	89b3      	ldrh	r3, [r6, #12]
 800e8b0:	061a      	lsls	r2, r3, #24
 800e8b2:	d410      	bmi.n	800e8d6 <__swhatbuf_r+0x3e>
 800e8b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8b8:	e00e      	b.n	800e8d8 <__swhatbuf_r+0x40>
 800e8ba:	466a      	mov	r2, sp
 800e8bc:	f000 f902 	bl	800eac4 <_fstat_r>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	dbf2      	blt.n	800e8aa <__swhatbuf_r+0x12>
 800e8c4:	9a01      	ldr	r2, [sp, #4]
 800e8c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e8ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8ce:	425a      	negs	r2, r3
 800e8d0:	415a      	adcs	r2, r3
 800e8d2:	602a      	str	r2, [r5, #0]
 800e8d4:	e7ee      	b.n	800e8b4 <__swhatbuf_r+0x1c>
 800e8d6:	2340      	movs	r3, #64	; 0x40
 800e8d8:	2000      	movs	r0, #0
 800e8da:	6023      	str	r3, [r4, #0]
 800e8dc:	b016      	add	sp, #88	; 0x58
 800e8de:	bd70      	pop	{r4, r5, r6, pc}

0800e8e0 <__smakebuf_r>:
 800e8e0:	898b      	ldrh	r3, [r1, #12]
 800e8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8e4:	079d      	lsls	r5, r3, #30
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	d507      	bpl.n	800e8fc <__smakebuf_r+0x1c>
 800e8ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	6123      	str	r3, [r4, #16]
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	6163      	str	r3, [r4, #20]
 800e8f8:	b002      	add	sp, #8
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}
 800e8fc:	ab01      	add	r3, sp, #4
 800e8fe:	466a      	mov	r2, sp
 800e900:	f7ff ffca 	bl	800e898 <__swhatbuf_r>
 800e904:	9900      	ldr	r1, [sp, #0]
 800e906:	4605      	mov	r5, r0
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff f987 	bl	800dc1c <_malloc_r>
 800e90e:	b948      	cbnz	r0, 800e924 <__smakebuf_r+0x44>
 800e910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e914:	059a      	lsls	r2, r3, #22
 800e916:	d4ef      	bmi.n	800e8f8 <__smakebuf_r+0x18>
 800e918:	f023 0303 	bic.w	r3, r3, #3
 800e91c:	f043 0302 	orr.w	r3, r3, #2
 800e920:	81a3      	strh	r3, [r4, #12]
 800e922:	e7e3      	b.n	800e8ec <__smakebuf_r+0xc>
 800e924:	4b0d      	ldr	r3, [pc, #52]	; (800e95c <__smakebuf_r+0x7c>)
 800e926:	62b3      	str	r3, [r6, #40]	; 0x28
 800e928:	89a3      	ldrh	r3, [r4, #12]
 800e92a:	6020      	str	r0, [r4, #0]
 800e92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e930:	81a3      	strh	r3, [r4, #12]
 800e932:	9b00      	ldr	r3, [sp, #0]
 800e934:	6163      	str	r3, [r4, #20]
 800e936:	9b01      	ldr	r3, [sp, #4]
 800e938:	6120      	str	r0, [r4, #16]
 800e93a:	b15b      	cbz	r3, 800e954 <__smakebuf_r+0x74>
 800e93c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e940:	4630      	mov	r0, r6
 800e942:	f000 f8d1 	bl	800eae8 <_isatty_r>
 800e946:	b128      	cbz	r0, 800e954 <__smakebuf_r+0x74>
 800e948:	89a3      	ldrh	r3, [r4, #12]
 800e94a:	f023 0303 	bic.w	r3, r3, #3
 800e94e:	f043 0301 	orr.w	r3, r3, #1
 800e952:	81a3      	strh	r3, [r4, #12]
 800e954:	89a0      	ldrh	r0, [r4, #12]
 800e956:	4305      	orrs	r5, r0
 800e958:	81a5      	strh	r5, [r4, #12]
 800e95a:	e7cd      	b.n	800e8f8 <__smakebuf_r+0x18>
 800e95c:	0800e6f1 	.word	0x0800e6f1

0800e960 <_malloc_usable_size_r>:
 800e960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e964:	1f18      	subs	r0, r3, #4
 800e966:	2b00      	cmp	r3, #0
 800e968:	bfbc      	itt	lt
 800e96a:	580b      	ldrlt	r3, [r1, r0]
 800e96c:	18c0      	addlt	r0, r0, r3
 800e96e:	4770      	bx	lr

0800e970 <_raise_r>:
 800e970:	291f      	cmp	r1, #31
 800e972:	b538      	push	{r3, r4, r5, lr}
 800e974:	4604      	mov	r4, r0
 800e976:	460d      	mov	r5, r1
 800e978:	d904      	bls.n	800e984 <_raise_r+0x14>
 800e97a:	2316      	movs	r3, #22
 800e97c:	6003      	str	r3, [r0, #0]
 800e97e:	f04f 30ff 	mov.w	r0, #4294967295
 800e982:	bd38      	pop	{r3, r4, r5, pc}
 800e984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e986:	b112      	cbz	r2, 800e98e <_raise_r+0x1e>
 800e988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e98c:	b94b      	cbnz	r3, 800e9a2 <_raise_r+0x32>
 800e98e:	4620      	mov	r0, r4
 800e990:	f000 f830 	bl	800e9f4 <_getpid_r>
 800e994:	462a      	mov	r2, r5
 800e996:	4601      	mov	r1, r0
 800e998:	4620      	mov	r0, r4
 800e99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e99e:	f000 b817 	b.w	800e9d0 <_kill_r>
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d00a      	beq.n	800e9bc <_raise_r+0x4c>
 800e9a6:	1c59      	adds	r1, r3, #1
 800e9a8:	d103      	bne.n	800e9b2 <_raise_r+0x42>
 800e9aa:	2316      	movs	r3, #22
 800e9ac:	6003      	str	r3, [r0, #0]
 800e9ae:	2001      	movs	r0, #1
 800e9b0:	e7e7      	b.n	800e982 <_raise_r+0x12>
 800e9b2:	2400      	movs	r4, #0
 800e9b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	4798      	blx	r3
 800e9bc:	2000      	movs	r0, #0
 800e9be:	e7e0      	b.n	800e982 <_raise_r+0x12>

0800e9c0 <raise>:
 800e9c0:	4b02      	ldr	r3, [pc, #8]	; (800e9cc <raise+0xc>)
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	6818      	ldr	r0, [r3, #0]
 800e9c6:	f7ff bfd3 	b.w	800e970 <_raise_r>
 800e9ca:	bf00      	nop
 800e9cc:	200000dc 	.word	0x200000dc

0800e9d0 <_kill_r>:
 800e9d0:	b538      	push	{r3, r4, r5, lr}
 800e9d2:	4d07      	ldr	r5, [pc, #28]	; (800e9f0 <_kill_r+0x20>)
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	4608      	mov	r0, r1
 800e9da:	4611      	mov	r1, r2
 800e9dc:	602b      	str	r3, [r5, #0]
 800e9de:	f7f6 faf5 	bl	8004fcc <_kill>
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	d102      	bne.n	800e9ec <_kill_r+0x1c>
 800e9e6:	682b      	ldr	r3, [r5, #0]
 800e9e8:	b103      	cbz	r3, 800e9ec <_kill_r+0x1c>
 800e9ea:	6023      	str	r3, [r4, #0]
 800e9ec:	bd38      	pop	{r3, r4, r5, pc}
 800e9ee:	bf00      	nop
 800e9f0:	2000081c 	.word	0x2000081c

0800e9f4 <_getpid_r>:
 800e9f4:	f7f6 bae2 	b.w	8004fbc <_getpid>

0800e9f8 <__sread>:
 800e9f8:	b510      	push	{r4, lr}
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea00:	f000 f894 	bl	800eb2c <_read_r>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	bfab      	itete	ge
 800ea08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ea0c:	181b      	addge	r3, r3, r0
 800ea0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea12:	bfac      	ite	ge
 800ea14:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea16:	81a3      	strhlt	r3, [r4, #12]
 800ea18:	bd10      	pop	{r4, pc}

0800ea1a <__swrite>:
 800ea1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea1e:	461f      	mov	r7, r3
 800ea20:	898b      	ldrh	r3, [r1, #12]
 800ea22:	05db      	lsls	r3, r3, #23
 800ea24:	4605      	mov	r5, r0
 800ea26:	460c      	mov	r4, r1
 800ea28:	4616      	mov	r6, r2
 800ea2a:	d505      	bpl.n	800ea38 <__swrite+0x1e>
 800ea2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea30:	2302      	movs	r3, #2
 800ea32:	2200      	movs	r2, #0
 800ea34:	f000 f868 	bl	800eb08 <_lseek_r>
 800ea38:	89a3      	ldrh	r3, [r4, #12]
 800ea3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea42:	81a3      	strh	r3, [r4, #12]
 800ea44:	4632      	mov	r2, r6
 800ea46:	463b      	mov	r3, r7
 800ea48:	4628      	mov	r0, r5
 800ea4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4e:	f000 b817 	b.w	800ea80 <_write_r>

0800ea52 <__sseek>:
 800ea52:	b510      	push	{r4, lr}
 800ea54:	460c      	mov	r4, r1
 800ea56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea5a:	f000 f855 	bl	800eb08 <_lseek_r>
 800ea5e:	1c43      	adds	r3, r0, #1
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	bf15      	itete	ne
 800ea64:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea6e:	81a3      	strheq	r3, [r4, #12]
 800ea70:	bf18      	it	ne
 800ea72:	81a3      	strhne	r3, [r4, #12]
 800ea74:	bd10      	pop	{r4, pc}

0800ea76 <__sclose>:
 800ea76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea7a:	f000 b813 	b.w	800eaa4 <_close_r>
	...

0800ea80 <_write_r>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	4d07      	ldr	r5, [pc, #28]	; (800eaa0 <_write_r+0x20>)
 800ea84:	4604      	mov	r4, r0
 800ea86:	4608      	mov	r0, r1
 800ea88:	4611      	mov	r1, r2
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	602a      	str	r2, [r5, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f7f6 fad3 	bl	800503a <_write>
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	d102      	bne.n	800ea9e <_write_r+0x1e>
 800ea98:	682b      	ldr	r3, [r5, #0]
 800ea9a:	b103      	cbz	r3, 800ea9e <_write_r+0x1e>
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	bd38      	pop	{r3, r4, r5, pc}
 800eaa0:	2000081c 	.word	0x2000081c

0800eaa4 <_close_r>:
 800eaa4:	b538      	push	{r3, r4, r5, lr}
 800eaa6:	4d06      	ldr	r5, [pc, #24]	; (800eac0 <_close_r+0x1c>)
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	4604      	mov	r4, r0
 800eaac:	4608      	mov	r0, r1
 800eaae:	602b      	str	r3, [r5, #0]
 800eab0:	f7f6 fadf 	bl	8005072 <_close>
 800eab4:	1c43      	adds	r3, r0, #1
 800eab6:	d102      	bne.n	800eabe <_close_r+0x1a>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	b103      	cbz	r3, 800eabe <_close_r+0x1a>
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	2000081c 	.word	0x2000081c

0800eac4 <_fstat_r>:
 800eac4:	b538      	push	{r3, r4, r5, lr}
 800eac6:	4d07      	ldr	r5, [pc, #28]	; (800eae4 <_fstat_r+0x20>)
 800eac8:	2300      	movs	r3, #0
 800eaca:	4604      	mov	r4, r0
 800eacc:	4608      	mov	r0, r1
 800eace:	4611      	mov	r1, r2
 800ead0:	602b      	str	r3, [r5, #0]
 800ead2:	f7f6 fada 	bl	800508a <_fstat>
 800ead6:	1c43      	adds	r3, r0, #1
 800ead8:	d102      	bne.n	800eae0 <_fstat_r+0x1c>
 800eada:	682b      	ldr	r3, [r5, #0]
 800eadc:	b103      	cbz	r3, 800eae0 <_fstat_r+0x1c>
 800eade:	6023      	str	r3, [r4, #0]
 800eae0:	bd38      	pop	{r3, r4, r5, pc}
 800eae2:	bf00      	nop
 800eae4:	2000081c 	.word	0x2000081c

0800eae8 <_isatty_r>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	4d06      	ldr	r5, [pc, #24]	; (800eb04 <_isatty_r+0x1c>)
 800eaec:	2300      	movs	r3, #0
 800eaee:	4604      	mov	r4, r0
 800eaf0:	4608      	mov	r0, r1
 800eaf2:	602b      	str	r3, [r5, #0]
 800eaf4:	f7f6 fad9 	bl	80050aa <_isatty>
 800eaf8:	1c43      	adds	r3, r0, #1
 800eafa:	d102      	bne.n	800eb02 <_isatty_r+0x1a>
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	b103      	cbz	r3, 800eb02 <_isatty_r+0x1a>
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	bd38      	pop	{r3, r4, r5, pc}
 800eb04:	2000081c 	.word	0x2000081c

0800eb08 <_lseek_r>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	4d07      	ldr	r5, [pc, #28]	; (800eb28 <_lseek_r+0x20>)
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	4608      	mov	r0, r1
 800eb10:	4611      	mov	r1, r2
 800eb12:	2200      	movs	r2, #0
 800eb14:	602a      	str	r2, [r5, #0]
 800eb16:	461a      	mov	r2, r3
 800eb18:	f7f6 fad2 	bl	80050c0 <_lseek>
 800eb1c:	1c43      	adds	r3, r0, #1
 800eb1e:	d102      	bne.n	800eb26 <_lseek_r+0x1e>
 800eb20:	682b      	ldr	r3, [r5, #0]
 800eb22:	b103      	cbz	r3, 800eb26 <_lseek_r+0x1e>
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	bd38      	pop	{r3, r4, r5, pc}
 800eb28:	2000081c 	.word	0x2000081c

0800eb2c <_read_r>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4d07      	ldr	r5, [pc, #28]	; (800eb4c <_read_r+0x20>)
 800eb30:	4604      	mov	r4, r0
 800eb32:	4608      	mov	r0, r1
 800eb34:	4611      	mov	r1, r2
 800eb36:	2200      	movs	r2, #0
 800eb38:	602a      	str	r2, [r5, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f7f6 fa60 	bl	8005000 <_read>
 800eb40:	1c43      	adds	r3, r0, #1
 800eb42:	d102      	bne.n	800eb4a <_read_r+0x1e>
 800eb44:	682b      	ldr	r3, [r5, #0]
 800eb46:	b103      	cbz	r3, 800eb4a <_read_r+0x1e>
 800eb48:	6023      	str	r3, [r4, #0]
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	2000081c 	.word	0x2000081c

0800eb50 <_init>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	bf00      	nop
 800eb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb56:	bc08      	pop	{r3}
 800eb58:	469e      	mov	lr, r3
 800eb5a:	4770      	bx	lr

0800eb5c <_fini>:
 800eb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb5e:	bf00      	nop
 800eb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb62:	bc08      	pop	{r3}
 800eb64:	469e      	mov	lr, r3
 800eb66:	4770      	bx	lr

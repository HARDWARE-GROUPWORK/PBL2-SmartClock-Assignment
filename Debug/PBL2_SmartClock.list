
PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  0800d180  0800d180  0001d180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d93c  0800d93c  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d93c  0800d93c  0001d93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d944  0800d944  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d944  0800d944  0001d944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d948  0800d948  0001d948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800d94c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200002a0  0800dbec  000202a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800dbec  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c25e  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c5f  00000000  00000000  0003c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00040190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00041860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b560  00000000  00000000  00042d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c06d  00000000  00000000  0006e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101d79  00000000  00000000  0008a355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c0ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e40  00000000  00000000  0018c124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d168 	.word	0x0800d168

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800d168 	.word	0x0800d168

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f005 fd45 	bl	8006134 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f004 ff8f 	bl	80055e8 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000384 	.word	0x20000384

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000380 	.word	0x20000380

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f005 fd75 	bl	800635c <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000384 	.word	0x20000384

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 fe40 	bl	800a550 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f005 fc23 	bl	8006134 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f004 fe7a 	bl	80055e8 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000384 	.word	0x20000384

08000900 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	4b97      	ldr	r3, [pc, #604]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a96      	ldr	r2, [pc, #600]	; (8000b74 <MX_GPIO_Init+0x274>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b94      	ldr	r3, [pc, #592]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b91      	ldr	r3, [pc, #580]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a90      	ldr	r2, [pc, #576]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b8e      	ldr	r3, [pc, #568]	; (8000b74 <MX_GPIO_Init+0x274>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b8b      	ldr	r3, [pc, #556]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a8a      	ldr	r2, [pc, #552]	; (8000b74 <MX_GPIO_Init+0x274>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b88      	ldr	r3, [pc, #544]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b85      	ldr	r3, [pc, #532]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a84      	ldr	r2, [pc, #528]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b82      	ldr	r3, [pc, #520]	; (8000b74 <MX_GPIO_Init+0x274>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b7f      	ldr	r3, [pc, #508]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a7e      	ldr	r2, [pc, #504]	; (8000b74 <MX_GPIO_Init+0x274>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b7c      	ldr	r3, [pc, #496]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b79      	ldr	r3, [pc, #484]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a78      	ldr	r2, [pc, #480]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b76      	ldr	r3, [pc, #472]	; (8000b74 <MX_GPIO_Init+0x274>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b73      	ldr	r3, [pc, #460]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a72      	ldr	r2, [pc, #456]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b6d      	ldr	r3, [pc, #436]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a6c      	ldr	r2, [pc, #432]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b6a      	ldr	r3, [pc, #424]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2168      	movs	r1, #104	; 0x68
 80009da:	4867      	ldr	r0, [pc, #412]	; (8000b78 <MX_GPIO_Init+0x278>)
 80009dc:	f005 f8fe 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009e6:	4865      	ldr	r0, [pc, #404]	; (8000b7c <MX_GPIO_Init+0x27c>)
 80009e8:	f005 f8f8 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4863      	ldr	r0, [pc, #396]	; (8000b80 <MX_GPIO_Init+0x280>)
 80009f2:	f005 f8f3 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009fc:	4861      	ldr	r0, [pc, #388]	; (8000b84 <MX_GPIO_Init+0x284>)
 80009fe:	f005 f8ed 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000a02:	2314      	movs	r3, #20
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4858      	ldr	r0, [pc, #352]	; (8000b78 <MX_GPIO_Init+0x278>)
 8000a16:	f004 ff1d 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000a1a:	2368      	movs	r3, #104	; 0x68
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4851      	ldr	r0, [pc, #324]	; (8000b78 <MX_GPIO_Init+0x278>)
 8000a32:	f004 ff0f 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3c:	4b52      	ldr	r3, [pc, #328]	; (8000b88 <MX_GPIO_Init+0x288>)
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	484e      	ldr	r0, [pc, #312]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000a4c:	f004 ff02 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a50:	2332      	movs	r3, #50	; 0x32
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a60:	230b      	movs	r3, #11
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4846      	ldr	r0, [pc, #280]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000a6c:	f004 fef2 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a70:	2386      	movs	r3, #134	; 0x86
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a80:	230b      	movs	r3, #11
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4840      	ldr	r0, [pc, #256]	; (8000b8c <MX_GPIO_Init+0x28c>)
 8000a8c:	f004 fee2 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa2:	230b      	movs	r3, #11
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4833      	ldr	r0, [pc, #204]	; (8000b7c <MX_GPIO_Init+0x27c>)
 8000aae:	f004 fed1 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ab2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482c      	ldr	r0, [pc, #176]	; (8000b7c <MX_GPIO_Init+0x27c>)
 8000acc:	f004 fec2 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4826      	ldr	r0, [pc, #152]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000ae8:	f004 feb4 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000b00:	f004 fea8 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000b04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4819      	ldr	r0, [pc, #100]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000b1e:	f004 fe99 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b22:	23f0      	movs	r3, #240	; 0xf0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4816      	ldr	r0, [pc, #88]	; (8000b90 <MX_GPIO_Init+0x290>)
 8000b36:	f004 fe8d 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000b58:	f004 fe7c 	bl	8005854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2103      	movs	r1, #3
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f004 fe40 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b66:	2028      	movs	r0, #40	; 0x28
 8000b68:	f004 fe59 	bl	800581e <HAL_NVIC_EnableIRQ>

}
 8000b6c:	bf00      	nop
 8000b6e:	3738      	adds	r7, #56	; 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40020800 	.word	0x40020800
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <MX_I2C1_Init+0x7c>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bd0:	f005 f836 	bl	8005c40 <HAL_I2C_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bda:	f003 f887 	bl	8003cec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000be2:	f005 ff5d 	bl	8006aa0 <HAL_I2CEx_ConfigAnalogFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f003 f87e 	bl	8003cec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bf4:	f005 ff9f 	bl	8006b36 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f003 f875 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000384 	.word	0x20000384
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	00c0eaff 	.word	0x00c0eaff

08000c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x7c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d128      	bne.n	8000c88 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c60:	2304      	movs	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480b      	ldr	r0, [pc, #44]	; (8000c98 <HAL_I2C_MspInit+0x84>)
 8000c6c:	f004 fdf2 	bl	8005854 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca0:	f3bf 8f4f 	dsb	sy
}
 8000ca4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ca6:	f3bf 8f6f 	isb	sy
}
 8000caa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb4:	f3bf 8f4f 	dsb	sy
}
 8000cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
}
 8000cbe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ccc:	f3bf 8f4f 	dsb	sy
}
 8000cd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cd2:	f3bf 8f6f 	isb	sy
}
 8000cd6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf6:	f3bf 8f4f 	dsb	sy
}
 8000cfa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d02:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0b5b      	lsrs	r3, r3, #13
 8000d08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d0c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d16:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	015a      	lsls	r2, r3, #5
 8000d1c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d20:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d26:	4911      	ldr	r1, [pc, #68]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	60ba      	str	r2, [r7, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1ef      	bne.n	8000d18 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	60fa      	str	r2, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1e5      	bne.n	8000d0e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d42:	f3bf 8f4f 	dsb	sy
}
 8000d46:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d54:	f3bf 8f4f 	dsb	sy
}
 8000d58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d5a:	f3bf 8f6f 	isb	sy
}
 8000d5e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <println>:
uint8_t SerialNumber[] = {0x00, 0x00, 0x7E, 0x00, 0xD0, 0x01, 0x03, 0x2B, 0x7E};
static int pre_define_data_size = 70;

// Utility function
void println(char input[])
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	char stringBuffer[30];
	sprintf(stringBuffer, "%s\r\n", input);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	490a      	ldr	r1, [pc, #40]	; (8000da8 <println+0x38>)
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00a f82f 	bl	800ade4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa58 	bl	8000240 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	f107 0108 	add.w	r1, r7, #8
 8000d98:	23c8      	movs	r3, #200	; 0xc8
 8000d9a:	4804      	ldr	r0, [pc, #16]	; (8000dac <println+0x3c>)
 8000d9c:	f008 fe80 	bl	8009aa0 <HAL_UART_Transmit>
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800d180 	.word	0x0800d180
 8000dac:	200005cc 	.word	0x200005cc

08000db0 <sensirion_bytes_to_float>:
	HAL_UART_Transmit(&huart3, (uint8_t *)data, pre_define_data_size, 1000);
}

// For convert concatenate hex to float ieee754
float sensirion_bytes_to_float(const uint32_t bytes)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32_value;
		float float32;
	} tmp;

	tmp.u32_value = bytes;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60fb      	str	r3, [r7, #12]
	return tmp.float32;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	ee07 3a90 	vmov	s15, r3
}
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <wake_sensirion>:

// Wake up SPS30 by sent start frame
uint8_t *wake_sensirion()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent start frame");

	static uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	e007      	b.n	8000dec <wake_sensirion+0x1c>
	{
		data[i] = 0x00;
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <wake_sensirion+0x68>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3301      	adds	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b45      	cmp	r3, #69	; 0x45
 8000df0:	d9f4      	bls.n	8000ddc <wake_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000df2:	bf00      	nop
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <wake_sensirion+0x6c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfe:	2b40      	cmp	r3, #64	; 0x40
 8000e00:	d1f8      	bne.n	8000df4 <wake_sensirion+0x24>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	220a      	movs	r2, #10
 8000e08:	490d      	ldr	r1, [pc, #52]	; (8000e40 <wake_sensirion+0x70>)
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <wake_sensirion+0x6c>)
 8000e0c:	f008 fe48 	bl	8009aa0 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e10:	bf00      	nop
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <wake_sensirion+0x6c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1c:	2b40      	cmp	r3, #64	; 0x40
 8000e1e:	d1f8      	bne.n	8000e12 <wake_sensirion+0x42>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	2246      	movs	r2, #70	; 0x46
 8000e26:	4904      	ldr	r1, [pc, #16]	; (8000e38 <wake_sensirion+0x68>)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <wake_sensirion+0x6c>)
 8000e2a:	f008 fecc 	bl	8009bc6 <HAL_UART_Receive>
	//HAL_Delay(1000);
	return data;
 8000e2e:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <wake_sensirion+0x68>)
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000304 	.word	0x20000304
 8000e3c:	20000650 	.word	0x20000650
 8000e40:	20000000 	.word	0x20000000

08000e44 <read_sensirion>:

// Read from SPS30 by sent read frame
float *read_sensirion()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a8      	sub	sp, #160	; 0xa0
 8000e48:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent read frame");

	uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e50:	e00b      	b.n	8000e6a <read_sensirion+0x26>
	{
		data[i] = 0x00;
 8000e52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e64:	3301      	adds	r3, #1
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e6e:	2b45      	cmp	r3, #69	; 0x45
 8000e70:	d9ef      	bls.n	8000e52 <read_sensirion+0xe>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e72:	bf00      	nop
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <read_sensirion+0x1d0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7e:	2b40      	cmp	r3, #64	; 0x40
 8000e80:	d1f8      	bne.n	8000e74 <read_sensirion+0x30>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	2208      	movs	r2, #8
 8000e88:	4963      	ldr	r1, [pc, #396]	; (8001018 <read_sensirion+0x1d4>)
 8000e8a:	4862      	ldr	r0, [pc, #392]	; (8001014 <read_sensirion+0x1d0>)
 8000e8c:	f008 fe08 	bl	8009aa0 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e90:	bf00      	nop
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <read_sensirion+0x1d0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	2b40      	cmp	r3, #64	; 0x40
 8000e9e:	d1f8      	bne.n	8000e92 <read_sensirion+0x4e>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 100); // from 1000 to 100
 8000ea0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2246      	movs	r2, #70	; 0x46
 8000ea8:	485a      	ldr	r0, [pc, #360]	; (8001014 <read_sensirion+0x1d0>)
 8000eaa:	f008 fe8c 	bl	8009bc6 <HAL_UART_Receive>

	// Check for start frame
	if (data[0] == 0x7E && data[1] == 0x00)
 8000eae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000eb2:	2b7e      	cmp	r3, #126	; 0x7e
 8000eb4:	f040 80a8 	bne.w	8001008 <read_sensirion+0x1c4>
 8000eb8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 80a3 	bne.w	8001008 <read_sensirion+0x1c4>
	{
		// Header frame
		uint8_t command = data[2];
 8000ec2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000ec6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t errorcode = data[3];
 8000eca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ece:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		uint8_t length = data[4];
 8000ed2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ed6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		uint8_t state = data[5];
 8000eda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ede:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

		uint8_t checksum;
		// Find checksum frame by start from the back of the array
		for (uint8_t i = sizeof(data); i > 0; i--)
 8000ee2:	2346      	movs	r3, #70	; 0x46
 8000ee4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000ee8:	e017      	b.n	8000f1a <read_sensirion+0xd6>
		{
			if (data[i] == 0x7E)
 8000eea:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000eee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000ef8:	2b7e      	cmp	r3, #126	; 0x7e
 8000efa:	d109      	bne.n	8000f10 <read_sensirion+0xcc>
			{
				data[i - 1] = checksum;
 8000efc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000f00:	3b01      	subs	r3, #1
 8000f02:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000f06:	4413      	add	r3, r2
 8000f08:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000f0c:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (uint8_t i = sizeof(data); i > 0; i--)
 8000f10:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000f14:	3b01      	subs	r3, #1
 8000f16:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000f1a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1e3      	bne.n	8000eea <read_sensirion+0xa6>
		}

		uint32_t concatenateHex[10];
		static float actualValue[10];
		// Concatenate HEX(2,2,2,2) into HEX(8) and convert concatenate hex to float ieee754
		for (int i = 0; i < 10; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f28:	e068      	b.n	8000ffc <read_sensirion+0x1b8>
		{
			// 40 HEX(2) into 10 Groups
			// Skip first 5 bits (header)
			concatenateHex[i] = ((data[4 * i + 5]) << 24) + ((data[(4 * i) + 1 + 5]) << 16) + ((data[(4 * i) + 2 + 5]) << 8) + (data[(4 * i) + 3 + 5]);
 8000f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	3305      	adds	r3, #5
 8000f32:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000f36:	4413      	add	r3, r2
 8000f38:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f3c:	061a      	lsls	r2, r3, #24
 8000f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	3306      	adds	r3, #6
 8000f46:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	441a      	add	r2, r3
 8000f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	3307      	adds	r3, #7
 8000f5c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f60:	440b      	add	r3, r1
 8000f62:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	4413      	add	r3, r2
 8000f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f6e:	3202      	adds	r2, #2
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f76:	440a      	add	r2, r1
 8000f78:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f843 2ca0 	str.w	r2, [r3, #-160]

			// Convert sensirion bytes to float
			actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 8000f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff05 	bl	8000db0 <sensirion_bytes_to_float>
 8000fa6:	eef0 7a40 	vmov.f32	s15, s0
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <read_sensirion+0x1d8>)
 8000fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	edc3 7a00 	vstr	s15, [r3]

			// ! For debug only
			char stringBuffer[30];
			sprintf(stringBuffer, "%.4f\r\n", actualValue[i]);
 8000fb8:	4a18      	ldr	r2, [pc, #96]	; (800101c <read_sensirion+0x1d8>)
 8000fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fce:	ec53 2b17 	vmov	r2, r3, d7
 8000fd2:	4913      	ldr	r1, [pc, #76]	; (8001020 <read_sensirion+0x1dc>)
 8000fd4:	f009 ff06 	bl	800ade4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f92f 	bl	8000240 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fea:	23c8      	movs	r3, #200	; 0xc8
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <read_sensirion+0x1e0>)
 8000fee:	f008 fd57 	bl	8009aa0 <HAL_UART_Transmit>
		for (int i = 0; i < 10; i++)
 8000ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000ffc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001000:	2b09      	cmp	r3, #9
 8001002:	dd92      	ble.n	8000f2a <read_sensirion+0xe6>
		}
		//HAL_Delay(1000);
		return actualValue;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <read_sensirion+0x1d8>)
 8001006:	e000      	b.n	800100a <read_sensirion+0x1c6>
	}
	else
	{
		//HAL_Delay(1000);
		return NULL;
 8001008:	2300      	movs	r3, #0
	}
}
 800100a:	4618      	mov	r0, r3
 800100c:	37a0      	adds	r7, #160	; 0xa0
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000650 	.word	0x20000650
 8001018:	2000000c 	.word	0x2000000c
 800101c:	2000034c 	.word	0x2000034c
 8001020:	0800d188 	.word	0x0800d188
 8001024:	200005cc 	.word	0x200005cc

08001028 <sent_string_to_mcu>:
#include "string.h"
#include "stdio.h"

void sent_string_to_mcu(char data[]){
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800102e:	af00      	add	r7, sp, #0
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	6018      	str	r0, [r3, #0]
	char stringBuffer[500];
	sprintf(stringBuffer, "%s\n" , data);
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	f107 000c 	add.w	r0, r7, #12
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	490a      	ldr	r1, [pc, #40]	; (8001068 <sent_string_to_mcu+0x40>)
 800103e:	f009 fed1 	bl	800ade4 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f8fa 	bl	8000240 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	23c8      	movs	r3, #200	; 0xc8
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <sent_string_to_mcu+0x44>)
 8001058:	f008 fd22 	bl	8009aa0 <HAL_UART_Transmit>
}
 800105c:	bf00      	nop
 800105e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800d190 	.word	0x0800d190
 800106c:	200006d4 	.word	0x200006d4

08001070 <saveData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Save EEPROM
void saveData(){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	//Clock
	EEPROM_Write_NUM (1, 0, hourNum);
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <saveData+0xb8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	2100      	movs	r1, #0
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fb74 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (2, 0, minuteNum);
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <saveData+0xbc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	2100      	movs	r1, #0
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff fb68 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (3, 0, secondNum);
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <saveData+0xc0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	2100      	movs	r1, #0
 80010b6:	2003      	movs	r0, #3
 80010b8:	f7ff fb5c 	bl	8000774 <EEPROM_Write_NUM>

	//Date
	EEPROM_Write_NUM (4, 0, dayIndex);
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <saveData+0xc4>)
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	2100      	movs	r1, #0
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fb4f 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (5, 0, date);
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <saveData+0xc8>)
 80010d8:	f993 3000 	ldrsb.w	r3, [r3]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	2100      	movs	r1, #0
 80010ea:	2005      	movs	r0, #5
 80010ec:	f7ff fb42 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (6, 0, monthIndex);
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <saveData+0xcc>)
 80010f2:	f993 3000 	ldrsb.w	r3, [r3]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001102:	2100      	movs	r1, #0
 8001104:	2006      	movs	r0, #6
 8001106:	f7ff fb35 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (7, 0, year);
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <saveData+0xd0>)
 800110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	2100      	movs	r1, #0
 800111e:	2007      	movs	r0, #7
 8001120:	f7ff fb28 	bl	8000774 <EEPROM_Write_NUM>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000034 	.word	0x20000034
 800112c:	20000030 	.word	0x20000030
 8001130:	2000002c 	.word	0x2000002c
 8001134:	200000a4 	.word	0x200000a4
 8001138:	20000056 	.word	0x20000056
 800113c:	200000a5 	.word	0x200000a5
 8001140:	200000a6 	.word	0x200000a6

08001144 <readData>:
// Read EEPROM
void readData(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	//Clock
	hourNum = EEPROM_Read_NUM (1, 0);
 800114a:	2100      	movs	r1, #0
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff fb2d 	bl	80007ac <EEPROM_Read_NUM>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115a:	ee17 2a90 	vmov	r2, s15
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <readData+0xc4>)
 8001160:	601a      	str	r2, [r3, #0]
	minuteNum = EEPROM_Read_NUM (2, 0);
 8001162:	2100      	movs	r1, #0
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fb21 	bl	80007ac <EEPROM_Read_NUM>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 2a90 	vmov	r2, s15
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <readData+0xc8>)
 8001178:	601a      	str	r2, [r3, #0]
	secondNum = EEPROM_Read_NUM (3, 0);
 800117a:	2100      	movs	r1, #0
 800117c:	2003      	movs	r0, #3
 800117e:	f7ff fb15 	bl	80007ac <EEPROM_Read_NUM>
 8001182:	eef0 7a40 	vmov.f32	s15, s0
 8001186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118a:	ee17 2a90 	vmov	r2, s15
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <readData+0xcc>)
 8001190:	601a      	str	r2, [r3, #0]

	//Date
	dayIndex = EEPROM_Read_NUM (4, 0);
 8001192:	2100      	movs	r1, #0
 8001194:	2004      	movs	r0, #4
 8001196:	f7ff fb09 	bl	80007ac <EEPROM_Read_NUM>
 800119a:	eef0 7a40 	vmov.f32	s15, s0
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80011a6:	793b      	ldrb	r3, [r7, #4]
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <readData+0xd0>)
 80011ac:	701a      	strb	r2, [r3, #0]
	date = EEPROM_Read_NUM (5, 0);
 80011ae:	2100      	movs	r1, #0
 80011b0:	2005      	movs	r0, #5
 80011b2:	f7ff fafb 	bl	80007ac <EEPROM_Read_NUM>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011be:	edc7 7a01 	vstr	s15, [r7, #4]
 80011c2:	793b      	ldrb	r3, [r7, #4]
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <readData+0xd4>)
 80011c8:	701a      	strb	r2, [r3, #0]
	monthIndex = EEPROM_Read_NUM (6, 0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	2006      	movs	r0, #6
 80011ce:	f7ff faed 	bl	80007ac <EEPROM_Read_NUM>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011da:	edc7 7a01 	vstr	s15, [r7, #4]
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <readData+0xd8>)
 80011e4:	701a      	strb	r2, [r3, #0]
	year = EEPROM_Read_NUM (7, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2007      	movs	r0, #7
 80011ea:	f7ff fadf 	bl	80007ac <EEPROM_Read_NUM>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f6:	ee17 3a90 	vmov	r3, s15
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <readData+0xdc>)
 80011fe:	801a      	strh	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000034 	.word	0x20000034
 800120c:	20000030 	.word	0x20000030
 8001210:	2000002c 	.word	0x2000002c
 8001214:	200000a4 	.word	0x200000a4
 8001218:	20000056 	.word	0x20000056
 800121c:	200000a5 	.word	0x200000a5
 8001220:	200000a6 	.word	0x200000a6

08001224 <eraseAllData>:

// Erase EERPOM
void eraseAllData(){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	e007      	b.n	8001240 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fb37 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001246:	dbf3      	blt.n	8001230 <eraseAllData+0xc>
	}
	year = 2021;
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <eraseAllData+0x54>)
 800124a:	f240 72e5 	movw	r2, #2021	; 0x7e5
 800124e:	801a      	strh	r2, [r3, #0]
	EEPROM_Write_NUM (7, 0, year); // override year
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <eraseAllData+0x54>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	2100      	movs	r1, #0
 8001264:	2007      	movs	r0, #7
 8001266:	f7ff fa85 	bl	8000774 <EEPROM_Write_NUM>
	readData(); // Read from Clean EEPROM
 800126a:	f7ff ff6b 	bl	8001144 <readData>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000a6 	.word	0x200000a6

0800127c <checkResetData>:

void checkResetData(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	if(userResetButton == 1){
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <checkResetData+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <checkResetData+0x16>
		eraseAllData();
 8001288:	f7ff ffcc 	bl	8001224 <eraseAllData>
		userResetButton = 0;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <checkResetData+0x1c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	}
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002d0 	.word	0x200002d0

0800129c <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 ff4d 	bl	8005148 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f003 fd44 	bl	8004d3c <ILI9341_Set_Rotation>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <check31Days>:

bool check31Days(){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	if(monthIndex == 0 || monthIndex == 2 || monthIndex == 4 || monthIndex == 6 || monthIndex == 7 || monthIndex == 9 || monthIndex == 11){
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <check31Days+0x5c>)
 80012c2:	f993 3000 	ldrsb.w	r3, [r3]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01d      	beq.n	8001306 <check31Days+0x4a>
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <check31Days+0x5c>)
 80012cc:	f993 3000 	ldrsb.w	r3, [r3]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d018      	beq.n	8001306 <check31Days+0x4a>
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <check31Days+0x5c>)
 80012d6:	f993 3000 	ldrsb.w	r3, [r3]
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d013      	beq.n	8001306 <check31Days+0x4a>
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <check31Days+0x5c>)
 80012e0:	f993 3000 	ldrsb.w	r3, [r3]
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d00e      	beq.n	8001306 <check31Days+0x4a>
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <check31Days+0x5c>)
 80012ea:	f993 3000 	ldrsb.w	r3, [r3]
 80012ee:	2b07      	cmp	r3, #7
 80012f0:	d009      	beq.n	8001306 <check31Days+0x4a>
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <check31Days+0x5c>)
 80012f4:	f993 3000 	ldrsb.w	r3, [r3]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d004      	beq.n	8001306 <check31Days+0x4a>
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <check31Days+0x5c>)
 80012fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001302:	2b0b      	cmp	r3, #11
 8001304:	d101      	bne.n	800130a <check31Days+0x4e>
		return true;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <check31Days+0x50>
	}else{
		return false;
 800130a:	2300      	movs	r3, #0
	}
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200000a5 	.word	0x200000a5

0800131c <setDayOneIncrementMonth>:
void setDayOneIncrementMonth(uint8_t num){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	if(date > num){
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <setDayOneIncrementMonth+0x48>)
 8001328:	f993 3000 	ldrsb.w	r3, [r3]
 800132c:	461a      	mov	r2, r3
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	429a      	cmp	r2, r3
 8001332:	dd10      	ble.n	8001356 <setDayOneIncrementMonth+0x3a>
		date = 1;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <setDayOneIncrementMonth+0x48>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
		if(mode != 100){
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <setDayOneIncrementMonth+0x4c>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d008      	beq.n	8001356 <setDayOneIncrementMonth+0x3a>
			monthIndex++;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <setDayOneIncrementMonth+0x50>)
 8001346:	f993 3000 	ldrsb.w	r3, [r3]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	b25a      	sxtb	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <setDayOneIncrementMonth+0x50>)
 8001354:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000056 	.word	0x20000056
 8001368:	2000004e 	.word	0x2000004e
 800136c:	200000a5 	.word	0x200000a5

08001370 <setDayX>:
void setDayX(uint8_t num){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	date = num;
 800137a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <setDayX+0x20>)
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000056 	.word	0x20000056

08001394 <calculationClock>:

//Calculation
void calculationClock(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

	millisecondHAL = HAL_GetTick();
 8001398:	f004 f91a 	bl	80055d0 <HAL_GetTick>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	498a      	ldr	r1, [pc, #552]	; (80015d0 <calculationClock+0x23c>)
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]

	//Normal Clock
	if (millisecond >= 1000){
 80013aa:	4b8a      	ldr	r3, [pc, #552]	; (80015d4 <calculationClock+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b2:	d307      	bcc.n	80013c4 <calculationClock+0x30>
		millisecond = 0;
 80013b4:	4b87      	ldr	r3, [pc, #540]	; (80015d4 <calculationClock+0x240>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
		secondNum++;
 80013ba:	4b87      	ldr	r3, [pc, #540]	; (80015d8 <calculationClock+0x244>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a85      	ldr	r2, [pc, #532]	; (80015d8 <calculationClock+0x244>)
 80013c2:	6013      	str	r3, [r2, #0]
	}
	if (secondNum >= 60){
 80013c4:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <calculationClock+0x244>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b3b      	cmp	r3, #59	; 0x3b
 80013ca:	dd0c      	ble.n	80013e6 <calculationClock+0x52>
		secondNum = 0;
 80013cc:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <calculationClock+0x244>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <calculationClock+0x248>)
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d004      	beq.n	80013e6 <calculationClock+0x52>
			minuteNum++;
 80013dc:	4b80      	ldr	r3, [pc, #512]	; (80015e0 <calculationClock+0x24c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a7f      	ldr	r2, [pc, #508]	; (80015e0 <calculationClock+0x24c>)
 80013e4:	6013      	str	r3, [r2, #0]
		}
	}
	if (minuteNum >= 60){
 80013e6:	4b7e      	ldr	r3, [pc, #504]	; (80015e0 <calculationClock+0x24c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b3b      	cmp	r3, #59	; 0x3b
 80013ec:	dd0c      	ble.n	8001408 <calculationClock+0x74>
		minuteNum = 0;
 80013ee:	4b7c      	ldr	r3, [pc, #496]	; (80015e0 <calculationClock+0x24c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 80013f4:	4b79      	ldr	r3, [pc, #484]	; (80015dc <calculationClock+0x248>)
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d004      	beq.n	8001408 <calculationClock+0x74>
			hourNum++;
 80013fe:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <calculationClock+0x250>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <calculationClock+0x250>)
 8001406:	6013      	str	r3, [r2, #0]
		}
	}
	if (hourNum >= 24){
 8001408:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <calculationClock+0x250>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b17      	cmp	r3, #23
 800140e:	dd19      	ble.n	8001444 <calculationClock+0xb0>
		hourNum = 0;
 8001410:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <calculationClock+0x250>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001416:	4b71      	ldr	r3, [pc, #452]	; (80015dc <calculationClock+0x248>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d011      	beq.n	8001444 <calculationClock+0xb0>
			dayIndex++;
 8001420:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <calculationClock+0x254>)
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	3301      	adds	r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	b25a      	sxtb	r2, r3
 800142e:	4b6e      	ldr	r3, [pc, #440]	; (80015e8 <calculationClock+0x254>)
 8001430:	701a      	strb	r2, [r3, #0]
			date++;
 8001432:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <calculationClock+0x258>)
 8001434:	f993 3000 	ldrsb.w	r3, [r3]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3301      	adds	r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	b25a      	sxtb	r2, r3
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <calculationClock+0x258>)
 8001442:	701a      	strb	r2, [r3, #0]
		}
	}
	//Normal Date
	if (dayIndex >= 7){
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <calculationClock+0x254>)
 8001446:	f993 3000 	ldrsb.w	r3, [r3]
 800144a:	2b06      	cmp	r3, #6
 800144c:	dd02      	ble.n	8001454 <calculationClock+0xc0>
		dayIndex = 0;
 800144e:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <calculationClock+0x254>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	}
	if (year % 4 == 0){ //check for FEB 29 days
 8001454:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <calculationClock+0x25c>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	b29b      	uxth	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d115      	bne.n	8001492 <calculationClock+0xfe>
		if(monthIndex == 1){
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <calculationClock+0x260>)
 8001468:	f993 3000 	ldrsb.w	r3, [r3]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d103      	bne.n	8001478 <calculationClock+0xe4>
			setDayOneIncrementMonth(29); // 29 days
 8001470:	201d      	movs	r0, #29
 8001472:	f7ff ff53 	bl	800131c <setDayOneIncrementMonth>
 8001476:	e021      	b.n	80014bc <calculationClock+0x128>
		}else if(check31Days() == true){
 8001478:	f7ff ff20 	bl	80012bc <check31Days>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <calculationClock+0xf6>
			setDayOneIncrementMonth(31); // 31 days
 8001482:	201f      	movs	r0, #31
 8001484:	f7ff ff4a 	bl	800131c <setDayOneIncrementMonth>
 8001488:	e018      	b.n	80014bc <calculationClock+0x128>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 800148a:	201e      	movs	r0, #30
 800148c:	f7ff ff46 	bl	800131c <setDayOneIncrementMonth>
 8001490:	e014      	b.n	80014bc <calculationClock+0x128>
		}
	}else{
		if(monthIndex == 1){
 8001492:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <calculationClock+0x260>)
 8001494:	f993 3000 	ldrsb.w	r3, [r3]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d103      	bne.n	80014a4 <calculationClock+0x110>
			setDayOneIncrementMonth(28); // 28 days
 800149c:	201c      	movs	r0, #28
 800149e:	f7ff ff3d 	bl	800131c <setDayOneIncrementMonth>
 80014a2:	e00b      	b.n	80014bc <calculationClock+0x128>
		}else if(check31Days() == true){
 80014a4:	f7ff ff0a 	bl	80012bc <check31Days>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <calculationClock+0x122>
			setDayOneIncrementMonth(31); // 31 days
 80014ae:	201f      	movs	r0, #31
 80014b0:	f7ff ff34 	bl	800131c <setDayOneIncrementMonth>
 80014b4:	e002      	b.n	80014bc <calculationClock+0x128>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 80014b6:	201e      	movs	r0, #30
 80014b8:	f7ff ff30 	bl	800131c <setDayOneIncrementMonth>
		}
	}
	if (monthIndex >= 12){
 80014bc:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <calculationClock+0x260>)
 80014be:	f993 3000 	ldrsb.w	r3, [r3]
 80014c2:	2b0b      	cmp	r3, #11
 80014c4:	dd10      	ble.n	80014e8 <calculationClock+0x154>
		monthIndex = 0;
 80014c6:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <calculationClock+0x260>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		if (mode != 100){
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <calculationClock+0x248>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d008      	beq.n	80014e8 <calculationClock+0x154>
			year++;
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <calculationClock+0x25c>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <calculationClock+0x25c>)
 80014e6:	801a      	strh	r2, [r3, #0]
		}
	}
	if (year >= 10000){
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <calculationClock+0x25c>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80014f2:	4293      	cmp	r3, r2
 80014f4:	dd02      	ble.n	80014fc <calculationClock+0x168>
		year = 1;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <calculationClock+0x25c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	801a      	strh	r2, [r3, #0]
	}

	//check for editMode
	if(mode == 100){
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <calculationClock+0x248>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d15f      	bne.n	80015c6 <calculationClock+0x232>
		if (minuteNum < 0){
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <calculationClock+0x24c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	da02      	bge.n	8001514 <calculationClock+0x180>
			minuteNum = 59;
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <calculationClock+0x24c>)
 8001510:	223b      	movs	r2, #59	; 0x3b
 8001512:	601a      	str	r2, [r3, #0]
		}
		if (hourNum < 0){
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <calculationClock+0x250>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da02      	bge.n	8001522 <calculationClock+0x18e>
			hourNum = 23;
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <calculationClock+0x250>)
 800151e:	2217      	movs	r2, #23
 8001520:	601a      	str	r2, [r3, #0]
		}
		if (dayIndex < 0){
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <calculationClock+0x254>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da02      	bge.n	8001532 <calculationClock+0x19e>
			dayIndex = 6;
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <calculationClock+0x254>)
 800152e:	2206      	movs	r2, #6
 8001530:	701a      	strb	r2, [r3, #0]
		}
		if (date < 1){
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <calculationClock+0x258>)
 8001534:	f993 3000 	ldrsb.w	r3, [r3]
 8001538:	2b00      	cmp	r3, #0
 800153a:	dc33      	bgt.n	80015a4 <calculationClock+0x210>
			if (year % 4 == 0){ //check for FEB 29 days
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <calculationClock+0x25c>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	b29b      	uxth	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d115      	bne.n	800157a <calculationClock+0x1e6>
				if(monthIndex == 1){
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <calculationClock+0x260>)
 8001550:	f993 3000 	ldrsb.w	r3, [r3]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d103      	bne.n	8001560 <calculationClock+0x1cc>
					setDayX(29); // 29 days
 8001558:	201d      	movs	r0, #29
 800155a:	f7ff ff09 	bl	8001370 <setDayX>
 800155e:	e021      	b.n	80015a4 <calculationClock+0x210>
				}else if(check31Days() == true){
 8001560:	f7ff feac 	bl	80012bc <check31Days>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <calculationClock+0x1de>
					setDayX(31); // 31 days
 800156a:	201f      	movs	r0, #31
 800156c:	f7ff ff00 	bl	8001370 <setDayX>
 8001570:	e018      	b.n	80015a4 <calculationClock+0x210>
				}else{
					setDayX(30); // 30 days
 8001572:	201e      	movs	r0, #30
 8001574:	f7ff fefc 	bl	8001370 <setDayX>
 8001578:	e014      	b.n	80015a4 <calculationClock+0x210>
				}
			}else{
				if(monthIndex == 1){
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <calculationClock+0x260>)
 800157c:	f993 3000 	ldrsb.w	r3, [r3]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d103      	bne.n	800158c <calculationClock+0x1f8>
					setDayX(28); // 28 days
 8001584:	201c      	movs	r0, #28
 8001586:	f7ff fef3 	bl	8001370 <setDayX>
 800158a:	e00b      	b.n	80015a4 <calculationClock+0x210>
				}else if(check31Days() == true){
 800158c:	f7ff fe96 	bl	80012bc <check31Days>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <calculationClock+0x20a>
					setDayX(31); // 31 days
 8001596:	201f      	movs	r0, #31
 8001598:	f7ff feea 	bl	8001370 <setDayX>
 800159c:	e002      	b.n	80015a4 <calculationClock+0x210>
				}else{
					setDayX(30); // 30 days
 800159e:	201e      	movs	r0, #30
 80015a0:	f7ff fee6 	bl	8001370 <setDayX>
				}
			}
		}
		if (monthIndex < 0){
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <calculationClock+0x260>)
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da02      	bge.n	80015b4 <calculationClock+0x220>
			monthIndex = 11;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <calculationClock+0x260>)
 80015b0:	220b      	movs	r2, #11
 80015b2:	701a      	strb	r2, [r3, #0]
		}
		if (year < 1){
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <calculationClock+0x25c>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dc03      	bgt.n	80015c6 <calculationClock+0x232>
			year = 9999;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <calculationClock+0x25c>)
 80015c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80015c4:	801a      	strh	r2, [r3, #0]
		}
	}

	saveData();
 80015c6:	f7ff fd53 	bl	8001070 <saveData>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200002e0 	.word	0x200002e0
 80015d4:	200002bc 	.word	0x200002bc
 80015d8:	2000002c 	.word	0x2000002c
 80015dc:	2000004e 	.word	0x2000004e
 80015e0:	20000030 	.word	0x20000030
 80015e4:	20000034 	.word	0x20000034
 80015e8:	200000a4 	.word	0x200000a4
 80015ec:	20000056 	.word	0x20000056
 80015f0:	200000a6 	.word	0x200000a6
 80015f4:	200000a5 	.word	0x200000a5

080015f8 <dayScreen>:
//	}
//}


//Date Clock Atomic
void dayScreen(bool status, bool isEdit){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]

	if (prevDayIndex != dayIndex || isEdit == true){
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <dayScreen+0xe0>)
 800160a:	f993 2000 	ldrsb.w	r2, [r3]
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <dayScreen+0xe4>)
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	429a      	cmp	r2, r3
 8001616:	d102      	bne.n	800161e <dayScreen+0x26>
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d054      	beq.n	80016c8 <dayScreen+0xd0>
		if (status == true){
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d02a      	beq.n	800167a <dayScreen+0x82>
			sprintf(Temp_Buffer_text, "%s", dayText[dayIndex]);
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <dayScreen+0xe4>)
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	461a      	mov	r2, r3
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <dayScreen+0xe8>)
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	461a      	mov	r2, r3
 8001634:	492b      	ldr	r1, [pc, #172]	; (80016e4 <dayScreen+0xec>)
 8001636:	482c      	ldr	r0, [pc, #176]	; (80016e8 <dayScreen+0xf0>)
 8001638:	f009 fbd4 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <dayScreen+0xf4>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3b05      	subs	r3, #5
 8001644:	b2d9      	uxtb	r1, r3
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <dayScreen+0xf8>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001652:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80016d0 <dayScreen+0xd8>
 8001656:	ee27 7b06 	vmul.f64	d7, d7, d6
 800165a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800165e:	edc7 7a00 	vstr	s15, [r7]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	2300      	movs	r3, #0
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	2302      	movs	r3, #2
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <dayScreen+0xf0>)
 8001674:	f003 fa62 	bl	8004b3c <ILI9341_Draw_Text>
 8001678:	e021      	b.n	80016be <dayScreen+0xc6>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 800167a:	491e      	ldr	r1, [pc, #120]	; (80016f4 <dayScreen+0xfc>)
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <dayScreen+0xf0>)
 800167e:	f009 fbb1 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <dayScreen+0xf4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	3b05      	subs	r3, #5
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <dayScreen+0xf8>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001698:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80016d0 <dayScreen+0xd8>
 800169c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016a4:	edc7 7a00 	vstr	s15, [r7]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2302      	movs	r3, #2
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <dayScreen+0xf0>)
 80016ba:	f003 fa3f 	bl	8004b3c <ILI9341_Draw_Text>
		}
		prevDayIndex = dayIndex;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <dayScreen+0xe4>)
 80016c0:	f993 2000 	ldrsb.w	r2, [r3]
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <dayScreen+0xe0>)
 80016c6:	701a      	strb	r2, [r3, #0]
	}
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	9999999a 	.word	0x9999999a
 80016d4:	3fb99999 	.word	0x3fb99999
 80016d8:	200000a9 	.word	0x200000a9
 80016dc:	200000a4 	.word	0x200000a4
 80016e0:	20000058 	.word	0x20000058
 80016e4:	0800d1e0 	.word	0x0800d1e0
 80016e8:	20000410 	.word	0x20000410
 80016ec:	20000048 	.word	0x20000048
 80016f0:	2000004a 	.word	0x2000004a
 80016f4:	0800d1e4 	.word	0x0800d1e4

080016f8 <dateScreen>:
void dateScreen(bool status, bool isEdit){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]
	if (prevDate != date || isEdit == true){
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <dateScreen+0xf0>)
 800170a:	f993 2000 	ldrsb.w	r2, [r3]
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <dateScreen+0xf4>)
 8001710:	f993 3000 	ldrsb.w	r3, [r3]
 8001714:	429a      	cmp	r2, r3
 8001716:	d102      	bne.n	800171e <dateScreen+0x26>
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d05a      	beq.n	80017d4 <dateScreen+0xdc>
		if (status == true){
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d02b      	beq.n	800177c <dateScreen+0x84>
			sprintf(Temp_Buffer_text, "%02d", (int)date);
 8001724:	4b31      	ldr	r3, [pc, #196]	; (80017ec <dateScreen+0xf4>)
 8001726:	f993 3000 	ldrsb.w	r3, [r3]
 800172a:	461a      	mov	r2, r3
 800172c:	4930      	ldr	r1, [pc, #192]	; (80017f0 <dateScreen+0xf8>)
 800172e:	4831      	ldr	r0, [pc, #196]	; (80017f4 <dateScreen+0xfc>)
 8001730:	f009 fb58 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <dateScreen+0x100>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <dateScreen+0x104>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4413      	add	r3, r2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	3303      	adds	r3, #3
 8001746:	b2d9      	uxtb	r1, r3
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <dateScreen+0x108>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001754:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80017e0 <dateScreen+0xe8>
 8001758:	ee27 7b06 	vmul.f64	d7, d7, d6
 800175c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001760:	edc7 7a00 	vstr	s15, [r7]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001774:	481f      	ldr	r0, [pc, #124]	; (80017f4 <dateScreen+0xfc>)
 8001776:	f003 f9e1 	bl	8004b3c <ILI9341_Draw_Text>
 800177a:	e026      	b.n	80017ca <dateScreen+0xd2>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 800177c:	4921      	ldr	r1, [pc, #132]	; (8001804 <dateScreen+0x10c>)
 800177e:	481d      	ldr	r0, [pc, #116]	; (80017f4 <dateScreen+0xfc>)
 8001780:	f009 fb30 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <dateScreen+0x100>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <dateScreen+0x104>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3303      	adds	r3, #3
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <dateScreen+0x108>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017a4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80017e0 <dateScreen+0xe8>
 80017a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017b0:	edc7 7a00 	vstr	s15, [r7]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2302      	movs	r3, #2
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <dateScreen+0xfc>)
 80017c6:	f003 f9b9 	bl	8004b3c <ILI9341_Draw_Text>
		}
		prevDate = date;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <dateScreen+0xf4>)
 80017cc:	f993 2000 	ldrsb.w	r2, [r3]
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <dateScreen+0xf0>)
 80017d2:	701a      	strb	r2, [r3, #0]
	}
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	f3af 8000 	nop.w
 80017e0:	9999999a 	.word	0x9999999a
 80017e4:	3fb99999 	.word	0x3fb99999
 80017e8:	200000a8 	.word	0x200000a8
 80017ec:	20000056 	.word	0x20000056
 80017f0:	0800d1e8 	.word	0x0800d1e8
 80017f4:	20000410 	.word	0x20000410
 80017f8:	20000048 	.word	0x20000048
 80017fc:	2000004c 	.word	0x2000004c
 8001800:	2000004a 	.word	0x2000004a
 8001804:	0800d1f0 	.word	0x0800d1f0

08001808 <monthScreen>:
void monthScreen(bool status, bool isEdit){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af02      	add	r7, sp, #8
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	if (prevMonthIndex != monthIndex || isEdit == true){
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <monthScreen+0x100>)
 800181a:	f993 2000 	ldrsb.w	r2, [r3]
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <monthScreen+0x104>)
 8001820:	f993 3000 	ldrsb.w	r3, [r3]
 8001824:	429a      	cmp	r2, r3
 8001826:	d102      	bne.n	800182e <monthScreen+0x26>
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d062      	beq.n	80018f4 <monthScreen+0xec>
		if (status == true){
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d031      	beq.n	8001898 <monthScreen+0x90>
			sprintf(Temp_Buffer_text, "%s", monthText[monthIndex]);
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <monthScreen+0x104>)
 8001836:	f993 3000 	ldrsb.w	r3, [r3]
 800183a:	461a      	mov	r2, r3
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <monthScreen+0x108>)
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	461a      	mov	r2, r3
 8001844:	4933      	ldr	r1, [pc, #204]	; (8001914 <monthScreen+0x10c>)
 8001846:	4834      	ldr	r0, [pc, #208]	; (8001918 <monthScreen+0x110>)
 8001848:	f009 facc 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <monthScreen+0x114>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <monthScreen+0x118>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3b05      	subs	r3, #5
 8001862:	b2d9      	uxtb	r1, r3
 8001864:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <monthScreen+0x11c>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001870:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001900 <monthScreen+0xf8>
 8001874:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001878:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800187c:	edc7 7a00 	vstr	s15, [r7]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	2300      	movs	r3, #0
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2302      	movs	r3, #2
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <monthScreen+0x110>)
 8001892:	f003 f953 	bl	8004b3c <ILI9341_Draw_Text>
 8001896:	e028      	b.n	80018ea <monthScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001898:	4923      	ldr	r1, [pc, #140]	; (8001928 <monthScreen+0x120>)
 800189a:	481f      	ldr	r0, [pc, #124]	; (8001918 <monthScreen+0x110>)
 800189c:	f009 faa2 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <monthScreen+0x114>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <monthScreen+0x118>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3b05      	subs	r3, #5
 80018b6:	b2d9      	uxtb	r1, r3
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <monthScreen+0x11c>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018c4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001900 <monthScreen+0xf8>
 80018c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018d0:	edc7 7a00 	vstr	s15, [r7]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <monthScreen+0x110>)
 80018e6:	f003 f929 	bl	8004b3c <ILI9341_Draw_Text>
		}
		prevMonthIndex = monthIndex;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <monthScreen+0x104>)
 80018ec:	f993 2000 	ldrsb.w	r2, [r3]
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <monthScreen+0x100>)
 80018f2:	701a      	strb	r2, [r3, #0]
	}
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	f3af 8000 	nop.w
 8001900:	9999999a 	.word	0x9999999a
 8001904:	3fb99999 	.word	0x3fb99999
 8001908:	200000aa 	.word	0x200000aa
 800190c:	200000a5 	.word	0x200000a5
 8001910:	20000074 	.word	0x20000074
 8001914:	0800d1e0 	.word	0x0800d1e0
 8001918:	20000410 	.word	0x20000410
 800191c:	20000048 	.word	0x20000048
 8001920:	2000004c 	.word	0x2000004c
 8001924:	2000004a 	.word	0x2000004a
 8001928:	0800d1e4 	.word	0x0800d1e4
 800192c:	00000000 	.word	0x00000000

08001930 <yearScreen>:
void yearScreen(bool status, bool isEdit){
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af02      	add	r7, sp, #8
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	if (prevYear != year || isEdit == true){
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <yearScreen+0x100>)
 8001942:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <yearScreen+0x104>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	429a      	cmp	r2, r3
 800194e:	d102      	bne.n	8001956 <yearScreen+0x26>
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d062      	beq.n	8001a1c <yearScreen+0xec>
		if (status == true){
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02f      	beq.n	80019bc <yearScreen+0x8c>
			sprintf(Temp_Buffer_text, "%04d", (int)year);
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <yearScreen+0x104>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	461a      	mov	r2, r3
 8001964:	4934      	ldr	r1, [pc, #208]	; (8001a38 <yearScreen+0x108>)
 8001966:	4835      	ldr	r0, [pc, #212]	; (8001a3c <yearScreen+0x10c>)
 8001968:	f009 fa3c 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800196c:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <yearScreen+0x110>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <yearScreen+0x114>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	0049      	lsls	r1, r1, #1
 800197c:	440b      	add	r3, r1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3303      	adds	r3, #3
 8001986:	b2d9      	uxtb	r1, r3
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <yearScreen+0x118>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001994:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001a28 <yearScreen+0xf8>
 8001998:	ee27 7b06 	vmul.f64	d7, d7, d6
 800199c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019a0:	edc7 7a00 	vstr	s15, [r7]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	4821      	ldr	r0, [pc, #132]	; (8001a3c <yearScreen+0x10c>)
 80019b6:	f003 f8c1 	bl	8004b3c <ILI9341_Draw_Text>
 80019ba:	e02a      	b.n	8001a12 <yearScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "    ");
 80019bc:	4923      	ldr	r1, [pc, #140]	; (8001a4c <yearScreen+0x11c>)
 80019be:	481f      	ldr	r0, [pc, #124]	; (8001a3c <yearScreen+0x10c>)
 80019c0:	f009 fa10 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <yearScreen+0x110>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <yearScreen+0x114>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4619      	mov	r1, r3
 80019d2:	0049      	lsls	r1, r1, #1
 80019d4:	440b      	add	r3, r1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	3303      	adds	r3, #3
 80019de:	b2d9      	uxtb	r1, r3
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <yearScreen+0x118>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019ec:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001a28 <yearScreen+0xf8>
 80019f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019f8:	edc7 7a00 	vstr	s15, [r7]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <yearScreen+0x10c>)
 8001a0e:	f003 f895 	bl	8004b3c <ILI9341_Draw_Text>
		}
		prevYear = year;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <yearScreen+0x104>)
 8001a14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <yearScreen+0x100>)
 8001a1a:	801a      	strh	r2, [r3, #0]
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	f3af 8000 	nop.w
 8001a28:	9999999a 	.word	0x9999999a
 8001a2c:	3fb99999 	.word	0x3fb99999
 8001a30:	200000ac 	.word	0x200000ac
 8001a34:	200000a6 	.word	0x200000a6
 8001a38:	0800d1f4 	.word	0x0800d1f4
 8001a3c:	20000410 	.word	0x20000410
 8001a40:	20000048 	.word	0x20000048
 8001a44:	2000004c 	.word	0x2000004c
 8001a48:	2000004a 	.word	0x2000004a
 8001a4c:	0800d1fc 	.word	0x0800d1fc

08001a50 <displayDateScreen>:

//Display Date Clock Screen
void displayDateScreen(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8001a54:	2100      	movs	r1, #0
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fdce 	bl	80015f8 <dayScreen>
	dateScreen(true, false);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fe4a 	bl	80016f8 <dateScreen>
	monthScreen(true, false);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff fece 	bl	8001808 <monthScreen>
	yearScreen(true, false);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7ff ff5e 	bl	8001930 <yearScreen>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <topBarScreen>:

//Top Screen
void topBarScreen(){
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af02      	add	r7, sp, #8
	displayDateScreen();
 8001a7e:	f7ff ffe7 	bl	8001a50 <displayDateScreen>

	//Alarm
	ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, YELLOW);
 8001a82:	4b99      	ldr	r3, [pc, #612]	; (8001ce8 <topBarScreen+0x270>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a8e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8001cc0 <topBarScreen+0x248>
 8001a92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a96:	4b95      	ldr	r3, [pc, #596]	; (8001cec <topBarScreen+0x274>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001aa2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aa6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	b298      	uxth	r0, r3
 8001ab0:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <topBarScreen+0x278>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001abc:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8001cc8 <topBarScreen+0x250>
 8001ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ac4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ac8:	ee17 3a90 	vmov	r3, s15
 8001acc:	b299      	uxth	r1, r3
 8001ace:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ad2:	2206      	movs	r2, #6
 8001ad4:	f002 fe2f 	bl	8004736 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, YELLOW);
 8001ad8:	4b83      	ldr	r3, [pc, #524]	; (8001ce8 <topBarScreen+0x270>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ae4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8001cc0 <topBarScreen+0x248>
 8001ae8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001aec:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <topBarScreen+0x274>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001afc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b00:	ee17 3a90 	vmov	r3, s15
 8001b04:	b298      	uxth	r0, r3
 8001b06:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <topBarScreen+0x278>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b12:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8001cd0 <topBarScreen+0x258>
 8001b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b26:	ee17 3a90 	vmov	r3, s15
 8001b2a:	b299      	uxth	r1, r3
 8001b2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b30:	2203      	movs	r2, #3
 8001b32:	f002 fe00 	bl	8004736 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, YELLOW);
 8001b36:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <topBarScreen+0x270>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b42:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001cd8 <topBarScreen+0x260>
 8001b46:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b4a:	4b68      	ldr	r3, [pc, #416]	; (8001cec <topBarScreen+0x274>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b5a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001b5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b66:	ee17 3a90 	vmov	r3, s15
 8001b6a:	b298      	uxth	r0, r3
 8001b6c:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <topBarScreen+0x278>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b78:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001ce0 <topBarScreen+0x268>
 8001b7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b80:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001b84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b8c:	ee17 3a90 	vmov	r3, s15
 8001b90:	b299      	uxth	r1, r3
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <topBarScreen+0x270>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b9e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001cd8 <topBarScreen+0x260>
 8001ba2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <topBarScreen+0x274>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bb6:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001bba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bc2:	ee17 3a90 	vmov	r3, s15
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <topBarScreen+0x278>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bd4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001ce0 <topBarScreen+0x268>
 8001bd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bdc:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001be0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001be4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8001bf2:	9400      	str	r4, [sp, #0]
 8001bf4:	f002 fea8 	bl	8004948 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <topBarScreen+0x270>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c04:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001cd8 <topBarScreen+0x260>
 8001c08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <topBarScreen+0x274>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c1c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001c20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c28:	ee17 3a90 	vmov	r3, s15
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <topBarScreen+0x278>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c3a:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001ce0 <topBarScreen+0x268>
 8001c3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c42:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001c46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c4e:	ee17 3a90 	vmov	r3, s15
 8001c52:	b299      	uxth	r1, r3
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <topBarScreen+0x270>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c60:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8001cd8 <topBarScreen+0x260>
 8001c64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <topBarScreen+0x274>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c78:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001c7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <topBarScreen+0x278>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c96:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001ce0 <topBarScreen+0x268>
 8001c9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c9e:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001ca2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ca6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	9400      	str	r4, [sp, #0]
 8001cb4:	f002 fdc7 	bl	8004846 <ILI9341_Draw_Hollow_Rectangle_Coord>


//	sprintf(Temp_Buffer_text, "24:00");
//	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.7 + offsetWidth, maxHeight * 0.1, WHITE, 2, BLACK);
}
 8001cb8:	bf00      	nop
 8001cba:	3704      	adds	r7, #4
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	d70a3d71 	.word	0xd70a3d71
 8001cc4:	3fed70a3 	.word	0x3fed70a3
 8001cc8:	0a3d70a4 	.word	0x0a3d70a4
 8001ccc:	3fc0a3d7 	.word	0x3fc0a3d7
 8001cd0:	47ae147b 	.word	0x47ae147b
 8001cd4:	3fc47ae1 	.word	0x3fc47ae1
 8001cd8:	cccccccd 	.word	0xcccccccd
 8001cdc:	3feccccc 	.word	0x3feccccc
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	3fb99999 	.word	0x3fb99999
 8001ce8:	20000046 	.word	0x20000046
 8001cec:	20000048 	.word	0x20000048
 8001cf0:	2000004a 	.word	0x2000004a

08001cf4 <resetPrevNum>:

//Reset Prev Values
void resetPrevNum(){
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <resetPrevNum+0x54>)
 8001cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfe:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <resetPrevNum+0x58>)
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <resetPrevNum+0x5c>)
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	601a      	str	r2, [r3, #0]

	prevDayIndex = -1;
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <resetPrevNum+0x60>)
 8001d12:	22ff      	movs	r2, #255	; 0xff
 8001d14:	701a      	strb	r2, [r3, #0]
	prevDate = -1;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <resetPrevNum+0x64>)
 8001d18:	22ff      	movs	r2, #255	; 0xff
 8001d1a:	701a      	strb	r2, [r3, #0]
	prevMonthIndex = -1;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <resetPrevNum+0x68>)
 8001d1e:	22ff      	movs	r2, #255	; 0xff
 8001d20:	701a      	strb	r2, [r3, #0]
	prevYear = -1;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <resetPrevNum+0x6c>)
 8001d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d28:	801a      	strh	r2, [r3, #0]

	prevTemp = -1.0;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <resetPrevNum+0x70>)
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <resetPrevNum+0x74>)
 8001d2e:	601a      	str	r2, [r3, #0]
	prevHumid = -1.0;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <resetPrevNum+0x78>)
 8001d32:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <resetPrevNum+0x74>)
 8001d34:	601a      	str	r2, [r3, #0]
	prevPmTwoPointFive = -1.0;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <resetPrevNum+0x7c>)
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <resetPrevNum+0x74>)
 8001d3a:	601a      	str	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000038 	.word	0x20000038
 8001d4c:	2000003c 	.word	0x2000003c
 8001d50:	20000040 	.word	0x20000040
 8001d54:	200000a9 	.word	0x200000a9
 8001d58:	200000a8 	.word	0x200000a8
 8001d5c:	200000aa 	.word	0x200000aa
 8001d60:	200000ac 	.word	0x200000ac
 8001d64:	20000020 	.word	0x20000020
 8001d68:	bf800000 	.word	0xbf800000
 8001d6c:	20000024 	.word	0x20000024
 8001d70:	20000028 	.word	0x20000028
 8001d74:	00000000 	.word	0x00000000

08001d78 <hourScreen>:

//Clock Screen Atomic
void hourScreen(bool status, bool isEdit){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460a      	mov	r2, r1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	4613      	mov	r3, r2
 8001d86:	71bb      	strb	r3, [r7, #6]
	if (prevHourNum != hourNum || isEdit == true){
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <hourScreen+0xd0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <hourScreen+0xd4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d102      	bne.n	8001d9a <hourScreen+0x22>
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d04e      	beq.n	8001e38 <hourScreen+0xc0>
		if (status == true){
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d025      	beq.n	8001dec <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <hourScreen+0xd4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	492a      	ldr	r1, [pc, #168]	; (8001e50 <hourScreen+0xd8>)
 8001da8:	482a      	ldr	r0, [pc, #168]	; (8001e54 <hourScreen+0xdc>)
 8001daa:	f009 f81b 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <hourScreen+0xe0>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3b05      	subs	r3, #5
 8001db6:	b2d9      	uxtb	r1, r3
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <hourScreen+0xe4>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001dc4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001e40 <hourScreen+0xc8>
 8001dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dd0:	edc7 7a00 	vstr	s15, [r7]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	2306      	movs	r3, #6
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de4:	481b      	ldr	r0, [pc, #108]	; (8001e54 <hourScreen+0xdc>)
 8001de6:	f002 fea9 	bl	8004b3c <ILI9341_Draw_Text>
 8001dea:	e021      	b.n	8001e30 <hourScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001dec:	491c      	ldr	r1, [pc, #112]	; (8001e60 <hourScreen+0xe8>)
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <hourScreen+0xdc>)
 8001df0:	f008 fff8 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <hourScreen+0xe0>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b05      	subs	r3, #5
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <hourScreen+0xe4>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e0a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001e40 <hourScreen+0xc8>
 8001e0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e16:	edc7 7a00 	vstr	s15, [r7]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2306      	movs	r3, #6
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2a:	480a      	ldr	r0, [pc, #40]	; (8001e54 <hourScreen+0xdc>)
 8001e2c:	f002 fe86 	bl	8004b3c <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <hourScreen+0xd4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <hourScreen+0xd0>)
 8001e36:	6013      	str	r3, [r2, #0]
	}
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	33333333 	.word	0x33333333
 8001e44:	3fd33333 	.word	0x3fd33333
 8001e48:	20000040 	.word	0x20000040
 8001e4c:	20000034 	.word	0x20000034
 8001e50:	0800d1e8 	.word	0x0800d1e8
 8001e54:	20000410 	.word	0x20000410
 8001e58:	20000048 	.word	0x20000048
 8001e5c:	2000004a 	.word	0x2000004a
 8001e60:	0800d1f0 	.word	0x0800d1f0
 8001e64:	00000000 	.word	0x00000000

08001e68 <colonScreen>:

void colonScreen(bool status){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	if (status == true){
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d022      	beq.n	8001ebe <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8001e78:	4927      	ldr	r1, [pc, #156]	; (8001f18 <colonScreen+0xb0>)
 8001e7a:	4828      	ldr	r0, [pc, #160]	; (8001f1c <colonScreen+0xb4>)
 8001e7c:	f008 ffb2 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <colonScreen+0xb8>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3349      	adds	r3, #73	; 0x49
 8001e88:	b2d9      	uxtb	r1, r3
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <colonScreen+0xbc>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e96:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001f10 <colonScreen+0xa8>
 8001e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ea2:	edc7 7a00 	vstr	s15, [r7]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	2300      	movs	r3, #0
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2304      	movs	r3, #4
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb6:	4819      	ldr	r0, [pc, #100]	; (8001f1c <colonScreen+0xb4>)
 8001eb8:	f002 fe40 	bl	8004b3c <ILI9341_Draw_Text>
	}
	else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
	}
}
 8001ebc:	e021      	b.n	8001f02 <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 8001ebe:	491a      	ldr	r1, [pc, #104]	; (8001f28 <colonScreen+0xc0>)
 8001ec0:	4816      	ldr	r0, [pc, #88]	; (8001f1c <colonScreen+0xb4>)
 8001ec2:	f008 ff8f 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <colonScreen+0xb8>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3349      	adds	r3, #73	; 0x49
 8001ece:	b2d9      	uxtb	r1, r3
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <colonScreen+0xbc>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001edc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001f10 <colonScreen+0xa8>
 8001ee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ee4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ee8:	edc7 7a00 	vstr	s15, [r7]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <colonScreen+0xb4>)
 8001efe:	f002 fe1d 	bl	8004b3c <ILI9341_Draw_Text>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	f3af 8000 	nop.w
 8001f10:	66666666 	.word	0x66666666
 8001f14:	3fd66666 	.word	0x3fd66666
 8001f18:	0800d204 	.word	0x0800d204
 8001f1c:	20000410 	.word	0x20000410
 8001f20:	20000048 	.word	0x20000048
 8001f24:	2000004a 	.word	0x2000004a
 8001f28:	0800d208 	.word	0x0800d208
 8001f2c:	00000000 	.word	0x00000000

08001f30 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	if (prevMinuteNum != minuteNum || isEdit == true){
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <minuteScreen+0xd0>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <minuteScreen+0xd4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d102      	bne.n	8001f52 <minuteScreen+0x22>
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04e      	beq.n	8001ff0 <minuteScreen+0xc0>
		if (status == true){
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d025      	beq.n	8001fa4 <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <minuteScreen+0xd4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	492a      	ldr	r1, [pc, #168]	; (8002008 <minuteScreen+0xd8>)
 8001f60:	482a      	ldr	r0, [pc, #168]	; (800200c <minuteScreen+0xdc>)
 8001f62:	f008 ff3f 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <minuteScreen+0xe0>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3361      	adds	r3, #97	; 0x61
 8001f6e:	b2d9      	uxtb	r1, r3
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <minuteScreen+0xe4>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f7c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001ff8 <minuteScreen+0xc8>
 8001f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f88:	edc7 7a00 	vstr	s15, [r7]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2306      	movs	r3, #6
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9c:	481b      	ldr	r0, [pc, #108]	; (800200c <minuteScreen+0xdc>)
 8001f9e:	f002 fdcd 	bl	8004b3c <ILI9341_Draw_Text>
 8001fa2:	e021      	b.n	8001fe8 <minuteScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001fa4:	491c      	ldr	r1, [pc, #112]	; (8002018 <minuteScreen+0xe8>)
 8001fa6:	4819      	ldr	r0, [pc, #100]	; (800200c <minuteScreen+0xdc>)
 8001fa8:	f008 ff1c 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <minuteScreen+0xe0>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <minuteScreen+0xe4>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fc2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001ff8 <minuteScreen+0xc8>
 8001fc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fce:	edc7 7a00 	vstr	s15, [r7]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2306      	movs	r3, #6
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe2:	480a      	ldr	r0, [pc, #40]	; (800200c <minuteScreen+0xdc>)
 8001fe4:	f002 fdaa 	bl	8004b3c <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <minuteScreen+0xd4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <minuteScreen+0xd0>)
 8001fee:	6013      	str	r3, [r2, #0]
	}
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	33333333 	.word	0x33333333
 8001ffc:	3fd33333 	.word	0x3fd33333
 8002000:	2000003c 	.word	0x2000003c
 8002004:	20000030 	.word	0x20000030
 8002008:	0800d1e8 	.word	0x0800d1e8
 800200c:	20000410 	.word	0x20000410
 8002010:	20000048 	.word	0x20000048
 8002014:	2000004a 	.word	0x2000004a
 8002018:	0800d1f0 	.word	0x0800d1f0
 800201c:	00000000 	.word	0x00000000

08002020 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
	if (prevSecondNum != secondNum || isEdit == true){
 8002030:	4b49      	ldr	r3, [pc, #292]	; (8002158 <secondScreen+0x138>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <secondScreen+0x13c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d102      	bne.n	8002042 <secondScreen+0x22>
 800203c:	79bb      	ldrb	r3, [r7, #6]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d07c      	beq.n	800213c <secondScreen+0x11c>
		if (status == true){
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d03c      	beq.n	80020c2 <secondScreen+0xa2>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8002048:	4b44      	ldr	r3, [pc, #272]	; (800215c <secondScreen+0x13c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4944      	ldr	r1, [pc, #272]	; (8002160 <secondScreen+0x140>)
 8002050:	4844      	ldr	r0, [pc, #272]	; (8002164 <secondScreen+0x144>)
 8002052:	f008 fec7 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 8002056:	4b44      	ldr	r3, [pc, #272]	; (8002168 <secondScreen+0x148>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002062:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002148 <secondScreen+0x128>
 8002066:	ee27 6b06 	vmul.f64	d6, d7, d6
 800206a:	4b40      	ldr	r3, [pc, #256]	; (800216c <secondScreen+0x14c>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002076:	ee36 7b07 	vadd.f64	d7, d6, d7
 800207a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800207e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002082:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002086:	edc7 7a00 	vstr	s15, [r7]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2d9      	uxtb	r1, r3
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <secondScreen+0x150>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800209a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002150 <secondScreen+0x130>
 800209e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a6:	edc7 7a00 	vstr	s15, [r7]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2302      	movs	r3, #2
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ba:	482a      	ldr	r0, [pc, #168]	; (8002164 <secondScreen+0x144>)
 80020bc:	f002 fd3e 	bl	8004b3c <ILI9341_Draw_Text>
 80020c0:	e038      	b.n	8002134 <secondScreen+0x114>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80020c2:	492c      	ldr	r1, [pc, #176]	; (8002174 <secondScreen+0x154>)
 80020c4:	4827      	ldr	r0, [pc, #156]	; (8002164 <secondScreen+0x144>)
 80020c6:	f008 fe8d 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <secondScreen+0x148>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020d6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002148 <secondScreen+0x128>
 80020da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <secondScreen+0x14c>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020ee:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80020f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020fa:	edc7 7a00 	vstr	s15, [r7]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2d9      	uxtb	r1, r3
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <secondScreen+0x150>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800210e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002150 <secondScreen+0x130>
 8002112:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002116:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800211a:	edc7 7a00 	vstr	s15, [r7]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	2300      	movs	r3, #0
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2302      	movs	r3, #2
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <secondScreen+0x144>)
 8002130:	f002 fd04 	bl	8004b3c <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <secondScreen+0x13c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <secondScreen+0x138>)
 800213a:	6013      	str	r3, [r2, #0]
	}
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	f3af 8000 	nop.w
 8002148:	cccccccd 	.word	0xcccccccd
 800214c:	3feccccc 	.word	0x3feccccc
 8002150:	ae147ae1 	.word	0xae147ae1
 8002154:	3fdae147 	.word	0x3fdae147
 8002158:	20000038 	.word	0x20000038
 800215c:	2000002c 	.word	0x2000002c
 8002160:	0800d1e8 	.word	0x0800d1e8
 8002164:	20000410 	.word	0x20000410
 8002168:	20000046 	.word	0x20000046
 800216c:	20000048 	.word	0x20000048
 8002170:	2000004a 	.word	0x2000004a
 8002174:	0800d1f0 	.word	0x0800d1f0

08002178 <displayClockScreen>:

//Display Clock Screen
void displayClockScreen(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

	if (halfsecondState == false){ // colon behaviour
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <displayClockScreen+0x3c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <displayClockScreen+0x1a>
		colonScreen(true);
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff fe6c 	bl	8001e68 <colonScreen>
 8002190:	e002      	b.n	8002198 <displayClockScreen+0x20>
	}
	else{
		colonScreen(false);
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff fe68 	bl	8001e68 <colonScreen>
	}

	secondScreen(true, false);
 8002198:	2100      	movs	r1, #0
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff40 	bl	8002020 <secondScreen>
	minuteScreen(true, false);
 80021a0:	2100      	movs	r1, #0
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fec4 	bl	8001f30 <minuteScreen>
	hourScreen(true, false);
 80021a8:	2100      	movs	r1, #0
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fde4 	bl	8001d78 <hourScreen>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000044 	.word	0x20000044

080021b8 <staticClockScreen>:

void staticClockScreen(){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	colonScreen(true);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff fe53 	bl	8001e68 <colonScreen>
	hourScreen(true, false);
 80021c2:	2100      	movs	r1, #0
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff fdd7 	bl	8001d78 <hourScreen>
	minuteScreen(true, false);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff feaf 	bl	8001f30 <minuteScreen>
	secondScreen(true, false);
 80021d2:	2100      	movs	r1, #0
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff ff23 	bl	8002020 <secondScreen>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <editHourScreen>:

//Edit Clock Screen
void editHourScreen()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	displayDateScreen(); // Init first
 80021e4:	f7ff fc34 	bl	8001a50 <displayDateScreen>
	colonScreen(true);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7ff fe3d 	bl	8001e68 <colonScreen>
	minuteScreen(true, false);
 80021ee:	2100      	movs	r1, #0
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7ff fe9d 	bl	8001f30 <minuteScreen>
	secondScreen(true, false);
 80021f6:	2100      	movs	r1, #0
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7ff ff11 	bl	8002020 <secondScreen>

	if (halfsecondState == false){ // hour
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <editHourScreen+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <editHourScreen+0x36>
		hourScreen(false, true);
 800220c:	2101      	movs	r1, #1
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff fdb2 	bl	8001d78 <hourScreen>
	}
	else{
		hourScreen(true, true);
	}
}
 8002214:	e003      	b.n	800221e <editHourScreen+0x3e>
		hourScreen(true, true);
 8002216:	2101      	movs	r1, #1
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff fdad 	bl	8001d78 <hourScreen>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000044 	.word	0x20000044

08002228 <editMinuteScreen>:
void editMinuteScreen(){
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

	colonScreen(true);
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff fe1b 	bl	8001e68 <colonScreen>
	hourScreen(true, false);
 8002232:	2100      	movs	r1, #0
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff fd9f 	bl	8001d78 <hourScreen>
	secondScreen(true, false);
 800223a:	2100      	movs	r1, #0
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff feef 	bl	8002020 <secondScreen>

	if (halfsecondState == false){ //minute
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <editMinuteScreen+0x40>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f083 0301 	eor.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <editMinuteScreen+0x32>
		minuteScreen(false, true);
 8002250:	2101      	movs	r1, #1
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff fe6c 	bl	8001f30 <minuteScreen>
	}
	else{
		minuteScreen(true, true);
	}
}
 8002258:	e003      	b.n	8002262 <editMinuteScreen+0x3a>
		minuteScreen(true, true);
 800225a:	2101      	movs	r1, #1
 800225c:	2001      	movs	r0, #1
 800225e:	f7ff fe67 	bl	8001f30 <minuteScreen>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000044 	.word	0x20000044

0800226c <editSecondScreen>:
void editSecondScreen(){
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fdf9 	bl	8001e68 <colonScreen>
	hourScreen(true, false);
 8002276:	2100      	movs	r1, #0
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fd7d 	bl	8001d78 <hourScreen>
	minuteScreen(true, false);
 800227e:	2100      	movs	r1, #0
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff fe55 	bl	8001f30 <minuteScreen>

	if (halfsecondState == false){ //second
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <editSecondScreen+0x40>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f083 0301 	eor.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <editSecondScreen+0x32>
		secondScreen(false, true);
 8002294:	2101      	movs	r1, #1
 8002296:	2000      	movs	r0, #0
 8002298:	f7ff fec2 	bl	8002020 <secondScreen>
	}
	else{
		secondScreen(true, true);
	}
}
 800229c:	e003      	b.n	80022a6 <editSecondScreen+0x3a>
		secondScreen(true, true);
 800229e:	2101      	movs	r1, #1
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff febd 	bl	8002020 <secondScreen>
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000044 	.word	0x20000044

080022b0 <editDayScreen>:

//Edit Date Clock Screen
void editDayScreen()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	dateScreen(true, false);
 80022b4:	2100      	movs	r1, #0
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7ff fa1e 	bl	80016f8 <dateScreen>
	monthScreen(true, false);
 80022bc:	2100      	movs	r1, #0
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff faa2 	bl	8001808 <monthScreen>
	yearScreen(true, false);
 80022c4:	2100      	movs	r1, #0
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff fb32 	bl	8001930 <yearScreen>

	if (halfsecondState == false){ // day
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <editDayScreen+0x40>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <editDayScreen+0x34>
		dayScreen(false, true);
 80022da:	2101      	movs	r1, #1
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff f98b 	bl	80015f8 <dayScreen>
	}
	else{
		dayScreen(true, true);
	}
}
 80022e2:	e003      	b.n	80022ec <editDayScreen+0x3c>
		dayScreen(true, true);
 80022e4:	2101      	movs	r1, #1
 80022e6:	2001      	movs	r0, #1
 80022e8:	f7ff f986 	bl	80015f8 <dayScreen>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000044 	.word	0x20000044

080022f4 <editDateScreen>:
void editDateScreen()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 80022f8:	2100      	movs	r1, #0
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff f97c 	bl	80015f8 <dayScreen>
	monthScreen(true, false);
 8002300:	2100      	movs	r1, #0
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff fa80 	bl	8001808 <monthScreen>
	yearScreen(true, false);
 8002308:	2100      	movs	r1, #0
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fb10 	bl	8001930 <yearScreen>

	if (halfsecondState == false){ // date
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <editDateScreen+0x40>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <editDateScreen+0x34>
		dateScreen(false, true);
 800231e:	2101      	movs	r1, #1
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff f9e9 	bl	80016f8 <dateScreen>
	}
	else{
		dateScreen(true, true);
	}
}
 8002326:	e003      	b.n	8002330 <editDateScreen+0x3c>
		dateScreen(true, true);
 8002328:	2101      	movs	r1, #1
 800232a:	2001      	movs	r0, #1
 800232c:	f7ff f9e4 	bl	80016f8 <dateScreen>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000044 	.word	0x20000044

08002338 <editMonthScreen>:
void editMonthScreen()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 800233c:	2100      	movs	r1, #0
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff f95a 	bl	80015f8 <dayScreen>
	dateScreen(true, false);
 8002344:	2100      	movs	r1, #0
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff f9d6 	bl	80016f8 <dateScreen>
	yearScreen(true, false);
 800234c:	2100      	movs	r1, #0
 800234e:	2001      	movs	r0, #1
 8002350:	f7ff faee 	bl	8001930 <yearScreen>

	if (halfsecondState == false){ // month
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <editMonthScreen+0x40>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <editMonthScreen+0x34>
		monthScreen(false, true);
 8002362:	2101      	movs	r1, #1
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff fa4f 	bl	8001808 <monthScreen>
	}
	else{
		monthScreen(true, true);
	}
}
 800236a:	e003      	b.n	8002374 <editMonthScreen+0x3c>
		monthScreen(true, true);
 800236c:	2101      	movs	r1, #1
 800236e:	2001      	movs	r0, #1
 8002370:	f7ff fa4a 	bl	8001808 <monthScreen>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000044 	.word	0x20000044

0800237c <editYearScreen>:
void editYearScreen()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	staticClockScreen(); // init Clock first in editing mode
 8002380:	f7ff ff1a 	bl	80021b8 <staticClockScreen>
	dayScreen(true, false);
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f7ff f936 	bl	80015f8 <dayScreen>
	dateScreen(true, false);
 800238c:	2100      	movs	r1, #0
 800238e:	2001      	movs	r0, #1
 8002390:	f7ff f9b2 	bl	80016f8 <dateScreen>
	monthScreen(true, false);
 8002394:	2100      	movs	r1, #0
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff fa36 	bl	8001808 <monthScreen>

	if (halfsecondState == false){ // day
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <editYearScreen+0x44>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <editYearScreen+0x38>
		yearScreen(false, true);
 80023aa:	2101      	movs	r1, #1
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fabf 	bl	8001930 <yearScreen>
	}
	else{
		yearScreen(true, true);
	}
}
 80023b2:	e003      	b.n	80023bc <editYearScreen+0x40>
		yearScreen(true, true);
 80023b4:	2101      	movs	r1, #1
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff faba 	bl	8001930 <yearScreen>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000044 	.word	0x20000044
 80023c4:	00000000 	.word	0x00000000

080023c8 <bottomBarScreen>:

//Bottom Screen
void bottomBarScreen(){
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomHeight = maxHeight * 0.87;
 80023d2:	4bb3      	ldr	r3, [pc, #716]	; (80026a0 <bottomBarScreen+0x2d8>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023de:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002688 <bottomBarScreen+0x2c0>
 80023e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80023ee:	793b      	ldrb	r3, [r7, #4]
 80023f0:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 80023f2:	2333      	movs	r3, #51	; 0x33
 80023f4:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth * 0.25 + 51;
 80023f6:	4bab      	ldr	r3, [pc, #684]	; (80026a4 <bottomBarScreen+0x2dc>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002402:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800240a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002690 <bottomBarScreen+0x2c8>
 800240e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002412:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002416:	edc7 7a01 	vstr	s15, [r7, #4]
 800241a:	793b      	ldrb	r3, [r7, #4]
 800241c:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth * 0.50 + 51;
 800241e:	4ba1      	ldr	r3, [pc, #644]	; (80026a4 <bottomBarScreen+0x2dc>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800242a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800242e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002432:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002690 <bottomBarScreen+0x2c8>
 8002436:	ee37 7b06 	vadd.f64	d7, d7, d6
 800243a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800243e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002442:	793b      	ldrb	r3, [r7, #4]
 8002444:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002446:	4b97      	ldr	r3, [pc, #604]	; (80026a4 <bottomBarScreen+0x2dc>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002452:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800245a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002690 <bottomBarScreen+0x2c8>
 800245e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002462:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002466:	edc7 7a01 	vstr	s15, [r7, #4]
 800246a:	793b      	ldrb	r3, [r7, #4]
 800246c:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 800246e:	2337      	movs	r3, #55	; 0x37
 8002470:	727b      	strb	r3, [r7, #9]

	//Rectangle Background Color
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1 + bottomWidth, maxHeight, RED);
 8002472:	7b7b      	ldrb	r3, [r7, #13]
 8002474:	b298      	uxth	r0, r3
 8002476:	7bbb      	ldrb	r3, [r7, #14]
 8002478:	b299      	uxth	r1, r3
 800247a:	7b7b      	ldrb	r3, [r7, #13]
 800247c:	b29a      	uxth	r2, r3
 800247e:	7a7b      	ldrb	r3, [r7, #9]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4413      	add	r3, r2
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b86      	ldr	r3, [pc, #536]	; (80026a0 <bottomBarScreen+0x2d8>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800248e:	9400      	str	r4, [sp, #0]
 8002490:	f002 fa5a 	bl	8004948 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2 + bottomWidth, maxHeight, YELLOW);
 8002494:	7b3b      	ldrb	r3, [r7, #12]
 8002496:	b298      	uxth	r0, r3
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	b299      	uxth	r1, r3
 800249c:	7b3b      	ldrb	r3, [r7, #12]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	7a7b      	ldrb	r3, [r7, #9]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b7d      	ldr	r3, [pc, #500]	; (80026a0 <bottomBarScreen+0x2d8>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 80024b0:	9400      	str	r4, [sp, #0]
 80024b2:	f002 fa49 	bl	8004948 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3 + bottomWidth, maxHeight, CYAN);
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	b298      	uxth	r0, r3
 80024ba:	7bbb      	ldrb	r3, [r7, #14]
 80024bc:	b299      	uxth	r1, r3
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	7a7b      	ldrb	r3, [r7, #9]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <bottomBarScreen+0x2d8>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	f240 74ff 	movw	r4, #2047	; 0x7ff
 80024d2:	9400      	str	r4, [sp, #0]
 80024d4:	f002 fa38 	bl	8004948 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4 + bottomWidth, maxHeight, GREEN);
 80024d8:	7abb      	ldrb	r3, [r7, #10]
 80024da:	b298      	uxth	r0, r3
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	b299      	uxth	r1, r3
 80024e0:	7abb      	ldrb	r3, [r7, #10]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	7a7b      	ldrb	r3, [r7, #9]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <bottomBarScreen+0x2d8>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80024f4:	9400      	str	r4, [sp, #0]
 80024f6:	f002 fa27 	bl	8004948 <ILI9341_Draw_Filled_Rectangle_Coord>

	//Text Layout
	sprintf(Temp_Buffer_text, "MOD");
 80024fa:	496b      	ldr	r1, [pc, #428]	; (80026a8 <bottomBarScreen+0x2e0>)
 80024fc:	486b      	ldr	r0, [pc, #428]	; (80026ac <bottomBarScreen+0x2e4>)
 80024fe:	f008 fc71 	bl	800ade4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.9, BLACK, size, RED);
 8002502:	4b6b      	ldr	r3, [pc, #428]	; (80026b0 <bottomBarScreen+0x2e8>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b2d9      	uxtb	r1, r3
 8002508:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <bottomBarScreen+0x2d8>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002514:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002698 <bottomBarScreen+0x2d0>
 8002518:	ee27 7b06 	vmul.f64	d7, d7, d6
 800251c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002520:	edc7 7a01 	vstr	s15, [r7, #4]
 8002524:	793b      	ldrb	r3, [r7, #4]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002530:	9001      	str	r0, [sp, #4]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	485d      	ldr	r0, [pc, #372]	; (80026ac <bottomBarScreen+0x2e4>)
 8002538:	f002 fb00 	bl	8004b3c <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "ADJ");
 800253c:	495d      	ldr	r1, [pc, #372]	; (80026b4 <bottomBarScreen+0x2ec>)
 800253e:	485b      	ldr	r0, [pc, #364]	; (80026ac <bottomBarScreen+0x2e4>)
 8002540:	f008 fc50 	bl	800ade4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.25 + offsetWidth, maxHeight * 0.9, BLACK, size, YELLOW);
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <bottomBarScreen+0x2dc>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002550:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002554:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002558:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <bottomBarScreen+0x2e8>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002564:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002568:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800256c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002570:	793b      	ldrb	r3, [r7, #4]
 8002572:	b2d9      	uxtb	r1, r3
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <bottomBarScreen+0x2d8>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002580:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002698 <bottomBarScreen+0x2d0>
 8002584:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002588:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800258c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002590:	793b      	ldrb	r3, [r7, #4]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800259c:	9001      	str	r0, [sp, #4]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2300      	movs	r3, #0
 80025a2:	4842      	ldr	r0, [pc, #264]	; (80026ac <bottomBarScreen+0x2e4>)
 80025a4:	f002 faca 	bl	8004b3c <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "FWD");
 80025a8:	4943      	ldr	r1, [pc, #268]	; (80026b8 <bottomBarScreen+0x2f0>)
 80025aa:	4840      	ldr	r0, [pc, #256]	; (80026ac <bottomBarScreen+0x2e4>)
 80025ac:	f008 fc1a 	bl	800ade4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.5 + offsetWidth, maxHeight * 0.9, BLACK, size, CYAN);
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <bottomBarScreen+0x2dc>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80025c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <bottomBarScreen+0x2e8>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80025dc:	793b      	ldrb	r3, [r7, #4]
 80025de:	b2d9      	uxtb	r1, r3
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <bottomBarScreen+0x2d8>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025ec:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002698 <bottomBarScreen+0x2d0>
 80025f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80025fc:	793b      	ldrb	r3, [r7, #4]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002608:	9001      	str	r0, [sp, #4]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2300      	movs	r3, #0
 800260e:	4827      	ldr	r0, [pc, #156]	; (80026ac <bottomBarScreen+0x2e4>)
 8002610:	f002 fa94 	bl	8004b3c <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "BWD");
 8002614:	4929      	ldr	r1, [pc, #164]	; (80026bc <bottomBarScreen+0x2f4>)
 8002616:	4825      	ldr	r0, [pc, #148]	; (80026ac <bottomBarScreen+0x2e4>)
 8002618:	f008 fbe4 	bl	800ade4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.75 + offsetWidth, maxHeight * 0.9, BLACK, size, GREEN);
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <bottomBarScreen+0x2dc>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002628:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 800262c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <bottomBarScreen+0x2e8>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800263c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002640:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002644:	edc7 7a01 	vstr	s15, [r7, #4]
 8002648:	793b      	ldrb	r3, [r7, #4]
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <bottomBarScreen+0x2d8>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002658:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002698 <bottomBarScreen+0x2d0>
 800265c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002660:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002664:	edc7 7a01 	vstr	s15, [r7, #4]
 8002668:	793b      	ldrb	r3, [r7, #4]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002674:	9001      	str	r0, [sp, #4]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2300      	movs	r3, #0
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <bottomBarScreen+0x2e4>)
 800267c:	f002 fa5e 	bl	8004b3c <ILI9341_Draw_Text>
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}
 8002688:	3d70a3d7 	.word	0x3d70a3d7
 800268c:	3febd70a 	.word	0x3febd70a
 8002690:	00000000 	.word	0x00000000
 8002694:	40498000 	.word	0x40498000
 8002698:	cccccccd 	.word	0xcccccccd
 800269c:	3feccccc 	.word	0x3feccccc
 80026a0:	2000004a 	.word	0x2000004a
 80026a4:	20000046 	.word	0x20000046
 80026a8:	0800d20c 	.word	0x0800d20c
 80026ac:	20000410 	.word	0x20000410
 80026b0:	20000048 	.word	0x20000048
 80026b4:	0800d210 	.word	0x0800d210
 80026b8:	0800d214 	.word	0x0800d214
 80026bc:	0800d218 	.word	0x0800d218

080026c0 <bottomBarScreenUpdate>:
void bottomBarScreenUpdate(){
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 80026c6:	2302      	movs	r3, #2
 80026c8:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 80026ca:	2333      	movs	r3, #51	; 0x33
 80026cc:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomHeight = maxHeight * 0.87;
 80026ce:	4bc6      	ldr	r3, [pc, #792]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026da:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80029c0 <bottomBarScreenUpdate+0x300>
 80026de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80026ea:	793b      	ldrb	r3, [r7, #4]
 80026ec:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 80026ee:	4bbf      	ldr	r3, [pc, #764]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026fa:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 80026fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002702:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 80029c8 <bottomBarScreenUpdate+0x308>
 8002706:	ee37 7b06 	vadd.f64	d7, d7, d6
 800270a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800270e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002712:	793b      	ldrb	r3, [r7, #4]
 8002714:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth = 55;
 8002716:	2337      	movs	r3, #55	; 0x37
 8002718:	72fb      	strb	r3, [r7, #11]

	//Update Temperature
	if(prevTemp != temp){
 800271a:	4bb5      	ldr	r3, [pc, #724]	; (80029f0 <bottomBarScreenUpdate+0x330>)
 800271c:	ed93 7a00 	vldr	s14, [r3]
 8002720:	4bb4      	ldr	r3, [pc, #720]	; (80029f4 <bottomBarScreenUpdate+0x334>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	eeb4 7a67 	vcmp.f32	s14, s15
 800272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272e:	d059      	beq.n	80027e4 <bottomBarScreenUpdate+0x124>
		sprintf(Temp_Buffer_text, "%0.1f 'C", temp);
 8002730:	4bb0      	ldr	r3, [pc, #704]	; (80029f4 <bottomBarScreenUpdate+0x334>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800273a:	ec53 2b17 	vmov	r2, r3, d7
 800273e:	49ae      	ldr	r1, [pc, #696]	; (80029f8 <bottomBarScreenUpdate+0x338>)
 8002740:	48ae      	ldr	r0, [pc, #696]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 8002742:	f008 fb4f 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002746:	4ba9      	ldr	r3, [pc, #676]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002752:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80029d0 <bottomBarScreenUpdate+0x310>
 8002756:	ee27 6b06 	vmul.f64	d6, d7, d6
 800275a:	4ba9      	ldr	r3, [pc, #676]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002766:	ee36 7b07 	vadd.f64	d7, d6, d7
 800276a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800276e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002772:	793b      	ldrb	r3, [r7, #4]
 8002774:	b2d9      	uxtb	r1, r3
 8002776:	4b9c      	ldr	r3, [pc, #624]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002782:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80029d8 <bottomBarScreenUpdate+0x318>
 8002786:	ee27 7b06 	vmul.f64	d7, d7, d6
 800278a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800278e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002792:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002796:	edc7 7a01 	vstr	s15, [r7, #4]
 800279a:	793b      	ldrb	r3, [r7, #4]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2000      	movs	r0, #0
 80027a4:	9001      	str	r0, [sp, #4]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ac:	4893      	ldr	r0, [pc, #588]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 80027ae:	f002 f9c5 	bl	8004b3c <ILI9341_Draw_Text>
		prevTemp = temp;
 80027b2:	4b90      	ldr	r3, [pc, #576]	; (80029f4 <bottomBarScreenUpdate+0x334>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a8e      	ldr	r2, [pc, #568]	; (80029f0 <bottomBarScreenUpdate+0x330>)
 80027b8:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 80027ba:	7bbb      	ldrb	r3, [r7, #14]
 80027bc:	b298      	uxth	r0, r3
 80027be:	7b7b      	ldrb	r3, [r7, #13]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b37      	subs	r3, #55	; 0x37
 80027c4:	b299      	uxth	r1, r3
 80027c6:	7b3b      	ldrb	r3, [r7, #12]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	3b3e      	subs	r3, #62	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80027de:	9400      	str	r4, [sp, #0]
 80027e0:	f002 f831 	bl	8004846 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update Humidity
	if(prevHumid != humid){
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <bottomBarScreenUpdate+0x344>)
 80027e6:	ed93 7a00 	vldr	s14, [r3]
 80027ea:	4b87      	ldr	r3, [pc, #540]	; (8002a08 <bottomBarScreenUpdate+0x348>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d059      	beq.n	80028ae <bottomBarScreenUpdate+0x1ee>
		sprintf(Temp_Buffer_text, "%0.1f %%", humid);
 80027fa:	4b83      	ldr	r3, [pc, #524]	; (8002a08 <bottomBarScreenUpdate+0x348>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	ec53 2b17 	vmov	r2, r3, d7
 8002808:	4980      	ldr	r1, [pc, #512]	; (8002a0c <bottomBarScreenUpdate+0x34c>)
 800280a:	487c      	ldr	r0, [pc, #496]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 800280c:	f008 faea 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.55 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002810:	4b76      	ldr	r3, [pc, #472]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800281c:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80029e0 <bottomBarScreenUpdate+0x320>
 8002820:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002824:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002830:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002834:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002838:	edc7 7a01 	vstr	s15, [r7, #4]
 800283c:	793b      	ldrb	r3, [r7, #4]
 800283e:	b2d9      	uxtb	r1, r3
 8002840:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800284c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80029d8 <bottomBarScreenUpdate+0x318>
 8002850:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002854:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002858:	ee37 7b46 	vsub.f64	d7, d7, d6
 800285c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002860:	edc7 7a01 	vstr	s15, [r7, #4]
 8002864:	793b      	ldrb	r3, [r7, #4]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	b29b      	uxth	r3, r3
 800286c:	2000      	movs	r0, #0
 800286e:	9001      	str	r0, [sp, #4]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002876:	4861      	ldr	r0, [pc, #388]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 8002878:	f002 f960 	bl	8004b3c <ILI9341_Draw_Text>
		prevHumid = humid;
 800287c:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <bottomBarScreenUpdate+0x348>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a60      	ldr	r2, [pc, #384]	; (8002a04 <bottomBarScreenUpdate+0x344>)
 8002882:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	b298      	uxth	r0, r3
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b37      	subs	r3, #55	; 0x37
 800288e:	b299      	uxth	r1, r3
 8002890:	7b3b      	ldrb	r3, [r7, #12]
 8002892:	b29a      	uxth	r2, r3
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4413      	add	r3, r2
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	3b3e      	subs	r3, #62	; 0x3e
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028a8:	9400      	str	r4, [sp, #0]
 80028aa:	f001 ffcc 	bl	8004846 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update PM2.5
	if(prevPmTwoPointFive != pmTwoPointFive){ // update this value please
 80028ae:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <bottomBarScreenUpdate+0x350>)
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <bottomBarScreenUpdate+0x354>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	f000 80c6 	beq.w	8002a52 <bottomBarScreenUpdate+0x392>
		sprintf(Temp_Buffer_text, "      %03d ug/m^3", (int)pmTwoPointFive);
 80028c6:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <bottomBarScreenUpdate+0x354>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d0:	ee17 2a90 	vmov	r2, s15
 80028d4:	4950      	ldr	r1, [pc, #320]	; (8002a18 <bottomBarScreenUpdate+0x358>)
 80028d6:	4849      	ldr	r0, [pc, #292]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 80028d8:	f008 fa84 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK); // Change color
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028e8:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80029d0 <bottomBarScreenUpdate+0x310>
 80028ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80028f0:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002900:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002904:	edc7 7a01 	vstr	s15, [r7, #4]
 8002908:	793b      	ldrb	r3, [r7, #4]
 800290a:	b2d9      	uxtb	r1, r3
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002918:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80029d8 <bottomBarScreenUpdate+0x318>
 800291c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002920:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002924:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002928:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800292c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002930:	793b      	ldrb	r3, [r7, #4]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	b29b      	uxth	r3, r3
 8002938:	2000      	movs	r0, #0
 800293a:	9001      	str	r0, [sp, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002942:	482e      	ldr	r0, [pc, #184]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 8002944:	f002 f8fa 	bl	8004b3c <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, "PM2.5");
 8002948:	4934      	ldr	r1, [pc, #208]	; (8002a1c <bottomBarScreenUpdate+0x35c>)
 800294a:	482c      	ldr	r0, [pc, #176]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 800294c:	f008 fa4a 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK);
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800295c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80029d0 <bottomBarScreenUpdate+0x310>
 8002960:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002964:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002970:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002974:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002978:	edc7 7a01 	vstr	s15, [r7, #4]
 800297c:	793b      	ldrb	r3, [r7, #4]
 800297e:	b2d9      	uxtb	r1, r3
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800298c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80029d8 <bottomBarScreenUpdate+0x318>
 8002990:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002994:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002998:	ee37 7b06 	vadd.f64	d7, d7, d6
 800299c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80029a4:	793b      	ldrb	r3, [r7, #4]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2000      	movs	r0, #0
 80029ae:	9001      	str	r0, [sp, #4]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b6:	4811      	ldr	r0, [pc, #68]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 80029b8:	f002 f8c0 	bl	8004b3c <ILI9341_Draw_Text>
 80029bc:	e030      	b.n	8002a20 <bottomBarScreenUpdate+0x360>
 80029be:	bf00      	nop
 80029c0:	3d70a3d7 	.word	0x3d70a3d7
 80029c4:	3febd70a 	.word	0x3febd70a
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40498000 	.word	0x40498000
	...
 80029d8:	66666666 	.word	0x66666666
 80029dc:	3fe66666 	.word	0x3fe66666
 80029e0:	9999999a 	.word	0x9999999a
 80029e4:	3fe19999 	.word	0x3fe19999
 80029e8:	2000004a 	.word	0x2000004a
 80029ec:	20000046 	.word	0x20000046
 80029f0:	20000020 	.word	0x20000020
 80029f4:	20000014 	.word	0x20000014
 80029f8:	0800d21c 	.word	0x0800d21c
 80029fc:	20000410 	.word	0x20000410
 8002a00:	20000048 	.word	0x20000048
 8002a04:	20000024 	.word	0x20000024
 8002a08:	20000018 	.word	0x20000018
 8002a0c:	0800d228 	.word	0x0800d228
 8002a10:	20000028 	.word	0x20000028
 8002a14:	2000001c 	.word	0x2000001c
 8002a18:	0800d234 	.word	0x0800d234
 8002a1c:	0800d248 	.word	0x0800d248

		prevPmTwoPointFive = pmTwoPointFive;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <bottomBarScreenUpdate+0x39c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <bottomBarScreenUpdate+0x3a0>)
 8002a26:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45+18, bottomWidth4 + bottomWidth, maxHeight-52+18, WHITE);
 8002a28:	7bbb      	ldrb	r3, [r7, #14]
 8002a2a:	b298      	uxth	r0, r3
 8002a2c:	7b7b      	ldrb	r3, [r7, #13]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b1b      	subs	r3, #27
 8002a32:	b299      	uxth	r1, r3
 8002a34:	7b3b      	ldrb	r3, [r7, #12]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <bottomBarScreenUpdate+0x3a4>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	3b22      	subs	r3, #34	; 0x22
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002a4c:	9400      	str	r4, [sp, #0]
 8002a4e:	f001 fefa 	bl	8004846 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000001c 	.word	0x2000001c
 8002a60:	20000028 	.word	0x20000028
 8002a64:	2000004a 	.word	0x2000004a

08002a68 <buzzerSound>:

//Buzzer Sound
void buzzerSound(){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = (1000 - 1) * 0.5;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <buzzerSound+0x28>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a76:	2100      	movs	r1, #0
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <buzzerSound+0x28>)
 8002a7a:	f005 feb7 	bl	80087ec <HAL_TIM_PWM_Start>
	HAL_Delay(70);
 8002a7e:	2046      	movs	r0, #70	; 0x46
 8002a80:	f002 fdb2 	bl	80055e8 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002a84:	2100      	movs	r1, #0
 8002a86:	4802      	ldr	r0, [pc, #8]	; (8002a90 <buzzerSound+0x28>)
 8002a88:	f005 ffaa 	bl	80089e0 <HAL_TIM_PWM_Stop>
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	200004e8 	.word	0x200004e8

08002a94 <notifyPm>:

void notifyPm(){
 8002a94:	b5b0      	push	{r4, r5, r7, lr}
 8002a96:	ed2d 8b06 	vpush	{d8-d10}
 8002a9a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8002a9e:	af14      	add	r7, sp, #80	; 0x50
	float *respondRead;
	respondRead = read_sensirion();
 8002aa0:	f7fe f9d0 	bl	8000e44 <read_sensirion>
 8002aa4:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002aa8:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <notifyPm+0x1e0>)
 8002aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <notifyPm+0x1e4>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	1a84      	subs	r4, r0, r2
 8002ab6:	eb61 0503 	sbc.w	r5, r1, r3
 8002aba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	42ab      	cmp	r3, r5
 8002ac4:	bf08      	it	eq
 8002ac6:	42a2      	cmpeq	r2, r4
 8002ac8:	f080 80cd 	bcs.w	8002c66 <notifyPm+0x1d2>
 8002acc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	da00      	bge.n	8002ae2 <notifyPm+0x4e>

		pmPrevMillisecondHAL = millisecondHAL;
	}


}
 8002ae0:	e0c1      	b.n	8002c66 <notifyPm+0x1d2>
	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002ae2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002c7c <notifyPm+0x1e8>
 8002af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	d900      	bls.n	8002afc <notifyPm+0x68>
}
 8002afa:	e0b4      	b.n	8002c66 <notifyPm+0x1d2>
		if(respondRead[1]>=250){
 8002afc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b00:	3304      	adds	r3, #4
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002c80 <notifyPm+0x1ec>
 8002b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	db03      	blt.n	8002b1c <notifyPm+0x88>
			sent_string_to_mcu("HAZ");
 8002b14:	485b      	ldr	r0, [pc, #364]	; (8002c84 <notifyPm+0x1f0>)
 8002b16:	f7fe fa87 	bl	8001028 <sent_string_to_mcu>
 8002b1a:	e01e      	b.n	8002b5a <notifyPm+0xc6>
		else if(respondRead[1]>=150){
 8002b1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b20:	3304      	adds	r3, #4
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002c88 <notifyPm+0x1f4>
 8002b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	db03      	blt.n	8002b3c <notifyPm+0xa8>
			sent_string_to_mcu("VUH");
 8002b34:	4855      	ldr	r0, [pc, #340]	; (8002c8c <notifyPm+0x1f8>)
 8002b36:	f7fe fa77 	bl	8001028 <sent_string_to_mcu>
 8002b3a:	e00e      	b.n	8002b5a <notifyPm+0xc6>
		else if(respondRead[1]>=55){
 8002b3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b40:	3304      	adds	r3, #4
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002c90 <notifyPm+0x1fc>
 8002b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	db02      	blt.n	8002b5a <notifyPm+0xc6>
			sent_string_to_mcu("UHT");
 8002b54:	484f      	ldr	r0, [pc, #316]	; (8002c94 <notifyPm+0x200>)
 8002b56:	f7fe fa67 	bl	8001028 <sent_string_to_mcu>
		if(respondRead[1]>=55){
 8002b5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b5e:	3304      	adds	r3, #4
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002c90 <notifyPm+0x1fc>
 8002b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	db70      	blt.n	8002c54 <notifyPm+0x1c0>
			println("Danger Air");
 8002b72:	4849      	ldr	r0, [pc, #292]	; (8002c98 <notifyPm+0x204>)
 8002b74:	f7fe f8fc 	bl	8000d70 <println>
			println("Sending");
 8002b78:	4848      	ldr	r0, [pc, #288]	; (8002c9c <notifyPm+0x208>)
 8002b7a:	f7fe f8f9 	bl	8000d70 <println>
			sprintf(stringBuffer, "EXC %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f" , respondRead[0], respondRead[1], respondRead[2], respondRead[3], respondRead[4], respondRead[5], respondRead[6], respondRead[7], respondRead[8], respondRead[9], respondRead[10]);
 8002b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002b8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b8e:	3304      	adds	r3, #4
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	edd3 6a00 	vldr	s13, [r3]
 8002ba2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002ba6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002baa:	330c      	adds	r3, #12
 8002bac:	edd3 5a00 	vldr	s11, [r3]
 8002bb0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002bb4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bb8:	3310      	adds	r3, #16
 8002bba:	edd3 4a00 	vldr	s9, [r3]
 8002bbe:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8002bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	edd3 3a00 	vldr	s7, [r3]
 8002bcc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002bd0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	edd3 2a00 	vldr	s5, [r3]
 8002bda:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8002bde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002be2:	331c      	adds	r3, #28
 8002be4:	edd3 1a00 	vldr	s3, [r3]
 8002be8:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8002bec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	edd3 0a00 	vldr	s1, [r3]
 8002bf6:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8002bfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	ed93 8a00 	vldr	s16, [r3]
 8002c04:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8002c08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c0c:	3328      	adds	r3, #40	; 0x28
 8002c0e:	ed93 9a00 	vldr	s18, [r3]
 8002c12:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002c16:	4638      	mov	r0, r7
 8002c18:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 8002c1c:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 8002c20:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 8002c24:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8002c28:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8002c2c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002c30:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002c34:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002c38:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002c3c:	ed8d 7b00 	vstr	d7, [sp]
 8002c40:	ec53 2b1a 	vmov	r2, r3, d10
 8002c44:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <notifyPm+0x20c>)
 8002c46:	f008 f8cd 	bl	800ade4 <siprintf>
			sent_string_to_mcu(stringBuffer);
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f9eb 	bl	8001028 <sent_string_to_mcu>
 8002c52:	e002      	b.n	8002c5a <notifyPm+0x1c6>
			println("Normal Air");
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <notifyPm+0x210>)
 8002c56:	f7fe f88b 	bl	8000d70 <println>
		pmPrevMillisecondHAL = millisecondHAL;
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <notifyPm+0x1e0>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	4905      	ldr	r1, [pc, #20]	; (8002c78 <notifyPm+0x1e4>)
 8002c62:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002c66:	bf00      	nop
 8002c68:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	ecbd 8b06 	vpop	{d8-d10}
 8002c72:	bdb0      	pop	{r4, r5, r7, pc}
 8002c74:	200002e0 	.word	0x200002e0
 8002c78:	200002e8 	.word	0x200002e8
 8002c7c:	461c3c00 	.word	0x461c3c00
 8002c80:	437a0000 	.word	0x437a0000
 8002c84:	0800d250 	.word	0x0800d250
 8002c88:	43160000 	.word	0x43160000
 8002c8c:	0800d254 	.word	0x0800d254
 8002c90:	425c0000 	.word	0x425c0000
 8002c94:	0800d258 	.word	0x0800d258
 8002c98:	0800d25c 	.word	0x0800d25c
 8002c9c:	0800d268 	.word	0x0800d268
 8002ca0:	0800d270 	.word	0x0800d270
 8002ca4:	0800d2a8 	.word	0x0800d2a8

08002ca8 <resetPrevStopWatch>:
//State
bool initalStopWatchScreen = false;
bool isStopWatchRunning = false;


void resetPrevStopWatch(){
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	prevStopWatchHour = -1;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <resetPrevStopWatch+0x30>)
 8002cae:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb2:	601a      	str	r2, [r3, #0]
	prevStopWatchMinute = -1;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <resetPrevStopWatch+0x34>)
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cba:	601a      	str	r2, [r3, #0]
	prevStopWatchSecond = -1;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <resetPrevStopWatch+0x38>)
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc2:	601a      	str	r2, [r3, #0]
	prevStopWatchMillisecond = -1;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <resetPrevStopWatch+0x3c>)
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	200000b0 	.word	0x200000b0
 8002cdc:	200000b4 	.word	0x200000b4
 8002ce0:	200000b8 	.word	0x200000b8
 8002ce4:	200000bc 	.word	0x200000bc

08002ce8 <resetStopWatch>:
void resetStopWatch(){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	stopWatchHour = 0;
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <resetStopWatch+0x24>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
	stopWatchMinute = 0;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <resetStopWatch+0x28>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
	stopWatchSecond = 0;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <resetStopWatch+0x2c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
	stopWatchMillisecond = 0;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <resetStopWatch+0x30>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
	resetPrevStopWatch();
 8002d04:	f7ff ffd0 	bl	8002ca8 <resetPrevStopWatch>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200002f0 	.word	0x200002f0
 8002d10:	200002f4 	.word	0x200002f4
 8002d14:	200002f8 	.word	0x200002f8
 8002d18:	200002fc 	.word	0x200002fc
 8002d1c:	00000000 	.word	0x00000000

08002d20 <displayStopWatchScreen>:

void displayStopWatchScreen(){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af02      	add	r7, sp, #8
	if(stopWatchHour < 1){ // Normal StopWatch Mode
 8002d26:	4ba8      	ldr	r3, [pc, #672]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f300 80a8 	bgt.w	8002e80 <displayStopWatchScreen+0x160>
		if(prevStopWatchMinute != stopWatchMinute){
 8002d30:	4ba6      	ldr	r3, [pc, #664]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4ba6      	ldr	r3, [pc, #664]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d02a      	beq.n	8002d92 <displayStopWatchScreen+0x72>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 8002d3c:	4ba4      	ldr	r3, [pc, #656]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	49a4      	ldr	r1, [pc, #656]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002d44:	48a4      	ldr	r0, [pc, #656]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002d46:	f008 f84d 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002d4a:	4ba4      	ldr	r3, [pc, #656]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	4ba3      	ldr	r3, [pc, #652]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d5c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002d60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d64:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002d68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d70:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d74:	793b      	ldrb	r3, [r7, #4]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	2305      	movs	r3, #5
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d84:	4894      	ldr	r0, [pc, #592]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002d86:	f001 fed9 	bl	8004b3c <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 8002d8a:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a8f      	ldr	r2, [pc, #572]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002d90:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchSecond != stopWatchSecond){
 8002d92:	4b94      	ldr	r3, [pc, #592]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b94      	ldr	r3, [pc, #592]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d02c      	beq.n	8002df8 <displayStopWatchScreen+0xd8>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 8002d9e:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	498b      	ldr	r1, [pc, #556]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002da6:	488c      	ldr	r0, [pc, #560]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002da8:	f008 f81c 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002dac:	4b8b      	ldr	r3, [pc, #556]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	3346      	adds	r3, #70	; 0x46
 8002db4:	b2d9      	uxtb	r1, r3
 8002db6:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002dc2:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002dc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dca:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002dce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002dd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002dd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002dda:	793b      	ldrb	r3, [r7, #4]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	2300      	movs	r3, #0
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	2305      	movs	r3, #5
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dea:	487b      	ldr	r0, [pc, #492]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002dec:	f001 fea6 	bl	8004b3c <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8002df0:	4b7d      	ldr	r3, [pc, #500]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7b      	ldr	r2, [pc, #492]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002df6:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchMillisecond != stopWatchMillisecond){
 8002df8:	4b7c      	ldr	r3, [pc, #496]	; (8002fec <displayStopWatchScreen+0x2cc>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b7c      	ldr	r3, [pc, #496]	; (8002ff0 <displayStopWatchScreen+0x2d0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f000 80d9 	beq.w	8002fb8 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)((stopWatchMillisecond/10)%100));
 8002e06:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <displayStopWatchScreen+0x2d0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <displayStopWatchScreen+0x2d4>)
 8002e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e10:	1092      	asrs	r2, r2, #2
 8002e12:	17db      	asrs	r3, r3, #31
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	4a78      	ldr	r2, [pc, #480]	; (8002ff8 <displayStopWatchScreen+0x2d8>)
 8002e18:	fb82 1203 	smull	r1, r2, r2, r3
 8002e1c:	1151      	asrs	r1, r2, #5
 8002e1e:	17da      	asrs	r2, r3, #31
 8002e20:	1a8a      	subs	r2, r1, r2
 8002e22:	2164      	movs	r1, #100	; 0x64
 8002e24:	fb01 f202 	mul.w	r2, r1, r2
 8002e28:	1a9a      	subs	r2, r3, r2
 8002e2a:	496a      	ldr	r1, [pc, #424]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002e2c:	486a      	ldr	r0, [pc, #424]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002e2e:	f007 ffd9 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002e32:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3b74      	subs	r3, #116	; 0x74
 8002e3a:	b2d9      	uxtb	r1, r3
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e48:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e50:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e60:	793b      	ldrb	r3, [r7, #4]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2305      	movs	r3, #5
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e70:	4859      	ldr	r0, [pc, #356]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002e72:	f001 fe63 	bl	8004b3c <ILI9341_Draw_Text>
			prevStopWatchMillisecond = stopWatchMillisecond;
 8002e76:	4b5e      	ldr	r3, [pc, #376]	; (8002ff0 <displayStopWatchScreen+0x2d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <displayStopWatchScreen+0x2cc>)
 8002e7c:	6013      	str	r3, [r2, #0]
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
			prevStopWatchSecond = stopWatchSecond;
		}
	}
}
 8002e7e:	e09b      	b.n	8002fb8 <displayStopWatchScreen+0x298>
	}else if (stopWatchHour >= 1){ // counting more than equal to 1 hour
 8002e80:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f340 8097 	ble.w	8002fb8 <displayStopWatchScreen+0x298>
		if(prevStopWatchHour != stopWatchHour){
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <displayStopWatchScreen+0x2dc>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d02a      	beq.n	8002eec <displayStopWatchScreen+0x1cc>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchHour);
 8002e96:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002e9e:	484e      	ldr	r0, [pc, #312]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002ea0:	f007 ffa0 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b2d9      	uxtb	r1, r3
 8002eaa:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002eb6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002eba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ebe:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002ec2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ec6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002eca:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ece:	793b      	ldrb	r3, [r7, #4]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ede:	483e      	ldr	r0, [pc, #248]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002ee0:	f001 fe2c 	bl	8004b3c <ILI9341_Draw_Text>
			prevStopWatchHour = stopWatchHour;
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a44      	ldr	r2, [pc, #272]	; (8002ffc <displayStopWatchScreen+0x2dc>)
 8002eea:	6013      	str	r3, [r2, #0]
		if(prevStopWatchMinute != stopWatchMinute){
 8002eec:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d02c      	beq.n	8002f52 <displayStopWatchScreen+0x232>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4935      	ldr	r1, [pc, #212]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002f00:	4835      	ldr	r0, [pc, #212]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002f02:	f007 ff6f 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002f06:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3346      	adds	r3, #70	; 0x46
 8002f0e:	b2d9      	uxtb	r1, r3
 8002f10:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f1c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002f20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f24:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002f28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f30:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f34:	793b      	ldrb	r3, [r7, #4]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	2305      	movs	r3, #5
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f44:	4824      	ldr	r0, [pc, #144]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002f46:	f001 fdf9 	bl	8004b3c <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002f50:	6013      	str	r3, [r2, #0]
		if(prevStopWatchSecond != stopWatchSecond){
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d02c      	beq.n	8002fb8 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002f66:	481c      	ldr	r0, [pc, #112]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002f68:	f007 ff3c 	bl	800ade4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3b74      	subs	r3, #116	; 0x74
 8002f74:	b2d9      	uxtb	r1, r3
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f82:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f8a:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002f8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f96:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f9a:	793b      	ldrb	r3, [r7, #4]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002faa:	480b      	ldr	r0, [pc, #44]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002fac:	f001 fdc6 	bl	8004b3c <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	66666666 	.word	0x66666666
 8002fc4:	3fd66666 	.word	0x3fd66666
 8002fc8:	200002f0 	.word	0x200002f0
 8002fcc:	200000b4 	.word	0x200000b4
 8002fd0:	200002f4 	.word	0x200002f4
 8002fd4:	0800d1e8 	.word	0x0800d1e8
 8002fd8:	20000410 	.word	0x20000410
 8002fdc:	20000048 	.word	0x20000048
 8002fe0:	2000004a 	.word	0x2000004a
 8002fe4:	200000b8 	.word	0x200000b8
 8002fe8:	200002f8 	.word	0x200002f8
 8002fec:	200000bc 	.word	0x200000bc
 8002ff0:	200002fc 	.word	0x200002fc
 8002ff4:	66666667 	.word	0x66666667
 8002ff8:	51eb851f 	.word	0x51eb851f
 8002ffc:	200000b0 	.word	0x200000b0

08003000 <stopWatchScreen>:

void stopWatchScreen(){
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af02      	add	r7, sp, #8

	if(initalStopWatchScreen == false){
 8003006:	4b64      	ldr	r3, [pc, #400]	; (8003198 <stopWatchScreen+0x198>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d074      	beq.n	80030fe <stopWatchScreen+0xfe>
		resetPrevStopWatch();
 8003014:	f7ff fe48 	bl	8002ca8 <resetPrevStopWatch>
		//Statics
		sprintf(Temp_Buffer_text, "Stopwatch");
 8003018:	4960      	ldr	r1, [pc, #384]	; (800319c <stopWatchScreen+0x19c>)
 800301a:	4861      	ldr	r0, [pc, #388]	; (80031a0 <stopWatchScreen+0x1a0>)
 800301c:	f007 fee2 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8003020:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <stopWatchScreen+0x1a4>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3b05      	subs	r3, #5
 8003028:	b2d9      	uxtb	r1, r3
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <stopWatchScreen+0x1a8>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003036:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8003188 <stopWatchScreen+0x188>
 800303a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800303e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003042:	edc7 7a01 	vstr	s15, [r7, #4]
 8003046:	793b      	ldrb	r3, [r7, #4]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	2302      	movs	r3, #2
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003056:	4852      	ldr	r0, [pc, #328]	; (80031a0 <stopWatchScreen+0x1a0>)
 8003058:	f001 fd70 	bl	8004b3c <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, ":");
 800305c:	4953      	ldr	r1, [pc, #332]	; (80031ac <stopWatchScreen+0x1ac>)
 800305e:	4850      	ldr	r0, [pc, #320]	; (80031a0 <stopWatchScreen+0x1a0>)
 8003060:	f007 fec0 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+60, maxHeight * 0.37+16, WHITE, 4, BLACK);
 8003064:	4b4f      	ldr	r3, [pc, #316]	; (80031a4 <stopWatchScreen+0x1a4>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	b2d9      	uxtb	r1, r3
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <stopWatchScreen+0x1a8>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800307a:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003190 <stopWatchScreen+0x190>
 800307e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003082:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003086:	ee37 7b06 	vadd.f64	d7, d7, d6
 800308a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800308e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003092:	793b      	ldrb	r3, [r7, #4]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	2300      	movs	r3, #0
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2304      	movs	r3, #4
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a2:	483f      	ldr	r0, [pc, #252]	; (80031a0 <stopWatchScreen+0x1a0>)
 80030a4:	f001 fd4a 	bl	8004b3c <ILI9341_Draw_Text>
		sprintf(Temp_Buffer_text, ":");
 80030a8:	4940      	ldr	r1, [pc, #256]	; (80031ac <stopWatchScreen+0x1ac>)
 80030aa:	483d      	ldr	r0, [pc, #244]	; (80031a0 <stopWatchScreen+0x1a0>)
 80030ac:	f007 fe9a 	bl	800ade4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+130, maxHeight * 0.37+16, WHITE, 4, BLACK);
 80030b0:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <stopWatchScreen+0x1a4>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	3b7e      	subs	r3, #126	; 0x7e
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <stopWatchScreen+0x1a8>)
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80030c6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003190 <stopWatchScreen+0x190>
 80030ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030ce:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80030d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80030da:	edc7 7a01 	vstr	s15, [r7, #4]
 80030de:	793b      	ldrb	r3, [r7, #4]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	2300      	movs	r3, #0
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2304      	movs	r3, #4
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ee:	482c      	ldr	r0, [pc, #176]	; (80031a0 <stopWatchScreen+0x1a0>)
 80030f0:	f001 fd24 	bl	8004b3c <ILI9341_Draw_Text>

		displayStopWatchScreen(); //Initial first Time;
 80030f4:	f7ff fe14 	bl	8002d20 <displayStopWatchScreen>
		initalStopWatchScreen = true;
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <stopWatchScreen+0x198>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
	}

	//Time running
	if(isStopWatchRunning == true){
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <stopWatchScreen+0x1b0>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <stopWatchScreen+0x11e>
		stopWatchMillisecond += millisecondStopWatch;
 8003106:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <stopWatchScreen+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4413      	add	r3, r2
 8003112:	461a      	mov	r2, r3
 8003114:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003116:	601a      	str	r2, [r3, #0]
		millisecondStopWatch = 0;
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <stopWatchScreen+0x1b8>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
	}

	//Normal Clock
	if (stopWatchMillisecond >= 1000){
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003126:	db0a      	blt.n	800313e <stopWatchScreen+0x13e>
		stopWatchMillisecond = stopWatchMillisecond - 1000; //Keep remainder of millisecondStopWatch
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <stopWatchScreen+0x1b4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003132:	6013      	str	r3, [r2, #0]
		stopWatchSecond++;
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <stopWatchScreen+0x1bc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a20      	ldr	r2, [pc, #128]	; (80031bc <stopWatchScreen+0x1bc>)
 800313c:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchSecond >= 60){
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <stopWatchScreen+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b3b      	cmp	r3, #59	; 0x3b
 8003144:	dd07      	ble.n	8003156 <stopWatchScreen+0x156>
		stopWatchSecond = 0;
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <stopWatchScreen+0x1bc>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
		stopWatchMinute++;
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <stopWatchScreen+0x1c0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <stopWatchScreen+0x1c0>)
 8003154:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchMinute >= 60){
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <stopWatchScreen+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b3b      	cmp	r3, #59	; 0x3b
 800315c:	dd07      	ble.n	800316e <stopWatchScreen+0x16e>
		stopWatchMinute = 0;
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <stopWatchScreen+0x1c0>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
		stopWatchHour++;
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <stopWatchScreen+0x1c4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <stopWatchScreen+0x1c4>)
 800316c:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchHour >= 99){
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <stopWatchScreen+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b62      	cmp	r3, #98	; 0x62
 8003174:	dd02      	ble.n	800317c <stopWatchScreen+0x17c>
		stopWatchHour = 0;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <stopWatchScreen+0x1c4>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
	}

	//Running
	displayStopWatchScreen();
 800317c:	f7ff fdd0 	bl	8002d20 <displayStopWatchScreen>

//	char hexString[30];
//	sprintf(hexString,"%d %d\r\n",prevStopWatchHour,stopWatchHour);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	9999999a 	.word	0x9999999a
 800318c:	3fb99999 	.word	0x3fb99999
 8003190:	7ae147ae 	.word	0x7ae147ae
 8003194:	3fd7ae14 	.word	0x3fd7ae14
 8003198:	20000300 	.word	0x20000300
 800319c:	0800d2b4 	.word	0x0800d2b4
 80031a0:	20000410 	.word	0x20000410
 80031a4:	20000048 	.word	0x20000048
 80031a8:	2000004a 	.word	0x2000004a
 80031ac:	0800d204 	.word	0x0800d204
 80031b0:	20000301 	.word	0x20000301
 80031b4:	200002fc 	.word	0x200002fc
 80031b8:	200002c0 	.word	0x200002c0
 80031bc:	200002f8 	.word	0x200002f8
 80031c0:	200002f4 	.word	0x200002f4
 80031c4:	200002f0 	.word	0x200002f0

080031c8 <editScreen>:

void editScreen(){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
	if(modeEdit == 1){
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <editScreen+0x78>)
 80031ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <editScreen+0x14>
		editYearScreen();
 80031d6:	f7ff f8d1 	bl	800237c <editYearScreen>
	}else if (modeEdit == 6){
		editMinuteScreen();
	}else if (modeEdit == 7){
		editSecondScreen();
	}
}
 80031da:	e02e      	b.n	800323a <editScreen+0x72>
	}else if (modeEdit == 2){
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <editScreen+0x78>)
 80031de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d102      	bne.n	80031ec <editScreen+0x24>
		editMonthScreen();
 80031e6:	f7ff f8a7 	bl	8002338 <editMonthScreen>
}
 80031ea:	e026      	b.n	800323a <editScreen+0x72>
	}else if (modeEdit == 3){
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <editScreen+0x78>)
 80031ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d102      	bne.n	80031fc <editScreen+0x34>
		editDateScreen();
 80031f6:	f7ff f87d 	bl	80022f4 <editDateScreen>
}
 80031fa:	e01e      	b.n	800323a <editScreen+0x72>
	}else if (modeEdit == 4){
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <editScreen+0x78>)
 80031fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d102      	bne.n	800320c <editScreen+0x44>
		editDayScreen();
 8003206:	f7ff f853 	bl	80022b0 <editDayScreen>
}
 800320a:	e016      	b.n	800323a <editScreen+0x72>
	}else if (modeEdit == 5){
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <editScreen+0x78>)
 800320e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d102      	bne.n	800321c <editScreen+0x54>
		editHourScreen();
 8003216:	f7fe ffe3 	bl	80021e0 <editHourScreen>
}
 800321a:	e00e      	b.n	800323a <editScreen+0x72>
	}else if (modeEdit == 6){
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <editScreen+0x78>)
 800321e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d102      	bne.n	800322c <editScreen+0x64>
		editMinuteScreen();
 8003226:	f7fe ffff 	bl	8002228 <editMinuteScreen>
}
 800322a:	e006      	b.n	800323a <editScreen+0x72>
	}else if (modeEdit == 7){
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <editScreen+0x78>)
 800322e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003232:	2b07      	cmp	r3, #7
 8003234:	d101      	bne.n	800323a <editScreen+0x72>
		editSecondScreen();
 8003236:	f7ff f819 	bl	800226c <editSecondScreen>
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000050 	.word	0x20000050

08003244 <tempMonitor>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void tempMonitor(){
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af02      	add	r7, sp, #8
	//Temperature
	cmdBuffer[0] = 0x03;
 800324a:	4b52      	ldr	r3, [pc, #328]	; (8003394 <tempMonitor+0x150>)
 800324c:	2203      	movs	r2, #3
 800324e:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003250:	4b50      	ldr	r3, [pc, #320]	; (8003394 <tempMonitor+0x150>)
 8003252:	2200      	movs	r2, #0
 8003254:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003256:	4b4f      	ldr	r3, [pc, #316]	; (8003394 <tempMonitor+0x150>)
 8003258:	2204      	movs	r2, #4
 800325a:	709a      	strb	r2, [r3, #2]

	//Send Temp & Humid via UART3
	sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", temp, humid);
 800325c:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <tempMonitor+0x154>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003266:	4b4d      	ldr	r3, [pc, #308]	; (800339c <tempMonitor+0x158>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003270:	ed8d 7b00 	vstr	d7, [sp]
 8003274:	ec53 2b16 	vmov	r2, r3, d6
 8003278:	4949      	ldr	r1, [pc, #292]	; (80033a0 <tempMonitor+0x15c>)
 800327a:	484a      	ldr	r0, [pc, #296]	; (80033a4 <tempMonitor+0x160>)
 800327c:	f007 fdb2 	bl	800ade4 <siprintf>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8003280:	bf00      	nop
 8003282:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <tempMonitor+0x164>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d1f8      	bne.n	8003282 <tempMonitor+0x3e>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8003290:	4844      	ldr	r0, [pc, #272]	; (80033a4 <tempMonitor+0x160>)
 8003292:	f7fc ffd5 	bl	8000240 <strlen>
 8003296:	4603      	mov	r3, r0
 8003298:	b29a      	uxth	r2, r3
 800329a:	23c8      	movs	r3, #200	; 0xc8
 800329c:	4941      	ldr	r1, [pc, #260]	; (80033a4 <tempMonitor+0x160>)
 800329e:	4842      	ldr	r0, [pc, #264]	; (80033a8 <tempMonitor+0x164>)
 80032a0:	f006 fbfe 	bl	8009aa0 <HAL_UART_Transmit>

	//HAL_Delay(5000); //>3000 ms
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 80032a4:	23c8      	movs	r3, #200	; 0xc8
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2303      	movs	r3, #3
 80032aa:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <tempMonitor+0x150>)
 80032ac:	21b8      	movs	r1, #184	; 0xb8
 80032ae:	483f      	ldr	r0, [pc, #252]	; (80033ac <tempMonitor+0x168>)
 80032b0:	f002 fd56 	bl	8005d60 <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 80032b4:	23c8      	movs	r3, #200	; 0xc8
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2303      	movs	r3, #3
 80032ba:	4a36      	ldr	r2, [pc, #216]	; (8003394 <tempMonitor+0x150>)
 80032bc:	21b8      	movs	r1, #184	; 0xb8
 80032be:	483b      	ldr	r0, [pc, #236]	; (80033ac <tempMonitor+0x168>)
 80032c0:	f002 fd4e 	bl	8005d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(80); // 50 is too low, 80 is okay
 80032c4:	2050      	movs	r0, #80	; 0x50
 80032c6:	f002 f98f 	bl	80055e8 <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 80032ca:	23c8      	movs	r3, #200	; 0xc8
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2308      	movs	r3, #8
 80032d0:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <tempMonitor+0x16c>)
 80032d2:	21b8      	movs	r1, #184	; 0xb8
 80032d4:	4835      	ldr	r0, [pc, #212]	; (80033ac <tempMonitor+0x168>)
 80032d6:	f002 fe37 	bl	8005f48 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 80032da:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <tempMonitor+0x16c>)
 80032dc:	79db      	ldrb	r3, [r3, #7]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 80032e4:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <tempMonitor+0x16c>)
 80032e6:	799b      	ldrb	r3, [r3, #6]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4413      	add	r3, r2
 80032ee:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 80032f0:	2106      	movs	r1, #6
 80032f2:	482f      	ldr	r0, [pc, #188]	; (80033b0 <tempMonitor+0x16c>)
 80032f4:	f000 fc98 	bl	8003c28 <CRC16_2>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	4293      	cmp	r3, r2
 8003300:	d143      	bne.n	800338a <tempMonitor+0x146>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <tempMonitor+0x16c>)
 8003304:	791b      	ldrb	r3, [r3, #4]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	b29b      	uxth	r3, r3
 800330a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800330e:	b29a      	uxth	r2, r3
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <tempMonitor+0x16c>)
 8003312:	795b      	ldrb	r3, [r3, #5]
 8003314:	b29b      	uxth	r3, r3
 8003316:	4413      	add	r3, r2
 8003318:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 800331a:	88bb      	ldrh	r3, [r7, #4]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003324:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003328:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800332c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <tempMonitor+0x154>)
 8003332:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <tempMonitor+0x16c>)
 8003338:	791b      	ldrb	r3, [r3, #4]
 800333a:	09db      	lsrs	r3, r3, #7
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <tempMonitor+0x10a>
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <tempMonitor+0x154>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	eef1 7a67 	vneg.f32	s15, s15
 800334c:	e002      	b.n	8003354 <tempMonitor+0x110>
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <tempMonitor+0x154>)
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	4b10      	ldr	r3, [pc, #64]	; (8003398 <tempMonitor+0x154>)
 8003356:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <tempMonitor+0x16c>)
 800335c:	789b      	ldrb	r3, [r3, #2]
 800335e:	b29b      	uxth	r3, r3
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	b29a      	uxth	r2, r3
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <tempMonitor+0x16c>)
 8003366:	78db      	ldrb	r3, [r3, #3]
 8003368:	b29b      	uxth	r3, r3
 800336a:	4413      	add	r3, r2
 800336c:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003378:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800337c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003380:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <tempMonitor+0x158>)
 8003386:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200003d0 	.word	0x200003d0
 8003398:	20000014 	.word	0x20000014
 800339c:	20000018 	.word	0x20000018
 80033a0:	0800d2c0 	.word	0x0800d2c0
 80033a4:	200003dc 	.word	0x200003dc
 80033a8:	200005cc 	.word	0x200005cc
 80033ac:	20000384 	.word	0x20000384
 80033b0:	200003d4 	.word	0x200003d4

080033b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80033bc:	f7fd fc6e 	bl	8000c9c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80033c0:	f7fd fc92 	bl	8000ce8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c4:	f002 f8a4 	bl	8005510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c8:	f000 fb90 	bl	8003aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033cc:	f7fd fa98 	bl	8000900 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80033d0:	f001 f8a0 	bl	8004514 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 80033d4:	f000 fcc2 	bl	8003d5c <MX_SPI5_Init>
  MX_TIM1_Init();
 80033d8:	f000 fe96 	bl	8004108 <MX_TIM1_Init>
  MX_RNG_Init();
 80033dc:	f000 fc8a 	bl	8003cf4 <MX_RNG_Init>
  MX_I2C1_Init();
 80033e0:	f7fd fbd8 	bl	8000b94 <MX_I2C1_Init>
  MX_TIM2_Init();
 80033e4:	f000 fee4 	bl	80041b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80033e8:	f000 ff30 	bl	800424c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80033ec:	f001 f862 	bl	80044b4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80033f0:	f001 f830 	bl	8004454 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	//Temp but not has code in here yet
	cmdBuffer[0] = 0x03;
 80033f4:	4baa      	ldr	r3, [pc, #680]	; (80036a0 <main+0x2ec>)
 80033f6:	2203      	movs	r2, #3
 80033f8:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 80033fa:	4ba9      	ldr	r3, [pc, #676]	; (80036a0 <main+0x2ec>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003400:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <main+0x2ec>)
 8003402:	2204      	movs	r2, #4
 8003404:	709a      	strb	r2, [r3, #2]

	//initial driver setup to drive ili9341
	ILI9341_Init();
 8003406:	f001 fcf7 	bl	8004df8 <ILI9341_Init>

	//Interrupt millisecond
	HAL_TIM_Base_Start_IT(&htim1);
 800340a:	48a6      	ldr	r0, [pc, #664]	; (80036a4 <main+0x2f0>)
 800340c:	f005 f914 	bl	8008638 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8003410:	48a5      	ldr	r0, [pc, #660]	; (80036a8 <main+0x2f4>)
 8003412:	f005 f911 	bl	8008638 <HAL_TIM_Base_Start_IT>

	//Reset Screen
	setHorizontalScreen(BLACK);
 8003416:	2000      	movs	r0, #0
 8003418:	f7fd ff40 	bl	800129c <setHorizontalScreen>

	//Read EEPROM First Time
	readData();
 800341c:	f7fd fe92 	bl	8001144 <readData>

	// Setup PM Sensor
	uint8_t* respondStart;
	respondStart = wake_sensirion();
 8003420:	f7fd fcd6 	bl	8000dd0 <wake_sensirion>
 8003424:	6078      	str	r0, [r7, #4]
	sent_string_to_mcu("STA");
 8003426:	48a1      	ldr	r0, [pc, #644]	; (80036ac <main+0x2f8>)
 8003428:	f7fd fdfe 	bl	8001028 <sent_string_to_mcu>

    /* USER CODE BEGIN 3 */

		// REAL CODE BEGIN

		calculationClock();
 800342c:	f7fd ffb2 	bl	8001394 <calculationClock>
		checkResetData();
 8003430:	f7fd ff24 	bl	800127c <checkResetData>


		if (prevMode != mode || prevModeEdit != modeEdit){
 8003434:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <main+0x2fc>)
 8003436:	f9b3 2000 	ldrsh.w	r2, [r3]
 800343a:	4b9e      	ldr	r3, [pc, #632]	; (80036b4 <main+0x300>)
 800343c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003440:	429a      	cmp	r2, r3
 8003442:	d107      	bne.n	8003454 <main+0xa0>
 8003444:	4b9c      	ldr	r3, [pc, #624]	; (80036b8 <main+0x304>)
 8003446:	f9b3 2000 	ldrsh.w	r2, [r3]
 800344a:	4b9c      	ldr	r3, [pc, #624]	; (80036bc <main+0x308>)
 800344c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003450:	429a      	cmp	r2, r3
 8003452:	d006      	beq.n	8003462 <main+0xae>
			prevModeEdit = modeEdit;
 8003454:	4b99      	ldr	r3, [pc, #612]	; (80036bc <main+0x308>)
 8003456:	f9b3 2000 	ldrsh.w	r2, [r3]
 800345a:	4b97      	ldr	r3, [pc, #604]	; (80036b8 <main+0x304>)
 800345c:	801a      	strh	r2, [r3, #0]
			resetPrevNum();
 800345e:	f7fe fc49 	bl	8001cf4 <resetPrevNum>
		}
		// When Change Mode
		if (prevMode != mode){
 8003462:	4b93      	ldr	r3, [pc, #588]	; (80036b0 <main+0x2fc>)
 8003464:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003468:	4b92      	ldr	r3, [pc, #584]	; (80036b4 <main+0x300>)
 800346a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800346e:	429a      	cmp	r2, r3
 8003470:	d00c      	beq.n	800348c <main+0xd8>
			prevMode = mode;
 8003472:	4b90      	ldr	r3, [pc, #576]	; (80036b4 <main+0x300>)
 8003474:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003478:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <main+0x2fc>)
 800347a:	801a      	strh	r2, [r3, #0]
			setHorizontalScreen(BLACK);
 800347c:	2000      	movs	r0, #0
 800347e:	f7fd ff0d 	bl	800129c <setHorizontalScreen>
			bottomBarScreen();
 8003482:	f7fe ffa1 	bl	80023c8 <bottomBarScreen>

			//For Mode 1 StopWatch
			initalStopWatchScreen = false;
 8003486:	4b8e      	ldr	r3, [pc, #568]	; (80036c0 <main+0x30c>)
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 0){
 800348c:	4b89      	ldr	r3, [pc, #548]	; (80036b4 <main+0x300>)
 800348e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d120      	bne.n	80034d8 <main+0x124>
			if (halfsecond == 1){	// render every 500 ms
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <main+0x310>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d141      	bne.n	8003522 <main+0x16e>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 800349e:	4b8a      	ldr	r3, [pc, #552]	; (80036c8 <main+0x314>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f083 0301 	eor.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b83      	ldr	r3, [pc, #524]	; (80036c8 <main+0x314>)
 80034ba:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 80034bc:	4b81      	ldr	r3, [pc, #516]	; (80036c4 <main+0x310>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

				tempMonitor(); // read every 500 ms
 80034c2:	f7ff febf 	bl	8003244 <tempMonitor>
				notifyPm();
 80034c6:	f7ff fae5 	bl	8002a94 <notifyPm>

				topBarScreen();
 80034ca:	f7fe fad5 	bl	8001a78 <topBarScreen>
				displayClockScreen();
 80034ce:	f7fe fe53 	bl	8002178 <displayClockScreen>
				bottomBarScreenUpdate();
 80034d2:	f7ff f8f5 	bl	80026c0 <bottomBarScreenUpdate>
 80034d6:	e024      	b.n	8003522 <main+0x16e>
			}
		}else if(mode == 1){
 80034d8:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <main+0x300>)
 80034da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d102      	bne.n	80034e8 <main+0x134>
			stopWatchScreen();
 80034e2:	f7ff fd8d 	bl	8003000 <stopWatchScreen>
 80034e6:	e01c      	b.n	8003522 <main+0x16e>
		}else if (mode == 100){ // Adjust modeEdit 1-year, 2-month, 3-date, 4-day, 5-hour, 6-minute, 7-second
 80034e8:	4b72      	ldr	r3, [pc, #456]	; (80036b4 <main+0x300>)
 80034ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d117      	bne.n	8003522 <main+0x16e>

			if(halfsecond == 1){ // render every 500 ms
 80034f2:	4b74      	ldr	r3, [pc, #464]	; (80036c4 <main+0x310>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d113      	bne.n	8003522 <main+0x16e>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <main+0x314>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <main+0x314>)
 8003516:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8003518:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <main+0x310>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
				editScreen();
 800351e:	f7ff fe53 	bl	80031c8 <editScreen>
			}
		}


		pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	4869      	ldr	r0, [pc, #420]	; (80036cc <main+0x318>)
 8003526:	f002 fb41 	bl	8005bac <HAL_GPIO_ReadPin>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4b66      	ldr	r3, [pc, #408]	; (80036d0 <main+0x31c>)
 8003538:	701a      	strb	r2, [r3, #0]
		pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 800353a:	2140      	movs	r1, #64	; 0x40
 800353c:	4863      	ldr	r0, [pc, #396]	; (80036cc <main+0x318>)
 800353e:	f002 fb35 	bl	8005bac <HAL_GPIO_ReadPin>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <main+0x320>)
 8003550:	701a      	strb	r2, [r3, #0]
		pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8003552:	2120      	movs	r1, #32
 8003554:	485d      	ldr	r0, [pc, #372]	; (80036cc <main+0x318>)
 8003556:	f002 fb29 	bl	8005bac <HAL_GPIO_ReadPin>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4b5c      	ldr	r3, [pc, #368]	; (80036d8 <main+0x324>)
 8003568:	701a      	strb	r2, [r3, #0]
		pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 800356a:	2110      	movs	r1, #16
 800356c:	4857      	ldr	r0, [pc, #348]	; (80036cc <main+0x318>)
 800356e:	f002 fb1d 	bl	8005bac <HAL_GPIO_ReadPin>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b57      	ldr	r3, [pc, #348]	; (80036dc <main+0x328>)
 8003580:	701a      	strb	r2, [r3, #0]
//		pressButton2 = 0;
//		pressButton3 = 0;
//		pressButton4 = 0;

		//Buzzer
		if ((pressButton1 == true && isPressButton1 == false) ||
 8003582:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <main+0x31c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <main+0x1e4>
 800358a:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <main+0x32c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	f083 0301 	eor.w	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d120      	bne.n	80035da <main+0x226>
			(pressButton2 == true && isPressButton2 == false) ||
 8003598:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <main+0x320>)
 800359a:	781b      	ldrb	r3, [r3, #0]
		if ((pressButton1 == true && isPressButton1 == false) ||
 800359c:	2b00      	cmp	r3, #0
 800359e:	d006      	beq.n	80035ae <main+0x1fa>
			(pressButton2 == true && isPressButton2 == false) ||
 80035a0:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <main+0x330>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <main+0x226>
			(pressButton3 == true && isPressButton3 == false) ||
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <main+0x324>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
			(pressButton2 == true && isPressButton2 == false) ||
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <main+0x210>
			(pressButton3 == true && isPressButton3 == false) ||
 80035b6:	4b4c      	ldr	r3, [pc, #304]	; (80036e8 <main+0x334>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <main+0x226>
			(pressButton4 == true && isPressButton4 == false)){
 80035c4:	4b45      	ldr	r3, [pc, #276]	; (80036dc <main+0x328>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
			(pressButton3 == true && isPressButton3 == false) ||
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <main+0x22a>
			(pressButton4 == true && isPressButton4 == false)){
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <main+0x338>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <main+0x22a>
			buzzerSound();
 80035da:	f7ff fa45 	bl	8002a68 <buzzerSound>
		}

		//General Mode
		if (pressButton1 == true && isPressButton1 == false && mode != 100){ // increase mode only once
 80035de:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <main+0x31c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01f      	beq.n	8003626 <main+0x272>
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <main+0x32c>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	f083 0301 	eor.w	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <main+0x272>
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <main+0x300>)
 80035f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d013      	beq.n	8003626 <main+0x272>
			mode++;
 80035fe:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <main+0x300>)
 8003600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003604:	b29b      	uxth	r3, r3
 8003606:	3301      	adds	r3, #1
 8003608:	b29b      	uxth	r3, r3
 800360a:	b21a      	sxth	r2, r3
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <main+0x300>)
 800360e:	801a      	strh	r2, [r3, #0]
			if(mode == 3){
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <main+0x300>)
 8003612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d102      	bne.n	8003620 <main+0x26c>
				mode = 0;
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <main+0x300>)
 800361c:	2200      	movs	r2, #0
 800361e:	801a      	strh	r2, [r3, #0]
			}
			isPressButton1 = true;
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <main+0x32c>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
		}
		//StopWatch Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 1 && isStopWatchRunning != true){ //Reset StopWatch
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <main+0x320>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d017      	beq.n	800365e <main+0x2aa>
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <main+0x330>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	f083 0301 	eor.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <main+0x2aa>
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <main+0x300>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10b      	bne.n	800365e <main+0x2aa>
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <main+0x33c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <main+0x2aa>
			isPressButton2 = true;
 8003654:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <main+0x330>)
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
			resetStopWatch();
 800365a:	f7ff fb45 	bl	8002ce8 <resetStopWatch>
		}
		if (pressButton3 == true && isPressButton3 == false && mode == 1){ //Running/Stop StopWatch
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <main+0x324>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04b      	beq.n	80036fe <main+0x34a>
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <main+0x334>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f083 0301 	eor.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d044      	beq.n	80036fe <main+0x34a>
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <main+0x300>)
 8003676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d13f      	bne.n	80036fe <main+0x34a>
			isPressButton3 = true;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <main+0x334>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
			if(isStopWatchRunning == false){ // press button
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <main+0x33c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d032      	beq.n	80036f8 <main+0x344>
				millisecondStopWatch = 0;
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <main+0x340>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
				isStopWatchRunning = true;
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <main+0x33c>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e02e      	b.n	80036fe <main+0x34a>
 80036a0:	200003d0 	.word	0x200003d0
 80036a4:	20000534 	.word	0x20000534
 80036a8:	20000580 	.word	0x20000580
 80036ac:	0800d2e8 	.word	0x0800d2e8
 80036b0:	20000052 	.word	0x20000052
 80036b4:	2000004e 	.word	0x2000004e
 80036b8:	20000054 	.word	0x20000054
 80036bc:	20000050 	.word	0x20000050
 80036c0:	20000300 	.word	0x20000300
 80036c4:	200002c4 	.word	0x200002c4
 80036c8:	20000044 	.word	0x20000044
 80036cc:	40020c00 	.word	0x40020c00
 80036d0:	200002c8 	.word	0x200002c8
 80036d4:	200002c9 	.word	0x200002c9
 80036d8:	200002ca 	.word	0x200002ca
 80036dc:	200002cb 	.word	0x200002cb
 80036e0:	200002cc 	.word	0x200002cc
 80036e4:	200002cd 	.word	0x200002cd
 80036e8:	200002ce 	.word	0x200002ce
 80036ec:	200002cf 	.word	0x200002cf
 80036f0:	20000301 	.word	0x20000301
 80036f4:	200002c0 	.word	0x200002c0
			}else{
				isStopWatchRunning = false;
 80036f8:	4ba9      	ldr	r3, [pc, #676]	; (80039a0 <main+0x5ec>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
		}



		//Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 80036fe:	4ba9      	ldr	r3, [pc, #676]	; (80039a4 <main+0x5f0>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d015      	beq.n	8003732 <main+0x37e>
 8003706:	4ba8      	ldr	r3, [pc, #672]	; (80039a8 <main+0x5f4>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	f083 0301 	eor.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <main+0x37e>
 8003714:	4ba5      	ldr	r3, [pc, #660]	; (80039ac <main+0x5f8>)
 8003716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <main+0x37e>
			isPressButton2 = true;
 800371e:	4ba2      	ldr	r3, [pc, #648]	; (80039a8 <main+0x5f4>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8003724:	4ba2      	ldr	r3, [pc, #648]	; (80039b0 <main+0x5fc>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	49a2      	ldr	r1, [pc, #648]	; (80039b4 <main+0x600>)
 800372c:	e9c1 2300 	strd	r2, r3, [r1]
 8003730:	e02b      	b.n	800378a <main+0x3d6>
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 8003732:	4b9c      	ldr	r3, [pc, #624]	; (80039a4 <main+0x5f0>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d027      	beq.n	800378a <main+0x3d6>
 800373a:	4b9b      	ldr	r3, [pc, #620]	; (80039a8 <main+0x5f4>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d023      	beq.n	800378a <main+0x3d6>
 8003742:	4b9a      	ldr	r3, [pc, #616]	; (80039ac <main+0x5f8>)
 8003744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11e      	bne.n	800378a <main+0x3d6>
 800374c:	4b98      	ldr	r3, [pc, #608]	; (80039b0 <main+0x5fc>)
 800374e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003752:	4b98      	ldr	r3, [pc, #608]	; (80039b4 <main+0x600>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	1a84      	subs	r4, r0, r2
 800375a:	eb61 0503 	sbc.w	r5, r1, r3
 800375e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	42ab      	cmp	r3, r5
 8003768:	bf08      	it	eq
 800376a:	42a2      	cmpeq	r2, r4
 800376c:	d20d      	bcs.n	800378a <main+0x3d6>
			buzzerSound();
 800376e:	f7ff f97b 	bl	8002a68 <buzzerSound>
			modeEdit = 1; // Reset to Year First time
 8003772:	4b91      	ldr	r3, [pc, #580]	; (80039b8 <main+0x604>)
 8003774:	2201      	movs	r2, #1
 8003776:	801a      	strh	r2, [r3, #0]
			mode = 100;
 8003778:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <main+0x5f8>)
 800377a:	2264      	movs	r2, #100	; 0x64
 800377c:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 800377e:	4b8c      	ldr	r3, [pc, #560]	; (80039b0 <main+0x5fc>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	498b      	ldr	r1, [pc, #556]	; (80039b4 <main+0x600>)
 8003786:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 800378a:	4b86      	ldr	r3, [pc, #536]	; (80039a4 <main+0x5f0>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02c      	beq.n	80037ec <main+0x438>
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <main+0x5f4>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f083 0301 	eor.w	r3, r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d025      	beq.n	80037ec <main+0x438>
 80037a0:	4b83      	ldr	r3, [pc, #524]	; (80039b0 <main+0x5fc>)
 80037a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a6:	4b83      	ldr	r3, [pc, #524]	; (80039b4 <main+0x600>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	ebb0 0802 	subs.w	r8, r0, r2
 80037b0:	eb61 0903 	sbc.w	r9, r1, r3
 80037b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	454b      	cmp	r3, r9
 80037be:	bf08      	it	eq
 80037c0:	4542      	cmpeq	r2, r8
 80037c2:	d213      	bcs.n	80037ec <main+0x438>
 80037c4:	4b79      	ldr	r3, [pc, #484]	; (80039ac <main+0x5f8>)
 80037c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d10e      	bne.n	80037ec <main+0x438>
			isPressButton2 = true;
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <main+0x5f4>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Year First time
 80037d4:	4b78      	ldr	r3, [pc, #480]	; (80039b8 <main+0x604>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	801a      	strh	r2, [r3, #0]
			mode = 0;
 80037da:	4b74      	ldr	r3, [pc, #464]	; (80039ac <main+0x5f8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80037e0:	4b73      	ldr	r3, [pc, #460]	; (80039b0 <main+0x5fc>)
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	4973      	ldr	r1, [pc, #460]	; (80039b4 <main+0x600>)
 80037e8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 80037ec:	4b73      	ldr	r3, [pc, #460]	; (80039bc <main+0x608>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d022      	beq.n	800383a <main+0x486>
 80037f4:	4b72      	ldr	r3, [pc, #456]	; (80039c0 <main+0x60c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f083 0301 	eor.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01b      	beq.n	800383a <main+0x486>
 8003802:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <main+0x5f8>)
 8003804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d116      	bne.n	800383a <main+0x486>
			modeEdit++;
 800380c:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <main+0x604>)
 800380e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003812:	b29b      	uxth	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	b29b      	uxth	r3, r3
 8003818:	b21a      	sxth	r2, r3
 800381a:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <main+0x604>)
 800381c:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 800381e:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <main+0x60c>)
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 8){	 // finish loop edit
 8003824:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <main+0x604>)
 8003826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d105      	bne.n	800383a <main+0x486>
				modeEdit = 1; // Reset to Year
 800382e:	4b62      	ldr	r3, [pc, #392]	; (80039b8 <main+0x604>)
 8003830:	2201      	movs	r2, #1
 8003832:	801a      	strh	r2, [r3, #0]
				mode = 0;	  // Back to General Mode
 8003834:	4b5d      	ldr	r3, [pc, #372]	; (80039ac <main+0x5f8>)
 8003836:	2200      	movs	r2, #0
 8003838:	801a      	strh	r2, [r3, #0]
			}
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 800383a:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <main+0x610>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d06d      	beq.n	800391e <main+0x56a>
 8003842:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <main+0x614>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	f083 0301 	eor.w	r3, r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d066      	beq.n	800391e <main+0x56a>
 8003850:	4b56      	ldr	r3, [pc, #344]	; (80039ac <main+0x5f8>)
 8003852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d161      	bne.n	800391e <main+0x56a>
			if (modeEdit == 1){
 800385a:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <main+0x604>)
 800385c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d109      	bne.n	8003878 <main+0x4c4>
				year--;
 8003864:	4b59      	ldr	r3, [pc, #356]	; (80039cc <main+0x618>)
 8003866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29b      	uxth	r3, r3
 8003870:	b21a      	sxth	r2, r3
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <main+0x618>)
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	e04a      	b.n	800390e <main+0x55a>
			}
			else if (modeEdit == 2){
 8003878:	4b4f      	ldr	r3, [pc, #316]	; (80039b8 <main+0x604>)
 800387a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d109      	bne.n	8003896 <main+0x4e2>
				monthIndex--;
 8003882:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <main+0x61c>)
 8003884:	f993 3000 	ldrsb.w	r3, [r3]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	b25a      	sxtb	r2, r3
 8003890:	4b4f      	ldr	r3, [pc, #316]	; (80039d0 <main+0x61c>)
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e03b      	b.n	800390e <main+0x55a>
			}
			else if (modeEdit == 3){
 8003896:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <main+0x604>)
 8003898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d109      	bne.n	80038b4 <main+0x500>
				date--;
 80038a0:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <main+0x620>)
 80038a2:	f993 3000 	ldrsb.w	r3, [r3]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	b25a      	sxtb	r2, r3
 80038ae:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <main+0x620>)
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e02c      	b.n	800390e <main+0x55a>
			}
			else if (modeEdit == 4){
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <main+0x604>)
 80038b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d109      	bne.n	80038d2 <main+0x51e>
				dayIndex--;
 80038be:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <main+0x624>)
 80038c0:	f993 3000 	ldrsb.w	r3, [r3]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	b25a      	sxtb	r2, r3
 80038cc:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <main+0x624>)
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e01d      	b.n	800390e <main+0x55a>
			}
			else if (modeEdit == 5){
 80038d2:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <main+0x604>)
 80038d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d105      	bne.n	80038e8 <main+0x534>
				hourNum--;
 80038dc:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <main+0x628>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	4a3e      	ldr	r2, [pc, #248]	; (80039dc <main+0x628>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e012      	b.n	800390e <main+0x55a>
			}
			else if (modeEdit == 6){
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <main+0x604>)
 80038ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d105      	bne.n	80038fe <main+0x54a>
				minuteNum--;
 80038f2:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <main+0x62c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <main+0x62c>)
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	e007      	b.n	800390e <main+0x55a>
			}
			else if (modeEdit == 7){
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <main+0x604>)
 8003900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003904:	2b07      	cmp	r3, #7
 8003906:	d102      	bne.n	800390e <main+0x55a>
				secondNum = 0;
 8003908:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <main+0x630>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 800390e:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <main+0x634>)
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8003914:	f7fe f9ee 	bl	8001cf4 <resetPrevNum>
			isPressButton3 = true;
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <main+0x614>)
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <main+0x638>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 809b 	beq.w	8003a5e <main+0x6aa>
 8003928:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <main+0x63c>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	f083 0301 	eor.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8093 	beq.w	8003a5e <main+0x6aa>
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <main+0x5f8>)
 800393a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	f040 808d 	bne.w	8003a5e <main+0x6aa>
			if (modeEdit == 1){
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <main+0x604>)
 8003946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d109      	bne.n	8003962 <main+0x5ae>
				year++;
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <main+0x618>)
 8003950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003954:	b29b      	uxth	r3, r3
 8003956:	3301      	adds	r3, #1
 8003958:	b29b      	uxth	r3, r3
 800395a:	b21a      	sxth	r2, r3
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <main+0x618>)
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	e075      	b.n	8003a4e <main+0x69a>
			}
			else if (modeEdit == 2){
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <main+0x604>)
 8003964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d109      	bne.n	8003980 <main+0x5cc>
				monthIndex++;
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <main+0x61c>)
 800396e:	f993 3000 	ldrsb.w	r3, [r3]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	b25a      	sxtb	r2, r3
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <main+0x61c>)
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e066      	b.n	8003a4e <main+0x69a>
			}
			else if (modeEdit == 3){
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <main+0x604>)
 8003982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d134      	bne.n	80039f4 <main+0x640>
				date++;
 800398a:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <main+0x620>)
 800398c:	f993 3000 	ldrsb.w	r3, [r3]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	3301      	adds	r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	b25a      	sxtb	r2, r3
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <main+0x620>)
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	e057      	b.n	8003a4e <main+0x69a>
 800399e:	bf00      	nop
 80039a0:	20000301 	.word	0x20000301
 80039a4:	200002c9 	.word	0x200002c9
 80039a8:	200002cd 	.word	0x200002cd
 80039ac:	2000004e 	.word	0x2000004e
 80039b0:	200002e0 	.word	0x200002e0
 80039b4:	200002d8 	.word	0x200002d8
 80039b8:	20000050 	.word	0x20000050
 80039bc:	200002c8 	.word	0x200002c8
 80039c0:	200002cc 	.word	0x200002cc
 80039c4:	200002ca 	.word	0x200002ca
 80039c8:	200002ce 	.word	0x200002ce
 80039cc:	200000a6 	.word	0x200000a6
 80039d0:	200000a5 	.word	0x200000a5
 80039d4:	20000056 	.word	0x20000056
 80039d8:	200000a4 	.word	0x200000a4
 80039dc:	20000034 	.word	0x20000034
 80039e0:	20000030 	.word	0x20000030
 80039e4:	2000002c 	.word	0x2000002c
 80039e8:	20000044 	.word	0x20000044
 80039ec:	200002cb 	.word	0x200002cb
 80039f0:	200002cf 	.word	0x200002cf
			}
			else if (modeEdit == 4){
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <main+0x700>)
 80039f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d109      	bne.n	8003a12 <main+0x65e>
				dayIndex++;
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <main+0x704>)
 8003a00:	f993 3000 	ldrsb.w	r3, [r3]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	b25a      	sxtb	r2, r3
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <main+0x704>)
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e01d      	b.n	8003a4e <main+0x69a>
			}
			else if (modeEdit == 5){
 8003a12:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <main+0x700>)
 8003a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d105      	bne.n	8003a28 <main+0x674>
				hourNum++;
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <main+0x708>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <main+0x708>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e012      	b.n	8003a4e <main+0x69a>
			}
			else if (modeEdit == 6){
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <main+0x700>)
 8003a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d105      	bne.n	8003a3e <main+0x68a>
				minuteNum++;
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <main+0x70c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <main+0x70c>)
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e007      	b.n	8003a4e <main+0x69a>
			}
			else if (modeEdit == 7){
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <main+0x700>)
 8003a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a44:	2b07      	cmp	r3, #7
 8003a46:	d102      	bne.n	8003a4e <main+0x69a>
				secondNum = 0;
 8003a48:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <main+0x710>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <main+0x714>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8003a54:	f7fe f94e 	bl	8001cf4 <resetPrevNum>
			isPressButton4 = true;
 8003a58:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <main+0x718>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
		}

		//Reset isPressButton
		if (pressButton1 == false){
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <main+0x71c>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	f083 0301 	eor.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <main+0x6be>
			isPressButton1 = false;
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <main+0x720>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton2 == false){
 8003a72:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <main+0x724>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	f083 0301 	eor.w	r3, r3, #1
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <main+0x6d2>
			isPressButton2 = false;
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <main+0x728>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton3 == false){
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <main+0x72c>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f083 0301 	eor.w	r3, r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <main+0x6e6>
			isPressButton3 = false;
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <main+0x730>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton4 == false){
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <main+0x734>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	f083 0301 	eor.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f43f acc1 	beq.w	800342c <main+0x78>
			isPressButton4 = false;
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <main+0x718>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
		calculationClock();
 8003ab0:	e4bc      	b.n	800342c <main+0x78>
 8003ab2:	bf00      	nop
 8003ab4:	20000050 	.word	0x20000050
 8003ab8:	200000a4 	.word	0x200000a4
 8003abc:	20000034 	.word	0x20000034
 8003ac0:	20000030 	.word	0x20000030
 8003ac4:	2000002c 	.word	0x2000002c
 8003ac8:	20000044 	.word	0x20000044
 8003acc:	200002cf 	.word	0x200002cf
 8003ad0:	200002c8 	.word	0x200002c8
 8003ad4:	200002cc 	.word	0x200002cc
 8003ad8:	200002c9 	.word	0x200002c9
 8003adc:	200002cd 	.word	0x200002cd
 8003ae0:	200002ca 	.word	0x200002ca
 8003ae4:	200002ce 	.word	0x200002ce
 8003ae8:	200002cb 	.word	0x200002cb

08003aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0b8      	sub	sp, #224	; 0xe0
 8003af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003af2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003af6:	2234      	movs	r2, #52	; 0x34
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f006 fd28 	bl	800a550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	2290      	movs	r2, #144	; 0x90
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f006 fd19 	bl	800a550 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b1e:	f003 f857 	bl	8006bd0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <SystemClock_Config+0x130>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a3d      	ldr	r2, [pc, #244]	; (8003c1c <SystemClock_Config+0x130>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <SystemClock_Config+0x130>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b3a:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <SystemClock_Config+0x134>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <SystemClock_Config+0x134>)
 8003b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <SystemClock_Config+0x134>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003b58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b60:	2302      	movs	r3, #2
 8003b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003b6e:	2304      	movs	r3, #4
 8003b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8003b74:	23c8      	movs	r3, #200	; 0xc8
 8003b76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003b80:	2309      	movs	r3, #9
 8003b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b86:	2302      	movs	r3, #2
 8003b88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 f87d 	bl	8006c90 <HAL_RCC_OscConfig>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003b9c:	f000 f8a6 	bl	8003cec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ba0:	f003 f826 	bl	8006bf0 <HAL_PWREx_EnableOverDrive>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003baa:	f000 f89f 	bl	8003cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bae:	230f      	movs	r3, #15
 8003bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003bd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bd4:	2106      	movs	r1, #6
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fb08 	bl	80071ec <HAL_RCC_ClockConfig>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8003be2:	f000 f883 	bl	8003cec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <SystemClock_Config+0x138>)
 8003be8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bea:	2300      	movs	r3, #0
 8003bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c00:	f107 0308 	add.w	r3, r7, #8
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 fcf3 	bl	80075f0 <HAL_RCCEx_PeriphCLKConfig>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8003c10:	f000 f86c 	bl	8003cec <Error_Handler>
  }
}
 8003c14:	bf00      	nop
 8003c16:	37e0      	adds	r7, #224	; 0xe0
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40007000 	.word	0x40007000
 8003c24:	00204340 	.word	0x00204340

08003c28 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8003c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c38:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	737b      	strb	r3, [r7, #13]

	while (length--){
 8003c3e:	e023      	b.n	8003c88 <CRC16_2+0x60>
		crc ^= *ptr++;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	4053      	eors	r3, r2
 8003c4e:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8003c50:	2300      	movs	r3, #0
 8003c52:	737b      	strb	r3, [r7, #13]
 8003c54:	e015      	b.n	8003c82 <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8003c56:	89fb      	ldrh	r3, [r7, #14]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <CRC16_2+0x4e>
				crc >>= 1;
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8003c66:	89fb      	ldrh	r3, [r7, #14]
 8003c68:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8003c6c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8003c70:	43db      	mvns	r3, r3
 8003c72:	81fb      	strh	r3, [r7, #14]
 8003c74:	e002      	b.n	8003c7c <CRC16_2+0x54>
			}
			else
				crc >>= 1;
 8003c76:	89fb      	ldrh	r3, [r7, #14]
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8003c7c:	7b7b      	ldrb	r3, [r7, #13]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	737b      	strb	r3, [r7, #13]
 8003c82:	7b7b      	ldrb	r3, [r7, #13]
 8003c84:	2b07      	cmp	r3, #7
 8003c86:	d9e6      	bls.n	8003c56 <CRC16_2+0x2e>
	while (length--){
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	70fa      	strb	r2, [r7, #3]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1d6      	bne.n	8003c40 <CRC16_2+0x18>
		}
	}
	return crc;
 8003c92:	89fb      	ldrh	r3, [r7, #14]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	80fb      	strh	r3, [r7, #6]

	//On Board
	//Blue
	if (GPIO_Pin == GPIO_PIN_13){
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb0:	d110      	bne.n	8003cd4 <HAL_GPIO_EXTI_Callback+0x34>
		userResetButton = 1;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_GPIO_EXTI_Callback+0x3c>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Interrupt pin13 \n\r");
 8003cb8:	4909      	ldr	r1, [pc, #36]	; (8003ce0 <HAL_GPIO_EXTI_Callback+0x40>)
 8003cba:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x44>)
 8003cbc:	f007 f892 	bl	800ade4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8003cc0:	4808      	ldr	r0, [pc, #32]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x44>)
 8003cc2:	f7fc fabd 	bl	8000240 <strlen>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	23c8      	movs	r3, #200	; 0xc8
 8003ccc:	4905      	ldr	r1, [pc, #20]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x44>)
 8003cce:	4806      	ldr	r0, [pc, #24]	; (8003ce8 <HAL_GPIO_EXTI_Callback+0x48>)
 8003cd0:	f005 fee6 	bl	8009aa0 <HAL_UART_Transmit>
	}

}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200002d0 	.word	0x200002d0
 8003ce0:	0800d2ec 	.word	0x0800d2ec
 8003ce4:	200003dc 	.word	0x200003dc
 8003ce8:	200005cc 	.word	0x200005cc

08003cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8003cf0:	e7fe      	b.n	8003cf0 <Error_Handler+0x4>
	...

08003cf4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <MX_RNG_Init+0x20>)
 8003cfa:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <MX_RNG_Init+0x24>)
 8003cfc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003cfe:	4805      	ldr	r0, [pc, #20]	; (8003d14 <MX_RNG_Init+0x20>)
 8003d00:	f004 f89e 	bl	8007e40 <HAL_RNG_Init>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003d0a:	f7ff ffef 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000474 	.word	0x20000474
 8003d18:	50060800 	.word	0x50060800

08003d1c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <HAL_RNG_MspInit+0x38>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RNG_MspInit+0x3c>)
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RNG_MspInit+0x3c>)
 8003d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d38:	6353      	str	r3, [r2, #52]	; 0x34
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <HAL_RNG_MspInit+0x3c>)
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	50060800 	.word	0x50060800
 8003d58:	40023800 	.word	0x40023800

08003d5c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <MX_SPI5_Init+0x78>)
 8003d64:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d6c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d7a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003daa:	2207      	movs	r2, #7
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003dba:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <MX_SPI5_Init+0x74>)
 8003dbc:	f004 f86a 	bl	8007e94 <HAL_SPI_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8003dc6:	f7ff ff91 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000484 	.word	0x20000484
 8003dd4:	40015000 	.word	0x40015000

08003dd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <HAL_SPI_MspInit+0x7c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d128      	bne.n	8003e4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <HAL_SPI_MspInit+0x80>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <HAL_SPI_MspInit+0x80>)
 8003e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e04:	6453      	str	r3, [r2, #68]	; 0x44
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <HAL_SPI_MspInit+0x80>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_SPI_MspInit+0x80>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <HAL_SPI_MspInit+0x80>)
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <HAL_SPI_MspInit+0x80>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003e2a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e3c:	2305      	movs	r3, #5
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e40:	f107 0314 	add.w	r3, r7, #20
 8003e44:	4619      	mov	r1, r3
 8003e46:	4805      	ldr	r0, [pc, #20]	; (8003e5c <HAL_SPI_MspInit+0x84>)
 8003e48:	f001 fd04 	bl	8005854 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40015000 	.word	0x40015000
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40021400 	.word	0x40021400

08003e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eac:	f001 fb7c 	bl	80055a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb0:	bf00      	nop
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003eb8:	4807      	ldr	r0, [pc, #28]	; (8003ed8 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8003eba:	f004 fe11 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <TIM1_UP_TIM10_IRQHandler+0x28>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a05      	ldr	r2, [pc, #20]	; (8003edc <TIM1_UP_TIM10_IRQHandler+0x28>)
 8003ec6:	6013      	str	r3, [r2, #0]
  millisecondStopWatch++;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000534 	.word	0x20000534
 8003edc:	200002bc 	.word	0x200002bc
 8003ee0:	200002c0 	.word	0x200002c0

08003ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ee8:	4803      	ldr	r0, [pc, #12]	; (8003ef8 <TIM2_IRQHandler+0x14>)
 8003eea:	f004 fdf9 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8003eee:	4b03      	ldr	r3, [pc, #12]	; (8003efc <TIM2_IRQHandler+0x18>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000580 	.word	0x20000580
 8003efc:	200002c4 	.word	0x200002c4

08003f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003f04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003f08:	f001 fe82 	bl	8005c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
	return 1;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_kill>:

int _kill(int pid, int sig)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f2a:	f006 fae7 	bl	800a4fc <__errno>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2216      	movs	r2, #22
 8003f32:	601a      	str	r2, [r3, #0]
	return -1;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_exit>:

void _exit (int status)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f48:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ffe7 	bl	8003f20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f52:	e7fe      	b.n	8003f52 <_exit+0x12>

08003f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e00a      	b.n	8003f7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f66:	f3af 8000 	nop.w
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	60ba      	str	r2, [r7, #8]
 8003f72:	b2ca      	uxtb	r2, r1
 8003f74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	dbf0      	blt.n	8003f66 <_read+0x12>
	}

return len;
 8003f84:	687b      	ldr	r3, [r7, #4]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e009      	b.n	8003fb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	60ba      	str	r2, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	dbf1      	blt.n	8003fa0 <_write+0x12>
	}
	return len;
 8003fbc:	687b      	ldr	r3, [r7, #4]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_close>:

int _close(int file)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
	return -1;
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fee:	605a      	str	r2, [r3, #4]
	return 0;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_isatty>:

int _isatty(int file)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
	return 1;
 8004006:	2301      	movs	r3, #1
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
	return 0;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <_sbrk+0x5c>)
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <_sbrk+0x60>)
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004044:	4b13      	ldr	r3, [pc, #76]	; (8004094 <_sbrk+0x64>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <_sbrk+0x64>)
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <_sbrk+0x68>)
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <_sbrk+0x64>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	429a      	cmp	r2, r3
 800405e:	d207      	bcs.n	8004070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004060:	f006 fa4c 	bl	800a4fc <__errno>
 8004064:	4603      	mov	r3, r0
 8004066:	220c      	movs	r2, #12
 8004068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	e009      	b.n	8004084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <_sbrk+0x64>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <_sbrk+0x64>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	4a05      	ldr	r2, [pc, #20]	; (8004094 <_sbrk+0x64>)
 8004080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004082:	68fb      	ldr	r3, [r7, #12]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20080000 	.word	0x20080000
 8004090:	00000400 	.word	0x00000400
 8004094:	20000374 	.word	0x20000374
 8004098:	20000770 	.word	0x20000770

0800409c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <SystemInit+0x5c>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <SystemInit+0x5c>)
 80040a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <SystemInit+0x60>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a11      	ldr	r2, [pc, #68]	; (80040fc <SystemInit+0x60>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <SystemInit+0x60>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <SystemInit+0x60>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	490d      	ldr	r1, [pc, #52]	; (80040fc <SystemInit+0x60>)
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <SystemInit+0x64>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <SystemInit+0x60>)
 80040d0:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <SystemInit+0x68>)
 80040d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <SystemInit+0x60>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a08      	ldr	r2, [pc, #32]	; (80040fc <SystemInit+0x60>)
 80040da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <SystemInit+0x60>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040e6:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <SystemInit+0x5c>)
 80040e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040ec:	609a      	str	r2, [r3, #8]
#endif
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00
 80040fc:	40023800 	.word	0x40023800
 8004100:	fef6ffff 	.word	0xfef6ffff
 8004104:	24003010 	.word	0x24003010

08004108 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800410e:	f107 0310 	add.w	r3, r7, #16
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	605a      	str	r2, [r3, #4]
 8004124:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <MX_TIM1_Init+0xa0>)
 8004128:	4a20      	ldr	r2, [pc, #128]	; (80041ac <MX_TIM1_Init+0xa4>)
 800412a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800412c:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <MX_TIM1_Init+0xa0>)
 800412e:	22c7      	movs	r2, #199	; 0xc7
 8004130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <MX_TIM1_Init+0xa0>)
 8004134:	2200      	movs	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <MX_TIM1_Init+0xa0>)
 800413a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800413e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <MX_TIM1_Init+0xa0>)
 8004142:	2200      	movs	r2, #0
 8004144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <MX_TIM1_Init+0xa0>)
 8004148:	2200      	movs	r2, #0
 800414a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <MX_TIM1_Init+0xa0>)
 800414e:	2200      	movs	r2, #0
 8004150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004152:	4815      	ldr	r0, [pc, #84]	; (80041a8 <MX_TIM1_Init+0xa0>)
 8004154:	f004 fa18 	bl	8008588 <HAL_TIM_Base_Init>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800415e:	f7ff fdc5 	bl	8003cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	4619      	mov	r1, r3
 800416e:	480e      	ldr	r0, [pc, #56]	; (80041a8 <MX_TIM1_Init+0xa0>)
 8004170:	f004 fee6 	bl	8008f40 <HAL_TIM_ConfigClockSource>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800417a:	f7ff fdb7 	bl	8003cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4806      	ldr	r0, [pc, #24]	; (80041a8 <MX_TIM1_Init+0xa0>)
 8004190:	f005 fb8c 	bl	80098ac <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800419a:	f7ff fda7 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800419e:	bf00      	nop
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000534 	.word	0x20000534
 80041ac:	40010000 	.word	0x40010000

080041b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041b6:	f107 0310 	add.w	r3, r7, #16
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	609a      	str	r2, [r3, #8]
 80041c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c4:	1d3b      	adds	r3, r7, #4
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <MX_TIM2_Init+0x98>)
 80041d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <MX_TIM2_Init+0x98>)
 80041d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <MX_TIM2_Init+0x98>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <MX_TIM2_Init+0x98>)
 80041e6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80041ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ec:	4b16      	ldr	r3, [pc, #88]	; (8004248 <MX_TIM2_Init+0x98>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <MX_TIM2_Init+0x98>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041f8:	4813      	ldr	r0, [pc, #76]	; (8004248 <MX_TIM2_Init+0x98>)
 80041fa:	f004 f9c5 	bl	8008588 <HAL_TIM_Base_Init>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004204:	f7ff fd72 	bl	8003cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800420e:	f107 0310 	add.w	r3, r7, #16
 8004212:	4619      	mov	r1, r3
 8004214:	480c      	ldr	r0, [pc, #48]	; (8004248 <MX_TIM2_Init+0x98>)
 8004216:	f004 fe93 	bl	8008f40 <HAL_TIM_ConfigClockSource>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004220:	f7ff fd64 	bl	8003cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004224:	2300      	movs	r3, #0
 8004226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4805      	ldr	r0, [pc, #20]	; (8004248 <MX_TIM2_Init+0x98>)
 8004232:	f005 fb3b 	bl	80098ac <HAL_TIMEx_MasterConfigSynchronization>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800423c:	f7ff fd56 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004240:	bf00      	nop
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000580 	.word	0x20000580

0800424c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08e      	sub	sp, #56	; 0x38
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004260:	f107 031c 	add.w	r3, r7, #28
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800426c:	463b      	mov	r3, r7
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	611a      	str	r2, [r3, #16]
 800427a:	615a      	str	r2, [r3, #20]
 800427c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800427e:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <MX_TIM3_Init+0xe8>)
 8004280:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <MX_TIM3_Init+0xec>)
 8004282:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <MX_TIM3_Init+0xe8>)
 8004286:	22f9      	movs	r2, #249	; 0xf9
 8004288:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800428a:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <MX_TIM3_Init+0xe8>)
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <MX_TIM3_Init+0xe8>)
 8004292:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004296:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <MX_TIM3_Init+0xe8>)
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800429e:	4b25      	ldr	r3, [pc, #148]	; (8004334 <MX_TIM3_Init+0xe8>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042a4:	4823      	ldr	r0, [pc, #140]	; (8004334 <MX_TIM3_Init+0xe8>)
 80042a6:	f004 f96f 	bl	8008588 <HAL_TIM_Base_Init>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80042b0:	f7ff fd1c 	bl	8003cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042be:	4619      	mov	r1, r3
 80042c0:	481c      	ldr	r0, [pc, #112]	; (8004334 <MX_TIM3_Init+0xe8>)
 80042c2:	f004 fe3d 	bl	8008f40 <HAL_TIM_ConfigClockSource>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80042cc:	f7ff fd0e 	bl	8003cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042d0:	4818      	ldr	r0, [pc, #96]	; (8004334 <MX_TIM3_Init+0xe8>)
 80042d2:	f004 fa29 	bl	8008728 <HAL_TIM_PWM_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80042dc:	f7ff fd06 	bl	8003cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042e8:	f107 031c 	add.w	r3, r7, #28
 80042ec:	4619      	mov	r1, r3
 80042ee:	4811      	ldr	r0, [pc, #68]	; (8004334 <MX_TIM3_Init+0xe8>)
 80042f0:	f005 fadc 	bl	80098ac <HAL_TIMEx_MasterConfigSynchronization>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80042fa:	f7ff fcf7 	bl	8003cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042fe:	2360      	movs	r3, #96	; 0x60
 8004300:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 8004302:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004306:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004310:	463b      	mov	r3, r7
 8004312:	2200      	movs	r2, #0
 8004314:	4619      	mov	r1, r3
 8004316:	4807      	ldr	r0, [pc, #28]	; (8004334 <MX_TIM3_Init+0xe8>)
 8004318:	f004 fd02 	bl	8008d20 <HAL_TIM_PWM_ConfigChannel>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8004322:	f7ff fce3 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004326:	4803      	ldr	r0, [pc, #12]	; (8004334 <MX_TIM3_Init+0xe8>)
 8004328:	f000 f85c 	bl	80043e4 <HAL_TIM_MspPostInit>

}
 800432c:	bf00      	nop
 800432e:	3738      	adds	r7, #56	; 0x38
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	200004e8 	.word	0x200004e8
 8004338:	40000400 	.word	0x40000400

0800433c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <HAL_TIM_Base_MspInit+0x9c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d114      	bne.n	8004378 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800434e:	4b23      	ldr	r3, [pc, #140]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4a22      	ldr	r2, [pc, #136]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6453      	str	r3, [r2, #68]	; 0x44
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2101      	movs	r1, #1
 800436a:	2019      	movs	r0, #25
 800436c:	f001 fa3b 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004370:	2019      	movs	r0, #25
 8004372:	f001 fa54 	bl	800581e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004376:	e02a      	b.n	80043ce <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d114      	bne.n	80043ac <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a15      	ldr	r2, [pc, #84]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2102      	movs	r1, #2
 800439e:	201c      	movs	r0, #28
 80043a0:	f001 fa21 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043a4:	201c      	movs	r0, #28
 80043a6:	f001 fa3a 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 80043aa:	e010      	b.n	80043ce <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <HAL_TIM_Base_MspInit+0xa4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10b      	bne.n	80043ce <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_TIM_Base_MspInit+0xa0>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40000400 	.word	0x40000400

080043e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a11      	ldr	r2, [pc, #68]	; (8004448 <HAL_TIM_MspPostInit+0x64>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d11b      	bne.n	800443e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_TIM_MspPostInit+0x68>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <HAL_TIM_MspPostInit+0x68>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_TIM_MspPostInit+0x68>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800441e:	2340      	movs	r3, #64	; 0x40
 8004420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004422:	2302      	movs	r3, #2
 8004424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800442e:	2302      	movs	r3, #2
 8004430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	4619      	mov	r1, r3
 8004438:	4805      	ldr	r0, [pc, #20]	; (8004450 <HAL_TIM_MspPostInit+0x6c>)
 800443a:	f001 fa0b 	bl	8005854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800443e:	bf00      	nop
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40000400 	.word	0x40000400
 800444c:	40023800 	.word	0x40023800
 8004450:	40020000 	.word	0x40020000

08004454 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <MX_UART4_Init+0x58>)
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <MX_UART4_Init+0x5c>)
 800445c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <MX_UART4_Init+0x58>)
 8004460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004464:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <MX_UART4_Init+0x58>)
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <MX_UART4_Init+0x58>)
 800446e:	2200      	movs	r2, #0
 8004470:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <MX_UART4_Init+0x58>)
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <MX_UART4_Init+0x58>)
 800447a:	220c      	movs	r2, #12
 800447c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <MX_UART4_Init+0x58>)
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <MX_UART4_Init+0x58>)
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <MX_UART4_Init+0x58>)
 800448c:	2200      	movs	r2, #0
 800448e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <MX_UART4_Init+0x58>)
 8004492:	2200      	movs	r2, #0
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004496:	4805      	ldr	r0, [pc, #20]	; (80044ac <MX_UART4_Init+0x58>)
 8004498:	f005 fab4 	bl	8009a04 <HAL_UART_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80044a2:	f7ff fc23 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200006d4 	.word	0x200006d4
 80044b0:	40004c00 	.word	0x40004c00

080044b4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044ba:	4a15      	ldr	r2, [pc, #84]	; (8004510 <MX_USART1_UART_Init+0x5c>)
 80044bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044da:	220c      	movs	r2, #12
 80044dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044f6:	4805      	ldr	r0, [pc, #20]	; (800450c <MX_USART1_UART_Init+0x58>)
 80044f8:	f005 fa84 	bl	8009a04 <HAL_UART_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004502:	f7ff fbf3 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000650 	.word	0x20000650
 8004510:	40011000 	.word	0x40011000

08004514 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <MX_USART3_UART_Init+0x58>)
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <MX_USART3_UART_Init+0x5c>)
 800451c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <MX_USART3_UART_Init+0x58>)
 8004520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004524:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <MX_USART3_UART_Init+0x58>)
 8004528:	2200      	movs	r2, #0
 800452a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <MX_USART3_UART_Init+0x58>)
 800452e:	2200      	movs	r2, #0
 8004530:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004532:	4b0e      	ldr	r3, [pc, #56]	; (800456c <MX_USART3_UART_Init+0x58>)
 8004534:	2200      	movs	r2, #0
 8004536:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <MX_USART3_UART_Init+0x58>)
 800453a:	220c      	movs	r2, #12
 800453c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <MX_USART3_UART_Init+0x58>)
 8004540:	2200      	movs	r2, #0
 8004542:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <MX_USART3_UART_Init+0x58>)
 8004546:	2200      	movs	r2, #0
 8004548:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <MX_USART3_UART_Init+0x58>)
 800454c:	2200      	movs	r2, #0
 800454e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <MX_USART3_UART_Init+0x58>)
 8004552:	2200      	movs	r2, #0
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004556:	4805      	ldr	r0, [pc, #20]	; (800456c <MX_USART3_UART_Init+0x58>)
 8004558:	f005 fa54 	bl	8009a04 <HAL_UART_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004562:	f7ff fbc3 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200005cc 	.word	0x200005cc
 8004570:	40004800 	.word	0x40004800

08004574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08e      	sub	sp, #56	; 0x38
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a4e      	ldr	r2, [pc, #312]	; (80046cc <HAL_UART_MspInit+0x158>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d128      	bne.n	80045e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004596:	4b4e      	ldr	r3, [pc, #312]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	4a4d      	ldr	r2, [pc, #308]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 800459c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045a0:	6413      	str	r3, [r2, #64]	; 0x40
 80045a2:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ae:	4b48      	ldr	r3, [pc, #288]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4a47      	ldr	r2, [pc, #284]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 80045b4:	f043 0308 	orr.w	r3, r3, #8
 80045b8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ba:	4b45      	ldr	r3, [pc, #276]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045c6:	2303      	movs	r3, #3
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ca:	2302      	movs	r3, #2
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d2:	2303      	movs	r3, #3
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80045d6:	2308      	movs	r3, #8
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045de:	4619      	mov	r1, r3
 80045e0:	483c      	ldr	r0, [pc, #240]	; (80046d4 <HAL_UART_MspInit+0x160>)
 80045e2:	f001 f937 	bl	8005854 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80045e6:	e06c      	b.n	80046c2 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3a      	ldr	r2, [pc, #232]	; (80046d8 <HAL_UART_MspInit+0x164>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d139      	bne.n	8004666 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045f2:	4b37      	ldr	r3, [pc, #220]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	4a36      	ldr	r2, [pc, #216]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 80045f8:	f043 0310 	orr.w	r3, r3, #16
 80045fc:	6453      	str	r3, [r2, #68]	; 0x44
 80045fe:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800460a:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6313      	str	r3, [r2, #48]	; 0x30
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004628:	2302      	movs	r3, #2
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004630:	2303      	movs	r3, #3
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004634:	2304      	movs	r3, #4
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800463c:	4619      	mov	r1, r3
 800463e:	4827      	ldr	r0, [pc, #156]	; (80046dc <HAL_UART_MspInit+0x168>)
 8004640:	f001 f908 	bl	8005854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004644:	2340      	movs	r3, #64	; 0x40
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004654:	2307      	movs	r3, #7
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800465c:	4619      	mov	r1, r3
 800465e:	481f      	ldr	r0, [pc, #124]	; (80046dc <HAL_UART_MspInit+0x168>)
 8004660:	f001 f8f8 	bl	8005854 <HAL_GPIO_Init>
}
 8004664:	e02d      	b.n	80046c2 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART3)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_UART_MspInit+0x16c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d128      	bne.n	80046c2 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004670:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 8004676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800467a:	6413      	str	r3, [r2, #64]	; 0x40
 800467c:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 800468e:	f043 0308 	orr.w	r3, r3, #8
 8004692:	6313      	str	r3, [r2, #48]	; 0x30
 8004694:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <HAL_UART_MspInit+0x15c>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80046a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a6:	2302      	movs	r3, #2
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ae:	2303      	movs	r3, #3
 80046b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046b2:	2307      	movs	r3, #7
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ba:	4619      	mov	r1, r3
 80046bc:	4805      	ldr	r0, [pc, #20]	; (80046d4 <HAL_UART_MspInit+0x160>)
 80046be:	f001 f8c9 	bl	8005854 <HAL_GPIO_Init>
}
 80046c2:	bf00      	nop
 80046c4:	3738      	adds	r7, #56	; 0x38
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40004c00 	.word	0x40004c00
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40020c00 	.word	0x40020c00
 80046d8:	40011000 	.word	0x40011000
 80046dc:	40020400 	.word	0x40020400
 80046e0:	40004800 	.word	0x40004800

080046e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80046e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800471c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046ea:	e003      	b.n	80046f4 <LoopCopyDataInit>

080046ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046f2:	3104      	adds	r1, #4

080046f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046f4:	480b      	ldr	r0, [pc, #44]	; (8004724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80046f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80046fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80046fc:	d3f6      	bcc.n	80046ec <CopyDataInit>
  ldr  r2, =_sbss
 80046fe:	4a0b      	ldr	r2, [pc, #44]	; (800472c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004700:	e002      	b.n	8004708 <LoopFillZerobss>

08004702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004704:	f842 3b04 	str.w	r3, [r2], #4

08004708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800470a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800470c:	d3f9      	bcc.n	8004702 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800470e:	f7ff fcc5 	bl	800409c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004712:	f005 fef9 	bl	800a508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004716:	f7fe fe4d 	bl	80033b4 <main>
  bx  lr    
 800471a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800471c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004720:	0800d94c 	.word	0x0800d94c
  ldr  r0, =_sdata
 8004724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004728:	200002a0 	.word	0x200002a0
  ldr  r2, =_sbss
 800472c:	200002a0 	.word	0x200002a0
  ldr  r3, = _ebss
 8004730:	2000076c 	.word	0x2000076c

08004734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004734:	e7fe      	b.n	8004734 <ADC_IRQHandler>

08004736 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8004736:	b590      	push	{r4, r7, lr}
 8004738:	b08b      	sub	sp, #44	; 0x2c
 800473a:	af00      	add	r7, sp, #0
 800473c:	4604      	mov	r4, r0
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	461a      	mov	r2, r3
 8004744:	4623      	mov	r3, r4
 8004746:	80fb      	strh	r3, [r7, #6]
 8004748:	4603      	mov	r3, r0
 800474a:	80bb      	strh	r3, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	f1c3 0301 	rsb	r3, r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800476e:	e061      	b.n	8004834 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e018      	b.n	80047ac <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	b298      	uxth	r0, r3
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	b29a      	uxth	r2, r3
 8004782:	88bb      	ldrh	r3, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	b29b      	uxth	r3, r3
 8004788:	883a      	ldrh	r2, [r7, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	f000 fd02 	bl	8005194 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	b298      	uxth	r0, r3
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	b29b      	uxth	r3, r3
 8004798:	88ba      	ldrh	r2, [r7, #4]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	b29b      	uxth	r3, r3
 800479e:	883a      	ldrh	r2, [r7, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	f000 fcf7 	bl	8005194 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3301      	adds	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	4413      	add	r3, r2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	dde0      	ble.n	800477a <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e018      	b.n	80047f4 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	b298      	uxth	r0, r3
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	88bb      	ldrh	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	883a      	ldrh	r2, [r7, #0]
 80047d2:	4619      	mov	r1, r3
 80047d4:	f000 fcde 	bl	8005194 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	b298      	uxth	r0, r3
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	b29b      	uxth	r3, r3
 80047e0:	88ba      	ldrh	r2, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	883a      	ldrh	r2, [r7, #0]
 80047e8:	4619      	mov	r1, r3
 80047ea:	f000 fcd3 	bl	8005194 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	4413      	add	r3, r2
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	dde0      	ble.n	80047c2 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	3301      	adds	r3, #1
 8004804:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	4413      	add	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3302      	adds	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005a      	lsls	r2, r3, #1
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	dd09      	ble.n	8004834 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	3b01      	subs	r3, #1
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3302      	adds	r3, #2
 8004832:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	429a      	cmp	r2, r3
 800483a:	da99      	bge.n	8004770 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	372c      	adds	r7, #44	; 0x2c
 8004842:	46bd      	mov	sp, r7
 8004844:	bd90      	pop	{r4, r7, pc}

08004846 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8004846:	b590      	push	{r4, r7, lr}
 8004848:	b087      	sub	sp, #28
 800484a:	af00      	add	r7, sp, #0
 800484c:	4604      	mov	r4, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	461a      	mov	r2, r3
 8004854:	4623      	mov	r3, r4
 8004856:	80fb      	strh	r3, [r7, #6]
 8004858:	4603      	mov	r3, r0
 800485a:	80bb      	strh	r3, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
 8004860:	4613      	mov	r3, r2
 8004862:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004888:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 800488c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	d501      	bpl.n	800489e <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 800489a:	2301      	movs	r3, #1
 800489c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 80048a4:	883a      	ldrh	r2, [r7, #0]
 80048a6:	88bb      	ldrh	r3, [r7, #4]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048b2:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 80048b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d501      	bpl.n	80048c8 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 80048c4:	2301      	movs	r3, #1
 80048c6:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80048ce:	887a      	ldrh	r2, [r7, #2]
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	82fb      	strh	r3, [r7, #22]
 80048d6:	e003      	b.n	80048e0 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80048d8:	88fa      	ldrh	r2, [r7, #6]
 80048da:	887b      	ldrh	r3, [r7, #2]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80048e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048e2:	8afa      	ldrh	r2, [r7, #22]
 80048e4:	88b9      	ldrh	r1, [r7, #4]
 80048e6:	88f8      	ldrh	r0, [r7, #6]
 80048e8:	f000 fd8a 	bl	8005400 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 80048ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ee:	8afa      	ldrh	r2, [r7, #22]
 80048f0:	8839      	ldrh	r1, [r7, #0]
 80048f2:	88f8      	ldrh	r0, [r7, #6]
 80048f4:	f000 fd84 	bl	8005400 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80048f8:	7cbb      	ldrb	r3, [r7, #18]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d104      	bne.n	8004908 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 80048fe:	883a      	ldrh	r2, [r7, #0]
 8004900:	88bb      	ldrh	r3, [r7, #4]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	82bb      	strh	r3, [r7, #20]
 8004906:	e003      	b.n	8004910 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8004908:	88ba      	ldrh	r2, [r7, #4]
 800490a:	883b      	ldrh	r3, [r7, #0]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8004910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004912:	8aba      	ldrh	r2, [r7, #20]
 8004914:	88b9      	ldrh	r1, [r7, #4]
 8004916:	88f8      	ldrh	r0, [r7, #6]
 8004918:	f000 fdb6 	bl	8005488 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 800491c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800491e:	8aba      	ldrh	r2, [r7, #20]
 8004920:	88b9      	ldrh	r1, [r7, #4]
 8004922:	8878      	ldrh	r0, [r7, #2]
 8004924:	f000 fdb0 	bl	8005488 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8004928:	8afb      	ldrh	r3, [r7, #22]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800492e:	8abb      	ldrh	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8004934:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004936:	8839      	ldrh	r1, [r7, #0]
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fc2a 	bl	8005194 <ILI9341_Draw_Pixel>
	}
	
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}

08004948 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b089      	sub	sp, #36	; 0x24
 800494c:	af02      	add	r7, sp, #8
 800494e:	4604      	mov	r4, r0
 8004950:	4608      	mov	r0, r1
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	4623      	mov	r3, r4
 8004958:	80fb      	strh	r3, [r7, #6]
 800495a:	4603      	mov	r3, r0
 800495c:	80bb      	strh	r3, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	807b      	strh	r3, [r7, #2]
 8004962:	4613      	mov	r3, r2
 8004964:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	da01      	bge.n	8004994 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8004990:	2301      	movs	r3, #1
 8004992:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8004998:	883a      	ldrh	r2, [r7, #0]
 800499a:	88bb      	ldrh	r3, [r7, #4]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da01      	bge.n	80049aa <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80049a6:	2301      	movs	r3, #1
 80049a8:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80049aa:	7cfb      	ldrb	r3, [r7, #19]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80049b0:	887a      	ldrh	r2, [r7, #2]
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	823b      	strh	r3, [r7, #16]
 80049bc:	e005      	b.n	80049ca <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80049ca:	7cbb      	ldrb	r3, [r7, #18]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80049d0:	883a      	ldrh	r2, [r7, #0]
 80049d2:	88bb      	ldrh	r3, [r7, #4]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80049d8:	88bb      	ldrh	r3, [r7, #4]
 80049da:	81fb      	strh	r3, [r7, #14]
 80049dc:	e005      	b.n	80049ea <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80049de:	88ba      	ldrh	r2, [r7, #4]
 80049e0:	883b      	ldrh	r3, [r7, #0]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80049e6:	883b      	ldrh	r3, [r7, #0]
 80049e8:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80049ea:	8abc      	ldrh	r4, [r7, #20]
 80049ec:	8afa      	ldrh	r2, [r7, #22]
 80049ee:	89f9      	ldrh	r1, [r7, #14]
 80049f0:	8a38      	ldrh	r0, [r7, #16]
 80049f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	4623      	mov	r3, r4
 80049f8:	f000 fca6 	bl	8005348 <ILI9341_Draw_Rectangle>
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	71fb      	strb	r3, [r7, #7]
 8004a16:	4603      	mov	r3, r0
 8004a18:	71bb      	strb	r3, [r7, #6]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	717b      	strb	r3, [r7, #5]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b1f      	cmp	r3, #31
 8004a2a:	d802      	bhi.n	8004a32 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	71fb      	strb	r3, [r7, #7]
 8004a30:	e002      	b.n	8004a38 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
 8004a34:	3b20      	subs	r3, #32
 8004a36:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	753b      	strb	r3, [r7, #20]
 8004a3c:	e012      	b.n	8004a64 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8004a3e:	7dfa      	ldrb	r2, [r7, #23]
 8004a40:	7d38      	ldrb	r0, [r7, #20]
 8004a42:	7d39      	ldrb	r1, [r7, #20]
 8004a44:	4c3c      	ldr	r4, [pc, #240]	; (8004b38 <ILI9341_Draw_Char+0x134>)
 8004a46:	4613      	mov	r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4423      	add	r3, r4
 8004a50:	4403      	add	r3, r0
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	f107 0318 	add.w	r3, r7, #24
 8004a58:	440b      	add	r3, r1
 8004a5a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004a5e:	7d3b      	ldrb	r3, [r7, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	753b      	strb	r3, [r7, #20]
 8004a64:	7d3b      	ldrb	r3, [r7, #20]
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d9e9      	bls.n	8004a3e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8004a6a:	79bb      	ldrb	r3, [r7, #6]
 8004a6c:	b298      	uxth	r0, r3
 8004a6e:	797b      	ldrb	r3, [r7, #5]
 8004a70:	b299      	uxth	r1, r3
 8004a72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a74:	461a      	mov	r2, r3
 8004a76:	0052      	lsls	r2, r2, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	b29c      	uxth	r4, r3
 8004a84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4623      	mov	r3, r4
 8004a8a:	f000 fc5d 	bl	8005348 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	757b      	strb	r3, [r7, #21]
 8004a92:	e048      	b.n	8004b26 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004a94:	2300      	movs	r3, #0
 8004a96:	75bb      	strb	r3, [r7, #22]
 8004a98:	e03f      	b.n	8004b1a <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8004a9a:	7d7b      	ldrb	r3, [r7, #21]
 8004a9c:	f107 0218 	add.w	r2, r7, #24
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	7dbb      	ldrb	r3, [r7, #22]
 8004aaa:	fa42 f303 	asr.w	r3, r2, r3
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02e      	beq.n	8004b14 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8004ab6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d110      	bne.n	8004ade <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8004abc:	79bb      	ldrb	r3, [r7, #6]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	7d7b      	ldrb	r3, [r7, #21]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	b298      	uxth	r0, r3
 8004ac8:	797b      	ldrb	r3, [r7, #5]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	7dbb      	ldrb	r3, [r7, #22]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	887a      	ldrh	r2, [r7, #2]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f000 fb5c 	bl	8005194 <ILI9341_Draw_Pixel>
 8004adc:	e01a      	b.n	8004b14 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8004ade:	79bb      	ldrb	r3, [r7, #6]
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	7d7b      	ldrb	r3, [r7, #21]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004ae8:	fb11 f303 	smulbb	r3, r1, r3
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	b298      	uxth	r0, r3
 8004af2:	797b      	ldrb	r3, [r7, #5]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	7dbb      	ldrb	r3, [r7, #22]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004afc:	fb11 f303 	smulbb	r3, r1, r3
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	b299      	uxth	r1, r3
 8004b06:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8004b08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4623      	mov	r3, r4
 8004b10:	f000 fc1a 	bl	8005348 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004b14:	7dbb      	ldrb	r3, [r7, #22]
 8004b16:	3301      	adds	r3, #1
 8004b18:	75bb      	strb	r3, [r7, #22]
 8004b1a:	7dbb      	ldrb	r3, [r7, #22]
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	d9bc      	bls.n	8004a9a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004b20:	7d7b      	ldrb	r3, [r7, #21]
 8004b22:	3301      	adds	r3, #1
 8004b24:	757b      	strb	r3, [r7, #21]
 8004b26:	7d7b      	ldrb	r3, [r7, #21]
 8004b28:	2b05      	cmp	r3, #5
 8004b2a:	d9b3      	bls.n	8004a94 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	0800d318 	.word	0x0800d318

08004b3c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8004b3c:	b590      	push	{r4, r7, lr}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	70fb      	strb	r3, [r7, #3]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	70bb      	strb	r3, [r7, #2]
 8004b52:	4613      	mov	r3, r2
 8004b54:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8004b56:	e017      	b.n	8004b88 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	7818      	ldrb	r0, [r3, #0]
 8004b60:	883c      	ldrh	r4, [r7, #0]
 8004b62:	78ba      	ldrb	r2, [r7, #2]
 8004b64:	78f9      	ldrb	r1, [r7, #3]
 8004b66:	8bbb      	ldrh	r3, [r7, #28]
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	8b3b      	ldrh	r3, [r7, #24]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4623      	mov	r3, r4
 8004b70:	f7ff ff48 	bl	8004a04 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8004b74:	8b3b      	ldrh	r3, [r7, #24]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	0052      	lsls	r2, r2, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	4413      	add	r3, r2
 8004b86:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e3      	bne.n	8004b58 <ILI9341_Draw_Text+0x1c>
    }
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd90      	pop	{r4, r7, pc}
	...

08004b9c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8004ba0:	f7ff f8dc 	bl	8003d5c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8004ba4:	f7fb feac 	bl	8000900 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bae:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <ILI9341_SPI_Init+0x1c>)
 8004bb0:	f001 f814 	bl	8005bdc <HAL_GPIO_WritePin>
}
 8004bb4:	bf00      	nop
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40020800 	.word	0x40020800

08004bbc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8004bc6:	1df9      	adds	r1, r7, #7
 8004bc8:	2301      	movs	r3, #1
 8004bca:	2201      	movs	r2, #1
 8004bcc:	4803      	ldr	r0, [pc, #12]	; (8004bdc <ILI9341_SPI_Send+0x20>)
 8004bce:	f003 fa0c 	bl	8007fea <HAL_SPI_Transmit>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000484 	.word	0x20000484

08004be0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004bea:	2200      	movs	r2, #0
 8004bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bf0:	480b      	ldr	r0, [pc, #44]	; (8004c20 <ILI9341_Write_Command+0x40>)
 8004bf2:	f000 fff3 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bfc:	4808      	ldr	r0, [pc, #32]	; (8004c20 <ILI9341_Write_Command+0x40>)
 8004bfe:	f000 ffed 	bl	8005bdc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ffd9 	bl	8004bbc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c10:	4803      	ldr	r0, [pc, #12]	; (8004c20 <ILI9341_Write_Command+0x40>)
 8004c12:	f000 ffe3 	bl	8005bdc <HAL_GPIO_WritePin>
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40020800 	.word	0x40020800

08004c24 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c34:	480b      	ldr	r0, [pc, #44]	; (8004c64 <ILI9341_Write_Data+0x40>)
 8004c36:	f000 ffd1 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c40:	4808      	ldr	r0, [pc, #32]	; (8004c64 <ILI9341_Write_Data+0x40>)
 8004c42:	f000 ffcb 	bl	8005bdc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ffb7 	bl	8004bbc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c54:	4803      	ldr	r0, [pc, #12]	; (8004c64 <ILI9341_Write_Data+0x40>)
 8004c56:	f000 ffc1 	bl	8005bdc <HAL_GPIO_WritePin>
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40020800 	.word	0x40020800

08004c68 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	80fb      	strh	r3, [r7, #6]
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80bb      	strh	r3, [r7, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	807b      	strh	r3, [r7, #2]
 8004c82:	4613      	mov	r3, r2
 8004c84:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8004c86:	202a      	movs	r0, #42	; 0x2a
 8004c88:	f7ff ffaa 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ffc5 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ffc0 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8004ca4:	887b      	ldrh	r3, [r7, #2]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff ffb9 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ffb4 	bl	8004c24 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8004cbc:	202b      	movs	r0, #43	; 0x2b
 8004cbe:	f7ff ff8f 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8004cc2:	88bb      	ldrh	r3, [r7, #4]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff ffaa 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8004cd0:	88bb      	ldrh	r3, [r7, #4]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ffa5 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8004cda:	883b      	ldrh	r3, [r7, #0]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff ff9e 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8004ce8:	883b      	ldrh	r3, [r7, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff99 	bl	8004c24 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8004cf2:	202c      	movs	r0, #44	; 0x2c
 8004cf4:	f7ff ff74 	bl	8004be0 <ILI9341_Write_Command>
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}

08004d00 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004d04:	2201      	movs	r2, #1
 8004d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d0a:	480b      	ldr	r0, [pc, #44]	; (8004d38 <ILI9341_Reset+0x38>)
 8004d0c:	f000 ff66 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004d10:	20c8      	movs	r0, #200	; 0xc8
 8004d12:	f000 fc69 	bl	80055e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
 8004d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d1c:	4806      	ldr	r0, [pc, #24]	; (8004d38 <ILI9341_Reset+0x38>)
 8004d1e:	f000 ff5d 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004d22:	20c8      	movs	r0, #200	; 0xc8
 8004d24:	f000 fc60 	bl	80055e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d2e:	4802      	ldr	r0, [pc, #8]	; (8004d38 <ILI9341_Reset+0x38>)
 8004d30:	f000 ff54 	bl	8005bdc <HAL_GPIO_WritePin>
}
 8004d34:	bf00      	nop
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40020800 	.word	0x40020800

08004d3c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8004d4a:	2036      	movs	r0, #54	; 0x36
 8004d4c:	f7ff ff48 	bl	8004be0 <ILI9341_Write_Command>
HAL_Delay(1);
 8004d50:	2001      	movs	r0, #1
 8004d52:	f000 fc49 	bl	80055e8 <HAL_Delay>
	
switch(screen_rotation) 
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d837      	bhi.n	8004dcc <ILI9341_Set_Rotation+0x90>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <ILI9341_Set_Rotation+0x28>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d8b 	.word	0x08004d8b
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004db7 	.word	0x08004db7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8004d74:	2048      	movs	r0, #72	; 0x48
 8004d76:	f7ff ff55 	bl	8004c24 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8004d7a:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <ILI9341_Set_Rotation+0x9c>)
 8004d7c:	22f0      	movs	r2, #240	; 0xf0
 8004d7e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <ILI9341_Set_Rotation+0xa0>)
 8004d82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d86:	801a      	strh	r2, [r3, #0]
			break;
 8004d88:	e021      	b.n	8004dce <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8004d8a:	2028      	movs	r0, #40	; 0x28
 8004d8c:	f7ff ff4a 	bl	8004c24 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004d90:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <ILI9341_Set_Rotation+0x9c>)
 8004d92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <ILI9341_Set_Rotation+0xa0>)
 8004d9a:	22f0      	movs	r2, #240	; 0xf0
 8004d9c:	801a      	strh	r2, [r3, #0]
			break;
 8004d9e:	e016      	b.n	8004dce <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8004da0:	2088      	movs	r0, #136	; 0x88
 8004da2:	f7ff ff3f 	bl	8004c24 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <ILI9341_Set_Rotation+0x9c>)
 8004da8:	22f0      	movs	r2, #240	; 0xf0
 8004daa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <ILI9341_Set_Rotation+0xa0>)
 8004dae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004db2:	801a      	strh	r2, [r3, #0]
			break;
 8004db4:	e00b      	b.n	8004dce <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8004db6:	20e8      	movs	r0, #232	; 0xe8
 8004db8:	f7ff ff34 	bl	8004c24 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <ILI9341_Set_Rotation+0x9c>)
 8004dbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004dc2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <ILI9341_Set_Rotation+0xa0>)
 8004dc6:	22f0      	movs	r2, #240	; 0xf0
 8004dc8:	801a      	strh	r2, [r3, #0]
			break;
 8004dca:	e000      	b.n	8004dce <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004dcc:	bf00      	nop
	}
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200000c6 	.word	0x200000c6
 8004ddc:	200000c4 	.word	0x200000c4

08004de0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004de4:	2201      	movs	r2, #1
 8004de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dea:	4802      	ldr	r0, [pc, #8]	; (8004df4 <ILI9341_Enable+0x14>)
 8004dec:	f000 fef6 	bl	8005bdc <HAL_GPIO_WritePin>
}
 8004df0:	bf00      	nop
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40020800 	.word	0x40020800

08004df8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8004dfc:	f7ff fff0 	bl	8004de0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8004e00:	f7ff fecc 	bl	8004b9c <ILI9341_SPI_Init>
ILI9341_Reset();
 8004e04:	f7ff ff7c 	bl	8004d00 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8004e08:	2001      	movs	r0, #1
 8004e0a:	f7ff fee9 	bl	8004be0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8004e0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e12:	f000 fbe9 	bl	80055e8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8004e16:	20cb      	movs	r0, #203	; 0xcb
 8004e18:	f7ff fee2 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8004e1c:	2039      	movs	r0, #57	; 0x39
 8004e1e:	f7ff ff01 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8004e22:	202c      	movs	r0, #44	; 0x2c
 8004e24:	f7ff fefe 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f7ff fefb 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8004e2e:	2034      	movs	r0, #52	; 0x34
 8004e30:	f7ff fef8 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8004e34:	2002      	movs	r0, #2
 8004e36:	f7ff fef5 	bl	8004c24 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8004e3a:	20cf      	movs	r0, #207	; 0xcf
 8004e3c:	f7ff fed0 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004e40:	2000      	movs	r0, #0
 8004e42:	f7ff feef 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004e46:	20c1      	movs	r0, #193	; 0xc1
 8004e48:	f7ff feec 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8004e4c:	2030      	movs	r0, #48	; 0x30
 8004e4e:	f7ff fee9 	bl	8004c24 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8004e52:	20e8      	movs	r0, #232	; 0xe8
 8004e54:	f7ff fec4 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8004e58:	2085      	movs	r0, #133	; 0x85
 8004e5a:	f7ff fee3 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7ff fee0 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8004e64:	2078      	movs	r0, #120	; 0x78
 8004e66:	f7ff fedd 	bl	8004c24 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8004e6a:	20ea      	movs	r0, #234	; 0xea
 8004e6c:	f7ff feb8 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004e70:	2000      	movs	r0, #0
 8004e72:	f7ff fed7 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7ff fed4 	bl	8004c24 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8004e7c:	20ed      	movs	r0, #237	; 0xed
 8004e7e:	f7ff feaf 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8004e82:	2064      	movs	r0, #100	; 0x64
 8004e84:	f7ff fece 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004e88:	2003      	movs	r0, #3
 8004e8a:	f7ff fecb 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8004e8e:	2012      	movs	r0, #18
 8004e90:	f7ff fec8 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8004e94:	2081      	movs	r0, #129	; 0x81
 8004e96:	f7ff fec5 	bl	8004c24 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8004e9a:	20f7      	movs	r0, #247	; 0xf7
 8004e9c:	f7ff fea0 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8004ea0:	2020      	movs	r0, #32
 8004ea2:	f7ff febf 	bl	8004c24 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8004ea6:	20c0      	movs	r0, #192	; 0xc0
 8004ea8:	f7ff fe9a 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8004eac:	2023      	movs	r0, #35	; 0x23
 8004eae:	f7ff feb9 	bl	8004c24 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8004eb2:	20c1      	movs	r0, #193	; 0xc1
 8004eb4:	f7ff fe94 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8004eb8:	2010      	movs	r0, #16
 8004eba:	f7ff feb3 	bl	8004c24 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8004ebe:	20c5      	movs	r0, #197	; 0xc5
 8004ec0:	f7ff fe8e 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8004ec4:	203e      	movs	r0, #62	; 0x3e
 8004ec6:	f7ff fead 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8004eca:	2028      	movs	r0, #40	; 0x28
 8004ecc:	f7ff feaa 	bl	8004c24 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8004ed0:	20c7      	movs	r0, #199	; 0xc7
 8004ed2:	f7ff fe85 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8004ed6:	2086      	movs	r0, #134	; 0x86
 8004ed8:	f7ff fea4 	bl	8004c24 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8004edc:	2036      	movs	r0, #54	; 0x36
 8004ede:	f7ff fe7f 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8004ee2:	2048      	movs	r0, #72	; 0x48
 8004ee4:	f7ff fe9e 	bl	8004c24 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8004ee8:	203a      	movs	r0, #58	; 0x3a
 8004eea:	f7ff fe79 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8004eee:	2055      	movs	r0, #85	; 0x55
 8004ef0:	f7ff fe98 	bl	8004c24 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8004ef4:	20b1      	movs	r0, #177	; 0xb1
 8004ef6:	f7ff fe73 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004efa:	2000      	movs	r0, #0
 8004efc:	f7ff fe92 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8004f00:	2018      	movs	r0, #24
 8004f02:	f7ff fe8f 	bl	8004c24 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8004f06:	20b6      	movs	r0, #182	; 0xb6
 8004f08:	f7ff fe6a 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8004f0c:	2008      	movs	r0, #8
 8004f0e:	f7ff fe89 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8004f12:	2082      	movs	r0, #130	; 0x82
 8004f14:	f7ff fe86 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8004f18:	2027      	movs	r0, #39	; 0x27
 8004f1a:	f7ff fe83 	bl	8004c24 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8004f1e:	20f2      	movs	r0, #242	; 0xf2
 8004f20:	f7ff fe5e 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004f24:	2000      	movs	r0, #0
 8004f26:	f7ff fe7d 	bl	8004c24 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8004f2a:	2026      	movs	r0, #38	; 0x26
 8004f2c:	f7ff fe58 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8004f30:	2001      	movs	r0, #1
 8004f32:	f7ff fe77 	bl	8004c24 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8004f36:	20e0      	movs	r0, #224	; 0xe0
 8004f38:	f7ff fe52 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8004f3c:	200f      	movs	r0, #15
 8004f3e:	f7ff fe71 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004f42:	2031      	movs	r0, #49	; 0x31
 8004f44:	f7ff fe6e 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8004f48:	202b      	movs	r0, #43	; 0x2b
 8004f4a:	f7ff fe6b 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004f4e:	200c      	movs	r0, #12
 8004f50:	f7ff fe68 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f54:	200e      	movs	r0, #14
 8004f56:	f7ff fe65 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004f5a:	2008      	movs	r0, #8
 8004f5c:	f7ff fe62 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8004f60:	204e      	movs	r0, #78	; 0x4e
 8004f62:	f7ff fe5f 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8004f66:	20f1      	movs	r0, #241	; 0xf1
 8004f68:	f7ff fe5c 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8004f6c:	2037      	movs	r0, #55	; 0x37
 8004f6e:	f7ff fe59 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004f72:	2007      	movs	r0, #7
 8004f74:	f7ff fe56 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8004f78:	2010      	movs	r0, #16
 8004f7a:	f7ff fe53 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004f7e:	2003      	movs	r0, #3
 8004f80:	f7ff fe50 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f84:	200e      	movs	r0, #14
 8004f86:	f7ff fe4d 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8004f8a:	2009      	movs	r0, #9
 8004f8c:	f7ff fe4a 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004f90:	2000      	movs	r0, #0
 8004f92:	f7ff fe47 	bl	8004c24 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8004f96:	20e1      	movs	r0, #225	; 0xe1
 8004f98:	f7ff fe22 	bl	8004be0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7ff fe41 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004fa2:	200e      	movs	r0, #14
 8004fa4:	f7ff fe3e 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8004fa8:	2014      	movs	r0, #20
 8004faa:	f7ff fe3b 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004fae:	2003      	movs	r0, #3
 8004fb0:	f7ff fe38 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8004fb4:	2011      	movs	r0, #17
 8004fb6:	f7ff fe35 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004fba:	2007      	movs	r0, #7
 8004fbc:	f7ff fe32 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004fc0:	2031      	movs	r0, #49	; 0x31
 8004fc2:	f7ff fe2f 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004fc6:	20c1      	movs	r0, #193	; 0xc1
 8004fc8:	f7ff fe2c 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8004fcc:	2048      	movs	r0, #72	; 0x48
 8004fce:	f7ff fe29 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004fd2:	2008      	movs	r0, #8
 8004fd4:	f7ff fe26 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004fd8:	200f      	movs	r0, #15
 8004fda:	f7ff fe23 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004fde:	200c      	movs	r0, #12
 8004fe0:	f7ff fe20 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004fe4:	2031      	movs	r0, #49	; 0x31
 8004fe6:	f7ff fe1d 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8004fea:	2036      	movs	r0, #54	; 0x36
 8004fec:	f7ff fe1a 	bl	8004c24 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004ff0:	200f      	movs	r0, #15
 8004ff2:	f7ff fe17 	bl	8004c24 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8004ff6:	2011      	movs	r0, #17
 8004ff8:	f7ff fdf2 	bl	8004be0 <ILI9341_Write_Command>
HAL_Delay(120);
 8004ffc:	2078      	movs	r0, #120	; 0x78
 8004ffe:	f000 faf3 	bl	80055e8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8005002:	2029      	movs	r0, #41	; 0x29
 8005004:	f7ff fdec 	bl	8004be0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005008:	2000      	movs	r0, #0
 800500a:	f7ff fe97 	bl	8004d3c <ILI9341_Set_Rotation>
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8005014:	b5b0      	push	{r4, r5, r7, lr}
 8005016:	b08c      	sub	sp, #48	; 0x30
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	6039      	str	r1, [r7, #0]
 800501e:	80fb      	strh	r3, [r7, #6]
 8005020:	466b      	mov	r3, sp
 8005022:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005030:	d202      	bcs.n	8005038 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
 8005036:	e002      	b.n	800503e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8005038:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800503e:	2201      	movs	r2, #1
 8005040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005044:	483e      	ldr	r0, [pc, #248]	; (8005140 <ILI9341_Draw_Colour_Burst+0x12c>)
 8005046:	f000 fdc9 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800504a:	2200      	movs	r2, #0
 800504c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005050:	483b      	ldr	r0, [pc, #236]	; (8005140 <ILI9341_Draw_Colour_Burst+0x12c>)
 8005052:	f000 fdc3 	bl	8005bdc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	b29b      	uxth	r3, r3
 800505c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8005060:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005062:	4623      	mov	r3, r4
 8005064:	3b01      	subs	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	4620      	mov	r0, r4
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	00cb      	lsls	r3, r1, #3
 8005078:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800507c:	00c2      	lsls	r2, r0, #3
 800507e:	4620      	mov	r0, r4
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	00cb      	lsls	r3, r1, #3
 800508e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005092:	00c2      	lsls	r2, r0, #3
 8005094:	1de3      	adds	r3, r4, #7
 8005096:	08db      	lsrs	r3, r3, #3
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	ebad 0d03 	sub.w	sp, sp, r3
 800509e:	466b      	mov	r3, sp
 80050a0:	3300      	adds	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80050a4:	2300      	movs	r3, #0
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a8:	e00e      	b.n	80050c8 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	4413      	add	r3, r2
 80050b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80050b4:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	3301      	adds	r3, #1
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	b2d1      	uxtb	r1, r2
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	3302      	adds	r3, #2
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d3ec      	bcc.n	80050aa <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80050e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ea:	fb01 f202 	mul.w	r2, r1, r2
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fc:	e009      	b.n	8005112 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80050fe:	69b9      	ldr	r1, [r7, #24]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	b29a      	uxth	r2, r3
 8005104:	230a      	movs	r3, #10
 8005106:	480f      	ldr	r0, [pc, #60]	; (8005144 <ILI9341_Draw_Colour_Burst+0x130>)
 8005108:	f002 ff6f 	bl	8007fea <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	3301      	adds	r3, #1
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d3f1      	bcc.n	80050fe <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800511a:	69b9      	ldr	r1, [r7, #24]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	b29a      	uxth	r2, r3
 8005120:	230a      	movs	r3, #10
 8005122:	4808      	ldr	r0, [pc, #32]	; (8005144 <ILI9341_Draw_Colour_Burst+0x130>)
 8005124:	f002 ff61 	bl	8007fea <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005128:	2201      	movs	r2, #1
 800512a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800512e:	4804      	ldr	r0, [pc, #16]	; (8005140 <ILI9341_Draw_Colour_Burst+0x12c>)
 8005130:	f000 fd54 	bl	8005bdc <HAL_GPIO_WritePin>
 8005134:	46ad      	mov	sp, r5
}
 8005136:	bf00      	nop
 8005138:	3730      	adds	r7, #48	; 0x30
 800513a:	46bd      	mov	sp, r7
 800513c:	bdb0      	pop	{r4, r5, r7, pc}
 800513e:	bf00      	nop
 8005140:	40020800 	.word	0x40020800
 8005144:	20000484 	.word	0x20000484

08005148 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <ILI9341_Fill_Screen+0x44>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29a      	uxth	r2, r3
 8005158:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <ILI9341_Fill_Screen+0x48>)
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	2100      	movs	r1, #0
 8005160:	2000      	movs	r0, #0
 8005162:	f7ff fd81 	bl	8004c68 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <ILI9341_Fill_Screen+0x44>)
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <ILI9341_Fill_Screen+0x48>)
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	fb03 f302 	mul.w	r3, r3, r2
 8005178:	461a      	mov	r2, r3
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff ff48 	bl	8005014 <ILI9341_Draw_Colour_Burst>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	200000c6 	.word	0x200000c6
 8005190:	200000c4 	.word	0x200000c4

08005194 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	80fb      	strh	r3, [r7, #6]
 800519e:	460b      	mov	r3, r1
 80051a0:	80bb      	strh	r3, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80051a6:	4b64      	ldr	r3, [pc, #400]	; (8005338 <ILI9341_Draw_Pixel+0x1a4>)
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	88fa      	ldrh	r2, [r7, #6]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	f080 80be 	bcs.w	8005330 <ILI9341_Draw_Pixel+0x19c>
 80051b4:	4b61      	ldr	r3, [pc, #388]	; (800533c <ILI9341_Draw_Pixel+0x1a8>)
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	88ba      	ldrh	r2, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	f080 80b7 	bcs.w	8005330 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80051c2:	2200      	movs	r2, #0
 80051c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051c8:	485d      	ldr	r0, [pc, #372]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80051ca:	f000 fd07 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051d4:	485a      	ldr	r0, [pc, #360]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80051d6:	f000 fd01 	bl	8005bdc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80051da:	202a      	movs	r0, #42	; 0x2a
 80051dc:	f7ff fcee 	bl	8004bbc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80051e0:	2201      	movs	r2, #1
 80051e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051e6:	4856      	ldr	r0, [pc, #344]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80051e8:	f000 fcf8 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80051ec:	2201      	movs	r2, #1
 80051ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051f2:	4853      	ldr	r0, [pc, #332]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80051f4:	f000 fcf2 	bl	8005bdc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051fe:	4850      	ldr	r0, [pc, #320]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 8005200:	f000 fcec 	bl	8005bdc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	b29b      	uxth	r3, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	753b      	strb	r3, [r7, #20]
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	757b      	strb	r3, [r7, #21]
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	3301      	adds	r3, #1
 8005218:	121b      	asrs	r3, r3, #8
 800521a:	b2db      	uxtb	r3, r3
 800521c:	75bb      	strb	r3, [r7, #22]
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	3301      	adds	r3, #1
 8005224:	b2db      	uxtb	r3, r3
 8005226:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005228:	f107 0114 	add.w	r1, r7, #20
 800522c:	2301      	movs	r3, #1
 800522e:	2204      	movs	r2, #4
 8005230:	4844      	ldr	r0, [pc, #272]	; (8005344 <ILI9341_Draw_Pixel+0x1b0>)
 8005232:	f002 feda 	bl	8007fea <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005236:	2201      	movs	r2, #1
 8005238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800523c:	4840      	ldr	r0, [pc, #256]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 800523e:	f000 fccd 	bl	8005bdc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005242:	2200      	movs	r2, #0
 8005244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005248:	483d      	ldr	r0, [pc, #244]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 800524a:	f000 fcc7 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800524e:	2200      	movs	r2, #0
 8005250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005254:	483a      	ldr	r0, [pc, #232]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 8005256:	f000 fcc1 	bl	8005bdc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800525a:	202b      	movs	r0, #43	; 0x2b
 800525c:	f7ff fcae 	bl	8004bbc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005260:	2201      	movs	r2, #1
 8005262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005266:	4836      	ldr	r0, [pc, #216]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 8005268:	f000 fcb8 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800526c:	2201      	movs	r2, #1
 800526e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005272:	4833      	ldr	r0, [pc, #204]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 8005274:	f000 fcb2 	bl	8005bdc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005278:	2200      	movs	r2, #0
 800527a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800527e:	4830      	ldr	r0, [pc, #192]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 8005280:	f000 fcac 	bl	8005bdc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8005284:	88bb      	ldrh	r3, [r7, #4]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b29b      	uxth	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	743b      	strb	r3, [r7, #16]
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	747b      	strb	r3, [r7, #17]
 8005294:	88bb      	ldrh	r3, [r7, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	121b      	asrs	r3, r3, #8
 800529a:	b2db      	uxtb	r3, r3
 800529c:	74bb      	strb	r3, [r7, #18]
 800529e:	88bb      	ldrh	r3, [r7, #4]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80052a8:	f107 0110 	add.w	r1, r7, #16
 80052ac:	2301      	movs	r3, #1
 80052ae:	2204      	movs	r2, #4
 80052b0:	4824      	ldr	r0, [pc, #144]	; (8005344 <ILI9341_Draw_Pixel+0x1b0>)
 80052b2:	f002 fe9a 	bl	8007fea <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80052b6:	2201      	movs	r2, #1
 80052b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052bc:	4820      	ldr	r0, [pc, #128]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80052be:	f000 fc8d 	bl	8005bdc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80052c2:	2200      	movs	r2, #0
 80052c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052c8:	481d      	ldr	r0, [pc, #116]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80052ca:	f000 fc87 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80052ce:	2200      	movs	r2, #0
 80052d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052d4:	481a      	ldr	r0, [pc, #104]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80052d6:	f000 fc81 	bl	8005bdc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80052da:	202c      	movs	r0, #44	; 0x2c
 80052dc:	f7ff fc6e 	bl	8004bbc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80052e0:	2201      	movs	r2, #1
 80052e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052e6:	4816      	ldr	r0, [pc, #88]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80052e8:	f000 fc78 	bl	8005bdc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80052ec:	2201      	movs	r2, #1
 80052ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052f2:	4813      	ldr	r0, [pc, #76]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 80052f4:	f000 fc72 	bl	8005bdc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052fe:	4810      	ldr	r0, [pc, #64]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 8005300:	f000 fc6c 	bl	8005bdc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	b29b      	uxth	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	733b      	strb	r3, [r7, #12]
 800530e:	887b      	ldrh	r3, [r7, #2]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8005314:	f107 010c 	add.w	r1, r7, #12
 8005318:	2301      	movs	r3, #1
 800531a:	2202      	movs	r2, #2
 800531c:	4809      	ldr	r0, [pc, #36]	; (8005344 <ILI9341_Draw_Pixel+0x1b0>)
 800531e:	f002 fe64 	bl	8007fea <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005322:	2201      	movs	r2, #1
 8005324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005328:	4805      	ldr	r0, [pc, #20]	; (8005340 <ILI9341_Draw_Pixel+0x1ac>)
 800532a:	f000 fc57 	bl	8005bdc <HAL_GPIO_WritePin>
 800532e:	e000      	b.n	8005332 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005330:	bf00      	nop
	
}
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200000c6 	.word	0x200000c6
 800533c:	200000c4 	.word	0x200000c4
 8005340:	40020800 	.word	0x40020800
 8005344:	20000484 	.word	0x20000484

08005348 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4623      	mov	r3, r4
 8005358:	80fb      	strh	r3, [r7, #6]
 800535a:	4603      	mov	r3, r0
 800535c:	80bb      	strh	r3, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	807b      	strh	r3, [r7, #2]
 8005362:	4613      	mov	r3, r2
 8005364:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <ILI9341_Draw_Rectangle+0xb0>)
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	429a      	cmp	r2, r3
 8005370:	d23d      	bcs.n	80053ee <ILI9341_Draw_Rectangle+0xa6>
 8005372:	4b22      	ldr	r3, [pc, #136]	; (80053fc <ILI9341_Draw_Rectangle+0xb4>)
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	88ba      	ldrh	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d237      	bcs.n	80053ee <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	887b      	ldrh	r3, [r7, #2]
 8005382:	4413      	add	r3, r2
 8005384:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <ILI9341_Draw_Rectangle+0xb0>)
 8005386:	8812      	ldrh	r2, [r2, #0]
 8005388:	b292      	uxth	r2, r2
 800538a:	4293      	cmp	r3, r2
 800538c:	dd05      	ble.n	800539a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800538e:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <ILI9341_Draw_Rectangle+0xb0>)
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29a      	uxth	r2, r3
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800539a:	88ba      	ldrh	r2, [r7, #4]
 800539c:	883b      	ldrh	r3, [r7, #0]
 800539e:	4413      	add	r3, r2
 80053a0:	4a16      	ldr	r2, [pc, #88]	; (80053fc <ILI9341_Draw_Rectangle+0xb4>)
 80053a2:	8812      	ldrh	r2, [r2, #0]
 80053a4:	b292      	uxth	r2, r2
 80053a6:	4293      	cmp	r3, r2
 80053a8:	dd05      	ble.n	80053b6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <ILI9341_Draw_Rectangle+0xb4>)
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	88bb      	ldrh	r3, [r7, #4]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	887b      	ldrh	r3, [r7, #2]
 80053ba:	4413      	add	r3, r2
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29c      	uxth	r4, r3
 80053c2:	88ba      	ldrh	r2, [r7, #4]
 80053c4:	883b      	ldrh	r3, [r7, #0]
 80053c6:	4413      	add	r3, r2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	88b9      	ldrh	r1, [r7, #4]
 80053d0:	88f8      	ldrh	r0, [r7, #6]
 80053d2:	4622      	mov	r2, r4
 80053d4:	f7ff fc48 	bl	8004c68 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80053d8:	883b      	ldrh	r3, [r7, #0]
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	fb02 f303 	mul.w	r3, r2, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	8b3b      	ldrh	r3, [r7, #24]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fe14 	bl	8005014 <ILI9341_Draw_Colour_Burst>
 80053ec:	e000      	b.n	80053f0 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80053ee:	bf00      	nop
}
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200000c6 	.word	0x200000c6
 80053fc:	200000c4 	.word	0x200000c4

08005400 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4623      	mov	r3, r4
 8005410:	80fb      	strh	r3, [r7, #6]
 8005412:	4603      	mov	r3, r0
 8005414:	80bb      	strh	r3, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	807b      	strh	r3, [r7, #2]
 800541a:	4613      	mov	r3, r2
 800541c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <ILI9341_Draw_Horizontal_Line+0x80>)
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	429a      	cmp	r2, r3
 8005428:	d225      	bcs.n	8005476 <ILI9341_Draw_Horizontal_Line+0x76>
 800542a:	4b16      	ldr	r3, [pc, #88]	; (8005484 <ILI9341_Draw_Horizontal_Line+0x84>)
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	88ba      	ldrh	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d21f      	bcs.n	8005476 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	4413      	add	r3, r2
 800543c:	4a10      	ldr	r2, [pc, #64]	; (8005480 <ILI9341_Draw_Horizontal_Line+0x80>)
 800543e:	8812      	ldrh	r2, [r2, #0]
 8005440:	b292      	uxth	r2, r2
 8005442:	4293      	cmp	r3, r2
 8005444:	dd05      	ble.n	8005452 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <ILI9341_Draw_Horizontal_Line+0x80>)
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29a      	uxth	r2, r3
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	4413      	add	r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	88bb      	ldrh	r3, [r7, #4]
 8005460:	88b9      	ldrh	r1, [r7, #4]
 8005462:	88f8      	ldrh	r0, [r7, #6]
 8005464:	f7ff fc00 	bl	8004c68 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8005468:	887a      	ldrh	r2, [r7, #2]
 800546a:	883b      	ldrh	r3, [r7, #0]
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fdd0 	bl	8005014 <ILI9341_Draw_Colour_Burst>
 8005474:	e000      	b.n	8005478 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005476:	bf00      	nop
}
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bd90      	pop	{r4, r7, pc}
 800547e:	bf00      	nop
 8005480:	200000c6 	.word	0x200000c6
 8005484:	200000c4 	.word	0x200000c4

08005488 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4623      	mov	r3, r4
 8005498:	80fb      	strh	r3, [r7, #6]
 800549a:	4603      	mov	r3, r0
 800549c:	80bb      	strh	r3, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	807b      	strh	r3, [r7, #2]
 80054a2:	4613      	mov	r3, r2
 80054a4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80054a6:	4b18      	ldr	r3, [pc, #96]	; (8005508 <ILI9341_Draw_Vertical_Line+0x80>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d225      	bcs.n	80054fe <ILI9341_Draw_Vertical_Line+0x76>
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <ILI9341_Draw_Vertical_Line+0x84>)
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	88ba      	ldrh	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d21f      	bcs.n	80054fe <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 80054be:	88ba      	ldrh	r2, [r7, #4]
 80054c0:	887b      	ldrh	r3, [r7, #2]
 80054c2:	4413      	add	r3, r2
 80054c4:	4a11      	ldr	r2, [pc, #68]	; (800550c <ILI9341_Draw_Vertical_Line+0x84>)
 80054c6:	8812      	ldrh	r2, [r2, #0]
 80054c8:	b292      	uxth	r2, r2
 80054ca:	4293      	cmp	r3, r2
 80054cc:	dd05      	ble.n	80054da <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <ILI9341_Draw_Vertical_Line+0x84>)
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	88bb      	ldrh	r3, [r7, #4]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80054da:	88ba      	ldrh	r2, [r7, #4]
 80054dc:	887b      	ldrh	r3, [r7, #2]
 80054de:	4413      	add	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	88b9      	ldrh	r1, [r7, #4]
 80054ea:	88f8      	ldrh	r0, [r7, #6]
 80054ec:	f7ff fbbc 	bl	8004c68 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80054f0:	887a      	ldrh	r2, [r7, #2]
 80054f2:	883b      	ldrh	r3, [r7, #0]
 80054f4:	4611      	mov	r1, r2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fd8c 	bl	8005014 <ILI9341_Draw_Colour_Burst>
 80054fc:	e000      	b.n	8005500 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80054fe:	bf00      	nop
}
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}
 8005506:	bf00      	nop
 8005508:	200000c6 	.word	0x200000c6
 800550c:	200000c4 	.word	0x200000c4

08005510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_Init+0x34>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <HAL_Init+0x34>)
 800551a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800551e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_Init+0x34>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_Init+0x34>)
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800552c:	2003      	movs	r0, #3
 800552e:	f000 f94f 	bl	80057d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005532:	2000      	movs	r0, #0
 8005534:	f000 f808 	bl	8005548 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005538:	f7fe fc92 	bl	8003e60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40023c00 	.word	0x40023c00

08005548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005550:	4b12      	ldr	r3, [pc, #72]	; (800559c <HAL_InitTick+0x54>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_InitTick+0x58>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	4619      	mov	r1, r3
 800555a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800555e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f967 	bl	800583a <HAL_SYSTICK_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e00e      	b.n	8005594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b0f      	cmp	r3, #15
 800557a:	d80a      	bhi.n	8005592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800557c:	2200      	movs	r2, #0
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	f000 f92f 	bl	80057e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <HAL_InitTick+0x5c>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200000c0 	.word	0x200000c0
 80055a0:	200000cc 	.word	0x200000cc
 80055a4:	200000c8 	.word	0x200000c8

080055a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <HAL_IncTick+0x20>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_IncTick+0x24>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <HAL_IncTick+0x24>)
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	200000cc 	.word	0x200000cc
 80055cc:	20000758 	.word	0x20000758

080055d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return uwTick;
 80055d4:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <HAL_GetTick+0x14>)
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000758 	.word	0x20000758

080055e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055f0:	f7ff ffee 	bl	80055d0 <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d005      	beq.n	800560e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_Delay+0x44>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800560e:	bf00      	nop
 8005610:	f7ff ffde 	bl	80055d0 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	429a      	cmp	r2, r3
 800561e:	d8f7      	bhi.n	8005610 <HAL_Delay+0x28>
  {
  }
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	200000cc 	.word	0x200000cc

08005630 <__NVIC_SetPriorityGrouping>:
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <__NVIC_SetPriorityGrouping+0x40>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800564c:	4013      	ands	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <__NVIC_SetPriorityGrouping+0x44>)
 800565a:	4313      	orrs	r3, r2
 800565c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800565e:	4a04      	ldr	r2, [pc, #16]	; (8005670 <__NVIC_SetPriorityGrouping+0x40>)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	60d3      	str	r3, [r2, #12]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	e000ed00 	.word	0xe000ed00
 8005674:	05fa0000 	.word	0x05fa0000

08005678 <__NVIC_GetPriorityGrouping>:
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <__NVIC_GetPriorityGrouping+0x18>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 0307 	and.w	r3, r3, #7
}
 8005686:	4618      	mov	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	e000ed00 	.word	0xe000ed00

08005694 <__NVIC_EnableIRQ>:
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800569e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	db0b      	blt.n	80056be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	4907      	ldr	r1, [pc, #28]	; (80056cc <__NVIC_EnableIRQ+0x38>)
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2001      	movs	r0, #1
 80056b6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	e000e100 	.word	0xe000e100

080056d0 <__NVIC_SetPriority>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	db0a      	blt.n	80056fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	490c      	ldr	r1, [pc, #48]	; (800571c <__NVIC_SetPriority+0x4c>)
 80056ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ee:	0112      	lsls	r2, r2, #4
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	440b      	add	r3, r1
 80056f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056f8:	e00a      	b.n	8005710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	4908      	ldr	r1, [pc, #32]	; (8005720 <__NVIC_SetPriority+0x50>)
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	3b04      	subs	r3, #4
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	440b      	add	r3, r1
 800570e:	761a      	strb	r2, [r3, #24]
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000e100 	.word	0xe000e100
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <NVIC_EncodePriority>:
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f1c3 0307 	rsb	r3, r3, #7
 800573e:	2b04      	cmp	r3, #4
 8005740:	bf28      	it	cs
 8005742:	2304      	movcs	r3, #4
 8005744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3304      	adds	r3, #4
 800574a:	2b06      	cmp	r3, #6
 800574c:	d902      	bls.n	8005754 <NVIC_EncodePriority+0x30>
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	3b03      	subs	r3, #3
 8005752:	e000      	b.n	8005756 <NVIC_EncodePriority+0x32>
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43da      	mvns	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	401a      	ands	r2, r3
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800576c:	f04f 31ff 	mov.w	r1, #4294967295
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	43d9      	mvns	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800577c:	4313      	orrs	r3, r2
}
 800577e:	4618      	mov	r0, r3
 8005780:	3724      	adds	r7, #36	; 0x24
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800579c:	d301      	bcc.n	80057a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800579e:	2301      	movs	r3, #1
 80057a0:	e00f      	b.n	80057c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057a2:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <SysTick_Config+0x40>)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057aa:	210f      	movs	r1, #15
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	f7ff ff8e 	bl	80056d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <SysTick_Config+0x40>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <SysTick_Config+0x40>)
 80057bc:	2207      	movs	r2, #7
 80057be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	e000e010 	.word	0xe000e010

080057d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff ff29 	bl	8005630 <__NVIC_SetPriorityGrouping>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	4603      	mov	r3, r0
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057f8:	f7ff ff3e 	bl	8005678 <__NVIC_GetPriorityGrouping>
 80057fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f7ff ff8e 	bl	8005724 <NVIC_EncodePriority>
 8005808:	4602      	mov	r2, r0
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580e:	4611      	mov	r1, r2
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ff5d 	bl	80056d0 <__NVIC_SetPriority>
}
 8005816:	bf00      	nop
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	4603      	mov	r3, r0
 8005826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff ff31 	bl	8005694 <__NVIC_EnableIRQ>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff ffa2 	bl	800578c <SysTick_Config>
 8005848:	4603      	mov	r3, r0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005854:	b480      	push	{r7}
 8005856:	b089      	sub	sp, #36	; 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800586a:	2300      	movs	r3, #0
 800586c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	e175      	b.n	8005b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005874:	2201      	movs	r2, #1
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	f040 8164 	bne.w	8005b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d00b      	beq.n	80058b2 <HAL_GPIO_Init+0x5e>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d007      	beq.n	80058b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058a6:	2b11      	cmp	r3, #17
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b12      	cmp	r3, #18
 80058b0:	d130      	bne.n	8005914 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	2203      	movs	r2, #3
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058e8:	2201      	movs	r2, #1
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	f003 0201 	and.w	r2, r3, #1
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	2203      	movs	r2, #3
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d003      	beq.n	8005954 <HAL_GPIO_Init+0x100>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b12      	cmp	r3, #18
 8005952:	d123      	bne.n	800599c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	08da      	lsrs	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3208      	adds	r2, #8
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	220f      	movs	r2, #15
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	08da      	lsrs	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3208      	adds	r2, #8
 8005996:	69b9      	ldr	r1, [r7, #24]
 8005998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	2203      	movs	r2, #3
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 0203 	and.w	r2, r3, #3
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80be 	beq.w	8005b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059de:	4b66      	ldr	r3, [pc, #408]	; (8005b78 <HAL_GPIO_Init+0x324>)
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	4a65      	ldr	r2, [pc, #404]	; (8005b78 <HAL_GPIO_Init+0x324>)
 80059e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e8:	6453      	str	r3, [r2, #68]	; 0x44
 80059ea:	4b63      	ldr	r3, [pc, #396]	; (8005b78 <HAL_GPIO_Init+0x324>)
 80059ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80059f6:	4a61      	ldr	r2, [pc, #388]	; (8005b7c <HAL_GPIO_Init+0x328>)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	3302      	adds	r3, #2
 80059fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	220f      	movs	r2, #15
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a58      	ldr	r2, [pc, #352]	; (8005b80 <HAL_GPIO_Init+0x32c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d037      	beq.n	8005a92 <HAL_GPIO_Init+0x23e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a57      	ldr	r2, [pc, #348]	; (8005b84 <HAL_GPIO_Init+0x330>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d031      	beq.n	8005a8e <HAL_GPIO_Init+0x23a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a56      	ldr	r2, [pc, #344]	; (8005b88 <HAL_GPIO_Init+0x334>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02b      	beq.n	8005a8a <HAL_GPIO_Init+0x236>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a55      	ldr	r2, [pc, #340]	; (8005b8c <HAL_GPIO_Init+0x338>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d025      	beq.n	8005a86 <HAL_GPIO_Init+0x232>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a54      	ldr	r2, [pc, #336]	; (8005b90 <HAL_GPIO_Init+0x33c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01f      	beq.n	8005a82 <HAL_GPIO_Init+0x22e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a53      	ldr	r2, [pc, #332]	; (8005b94 <HAL_GPIO_Init+0x340>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d019      	beq.n	8005a7e <HAL_GPIO_Init+0x22a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a52      	ldr	r2, [pc, #328]	; (8005b98 <HAL_GPIO_Init+0x344>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_GPIO_Init+0x226>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a51      	ldr	r2, [pc, #324]	; (8005b9c <HAL_GPIO_Init+0x348>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00d      	beq.n	8005a76 <HAL_GPIO_Init+0x222>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a50      	ldr	r2, [pc, #320]	; (8005ba0 <HAL_GPIO_Init+0x34c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <HAL_GPIO_Init+0x21e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a4f      	ldr	r2, [pc, #316]	; (8005ba4 <HAL_GPIO_Init+0x350>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d101      	bne.n	8005a6e <HAL_GPIO_Init+0x21a>
 8005a6a:	2309      	movs	r3, #9
 8005a6c:	e012      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a6e:	230a      	movs	r3, #10
 8005a70:	e010      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a72:	2308      	movs	r3, #8
 8005a74:	e00e      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a76:	2307      	movs	r3, #7
 8005a78:	e00c      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a7a:	2306      	movs	r3, #6
 8005a7c:	e00a      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a7e:	2305      	movs	r3, #5
 8005a80:	e008      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a82:	2304      	movs	r3, #4
 8005a84:	e006      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a86:	2303      	movs	r3, #3
 8005a88:	e004      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e002      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_GPIO_Init+0x240>
 8005a92:	2300      	movs	r3, #0
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	f002 0203 	and.w	r2, r2, #3
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	4093      	lsls	r3, r2
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005aa4:	4935      	ldr	r1, [pc, #212]	; (8005b7c <HAL_GPIO_Init+0x328>)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	089b      	lsrs	r3, r3, #2
 8005aaa:	3302      	adds	r3, #2
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ab2:	4b3d      	ldr	r3, [pc, #244]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ad6:	4a34      	ldr	r2, [pc, #208]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b00:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b06:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <HAL_GPIO_Init+0x354>)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b0f      	cmp	r3, #15
 8005b64:	f67f ae86 	bls.w	8005874 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	3724      	adds	r7, #36	; 0x24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40013800 	.word	0x40013800
 8005b80:	40020000 	.word	0x40020000
 8005b84:	40020400 	.word	0x40020400
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	40020c00 	.word	0x40020c00
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40021400 	.word	0x40021400
 8005b98:	40021800 	.word	0x40021800
 8005b9c:	40021c00 	.word	0x40021c00
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	40022400 	.word	0x40022400
 8005ba8:	40013c00 	.word	0x40013c00

08005bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
 8005bc8:	e001      	b.n	8005bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
 8005be8:	4613      	mov	r3, r2
 8005bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bec:	787b      	ldrb	r3, [r7, #1]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bf2:	887a      	ldrh	r2, [r7, #2]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005bf8:	e003      	b.n	8005c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005bfa:	887b      	ldrh	r3, [r7, #2]
 8005bfc:	041a      	lsls	r2, r3, #16
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	619a      	str	r2, [r3, #24]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c26:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe f836 	bl	8003ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40013c00 	.word	0x40013c00

08005c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e07f      	b.n	8005d52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fa ffd4 	bl	8000c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	e006      	b.n	8005cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d104      	bne.n	8005cda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6859      	ldr	r1, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_I2C_Init+0x11c>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	ea42 0103 	orr.w	r1, r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	021a      	lsls	r2, r3, #8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1a      	ldr	r2, [r3, #32]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	02008000 	.word	0x02008000

08005d60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	817b      	strh	r3, [r7, #10]
 8005d70:	4613      	mov	r3, r2
 8005d72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	f040 80da 	bne.w	8005f36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_I2C_Master_Transmit+0x30>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e0d3      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1d8>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d98:	f7ff fc1a 	bl	80055d0 <HAL_GetTick>
 8005d9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	2319      	movs	r3, #25
 8005da4:	2201      	movs	r2, #1
 8005da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fcbc 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0be      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2221      	movs	r2, #33	; 0x21
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	893a      	ldrh	r2, [r7, #8]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2bff      	cmp	r3, #255	; 0xff
 8005dea:	d90e      	bls.n	8005e0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	22ff      	movs	r2, #255	; 0xff
 8005df0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	8979      	ldrh	r1, [r7, #10]
 8005dfa:	4b51      	ldr	r3, [pc, #324]	; (8005f40 <HAL_I2C_Master_Transmit+0x1e0>)
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fe1e 	bl	8006a44 <I2C_TransferConfig>
 8005e08:	e06c      	b.n	8005ee4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	8979      	ldrh	r1, [r7, #10]
 8005e1c:	4b48      	ldr	r3, [pc, #288]	; (8005f40 <HAL_I2C_Master_Transmit+0x1e0>)
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fe0d 	bl	8006a44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005e2a:	e05b      	b.n	8005ee4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	6a39      	ldr	r1, [r7, #32]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fcb9 	bl	80067a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e07b      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d034      	beq.n	8005ee4 <HAL_I2C_Master_Transmit+0x184>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d130      	bne.n	8005ee4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2180      	movs	r1, #128	; 0x80
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 fc4b 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e04d      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2bff      	cmp	r3, #255	; 0xff
 8005ea4:	d90e      	bls.n	8005ec4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	22ff      	movs	r2, #255	; 0xff
 8005eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	8979      	ldrh	r1, [r7, #10]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fdc1 	bl	8006a44 <I2C_TransferConfig>
 8005ec2:	e00f      	b.n	8005ee4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	8979      	ldrh	r1, [r7, #10]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fdb0 	bl	8006a44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d19e      	bne.n	8005e2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	6a39      	ldr	r1, [r7, #32]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fc98 	bl	8006828 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e01a      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2220      	movs	r2, #32
 8005f08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_I2C_Master_Transmit+0x1e4>)
 8005f16:	400b      	ands	r3, r1
 8005f18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
  }
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	80002000 	.word	0x80002000
 8005f44:	fe00e800 	.word	0xfe00e800

08005f48 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	461a      	mov	r2, r3
 8005f54:	460b      	mov	r3, r1
 8005f56:	817b      	strh	r3, [r7, #10]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	f040 80db 	bne.w	8006120 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_I2C_Master_Receive+0x30>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e0d4      	b.n	8006122 <HAL_I2C_Master_Receive+0x1da>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f80:	f7ff fb26 	bl	80055d0 <HAL_GetTick>
 8005f84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2319      	movs	r3, #25
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fbc8 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e0bf      	b.n	8006122 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2222      	movs	r2, #34	; 0x22
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2210      	movs	r2, #16
 8005fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	893a      	ldrh	r2, [r7, #8]
 8005fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2bff      	cmp	r3, #255	; 0xff
 8005fd2:	d90e      	bls.n	8005ff2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	22ff      	movs	r2, #255	; 0xff
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	8979      	ldrh	r1, [r7, #10]
 8005fe2:	4b52      	ldr	r3, [pc, #328]	; (800612c <HAL_I2C_Master_Receive+0x1e4>)
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fd2a 	bl	8006a44 <I2C_TransferConfig>
 8005ff0:	e06d      	b.n	80060ce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006000:	b2da      	uxtb	r2, r3
 8006002:	8979      	ldrh	r1, [r7, #10]
 8006004:	4b49      	ldr	r3, [pc, #292]	; (800612c <HAL_I2C_Master_Receive+0x1e4>)
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fd19 	bl	8006a44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006012:	e05c      	b.n	80060ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	6a39      	ldr	r1, [r7, #32]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fc41 	bl	80068a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e07c      	b.n	8006122 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d034      	beq.n	80060ce <HAL_I2C_Master_Receive+0x186>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006068:	2b00      	cmp	r3, #0
 800606a:	d130      	bne.n	80060ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2200      	movs	r2, #0
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fb56 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e04d      	b.n	8006122 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	2bff      	cmp	r3, #255	; 0xff
 800608e:	d90e      	bls.n	80060ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	22ff      	movs	r2, #255	; 0xff
 8006094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609a:	b2da      	uxtb	r2, r3
 800609c:	8979      	ldrh	r1, [r7, #10]
 800609e:	2300      	movs	r3, #0
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fccc 	bl	8006a44 <I2C_TransferConfig>
 80060ac:	e00f      	b.n	80060ce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	8979      	ldrh	r1, [r7, #10]
 80060c0:	2300      	movs	r3, #0
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fcbb 	bl	8006a44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d19d      	bne.n	8006014 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	6a39      	ldr	r1, [r7, #32]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fba3 	bl	8006828 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e01a      	b.n	8006122 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2220      	movs	r2, #32
 80060f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6859      	ldr	r1, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <HAL_I2C_Master_Receive+0x1e8>)
 8006100:	400b      	ands	r3, r1
 8006102:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	80002400 	.word	0x80002400
 8006130:	fe00e800 	.word	0xfe00e800

08006134 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	4603      	mov	r3, r0
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	460b      	mov	r3, r1
 8006148:	813b      	strh	r3, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b20      	cmp	r3, #32
 8006158:	f040 80f9 	bne.w	800634e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_I2C_Mem_Write+0x34>
 8006162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800616e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0ed      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_I2C_Mem_Write+0x4e>
 800617e:	2302      	movs	r3, #2
 8006180:	e0e6      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800618a:	f7ff fa21 	bl	80055d0 <HAL_GetTick>
 800618e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2319      	movs	r3, #25
 8006196:	2201      	movs	r2, #1
 8006198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fac3 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0d1      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2221      	movs	r2, #33	; 0x21
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2240      	movs	r2, #64	; 0x40
 80061b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a3a      	ldr	r2, [r7, #32]
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061d4:	88f8      	ldrh	r0, [r7, #6]
 80061d6:	893a      	ldrh	r2, [r7, #8]
 80061d8:	8979      	ldrh	r1, [r7, #10]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4603      	mov	r3, r0
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f9d3 	bl	8006590 <I2C_RequestMemoryWrite>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0a9      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	2bff      	cmp	r3, #255	; 0xff
 8006204:	d90e      	bls.n	8006224 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	22ff      	movs	r2, #255	; 0xff
 800620a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006210:	b2da      	uxtb	r2, r3
 8006212:	8979      	ldrh	r1, [r7, #10]
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fc11 	bl	8006a44 <I2C_TransferConfig>
 8006222:	e00f      	b.n	8006244 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006232:	b2da      	uxtb	r2, r3
 8006234:	8979      	ldrh	r1, [r7, #10]
 8006236:	2300      	movs	r3, #0
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fc00 	bl	8006a44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 faad 	bl	80067a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e07b      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d034      	beq.n	80062fc <HAL_I2C_Mem_Write+0x1c8>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d130      	bne.n	80062fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2200      	movs	r2, #0
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fa3f 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e04d      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2bff      	cmp	r3, #255	; 0xff
 80062bc:	d90e      	bls.n	80062dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	22ff      	movs	r2, #255	; 0xff
 80062c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	8979      	ldrh	r1, [r7, #10]
 80062cc:	2300      	movs	r3, #0
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fbb5 	bl	8006a44 <I2C_TransferConfig>
 80062da:	e00f      	b.n	80062fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	8979      	ldrh	r1, [r7, #10]
 80062ee:	2300      	movs	r3, #0
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fba4 	bl	8006a44 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d19e      	bne.n	8006244 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 fa8c 	bl	8006828 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e01a      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2220      	movs	r2, #32
 8006320:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6859      	ldr	r1, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <HAL_I2C_Mem_Write+0x224>)
 800632e:	400b      	ands	r3, r1
 8006330:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	fe00e800 	.word	0xfe00e800

0800635c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	461a      	mov	r2, r3
 800636a:	4603      	mov	r3, r0
 800636c:	817b      	strh	r3, [r7, #10]
 800636e:	460b      	mov	r3, r1
 8006370:	813b      	strh	r3, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b20      	cmp	r3, #32
 8006380:	f040 80fd 	bne.w	800657e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_I2C_Mem_Read+0x34>
 800638a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006396:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0f1      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_I2C_Mem_Read+0x4e>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e0ea      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063b2:	f7ff f90d 	bl	80055d0 <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2319      	movs	r3, #25
 80063be:	2201      	movs	r2, #1
 80063c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f9af 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0d5      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2222      	movs	r2, #34	; 0x22
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063fc:	88f8      	ldrh	r0, [r7, #6]
 80063fe:	893a      	ldrh	r2, [r7, #8]
 8006400:	8979      	ldrh	r1, [r7, #10]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	4603      	mov	r3, r0
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f913 	bl	8006638 <I2C_RequestMemoryRead>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0ad      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	2bff      	cmp	r3, #255	; 0xff
 800642c:	d90e      	bls.n	800644c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	22ff      	movs	r2, #255	; 0xff
 8006432:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	b2da      	uxtb	r2, r3
 800643a:	8979      	ldrh	r1, [r7, #10]
 800643c:	4b52      	ldr	r3, [pc, #328]	; (8006588 <HAL_I2C_Mem_Read+0x22c>)
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fafd 	bl	8006a44 <I2C_TransferConfig>
 800644a:	e00f      	b.n	800646c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	b2da      	uxtb	r2, r3
 800645c:	8979      	ldrh	r1, [r7, #10]
 800645e:	4b4a      	ldr	r3, [pc, #296]	; (8006588 <HAL_I2C_Mem_Read+0x22c>)
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 faec 	bl	8006a44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	2200      	movs	r2, #0
 8006474:	2104      	movs	r1, #4
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f956 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e07c      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d034      	beq.n	800652c <HAL_I2C_Mem_Read+0x1d0>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d130      	bne.n	800652c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f927 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e04d      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2bff      	cmp	r3, #255	; 0xff
 80064ec:	d90e      	bls.n	800650c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	22ff      	movs	r2, #255	; 0xff
 80064f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	8979      	ldrh	r1, [r7, #10]
 80064fc:	2300      	movs	r3, #0
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fa9d 	bl	8006a44 <I2C_TransferConfig>
 800650a:	e00f      	b.n	800652c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651a:	b2da      	uxtb	r2, r3
 800651c:	8979      	ldrh	r1, [r7, #10]
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fa8c 	bl	8006a44 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d19a      	bne.n	800646c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 f974 	bl	8006828 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e01a      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2220      	movs	r2, #32
 8006550:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6859      	ldr	r1, [r3, #4]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <HAL_I2C_Mem_Read+0x230>)
 800655e:	400b      	ands	r3, r1
 8006560:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	80002400 	.word	0x80002400
 800658c:	fe00e800 	.word	0xfe00e800

08006590 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	4608      	mov	r0, r1
 800659a:	4611      	mov	r1, r2
 800659c:	461a      	mov	r2, r3
 800659e:	4603      	mov	r3, r0
 80065a0:	817b      	strh	r3, [r7, #10]
 80065a2:	460b      	mov	r3, r1
 80065a4:	813b      	strh	r3, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	8979      	ldrh	r1, [r7, #10]
 80065b0:	4b20      	ldr	r3, [pc, #128]	; (8006634 <I2C_RequestMemoryWrite+0xa4>)
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fa43 	bl	8006a44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f8f0 	bl	80067a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e02c      	b.n	800662c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d105      	bne.n	80065e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065d8:	893b      	ldrh	r3, [r7, #8]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
 80065e2:	e015      	b.n	8006610 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065e4:	893b      	ldrh	r3, [r7, #8]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	69b9      	ldr	r1, [r7, #24]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f8d6 	bl	80067a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e012      	b.n	800662c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006606:	893b      	ldrh	r3, [r7, #8]
 8006608:	b2da      	uxtb	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2200      	movs	r2, #0
 8006618:	2180      	movs	r1, #128	; 0x80
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f884 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	80002000 	.word	0x80002000

08006638 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	817b      	strh	r3, [r7, #10]
 800664a:	460b      	mov	r3, r1
 800664c:	813b      	strh	r3, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	b2da      	uxtb	r2, r3
 8006656:	8979      	ldrh	r1, [r7, #10]
 8006658:	4b20      	ldr	r3, [pc, #128]	; (80066dc <I2C_RequestMemoryRead+0xa4>)
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f9f0 	bl	8006a44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	69b9      	ldr	r1, [r7, #24]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f89d 	bl	80067a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e02c      	b.n	80066d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d105      	bne.n	800668a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800667e:	893b      	ldrh	r3, [r7, #8]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
 8006688:	e015      	b.n	80066b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800668a:	893b      	ldrh	r3, [r7, #8]
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	b29b      	uxth	r3, r3
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	69b9      	ldr	r1, [r7, #24]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f883 	bl	80067a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e012      	b.n	80066d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066ac:	893b      	ldrh	r3, [r7, #8]
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2200      	movs	r2, #0
 80066be:	2140      	movs	r1, #64	; 0x40
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f831 	bl	8006728 <I2C_WaitOnFlagUntilTimeout>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	80002000 	.word	0x80002000

080066e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d103      	bne.n	80066fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b01      	cmp	r3, #1
 800670a:	d007      	beq.n	800671c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	619a      	str	r2, [r3, #24]
  }
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	4613      	mov	r3, r2
 8006736:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006738:	e022      	b.n	8006780 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006740:	d01e      	beq.n	8006780 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006742:	f7fe ff45 	bl	80055d0 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d302      	bcc.n	8006758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d113      	bne.n	8006780 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e00f      	b.n	80067a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4013      	ands	r3, r2
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	429a      	cmp	r2, r3
 800679c:	d0cd      	beq.n	800673a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067b4:	e02c      	b.n	8006810 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 f8dc 	bl	8006978 <I2C_IsAcknowledgeFailed>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e02a      	b.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d01e      	beq.n	8006810 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d2:	f7fe fefd 	bl	80055d0 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d302      	bcc.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d113      	bne.n	8006810 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	f043 0220 	orr.w	r2, r3, #32
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e007      	b.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b02      	cmp	r3, #2
 800681c:	d1cb      	bne.n	80067b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006834:	e028      	b.n	8006888 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f89c 	bl	8006978 <I2C_IsAcknowledgeFailed>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e026      	b.n	8006898 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684a:	f7fe fec1 	bl	80055d0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	429a      	cmp	r2, r3
 8006858:	d302      	bcc.n	8006860 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d113      	bne.n	8006888 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e007      	b.n	8006898 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b20      	cmp	r3, #32
 8006894:	d1cf      	bne.n	8006836 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ac:	e055      	b.n	800695a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f860 	bl	8006978 <I2C_IsAcknowledgeFailed>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e053      	b.n	800696a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d129      	bne.n	8006924 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d105      	bne.n	80068ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e03f      	b.n	800696a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2220      	movs	r2, #32
 80068f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6859      	ldr	r1, [r3, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80068fe:	400b      	ands	r3, r1
 8006900:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e022      	b.n	800696a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006924:	f7fe fe54 	bl	80055d0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	d302      	bcc.n	800693a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10f      	bne.n	800695a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e007      	b.n	800696a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b04      	cmp	r3, #4
 8006966:	d1a2      	bne.n	80068ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	fe00e800 	.word	0xfe00e800

08006978 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	2b10      	cmp	r3, #16
 8006990:	d151      	bne.n	8006a36 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006992:	e022      	b.n	80069da <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d01e      	beq.n	80069da <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699c:	f7fe fe18 	bl	80055d0 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d302      	bcc.n	80069b2 <I2C_IsAcknowledgeFailed+0x3a>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f043 0220 	orr.w	r2, r3, #32
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e02e      	b.n	8006a38 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d1d5      	bne.n	8006994 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2210      	movs	r2, #16
 80069ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2220      	movs	r2, #32
 80069f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fe71 	bl	80066e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6859      	ldr	r1, [r3, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <I2C_IsAcknowledgeFailed+0xc8>)
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f043 0204 	orr.w	r2, r3, #4
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	fe00e800 	.word	0xfe00e800

08006a44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	817b      	strh	r3, [r7, #10]
 8006a52:	4613      	mov	r3, r2
 8006a54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	0d5b      	lsrs	r3, r3, #21
 8006a60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a64:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <I2C_TransferConfig+0x58>)
 8006a66:	430b      	orrs	r3, r1
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	ea02 0103 	and.w	r1, r2, r3
 8006a6e:	897b      	ldrh	r3, [r7, #10]
 8006a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a74:	7a7b      	ldrb	r3, [r7, #9]
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	431a      	orrs	r2, r3
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	431a      	orrs	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	03ff63ff 	.word	0x03ff63ff

08006aa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d138      	bne.n	8006b28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e032      	b.n	8006b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2224      	movs	r2, #36	; 0x24
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0201 	bic.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006af2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6819      	ldr	r1, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e000      	b.n	8006b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
  }
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d139      	bne.n	8006bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e033      	b.n	8006bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2224      	movs	r2, #36	; 0x24
 8006b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e000      	b.n	8006bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bc0:	2302      	movs	r3, #2
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a04      	ldr	r2, [pc, #16]	; (8006bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40007000 	.word	0x40007000

08006bf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	4b23      	ldr	r3, [pc, #140]	; (8006c88 <HAL_PWREx_EnableOverDrive+0x98>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	4a22      	ldr	r2, [pc, #136]	; (8006c88 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c04:	6413      	str	r3, [r2, #64]	; 0x40
 8006c06:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c1e:	f7fe fcd7 	bl	80055d0 <HAL_GetTick>
 8006c22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c24:	e009      	b.n	8006c3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c26:	f7fe fcd3 	bl	80055d0 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c34:	d901      	bls.n	8006c3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e022      	b.n	8006c80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c46:	d1ee      	bne.n	8006c26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006c48:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a0f      	ldr	r2, [pc, #60]	; (8006c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c54:	f7fe fcbc 	bl	80055d0 <HAL_GetTick>
 8006c58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c5a:	e009      	b.n	8006c70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c5c:	f7fe fcb8 	bl	80055d0 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c6a:	d901      	bls.n	8006c70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e007      	b.n	8006c80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c7c:	d1ee      	bne.n	8006c5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40007000 	.word	0x40007000

08006c90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e29b      	b.n	80071de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8087 	beq.w	8006dc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cb4:	4b96      	ldr	r3, [pc, #600]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 030c 	and.w	r3, r3, #12
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d00c      	beq.n	8006cda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cc0:	4b93      	ldr	r3, [pc, #588]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 030c 	and.w	r3, r3, #12
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d112      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x62>
 8006ccc:	4b90      	ldr	r3, [pc, #576]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cd8:	d10b      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cda:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d06c      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x130>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d168      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e275      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfa:	d106      	bne.n	8006d0a <HAL_RCC_OscConfig+0x7a>
 8006cfc:	4b84      	ldr	r3, [pc, #528]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a83      	ldr	r2, [pc, #524]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	e02e      	b.n	8006d68 <HAL_RCC_OscConfig+0xd8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10c      	bne.n	8006d2c <HAL_RCC_OscConfig+0x9c>
 8006d12:	4b7f      	ldr	r3, [pc, #508]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a7e      	ldr	r2, [pc, #504]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	4b7c      	ldr	r3, [pc, #496]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a7b      	ldr	r2, [pc, #492]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e01d      	b.n	8006d68 <HAL_RCC_OscConfig+0xd8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d34:	d10c      	bne.n	8006d50 <HAL_RCC_OscConfig+0xc0>
 8006d36:	4b76      	ldr	r3, [pc, #472]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a75      	ldr	r2, [pc, #468]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	4b73      	ldr	r3, [pc, #460]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a72      	ldr	r2, [pc, #456]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e00b      	b.n	8006d68 <HAL_RCC_OscConfig+0xd8>
 8006d50:	4b6f      	ldr	r3, [pc, #444]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a6e      	ldr	r2, [pc, #440]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	4b6c      	ldr	r3, [pc, #432]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a6b      	ldr	r2, [pc, #428]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d013      	beq.n	8006d98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fe fc2e 	bl	80055d0 <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d78:	f7fe fc2a 	bl	80055d0 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b64      	cmp	r3, #100	; 0x64
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e229      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d8a:	4b61      	ldr	r3, [pc, #388]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCC_OscConfig+0xe8>
 8006d96:	e014      	b.n	8006dc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fe fc1a 	bl	80055d0 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da0:	f7fe fc16 	bl	80055d0 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b64      	cmp	r3, #100	; 0x64
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e215      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006db2:	4b57      	ldr	r3, [pc, #348]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f0      	bne.n	8006da0 <HAL_RCC_OscConfig+0x110>
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d069      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dce:	4b50      	ldr	r3, [pc, #320]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 030c 	and.w	r3, r3, #12
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00b      	beq.n	8006df2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dda:	4b4d      	ldr	r3, [pc, #308]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d11c      	bne.n	8006e20 <HAL_RCC_OscConfig+0x190>
 8006de6:	4b4a      	ldr	r3, [pc, #296]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d116      	bne.n	8006e20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_RCC_OscConfig+0x17a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d001      	beq.n	8006e0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e1e9      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e0a:	4b41      	ldr	r3, [pc, #260]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	493d      	ldr	r1, [pc, #244]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1e:	e040      	b.n	8006ea2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d023      	beq.n	8006e70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e28:	4b39      	ldr	r3, [pc, #228]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a38      	ldr	r2, [pc, #224]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fe fbcc 	bl	80055d0 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e3c:	f7fe fbc8 	bl	80055d0 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e1c7      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4e:	4b30      	ldr	r3, [pc, #192]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e5a:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4929      	ldr	r1, [pc, #164]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	600b      	str	r3, [r1, #0]
 8006e6e:	e018      	b.n	8006ea2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e70:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a26      	ldr	r2, [pc, #152]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e76:	f023 0301 	bic.w	r3, r3, #1
 8006e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7c:	f7fe fba8 	bl	80055d0 <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e84:	f7fe fba4 	bl	80055d0 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e1a3      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e96:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f0      	bne.n	8006e84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d038      	beq.n	8006f20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d019      	beq.n	8006eea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb6:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eba:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec2:	f7fe fb85 	bl	80055d0 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eca:	f7fe fb81 	bl	80055d0 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e180      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0f0      	beq.n	8006eca <HAL_RCC_OscConfig+0x23a>
 8006ee8:	e01a      	b.n	8006f20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eee:	4a08      	ldr	r2, [pc, #32]	; (8006f10 <HAL_RCC_OscConfig+0x280>)
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef6:	f7fe fb6b 	bl	80055d0 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efc:	e00a      	b.n	8006f14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006efe:	f7fe fb67 	bl	80055d0 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d903      	bls.n	8006f14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e166      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
 8006f10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f14:	4b92      	ldr	r3, [pc, #584]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1ee      	bne.n	8006efe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80a4 	beq.w	8007076 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f2e:	4b8c      	ldr	r3, [pc, #560]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10d      	bne.n	8006f56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f3a:	4b89      	ldr	r3, [pc, #548]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	4a88      	ldr	r2, [pc, #544]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f44:	6413      	str	r3, [r2, #64]	; 0x40
 8006f46:	4b86      	ldr	r3, [pc, #536]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4e:	60bb      	str	r3, [r7, #8]
 8006f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f52:	2301      	movs	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f56:	4b83      	ldr	r3, [pc, #524]	; (8007164 <HAL_RCC_OscConfig+0x4d4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d118      	bne.n	8006f94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006f62:	4b80      	ldr	r3, [pc, #512]	; (8007164 <HAL_RCC_OscConfig+0x4d4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a7f      	ldr	r2, [pc, #508]	; (8007164 <HAL_RCC_OscConfig+0x4d4>)
 8006f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f6e:	f7fe fb2f 	bl	80055d0 <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f76:	f7fe fb2b 	bl	80055d0 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b64      	cmp	r3, #100	; 0x64
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e12a      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f88:	4b76      	ldr	r3, [pc, #472]	; (8007164 <HAL_RCC_OscConfig+0x4d4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d106      	bne.n	8006faa <HAL_RCC_OscConfig+0x31a>
 8006f9c:	4b70      	ldr	r3, [pc, #448]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa0:	4a6f      	ldr	r2, [pc, #444]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa8:	e02d      	b.n	8007006 <HAL_RCC_OscConfig+0x376>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10c      	bne.n	8006fcc <HAL_RCC_OscConfig+0x33c>
 8006fb2:	4b6b      	ldr	r3, [pc, #428]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	4a6a      	ldr	r2, [pc, #424]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbe:	4b68      	ldr	r3, [pc, #416]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	4a67      	ldr	r2, [pc, #412]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fc4:	f023 0304 	bic.w	r3, r3, #4
 8006fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fca:	e01c      	b.n	8007006 <HAL_RCC_OscConfig+0x376>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b05      	cmp	r3, #5
 8006fd2:	d10c      	bne.n	8006fee <HAL_RCC_OscConfig+0x35e>
 8006fd4:	4b62      	ldr	r3, [pc, #392]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	4a61      	ldr	r2, [pc, #388]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fda:	f043 0304 	orr.w	r3, r3, #4
 8006fde:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe0:	4b5f      	ldr	r3, [pc, #380]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	4a5e      	ldr	r2, [pc, #376]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	6713      	str	r3, [r2, #112]	; 0x70
 8006fec:	e00b      	b.n	8007006 <HAL_RCC_OscConfig+0x376>
 8006fee:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a5b      	ldr	r2, [pc, #364]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffa:	4b59      	ldr	r3, [pc, #356]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	4a58      	ldr	r2, [pc, #352]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d015      	beq.n	800703a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700e:	f7fe fadf 	bl	80055d0 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007014:	e00a      	b.n	800702c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007016:	f7fe fadb 	bl	80055d0 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	f241 3288 	movw	r2, #5000	; 0x1388
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e0d8      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702c:	4b4c      	ldr	r3, [pc, #304]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ee      	beq.n	8007016 <HAL_RCC_OscConfig+0x386>
 8007038:	e014      	b.n	8007064 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703a:	f7fe fac9 	bl	80055d0 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007040:	e00a      	b.n	8007058 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fe fac5 	bl	80055d0 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007050:	4293      	cmp	r3, r2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e0c2      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007058:	4b41      	ldr	r3, [pc, #260]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1ee      	bne.n	8007042 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d105      	bne.n	8007076 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706a:	4b3d      	ldr	r3, [pc, #244]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	4a3c      	ldr	r2, [pc, #240]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8007070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 80ae 	beq.w	80071dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007080:	4b37      	ldr	r3, [pc, #220]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 030c 	and.w	r3, r3, #12
 8007088:	2b08      	cmp	r3, #8
 800708a:	d06d      	beq.n	8007168 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d14b      	bne.n	800712c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007094:	4b32      	ldr	r3, [pc, #200]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a31      	ldr	r2, [pc, #196]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 800709a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800709e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fe fa96 	bl	80055d0 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a8:	f7fe fa92 	bl	80055d0 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e091      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ba:	4b29      	ldr	r3, [pc, #164]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69da      	ldr	r2, [r3, #28]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	019b      	lsls	r3, r3, #6
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	3b01      	subs	r3, #1
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	061b      	lsls	r3, r3, #24
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	071b      	lsls	r3, r3, #28
 80070f2:	491b      	ldr	r1, [pc, #108]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070f8:	4b19      	ldr	r3, [pc, #100]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a18      	ldr	r2, [pc, #96]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 80070fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fe fa64 	bl	80055d0 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710c:	f7fe fa60 	bl	80055d0 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e05f      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x47c>
 800712a:	e057      	b.n	80071dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a0b      	ldr	r2, [pc, #44]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8007132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fe fa4a 	bl	80055d0 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007140:	f7fe fa46 	bl	80055d0 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e045      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007152:	4b03      	ldr	r3, [pc, #12]	; (8007160 <HAL_RCC_OscConfig+0x4d0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f0      	bne.n	8007140 <HAL_RCC_OscConfig+0x4b0>
 800715e:	e03d      	b.n	80071dc <HAL_RCC_OscConfig+0x54c>
 8007160:	40023800 	.word	0x40023800
 8007164:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007168:	4b1f      	ldr	r3, [pc, #124]	; (80071e8 <HAL_RCC_OscConfig+0x558>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d030      	beq.n	80071d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007180:	429a      	cmp	r2, r3
 8007182:	d129      	bne.n	80071d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718e:	429a      	cmp	r2, r3
 8007190:	d122      	bne.n	80071d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007198:	4013      	ands	r3, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800719e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d119      	bne.n	80071d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	3b01      	subs	r3, #1
 80071b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d10f      	bne.n	80071d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d107      	bne.n	80071d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40023800 	.word	0x40023800

080071ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e0d0      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007204:	4b6a      	ldr	r3, [pc, #424]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d910      	bls.n	8007234 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007212:	4b67      	ldr	r3, [pc, #412]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 020f 	bic.w	r2, r3, #15
 800721a:	4965      	ldr	r1, [pc, #404]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4313      	orrs	r3, r2
 8007220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007222:	4b63      	ldr	r3, [pc, #396]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d001      	beq.n	8007234 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e0b8      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d020      	beq.n	8007282 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800724c:	4b59      	ldr	r3, [pc, #356]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4a58      	ldr	r2, [pc, #352]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007264:	4b53      	ldr	r3, [pc, #332]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4a52      	ldr	r2, [pc, #328]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 800726a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800726e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007270:	4b50      	ldr	r3, [pc, #320]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	494d      	ldr	r1, [pc, #308]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 800727e:	4313      	orrs	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d040      	beq.n	8007310 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d107      	bne.n	80072a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007296:	4b47      	ldr	r3, [pc, #284]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d115      	bne.n	80072ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e07f      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d107      	bne.n	80072be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ae:	4b41      	ldr	r3, [pc, #260]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e073      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072be:	4b3d      	ldr	r3, [pc, #244]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e06b      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ce:	4b39      	ldr	r3, [pc, #228]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f023 0203 	bic.w	r2, r3, #3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4936      	ldr	r1, [pc, #216]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e0:	f7fe f976 	bl	80055d0 <HAL_GetTick>
 80072e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e6:	e00a      	b.n	80072fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e8:	f7fe f972 	bl	80055d0 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e053      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fe:	4b2d      	ldr	r3, [pc, #180]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 020c 	and.w	r2, r3, #12
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	429a      	cmp	r2, r3
 800730e:	d1eb      	bne.n	80072e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007310:	4b27      	ldr	r3, [pc, #156]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d210      	bcs.n	8007340 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800731e:	4b24      	ldr	r3, [pc, #144]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f023 020f 	bic.w	r2, r3, #15
 8007326:	4922      	ldr	r1, [pc, #136]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	4313      	orrs	r3, r2
 800732c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800732e:	4b20      	ldr	r3, [pc, #128]	; (80073b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d001      	beq.n	8007340 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e032      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4916      	ldr	r1, [pc, #88]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 800735a:	4313      	orrs	r3, r2
 800735c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800736a:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	490e      	ldr	r1, [pc, #56]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 800737a:	4313      	orrs	r3, r2
 800737c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800737e:	f000 f821 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 8007382:	4602      	mov	r2, r0
 8007384:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	490a      	ldr	r1, [pc, #40]	; (80073b8 <HAL_RCC_ClockConfig+0x1cc>)
 8007390:	5ccb      	ldrb	r3, [r1, r3]
 8007392:	fa22 f303 	lsr.w	r3, r2, r3
 8007396:	4a09      	ldr	r2, [pc, #36]	; (80073bc <HAL_RCC_ClockConfig+0x1d0>)
 8007398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <HAL_RCC_ClockConfig+0x1d4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe f8d2 	bl	8005548 <HAL_InitTick>

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40023c00 	.word	0x40023c00
 80073b4:	40023800 	.word	0x40023800
 80073b8:	0800d300 	.word	0x0800d300
 80073bc:	200000c0 	.word	0x200000c0
 80073c0:	200000c8 	.word	0x200000c8

080073c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	2300      	movs	r3, #0
 80073d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073dc:	4b67      	ldr	r3, [pc, #412]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 030c 	and.w	r3, r3, #12
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d00d      	beq.n	8007404 <HAL_RCC_GetSysClockFreq+0x40>
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	f200 80bd 	bhi.w	8007568 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_RCC_GetSysClockFreq+0x34>
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d003      	beq.n	80073fe <HAL_RCC_GetSysClockFreq+0x3a>
 80073f6:	e0b7      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073f8:	4b61      	ldr	r3, [pc, #388]	; (8007580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073fa:	60bb      	str	r3, [r7, #8]
      break;
 80073fc:	e0b7      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073fe:	4b61      	ldr	r3, [pc, #388]	; (8007584 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007400:	60bb      	str	r3, [r7, #8]
      break;
 8007402:	e0b4      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007404:	4b5d      	ldr	r3, [pc, #372]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800740c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800740e:	4b5b      	ldr	r3, [pc, #364]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d04d      	beq.n	80074b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800741a:	4b58      	ldr	r3, [pc, #352]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	099b      	lsrs	r3, r3, #6
 8007420:	461a      	mov	r2, r3
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800742a:	f04f 0100 	mov.w	r1, #0
 800742e:	ea02 0800 	and.w	r8, r2, r0
 8007432:	ea03 0901 	and.w	r9, r3, r1
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	014b      	lsls	r3, r1, #5
 8007444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007448:	0142      	lsls	r2, r0, #5
 800744a:	4610      	mov	r0, r2
 800744c:	4619      	mov	r1, r3
 800744e:	ebb0 0008 	subs.w	r0, r0, r8
 8007452:	eb61 0109 	sbc.w	r1, r1, r9
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	018b      	lsls	r3, r1, #6
 8007460:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007464:	0182      	lsls	r2, r0, #6
 8007466:	1a12      	subs	r2, r2, r0
 8007468:	eb63 0301 	sbc.w	r3, r3, r1
 800746c:	f04f 0000 	mov.w	r0, #0
 8007470:	f04f 0100 	mov.w	r1, #0
 8007474:	00d9      	lsls	r1, r3, #3
 8007476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800747a:	00d0      	lsls	r0, r2, #3
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	eb12 0208 	adds.w	r2, r2, r8
 8007484:	eb43 0309 	adc.w	r3, r3, r9
 8007488:	f04f 0000 	mov.w	r0, #0
 800748c:	f04f 0100 	mov.w	r1, #0
 8007490:	0259      	lsls	r1, r3, #9
 8007492:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007496:	0250      	lsls	r0, r2, #9
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	461a      	mov	r2, r3
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	f7f8 ff22 	bl	80002f0 <__aeabi_uldivmod>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4613      	mov	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e04a      	b.n	800754c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074b6:	4b31      	ldr	r3, [pc, #196]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	099b      	lsrs	r3, r3, #6
 80074bc:	461a      	mov	r2, r3
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	ea02 0400 	and.w	r4, r2, r0
 80074ce:	ea03 0501 	and.w	r5, r3, r1
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	014b      	lsls	r3, r1, #5
 80074e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074e4:	0142      	lsls	r2, r0, #5
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	1b00      	subs	r0, r0, r4
 80074ec:	eb61 0105 	sbc.w	r1, r1, r5
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	018b      	lsls	r3, r1, #6
 80074fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074fe:	0182      	lsls	r2, r0, #6
 8007500:	1a12      	subs	r2, r2, r0
 8007502:	eb63 0301 	sbc.w	r3, r3, r1
 8007506:	f04f 0000 	mov.w	r0, #0
 800750a:	f04f 0100 	mov.w	r1, #0
 800750e:	00d9      	lsls	r1, r3, #3
 8007510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007514:	00d0      	lsls	r0, r2, #3
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	1912      	adds	r2, r2, r4
 800751c:	eb45 0303 	adc.w	r3, r5, r3
 8007520:	f04f 0000 	mov.w	r0, #0
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	0299      	lsls	r1, r3, #10
 800752a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800752e:	0290      	lsls	r0, r2, #10
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	461a      	mov	r2, r3
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f7f8 fed6 	bl	80002f0 <__aeabi_uldivmod>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4613      	mov	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	3301      	adds	r3, #1
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	60bb      	str	r3, [r7, #8]
      break;
 8007566:	e002      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800756a:	60bb      	str	r3, [r7, #8]
      break;
 800756c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800756e:	68bb      	ldr	r3, [r7, #8]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800757a:	bf00      	nop
 800757c:	40023800 	.word	0x40023800
 8007580:	00f42400 	.word	0x00f42400
 8007584:	007a1200 	.word	0x007a1200

08007588 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <HAL_RCC_GetHCLKFreq+0x14>)
 800758e:	681b      	ldr	r3, [r3, #0]
}
 8007590:	4618      	mov	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	200000c0 	.word	0x200000c0

080075a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075a4:	f7ff fff0 	bl	8007588 <HAL_RCC_GetHCLKFreq>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	0a9b      	lsrs	r3, r3, #10
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	4903      	ldr	r1, [pc, #12]	; (80075c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075b6:	5ccb      	ldrb	r3, [r1, r3]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40023800 	.word	0x40023800
 80075c4:	0800d310 	.word	0x0800d310

080075c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075cc:	f7ff ffdc 	bl	8007588 <HAL_RCC_GetHCLKFreq>
 80075d0:	4602      	mov	r2, r0
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	0b5b      	lsrs	r3, r3, #13
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	4903      	ldr	r1, [pc, #12]	; (80075ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80075de:	5ccb      	ldrb	r3, [r1, r3]
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40023800 	.word	0x40023800
 80075ec:	0800d310 	.word	0x0800d310

080075f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d012      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007618:	4b69      	ldr	r3, [pc, #420]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a68      	ldr	r2, [pc, #416]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800761e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007622:	6093      	str	r3, [r2, #8]
 8007624:	4b66      	ldr	r3, [pc, #408]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762c:	4964      	ldr	r1, [pc, #400]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800762e:	4313      	orrs	r3, r2
 8007630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800763a:	2301      	movs	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d017      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800764a:	4b5d      	ldr	r3, [pc, #372]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007658:	4959      	ldr	r1, [pc, #356]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007668:	d101      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800766a:	2301      	movs	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007676:	2301      	movs	r3, #1
 8007678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d017      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007686:	4b4e      	ldr	r3, [pc, #312]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	494a      	ldr	r1, [pc, #296]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007696:	4313      	orrs	r3, r2
 8007698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076a4:	d101      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80076a6:	2301      	movs	r3, #1
 80076a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80076b2:	2301      	movs	r3, #1
 80076b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80076c2:	2301      	movs	r3, #1
 80076c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 808b 	beq.w	80077ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076d4:	4b3a      	ldr	r3, [pc, #232]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	4a39      	ldr	r2, [pc, #228]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076de:	6413      	str	r3, [r2, #64]	; 0x40
 80076e0:	4b37      	ldr	r3, [pc, #220]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076ec:	4b35      	ldr	r3, [pc, #212]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a34      	ldr	r2, [pc, #208]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f8:	f7fd ff6a 	bl	80055d0 <HAL_GetTick>
 80076fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007700:	f7fd ff66 	bl	80055d0 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	; 0x64
 800770c:	d901      	bls.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e38f      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007712:	4b2c      	ldr	r3, [pc, #176]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800771e:	4b28      	ldr	r3, [pc, #160]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d035      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	429a      	cmp	r2, r3
 800773a:	d02e      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800773c:	4b20      	ldr	r3, [pc, #128]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007746:	4b1e      	ldr	r3, [pc, #120]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774a:	4a1d      	ldr	r2, [pc, #116]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800774c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007750:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007752:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800775c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007764:	4b16      	ldr	r3, [pc, #88]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	d114      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007770:	f7fd ff2e 	bl	80055d0 <HAL_GetTick>
 8007774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007776:	e00a      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007778:	f7fd ff2a 	bl	80055d0 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	f241 3288 	movw	r2, #5000	; 0x1388
 8007786:	4293      	cmp	r3, r2
 8007788:	d901      	bls.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e351      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800778e:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0ee      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a6:	d111      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80077b4:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077b6:	400b      	ands	r3, r1
 80077b8:	4901      	ldr	r1, [pc, #4]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
 80077be:	e00b      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80077c0:	40023800 	.word	0x40023800
 80077c4:	40007000 	.word	0x40007000
 80077c8:	0ffffcff 	.word	0x0ffffcff
 80077cc:	4bb3      	ldr	r3, [pc, #716]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4ab2      	ldr	r2, [pc, #712]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077d6:	6093      	str	r3, [r2, #8]
 80077d8:	4bb0      	ldr	r3, [pc, #704]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077e4:	49ad      	ldr	r1, [pc, #692]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d010      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077f6:	4ba9      	ldr	r3, [pc, #676]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077fc:	4aa7      	ldr	r2, [pc, #668]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007806:	4ba5      	ldr	r3, [pc, #660]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	49a2      	ldr	r1, [pc, #648]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007812:	4313      	orrs	r3, r2
 8007814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007824:	4b9d      	ldr	r3, [pc, #628]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007832:	499a      	ldr	r1, [pc, #616]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007846:	4b95      	ldr	r3, [pc, #596]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007854:	4991      	ldr	r1, [pc, #580]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007868:	4b8c      	ldr	r3, [pc, #560]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007876:	4989      	ldr	r1, [pc, #548]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800788a:	4b84      	ldr	r3, [pc, #528]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800788c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007898:	4980      	ldr	r1, [pc, #512]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800789a:	4313      	orrs	r3, r2
 800789c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078ac:	4b7b      	ldr	r3, [pc, #492]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b2:	f023 0203 	bic.w	r2, r3, #3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	4978      	ldr	r1, [pc, #480]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078ce:	4b73      	ldr	r3, [pc, #460]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d4:	f023 020c 	bic.w	r2, r3, #12
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078dc:	496f      	ldr	r1, [pc, #444]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078f0:	4b6a      	ldr	r3, [pc, #424]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	4967      	ldr	r1, [pc, #412]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007900:	4313      	orrs	r3, r2
 8007902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007912:	4b62      	ldr	r3, [pc, #392]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007918:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007920:	495e      	ldr	r1, [pc, #376]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007922:	4313      	orrs	r3, r2
 8007924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007934:	4b59      	ldr	r3, [pc, #356]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	4956      	ldr	r1, [pc, #344]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007956:	4b51      	ldr	r3, [pc, #324]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007964:	494d      	ldr	r1, [pc, #308]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007978:	4b48      	ldr	r3, [pc, #288]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800797a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007986:	4945      	ldr	r1, [pc, #276]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007988:	4313      	orrs	r3, r2
 800798a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800799a:	4b40      	ldr	r3, [pc, #256]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a8:	493c      	ldr	r1, [pc, #240]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079bc:	4b37      	ldr	r3, [pc, #220]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ca:	4934      	ldr	r1, [pc, #208]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d011      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80079de:	4b2f      	ldr	r3, [pc, #188]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ec:	492b      	ldr	r1, [pc, #172]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079fc:	d101      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80079fe:	2301      	movs	r3, #1
 8007a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a1e:	4b1f      	ldr	r3, [pc, #124]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2c:	491b      	ldr	r1, [pc, #108]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a40:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a50:	4912      	ldr	r1, [pc, #72]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007a64:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a74:	4909      	ldr	r1, [pc, #36]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00f      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	e002      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007a9a:	bf00      	nop
 8007a9c:	40023800 	.word	0x40023800
 8007aa0:	4986      	ldr	r1, [pc, #536]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007ab4:	4b81      	ldr	r3, [pc, #516]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac4:	497d      	ldr	r1, [pc, #500]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d006      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80d6 	beq.w	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ae0:	4b76      	ldr	r3, [pc, #472]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a75      	ldr	r2, [pc, #468]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aec:	f7fd fd70 	bl	80055d0 <HAL_GetTick>
 8007af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007af2:	e008      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007af4:	f7fd fd6c 	bl	80055d0 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b64      	cmp	r3, #100	; 0x64
 8007b00:	d901      	bls.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e195      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b06:	4b6d      	ldr	r3, [pc, #436]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f0      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d021      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d11d      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b26:	4b65      	ldr	r3, [pc, #404]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b2c:	0c1b      	lsrs	r3, r3, #16
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b34:	4b61      	ldr	r3, [pc, #388]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b3a:	0e1b      	lsrs	r3, r3, #24
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	019a      	lsls	r2, r3, #6
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	041b      	lsls	r3, r3, #16
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	061b      	lsls	r3, r3, #24
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	071b      	lsls	r3, r3, #28
 8007b5a:	4958      	ldr	r1, [pc, #352]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d02e      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b8c:	d129      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b8e:	4b4b      	ldr	r3, [pc, #300]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b94:	0c1b      	lsrs	r3, r3, #16
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b9c:	4b47      	ldr	r3, [pc, #284]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba2:	0f1b      	lsrs	r3, r3, #28
 8007ba4:	f003 0307 	and.w	r3, r3, #7
 8007ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	019a      	lsls	r2, r3, #6
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	061b      	lsls	r3, r3, #24
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	071b      	lsls	r3, r3, #28
 8007bc2:	493e      	ldr	r1, [pc, #248]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007bca:	4b3c      	ldr	r3, [pc, #240]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd0:	f023 021f 	bic.w	r2, r3, #31
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	4938      	ldr	r1, [pc, #224]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01d      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bee:	4b33      	ldr	r3, [pc, #204]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf4:	0e1b      	lsrs	r3, r3, #24
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bfc:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c02:	0f1b      	lsrs	r3, r3, #28
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	019a      	lsls	r2, r3, #6
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	041b      	lsls	r3, r3, #16
 8007c16:	431a      	orrs	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	061b      	lsls	r3, r3, #24
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	071b      	lsls	r3, r3, #28
 8007c22:	4926      	ldr	r1, [pc, #152]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	019a      	lsls	r2, r3, #6
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	061b      	lsls	r3, r3, #24
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	071b      	lsls	r3, r3, #28
 8007c52:	491a      	ldr	r1, [pc, #104]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c5a:	4b18      	ldr	r3, [pc, #96]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a17      	ldr	r2, [pc, #92]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c66:	f7fd fcb3 	bl	80055d0 <HAL_GetTick>
 8007c6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c6e:	f7fd fcaf 	bl	80055d0 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b64      	cmp	r3, #100	; 0x64
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e0d8      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c80:	4b0e      	ldr	r3, [pc, #56]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0f0      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	f040 80ce 	bne.w	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c94:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca0:	f7fd fc96 	bl	80055d0 <HAL_GetTick>
 8007ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ca6:	e00b      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ca8:	f7fd fc92 	bl	80055d0 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b64      	cmp	r3, #100	; 0x64
 8007cb4:	d904      	bls.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e0bb      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007cba:	bf00      	nop
 8007cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cc0:	4b5e      	ldr	r3, [pc, #376]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ccc:	d0ec      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d02e      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d12a      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007cf6:	4b51      	ldr	r3, [pc, #324]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfc:	0c1b      	lsrs	r3, r3, #16
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d04:	4b4d      	ldr	r3, [pc, #308]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0a:	0f1b      	lsrs	r3, r3, #28
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	019a      	lsls	r2, r3, #6
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	061b      	lsls	r3, r3, #24
 8007d24:	431a      	orrs	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	071b      	lsls	r3, r3, #28
 8007d2a:	4944      	ldr	r1, [pc, #272]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d32:	4b42      	ldr	r3, [pc, #264]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	3b01      	subs	r3, #1
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	493d      	ldr	r1, [pc, #244]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d022      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d60:	d11d      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d62:	4b36      	ldr	r3, [pc, #216]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d68:	0e1b      	lsrs	r3, r3, #24
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d70:	4b32      	ldr	r3, [pc, #200]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	0f1b      	lsrs	r3, r3, #28
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	019a      	lsls	r2, r3, #6
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	061b      	lsls	r3, r3, #24
 8007d90:	431a      	orrs	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	071b      	lsls	r3, r3, #28
 8007d96:	4929      	ldr	r1, [pc, #164]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d028      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007daa:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db0:	0e1b      	lsrs	r3, r3, #24
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007db8:	4b20      	ldr	r3, [pc, #128]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	019a      	lsls	r2, r3, #6
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	061b      	lsls	r3, r3, #24
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	071b      	lsls	r3, r3, #28
 8007dde:	4917      	ldr	r1, [pc, #92]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007de6:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4911      	ldr	r1, [pc, #68]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dfc:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a0e      	ldr	r2, [pc, #56]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e08:	f7fd fbe2 	bl	80055d0 <HAL_GetTick>
 8007e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e10:	f7fd fbde 	bl	80055d0 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	; 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e007      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e22:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e2e:	d1ef      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	40023800 	.word	0x40023800

08007e40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e01c      	b.n	8007e8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	795b      	ldrb	r3, [r3, #5]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fb ff5a 	bl	8003d1c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0204 	orr.w	r2, r2, #4
 8007e7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e09d      	b.n	8007fe2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d108      	bne.n	8007ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eb6:	d009      	beq.n	8007ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	61da      	str	r2, [r3, #28]
 8007ebe:	e005      	b.n	8007ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7fb ff76 	bl	8003dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f0c:	d902      	bls.n	8007f14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	e002      	b.n	8007f1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f22:	d007      	beq.n	8007f34 <HAL_SPI_Init+0xa0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f2c:	d002      	beq.n	8007f34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f76:	ea42 0103 	orr.w	r1, r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	f003 0204 	and.w	r2, r3, #4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	f003 0310 	and.w	r3, r3, #16
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007fb0:	ea42 0103 	orr.w	r1, r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69da      	ldr	r2, [r3, #28]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b088      	sub	sp, #32
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	603b      	str	r3, [r7, #0]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_SPI_Transmit+0x22>
 8008008:	2302      	movs	r3, #2
 800800a:	e158      	b.n	80082be <HAL_SPI_Transmit+0x2d4>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008014:	f7fd fadc 	bl	80055d0 <HAL_GetTick>
 8008018:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b01      	cmp	r3, #1
 8008028:	d002      	beq.n	8008030 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800802a:	2302      	movs	r3, #2
 800802c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800802e:	e13d      	b.n	80082ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_SPI_Transmit+0x52>
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008040:	e134      	b.n	80082ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2203      	movs	r2, #3
 8008046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	88fa      	ldrh	r2, [r7, #6]
 800805a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808c:	d10f      	bne.n	80080ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800809c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d007      	beq.n	80080cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080d4:	d94b      	bls.n	800816e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_SPI_Transmit+0xfa>
 80080de:	8afb      	ldrh	r3, [r7, #22]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d13e      	bne.n	8008162 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	881a      	ldrh	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	1c9a      	adds	r2, r3, #2
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008108:	e02b      	b.n	8008162 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b02      	cmp	r3, #2
 8008116:	d112      	bne.n	800813e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	881a      	ldrh	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	1c9a      	adds	r2, r3, #2
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800813c:	e011      	b.n	8008162 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800813e:	f7fd fa47 	bl	80055d0 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d803      	bhi.n	8008156 <HAL_SPI_Transmit+0x16c>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d102      	bne.n	800815c <HAL_SPI_Transmit+0x172>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008160:	e0a4      	b.n	80082ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1ce      	bne.n	800810a <HAL_SPI_Transmit+0x120>
 800816c:	e07c      	b.n	8008268 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <HAL_SPI_Transmit+0x192>
 8008176:	8afb      	ldrh	r3, [r7, #22]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d170      	bne.n	800825e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b01      	cmp	r3, #1
 8008184:	d912      	bls.n	80081ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b02      	subs	r3, #2
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081aa:	e058      	b.n	800825e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	330c      	adds	r3, #12
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80081d2:	e044      	b.n	800825e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d12b      	bne.n	800823a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d912      	bls.n	8008212 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	1c9a      	adds	r2, r3, #2
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b02      	subs	r3, #2
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008210:	e025      	b.n	800825e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	330c      	adds	r3, #12
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008238:	e011      	b.n	800825e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800823a:	f7fd f9c9 	bl	80055d0 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d803      	bhi.n	8008252 <HAL_SPI_Transmit+0x268>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d102      	bne.n	8008258 <HAL_SPI_Transmit+0x26e>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800825c:	e026      	b.n	80082ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1b5      	bne.n	80081d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f945 	bl	80084fc <SPI_EndRxTxTransaction>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2220      	movs	r2, #32
 800827c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008286:	2300      	movs	r3, #0
 8008288:	613b      	str	r3, [r7, #16]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e000      	b.n	80082ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 80082aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082d8:	f7fd f97a 	bl	80055d0 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082e8:	f7fd f972 	bl	80055d0 <HAL_GetTick>
 80082ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082ee:	4b39      	ldr	r3, [pc, #228]	; (80083d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	015b      	lsls	r3, r3, #5
 80082f4:	0d1b      	lsrs	r3, r3, #20
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	fb02 f303 	mul.w	r3, r2, r3
 80082fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082fe:	e054      	b.n	80083aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d050      	beq.n	80083aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008308:	f7fd f962 	bl	80055d0 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	429a      	cmp	r2, r3
 8008316:	d902      	bls.n	800831e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d13d      	bne.n	800839a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800832c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008336:	d111      	bne.n	800835c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008340:	d004      	beq.n	800834c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800834a:	d107      	bne.n	800835c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008364:	d10f      	bne.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e017      	b.n	80083ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4013      	ands	r3, r2
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d19b      	bne.n	8008300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	200000c0 	.word	0x200000c0

080083d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083e6:	f7fd f8f3 	bl	80055d0 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	4413      	add	r3, r2
 80083f4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083f6:	f7fd f8eb 	bl	80055d0 <HAL_GetTick>
 80083fa:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083fc:	4b3e      	ldr	r3, [pc, #248]	; (80084f8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	00da      	lsls	r2, r3, #3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	0d1b      	lsrs	r3, r3, #20
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008414:	e062      	b.n	80084dc <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800841c:	d109      	bne.n	8008432 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d106      	bne.n	8008432 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	330c      	adds	r3, #12
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008430:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d050      	beq.n	80084dc <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800843a:	f7fd f8c9 	bl	80055d0 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	429a      	cmp	r2, r3
 8008448:	d902      	bls.n	8008450 <SPI_WaitFifoStateUntilTimeout+0x78>
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d13d      	bne.n	80084cc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800845e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008468:	d111      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008472:	d004      	beq.n	800847e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847c:	d107      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800848c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008496:	d10f      	bne.n	80084b8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e010      	b.n	80084ee <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3b01      	subs	r3, #1
 80084da:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	4013      	ands	r3, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d194      	bne.n	8008416 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3720      	adds	r7, #32
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	200000c0 	.word	0x200000c0

080084fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af02      	add	r7, sp, #8
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2200      	movs	r2, #0
 8008510:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff ff5f 	bl	80083d8 <SPI_WaitFifoStateUntilTimeout>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d007      	beq.n	8008530 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008524:	f043 0220 	orr.w	r2, r3, #32
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e027      	b.n	8008580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2200      	movs	r2, #0
 8008538:	2180      	movs	r1, #128	; 0x80
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff fec4 	bl	80082c8 <SPI_WaitFlagStateUntilTimeout>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854a:	f043 0220 	orr.w	r2, r3, #32
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e014      	b.n	8008580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2200      	movs	r2, #0
 800855e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff ff38 	bl	80083d8 <SPI_WaitFifoStateUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d007      	beq.n	800857e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008572:	f043 0220 	orr.w	r2, r3, #32
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e000      	b.n	8008580 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e049      	b.n	800862e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fb fec4 	bl	800433c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f000 fdb2 	bl	8009130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	d001      	beq.n	8008650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e054      	b.n	80086fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a26      	ldr	r2, [pc, #152]	; (8008708 <HAL_TIM_Base_Start_IT+0xd0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d022      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867a:	d01d      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a22      	ldr	r2, [pc, #136]	; (800870c <HAL_TIM_Base_Start_IT+0xd4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a21      	ldr	r2, [pc, #132]	; (8008710 <HAL_TIM_Base_Start_IT+0xd8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1f      	ldr	r2, [pc, #124]	; (8008714 <HAL_TIM_Base_Start_IT+0xdc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1e      	ldr	r2, [pc, #120]	; (8008718 <HAL_TIM_Base_Start_IT+0xe0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1c      	ldr	r2, [pc, #112]	; (800871c <HAL_TIM_Base_Start_IT+0xe4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <HAL_TIM_Base_Start_IT+0xe8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d115      	bne.n	80086e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	4b19      	ldr	r3, [pc, #100]	; (8008724 <HAL_TIM_Base_Start_IT+0xec>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b06      	cmp	r3, #6
 80086c8:	d015      	beq.n	80086f6 <HAL_TIM_Base_Start_IT+0xbe>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d011      	beq.n	80086f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0201 	orr.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e2:	e008      	b.n	80086f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0201 	orr.w	r2, r2, #1
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e000      	b.n	80086f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40010000 	.word	0x40010000
 800870c:	40000400 	.word	0x40000400
 8008710:	40000800 	.word	0x40000800
 8008714:	40000c00 	.word	0x40000c00
 8008718:	40010400 	.word	0x40010400
 800871c:	40014000 	.word	0x40014000
 8008720:	40001800 	.word	0x40001800
 8008724:	00010007 	.word	0x00010007

08008728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e049      	b.n	80087ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f841 	bl	80087d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f000 fce2 	bl	8009130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d109      	bne.n	8008810 <HAL_TIM_PWM_Start+0x24>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b01      	cmp	r3, #1
 8008806:	bf14      	ite	ne
 8008808:	2301      	movne	r3, #1
 800880a:	2300      	moveq	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	e03c      	b.n	800888a <HAL_TIM_PWM_Start+0x9e>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b04      	cmp	r3, #4
 8008814:	d109      	bne.n	800882a <HAL_TIM_PWM_Start+0x3e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b01      	cmp	r3, #1
 8008820:	bf14      	ite	ne
 8008822:	2301      	movne	r3, #1
 8008824:	2300      	moveq	r3, #0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	e02f      	b.n	800888a <HAL_TIM_PWM_Start+0x9e>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b08      	cmp	r3, #8
 800882e:	d109      	bne.n	8008844 <HAL_TIM_PWM_Start+0x58>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	bf14      	ite	ne
 800883c:	2301      	movne	r3, #1
 800883e:	2300      	moveq	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	e022      	b.n	800888a <HAL_TIM_PWM_Start+0x9e>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b0c      	cmp	r3, #12
 8008848:	d109      	bne.n	800885e <HAL_TIM_PWM_Start+0x72>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b01      	cmp	r3, #1
 8008854:	bf14      	ite	ne
 8008856:	2301      	movne	r3, #1
 8008858:	2300      	moveq	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	e015      	b.n	800888a <HAL_TIM_PWM_Start+0x9e>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b10      	cmp	r3, #16
 8008862:	d109      	bne.n	8008878 <HAL_TIM_PWM_Start+0x8c>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	bf14      	ite	ne
 8008870:	2301      	movne	r3, #1
 8008872:	2300      	moveq	r3, #0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	e008      	b.n	800888a <HAL_TIM_PWM_Start+0x9e>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e092      	b.n	80089b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d104      	bne.n	80088a2 <HAL_TIM_PWM_Start+0xb6>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088a0:	e023      	b.n	80088ea <HAL_TIM_PWM_Start+0xfe>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d104      	bne.n	80088b2 <HAL_TIM_PWM_Start+0xc6>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088b0:	e01b      	b.n	80088ea <HAL_TIM_PWM_Start+0xfe>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d104      	bne.n	80088c2 <HAL_TIM_PWM_Start+0xd6>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088c0:	e013      	b.n	80088ea <HAL_TIM_PWM_Start+0xfe>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b0c      	cmp	r3, #12
 80088c6:	d104      	bne.n	80088d2 <HAL_TIM_PWM_Start+0xe6>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088d0:	e00b      	b.n	80088ea <HAL_TIM_PWM_Start+0xfe>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d104      	bne.n	80088e2 <HAL_TIM_PWM_Start+0xf6>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088e0:	e003      	b.n	80088ea <HAL_TIM_PWM_Start+0xfe>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2202      	movs	r2, #2
 80088e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2201      	movs	r2, #1
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 ffb4 	bl	8009860 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a30      	ldr	r2, [pc, #192]	; (80089c0 <HAL_TIM_PWM_Start+0x1d4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d004      	beq.n	800890c <HAL_TIM_PWM_Start+0x120>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a2f      	ldr	r2, [pc, #188]	; (80089c4 <HAL_TIM_PWM_Start+0x1d8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d101      	bne.n	8008910 <HAL_TIM_PWM_Start+0x124>
 800890c:	2301      	movs	r3, #1
 800890e:	e000      	b.n	8008912 <HAL_TIM_PWM_Start+0x126>
 8008910:	2300      	movs	r3, #0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d007      	beq.n	8008926 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008924:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a25      	ldr	r2, [pc, #148]	; (80089c0 <HAL_TIM_PWM_Start+0x1d4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d022      	beq.n	8008976 <HAL_TIM_PWM_Start+0x18a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008938:	d01d      	beq.n	8008976 <HAL_TIM_PWM_Start+0x18a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a22      	ldr	r2, [pc, #136]	; (80089c8 <HAL_TIM_PWM_Start+0x1dc>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d018      	beq.n	8008976 <HAL_TIM_PWM_Start+0x18a>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a20      	ldr	r2, [pc, #128]	; (80089cc <HAL_TIM_PWM_Start+0x1e0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d013      	beq.n	8008976 <HAL_TIM_PWM_Start+0x18a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a1f      	ldr	r2, [pc, #124]	; (80089d0 <HAL_TIM_PWM_Start+0x1e4>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00e      	beq.n	8008976 <HAL_TIM_PWM_Start+0x18a>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a19      	ldr	r2, [pc, #100]	; (80089c4 <HAL_TIM_PWM_Start+0x1d8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d009      	beq.n	8008976 <HAL_TIM_PWM_Start+0x18a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a1b      	ldr	r2, [pc, #108]	; (80089d4 <HAL_TIM_PWM_Start+0x1e8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d004      	beq.n	8008976 <HAL_TIM_PWM_Start+0x18a>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a19      	ldr	r2, [pc, #100]	; (80089d8 <HAL_TIM_PWM_Start+0x1ec>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d115      	bne.n	80089a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	4b17      	ldr	r3, [pc, #92]	; (80089dc <HAL_TIM_PWM_Start+0x1f0>)
 800897e:	4013      	ands	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b06      	cmp	r3, #6
 8008986:	d015      	beq.n	80089b4 <HAL_TIM_PWM_Start+0x1c8>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898e:	d011      	beq.n	80089b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0201 	orr.w	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a0:	e008      	b.n	80089b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0201 	orr.w	r2, r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	e000      	b.n	80089b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40010000 	.word	0x40010000
 80089c4:	40010400 	.word	0x40010400
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40000c00 	.word	0x40000c00
 80089d4:	40014000 	.word	0x40014000
 80089d8:	40001800 	.word	0x40001800
 80089dc:	00010007 	.word	0x00010007

080089e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2200      	movs	r2, #0
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 ff34 	bl	8009860 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a36      	ldr	r2, [pc, #216]	; (8008ad8 <HAL_TIM_PWM_Stop+0xf8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d004      	beq.n	8008a0c <HAL_TIM_PWM_Stop+0x2c>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a35      	ldr	r2, [pc, #212]	; (8008adc <HAL_TIM_PWM_Stop+0xfc>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIM_PWM_Stop+0x30>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <HAL_TIM_PWM_Stop+0x32>
 8008a10:	2300      	movs	r3, #0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d017      	beq.n	8008a46 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6a1a      	ldr	r2, [r3, #32]
 8008a1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10f      	bne.n	8008a46 <HAL_TIM_PWM_Stop+0x66>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a1a      	ldr	r2, [r3, #32]
 8008a2c:	f240 4344 	movw	r3, #1092	; 0x444
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d107      	bne.n	8008a46 <HAL_TIM_PWM_Stop+0x66>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6a1a      	ldr	r2, [r3, #32]
 8008a4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a50:	4013      	ands	r3, r2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10f      	bne.n	8008a76 <HAL_TIM_PWM_Stop+0x96>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	f240 4344 	movw	r3, #1092	; 0x444
 8008a60:	4013      	ands	r3, r2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d107      	bne.n	8008a76 <HAL_TIM_PWM_Stop+0x96>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0201 	bic.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <HAL_TIM_PWM_Stop+0xa6>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a84:	e023      	b.n	8008ace <HAL_TIM_PWM_Stop+0xee>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d104      	bne.n	8008a96 <HAL_TIM_PWM_Stop+0xb6>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a94:	e01b      	b.n	8008ace <HAL_TIM_PWM_Stop+0xee>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_PWM_Stop+0xc6>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa4:	e013      	b.n	8008ace <HAL_TIM_PWM_Stop+0xee>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b0c      	cmp	r3, #12
 8008aaa:	d104      	bne.n	8008ab6 <HAL_TIM_PWM_Stop+0xd6>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ab4:	e00b      	b.n	8008ace <HAL_TIM_PWM_Stop+0xee>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b10      	cmp	r3, #16
 8008aba:	d104      	bne.n	8008ac6 <HAL_TIM_PWM_Stop+0xe6>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ac4:	e003      	b.n	8008ace <HAL_TIM_PWM_Stop+0xee>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	40010000 	.word	0x40010000
 8008adc:	40010400 	.word	0x40010400

08008ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d122      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d11b      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f06f 0202 	mvn.w	r2, #2
 8008b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fae6 	bl	80090f4 <HAL_TIM_IC_CaptureCallback>
 8008b28:	e005      	b.n	8008b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fad8 	bl	80090e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fae9 	bl	8009108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d122      	bne.n	8008b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d11b      	bne.n	8008b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0204 	mvn.w	r2, #4
 8008b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fabc 	bl	80090f4 <HAL_TIM_IC_CaptureCallback>
 8008b7c:	e005      	b.n	8008b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 faae 	bl	80090e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fabf 	bl	8009108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d122      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d11b      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0208 	mvn.w	r2, #8
 8008bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2204      	movs	r2, #4
 8008bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa92 	bl	80090f4 <HAL_TIM_IC_CaptureCallback>
 8008bd0:	e005      	b.n	8008bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa84 	bl	80090e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fa95 	bl	8009108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	d122      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d11b      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f06f 0210 	mvn.w	r2, #16
 8008c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa68 	bl	80090f4 <HAL_TIM_IC_CaptureCallback>
 8008c24:	e005      	b.n	8008c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa5a 	bl	80090e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fa6b 	bl	8009108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d10e      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d107      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f06f 0201 	mvn.w	r2, #1
 8008c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa34 	bl	80090cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6e:	2b80      	cmp	r3, #128	; 0x80
 8008c70:	d10e      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7c:	2b80      	cmp	r3, #128	; 0x80
 8008c7e:	d107      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fea6 	bl	80099dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c9e:	d10e      	bne.n	8008cbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008caa:	2b80      	cmp	r3, #128	; 0x80
 8008cac:	d107      	bne.n	8008cbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fe99 	bl	80099f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc8:	2b40      	cmp	r3, #64	; 0x40
 8008cca:	d10e      	bne.n	8008cea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd6:	2b40      	cmp	r3, #64	; 0x40
 8008cd8:	d107      	bne.n	8008cea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa19 	bl	800911c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d10e      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	d107      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f06f 0220 	mvn.w	r2, #32
 8008d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fe59 	bl	80099c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d16:	bf00      	nop
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e0fd      	b.n	8008f36 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b14      	cmp	r3, #20
 8008d46:	f200 80f0 	bhi.w	8008f2a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008d4a:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008da5 	.word	0x08008da5
 8008d54:	08008f2b 	.word	0x08008f2b
 8008d58:	08008f2b 	.word	0x08008f2b
 8008d5c:	08008f2b 	.word	0x08008f2b
 8008d60:	08008de5 	.word	0x08008de5
 8008d64:	08008f2b 	.word	0x08008f2b
 8008d68:	08008f2b 	.word	0x08008f2b
 8008d6c:	08008f2b 	.word	0x08008f2b
 8008d70:	08008e27 	.word	0x08008e27
 8008d74:	08008f2b 	.word	0x08008f2b
 8008d78:	08008f2b 	.word	0x08008f2b
 8008d7c:	08008f2b 	.word	0x08008f2b
 8008d80:	08008e67 	.word	0x08008e67
 8008d84:	08008f2b 	.word	0x08008f2b
 8008d88:	08008f2b 	.word	0x08008f2b
 8008d8c:	08008f2b 	.word	0x08008f2b
 8008d90:	08008ea9 	.word	0x08008ea9
 8008d94:	08008f2b 	.word	0x08008f2b
 8008d98:	08008f2b 	.word	0x08008f2b
 8008d9c:	08008f2b 	.word	0x08008f2b
 8008da0:	08008ee9 	.word	0x08008ee9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fa60 	bl	8009270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f042 0208 	orr.w	r2, r2, #8
 8008dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699a      	ldr	r2, [r3, #24]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0204 	bic.w	r2, r2, #4
 8008dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6999      	ldr	r1, [r3, #24]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	691a      	ldr	r2, [r3, #16]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	619a      	str	r2, [r3, #24]
      break;
 8008de2:	e0a3      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fab2 	bl	8009354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6999      	ldr	r1, [r3, #24]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	021a      	lsls	r2, r3, #8
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	619a      	str	r2, [r3, #24]
      break;
 8008e24:	e082      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fb09 	bl	8009444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0208 	orr.w	r2, r2, #8
 8008e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69da      	ldr	r2, [r3, #28]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0204 	bic.w	r2, r2, #4
 8008e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69d9      	ldr	r1, [r3, #28]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	61da      	str	r2, [r3, #28]
      break;
 8008e64:	e062      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fb5f 	bl	8009530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69d9      	ldr	r1, [r3, #28]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	021a      	lsls	r2, r3, #8
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	61da      	str	r2, [r3, #28]
      break;
 8008ea6:	e041      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fb96 	bl	80095e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0208 	orr.w	r2, r2, #8
 8008ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0204 	bic.w	r2, r2, #4
 8008ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ee6:	e021      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fbc8 	bl	8009684 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	021a      	lsls	r2, r3, #8
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f28:	e000      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop

08008f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_TIM_ConfigClockSource+0x18>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e0b3      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x180>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4b55      	ldr	r3, [pc, #340]	; (80090c8 <HAL_TIM_ConfigClockSource+0x188>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f90:	d03e      	beq.n	8009010 <HAL_TIM_ConfigClockSource+0xd0>
 8008f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f96:	f200 8087 	bhi.w	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9e:	f000 8085 	beq.w	80090ac <HAL_TIM_ConfigClockSource+0x16c>
 8008fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa6:	d87f      	bhi.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008fa8:	2b70      	cmp	r3, #112	; 0x70
 8008faa:	d01a      	beq.n	8008fe2 <HAL_TIM_ConfigClockSource+0xa2>
 8008fac:	2b70      	cmp	r3, #112	; 0x70
 8008fae:	d87b      	bhi.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008fb0:	2b60      	cmp	r3, #96	; 0x60
 8008fb2:	d050      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0x116>
 8008fb4:	2b60      	cmp	r3, #96	; 0x60
 8008fb6:	d877      	bhi.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008fb8:	2b50      	cmp	r3, #80	; 0x50
 8008fba:	d03c      	beq.n	8009036 <HAL_TIM_ConfigClockSource+0xf6>
 8008fbc:	2b50      	cmp	r3, #80	; 0x50
 8008fbe:	d873      	bhi.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d058      	beq.n	8009076 <HAL_TIM_ConfigClockSource+0x136>
 8008fc4:	2b40      	cmp	r3, #64	; 0x40
 8008fc6:	d86f      	bhi.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008fc8:	2b30      	cmp	r3, #48	; 0x30
 8008fca:	d064      	beq.n	8009096 <HAL_TIM_ConfigClockSource+0x156>
 8008fcc:	2b30      	cmp	r3, #48	; 0x30
 8008fce:	d86b      	bhi.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d060      	beq.n	8009096 <HAL_TIM_ConfigClockSource+0x156>
 8008fd4:	2b20      	cmp	r3, #32
 8008fd6:	d867      	bhi.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d05c      	beq.n	8009096 <HAL_TIM_ConfigClockSource+0x156>
 8008fdc:	2b10      	cmp	r3, #16
 8008fde:	d05a      	beq.n	8009096 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008fe0:	e062      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	6899      	ldr	r1, [r3, #8]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f000 fc15 	bl	8009820 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009004:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	609a      	str	r2, [r3, #8]
      break;
 800900e:	e04e      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6818      	ldr	r0, [r3, #0]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	6899      	ldr	r1, [r3, #8]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f000 fbfe 	bl	8009820 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009032:	609a      	str	r2, [r3, #8]
      break;
 8009034:	e03b      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	6859      	ldr	r1, [r3, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	461a      	mov	r2, r3
 8009044:	f000 fb72 	bl	800972c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2150      	movs	r1, #80	; 0x50
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fbcb 	bl	80097ea <TIM_ITRx_SetConfig>
      break;
 8009054:	e02b      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6859      	ldr	r1, [r3, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	461a      	mov	r2, r3
 8009064:	f000 fb91 	bl	800978a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2160      	movs	r1, #96	; 0x60
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fbbb 	bl	80097ea <TIM_ITRx_SetConfig>
      break;
 8009074:	e01b      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6859      	ldr	r1, [r3, #4]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	461a      	mov	r2, r3
 8009084:	f000 fb52 	bl	800972c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2140      	movs	r1, #64	; 0x40
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fbab 	bl	80097ea <TIM_ITRx_SetConfig>
      break;
 8009094:	e00b      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f000 fba2 	bl	80097ea <TIM_ITRx_SetConfig>
        break;
 80090a6:	e002      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090a8:	bf00      	nop
 80090aa:	e000      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	fffeff88 	.word	0xfffeff88

080090cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a40      	ldr	r2, [pc, #256]	; (8009244 <TIM_Base_SetConfig+0x114>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d013      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914e:	d00f      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a3d      	ldr	r2, [pc, #244]	; (8009248 <TIM_Base_SetConfig+0x118>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00b      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a3c      	ldr	r2, [pc, #240]	; (800924c <TIM_Base_SetConfig+0x11c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d007      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a3b      	ldr	r2, [pc, #236]	; (8009250 <TIM_Base_SetConfig+0x120>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d003      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a3a      	ldr	r2, [pc, #232]	; (8009254 <TIM_Base_SetConfig+0x124>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d108      	bne.n	8009182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a2f      	ldr	r2, [pc, #188]	; (8009244 <TIM_Base_SetConfig+0x114>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d02b      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009190:	d027      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a2c      	ldr	r2, [pc, #176]	; (8009248 <TIM_Base_SetConfig+0x118>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d023      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a2b      	ldr	r2, [pc, #172]	; (800924c <TIM_Base_SetConfig+0x11c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d01f      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a2a      	ldr	r2, [pc, #168]	; (8009250 <TIM_Base_SetConfig+0x120>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d01b      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a29      	ldr	r2, [pc, #164]	; (8009254 <TIM_Base_SetConfig+0x124>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d017      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a28      	ldr	r2, [pc, #160]	; (8009258 <TIM_Base_SetConfig+0x128>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d013      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a27      	ldr	r2, [pc, #156]	; (800925c <TIM_Base_SetConfig+0x12c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00f      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a26      	ldr	r2, [pc, #152]	; (8009260 <TIM_Base_SetConfig+0x130>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00b      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a25      	ldr	r2, [pc, #148]	; (8009264 <TIM_Base_SetConfig+0x134>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d007      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a24      	ldr	r2, [pc, #144]	; (8009268 <TIM_Base_SetConfig+0x138>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a23      	ldr	r2, [pc, #140]	; (800926c <TIM_Base_SetConfig+0x13c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d108      	bne.n	80091f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a0a      	ldr	r2, [pc, #40]	; (8009244 <TIM_Base_SetConfig+0x114>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d003      	beq.n	8009228 <TIM_Base_SetConfig+0xf8>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a0c      	ldr	r2, [pc, #48]	; (8009254 <TIM_Base_SetConfig+0x124>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d103      	bne.n	8009230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	615a      	str	r2, [r3, #20]
}
 8009236:	bf00      	nop
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	40010000 	.word	0x40010000
 8009248:	40000400 	.word	0x40000400
 800924c:	40000800 	.word	0x40000800
 8009250:	40000c00 	.word	0x40000c00
 8009254:	40010400 	.word	0x40010400
 8009258:	40014000 	.word	0x40014000
 800925c:	40014400 	.word	0x40014400
 8009260:	40014800 	.word	0x40014800
 8009264:	40001800 	.word	0x40001800
 8009268:	40001c00 	.word	0x40001c00
 800926c:	40002000 	.word	0x40002000

08009270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	f023 0201 	bic.w	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	4b2b      	ldr	r3, [pc, #172]	; (8009348 <TIM_OC1_SetConfig+0xd8>)
 800929c:	4013      	ands	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0303 	bic.w	r3, r3, #3
 80092a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f023 0302 	bic.w	r3, r3, #2
 80092b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a21      	ldr	r2, [pc, #132]	; (800934c <TIM_OC1_SetConfig+0xdc>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d003      	beq.n	80092d4 <TIM_OC1_SetConfig+0x64>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a20      	ldr	r2, [pc, #128]	; (8009350 <TIM_OC1_SetConfig+0xe0>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d10c      	bne.n	80092ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f023 0308 	bic.w	r3, r3, #8
 80092da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f023 0304 	bic.w	r3, r3, #4
 80092ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a16      	ldr	r2, [pc, #88]	; (800934c <TIM_OC1_SetConfig+0xdc>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d003      	beq.n	80092fe <TIM_OC1_SetConfig+0x8e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a15      	ldr	r2, [pc, #84]	; (8009350 <TIM_OC1_SetConfig+0xe0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d111      	bne.n	8009322 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800930c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	621a      	str	r2, [r3, #32]
}
 800933c:	bf00      	nop
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	fffeff8f 	.word	0xfffeff8f
 800934c:	40010000 	.word	0x40010000
 8009350:	40010400 	.word	0x40010400

08009354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	f023 0210 	bic.w	r2, r3, #16
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	4b2e      	ldr	r3, [pc, #184]	; (8009438 <TIM_OC2_SetConfig+0xe4>)
 8009380:	4013      	ands	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800938a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 0320 	bic.w	r3, r3, #32
 800939e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	011b      	lsls	r3, r3, #4
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a23      	ldr	r2, [pc, #140]	; (800943c <TIM_OC2_SetConfig+0xe8>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d003      	beq.n	80093bc <TIM_OC2_SetConfig+0x68>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a22      	ldr	r2, [pc, #136]	; (8009440 <TIM_OC2_SetConfig+0xec>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d10d      	bne.n	80093d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a18      	ldr	r2, [pc, #96]	; (800943c <TIM_OC2_SetConfig+0xe8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC2_SetConfig+0x94>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a17      	ldr	r2, [pc, #92]	; (8009440 <TIM_OC2_SetConfig+0xec>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d113      	bne.n	8009410 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	621a      	str	r2, [r3, #32]
}
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	feff8fff 	.word	0xfeff8fff
 800943c:	40010000 	.word	0x40010000
 8009440:	40010400 	.word	0x40010400

08009444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <TIM_OC3_SetConfig+0xe0>)
 8009470:	4013      	ands	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0303 	bic.w	r3, r3, #3
 800947a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800948c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	021b      	lsls	r3, r3, #8
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	4313      	orrs	r3, r2
 8009498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a22      	ldr	r2, [pc, #136]	; (8009528 <TIM_OC3_SetConfig+0xe4>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_OC3_SetConfig+0x66>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a21      	ldr	r2, [pc, #132]	; (800952c <TIM_OC3_SetConfig+0xe8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d10d      	bne.n	80094c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a17      	ldr	r2, [pc, #92]	; (8009528 <TIM_OC3_SetConfig+0xe4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d003      	beq.n	80094d6 <TIM_OC3_SetConfig+0x92>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a16      	ldr	r2, [pc, #88]	; (800952c <TIM_OC3_SetConfig+0xe8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d113      	bne.n	80094fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	621a      	str	r2, [r3, #32]
}
 8009518:	bf00      	nop
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	fffeff8f 	.word	0xfffeff8f
 8009528:	40010000 	.word	0x40010000
 800952c:	40010400 	.word	0x40010400

08009530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <TIM_OC4_SetConfig+0xa4>)
 800955c:	4013      	ands	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800957a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	031b      	lsls	r3, r3, #12
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4313      	orrs	r3, r2
 8009586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <TIM_OC4_SetConfig+0xa8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_OC4_SetConfig+0x68>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a12      	ldr	r2, [pc, #72]	; (80095dc <TIM_OC4_SetConfig+0xac>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d109      	bne.n	80095ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800959e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	019b      	lsls	r3, r3, #6
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	621a      	str	r2, [r3, #32]
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	feff8fff 	.word	0xfeff8fff
 80095d8:	40010000 	.word	0x40010000
 80095dc:	40010400 	.word	0x40010400

080095e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4b1b      	ldr	r3, [pc, #108]	; (8009678 <TIM_OC5_SetConfig+0x98>)
 800960c:	4013      	ands	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a12      	ldr	r2, [pc, #72]	; (800967c <TIM_OC5_SetConfig+0x9c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC5_SetConfig+0x5e>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a11      	ldr	r2, [pc, #68]	; (8009680 <TIM_OC5_SetConfig+0xa0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d109      	bne.n	8009652 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009644:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	621a      	str	r2, [r3, #32]
}
 800966c:	bf00      	nop
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	fffeff8f 	.word	0xfffeff8f
 800967c:	40010000 	.word	0x40010000
 8009680:	40010400 	.word	0x40010400

08009684 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4b1c      	ldr	r3, [pc, #112]	; (8009720 <TIM_OC6_SetConfig+0x9c>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4313      	orrs	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	051b      	lsls	r3, r3, #20
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a13      	ldr	r2, [pc, #76]	; (8009724 <TIM_OC6_SetConfig+0xa0>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d003      	beq.n	80096e4 <TIM_OC6_SetConfig+0x60>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a12      	ldr	r2, [pc, #72]	; (8009728 <TIM_OC6_SetConfig+0xa4>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d109      	bne.n	80096f8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	029b      	lsls	r3, r3, #10
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	621a      	str	r2, [r3, #32]
}
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	feff8fff 	.word	0xfeff8fff
 8009724:	40010000 	.word	0x40010000
 8009728:	40010400 	.word	0x40010400

0800972c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	f023 0201 	bic.w	r2, r3, #1
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f023 030a 	bic.w	r3, r3, #10
 8009768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4313      	orrs	r3, r2
 8009770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	621a      	str	r2, [r3, #32]
}
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800978a:	b480      	push	{r7}
 800978c:	b087      	sub	sp, #28
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	f023 0210 	bic.w	r2, r3, #16
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	031b      	lsls	r3, r3, #12
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	621a      	str	r2, [r3, #32]
}
 80097de:	bf00      	nop
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b085      	sub	sp, #20
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4313      	orrs	r3, r2
 8009808:	f043 0307 	orr.w	r3, r3, #7
 800980c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	609a      	str	r2, [r3, #8]
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800983a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	021a      	lsls	r2, r3, #8
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	431a      	orrs	r2, r3
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	4313      	orrs	r3, r2
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	609a      	str	r2, [r3, #8]
}
 8009854:	bf00      	nop
 8009856:	371c      	adds	r7, #28
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f003 031f 	and.w	r3, r3, #31
 8009872:	2201      	movs	r2, #1
 8009874:	fa02 f303 	lsl.w	r3, r2, r3
 8009878:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a1a      	ldr	r2, [r3, #32]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	43db      	mvns	r3, r3
 8009882:	401a      	ands	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a1a      	ldr	r2, [r3, #32]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f003 031f 	and.w	r3, r3, #31
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	fa01 f303 	lsl.w	r3, r1, r3
 8009898:	431a      	orrs	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
	...

080098ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e06d      	b.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a30      	ldr	r2, [pc, #192]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d004      	beq.n	80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a2f      	ldr	r2, [pc, #188]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d108      	bne.n	800990a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009910:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4313      	orrs	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a20      	ldr	r2, [pc, #128]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d022      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009936:	d01d      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d018      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a1c      	ldr	r2, [pc, #112]	; (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d013      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a1a      	ldr	r2, [pc, #104]	; (80099bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d00e      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a15      	ldr	r2, [pc, #84]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d009      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a16      	ldr	r2, [pc, #88]	; (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d004      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a15      	ldr	r2, [pc, #84]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d10c      	bne.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800997a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	4313      	orrs	r3, r2
 8009984:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40010400 	.word	0x40010400
 80099b4:	40000400 	.word	0x40000400
 80099b8:	40000800 	.word	0x40000800
 80099bc:	40000c00 	.word	0x40000c00
 80099c0:	40014000 	.word	0x40014000
 80099c4:	40001800 	.word	0x40001800

080099c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e040      	b.n	8009a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d106      	bne.n	8009a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7fa fda4 	bl	8004574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2224      	movs	r2, #36	; 0x24
 8009a30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0201 	bic.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f990 	bl	8009d68 <UART_SetConfig>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d101      	bne.n	8009a52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e022      	b.n	8009a98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fbe6 	bl	800a22c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689a      	ldr	r2, [r3, #8]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0201 	orr.w	r2, r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fc6d 	bl	800a370 <UART_CheckIdleState>
 8009a96:	4603      	mov	r3, r0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	; 0x28
 8009aa4:	af02      	add	r7, sp, #8
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	4613      	mov	r3, r2
 8009aae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab4:	2b20      	cmp	r3, #32
 8009ab6:	f040 8081 	bne.w	8009bbc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HAL_UART_Transmit+0x26>
 8009ac0:	88fb      	ldrh	r3, [r7, #6]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e079      	b.n	8009bbe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_UART_Transmit+0x38>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e072      	b.n	8009bbe <HAL_UART_Transmit+0x11e>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2221      	movs	r2, #33	; 0x21
 8009aec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aee:	f7fb fd6f 	bl	80055d0 <HAL_GetTick>
 8009af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	88fa      	ldrh	r2, [r7, #6]
 8009af8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	88fa      	ldrh	r2, [r7, #6]
 8009b00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0c:	d108      	bne.n	8009b20 <HAL_UART_Transmit+0x80>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	61bb      	str	r3, [r7, #24]
 8009b1e:	e003      	b.n	8009b28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009b30:	e02c      	b.n	8009b8c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2180      	movs	r1, #128	; 0x80
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 fc60 	bl	800a402 <UART_WaitOnFlagUntilTimeout>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e038      	b.n	8009bbe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	3302      	adds	r3, #2
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	e007      	b.n	8009b7a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	781a      	ldrb	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	3301      	adds	r3, #1
 8009b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1cc      	bne.n	8009b32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2140      	movs	r1, #64	; 0x40
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fc2d 	bl	800a402 <UART_WaitOnFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e005      	b.n	8009bbe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	e000      	b.n	8009bbe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009bbc:	2302      	movs	r3, #2
  }
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3720      	adds	r7, #32
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b08a      	sub	sp, #40	; 0x28
 8009bca:	af02      	add	r7, sp, #8
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	603b      	str	r3, [r7, #0]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	f040 80be 	bne.w	8009d5c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <HAL_UART_Receive+0x26>
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e0b6      	b.n	8009d5e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d101      	bne.n	8009bfe <HAL_UART_Receive+0x38>
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e0af      	b.n	8009d5e <HAL_UART_Receive+0x198>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2222      	movs	r2, #34	; 0x22
 8009c12:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c1a:	f7fb fcd9 	bl	80055d0 <HAL_GetTick>
 8009c1e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	88fa      	ldrh	r2, [r7, #6]
 8009c2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c38:	d10e      	bne.n	8009c58 <HAL_UART_Receive+0x92>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d105      	bne.n	8009c4e <HAL_UART_Receive+0x88>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c4c:	e02d      	b.n	8009caa <HAL_UART_Receive+0xe4>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	22ff      	movs	r2, #255	; 0xff
 8009c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c56:	e028      	b.n	8009caa <HAL_UART_Receive+0xe4>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10d      	bne.n	8009c7c <HAL_UART_Receive+0xb6>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d104      	bne.n	8009c72 <HAL_UART_Receive+0xac>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	22ff      	movs	r2, #255	; 0xff
 8009c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c70:	e01b      	b.n	8009caa <HAL_UART_Receive+0xe4>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	227f      	movs	r2, #127	; 0x7f
 8009c76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c7a:	e016      	b.n	8009caa <HAL_UART_Receive+0xe4>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c84:	d10d      	bne.n	8009ca2 <HAL_UART_Receive+0xdc>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <HAL_UART_Receive+0xd2>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	227f      	movs	r2, #127	; 0x7f
 8009c92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c96:	e008      	b.n	8009caa <HAL_UART_Receive+0xe4>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	223f      	movs	r2, #63	; 0x3f
 8009c9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ca0:	e003      	b.n	8009caa <HAL_UART_Receive+0xe4>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cb0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cba:	d108      	bne.n	8009cce <HAL_UART_Receive+0x108>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	61bb      	str	r3, [r7, #24]
 8009ccc:	e003      	b.n	8009cd6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009cde:	e032      	b.n	8009d46 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2120      	movs	r1, #32
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 fb89 	bl	800a402 <UART_WaitOnFlagUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e031      	b.n	8009d5e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10c      	bne.n	8009d1a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	8a7b      	ldrh	r3, [r7, #18]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	3302      	adds	r3, #2
 8009d16:	61bb      	str	r3, [r7, #24]
 8009d18:	e00c      	b.n	8009d34 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	8a7b      	ldrh	r3, [r7, #18]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	4013      	ands	r3, r2
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	3301      	adds	r3, #1
 8009d32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1c6      	bne.n	8009ce0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2220      	movs	r2, #32
 8009d56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e000      	b.n	8009d5e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8009d5c:	2302      	movs	r3, #2
  }
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	4ba7      	ldr	r3, [pc, #668]	; (800a030 <UART_SetConfig+0x2c8>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6812      	ldr	r2, [r2, #0]
 8009d9a:	6979      	ldr	r1, [r7, #20]
 8009d9c:	430b      	orrs	r3, r1
 8009d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a95      	ldr	r2, [pc, #596]	; (800a034 <UART_SetConfig+0x2cc>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d120      	bne.n	8009e26 <UART_SetConfig+0xbe>
 8009de4:	4b94      	ldr	r3, [pc, #592]	; (800a038 <UART_SetConfig+0x2d0>)
 8009de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d816      	bhi.n	8009e20 <UART_SetConfig+0xb8>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <UART_SetConfig+0x90>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e15 	.word	0x08009e15
 8009e00:	08009e0f 	.word	0x08009e0f
 8009e04:	08009e1b 	.word	0x08009e1b
 8009e08:	2301      	movs	r3, #1
 8009e0a:	77fb      	strb	r3, [r7, #31]
 8009e0c:	e14f      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	77fb      	strb	r3, [r7, #31]
 8009e12:	e14c      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e14:	2304      	movs	r3, #4
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e149      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e1a:	2308      	movs	r3, #8
 8009e1c:	77fb      	strb	r3, [r7, #31]
 8009e1e:	e146      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e20:	2310      	movs	r3, #16
 8009e22:	77fb      	strb	r3, [r7, #31]
 8009e24:	e143      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a84      	ldr	r2, [pc, #528]	; (800a03c <UART_SetConfig+0x2d4>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d132      	bne.n	8009e96 <UART_SetConfig+0x12e>
 8009e30:	4b81      	ldr	r3, [pc, #516]	; (800a038 <UART_SetConfig+0x2d0>)
 8009e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e36:	f003 030c 	and.w	r3, r3, #12
 8009e3a:	2b0c      	cmp	r3, #12
 8009e3c:	d828      	bhi.n	8009e90 <UART_SetConfig+0x128>
 8009e3e:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <UART_SetConfig+0xdc>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e79 	.word	0x08009e79
 8009e48:	08009e91 	.word	0x08009e91
 8009e4c:	08009e91 	.word	0x08009e91
 8009e50:	08009e91 	.word	0x08009e91
 8009e54:	08009e85 	.word	0x08009e85
 8009e58:	08009e91 	.word	0x08009e91
 8009e5c:	08009e91 	.word	0x08009e91
 8009e60:	08009e91 	.word	0x08009e91
 8009e64:	08009e7f 	.word	0x08009e7f
 8009e68:	08009e91 	.word	0x08009e91
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009e91 	.word	0x08009e91
 8009e74:	08009e8b 	.word	0x08009e8b
 8009e78:	2300      	movs	r3, #0
 8009e7a:	77fb      	strb	r3, [r7, #31]
 8009e7c:	e117      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	77fb      	strb	r3, [r7, #31]
 8009e82:	e114      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e84:	2304      	movs	r3, #4
 8009e86:	77fb      	strb	r3, [r7, #31]
 8009e88:	e111      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e8a:	2308      	movs	r3, #8
 8009e8c:	77fb      	strb	r3, [r7, #31]
 8009e8e:	e10e      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e90:	2310      	movs	r3, #16
 8009e92:	77fb      	strb	r3, [r7, #31]
 8009e94:	e10b      	b.n	800a0ae <UART_SetConfig+0x346>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a69      	ldr	r2, [pc, #420]	; (800a040 <UART_SetConfig+0x2d8>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d120      	bne.n	8009ee2 <UART_SetConfig+0x17a>
 8009ea0:	4b65      	ldr	r3, [pc, #404]	; (800a038 <UART_SetConfig+0x2d0>)
 8009ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009eaa:	2b30      	cmp	r3, #48	; 0x30
 8009eac:	d013      	beq.n	8009ed6 <UART_SetConfig+0x16e>
 8009eae:	2b30      	cmp	r3, #48	; 0x30
 8009eb0:	d814      	bhi.n	8009edc <UART_SetConfig+0x174>
 8009eb2:	2b20      	cmp	r3, #32
 8009eb4:	d009      	beq.n	8009eca <UART_SetConfig+0x162>
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	d810      	bhi.n	8009edc <UART_SetConfig+0x174>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <UART_SetConfig+0x15c>
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d006      	beq.n	8009ed0 <UART_SetConfig+0x168>
 8009ec2:	e00b      	b.n	8009edc <UART_SetConfig+0x174>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	77fb      	strb	r3, [r7, #31]
 8009ec8:	e0f1      	b.n	800a0ae <UART_SetConfig+0x346>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	77fb      	strb	r3, [r7, #31]
 8009ece:	e0ee      	b.n	800a0ae <UART_SetConfig+0x346>
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	77fb      	strb	r3, [r7, #31]
 8009ed4:	e0eb      	b.n	800a0ae <UART_SetConfig+0x346>
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	77fb      	strb	r3, [r7, #31]
 8009eda:	e0e8      	b.n	800a0ae <UART_SetConfig+0x346>
 8009edc:	2310      	movs	r3, #16
 8009ede:	77fb      	strb	r3, [r7, #31]
 8009ee0:	e0e5      	b.n	800a0ae <UART_SetConfig+0x346>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a57      	ldr	r2, [pc, #348]	; (800a044 <UART_SetConfig+0x2dc>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d120      	bne.n	8009f2e <UART_SetConfig+0x1c6>
 8009eec:	4b52      	ldr	r3, [pc, #328]	; (800a038 <UART_SetConfig+0x2d0>)
 8009eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8009ef8:	d013      	beq.n	8009f22 <UART_SetConfig+0x1ba>
 8009efa:	2bc0      	cmp	r3, #192	; 0xc0
 8009efc:	d814      	bhi.n	8009f28 <UART_SetConfig+0x1c0>
 8009efe:	2b80      	cmp	r3, #128	; 0x80
 8009f00:	d009      	beq.n	8009f16 <UART_SetConfig+0x1ae>
 8009f02:	2b80      	cmp	r3, #128	; 0x80
 8009f04:	d810      	bhi.n	8009f28 <UART_SetConfig+0x1c0>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <UART_SetConfig+0x1a8>
 8009f0a:	2b40      	cmp	r3, #64	; 0x40
 8009f0c:	d006      	beq.n	8009f1c <UART_SetConfig+0x1b4>
 8009f0e:	e00b      	b.n	8009f28 <UART_SetConfig+0x1c0>
 8009f10:	2300      	movs	r3, #0
 8009f12:	77fb      	strb	r3, [r7, #31]
 8009f14:	e0cb      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f16:	2302      	movs	r3, #2
 8009f18:	77fb      	strb	r3, [r7, #31]
 8009f1a:	e0c8      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f1c:	2304      	movs	r3, #4
 8009f1e:	77fb      	strb	r3, [r7, #31]
 8009f20:	e0c5      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f22:	2308      	movs	r3, #8
 8009f24:	77fb      	strb	r3, [r7, #31]
 8009f26:	e0c2      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f28:	2310      	movs	r3, #16
 8009f2a:	77fb      	strb	r3, [r7, #31]
 8009f2c:	e0bf      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a45      	ldr	r2, [pc, #276]	; (800a048 <UART_SetConfig+0x2e0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d125      	bne.n	8009f84 <UART_SetConfig+0x21c>
 8009f38:	4b3f      	ldr	r3, [pc, #252]	; (800a038 <UART_SetConfig+0x2d0>)
 8009f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f46:	d017      	beq.n	8009f78 <UART_SetConfig+0x210>
 8009f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f4c:	d817      	bhi.n	8009f7e <UART_SetConfig+0x216>
 8009f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f52:	d00b      	beq.n	8009f6c <UART_SetConfig+0x204>
 8009f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f58:	d811      	bhi.n	8009f7e <UART_SetConfig+0x216>
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <UART_SetConfig+0x1fe>
 8009f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f62:	d006      	beq.n	8009f72 <UART_SetConfig+0x20a>
 8009f64:	e00b      	b.n	8009f7e <UART_SetConfig+0x216>
 8009f66:	2300      	movs	r3, #0
 8009f68:	77fb      	strb	r3, [r7, #31]
 8009f6a:	e0a0      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	77fb      	strb	r3, [r7, #31]
 8009f70:	e09d      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f72:	2304      	movs	r3, #4
 8009f74:	77fb      	strb	r3, [r7, #31]
 8009f76:	e09a      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	77fb      	strb	r3, [r7, #31]
 8009f7c:	e097      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f7e:	2310      	movs	r3, #16
 8009f80:	77fb      	strb	r3, [r7, #31]
 8009f82:	e094      	b.n	800a0ae <UART_SetConfig+0x346>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a30      	ldr	r2, [pc, #192]	; (800a04c <UART_SetConfig+0x2e4>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d125      	bne.n	8009fda <UART_SetConfig+0x272>
 8009f8e:	4b2a      	ldr	r3, [pc, #168]	; (800a038 <UART_SetConfig+0x2d0>)
 8009f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f9c:	d017      	beq.n	8009fce <UART_SetConfig+0x266>
 8009f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fa2:	d817      	bhi.n	8009fd4 <UART_SetConfig+0x26c>
 8009fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fa8:	d00b      	beq.n	8009fc2 <UART_SetConfig+0x25a>
 8009faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fae:	d811      	bhi.n	8009fd4 <UART_SetConfig+0x26c>
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <UART_SetConfig+0x254>
 8009fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb8:	d006      	beq.n	8009fc8 <UART_SetConfig+0x260>
 8009fba:	e00b      	b.n	8009fd4 <UART_SetConfig+0x26c>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	77fb      	strb	r3, [r7, #31]
 8009fc0:	e075      	b.n	800a0ae <UART_SetConfig+0x346>
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	77fb      	strb	r3, [r7, #31]
 8009fc6:	e072      	b.n	800a0ae <UART_SetConfig+0x346>
 8009fc8:	2304      	movs	r3, #4
 8009fca:	77fb      	strb	r3, [r7, #31]
 8009fcc:	e06f      	b.n	800a0ae <UART_SetConfig+0x346>
 8009fce:	2308      	movs	r3, #8
 8009fd0:	77fb      	strb	r3, [r7, #31]
 8009fd2:	e06c      	b.n	800a0ae <UART_SetConfig+0x346>
 8009fd4:	2310      	movs	r3, #16
 8009fd6:	77fb      	strb	r3, [r7, #31]
 8009fd8:	e069      	b.n	800a0ae <UART_SetConfig+0x346>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a1c      	ldr	r2, [pc, #112]	; (800a050 <UART_SetConfig+0x2e8>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d137      	bne.n	800a054 <UART_SetConfig+0x2ec>
 8009fe4:	4b14      	ldr	r3, [pc, #80]	; (800a038 <UART_SetConfig+0x2d0>)
 8009fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ff2:	d017      	beq.n	800a024 <UART_SetConfig+0x2bc>
 8009ff4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ff8:	d817      	bhi.n	800a02a <UART_SetConfig+0x2c2>
 8009ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ffe:	d00b      	beq.n	800a018 <UART_SetConfig+0x2b0>
 800a000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a004:	d811      	bhi.n	800a02a <UART_SetConfig+0x2c2>
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <UART_SetConfig+0x2aa>
 800a00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a00e:	d006      	beq.n	800a01e <UART_SetConfig+0x2b6>
 800a010:	e00b      	b.n	800a02a <UART_SetConfig+0x2c2>
 800a012:	2300      	movs	r3, #0
 800a014:	77fb      	strb	r3, [r7, #31]
 800a016:	e04a      	b.n	800a0ae <UART_SetConfig+0x346>
 800a018:	2302      	movs	r3, #2
 800a01a:	77fb      	strb	r3, [r7, #31]
 800a01c:	e047      	b.n	800a0ae <UART_SetConfig+0x346>
 800a01e:	2304      	movs	r3, #4
 800a020:	77fb      	strb	r3, [r7, #31]
 800a022:	e044      	b.n	800a0ae <UART_SetConfig+0x346>
 800a024:	2308      	movs	r3, #8
 800a026:	77fb      	strb	r3, [r7, #31]
 800a028:	e041      	b.n	800a0ae <UART_SetConfig+0x346>
 800a02a:	2310      	movs	r3, #16
 800a02c:	77fb      	strb	r3, [r7, #31]
 800a02e:	e03e      	b.n	800a0ae <UART_SetConfig+0x346>
 800a030:	efff69f3 	.word	0xefff69f3
 800a034:	40011000 	.word	0x40011000
 800a038:	40023800 	.word	0x40023800
 800a03c:	40004400 	.word	0x40004400
 800a040:	40004800 	.word	0x40004800
 800a044:	40004c00 	.word	0x40004c00
 800a048:	40005000 	.word	0x40005000
 800a04c:	40011400 	.word	0x40011400
 800a050:	40007800 	.word	0x40007800
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a71      	ldr	r2, [pc, #452]	; (800a220 <UART_SetConfig+0x4b8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d125      	bne.n	800a0aa <UART_SetConfig+0x342>
 800a05e:	4b71      	ldr	r3, [pc, #452]	; (800a224 <UART_SetConfig+0x4bc>)
 800a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a068:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a06c:	d017      	beq.n	800a09e <UART_SetConfig+0x336>
 800a06e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a072:	d817      	bhi.n	800a0a4 <UART_SetConfig+0x33c>
 800a074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a078:	d00b      	beq.n	800a092 <UART_SetConfig+0x32a>
 800a07a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a07e:	d811      	bhi.n	800a0a4 <UART_SetConfig+0x33c>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <UART_SetConfig+0x324>
 800a084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a088:	d006      	beq.n	800a098 <UART_SetConfig+0x330>
 800a08a:	e00b      	b.n	800a0a4 <UART_SetConfig+0x33c>
 800a08c:	2300      	movs	r3, #0
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	e00d      	b.n	800a0ae <UART_SetConfig+0x346>
 800a092:	2302      	movs	r3, #2
 800a094:	77fb      	strb	r3, [r7, #31]
 800a096:	e00a      	b.n	800a0ae <UART_SetConfig+0x346>
 800a098:	2304      	movs	r3, #4
 800a09a:	77fb      	strb	r3, [r7, #31]
 800a09c:	e007      	b.n	800a0ae <UART_SetConfig+0x346>
 800a09e:	2308      	movs	r3, #8
 800a0a0:	77fb      	strb	r3, [r7, #31]
 800a0a2:	e004      	b.n	800a0ae <UART_SetConfig+0x346>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	77fb      	strb	r3, [r7, #31]
 800a0a8:	e001      	b.n	800a0ae <UART_SetConfig+0x346>
 800a0aa:	2310      	movs	r3, #16
 800a0ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b6:	d15b      	bne.n	800a170 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a0b8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ba:	2b08      	cmp	r3, #8
 800a0bc:	d827      	bhi.n	800a10e <UART_SetConfig+0x3a6>
 800a0be:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <UART_SetConfig+0x35c>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0e9 	.word	0x0800a0e9
 800a0c8:	0800a0f1 	.word	0x0800a0f1
 800a0cc:	0800a0f9 	.word	0x0800a0f9
 800a0d0:	0800a10f 	.word	0x0800a10f
 800a0d4:	0800a0ff 	.word	0x0800a0ff
 800a0d8:	0800a10f 	.word	0x0800a10f
 800a0dc:	0800a10f 	.word	0x0800a10f
 800a0e0:	0800a10f 	.word	0x0800a10f
 800a0e4:	0800a107 	.word	0x0800a107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0e8:	f7fd fa5a 	bl	80075a0 <HAL_RCC_GetPCLK1Freq>
 800a0ec:	61b8      	str	r0, [r7, #24]
        break;
 800a0ee:	e013      	b.n	800a118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0f0:	f7fd fa6a 	bl	80075c8 <HAL_RCC_GetPCLK2Freq>
 800a0f4:	61b8      	str	r0, [r7, #24]
        break;
 800a0f6:	e00f      	b.n	800a118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0f8:	4b4b      	ldr	r3, [pc, #300]	; (800a228 <UART_SetConfig+0x4c0>)
 800a0fa:	61bb      	str	r3, [r7, #24]
        break;
 800a0fc:	e00c      	b.n	800a118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0fe:	f7fd f961 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 800a102:	61b8      	str	r0, [r7, #24]
        break;
 800a104:	e008      	b.n	800a118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a10a:	61bb      	str	r3, [r7, #24]
        break;
 800a10c:	e004      	b.n	800a118 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	77bb      	strb	r3, [r7, #30]
        break;
 800a116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d074      	beq.n	800a208 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	005a      	lsls	r2, r3, #1
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	085b      	lsrs	r3, r3, #1
 800a128:	441a      	add	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a132:	b29b      	uxth	r3, r3
 800a134:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2b0f      	cmp	r3, #15
 800a13a:	d916      	bls.n	800a16a <UART_SetConfig+0x402>
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a142:	d212      	bcs.n	800a16a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	b29b      	uxth	r3, r3
 800a148:	f023 030f 	bic.w	r3, r3, #15
 800a14c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	085b      	lsrs	r3, r3, #1
 800a152:	b29b      	uxth	r3, r3
 800a154:	f003 0307 	and.w	r3, r3, #7
 800a158:	b29a      	uxth	r2, r3
 800a15a:	89fb      	ldrh	r3, [r7, #14]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	89fa      	ldrh	r2, [r7, #14]
 800a166:	60da      	str	r2, [r3, #12]
 800a168:	e04e      	b.n	800a208 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	77bb      	strb	r3, [r7, #30]
 800a16e:	e04b      	b.n	800a208 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a170:	7ffb      	ldrb	r3, [r7, #31]
 800a172:	2b08      	cmp	r3, #8
 800a174:	d827      	bhi.n	800a1c6 <UART_SetConfig+0x45e>
 800a176:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <UART_SetConfig+0x414>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a1a1 	.word	0x0800a1a1
 800a180:	0800a1a9 	.word	0x0800a1a9
 800a184:	0800a1b1 	.word	0x0800a1b1
 800a188:	0800a1c7 	.word	0x0800a1c7
 800a18c:	0800a1b7 	.word	0x0800a1b7
 800a190:	0800a1c7 	.word	0x0800a1c7
 800a194:	0800a1c7 	.word	0x0800a1c7
 800a198:	0800a1c7 	.word	0x0800a1c7
 800a19c:	0800a1bf 	.word	0x0800a1bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1a0:	f7fd f9fe 	bl	80075a0 <HAL_RCC_GetPCLK1Freq>
 800a1a4:	61b8      	str	r0, [r7, #24]
        break;
 800a1a6:	e013      	b.n	800a1d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1a8:	f7fd fa0e 	bl	80075c8 <HAL_RCC_GetPCLK2Freq>
 800a1ac:	61b8      	str	r0, [r7, #24]
        break;
 800a1ae:	e00f      	b.n	800a1d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1b0:	4b1d      	ldr	r3, [pc, #116]	; (800a228 <UART_SetConfig+0x4c0>)
 800a1b2:	61bb      	str	r3, [r7, #24]
        break;
 800a1b4:	e00c      	b.n	800a1d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1b6:	f7fd f905 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 800a1ba:	61b8      	str	r0, [r7, #24]
        break;
 800a1bc:	e008      	b.n	800a1d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c2:	61bb      	str	r3, [r7, #24]
        break;
 800a1c4:	e004      	b.n	800a1d0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	77bb      	strb	r3, [r7, #30]
        break;
 800a1ce:	bf00      	nop
    }

    if (pclk != 0U)
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d018      	beq.n	800a208 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	085a      	lsrs	r2, r3, #1
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	441a      	add	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d908      	bls.n	800a204 <UART_SetConfig+0x49c>
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f8:	d204      	bcs.n	800a204 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	e001      	b.n	800a208 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a214:	7fbb      	ldrb	r3, [r7, #30]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3720      	adds	r7, #32
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	40007c00 	.word	0x40007c00
 800a224:	40023800 	.word	0x40023800
 800a228:	00f42400 	.word	0x00f42400

0800a22c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	430a      	orrs	r2, r1
 800a276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00a      	beq.n	800a29a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	f003 0308 	and.w	r3, r3, #8
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	f003 0310 	and.w	r3, r3, #16
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00a      	beq.n	800a2de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	f003 0320 	and.w	r3, r3, #32
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00a      	beq.n	800a300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01a      	beq.n	800a342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a32a:	d10a      	bne.n	800a342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00a      	beq.n	800a364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	430a      	orrs	r2, r1
 800a362:	605a      	str	r2, [r3, #4]
  }
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af02      	add	r7, sp, #8
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a380:	f7fb f926 	bl	80055d0 <HAL_GetTick>
 800a384:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0308 	and.w	r3, r3, #8
 800a390:	2b08      	cmp	r3, #8
 800a392:	d10e      	bne.n	800a3b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f82d 	bl	800a402 <UART_WaitOnFlagUntilTimeout>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e023      	b.n	800a3fa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0304 	and.w	r3, r3, #4
 800a3bc:	2b04      	cmp	r3, #4
 800a3be:	d10e      	bne.n	800a3de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f817 	bl	800a402 <UART_WaitOnFlagUntilTimeout>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e00d      	b.n	800a3fa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	603b      	str	r3, [r7, #0]
 800a40e:	4613      	mov	r3, r2
 800a410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a412:	e05e      	b.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d05a      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41c:	f7fb f8d8 	bl	80055d0 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d302      	bcc.n	800a432 <UART_WaitOnFlagUntilTimeout+0x30>
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d11b      	bne.n	800a46a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a440:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 0201 	bic.w	r2, r2, #1
 800a450:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2220      	movs	r2, #32
 800a456:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2220      	movs	r2, #32
 800a45c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e043      	b.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d02c      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a486:	d124      	bne.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a490:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0201 	bic.w	r2, r2, #1
 800a4b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e00f      	b.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	69da      	ldr	r2, [r3, #28]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	bf0c      	ite	eq
 800a4e2:	2301      	moveq	r3, #1
 800a4e4:	2300      	movne	r3, #0
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d091      	beq.n	800a414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <__errno>:
 800a4fc:	4b01      	ldr	r3, [pc, #4]	; (800a504 <__errno+0x8>)
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	200000d0 	.word	0x200000d0

0800a508 <__libc_init_array>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	4d0d      	ldr	r5, [pc, #52]	; (800a540 <__libc_init_array+0x38>)
 800a50c:	4c0d      	ldr	r4, [pc, #52]	; (800a544 <__libc_init_array+0x3c>)
 800a50e:	1b64      	subs	r4, r4, r5
 800a510:	10a4      	asrs	r4, r4, #2
 800a512:	2600      	movs	r6, #0
 800a514:	42a6      	cmp	r6, r4
 800a516:	d109      	bne.n	800a52c <__libc_init_array+0x24>
 800a518:	4d0b      	ldr	r5, [pc, #44]	; (800a548 <__libc_init_array+0x40>)
 800a51a:	4c0c      	ldr	r4, [pc, #48]	; (800a54c <__libc_init_array+0x44>)
 800a51c:	f002 fe24 	bl	800d168 <_init>
 800a520:	1b64      	subs	r4, r4, r5
 800a522:	10a4      	asrs	r4, r4, #2
 800a524:	2600      	movs	r6, #0
 800a526:	42a6      	cmp	r6, r4
 800a528:	d105      	bne.n	800a536 <__libc_init_array+0x2e>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a530:	4798      	blx	r3
 800a532:	3601      	adds	r6, #1
 800a534:	e7ee      	b.n	800a514 <__libc_init_array+0xc>
 800a536:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53a:	4798      	blx	r3
 800a53c:	3601      	adds	r6, #1
 800a53e:	e7f2      	b.n	800a526 <__libc_init_array+0x1e>
 800a540:	0800d944 	.word	0x0800d944
 800a544:	0800d944 	.word	0x0800d944
 800a548:	0800d944 	.word	0x0800d944
 800a54c:	0800d948 	.word	0x0800d948

0800a550 <memset>:
 800a550:	4402      	add	r2, r0
 800a552:	4603      	mov	r3, r0
 800a554:	4293      	cmp	r3, r2
 800a556:	d100      	bne.n	800a55a <memset+0xa>
 800a558:	4770      	bx	lr
 800a55a:	f803 1b01 	strb.w	r1, [r3], #1
 800a55e:	e7f9      	b.n	800a554 <memset+0x4>

0800a560 <__cvt>:
 800a560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a562:	ed2d 8b02 	vpush	{d8}
 800a566:	eeb0 8b40 	vmov.f64	d8, d0
 800a56a:	b085      	sub	sp, #20
 800a56c:	4617      	mov	r7, r2
 800a56e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a570:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a572:	ee18 2a90 	vmov	r2, s17
 800a576:	f025 0520 	bic.w	r5, r5, #32
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	bfb6      	itet	lt
 800a57e:	222d      	movlt	r2, #45	; 0x2d
 800a580:	2200      	movge	r2, #0
 800a582:	eeb1 8b40 	vneglt.f64	d8, d0
 800a586:	2d46      	cmp	r5, #70	; 0x46
 800a588:	460c      	mov	r4, r1
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	d004      	beq.n	800a598 <__cvt+0x38>
 800a58e:	2d45      	cmp	r5, #69	; 0x45
 800a590:	d100      	bne.n	800a594 <__cvt+0x34>
 800a592:	3401      	adds	r4, #1
 800a594:	2102      	movs	r1, #2
 800a596:	e000      	b.n	800a59a <__cvt+0x3a>
 800a598:	2103      	movs	r1, #3
 800a59a:	ab03      	add	r3, sp, #12
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	ab02      	add	r3, sp, #8
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	4633      	mov	r3, r6
 800a5a6:	eeb0 0b48 	vmov.f64	d0, d8
 800a5aa:	f000 fcc9 	bl	800af40 <_dtoa_r>
 800a5ae:	2d47      	cmp	r5, #71	; 0x47
 800a5b0:	d109      	bne.n	800a5c6 <__cvt+0x66>
 800a5b2:	07fb      	lsls	r3, r7, #31
 800a5b4:	d407      	bmi.n	800a5c6 <__cvt+0x66>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5ba:	1a1b      	subs	r3, r3, r0
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	b005      	add	sp, #20
 800a5c0:	ecbd 8b02 	vpop	{d8}
 800a5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c6:	2d46      	cmp	r5, #70	; 0x46
 800a5c8:	eb00 0204 	add.w	r2, r0, r4
 800a5cc:	d10c      	bne.n	800a5e8 <__cvt+0x88>
 800a5ce:	7803      	ldrb	r3, [r0, #0]
 800a5d0:	2b30      	cmp	r3, #48	; 0x30
 800a5d2:	d107      	bne.n	800a5e4 <__cvt+0x84>
 800a5d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5dc:	bf1c      	itt	ne
 800a5de:	f1c4 0401 	rsbne	r4, r4, #1
 800a5e2:	6034      	strne	r4, [r6, #0]
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f0:	bf08      	it	eq
 800a5f2:	9203      	streq	r2, [sp, #12]
 800a5f4:	2130      	movs	r1, #48	; 0x30
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d2dc      	bcs.n	800a5b6 <__cvt+0x56>
 800a5fc:	1c5c      	adds	r4, r3, #1
 800a5fe:	9403      	str	r4, [sp, #12]
 800a600:	7019      	strb	r1, [r3, #0]
 800a602:	e7f8      	b.n	800a5f6 <__cvt+0x96>

0800a604 <__exponent>:
 800a604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a606:	4603      	mov	r3, r0
 800a608:	2900      	cmp	r1, #0
 800a60a:	bfb8      	it	lt
 800a60c:	4249      	neglt	r1, r1
 800a60e:	f803 2b02 	strb.w	r2, [r3], #2
 800a612:	bfb4      	ite	lt
 800a614:	222d      	movlt	r2, #45	; 0x2d
 800a616:	222b      	movge	r2, #43	; 0x2b
 800a618:	2909      	cmp	r1, #9
 800a61a:	7042      	strb	r2, [r0, #1]
 800a61c:	dd2a      	ble.n	800a674 <__exponent+0x70>
 800a61e:	f10d 0407 	add.w	r4, sp, #7
 800a622:	46a4      	mov	ip, r4
 800a624:	270a      	movs	r7, #10
 800a626:	46a6      	mov	lr, r4
 800a628:	460a      	mov	r2, r1
 800a62a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a62e:	fb07 1516 	mls	r5, r7, r6, r1
 800a632:	3530      	adds	r5, #48	; 0x30
 800a634:	2a63      	cmp	r2, #99	; 0x63
 800a636:	f104 34ff 	add.w	r4, r4, #4294967295
 800a63a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a63e:	4631      	mov	r1, r6
 800a640:	dcf1      	bgt.n	800a626 <__exponent+0x22>
 800a642:	3130      	adds	r1, #48	; 0x30
 800a644:	f1ae 0502 	sub.w	r5, lr, #2
 800a648:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a64c:	1c44      	adds	r4, r0, #1
 800a64e:	4629      	mov	r1, r5
 800a650:	4561      	cmp	r1, ip
 800a652:	d30a      	bcc.n	800a66a <__exponent+0x66>
 800a654:	f10d 0209 	add.w	r2, sp, #9
 800a658:	eba2 020e 	sub.w	r2, r2, lr
 800a65c:	4565      	cmp	r5, ip
 800a65e:	bf88      	it	hi
 800a660:	2200      	movhi	r2, #0
 800a662:	4413      	add	r3, r2
 800a664:	1a18      	subs	r0, r3, r0
 800a666:	b003      	add	sp, #12
 800a668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a66e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a672:	e7ed      	b.n	800a650 <__exponent+0x4c>
 800a674:	2330      	movs	r3, #48	; 0x30
 800a676:	3130      	adds	r1, #48	; 0x30
 800a678:	7083      	strb	r3, [r0, #2]
 800a67a:	70c1      	strb	r1, [r0, #3]
 800a67c:	1d03      	adds	r3, r0, #4
 800a67e:	e7f1      	b.n	800a664 <__exponent+0x60>

0800a680 <_printf_float>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	b08b      	sub	sp, #44	; 0x2c
 800a686:	460c      	mov	r4, r1
 800a688:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a68c:	4616      	mov	r6, r2
 800a68e:	461f      	mov	r7, r3
 800a690:	4605      	mov	r5, r0
 800a692:	f001 f9d7 	bl	800ba44 <_localeconv_r>
 800a696:	f8d0 b000 	ldr.w	fp, [r0]
 800a69a:	4658      	mov	r0, fp
 800a69c:	f7f5 fdd0 	bl	8000240 <strlen>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9308      	str	r3, [sp, #32]
 800a6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a6ac:	6822      	ldr	r2, [r4, #0]
 800a6ae:	3307      	adds	r3, #7
 800a6b0:	f023 0307 	bic.w	r3, r3, #7
 800a6b4:	f103 0108 	add.w	r1, r3, #8
 800a6b8:	f8c8 1000 	str.w	r1, [r8]
 800a6bc:	4682      	mov	sl, r0
 800a6be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a6c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a928 <_printf_float+0x2a8>
 800a6ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a6ce:	eeb0 6bc0 	vabs.f64	d6, d0
 800a6d2:	eeb4 6b47 	vcmp.f64	d6, d7
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	dd24      	ble.n	800a726 <_printf_float+0xa6>
 800a6dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e4:	d502      	bpl.n	800a6ec <_printf_float+0x6c>
 800a6e6:	232d      	movs	r3, #45	; 0x2d
 800a6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6ec:	4b90      	ldr	r3, [pc, #576]	; (800a930 <_printf_float+0x2b0>)
 800a6ee:	4891      	ldr	r0, [pc, #580]	; (800a934 <_printf_float+0x2b4>)
 800a6f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a6f4:	bf94      	ite	ls
 800a6f6:	4698      	movls	r8, r3
 800a6f8:	4680      	movhi	r8, r0
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	6123      	str	r3, [r4, #16]
 800a6fe:	f022 0204 	bic.w	r2, r2, #4
 800a702:	2300      	movs	r3, #0
 800a704:	6022      	str	r2, [r4, #0]
 800a706:	9304      	str	r3, [sp, #16]
 800a708:	9700      	str	r7, [sp, #0]
 800a70a:	4633      	mov	r3, r6
 800a70c:	aa09      	add	r2, sp, #36	; 0x24
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 f9d3 	bl	800aabc <_printf_common>
 800a716:	3001      	adds	r0, #1
 800a718:	f040 808a 	bne.w	800a830 <_printf_float+0x1b0>
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	b00b      	add	sp, #44	; 0x2c
 800a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a726:	eeb4 0b40 	vcmp.f64	d0, d0
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	d709      	bvc.n	800a744 <_printf_float+0xc4>
 800a730:	ee10 3a90 	vmov	r3, s1
 800a734:	2b00      	cmp	r3, #0
 800a736:	bfbc      	itt	lt
 800a738:	232d      	movlt	r3, #45	; 0x2d
 800a73a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a73e:	487e      	ldr	r0, [pc, #504]	; (800a938 <_printf_float+0x2b8>)
 800a740:	4b7e      	ldr	r3, [pc, #504]	; (800a93c <_printf_float+0x2bc>)
 800a742:	e7d5      	b.n	800a6f0 <_printf_float+0x70>
 800a744:	6863      	ldr	r3, [r4, #4]
 800a746:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a74a:	9104      	str	r1, [sp, #16]
 800a74c:	1c59      	adds	r1, r3, #1
 800a74e:	d13c      	bne.n	800a7ca <_printf_float+0x14a>
 800a750:	2306      	movs	r3, #6
 800a752:	6063      	str	r3, [r4, #4]
 800a754:	2300      	movs	r3, #0
 800a756:	9303      	str	r3, [sp, #12]
 800a758:	ab08      	add	r3, sp, #32
 800a75a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a75e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a762:	ab07      	add	r3, sp, #28
 800a764:	6861      	ldr	r1, [r4, #4]
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	f10d 031b 	add.w	r3, sp, #27
 800a76e:	4628      	mov	r0, r5
 800a770:	f7ff fef6 	bl	800a560 <__cvt>
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	9907      	ldr	r1, [sp, #28]
 800a778:	2b47      	cmp	r3, #71	; 0x47
 800a77a:	4680      	mov	r8, r0
 800a77c:	d108      	bne.n	800a790 <_printf_float+0x110>
 800a77e:	1cc8      	adds	r0, r1, #3
 800a780:	db02      	blt.n	800a788 <_printf_float+0x108>
 800a782:	6863      	ldr	r3, [r4, #4]
 800a784:	4299      	cmp	r1, r3
 800a786:	dd41      	ble.n	800a80c <_printf_float+0x18c>
 800a788:	f1a9 0902 	sub.w	r9, r9, #2
 800a78c:	fa5f f989 	uxtb.w	r9, r9
 800a790:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a794:	d820      	bhi.n	800a7d8 <_printf_float+0x158>
 800a796:	3901      	subs	r1, #1
 800a798:	464a      	mov	r2, r9
 800a79a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a79e:	9107      	str	r1, [sp, #28]
 800a7a0:	f7ff ff30 	bl	800a604 <__exponent>
 800a7a4:	9a08      	ldr	r2, [sp, #32]
 800a7a6:	9004      	str	r0, [sp, #16]
 800a7a8:	1813      	adds	r3, r2, r0
 800a7aa:	2a01      	cmp	r2, #1
 800a7ac:	6123      	str	r3, [r4, #16]
 800a7ae:	dc02      	bgt.n	800a7b6 <_printf_float+0x136>
 800a7b0:	6822      	ldr	r2, [r4, #0]
 800a7b2:	07d2      	lsls	r2, r2, #31
 800a7b4:	d501      	bpl.n	800a7ba <_printf_float+0x13a>
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	6123      	str	r3, [r4, #16]
 800a7ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0a2      	beq.n	800a708 <_printf_float+0x88>
 800a7c2:	232d      	movs	r3, #45	; 0x2d
 800a7c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7c8:	e79e      	b.n	800a708 <_printf_float+0x88>
 800a7ca:	9904      	ldr	r1, [sp, #16]
 800a7cc:	2947      	cmp	r1, #71	; 0x47
 800a7ce:	d1c1      	bne.n	800a754 <_printf_float+0xd4>
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1bf      	bne.n	800a754 <_printf_float+0xd4>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e7bc      	b.n	800a752 <_printf_float+0xd2>
 800a7d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a7dc:	d118      	bne.n	800a810 <_printf_float+0x190>
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	dd0b      	ble.n	800a7fc <_printf_float+0x17c>
 800a7e4:	6121      	str	r1, [r4, #16]
 800a7e6:	b913      	cbnz	r3, 800a7ee <_printf_float+0x16e>
 800a7e8:	6822      	ldr	r2, [r4, #0]
 800a7ea:	07d0      	lsls	r0, r2, #31
 800a7ec:	d502      	bpl.n	800a7f4 <_printf_float+0x174>
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	440b      	add	r3, r1
 800a7f2:	6123      	str	r3, [r4, #16]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	e7de      	b.n	800a7ba <_printf_float+0x13a>
 800a7fc:	b913      	cbnz	r3, 800a804 <_printf_float+0x184>
 800a7fe:	6822      	ldr	r2, [r4, #0]
 800a800:	07d2      	lsls	r2, r2, #31
 800a802:	d501      	bpl.n	800a808 <_printf_float+0x188>
 800a804:	3302      	adds	r3, #2
 800a806:	e7f4      	b.n	800a7f2 <_printf_float+0x172>
 800a808:	2301      	movs	r3, #1
 800a80a:	e7f2      	b.n	800a7f2 <_printf_float+0x172>
 800a80c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	4299      	cmp	r1, r3
 800a814:	db05      	blt.n	800a822 <_printf_float+0x1a2>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	6121      	str	r1, [r4, #16]
 800a81a:	07d8      	lsls	r0, r3, #31
 800a81c:	d5ea      	bpl.n	800a7f4 <_printf_float+0x174>
 800a81e:	1c4b      	adds	r3, r1, #1
 800a820:	e7e7      	b.n	800a7f2 <_printf_float+0x172>
 800a822:	2900      	cmp	r1, #0
 800a824:	bfd4      	ite	le
 800a826:	f1c1 0202 	rsble	r2, r1, #2
 800a82a:	2201      	movgt	r2, #1
 800a82c:	4413      	add	r3, r2
 800a82e:	e7e0      	b.n	800a7f2 <_printf_float+0x172>
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	055a      	lsls	r2, r3, #21
 800a834:	d407      	bmi.n	800a846 <_printf_float+0x1c6>
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	4642      	mov	r2, r8
 800a83a:	4631      	mov	r1, r6
 800a83c:	4628      	mov	r0, r5
 800a83e:	47b8      	blx	r7
 800a840:	3001      	adds	r0, #1
 800a842:	d12a      	bne.n	800a89a <_printf_float+0x21a>
 800a844:	e76a      	b.n	800a71c <_printf_float+0x9c>
 800a846:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a84a:	f240 80e2 	bls.w	800aa12 <_printf_float+0x392>
 800a84e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a852:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85a:	d133      	bne.n	800a8c4 <_printf_float+0x244>
 800a85c:	4a38      	ldr	r2, [pc, #224]	; (800a940 <_printf_float+0x2c0>)
 800a85e:	2301      	movs	r3, #1
 800a860:	4631      	mov	r1, r6
 800a862:	4628      	mov	r0, r5
 800a864:	47b8      	blx	r7
 800a866:	3001      	adds	r0, #1
 800a868:	f43f af58 	beq.w	800a71c <_printf_float+0x9c>
 800a86c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a870:	429a      	cmp	r2, r3
 800a872:	db02      	blt.n	800a87a <_printf_float+0x1fa>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	07d8      	lsls	r0, r3, #31
 800a878:	d50f      	bpl.n	800a89a <_printf_float+0x21a>
 800a87a:	4653      	mov	r3, sl
 800a87c:	465a      	mov	r2, fp
 800a87e:	4631      	mov	r1, r6
 800a880:	4628      	mov	r0, r5
 800a882:	47b8      	blx	r7
 800a884:	3001      	adds	r0, #1
 800a886:	f43f af49 	beq.w	800a71c <_printf_float+0x9c>
 800a88a:	f04f 0800 	mov.w	r8, #0
 800a88e:	f104 091a 	add.w	r9, r4, #26
 800a892:	9b08      	ldr	r3, [sp, #32]
 800a894:	3b01      	subs	r3, #1
 800a896:	4543      	cmp	r3, r8
 800a898:	dc09      	bgt.n	800a8ae <_printf_float+0x22e>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	079b      	lsls	r3, r3, #30
 800a89e:	f100 8108 	bmi.w	800aab2 <_printf_float+0x432>
 800a8a2:	68e0      	ldr	r0, [r4, #12]
 800a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a6:	4298      	cmp	r0, r3
 800a8a8:	bfb8      	it	lt
 800a8aa:	4618      	movlt	r0, r3
 800a8ac:	e738      	b.n	800a720 <_printf_float+0xa0>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	464a      	mov	r2, r9
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	f43f af2f 	beq.w	800a71c <_printf_float+0x9c>
 800a8be:	f108 0801 	add.w	r8, r8, #1
 800a8c2:	e7e6      	b.n	800a892 <_printf_float+0x212>
 800a8c4:	9b07      	ldr	r3, [sp, #28]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dc3c      	bgt.n	800a944 <_printf_float+0x2c4>
 800a8ca:	4a1d      	ldr	r2, [pc, #116]	; (800a940 <_printf_float+0x2c0>)
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b8      	blx	r7
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	f43f af21 	beq.w	800a71c <_printf_float+0x9c>
 800a8da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	d102      	bne.n	800a8e8 <_printf_float+0x268>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	07d9      	lsls	r1, r3, #31
 800a8e6:	d5d8      	bpl.n	800a89a <_printf_float+0x21a>
 800a8e8:	4653      	mov	r3, sl
 800a8ea:	465a      	mov	r2, fp
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f af12 	beq.w	800a71c <_printf_float+0x9c>
 800a8f8:	f04f 0900 	mov.w	r9, #0
 800a8fc:	f104 0a1a 	add.w	sl, r4, #26
 800a900:	9b07      	ldr	r3, [sp, #28]
 800a902:	425b      	negs	r3, r3
 800a904:	454b      	cmp	r3, r9
 800a906:	dc01      	bgt.n	800a90c <_printf_float+0x28c>
 800a908:	9b08      	ldr	r3, [sp, #32]
 800a90a:	e795      	b.n	800a838 <_printf_float+0x1b8>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4652      	mov	r2, sl
 800a910:	4631      	mov	r1, r6
 800a912:	4628      	mov	r0, r5
 800a914:	47b8      	blx	r7
 800a916:	3001      	adds	r0, #1
 800a918:	f43f af00 	beq.w	800a71c <_printf_float+0x9c>
 800a91c:	f109 0901 	add.w	r9, r9, #1
 800a920:	e7ee      	b.n	800a900 <_printf_float+0x280>
 800a922:	bf00      	nop
 800a924:	f3af 8000 	nop.w
 800a928:	ffffffff 	.word	0xffffffff
 800a92c:	7fefffff 	.word	0x7fefffff
 800a930:	0800d55c 	.word	0x0800d55c
 800a934:	0800d560 	.word	0x0800d560
 800a938:	0800d568 	.word	0x0800d568
 800a93c:	0800d564 	.word	0x0800d564
 800a940:	0800d56c 	.word	0x0800d56c
 800a944:	9a08      	ldr	r2, [sp, #32]
 800a946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a948:	429a      	cmp	r2, r3
 800a94a:	bfa8      	it	ge
 800a94c:	461a      	movge	r2, r3
 800a94e:	2a00      	cmp	r2, #0
 800a950:	4691      	mov	r9, r2
 800a952:	dc38      	bgt.n	800a9c6 <_printf_float+0x346>
 800a954:	2300      	movs	r3, #0
 800a956:	9305      	str	r3, [sp, #20]
 800a958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a95c:	f104 021a 	add.w	r2, r4, #26
 800a960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a962:	9905      	ldr	r1, [sp, #20]
 800a964:	9304      	str	r3, [sp, #16]
 800a966:	eba3 0309 	sub.w	r3, r3, r9
 800a96a:	428b      	cmp	r3, r1
 800a96c:	dc33      	bgt.n	800a9d6 <_printf_float+0x356>
 800a96e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a972:	429a      	cmp	r2, r3
 800a974:	db3c      	blt.n	800a9f0 <_printf_float+0x370>
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	07da      	lsls	r2, r3, #31
 800a97a:	d439      	bmi.n	800a9f0 <_printf_float+0x370>
 800a97c:	9a08      	ldr	r2, [sp, #32]
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	9907      	ldr	r1, [sp, #28]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	eba2 0901 	sub.w	r9, r2, r1
 800a988:	4599      	cmp	r9, r3
 800a98a:	bfa8      	it	ge
 800a98c:	4699      	movge	r9, r3
 800a98e:	f1b9 0f00 	cmp.w	r9, #0
 800a992:	dc35      	bgt.n	800aa00 <_printf_float+0x380>
 800a994:	f04f 0800 	mov.w	r8, #0
 800a998:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a99c:	f104 0a1a 	add.w	sl, r4, #26
 800a9a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	eba3 0309 	sub.w	r3, r3, r9
 800a9aa:	4543      	cmp	r3, r8
 800a9ac:	f77f af75 	ble.w	800a89a <_printf_float+0x21a>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	f43f aeae 	beq.w	800a71c <_printf_float+0x9c>
 800a9c0:	f108 0801 	add.w	r8, r8, #1
 800a9c4:	e7ec      	b.n	800a9a0 <_printf_float+0x320>
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	4642      	mov	r2, r8
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b8      	blx	r7
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d1bf      	bne.n	800a954 <_printf_float+0x2d4>
 800a9d4:	e6a2      	b.n	800a71c <_printf_float+0x9c>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	9204      	str	r2, [sp, #16]
 800a9de:	47b8      	blx	r7
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	f43f ae9b 	beq.w	800a71c <_printf_float+0x9c>
 800a9e6:	9b05      	ldr	r3, [sp, #20]
 800a9e8:	9a04      	ldr	r2, [sp, #16]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	9305      	str	r3, [sp, #20]
 800a9ee:	e7b7      	b.n	800a960 <_printf_float+0x2e0>
 800a9f0:	4653      	mov	r3, sl
 800a9f2:	465a      	mov	r2, fp
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b8      	blx	r7
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d1be      	bne.n	800a97c <_printf_float+0x2fc>
 800a9fe:	e68d      	b.n	800a71c <_printf_float+0x9c>
 800aa00:	9a04      	ldr	r2, [sp, #16]
 800aa02:	464b      	mov	r3, r9
 800aa04:	4442      	add	r2, r8
 800aa06:	4631      	mov	r1, r6
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d1c1      	bne.n	800a994 <_printf_float+0x314>
 800aa10:	e684      	b.n	800a71c <_printf_float+0x9c>
 800aa12:	9a08      	ldr	r2, [sp, #32]
 800aa14:	2a01      	cmp	r2, #1
 800aa16:	dc01      	bgt.n	800aa1c <_printf_float+0x39c>
 800aa18:	07db      	lsls	r3, r3, #31
 800aa1a:	d537      	bpl.n	800aa8c <_printf_float+0x40c>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	4642      	mov	r2, r8
 800aa20:	4631      	mov	r1, r6
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b8      	blx	r7
 800aa26:	3001      	adds	r0, #1
 800aa28:	f43f ae78 	beq.w	800a71c <_printf_float+0x9c>
 800aa2c:	4653      	mov	r3, sl
 800aa2e:	465a      	mov	r2, fp
 800aa30:	4631      	mov	r1, r6
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	f43f ae70 	beq.w	800a71c <_printf_float+0x9c>
 800aa3c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aa40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa48:	d01b      	beq.n	800aa82 <_printf_float+0x402>
 800aa4a:	9b08      	ldr	r3, [sp, #32]
 800aa4c:	f108 0201 	add.w	r2, r8, #1
 800aa50:	3b01      	subs	r3, #1
 800aa52:	4631      	mov	r1, r6
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b8      	blx	r7
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d10e      	bne.n	800aa7a <_printf_float+0x3fa>
 800aa5c:	e65e      	b.n	800a71c <_printf_float+0x9c>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	464a      	mov	r2, r9
 800aa62:	4631      	mov	r1, r6
 800aa64:	4628      	mov	r0, r5
 800aa66:	47b8      	blx	r7
 800aa68:	3001      	adds	r0, #1
 800aa6a:	f43f ae57 	beq.w	800a71c <_printf_float+0x9c>
 800aa6e:	f108 0801 	add.w	r8, r8, #1
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	4543      	cmp	r3, r8
 800aa78:	dcf1      	bgt.n	800aa5e <_printf_float+0x3de>
 800aa7a:	9b04      	ldr	r3, [sp, #16]
 800aa7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa80:	e6db      	b.n	800a83a <_printf_float+0x1ba>
 800aa82:	f04f 0800 	mov.w	r8, #0
 800aa86:	f104 091a 	add.w	r9, r4, #26
 800aa8a:	e7f2      	b.n	800aa72 <_printf_float+0x3f2>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	4642      	mov	r2, r8
 800aa90:	e7df      	b.n	800aa52 <_printf_float+0x3d2>
 800aa92:	2301      	movs	r3, #1
 800aa94:	464a      	mov	r2, r9
 800aa96:	4631      	mov	r1, r6
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b8      	blx	r7
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	f43f ae3d 	beq.w	800a71c <_printf_float+0x9c>
 800aaa2:	f108 0801 	add.w	r8, r8, #1
 800aaa6:	68e3      	ldr	r3, [r4, #12]
 800aaa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaaa:	1a5b      	subs	r3, r3, r1
 800aaac:	4543      	cmp	r3, r8
 800aaae:	dcf0      	bgt.n	800aa92 <_printf_float+0x412>
 800aab0:	e6f7      	b.n	800a8a2 <_printf_float+0x222>
 800aab2:	f04f 0800 	mov.w	r8, #0
 800aab6:	f104 0919 	add.w	r9, r4, #25
 800aaba:	e7f4      	b.n	800aaa6 <_printf_float+0x426>

0800aabc <_printf_common>:
 800aabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac0:	4616      	mov	r6, r2
 800aac2:	4699      	mov	r9, r3
 800aac4:	688a      	ldr	r2, [r1, #8]
 800aac6:	690b      	ldr	r3, [r1, #16]
 800aac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aacc:	4293      	cmp	r3, r2
 800aace:	bfb8      	it	lt
 800aad0:	4613      	movlt	r3, r2
 800aad2:	6033      	str	r3, [r6, #0]
 800aad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aad8:	4607      	mov	r7, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	b10a      	cbz	r2, 800aae2 <_printf_common+0x26>
 800aade:	3301      	adds	r3, #1
 800aae0:	6033      	str	r3, [r6, #0]
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	0699      	lsls	r1, r3, #26
 800aae6:	bf42      	ittt	mi
 800aae8:	6833      	ldrmi	r3, [r6, #0]
 800aaea:	3302      	addmi	r3, #2
 800aaec:	6033      	strmi	r3, [r6, #0]
 800aaee:	6825      	ldr	r5, [r4, #0]
 800aaf0:	f015 0506 	ands.w	r5, r5, #6
 800aaf4:	d106      	bne.n	800ab04 <_printf_common+0x48>
 800aaf6:	f104 0a19 	add.w	sl, r4, #25
 800aafa:	68e3      	ldr	r3, [r4, #12]
 800aafc:	6832      	ldr	r2, [r6, #0]
 800aafe:	1a9b      	subs	r3, r3, r2
 800ab00:	42ab      	cmp	r3, r5
 800ab02:	dc26      	bgt.n	800ab52 <_printf_common+0x96>
 800ab04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab08:	1e13      	subs	r3, r2, #0
 800ab0a:	6822      	ldr	r2, [r4, #0]
 800ab0c:	bf18      	it	ne
 800ab0e:	2301      	movne	r3, #1
 800ab10:	0692      	lsls	r2, r2, #26
 800ab12:	d42b      	bmi.n	800ab6c <_printf_common+0xb0>
 800ab14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab18:	4649      	mov	r1, r9
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	47c0      	blx	r8
 800ab1e:	3001      	adds	r0, #1
 800ab20:	d01e      	beq.n	800ab60 <_printf_common+0xa4>
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	68e5      	ldr	r5, [r4, #12]
 800ab26:	6832      	ldr	r2, [r6, #0]
 800ab28:	f003 0306 	and.w	r3, r3, #6
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	bf08      	it	eq
 800ab30:	1aad      	subeq	r5, r5, r2
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	6922      	ldr	r2, [r4, #16]
 800ab36:	bf0c      	ite	eq
 800ab38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab3c:	2500      	movne	r5, #0
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	bfc4      	itt	gt
 800ab42:	1a9b      	subgt	r3, r3, r2
 800ab44:	18ed      	addgt	r5, r5, r3
 800ab46:	2600      	movs	r6, #0
 800ab48:	341a      	adds	r4, #26
 800ab4a:	42b5      	cmp	r5, r6
 800ab4c:	d11a      	bne.n	800ab84 <_printf_common+0xc8>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e008      	b.n	800ab64 <_printf_common+0xa8>
 800ab52:	2301      	movs	r3, #1
 800ab54:	4652      	mov	r2, sl
 800ab56:	4649      	mov	r1, r9
 800ab58:	4638      	mov	r0, r7
 800ab5a:	47c0      	blx	r8
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d103      	bne.n	800ab68 <_printf_common+0xac>
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab68:	3501      	adds	r5, #1
 800ab6a:	e7c6      	b.n	800aafa <_printf_common+0x3e>
 800ab6c:	18e1      	adds	r1, r4, r3
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	2030      	movs	r0, #48	; 0x30
 800ab72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab76:	4422      	add	r2, r4
 800ab78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab80:	3302      	adds	r3, #2
 800ab82:	e7c7      	b.n	800ab14 <_printf_common+0x58>
 800ab84:	2301      	movs	r3, #1
 800ab86:	4622      	mov	r2, r4
 800ab88:	4649      	mov	r1, r9
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	47c0      	blx	r8
 800ab8e:	3001      	adds	r0, #1
 800ab90:	d0e6      	beq.n	800ab60 <_printf_common+0xa4>
 800ab92:	3601      	adds	r6, #1
 800ab94:	e7d9      	b.n	800ab4a <_printf_common+0x8e>
	...

0800ab98 <_printf_i>:
 800ab98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	4691      	mov	r9, r2
 800aba0:	7e27      	ldrb	r7, [r4, #24]
 800aba2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aba4:	2f78      	cmp	r7, #120	; 0x78
 800aba6:	4680      	mov	r8, r0
 800aba8:	469a      	mov	sl, r3
 800abaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abae:	d807      	bhi.n	800abc0 <_printf_i+0x28>
 800abb0:	2f62      	cmp	r7, #98	; 0x62
 800abb2:	d80a      	bhi.n	800abca <_printf_i+0x32>
 800abb4:	2f00      	cmp	r7, #0
 800abb6:	f000 80d8 	beq.w	800ad6a <_printf_i+0x1d2>
 800abba:	2f58      	cmp	r7, #88	; 0x58
 800abbc:	f000 80a3 	beq.w	800ad06 <_printf_i+0x16e>
 800abc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abc8:	e03a      	b.n	800ac40 <_printf_i+0xa8>
 800abca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abce:	2b15      	cmp	r3, #21
 800abd0:	d8f6      	bhi.n	800abc0 <_printf_i+0x28>
 800abd2:	a001      	add	r0, pc, #4	; (adr r0, 800abd8 <_printf_i+0x40>)
 800abd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abd8:	0800ac31 	.word	0x0800ac31
 800abdc:	0800ac45 	.word	0x0800ac45
 800abe0:	0800abc1 	.word	0x0800abc1
 800abe4:	0800abc1 	.word	0x0800abc1
 800abe8:	0800abc1 	.word	0x0800abc1
 800abec:	0800abc1 	.word	0x0800abc1
 800abf0:	0800ac45 	.word	0x0800ac45
 800abf4:	0800abc1 	.word	0x0800abc1
 800abf8:	0800abc1 	.word	0x0800abc1
 800abfc:	0800abc1 	.word	0x0800abc1
 800ac00:	0800abc1 	.word	0x0800abc1
 800ac04:	0800ad51 	.word	0x0800ad51
 800ac08:	0800ac75 	.word	0x0800ac75
 800ac0c:	0800ad33 	.word	0x0800ad33
 800ac10:	0800abc1 	.word	0x0800abc1
 800ac14:	0800abc1 	.word	0x0800abc1
 800ac18:	0800ad73 	.word	0x0800ad73
 800ac1c:	0800abc1 	.word	0x0800abc1
 800ac20:	0800ac75 	.word	0x0800ac75
 800ac24:	0800abc1 	.word	0x0800abc1
 800ac28:	0800abc1 	.word	0x0800abc1
 800ac2c:	0800ad3b 	.word	0x0800ad3b
 800ac30:	680b      	ldr	r3, [r1, #0]
 800ac32:	1d1a      	adds	r2, r3, #4
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	600a      	str	r2, [r1, #0]
 800ac38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac40:	2301      	movs	r3, #1
 800ac42:	e0a3      	b.n	800ad8c <_printf_i+0x1f4>
 800ac44:	6825      	ldr	r5, [r4, #0]
 800ac46:	6808      	ldr	r0, [r1, #0]
 800ac48:	062e      	lsls	r6, r5, #24
 800ac4a:	f100 0304 	add.w	r3, r0, #4
 800ac4e:	d50a      	bpl.n	800ac66 <_printf_i+0xce>
 800ac50:	6805      	ldr	r5, [r0, #0]
 800ac52:	600b      	str	r3, [r1, #0]
 800ac54:	2d00      	cmp	r5, #0
 800ac56:	da03      	bge.n	800ac60 <_printf_i+0xc8>
 800ac58:	232d      	movs	r3, #45	; 0x2d
 800ac5a:	426d      	negs	r5, r5
 800ac5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac60:	485e      	ldr	r0, [pc, #376]	; (800addc <_printf_i+0x244>)
 800ac62:	230a      	movs	r3, #10
 800ac64:	e019      	b.n	800ac9a <_printf_i+0x102>
 800ac66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac6a:	6805      	ldr	r5, [r0, #0]
 800ac6c:	600b      	str	r3, [r1, #0]
 800ac6e:	bf18      	it	ne
 800ac70:	b22d      	sxthne	r5, r5
 800ac72:	e7ef      	b.n	800ac54 <_printf_i+0xbc>
 800ac74:	680b      	ldr	r3, [r1, #0]
 800ac76:	6825      	ldr	r5, [r4, #0]
 800ac78:	1d18      	adds	r0, r3, #4
 800ac7a:	6008      	str	r0, [r1, #0]
 800ac7c:	0628      	lsls	r0, r5, #24
 800ac7e:	d501      	bpl.n	800ac84 <_printf_i+0xec>
 800ac80:	681d      	ldr	r5, [r3, #0]
 800ac82:	e002      	b.n	800ac8a <_printf_i+0xf2>
 800ac84:	0669      	lsls	r1, r5, #25
 800ac86:	d5fb      	bpl.n	800ac80 <_printf_i+0xe8>
 800ac88:	881d      	ldrh	r5, [r3, #0]
 800ac8a:	4854      	ldr	r0, [pc, #336]	; (800addc <_printf_i+0x244>)
 800ac8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac8e:	bf0c      	ite	eq
 800ac90:	2308      	moveq	r3, #8
 800ac92:	230a      	movne	r3, #10
 800ac94:	2100      	movs	r1, #0
 800ac96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac9a:	6866      	ldr	r6, [r4, #4]
 800ac9c:	60a6      	str	r6, [r4, #8]
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	bfa2      	ittt	ge
 800aca2:	6821      	ldrge	r1, [r4, #0]
 800aca4:	f021 0104 	bicge.w	r1, r1, #4
 800aca8:	6021      	strge	r1, [r4, #0]
 800acaa:	b90d      	cbnz	r5, 800acb0 <_printf_i+0x118>
 800acac:	2e00      	cmp	r6, #0
 800acae:	d04d      	beq.n	800ad4c <_printf_i+0x1b4>
 800acb0:	4616      	mov	r6, r2
 800acb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800acb6:	fb03 5711 	mls	r7, r3, r1, r5
 800acba:	5dc7      	ldrb	r7, [r0, r7]
 800acbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acc0:	462f      	mov	r7, r5
 800acc2:	42bb      	cmp	r3, r7
 800acc4:	460d      	mov	r5, r1
 800acc6:	d9f4      	bls.n	800acb2 <_printf_i+0x11a>
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d10b      	bne.n	800ace4 <_printf_i+0x14c>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	07df      	lsls	r7, r3, #31
 800acd0:	d508      	bpl.n	800ace4 <_printf_i+0x14c>
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	6861      	ldr	r1, [r4, #4]
 800acd6:	4299      	cmp	r1, r3
 800acd8:	bfde      	ittt	le
 800acda:	2330      	movle	r3, #48	; 0x30
 800acdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ace0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ace4:	1b92      	subs	r2, r2, r6
 800ace6:	6122      	str	r2, [r4, #16]
 800ace8:	f8cd a000 	str.w	sl, [sp]
 800acec:	464b      	mov	r3, r9
 800acee:	aa03      	add	r2, sp, #12
 800acf0:	4621      	mov	r1, r4
 800acf2:	4640      	mov	r0, r8
 800acf4:	f7ff fee2 	bl	800aabc <_printf_common>
 800acf8:	3001      	adds	r0, #1
 800acfa:	d14c      	bne.n	800ad96 <_printf_i+0x1fe>
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	b004      	add	sp, #16
 800ad02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad06:	4835      	ldr	r0, [pc, #212]	; (800addc <_printf_i+0x244>)
 800ad08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	680e      	ldr	r6, [r1, #0]
 800ad10:	061f      	lsls	r7, r3, #24
 800ad12:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad16:	600e      	str	r6, [r1, #0]
 800ad18:	d514      	bpl.n	800ad44 <_printf_i+0x1ac>
 800ad1a:	07d9      	lsls	r1, r3, #31
 800ad1c:	bf44      	itt	mi
 800ad1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ad22:	6023      	strmi	r3, [r4, #0]
 800ad24:	b91d      	cbnz	r5, 800ad2e <_printf_i+0x196>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	f023 0320 	bic.w	r3, r3, #32
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	2310      	movs	r3, #16
 800ad30:	e7b0      	b.n	800ac94 <_printf_i+0xfc>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	f043 0320 	orr.w	r3, r3, #32
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	2378      	movs	r3, #120	; 0x78
 800ad3c:	4828      	ldr	r0, [pc, #160]	; (800ade0 <_printf_i+0x248>)
 800ad3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad42:	e7e3      	b.n	800ad0c <_printf_i+0x174>
 800ad44:	065e      	lsls	r6, r3, #25
 800ad46:	bf48      	it	mi
 800ad48:	b2ad      	uxthmi	r5, r5
 800ad4a:	e7e6      	b.n	800ad1a <_printf_i+0x182>
 800ad4c:	4616      	mov	r6, r2
 800ad4e:	e7bb      	b.n	800acc8 <_printf_i+0x130>
 800ad50:	680b      	ldr	r3, [r1, #0]
 800ad52:	6826      	ldr	r6, [r4, #0]
 800ad54:	6960      	ldr	r0, [r4, #20]
 800ad56:	1d1d      	adds	r5, r3, #4
 800ad58:	600d      	str	r5, [r1, #0]
 800ad5a:	0635      	lsls	r5, r6, #24
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	d501      	bpl.n	800ad64 <_printf_i+0x1cc>
 800ad60:	6018      	str	r0, [r3, #0]
 800ad62:	e002      	b.n	800ad6a <_printf_i+0x1d2>
 800ad64:	0671      	lsls	r1, r6, #25
 800ad66:	d5fb      	bpl.n	800ad60 <_printf_i+0x1c8>
 800ad68:	8018      	strh	r0, [r3, #0]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	4616      	mov	r6, r2
 800ad70:	e7ba      	b.n	800ace8 <_printf_i+0x150>
 800ad72:	680b      	ldr	r3, [r1, #0]
 800ad74:	1d1a      	adds	r2, r3, #4
 800ad76:	600a      	str	r2, [r1, #0]
 800ad78:	681e      	ldr	r6, [r3, #0]
 800ad7a:	6862      	ldr	r2, [r4, #4]
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7f5 fa66 	bl	8000250 <memchr>
 800ad84:	b108      	cbz	r0, 800ad8a <_printf_i+0x1f2>
 800ad86:	1b80      	subs	r0, r0, r6
 800ad88:	6060      	str	r0, [r4, #4]
 800ad8a:	6863      	ldr	r3, [r4, #4]
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad94:	e7a8      	b.n	800ace8 <_printf_i+0x150>
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	4632      	mov	r2, r6
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	47d0      	blx	sl
 800ada0:	3001      	adds	r0, #1
 800ada2:	d0ab      	beq.n	800acfc <_printf_i+0x164>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	079b      	lsls	r3, r3, #30
 800ada8:	d413      	bmi.n	800add2 <_printf_i+0x23a>
 800adaa:	68e0      	ldr	r0, [r4, #12]
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	4298      	cmp	r0, r3
 800adb0:	bfb8      	it	lt
 800adb2:	4618      	movlt	r0, r3
 800adb4:	e7a4      	b.n	800ad00 <_printf_i+0x168>
 800adb6:	2301      	movs	r3, #1
 800adb8:	4632      	mov	r2, r6
 800adba:	4649      	mov	r1, r9
 800adbc:	4640      	mov	r0, r8
 800adbe:	47d0      	blx	sl
 800adc0:	3001      	adds	r0, #1
 800adc2:	d09b      	beq.n	800acfc <_printf_i+0x164>
 800adc4:	3501      	adds	r5, #1
 800adc6:	68e3      	ldr	r3, [r4, #12]
 800adc8:	9903      	ldr	r1, [sp, #12]
 800adca:	1a5b      	subs	r3, r3, r1
 800adcc:	42ab      	cmp	r3, r5
 800adce:	dcf2      	bgt.n	800adb6 <_printf_i+0x21e>
 800add0:	e7eb      	b.n	800adaa <_printf_i+0x212>
 800add2:	2500      	movs	r5, #0
 800add4:	f104 0619 	add.w	r6, r4, #25
 800add8:	e7f5      	b.n	800adc6 <_printf_i+0x22e>
 800adda:	bf00      	nop
 800addc:	0800d56e 	.word	0x0800d56e
 800ade0:	0800d57f 	.word	0x0800d57f

0800ade4 <siprintf>:
 800ade4:	b40e      	push	{r1, r2, r3}
 800ade6:	b500      	push	{lr}
 800ade8:	b09c      	sub	sp, #112	; 0x70
 800adea:	ab1d      	add	r3, sp, #116	; 0x74
 800adec:	9002      	str	r0, [sp, #8]
 800adee:	9006      	str	r0, [sp, #24]
 800adf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800adf4:	4809      	ldr	r0, [pc, #36]	; (800ae1c <siprintf+0x38>)
 800adf6:	9107      	str	r1, [sp, #28]
 800adf8:	9104      	str	r1, [sp, #16]
 800adfa:	4909      	ldr	r1, [pc, #36]	; (800ae20 <siprintf+0x3c>)
 800adfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae00:	9105      	str	r1, [sp, #20]
 800ae02:	6800      	ldr	r0, [r0, #0]
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	a902      	add	r1, sp, #8
 800ae08:	f001 faca 	bl	800c3a0 <_svfiprintf_r>
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	b01c      	add	sp, #112	; 0x70
 800ae14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae18:	b003      	add	sp, #12
 800ae1a:	4770      	bx	lr
 800ae1c:	200000d0 	.word	0x200000d0
 800ae20:	ffff0208 	.word	0xffff0208

0800ae24 <quorem>:
 800ae24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae28:	6903      	ldr	r3, [r0, #16]
 800ae2a:	690c      	ldr	r4, [r1, #16]
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	4607      	mov	r7, r0
 800ae30:	f2c0 8081 	blt.w	800af36 <quorem+0x112>
 800ae34:	3c01      	subs	r4, #1
 800ae36:	f101 0814 	add.w	r8, r1, #20
 800ae3a:	f100 0514 	add.w	r5, r0, #20
 800ae3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae58:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae5c:	d331      	bcc.n	800aec2 <quorem+0x9e>
 800ae5e:	f04f 0e00 	mov.w	lr, #0
 800ae62:	4640      	mov	r0, r8
 800ae64:	46ac      	mov	ip, r5
 800ae66:	46f2      	mov	sl, lr
 800ae68:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae6c:	b293      	uxth	r3, r2
 800ae6e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	ebaa 0303 	sub.w	r3, sl, r3
 800ae7c:	0c12      	lsrs	r2, r2, #16
 800ae7e:	f8dc a000 	ldr.w	sl, [ip]
 800ae82:	fb06 e202 	mla	r2, r6, r2, lr
 800ae86:	fa13 f38a 	uxtah	r3, r3, sl
 800ae8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae8e:	fa1f fa82 	uxth.w	sl, r2
 800ae92:	f8dc 2000 	ldr.w	r2, [ip]
 800ae96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aea4:	4581      	cmp	r9, r0
 800aea6:	f84c 3b04 	str.w	r3, [ip], #4
 800aeaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aeae:	d2db      	bcs.n	800ae68 <quorem+0x44>
 800aeb0:	f855 300b 	ldr.w	r3, [r5, fp]
 800aeb4:	b92b      	cbnz	r3, 800aec2 <quorem+0x9e>
 800aeb6:	9b01      	ldr	r3, [sp, #4]
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	429d      	cmp	r5, r3
 800aebc:	461a      	mov	r2, r3
 800aebe:	d32e      	bcc.n	800af1e <quorem+0xfa>
 800aec0:	613c      	str	r4, [r7, #16]
 800aec2:	4638      	mov	r0, r7
 800aec4:	f001 f856 	bl	800bf74 <__mcmp>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	db24      	blt.n	800af16 <quorem+0xf2>
 800aecc:	3601      	adds	r6, #1
 800aece:	4628      	mov	r0, r5
 800aed0:	f04f 0c00 	mov.w	ip, #0
 800aed4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aed8:	f8d0 e000 	ldr.w	lr, [r0]
 800aedc:	b293      	uxth	r3, r2
 800aede:	ebac 0303 	sub.w	r3, ip, r3
 800aee2:	0c12      	lsrs	r2, r2, #16
 800aee4:	fa13 f38e 	uxtah	r3, r3, lr
 800aee8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aeec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aef6:	45c1      	cmp	r9, r8
 800aef8:	f840 3b04 	str.w	r3, [r0], #4
 800aefc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af00:	d2e8      	bcs.n	800aed4 <quorem+0xb0>
 800af02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af0a:	b922      	cbnz	r2, 800af16 <quorem+0xf2>
 800af0c:	3b04      	subs	r3, #4
 800af0e:	429d      	cmp	r5, r3
 800af10:	461a      	mov	r2, r3
 800af12:	d30a      	bcc.n	800af2a <quorem+0x106>
 800af14:	613c      	str	r4, [r7, #16]
 800af16:	4630      	mov	r0, r6
 800af18:	b003      	add	sp, #12
 800af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1e:	6812      	ldr	r2, [r2, #0]
 800af20:	3b04      	subs	r3, #4
 800af22:	2a00      	cmp	r2, #0
 800af24:	d1cc      	bne.n	800aec0 <quorem+0x9c>
 800af26:	3c01      	subs	r4, #1
 800af28:	e7c7      	b.n	800aeba <quorem+0x96>
 800af2a:	6812      	ldr	r2, [r2, #0]
 800af2c:	3b04      	subs	r3, #4
 800af2e:	2a00      	cmp	r2, #0
 800af30:	d1f0      	bne.n	800af14 <quorem+0xf0>
 800af32:	3c01      	subs	r4, #1
 800af34:	e7eb      	b.n	800af0e <quorem+0xea>
 800af36:	2000      	movs	r0, #0
 800af38:	e7ee      	b.n	800af18 <quorem+0xf4>
 800af3a:	0000      	movs	r0, r0
 800af3c:	0000      	movs	r0, r0
	...

0800af40 <_dtoa_r>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	ec59 8b10 	vmov	r8, r9, d0
 800af48:	b095      	sub	sp, #84	; 0x54
 800af4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af4c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800af4e:	9107      	str	r1, [sp, #28]
 800af50:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800af54:	4606      	mov	r6, r0
 800af56:	9209      	str	r2, [sp, #36]	; 0x24
 800af58:	9310      	str	r3, [sp, #64]	; 0x40
 800af5a:	b975      	cbnz	r5, 800af7a <_dtoa_r+0x3a>
 800af5c:	2010      	movs	r0, #16
 800af5e:	f000 fd75 	bl	800ba4c <malloc>
 800af62:	4602      	mov	r2, r0
 800af64:	6270      	str	r0, [r6, #36]	; 0x24
 800af66:	b920      	cbnz	r0, 800af72 <_dtoa_r+0x32>
 800af68:	4bab      	ldr	r3, [pc, #684]	; (800b218 <_dtoa_r+0x2d8>)
 800af6a:	21ea      	movs	r1, #234	; 0xea
 800af6c:	48ab      	ldr	r0, [pc, #684]	; (800b21c <_dtoa_r+0x2dc>)
 800af6e:	f001 fb27 	bl	800c5c0 <__assert_func>
 800af72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af76:	6005      	str	r5, [r0, #0]
 800af78:	60c5      	str	r5, [r0, #12]
 800af7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af7c:	6819      	ldr	r1, [r3, #0]
 800af7e:	b151      	cbz	r1, 800af96 <_dtoa_r+0x56>
 800af80:	685a      	ldr	r2, [r3, #4]
 800af82:	604a      	str	r2, [r1, #4]
 800af84:	2301      	movs	r3, #1
 800af86:	4093      	lsls	r3, r2
 800af88:	608b      	str	r3, [r1, #8]
 800af8a:	4630      	mov	r0, r6
 800af8c:	f000 fdb4 	bl	800baf8 <_Bfree>
 800af90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	f1b9 0300 	subs.w	r3, r9, #0
 800af9a:	bfbb      	ittet	lt
 800af9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800afa0:	9303      	strlt	r3, [sp, #12]
 800afa2:	2300      	movge	r3, #0
 800afa4:	2201      	movlt	r2, #1
 800afa6:	bfac      	ite	ge
 800afa8:	6023      	strge	r3, [r4, #0]
 800afaa:	6022      	strlt	r2, [r4, #0]
 800afac:	4b9c      	ldr	r3, [pc, #624]	; (800b220 <_dtoa_r+0x2e0>)
 800afae:	9c03      	ldr	r4, [sp, #12]
 800afb0:	43a3      	bics	r3, r4
 800afb2:	d11a      	bne.n	800afea <_dtoa_r+0xaa>
 800afb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800afc0:	ea53 0308 	orrs.w	r3, r3, r8
 800afc4:	f000 8512 	beq.w	800b9ec <_dtoa_r+0xaac>
 800afc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afca:	b953      	cbnz	r3, 800afe2 <_dtoa_r+0xa2>
 800afcc:	4b95      	ldr	r3, [pc, #596]	; (800b224 <_dtoa_r+0x2e4>)
 800afce:	e01f      	b.n	800b010 <_dtoa_r+0xd0>
 800afd0:	4b95      	ldr	r3, [pc, #596]	; (800b228 <_dtoa_r+0x2e8>)
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	3308      	adds	r3, #8
 800afd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	9800      	ldr	r0, [sp, #0]
 800afdc:	b015      	add	sp, #84	; 0x54
 800afde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe2:	4b90      	ldr	r3, [pc, #576]	; (800b224 <_dtoa_r+0x2e4>)
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	3303      	adds	r3, #3
 800afe8:	e7f5      	b.n	800afd6 <_dtoa_r+0x96>
 800afea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800affa:	d10b      	bne.n	800b014 <_dtoa_r+0xd4>
 800affc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800affe:	2301      	movs	r3, #1
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 84ee 	beq.w	800b9e6 <_dtoa_r+0xaa6>
 800b00a:	4888      	ldr	r0, [pc, #544]	; (800b22c <_dtoa_r+0x2ec>)
 800b00c:	6018      	str	r0, [r3, #0]
 800b00e:	1e43      	subs	r3, r0, #1
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	e7e2      	b.n	800afda <_dtoa_r+0x9a>
 800b014:	a913      	add	r1, sp, #76	; 0x4c
 800b016:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b01a:	aa12      	add	r2, sp, #72	; 0x48
 800b01c:	4630      	mov	r0, r6
 800b01e:	f001 f84d 	bl	800c0bc <__d2b>
 800b022:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b026:	4605      	mov	r5, r0
 800b028:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b02a:	2900      	cmp	r1, #0
 800b02c:	d047      	beq.n	800b0be <_dtoa_r+0x17e>
 800b02e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b030:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b038:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b03c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b040:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b044:	2400      	movs	r4, #0
 800b046:	ec43 2b16 	vmov	d6, r2, r3
 800b04a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b04e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b200 <_dtoa_r+0x2c0>
 800b052:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b056:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800b208 <_dtoa_r+0x2c8>
 800b05a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b05e:	eeb0 7b46 	vmov.f64	d7, d6
 800b062:	ee06 1a90 	vmov	s13, r1
 800b066:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800b06a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b210 <_dtoa_r+0x2d0>
 800b06e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b072:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b076:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b07e:	ee16 ba90 	vmov	fp, s13
 800b082:	9411      	str	r4, [sp, #68]	; 0x44
 800b084:	d508      	bpl.n	800b098 <_dtoa_r+0x158>
 800b086:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b08a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b092:	bf18      	it	ne
 800b094:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b098:	f1bb 0f16 	cmp.w	fp, #22
 800b09c:	d832      	bhi.n	800b104 <_dtoa_r+0x1c4>
 800b09e:	4b64      	ldr	r3, [pc, #400]	; (800b230 <_dtoa_r+0x2f0>)
 800b0a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0a4:	ed93 7b00 	vldr	d7, [r3]
 800b0a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b0ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b4:	d501      	bpl.n	800b0ba <_dtoa_r+0x17a>
 800b0b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e023      	b.n	800b106 <_dtoa_r+0x1c6>
 800b0be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b0c0:	4401      	add	r1, r0
 800b0c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	bfc3      	ittte	gt
 800b0ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0ce:	fa04 f303 	lslgt.w	r3, r4, r3
 800b0d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b0d6:	f1c3 0320 	rsble	r3, r3, #32
 800b0da:	bfc6      	itte	gt
 800b0dc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b0e0:	ea43 0308 	orrgt.w	r3, r3, r8
 800b0e4:	fa08 f303 	lslle.w	r3, r8, r3
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b0f0:	3901      	subs	r1, #1
 800b0f2:	ed8d 7b00 	vstr	d7, [sp]
 800b0f6:	9c01      	ldr	r4, [sp, #4]
 800b0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b100:	2401      	movs	r4, #1
 800b102:	e7a0      	b.n	800b046 <_dtoa_r+0x106>
 800b104:	2301      	movs	r3, #1
 800b106:	930f      	str	r3, [sp, #60]	; 0x3c
 800b108:	1a43      	subs	r3, r0, r1
 800b10a:	1e5a      	subs	r2, r3, #1
 800b10c:	bf45      	ittet	mi
 800b10e:	f1c3 0301 	rsbmi	r3, r3, #1
 800b112:	9305      	strmi	r3, [sp, #20]
 800b114:	2300      	movpl	r3, #0
 800b116:	2300      	movmi	r3, #0
 800b118:	9206      	str	r2, [sp, #24]
 800b11a:	bf54      	ite	pl
 800b11c:	9305      	strpl	r3, [sp, #20]
 800b11e:	9306      	strmi	r3, [sp, #24]
 800b120:	f1bb 0f00 	cmp.w	fp, #0
 800b124:	db18      	blt.n	800b158 <_dtoa_r+0x218>
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b12c:	445b      	add	r3, fp
 800b12e:	9306      	str	r3, [sp, #24]
 800b130:	2300      	movs	r3, #0
 800b132:	9a07      	ldr	r2, [sp, #28]
 800b134:	2a09      	cmp	r2, #9
 800b136:	d849      	bhi.n	800b1cc <_dtoa_r+0x28c>
 800b138:	2a05      	cmp	r2, #5
 800b13a:	bfc4      	itt	gt
 800b13c:	3a04      	subgt	r2, #4
 800b13e:	9207      	strgt	r2, [sp, #28]
 800b140:	9a07      	ldr	r2, [sp, #28]
 800b142:	f1a2 0202 	sub.w	r2, r2, #2
 800b146:	bfcc      	ite	gt
 800b148:	2400      	movgt	r4, #0
 800b14a:	2401      	movle	r4, #1
 800b14c:	2a03      	cmp	r2, #3
 800b14e:	d848      	bhi.n	800b1e2 <_dtoa_r+0x2a2>
 800b150:	e8df f002 	tbb	[pc, r2]
 800b154:	3a2c2e0b 	.word	0x3a2c2e0b
 800b158:	9b05      	ldr	r3, [sp, #20]
 800b15a:	2200      	movs	r2, #0
 800b15c:	eba3 030b 	sub.w	r3, r3, fp
 800b160:	9305      	str	r3, [sp, #20]
 800b162:	920e      	str	r2, [sp, #56]	; 0x38
 800b164:	f1cb 0300 	rsb	r3, fp, #0
 800b168:	e7e3      	b.n	800b132 <_dtoa_r+0x1f2>
 800b16a:	2200      	movs	r2, #0
 800b16c:	9208      	str	r2, [sp, #32]
 800b16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b170:	2a00      	cmp	r2, #0
 800b172:	dc39      	bgt.n	800b1e8 <_dtoa_r+0x2a8>
 800b174:	f04f 0a01 	mov.w	sl, #1
 800b178:	46d1      	mov	r9, sl
 800b17a:	4652      	mov	r2, sl
 800b17c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b180:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b182:	2100      	movs	r1, #0
 800b184:	6079      	str	r1, [r7, #4]
 800b186:	2004      	movs	r0, #4
 800b188:	f100 0c14 	add.w	ip, r0, #20
 800b18c:	4594      	cmp	ip, r2
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	d92f      	bls.n	800b1f2 <_dtoa_r+0x2b2>
 800b192:	4630      	mov	r0, r6
 800b194:	930c      	str	r3, [sp, #48]	; 0x30
 800b196:	f000 fc6f 	bl	800ba78 <_Balloc>
 800b19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b19c:	9000      	str	r0, [sp, #0]
 800b19e:	4602      	mov	r2, r0
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d149      	bne.n	800b238 <_dtoa_r+0x2f8>
 800b1a4:	4b23      	ldr	r3, [pc, #140]	; (800b234 <_dtoa_r+0x2f4>)
 800b1a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1aa:	e6df      	b.n	800af6c <_dtoa_r+0x2c>
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	e7dd      	b.n	800b16c <_dtoa_r+0x22c>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	9208      	str	r2, [sp, #32]
 800b1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b6:	eb0b 0a02 	add.w	sl, fp, r2
 800b1ba:	f10a 0901 	add.w	r9, sl, #1
 800b1be:	464a      	mov	r2, r9
 800b1c0:	2a01      	cmp	r2, #1
 800b1c2:	bfb8      	it	lt
 800b1c4:	2201      	movlt	r2, #1
 800b1c6:	e7db      	b.n	800b180 <_dtoa_r+0x240>
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	e7f2      	b.n	800b1b2 <_dtoa_r+0x272>
 800b1cc:	2401      	movs	r4, #1
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b1d4:	f04f 3aff 	mov.w	sl, #4294967295
 800b1d8:	2100      	movs	r1, #0
 800b1da:	46d1      	mov	r9, sl
 800b1dc:	2212      	movs	r2, #18
 800b1de:	9109      	str	r1, [sp, #36]	; 0x24
 800b1e0:	e7ce      	b.n	800b180 <_dtoa_r+0x240>
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	9208      	str	r2, [sp, #32]
 800b1e6:	e7f5      	b.n	800b1d4 <_dtoa_r+0x294>
 800b1e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800b1ec:	46d1      	mov	r9, sl
 800b1ee:	4652      	mov	r2, sl
 800b1f0:	e7c6      	b.n	800b180 <_dtoa_r+0x240>
 800b1f2:	3101      	adds	r1, #1
 800b1f4:	6079      	str	r1, [r7, #4]
 800b1f6:	0040      	lsls	r0, r0, #1
 800b1f8:	e7c6      	b.n	800b188 <_dtoa_r+0x248>
 800b1fa:	bf00      	nop
 800b1fc:	f3af 8000 	nop.w
 800b200:	636f4361 	.word	0x636f4361
 800b204:	3fd287a7 	.word	0x3fd287a7
 800b208:	8b60c8b3 	.word	0x8b60c8b3
 800b20c:	3fc68a28 	.word	0x3fc68a28
 800b210:	509f79fb 	.word	0x509f79fb
 800b214:	3fd34413 	.word	0x3fd34413
 800b218:	0800d59d 	.word	0x0800d59d
 800b21c:	0800d5b4 	.word	0x0800d5b4
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	0800d599 	.word	0x0800d599
 800b228:	0800d590 	.word	0x0800d590
 800b22c:	0800d56d 	.word	0x0800d56d
 800b230:	0800d6b0 	.word	0x0800d6b0
 800b234:	0800d613 	.word	0x0800d613
 800b238:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b23a:	9900      	ldr	r1, [sp, #0]
 800b23c:	6011      	str	r1, [r2, #0]
 800b23e:	f1b9 0f0e 	cmp.w	r9, #14
 800b242:	d872      	bhi.n	800b32a <_dtoa_r+0x3ea>
 800b244:	2c00      	cmp	r4, #0
 800b246:	d070      	beq.n	800b32a <_dtoa_r+0x3ea>
 800b248:	f1bb 0f00 	cmp.w	fp, #0
 800b24c:	f340 80a6 	ble.w	800b39c <_dtoa_r+0x45c>
 800b250:	49ca      	ldr	r1, [pc, #808]	; (800b57c <_dtoa_r+0x63c>)
 800b252:	f00b 020f 	and.w	r2, fp, #15
 800b256:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b25a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b25e:	ed92 7b00 	vldr	d7, [r2]
 800b262:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b266:	f000 808d 	beq.w	800b384 <_dtoa_r+0x444>
 800b26a:	4ac5      	ldr	r2, [pc, #788]	; (800b580 <_dtoa_r+0x640>)
 800b26c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800b270:	ed92 6b08 	vldr	d6, [r2, #32]
 800b274:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b278:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b27c:	f001 010f 	and.w	r1, r1, #15
 800b280:	2203      	movs	r2, #3
 800b282:	48bf      	ldr	r0, [pc, #764]	; (800b580 <_dtoa_r+0x640>)
 800b284:	2900      	cmp	r1, #0
 800b286:	d17f      	bne.n	800b388 <_dtoa_r+0x448>
 800b288:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b28c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b290:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b294:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b296:	2900      	cmp	r1, #0
 800b298:	f000 80b2 	beq.w	800b400 <_dtoa_r+0x4c0>
 800b29c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b2a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ac:	f140 80a8 	bpl.w	800b400 <_dtoa_r+0x4c0>
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	f000 80a4 	beq.w	800b400 <_dtoa_r+0x4c0>
 800b2b8:	f1ba 0f00 	cmp.w	sl, #0
 800b2bc:	dd31      	ble.n	800b322 <_dtoa_r+0x3e2>
 800b2be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b2c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2ca:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b2ce:	3201      	adds	r2, #1
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b2d6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b2da:	ee07 2a90 	vmov	s15, r2
 800b2de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b2e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b2e6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b2ea:	9c03      	ldr	r4, [sp, #12]
 800b2ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b2f0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	f040 8086 	bne.w	800b406 <_dtoa_r+0x4c6>
 800b2fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b2fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b302:	ec42 1b17 	vmov	d7, r1, r2
 800b306:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b30e:	f300 8272 	bgt.w	800b7f6 <_dtoa_r+0x8b6>
 800b312:	eeb1 7b47 	vneg.f64	d7, d7
 800b316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31e:	f100 8267 	bmi.w	800b7f0 <_dtoa_r+0x8b0>
 800b322:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800b326:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b32a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	f2c0 8129 	blt.w	800b584 <_dtoa_r+0x644>
 800b332:	f1bb 0f0e 	cmp.w	fp, #14
 800b336:	f300 8125 	bgt.w	800b584 <_dtoa_r+0x644>
 800b33a:	4b90      	ldr	r3, [pc, #576]	; (800b57c <_dtoa_r+0x63c>)
 800b33c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b340:	ed93 6b00 	vldr	d6, [r3]
 800b344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b346:	2b00      	cmp	r3, #0
 800b348:	f280 80c3 	bge.w	800b4d2 <_dtoa_r+0x592>
 800b34c:	f1b9 0f00 	cmp.w	r9, #0
 800b350:	f300 80bf 	bgt.w	800b4d2 <_dtoa_r+0x592>
 800b354:	f040 824c 	bne.w	800b7f0 <_dtoa_r+0x8b0>
 800b358:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b35c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b360:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b364:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36c:	464c      	mov	r4, r9
 800b36e:	464f      	mov	r7, r9
 800b370:	f280 8222 	bge.w	800b7b8 <_dtoa_r+0x878>
 800b374:	f8dd 8000 	ldr.w	r8, [sp]
 800b378:	2331      	movs	r3, #49	; 0x31
 800b37a:	f808 3b01 	strb.w	r3, [r8], #1
 800b37e:	f10b 0b01 	add.w	fp, fp, #1
 800b382:	e21e      	b.n	800b7c2 <_dtoa_r+0x882>
 800b384:	2202      	movs	r2, #2
 800b386:	e77c      	b.n	800b282 <_dtoa_r+0x342>
 800b388:	07cc      	lsls	r4, r1, #31
 800b38a:	d504      	bpl.n	800b396 <_dtoa_r+0x456>
 800b38c:	ed90 6b00 	vldr	d6, [r0]
 800b390:	3201      	adds	r2, #1
 800b392:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b396:	1049      	asrs	r1, r1, #1
 800b398:	3008      	adds	r0, #8
 800b39a:	e773      	b.n	800b284 <_dtoa_r+0x344>
 800b39c:	d02e      	beq.n	800b3fc <_dtoa_r+0x4bc>
 800b39e:	f1cb 0100 	rsb	r1, fp, #0
 800b3a2:	4a76      	ldr	r2, [pc, #472]	; (800b57c <_dtoa_r+0x63c>)
 800b3a4:	f001 000f 	and.w	r0, r1, #15
 800b3a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b3ac:	ed92 7b00 	vldr	d7, [r2]
 800b3b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b3b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b3bc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800b3c0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800b3c4:	486e      	ldr	r0, [pc, #440]	; (800b580 <_dtoa_r+0x640>)
 800b3c6:	1109      	asrs	r1, r1, #4
 800b3c8:	2400      	movs	r4, #0
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	b939      	cbnz	r1, 800b3de <_dtoa_r+0x49e>
 800b3ce:	2c00      	cmp	r4, #0
 800b3d0:	f43f af60 	beq.w	800b294 <_dtoa_r+0x354>
 800b3d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3dc:	e75a      	b.n	800b294 <_dtoa_r+0x354>
 800b3de:	07cf      	lsls	r7, r1, #31
 800b3e0:	d509      	bpl.n	800b3f6 <_dtoa_r+0x4b6>
 800b3e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800b3e6:	ed90 7b00 	vldr	d7, [r0]
 800b3ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b3f2:	3201      	adds	r2, #1
 800b3f4:	2401      	movs	r4, #1
 800b3f6:	1049      	asrs	r1, r1, #1
 800b3f8:	3008      	adds	r0, #8
 800b3fa:	e7e7      	b.n	800b3cc <_dtoa_r+0x48c>
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	e749      	b.n	800b294 <_dtoa_r+0x354>
 800b400:	465f      	mov	r7, fp
 800b402:	4648      	mov	r0, r9
 800b404:	e765      	b.n	800b2d2 <_dtoa_r+0x392>
 800b406:	ec42 1b17 	vmov	d7, r1, r2
 800b40a:	4a5c      	ldr	r2, [pc, #368]	; (800b57c <_dtoa_r+0x63c>)
 800b40c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b410:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b414:	9a00      	ldr	r2, [sp, #0]
 800b416:	1814      	adds	r4, r2, r0
 800b418:	9a08      	ldr	r2, [sp, #32]
 800b41a:	b352      	cbz	r2, 800b472 <_dtoa_r+0x532>
 800b41c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b420:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b424:	f8dd 8000 	ldr.w	r8, [sp]
 800b428:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b42c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b430:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b434:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b438:	ee14 2a90 	vmov	r2, s9
 800b43c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b440:	3230      	adds	r2, #48	; 0x30
 800b442:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b446:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44e:	f808 2b01 	strb.w	r2, [r8], #1
 800b452:	d439      	bmi.n	800b4c8 <_dtoa_r+0x588>
 800b454:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b458:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b460:	d472      	bmi.n	800b548 <_dtoa_r+0x608>
 800b462:	45a0      	cmp	r8, r4
 800b464:	f43f af5d 	beq.w	800b322 <_dtoa_r+0x3e2>
 800b468:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b46c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b470:	e7e0      	b.n	800b434 <_dtoa_r+0x4f4>
 800b472:	f8dd 8000 	ldr.w	r8, [sp]
 800b476:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b47a:	4621      	mov	r1, r4
 800b47c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b480:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b484:	ee14 2a90 	vmov	r2, s9
 800b488:	3230      	adds	r2, #48	; 0x30
 800b48a:	f808 2b01 	strb.w	r2, [r8], #1
 800b48e:	45a0      	cmp	r8, r4
 800b490:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b494:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b498:	d118      	bne.n	800b4cc <_dtoa_r+0x58c>
 800b49a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b49e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b4a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4aa:	dc4d      	bgt.n	800b548 <_dtoa_r+0x608>
 800b4ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b4b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b8:	f57f af33 	bpl.w	800b322 <_dtoa_r+0x3e2>
 800b4bc:	4688      	mov	r8, r1
 800b4be:	3901      	subs	r1, #1
 800b4c0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b4c4:	2b30      	cmp	r3, #48	; 0x30
 800b4c6:	d0f9      	beq.n	800b4bc <_dtoa_r+0x57c>
 800b4c8:	46bb      	mov	fp, r7
 800b4ca:	e02a      	b.n	800b522 <_dtoa_r+0x5e2>
 800b4cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b4d0:	e7d6      	b.n	800b480 <_dtoa_r+0x540>
 800b4d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4d6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b4da:	f8dd 8000 	ldr.w	r8, [sp]
 800b4de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b4e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b4e6:	ee15 3a10 	vmov	r3, s10
 800b4ea:	3330      	adds	r3, #48	; 0x30
 800b4ec:	f808 3b01 	strb.w	r3, [r8], #1
 800b4f0:	9b00      	ldr	r3, [sp, #0]
 800b4f2:	eba8 0303 	sub.w	r3, r8, r3
 800b4f6:	4599      	cmp	r9, r3
 800b4f8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b4fc:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b500:	d133      	bne.n	800b56a <_dtoa_r+0x62a>
 800b502:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b506:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50e:	dc1a      	bgt.n	800b546 <_dtoa_r+0x606>
 800b510:	eeb4 7b46 	vcmp.f64	d7, d6
 800b514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b518:	d103      	bne.n	800b522 <_dtoa_r+0x5e2>
 800b51a:	ee15 3a10 	vmov	r3, s10
 800b51e:	07d9      	lsls	r1, r3, #31
 800b520:	d411      	bmi.n	800b546 <_dtoa_r+0x606>
 800b522:	4629      	mov	r1, r5
 800b524:	4630      	mov	r0, r6
 800b526:	f000 fae7 	bl	800baf8 <_Bfree>
 800b52a:	2300      	movs	r3, #0
 800b52c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b52e:	f888 3000 	strb.w	r3, [r8]
 800b532:	f10b 0301 	add.w	r3, fp, #1
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f43f ad4d 	beq.w	800afda <_dtoa_r+0x9a>
 800b540:	f8c3 8000 	str.w	r8, [r3]
 800b544:	e549      	b.n	800afda <_dtoa_r+0x9a>
 800b546:	465f      	mov	r7, fp
 800b548:	4643      	mov	r3, r8
 800b54a:	4698      	mov	r8, r3
 800b54c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b550:	2a39      	cmp	r2, #57	; 0x39
 800b552:	d106      	bne.n	800b562 <_dtoa_r+0x622>
 800b554:	9a00      	ldr	r2, [sp, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d1f7      	bne.n	800b54a <_dtoa_r+0x60a>
 800b55a:	9900      	ldr	r1, [sp, #0]
 800b55c:	2230      	movs	r2, #48	; 0x30
 800b55e:	3701      	adds	r7, #1
 800b560:	700a      	strb	r2, [r1, #0]
 800b562:	781a      	ldrb	r2, [r3, #0]
 800b564:	3201      	adds	r2, #1
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	e7ae      	b.n	800b4c8 <_dtoa_r+0x588>
 800b56a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b56e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b576:	d1b2      	bne.n	800b4de <_dtoa_r+0x59e>
 800b578:	e7d3      	b.n	800b522 <_dtoa_r+0x5e2>
 800b57a:	bf00      	nop
 800b57c:	0800d6b0 	.word	0x0800d6b0
 800b580:	0800d688 	.word	0x0800d688
 800b584:	9908      	ldr	r1, [sp, #32]
 800b586:	2900      	cmp	r1, #0
 800b588:	f000 80d1 	beq.w	800b72e <_dtoa_r+0x7ee>
 800b58c:	9907      	ldr	r1, [sp, #28]
 800b58e:	2901      	cmp	r1, #1
 800b590:	f300 80b4 	bgt.w	800b6fc <_dtoa_r+0x7bc>
 800b594:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b596:	2900      	cmp	r1, #0
 800b598:	f000 80ac 	beq.w	800b6f4 <_dtoa_r+0x7b4>
 800b59c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b5a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b5a4:	461c      	mov	r4, r3
 800b5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5a8:	9b05      	ldr	r3, [sp, #20]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	9305      	str	r3, [sp, #20]
 800b5ae:	9b06      	ldr	r3, [sp, #24]
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	4413      	add	r3, r2
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	9306      	str	r3, [sp, #24]
 800b5b8:	f000 fb5a 	bl	800bc70 <__i2b>
 800b5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5be:	4607      	mov	r7, r0
 800b5c0:	f1b8 0f00 	cmp.w	r8, #0
 800b5c4:	dd0d      	ble.n	800b5e2 <_dtoa_r+0x6a2>
 800b5c6:	9a06      	ldr	r2, [sp, #24]
 800b5c8:	2a00      	cmp	r2, #0
 800b5ca:	dd0a      	ble.n	800b5e2 <_dtoa_r+0x6a2>
 800b5cc:	4542      	cmp	r2, r8
 800b5ce:	9905      	ldr	r1, [sp, #20]
 800b5d0:	bfa8      	it	ge
 800b5d2:	4642      	movge	r2, r8
 800b5d4:	1a89      	subs	r1, r1, r2
 800b5d6:	9105      	str	r1, [sp, #20]
 800b5d8:	9906      	ldr	r1, [sp, #24]
 800b5da:	eba8 0802 	sub.w	r8, r8, r2
 800b5de:	1a8a      	subs	r2, r1, r2
 800b5e0:	9206      	str	r2, [sp, #24]
 800b5e2:	b303      	cbz	r3, 800b626 <_dtoa_r+0x6e6>
 800b5e4:	9a08      	ldr	r2, [sp, #32]
 800b5e6:	2a00      	cmp	r2, #0
 800b5e8:	f000 80a6 	beq.w	800b738 <_dtoa_r+0x7f8>
 800b5ec:	2c00      	cmp	r4, #0
 800b5ee:	dd13      	ble.n	800b618 <_dtoa_r+0x6d8>
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5f8:	f000 fbf6 	bl	800bde8 <__pow5mult>
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	4601      	mov	r1, r0
 800b600:	4607      	mov	r7, r0
 800b602:	4630      	mov	r0, r6
 800b604:	f000 fb4a 	bl	800bc9c <__multiply>
 800b608:	4629      	mov	r1, r5
 800b60a:	900a      	str	r0, [sp, #40]	; 0x28
 800b60c:	4630      	mov	r0, r6
 800b60e:	f000 fa73 	bl	800baf8 <_Bfree>
 800b612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b616:	4615      	mov	r5, r2
 800b618:	1b1a      	subs	r2, r3, r4
 800b61a:	d004      	beq.n	800b626 <_dtoa_r+0x6e6>
 800b61c:	4629      	mov	r1, r5
 800b61e:	4630      	mov	r0, r6
 800b620:	f000 fbe2 	bl	800bde8 <__pow5mult>
 800b624:	4605      	mov	r5, r0
 800b626:	2101      	movs	r1, #1
 800b628:	4630      	mov	r0, r6
 800b62a:	f000 fb21 	bl	800bc70 <__i2b>
 800b62e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b630:	2b00      	cmp	r3, #0
 800b632:	4604      	mov	r4, r0
 800b634:	f340 8082 	ble.w	800b73c <_dtoa_r+0x7fc>
 800b638:	461a      	mov	r2, r3
 800b63a:	4601      	mov	r1, r0
 800b63c:	4630      	mov	r0, r6
 800b63e:	f000 fbd3 	bl	800bde8 <__pow5mult>
 800b642:	9b07      	ldr	r3, [sp, #28]
 800b644:	2b01      	cmp	r3, #1
 800b646:	4604      	mov	r4, r0
 800b648:	dd7b      	ble.n	800b742 <_dtoa_r+0x802>
 800b64a:	2300      	movs	r3, #0
 800b64c:	930a      	str	r3, [sp, #40]	; 0x28
 800b64e:	6922      	ldr	r2, [r4, #16]
 800b650:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b654:	6910      	ldr	r0, [r2, #16]
 800b656:	f000 fabb 	bl	800bbd0 <__hi0bits>
 800b65a:	f1c0 0020 	rsb	r0, r0, #32
 800b65e:	9b06      	ldr	r3, [sp, #24]
 800b660:	4418      	add	r0, r3
 800b662:	f010 001f 	ands.w	r0, r0, #31
 800b666:	f000 808d 	beq.w	800b784 <_dtoa_r+0x844>
 800b66a:	f1c0 0220 	rsb	r2, r0, #32
 800b66e:	2a04      	cmp	r2, #4
 800b670:	f340 8086 	ble.w	800b780 <_dtoa_r+0x840>
 800b674:	f1c0 001c 	rsb	r0, r0, #28
 800b678:	9b05      	ldr	r3, [sp, #20]
 800b67a:	4403      	add	r3, r0
 800b67c:	9305      	str	r3, [sp, #20]
 800b67e:	9b06      	ldr	r3, [sp, #24]
 800b680:	4403      	add	r3, r0
 800b682:	4480      	add	r8, r0
 800b684:	9306      	str	r3, [sp, #24]
 800b686:	9b05      	ldr	r3, [sp, #20]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dd05      	ble.n	800b698 <_dtoa_r+0x758>
 800b68c:	4629      	mov	r1, r5
 800b68e:	461a      	mov	r2, r3
 800b690:	4630      	mov	r0, r6
 800b692:	f000 fc03 	bl	800be9c <__lshift>
 800b696:	4605      	mov	r5, r0
 800b698:	9b06      	ldr	r3, [sp, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	dd05      	ble.n	800b6aa <_dtoa_r+0x76a>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f000 fbfa 	bl	800be9c <__lshift>
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d06b      	beq.n	800b788 <_dtoa_r+0x848>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 fc5e 	bl	800bf74 <__mcmp>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	da65      	bge.n	800b788 <_dtoa_r+0x848>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4629      	mov	r1, r5
 800b6c0:	220a      	movs	r2, #10
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 fa3a 	bl	800bb3c <__multadd>
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 8192 	beq.w	800b9fa <_dtoa_r+0xaba>
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	2300      	movs	r3, #0
 800b6da:	220a      	movs	r2, #10
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f000 fa2d 	bl	800bb3c <__multadd>
 800b6e2:	f1ba 0f00 	cmp.w	sl, #0
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	f300 808e 	bgt.w	800b808 <_dtoa_r+0x8c8>
 800b6ec:	9b07      	ldr	r3, [sp, #28]
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	dc51      	bgt.n	800b796 <_dtoa_r+0x856>
 800b6f2:	e089      	b.n	800b808 <_dtoa_r+0x8c8>
 800b6f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b6fa:	e751      	b.n	800b5a0 <_dtoa_r+0x660>
 800b6fc:	f109 34ff 	add.w	r4, r9, #4294967295
 800b700:	42a3      	cmp	r3, r4
 800b702:	bfbf      	itttt	lt
 800b704:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b706:	1ae3      	sublt	r3, r4, r3
 800b708:	18d2      	addlt	r2, r2, r3
 800b70a:	4613      	movlt	r3, r2
 800b70c:	bfb7      	itett	lt
 800b70e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b710:	1b1c      	subge	r4, r3, r4
 800b712:	4623      	movlt	r3, r4
 800b714:	2400      	movlt	r4, #0
 800b716:	f1b9 0f00 	cmp.w	r9, #0
 800b71a:	bfb5      	itete	lt
 800b71c:	9a05      	ldrlt	r2, [sp, #20]
 800b71e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800b722:	eba2 0809 	sublt.w	r8, r2, r9
 800b726:	464a      	movge	r2, r9
 800b728:	bfb8      	it	lt
 800b72a:	2200      	movlt	r2, #0
 800b72c:	e73b      	b.n	800b5a6 <_dtoa_r+0x666>
 800b72e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b732:	9f08      	ldr	r7, [sp, #32]
 800b734:	461c      	mov	r4, r3
 800b736:	e743      	b.n	800b5c0 <_dtoa_r+0x680>
 800b738:	461a      	mov	r2, r3
 800b73a:	e76f      	b.n	800b61c <_dtoa_r+0x6dc>
 800b73c:	9b07      	ldr	r3, [sp, #28]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	dc18      	bgt.n	800b774 <_dtoa_r+0x834>
 800b742:	9b02      	ldr	r3, [sp, #8]
 800b744:	b9b3      	cbnz	r3, 800b774 <_dtoa_r+0x834>
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b74c:	b9a2      	cbnz	r2, 800b778 <_dtoa_r+0x838>
 800b74e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b752:	0d12      	lsrs	r2, r2, #20
 800b754:	0512      	lsls	r2, r2, #20
 800b756:	b18a      	cbz	r2, 800b77c <_dtoa_r+0x83c>
 800b758:	9b05      	ldr	r3, [sp, #20]
 800b75a:	3301      	adds	r3, #1
 800b75c:	9305      	str	r3, [sp, #20]
 800b75e:	9b06      	ldr	r3, [sp, #24]
 800b760:	3301      	adds	r3, #1
 800b762:	9306      	str	r3, [sp, #24]
 800b764:	2301      	movs	r3, #1
 800b766:	930a      	str	r3, [sp, #40]	; 0x28
 800b768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f47f af6f 	bne.w	800b64e <_dtoa_r+0x70e>
 800b770:	2001      	movs	r0, #1
 800b772:	e774      	b.n	800b65e <_dtoa_r+0x71e>
 800b774:	2300      	movs	r3, #0
 800b776:	e7f6      	b.n	800b766 <_dtoa_r+0x826>
 800b778:	9b02      	ldr	r3, [sp, #8]
 800b77a:	e7f4      	b.n	800b766 <_dtoa_r+0x826>
 800b77c:	920a      	str	r2, [sp, #40]	; 0x28
 800b77e:	e7f3      	b.n	800b768 <_dtoa_r+0x828>
 800b780:	d081      	beq.n	800b686 <_dtoa_r+0x746>
 800b782:	4610      	mov	r0, r2
 800b784:	301c      	adds	r0, #28
 800b786:	e777      	b.n	800b678 <_dtoa_r+0x738>
 800b788:	f1b9 0f00 	cmp.w	r9, #0
 800b78c:	dc37      	bgt.n	800b7fe <_dtoa_r+0x8be>
 800b78e:	9b07      	ldr	r3, [sp, #28]
 800b790:	2b02      	cmp	r3, #2
 800b792:	dd34      	ble.n	800b7fe <_dtoa_r+0x8be>
 800b794:	46ca      	mov	sl, r9
 800b796:	f1ba 0f00 	cmp.w	sl, #0
 800b79a:	d10d      	bne.n	800b7b8 <_dtoa_r+0x878>
 800b79c:	4621      	mov	r1, r4
 800b79e:	4653      	mov	r3, sl
 800b7a0:	2205      	movs	r2, #5
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f000 f9ca 	bl	800bb3c <__multadd>
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f000 fbe1 	bl	800bf74 <__mcmp>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	f73f adde 	bgt.w	800b374 <_dtoa_r+0x434>
 800b7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ba:	f8dd 8000 	ldr.w	r8, [sp]
 800b7be:	ea6f 0b03 	mvn.w	fp, r3
 800b7c2:	f04f 0900 	mov.w	r9, #0
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f000 f995 	bl	800baf8 <_Bfree>
 800b7ce:	2f00      	cmp	r7, #0
 800b7d0:	f43f aea7 	beq.w	800b522 <_dtoa_r+0x5e2>
 800b7d4:	f1b9 0f00 	cmp.w	r9, #0
 800b7d8:	d005      	beq.n	800b7e6 <_dtoa_r+0x8a6>
 800b7da:	45b9      	cmp	r9, r7
 800b7dc:	d003      	beq.n	800b7e6 <_dtoa_r+0x8a6>
 800b7de:	4649      	mov	r1, r9
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 f989 	bl	800baf8 <_Bfree>
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f000 f985 	bl	800baf8 <_Bfree>
 800b7ee:	e698      	b.n	800b522 <_dtoa_r+0x5e2>
 800b7f0:	2400      	movs	r4, #0
 800b7f2:	4627      	mov	r7, r4
 800b7f4:	e7e0      	b.n	800b7b8 <_dtoa_r+0x878>
 800b7f6:	46bb      	mov	fp, r7
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	4607      	mov	r7, r0
 800b7fc:	e5ba      	b.n	800b374 <_dtoa_r+0x434>
 800b7fe:	9b08      	ldr	r3, [sp, #32]
 800b800:	46ca      	mov	sl, r9
 800b802:	2b00      	cmp	r3, #0
 800b804:	f000 8100 	beq.w	800ba08 <_dtoa_r+0xac8>
 800b808:	f1b8 0f00 	cmp.w	r8, #0
 800b80c:	dd05      	ble.n	800b81a <_dtoa_r+0x8da>
 800b80e:	4639      	mov	r1, r7
 800b810:	4642      	mov	r2, r8
 800b812:	4630      	mov	r0, r6
 800b814:	f000 fb42 	bl	800be9c <__lshift>
 800b818:	4607      	mov	r7, r0
 800b81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d05d      	beq.n	800b8dc <_dtoa_r+0x99c>
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	4630      	mov	r0, r6
 800b824:	f000 f928 	bl	800ba78 <_Balloc>
 800b828:	4680      	mov	r8, r0
 800b82a:	b928      	cbnz	r0, 800b838 <_dtoa_r+0x8f8>
 800b82c:	4b82      	ldr	r3, [pc, #520]	; (800ba38 <_dtoa_r+0xaf8>)
 800b82e:	4602      	mov	r2, r0
 800b830:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b834:	f7ff bb9a 	b.w	800af6c <_dtoa_r+0x2c>
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	3202      	adds	r2, #2
 800b83c:	0092      	lsls	r2, r2, #2
 800b83e:	f107 010c 	add.w	r1, r7, #12
 800b842:	300c      	adds	r0, #12
 800b844:	f000 f90a 	bl	800ba5c <memcpy>
 800b848:	2201      	movs	r2, #1
 800b84a:	4641      	mov	r1, r8
 800b84c:	4630      	mov	r0, r6
 800b84e:	f000 fb25 	bl	800be9c <__lshift>
 800b852:	9b00      	ldr	r3, [sp, #0]
 800b854:	3301      	adds	r3, #1
 800b856:	9305      	str	r3, [sp, #20]
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	4453      	add	r3, sl
 800b85c:	9309      	str	r3, [sp, #36]	; 0x24
 800b85e:	9b02      	ldr	r3, [sp, #8]
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	46b9      	mov	r9, r7
 800b866:	9308      	str	r3, [sp, #32]
 800b868:	4607      	mov	r7, r0
 800b86a:	9b05      	ldr	r3, [sp, #20]
 800b86c:	4621      	mov	r1, r4
 800b86e:	3b01      	subs	r3, #1
 800b870:	4628      	mov	r0, r5
 800b872:	9302      	str	r3, [sp, #8]
 800b874:	f7ff fad6 	bl	800ae24 <quorem>
 800b878:	4603      	mov	r3, r0
 800b87a:	3330      	adds	r3, #48	; 0x30
 800b87c:	9006      	str	r0, [sp, #24]
 800b87e:	4649      	mov	r1, r9
 800b880:	4628      	mov	r0, r5
 800b882:	930a      	str	r3, [sp, #40]	; 0x28
 800b884:	f000 fb76 	bl	800bf74 <__mcmp>
 800b888:	463a      	mov	r2, r7
 800b88a:	4682      	mov	sl, r0
 800b88c:	4621      	mov	r1, r4
 800b88e:	4630      	mov	r0, r6
 800b890:	f000 fb8c 	bl	800bfac <__mdiff>
 800b894:	68c2      	ldr	r2, [r0, #12]
 800b896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b898:	4680      	mov	r8, r0
 800b89a:	bb0a      	cbnz	r2, 800b8e0 <_dtoa_r+0x9a0>
 800b89c:	4601      	mov	r1, r0
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f000 fb68 	bl	800bf74 <__mcmp>
 800b8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	920e      	str	r2, [sp, #56]	; 0x38
 800b8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b0:	f000 f922 	bl	800baf8 <_Bfree>
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b8bc:	ea43 0102 	orr.w	r1, r3, r2
 800b8c0:	9b08      	ldr	r3, [sp, #32]
 800b8c2:	430b      	orrs	r3, r1
 800b8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c6:	d10d      	bne.n	800b8e4 <_dtoa_r+0x9a4>
 800b8c8:	2b39      	cmp	r3, #57	; 0x39
 800b8ca:	d029      	beq.n	800b920 <_dtoa_r+0x9e0>
 800b8cc:	f1ba 0f00 	cmp.w	sl, #0
 800b8d0:	dd01      	ble.n	800b8d6 <_dtoa_r+0x996>
 800b8d2:	9b06      	ldr	r3, [sp, #24]
 800b8d4:	3331      	adds	r3, #49	; 0x31
 800b8d6:	9a02      	ldr	r2, [sp, #8]
 800b8d8:	7013      	strb	r3, [r2, #0]
 800b8da:	e774      	b.n	800b7c6 <_dtoa_r+0x886>
 800b8dc:	4638      	mov	r0, r7
 800b8de:	e7b8      	b.n	800b852 <_dtoa_r+0x912>
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	e7e1      	b.n	800b8a8 <_dtoa_r+0x968>
 800b8e4:	f1ba 0f00 	cmp.w	sl, #0
 800b8e8:	db06      	blt.n	800b8f8 <_dtoa_r+0x9b8>
 800b8ea:	9907      	ldr	r1, [sp, #28]
 800b8ec:	ea41 0a0a 	orr.w	sl, r1, sl
 800b8f0:	9908      	ldr	r1, [sp, #32]
 800b8f2:	ea5a 0101 	orrs.w	r1, sl, r1
 800b8f6:	d120      	bne.n	800b93a <_dtoa_r+0x9fa>
 800b8f8:	2a00      	cmp	r2, #0
 800b8fa:	ddec      	ble.n	800b8d6 <_dtoa_r+0x996>
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	2201      	movs	r2, #1
 800b900:	4630      	mov	r0, r6
 800b902:	9305      	str	r3, [sp, #20]
 800b904:	f000 faca 	bl	800be9c <__lshift>
 800b908:	4621      	mov	r1, r4
 800b90a:	4605      	mov	r5, r0
 800b90c:	f000 fb32 	bl	800bf74 <__mcmp>
 800b910:	2800      	cmp	r0, #0
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	dc02      	bgt.n	800b91c <_dtoa_r+0x9dc>
 800b916:	d1de      	bne.n	800b8d6 <_dtoa_r+0x996>
 800b918:	07da      	lsls	r2, r3, #31
 800b91a:	d5dc      	bpl.n	800b8d6 <_dtoa_r+0x996>
 800b91c:	2b39      	cmp	r3, #57	; 0x39
 800b91e:	d1d8      	bne.n	800b8d2 <_dtoa_r+0x992>
 800b920:	9a02      	ldr	r2, [sp, #8]
 800b922:	2339      	movs	r3, #57	; 0x39
 800b924:	7013      	strb	r3, [r2, #0]
 800b926:	4643      	mov	r3, r8
 800b928:	4698      	mov	r8, r3
 800b92a:	3b01      	subs	r3, #1
 800b92c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b930:	2a39      	cmp	r2, #57	; 0x39
 800b932:	d051      	beq.n	800b9d8 <_dtoa_r+0xa98>
 800b934:	3201      	adds	r2, #1
 800b936:	701a      	strb	r2, [r3, #0]
 800b938:	e745      	b.n	800b7c6 <_dtoa_r+0x886>
 800b93a:	2a00      	cmp	r2, #0
 800b93c:	dd03      	ble.n	800b946 <_dtoa_r+0xa06>
 800b93e:	2b39      	cmp	r3, #57	; 0x39
 800b940:	d0ee      	beq.n	800b920 <_dtoa_r+0x9e0>
 800b942:	3301      	adds	r3, #1
 800b944:	e7c7      	b.n	800b8d6 <_dtoa_r+0x996>
 800b946:	9a05      	ldr	r2, [sp, #20]
 800b948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b94a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b94e:	428a      	cmp	r2, r1
 800b950:	d02b      	beq.n	800b9aa <_dtoa_r+0xa6a>
 800b952:	4629      	mov	r1, r5
 800b954:	2300      	movs	r3, #0
 800b956:	220a      	movs	r2, #10
 800b958:	4630      	mov	r0, r6
 800b95a:	f000 f8ef 	bl	800bb3c <__multadd>
 800b95e:	45b9      	cmp	r9, r7
 800b960:	4605      	mov	r5, r0
 800b962:	f04f 0300 	mov.w	r3, #0
 800b966:	f04f 020a 	mov.w	r2, #10
 800b96a:	4649      	mov	r1, r9
 800b96c:	4630      	mov	r0, r6
 800b96e:	d107      	bne.n	800b980 <_dtoa_r+0xa40>
 800b970:	f000 f8e4 	bl	800bb3c <__multadd>
 800b974:	4681      	mov	r9, r0
 800b976:	4607      	mov	r7, r0
 800b978:	9b05      	ldr	r3, [sp, #20]
 800b97a:	3301      	adds	r3, #1
 800b97c:	9305      	str	r3, [sp, #20]
 800b97e:	e774      	b.n	800b86a <_dtoa_r+0x92a>
 800b980:	f000 f8dc 	bl	800bb3c <__multadd>
 800b984:	4639      	mov	r1, r7
 800b986:	4681      	mov	r9, r0
 800b988:	2300      	movs	r3, #0
 800b98a:	220a      	movs	r2, #10
 800b98c:	4630      	mov	r0, r6
 800b98e:	f000 f8d5 	bl	800bb3c <__multadd>
 800b992:	4607      	mov	r7, r0
 800b994:	e7f0      	b.n	800b978 <_dtoa_r+0xa38>
 800b996:	f1ba 0f00 	cmp.w	sl, #0
 800b99a:	9a00      	ldr	r2, [sp, #0]
 800b99c:	bfcc      	ite	gt
 800b99e:	46d0      	movgt	r8, sl
 800b9a0:	f04f 0801 	movle.w	r8, #1
 800b9a4:	4490      	add	r8, r2
 800b9a6:	f04f 0900 	mov.w	r9, #0
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	9302      	str	r3, [sp, #8]
 800b9b2:	f000 fa73 	bl	800be9c <__lshift>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	f000 fadb 	bl	800bf74 <__mcmp>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	dcb1      	bgt.n	800b926 <_dtoa_r+0x9e6>
 800b9c2:	d102      	bne.n	800b9ca <_dtoa_r+0xa8a>
 800b9c4:	9b02      	ldr	r3, [sp, #8]
 800b9c6:	07db      	lsls	r3, r3, #31
 800b9c8:	d4ad      	bmi.n	800b926 <_dtoa_r+0x9e6>
 800b9ca:	4643      	mov	r3, r8
 800b9cc:	4698      	mov	r8, r3
 800b9ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9d2:	2a30      	cmp	r2, #48	; 0x30
 800b9d4:	d0fa      	beq.n	800b9cc <_dtoa_r+0xa8c>
 800b9d6:	e6f6      	b.n	800b7c6 <_dtoa_r+0x886>
 800b9d8:	9a00      	ldr	r2, [sp, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d1a4      	bne.n	800b928 <_dtoa_r+0x9e8>
 800b9de:	f10b 0b01 	add.w	fp, fp, #1
 800b9e2:	2331      	movs	r3, #49	; 0x31
 800b9e4:	e778      	b.n	800b8d8 <_dtoa_r+0x998>
 800b9e6:	4b15      	ldr	r3, [pc, #84]	; (800ba3c <_dtoa_r+0xafc>)
 800b9e8:	f7ff bb12 	b.w	800b010 <_dtoa_r+0xd0>
 800b9ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f47f aaee 	bne.w	800afd0 <_dtoa_r+0x90>
 800b9f4:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <_dtoa_r+0xb00>)
 800b9f6:	f7ff bb0b 	b.w	800b010 <_dtoa_r+0xd0>
 800b9fa:	f1ba 0f00 	cmp.w	sl, #0
 800b9fe:	dc03      	bgt.n	800ba08 <_dtoa_r+0xac8>
 800ba00:	9b07      	ldr	r3, [sp, #28]
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	f73f aec7 	bgt.w	800b796 <_dtoa_r+0x856>
 800ba08:	f8dd 8000 	ldr.w	r8, [sp]
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f7ff fa08 	bl	800ae24 <quorem>
 800ba14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ba18:	f808 3b01 	strb.w	r3, [r8], #1
 800ba1c:	9a00      	ldr	r2, [sp, #0]
 800ba1e:	eba8 0202 	sub.w	r2, r8, r2
 800ba22:	4592      	cmp	sl, r2
 800ba24:	ddb7      	ble.n	800b996 <_dtoa_r+0xa56>
 800ba26:	4629      	mov	r1, r5
 800ba28:	2300      	movs	r3, #0
 800ba2a:	220a      	movs	r2, #10
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f000 f885 	bl	800bb3c <__multadd>
 800ba32:	4605      	mov	r5, r0
 800ba34:	e7ea      	b.n	800ba0c <_dtoa_r+0xacc>
 800ba36:	bf00      	nop
 800ba38:	0800d613 	.word	0x0800d613
 800ba3c:	0800d56c 	.word	0x0800d56c
 800ba40:	0800d590 	.word	0x0800d590

0800ba44 <_localeconv_r>:
 800ba44:	4800      	ldr	r0, [pc, #0]	; (800ba48 <_localeconv_r+0x4>)
 800ba46:	4770      	bx	lr
 800ba48:	20000224 	.word	0x20000224

0800ba4c <malloc>:
 800ba4c:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <malloc+0xc>)
 800ba4e:	4601      	mov	r1, r0
 800ba50:	6818      	ldr	r0, [r3, #0]
 800ba52:	f000 bbef 	b.w	800c234 <_malloc_r>
 800ba56:	bf00      	nop
 800ba58:	200000d0 	.word	0x200000d0

0800ba5c <memcpy>:
 800ba5c:	440a      	add	r2, r1
 800ba5e:	4291      	cmp	r1, r2
 800ba60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba64:	d100      	bne.n	800ba68 <memcpy+0xc>
 800ba66:	4770      	bx	lr
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba72:	4291      	cmp	r1, r2
 800ba74:	d1f9      	bne.n	800ba6a <memcpy+0xe>
 800ba76:	bd10      	pop	{r4, pc}

0800ba78 <_Balloc>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	b976      	cbnz	r6, 800baa0 <_Balloc+0x28>
 800ba82:	2010      	movs	r0, #16
 800ba84:	f7ff ffe2 	bl	800ba4c <malloc>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba8c:	b920      	cbnz	r0, 800ba98 <_Balloc+0x20>
 800ba8e:	4b18      	ldr	r3, [pc, #96]	; (800baf0 <_Balloc+0x78>)
 800ba90:	4818      	ldr	r0, [pc, #96]	; (800baf4 <_Balloc+0x7c>)
 800ba92:	2166      	movs	r1, #102	; 0x66
 800ba94:	f000 fd94 	bl	800c5c0 <__assert_func>
 800ba98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba9c:	6006      	str	r6, [r0, #0]
 800ba9e:	60c6      	str	r6, [r0, #12]
 800baa0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800baa2:	68f3      	ldr	r3, [r6, #12]
 800baa4:	b183      	cbz	r3, 800bac8 <_Balloc+0x50>
 800baa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baae:	b9b8      	cbnz	r0, 800bae0 <_Balloc+0x68>
 800bab0:	2101      	movs	r1, #1
 800bab2:	fa01 f605 	lsl.w	r6, r1, r5
 800bab6:	1d72      	adds	r2, r6, #5
 800bab8:	0092      	lsls	r2, r2, #2
 800baba:	4620      	mov	r0, r4
 800babc:	f000 fb5a 	bl	800c174 <_calloc_r>
 800bac0:	b160      	cbz	r0, 800badc <_Balloc+0x64>
 800bac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bac6:	e00e      	b.n	800bae6 <_Balloc+0x6e>
 800bac8:	2221      	movs	r2, #33	; 0x21
 800baca:	2104      	movs	r1, #4
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 fb51 	bl	800c174 <_calloc_r>
 800bad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad4:	60f0      	str	r0, [r6, #12]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e4      	bne.n	800baa6 <_Balloc+0x2e>
 800badc:	2000      	movs	r0, #0
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	6802      	ldr	r2, [r0, #0]
 800bae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bae6:	2300      	movs	r3, #0
 800bae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baec:	e7f7      	b.n	800bade <_Balloc+0x66>
 800baee:	bf00      	nop
 800baf0:	0800d59d 	.word	0x0800d59d
 800baf4:	0800d624 	.word	0x0800d624

0800baf8 <_Bfree>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bafc:	4605      	mov	r5, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	b976      	cbnz	r6, 800bb20 <_Bfree+0x28>
 800bb02:	2010      	movs	r0, #16
 800bb04:	f7ff ffa2 	bl	800ba4c <malloc>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	6268      	str	r0, [r5, #36]	; 0x24
 800bb0c:	b920      	cbnz	r0, 800bb18 <_Bfree+0x20>
 800bb0e:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <_Bfree+0x3c>)
 800bb10:	4809      	ldr	r0, [pc, #36]	; (800bb38 <_Bfree+0x40>)
 800bb12:	218a      	movs	r1, #138	; 0x8a
 800bb14:	f000 fd54 	bl	800c5c0 <__assert_func>
 800bb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb1c:	6006      	str	r6, [r0, #0]
 800bb1e:	60c6      	str	r6, [r0, #12]
 800bb20:	b13c      	cbz	r4, 800bb32 <_Bfree+0x3a>
 800bb22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb24:	6862      	ldr	r2, [r4, #4]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb2c:	6021      	str	r1, [r4, #0]
 800bb2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	0800d59d 	.word	0x0800d59d
 800bb38:	0800d624 	.word	0x0800d624

0800bb3c <__multadd>:
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	690e      	ldr	r6, [r1, #16]
 800bb42:	4607      	mov	r7, r0
 800bb44:	4698      	mov	r8, r3
 800bb46:	460c      	mov	r4, r1
 800bb48:	f101 0014 	add.w	r0, r1, #20
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	6805      	ldr	r5, [r0, #0]
 800bb50:	b2a9      	uxth	r1, r5
 800bb52:	fb02 8101 	mla	r1, r2, r1, r8
 800bb56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bb5a:	0c2d      	lsrs	r5, r5, #16
 800bb5c:	fb02 c505 	mla	r5, r2, r5, ip
 800bb60:	b289      	uxth	r1, r1
 800bb62:	3301      	adds	r3, #1
 800bb64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bb68:	429e      	cmp	r6, r3
 800bb6a:	f840 1b04 	str.w	r1, [r0], #4
 800bb6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb72:	dcec      	bgt.n	800bb4e <__multadd+0x12>
 800bb74:	f1b8 0f00 	cmp.w	r8, #0
 800bb78:	d022      	beq.n	800bbc0 <__multadd+0x84>
 800bb7a:	68a3      	ldr	r3, [r4, #8]
 800bb7c:	42b3      	cmp	r3, r6
 800bb7e:	dc19      	bgt.n	800bbb4 <__multadd+0x78>
 800bb80:	6861      	ldr	r1, [r4, #4]
 800bb82:	4638      	mov	r0, r7
 800bb84:	3101      	adds	r1, #1
 800bb86:	f7ff ff77 	bl	800ba78 <_Balloc>
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	b928      	cbnz	r0, 800bb9a <__multadd+0x5e>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	4b0d      	ldr	r3, [pc, #52]	; (800bbc8 <__multadd+0x8c>)
 800bb92:	480e      	ldr	r0, [pc, #56]	; (800bbcc <__multadd+0x90>)
 800bb94:	21b5      	movs	r1, #181	; 0xb5
 800bb96:	f000 fd13 	bl	800c5c0 <__assert_func>
 800bb9a:	6922      	ldr	r2, [r4, #16]
 800bb9c:	3202      	adds	r2, #2
 800bb9e:	f104 010c 	add.w	r1, r4, #12
 800bba2:	0092      	lsls	r2, r2, #2
 800bba4:	300c      	adds	r0, #12
 800bba6:	f7ff ff59 	bl	800ba5c <memcpy>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7ff ffa3 	bl	800baf8 <_Bfree>
 800bbb2:	462c      	mov	r4, r5
 800bbb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bbb8:	3601      	adds	r6, #1
 800bbba:	f8c3 8014 	str.w	r8, [r3, #20]
 800bbbe:	6126      	str	r6, [r4, #16]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc6:	bf00      	nop
 800bbc8:	0800d613 	.word	0x0800d613
 800bbcc:	0800d624 	.word	0x0800d624

0800bbd0 <__hi0bits>:
 800bbd0:	0c03      	lsrs	r3, r0, #16
 800bbd2:	041b      	lsls	r3, r3, #16
 800bbd4:	b9d3      	cbnz	r3, 800bc0c <__hi0bits+0x3c>
 800bbd6:	0400      	lsls	r0, r0, #16
 800bbd8:	2310      	movs	r3, #16
 800bbda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbde:	bf04      	itt	eq
 800bbe0:	0200      	lsleq	r0, r0, #8
 800bbe2:	3308      	addeq	r3, #8
 800bbe4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbe8:	bf04      	itt	eq
 800bbea:	0100      	lsleq	r0, r0, #4
 800bbec:	3304      	addeq	r3, #4
 800bbee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbf2:	bf04      	itt	eq
 800bbf4:	0080      	lsleq	r0, r0, #2
 800bbf6:	3302      	addeq	r3, #2
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	db05      	blt.n	800bc08 <__hi0bits+0x38>
 800bbfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc00:	f103 0301 	add.w	r3, r3, #1
 800bc04:	bf08      	it	eq
 800bc06:	2320      	moveq	r3, #32
 800bc08:	4618      	mov	r0, r3
 800bc0a:	4770      	bx	lr
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	e7e4      	b.n	800bbda <__hi0bits+0xa>

0800bc10 <__lo0bits>:
 800bc10:	6803      	ldr	r3, [r0, #0]
 800bc12:	f013 0207 	ands.w	r2, r3, #7
 800bc16:	4601      	mov	r1, r0
 800bc18:	d00b      	beq.n	800bc32 <__lo0bits+0x22>
 800bc1a:	07da      	lsls	r2, r3, #31
 800bc1c:	d424      	bmi.n	800bc68 <__lo0bits+0x58>
 800bc1e:	0798      	lsls	r0, r3, #30
 800bc20:	bf49      	itett	mi
 800bc22:	085b      	lsrmi	r3, r3, #1
 800bc24:	089b      	lsrpl	r3, r3, #2
 800bc26:	2001      	movmi	r0, #1
 800bc28:	600b      	strmi	r3, [r1, #0]
 800bc2a:	bf5c      	itt	pl
 800bc2c:	600b      	strpl	r3, [r1, #0]
 800bc2e:	2002      	movpl	r0, #2
 800bc30:	4770      	bx	lr
 800bc32:	b298      	uxth	r0, r3
 800bc34:	b9b0      	cbnz	r0, 800bc64 <__lo0bits+0x54>
 800bc36:	0c1b      	lsrs	r3, r3, #16
 800bc38:	2010      	movs	r0, #16
 800bc3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc3e:	bf04      	itt	eq
 800bc40:	0a1b      	lsreq	r3, r3, #8
 800bc42:	3008      	addeq	r0, #8
 800bc44:	071a      	lsls	r2, r3, #28
 800bc46:	bf04      	itt	eq
 800bc48:	091b      	lsreq	r3, r3, #4
 800bc4a:	3004      	addeq	r0, #4
 800bc4c:	079a      	lsls	r2, r3, #30
 800bc4e:	bf04      	itt	eq
 800bc50:	089b      	lsreq	r3, r3, #2
 800bc52:	3002      	addeq	r0, #2
 800bc54:	07da      	lsls	r2, r3, #31
 800bc56:	d403      	bmi.n	800bc60 <__lo0bits+0x50>
 800bc58:	085b      	lsrs	r3, r3, #1
 800bc5a:	f100 0001 	add.w	r0, r0, #1
 800bc5e:	d005      	beq.n	800bc6c <__lo0bits+0x5c>
 800bc60:	600b      	str	r3, [r1, #0]
 800bc62:	4770      	bx	lr
 800bc64:	4610      	mov	r0, r2
 800bc66:	e7e8      	b.n	800bc3a <__lo0bits+0x2a>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	4770      	bx	lr
 800bc6c:	2020      	movs	r0, #32
 800bc6e:	4770      	bx	lr

0800bc70 <__i2b>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	460c      	mov	r4, r1
 800bc74:	2101      	movs	r1, #1
 800bc76:	f7ff feff 	bl	800ba78 <_Balloc>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	b928      	cbnz	r0, 800bc8a <__i2b+0x1a>
 800bc7e:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <__i2b+0x24>)
 800bc80:	4805      	ldr	r0, [pc, #20]	; (800bc98 <__i2b+0x28>)
 800bc82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc86:	f000 fc9b 	bl	800c5c0 <__assert_func>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	6144      	str	r4, [r0, #20]
 800bc8e:	6103      	str	r3, [r0, #16]
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	bf00      	nop
 800bc94:	0800d613 	.word	0x0800d613
 800bc98:	0800d624 	.word	0x0800d624

0800bc9c <__multiply>:
 800bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	4614      	mov	r4, r2
 800bca2:	690a      	ldr	r2, [r1, #16]
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	bfb8      	it	lt
 800bcaa:	460b      	movlt	r3, r1
 800bcac:	460d      	mov	r5, r1
 800bcae:	bfbc      	itt	lt
 800bcb0:	4625      	movlt	r5, r4
 800bcb2:	461c      	movlt	r4, r3
 800bcb4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bcb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bcbc:	68ab      	ldr	r3, [r5, #8]
 800bcbe:	6869      	ldr	r1, [r5, #4]
 800bcc0:	eb0a 0709 	add.w	r7, sl, r9
 800bcc4:	42bb      	cmp	r3, r7
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	bfb8      	it	lt
 800bcca:	3101      	addlt	r1, #1
 800bccc:	f7ff fed4 	bl	800ba78 <_Balloc>
 800bcd0:	b930      	cbnz	r0, 800bce0 <__multiply+0x44>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	4b42      	ldr	r3, [pc, #264]	; (800bde0 <__multiply+0x144>)
 800bcd6:	4843      	ldr	r0, [pc, #268]	; (800bde4 <__multiply+0x148>)
 800bcd8:	f240 115d 	movw	r1, #349	; 0x15d
 800bcdc:	f000 fc70 	bl	800c5c0 <__assert_func>
 800bce0:	f100 0614 	add.w	r6, r0, #20
 800bce4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bce8:	4633      	mov	r3, r6
 800bcea:	2200      	movs	r2, #0
 800bcec:	4543      	cmp	r3, r8
 800bcee:	d31e      	bcc.n	800bd2e <__multiply+0x92>
 800bcf0:	f105 0c14 	add.w	ip, r5, #20
 800bcf4:	f104 0314 	add.w	r3, r4, #20
 800bcf8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bcfc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bd00:	9202      	str	r2, [sp, #8]
 800bd02:	ebac 0205 	sub.w	r2, ip, r5
 800bd06:	3a15      	subs	r2, #21
 800bd08:	f022 0203 	bic.w	r2, r2, #3
 800bd0c:	3204      	adds	r2, #4
 800bd0e:	f105 0115 	add.w	r1, r5, #21
 800bd12:	458c      	cmp	ip, r1
 800bd14:	bf38      	it	cc
 800bd16:	2204      	movcc	r2, #4
 800bd18:	9201      	str	r2, [sp, #4]
 800bd1a:	9a02      	ldr	r2, [sp, #8]
 800bd1c:	9303      	str	r3, [sp, #12]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d808      	bhi.n	800bd34 <__multiply+0x98>
 800bd22:	2f00      	cmp	r7, #0
 800bd24:	dc55      	bgt.n	800bdd2 <__multiply+0x136>
 800bd26:	6107      	str	r7, [r0, #16]
 800bd28:	b005      	add	sp, #20
 800bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2e:	f843 2b04 	str.w	r2, [r3], #4
 800bd32:	e7db      	b.n	800bcec <__multiply+0x50>
 800bd34:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd38:	f1ba 0f00 	cmp.w	sl, #0
 800bd3c:	d020      	beq.n	800bd80 <__multiply+0xe4>
 800bd3e:	f105 0e14 	add.w	lr, r5, #20
 800bd42:	46b1      	mov	r9, r6
 800bd44:	2200      	movs	r2, #0
 800bd46:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd4a:	f8d9 b000 	ldr.w	fp, [r9]
 800bd4e:	b2a1      	uxth	r1, r4
 800bd50:	fa1f fb8b 	uxth.w	fp, fp
 800bd54:	fb0a b101 	mla	r1, sl, r1, fp
 800bd58:	4411      	add	r1, r2
 800bd5a:	f8d9 2000 	ldr.w	r2, [r9]
 800bd5e:	0c24      	lsrs	r4, r4, #16
 800bd60:	0c12      	lsrs	r2, r2, #16
 800bd62:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd6a:	b289      	uxth	r1, r1
 800bd6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd70:	45f4      	cmp	ip, lr
 800bd72:	f849 1b04 	str.w	r1, [r9], #4
 800bd76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd7a:	d8e4      	bhi.n	800bd46 <__multiply+0xaa>
 800bd7c:	9901      	ldr	r1, [sp, #4]
 800bd7e:	5072      	str	r2, [r6, r1]
 800bd80:	9a03      	ldr	r2, [sp, #12]
 800bd82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd86:	3304      	adds	r3, #4
 800bd88:	f1b9 0f00 	cmp.w	r9, #0
 800bd8c:	d01f      	beq.n	800bdce <__multiply+0x132>
 800bd8e:	6834      	ldr	r4, [r6, #0]
 800bd90:	f105 0114 	add.w	r1, r5, #20
 800bd94:	46b6      	mov	lr, r6
 800bd96:	f04f 0a00 	mov.w	sl, #0
 800bd9a:	880a      	ldrh	r2, [r1, #0]
 800bd9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bda0:	fb09 b202 	mla	r2, r9, r2, fp
 800bda4:	4492      	add	sl, r2
 800bda6:	b2a4      	uxth	r4, r4
 800bda8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bdac:	f84e 4b04 	str.w	r4, [lr], #4
 800bdb0:	f851 4b04 	ldr.w	r4, [r1], #4
 800bdb4:	f8be 2000 	ldrh.w	r2, [lr]
 800bdb8:	0c24      	lsrs	r4, r4, #16
 800bdba:	fb09 2404 	mla	r4, r9, r4, r2
 800bdbe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bdc2:	458c      	cmp	ip, r1
 800bdc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bdc8:	d8e7      	bhi.n	800bd9a <__multiply+0xfe>
 800bdca:	9a01      	ldr	r2, [sp, #4]
 800bdcc:	50b4      	str	r4, [r6, r2]
 800bdce:	3604      	adds	r6, #4
 800bdd0:	e7a3      	b.n	800bd1a <__multiply+0x7e>
 800bdd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1a5      	bne.n	800bd26 <__multiply+0x8a>
 800bdda:	3f01      	subs	r7, #1
 800bddc:	e7a1      	b.n	800bd22 <__multiply+0x86>
 800bdde:	bf00      	nop
 800bde0:	0800d613 	.word	0x0800d613
 800bde4:	0800d624 	.word	0x0800d624

0800bde8 <__pow5mult>:
 800bde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdec:	4615      	mov	r5, r2
 800bdee:	f012 0203 	ands.w	r2, r2, #3
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	460f      	mov	r7, r1
 800bdf6:	d007      	beq.n	800be08 <__pow5mult+0x20>
 800bdf8:	4c25      	ldr	r4, [pc, #148]	; (800be90 <__pow5mult+0xa8>)
 800bdfa:	3a01      	subs	r2, #1
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be02:	f7ff fe9b 	bl	800bb3c <__multadd>
 800be06:	4607      	mov	r7, r0
 800be08:	10ad      	asrs	r5, r5, #2
 800be0a:	d03d      	beq.n	800be88 <__pow5mult+0xa0>
 800be0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be0e:	b97c      	cbnz	r4, 800be30 <__pow5mult+0x48>
 800be10:	2010      	movs	r0, #16
 800be12:	f7ff fe1b 	bl	800ba4c <malloc>
 800be16:	4602      	mov	r2, r0
 800be18:	6270      	str	r0, [r6, #36]	; 0x24
 800be1a:	b928      	cbnz	r0, 800be28 <__pow5mult+0x40>
 800be1c:	4b1d      	ldr	r3, [pc, #116]	; (800be94 <__pow5mult+0xac>)
 800be1e:	481e      	ldr	r0, [pc, #120]	; (800be98 <__pow5mult+0xb0>)
 800be20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be24:	f000 fbcc 	bl	800c5c0 <__assert_func>
 800be28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be2c:	6004      	str	r4, [r0, #0]
 800be2e:	60c4      	str	r4, [r0, #12]
 800be30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be38:	b94c      	cbnz	r4, 800be4e <__pow5mult+0x66>
 800be3a:	f240 2171 	movw	r1, #625	; 0x271
 800be3e:	4630      	mov	r0, r6
 800be40:	f7ff ff16 	bl	800bc70 <__i2b>
 800be44:	2300      	movs	r3, #0
 800be46:	f8c8 0008 	str.w	r0, [r8, #8]
 800be4a:	4604      	mov	r4, r0
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	f04f 0900 	mov.w	r9, #0
 800be52:	07eb      	lsls	r3, r5, #31
 800be54:	d50a      	bpl.n	800be6c <__pow5mult+0x84>
 800be56:	4639      	mov	r1, r7
 800be58:	4622      	mov	r2, r4
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7ff ff1e 	bl	800bc9c <__multiply>
 800be60:	4639      	mov	r1, r7
 800be62:	4680      	mov	r8, r0
 800be64:	4630      	mov	r0, r6
 800be66:	f7ff fe47 	bl	800baf8 <_Bfree>
 800be6a:	4647      	mov	r7, r8
 800be6c:	106d      	asrs	r5, r5, #1
 800be6e:	d00b      	beq.n	800be88 <__pow5mult+0xa0>
 800be70:	6820      	ldr	r0, [r4, #0]
 800be72:	b938      	cbnz	r0, 800be84 <__pow5mult+0x9c>
 800be74:	4622      	mov	r2, r4
 800be76:	4621      	mov	r1, r4
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ff0f 	bl	800bc9c <__multiply>
 800be7e:	6020      	str	r0, [r4, #0]
 800be80:	f8c0 9000 	str.w	r9, [r0]
 800be84:	4604      	mov	r4, r0
 800be86:	e7e4      	b.n	800be52 <__pow5mult+0x6a>
 800be88:	4638      	mov	r0, r7
 800be8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8e:	bf00      	nop
 800be90:	0800d778 	.word	0x0800d778
 800be94:	0800d59d 	.word	0x0800d59d
 800be98:	0800d624 	.word	0x0800d624

0800be9c <__lshift>:
 800be9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea0:	460c      	mov	r4, r1
 800bea2:	6849      	ldr	r1, [r1, #4]
 800bea4:	6923      	ldr	r3, [r4, #16]
 800bea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beaa:	68a3      	ldr	r3, [r4, #8]
 800beac:	4607      	mov	r7, r0
 800beae:	4691      	mov	r9, r2
 800beb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beb4:	f108 0601 	add.w	r6, r8, #1
 800beb8:	42b3      	cmp	r3, r6
 800beba:	db0b      	blt.n	800bed4 <__lshift+0x38>
 800bebc:	4638      	mov	r0, r7
 800bebe:	f7ff fddb 	bl	800ba78 <_Balloc>
 800bec2:	4605      	mov	r5, r0
 800bec4:	b948      	cbnz	r0, 800beda <__lshift+0x3e>
 800bec6:	4602      	mov	r2, r0
 800bec8:	4b28      	ldr	r3, [pc, #160]	; (800bf6c <__lshift+0xd0>)
 800beca:	4829      	ldr	r0, [pc, #164]	; (800bf70 <__lshift+0xd4>)
 800becc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bed0:	f000 fb76 	bl	800c5c0 <__assert_func>
 800bed4:	3101      	adds	r1, #1
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	e7ee      	b.n	800beb8 <__lshift+0x1c>
 800beda:	2300      	movs	r3, #0
 800bedc:	f100 0114 	add.w	r1, r0, #20
 800bee0:	f100 0210 	add.w	r2, r0, #16
 800bee4:	4618      	mov	r0, r3
 800bee6:	4553      	cmp	r3, sl
 800bee8:	db33      	blt.n	800bf52 <__lshift+0xb6>
 800beea:	6920      	ldr	r0, [r4, #16]
 800beec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bef0:	f104 0314 	add.w	r3, r4, #20
 800bef4:	f019 091f 	ands.w	r9, r9, #31
 800bef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800befc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf00:	d02b      	beq.n	800bf5a <__lshift+0xbe>
 800bf02:	f1c9 0e20 	rsb	lr, r9, #32
 800bf06:	468a      	mov	sl, r1
 800bf08:	2200      	movs	r2, #0
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	fa00 f009 	lsl.w	r0, r0, r9
 800bf10:	4302      	orrs	r2, r0
 800bf12:	f84a 2b04 	str.w	r2, [sl], #4
 800bf16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1a:	459c      	cmp	ip, r3
 800bf1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf20:	d8f3      	bhi.n	800bf0a <__lshift+0x6e>
 800bf22:	ebac 0304 	sub.w	r3, ip, r4
 800bf26:	3b15      	subs	r3, #21
 800bf28:	f023 0303 	bic.w	r3, r3, #3
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	f104 0015 	add.w	r0, r4, #21
 800bf32:	4584      	cmp	ip, r0
 800bf34:	bf38      	it	cc
 800bf36:	2304      	movcc	r3, #4
 800bf38:	50ca      	str	r2, [r1, r3]
 800bf3a:	b10a      	cbz	r2, 800bf40 <__lshift+0xa4>
 800bf3c:	f108 0602 	add.w	r6, r8, #2
 800bf40:	3e01      	subs	r6, #1
 800bf42:	4638      	mov	r0, r7
 800bf44:	612e      	str	r6, [r5, #16]
 800bf46:	4621      	mov	r1, r4
 800bf48:	f7ff fdd6 	bl	800baf8 <_Bfree>
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf52:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf56:	3301      	adds	r3, #1
 800bf58:	e7c5      	b.n	800bee6 <__lshift+0x4a>
 800bf5a:	3904      	subs	r1, #4
 800bf5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf60:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf64:	459c      	cmp	ip, r3
 800bf66:	d8f9      	bhi.n	800bf5c <__lshift+0xc0>
 800bf68:	e7ea      	b.n	800bf40 <__lshift+0xa4>
 800bf6a:	bf00      	nop
 800bf6c:	0800d613 	.word	0x0800d613
 800bf70:	0800d624 	.word	0x0800d624

0800bf74 <__mcmp>:
 800bf74:	b530      	push	{r4, r5, lr}
 800bf76:	6902      	ldr	r2, [r0, #16]
 800bf78:	690c      	ldr	r4, [r1, #16]
 800bf7a:	1b12      	subs	r2, r2, r4
 800bf7c:	d10e      	bne.n	800bf9c <__mcmp+0x28>
 800bf7e:	f100 0314 	add.w	r3, r0, #20
 800bf82:	3114      	adds	r1, #20
 800bf84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf94:	42a5      	cmp	r5, r4
 800bf96:	d003      	beq.n	800bfa0 <__mcmp+0x2c>
 800bf98:	d305      	bcc.n	800bfa6 <__mcmp+0x32>
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	bd30      	pop	{r4, r5, pc}
 800bfa0:	4283      	cmp	r3, r0
 800bfa2:	d3f3      	bcc.n	800bf8c <__mcmp+0x18>
 800bfa4:	e7fa      	b.n	800bf9c <__mcmp+0x28>
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	e7f7      	b.n	800bf9c <__mcmp+0x28>

0800bfac <__mdiff>:
 800bfac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4617      	mov	r7, r2
 800bfba:	f7ff ffdb 	bl	800bf74 <__mcmp>
 800bfbe:	1e05      	subs	r5, r0, #0
 800bfc0:	d110      	bne.n	800bfe4 <__mdiff+0x38>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff fd57 	bl	800ba78 <_Balloc>
 800bfca:	b930      	cbnz	r0, 800bfda <__mdiff+0x2e>
 800bfcc:	4b39      	ldr	r3, [pc, #228]	; (800c0b4 <__mdiff+0x108>)
 800bfce:	4602      	mov	r2, r0
 800bfd0:	f240 2132 	movw	r1, #562	; 0x232
 800bfd4:	4838      	ldr	r0, [pc, #224]	; (800c0b8 <__mdiff+0x10c>)
 800bfd6:	f000 faf3 	bl	800c5c0 <__assert_func>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe4:	bfa4      	itt	ge
 800bfe6:	463b      	movge	r3, r7
 800bfe8:	4627      	movge	r7, r4
 800bfea:	4630      	mov	r0, r6
 800bfec:	6879      	ldr	r1, [r7, #4]
 800bfee:	bfa6      	itte	ge
 800bff0:	461c      	movge	r4, r3
 800bff2:	2500      	movge	r5, #0
 800bff4:	2501      	movlt	r5, #1
 800bff6:	f7ff fd3f 	bl	800ba78 <_Balloc>
 800bffa:	b920      	cbnz	r0, 800c006 <__mdiff+0x5a>
 800bffc:	4b2d      	ldr	r3, [pc, #180]	; (800c0b4 <__mdiff+0x108>)
 800bffe:	4602      	mov	r2, r0
 800c000:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c004:	e7e6      	b.n	800bfd4 <__mdiff+0x28>
 800c006:	693e      	ldr	r6, [r7, #16]
 800c008:	60c5      	str	r5, [r0, #12]
 800c00a:	6925      	ldr	r5, [r4, #16]
 800c00c:	f107 0114 	add.w	r1, r7, #20
 800c010:	f104 0914 	add.w	r9, r4, #20
 800c014:	f100 0e14 	add.w	lr, r0, #20
 800c018:	f107 0210 	add.w	r2, r7, #16
 800c01c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c020:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c024:	46f2      	mov	sl, lr
 800c026:	2700      	movs	r7, #0
 800c028:	f859 3b04 	ldr.w	r3, [r9], #4
 800c02c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c030:	fa1f f883 	uxth.w	r8, r3
 800c034:	fa17 f78b 	uxtah	r7, r7, fp
 800c038:	0c1b      	lsrs	r3, r3, #16
 800c03a:	eba7 0808 	sub.w	r8, r7, r8
 800c03e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c046:	fa1f f888 	uxth.w	r8, r8
 800c04a:	141f      	asrs	r7, r3, #16
 800c04c:	454d      	cmp	r5, r9
 800c04e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c052:	f84a 3b04 	str.w	r3, [sl], #4
 800c056:	d8e7      	bhi.n	800c028 <__mdiff+0x7c>
 800c058:	1b2b      	subs	r3, r5, r4
 800c05a:	3b15      	subs	r3, #21
 800c05c:	f023 0303 	bic.w	r3, r3, #3
 800c060:	3304      	adds	r3, #4
 800c062:	3415      	adds	r4, #21
 800c064:	42a5      	cmp	r5, r4
 800c066:	bf38      	it	cc
 800c068:	2304      	movcc	r3, #4
 800c06a:	4419      	add	r1, r3
 800c06c:	4473      	add	r3, lr
 800c06e:	469e      	mov	lr, r3
 800c070:	460d      	mov	r5, r1
 800c072:	4565      	cmp	r5, ip
 800c074:	d30e      	bcc.n	800c094 <__mdiff+0xe8>
 800c076:	f10c 0203 	add.w	r2, ip, #3
 800c07a:	1a52      	subs	r2, r2, r1
 800c07c:	f022 0203 	bic.w	r2, r2, #3
 800c080:	3903      	subs	r1, #3
 800c082:	458c      	cmp	ip, r1
 800c084:	bf38      	it	cc
 800c086:	2200      	movcc	r2, #0
 800c088:	441a      	add	r2, r3
 800c08a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c08e:	b17b      	cbz	r3, 800c0b0 <__mdiff+0x104>
 800c090:	6106      	str	r6, [r0, #16]
 800c092:	e7a5      	b.n	800bfe0 <__mdiff+0x34>
 800c094:	f855 8b04 	ldr.w	r8, [r5], #4
 800c098:	fa17 f488 	uxtah	r4, r7, r8
 800c09c:	1422      	asrs	r2, r4, #16
 800c09e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c0a2:	b2a4      	uxth	r4, r4
 800c0a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c0a8:	f84e 4b04 	str.w	r4, [lr], #4
 800c0ac:	1417      	asrs	r7, r2, #16
 800c0ae:	e7e0      	b.n	800c072 <__mdiff+0xc6>
 800c0b0:	3e01      	subs	r6, #1
 800c0b2:	e7ea      	b.n	800c08a <__mdiff+0xde>
 800c0b4:	0800d613 	.word	0x0800d613
 800c0b8:	0800d624 	.word	0x0800d624

0800c0bc <__d2b>:
 800c0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	4689      	mov	r9, r1
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	ec57 6b10 	vmov	r6, r7, d0
 800c0c8:	4690      	mov	r8, r2
 800c0ca:	f7ff fcd5 	bl	800ba78 <_Balloc>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	b930      	cbnz	r0, 800c0e0 <__d2b+0x24>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	4b25      	ldr	r3, [pc, #148]	; (800c16c <__d2b+0xb0>)
 800c0d6:	4826      	ldr	r0, [pc, #152]	; (800c170 <__d2b+0xb4>)
 800c0d8:	f240 310a 	movw	r1, #778	; 0x30a
 800c0dc:	f000 fa70 	bl	800c5c0 <__assert_func>
 800c0e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0e8:	bb35      	cbnz	r5, 800c138 <__d2b+0x7c>
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	d028      	beq.n	800c142 <__d2b+0x86>
 800c0f0:	4668      	mov	r0, sp
 800c0f2:	9600      	str	r6, [sp, #0]
 800c0f4:	f7ff fd8c 	bl	800bc10 <__lo0bits>
 800c0f8:	9900      	ldr	r1, [sp, #0]
 800c0fa:	b300      	cbz	r0, 800c13e <__d2b+0x82>
 800c0fc:	9a01      	ldr	r2, [sp, #4]
 800c0fe:	f1c0 0320 	rsb	r3, r0, #32
 800c102:	fa02 f303 	lsl.w	r3, r2, r3
 800c106:	430b      	orrs	r3, r1
 800c108:	40c2      	lsrs	r2, r0
 800c10a:	6163      	str	r3, [r4, #20]
 800c10c:	9201      	str	r2, [sp, #4]
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	61a3      	str	r3, [r4, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	bf14      	ite	ne
 800c116:	2202      	movne	r2, #2
 800c118:	2201      	moveq	r2, #1
 800c11a:	6122      	str	r2, [r4, #16]
 800c11c:	b1d5      	cbz	r5, 800c154 <__d2b+0x98>
 800c11e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c122:	4405      	add	r5, r0
 800c124:	f8c9 5000 	str.w	r5, [r9]
 800c128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c12c:	f8c8 0000 	str.w	r0, [r8]
 800c130:	4620      	mov	r0, r4
 800c132:	b003      	add	sp, #12
 800c134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c13c:	e7d5      	b.n	800c0ea <__d2b+0x2e>
 800c13e:	6161      	str	r1, [r4, #20]
 800c140:	e7e5      	b.n	800c10e <__d2b+0x52>
 800c142:	a801      	add	r0, sp, #4
 800c144:	f7ff fd64 	bl	800bc10 <__lo0bits>
 800c148:	9b01      	ldr	r3, [sp, #4]
 800c14a:	6163      	str	r3, [r4, #20]
 800c14c:	2201      	movs	r2, #1
 800c14e:	6122      	str	r2, [r4, #16]
 800c150:	3020      	adds	r0, #32
 800c152:	e7e3      	b.n	800c11c <__d2b+0x60>
 800c154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c15c:	f8c9 0000 	str.w	r0, [r9]
 800c160:	6918      	ldr	r0, [r3, #16]
 800c162:	f7ff fd35 	bl	800bbd0 <__hi0bits>
 800c166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c16a:	e7df      	b.n	800c12c <__d2b+0x70>
 800c16c:	0800d613 	.word	0x0800d613
 800c170:	0800d624 	.word	0x0800d624

0800c174 <_calloc_r>:
 800c174:	b513      	push	{r0, r1, r4, lr}
 800c176:	434a      	muls	r2, r1
 800c178:	4611      	mov	r1, r2
 800c17a:	9201      	str	r2, [sp, #4]
 800c17c:	f000 f85a 	bl	800c234 <_malloc_r>
 800c180:	4604      	mov	r4, r0
 800c182:	b118      	cbz	r0, 800c18c <_calloc_r+0x18>
 800c184:	9a01      	ldr	r2, [sp, #4]
 800c186:	2100      	movs	r1, #0
 800c188:	f7fe f9e2 	bl	800a550 <memset>
 800c18c:	4620      	mov	r0, r4
 800c18e:	b002      	add	sp, #8
 800c190:	bd10      	pop	{r4, pc}
	...

0800c194 <_free_r>:
 800c194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c196:	2900      	cmp	r1, #0
 800c198:	d048      	beq.n	800c22c <_free_r+0x98>
 800c19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c19e:	9001      	str	r0, [sp, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c1a6:	bfb8      	it	lt
 800c1a8:	18e4      	addlt	r4, r4, r3
 800c1aa:	f000 fa65 	bl	800c678 <__malloc_lock>
 800c1ae:	4a20      	ldr	r2, [pc, #128]	; (800c230 <_free_r+0x9c>)
 800c1b0:	9801      	ldr	r0, [sp, #4]
 800c1b2:	6813      	ldr	r3, [r2, #0]
 800c1b4:	4615      	mov	r5, r2
 800c1b6:	b933      	cbnz	r3, 800c1c6 <_free_r+0x32>
 800c1b8:	6063      	str	r3, [r4, #4]
 800c1ba:	6014      	str	r4, [r2, #0]
 800c1bc:	b003      	add	sp, #12
 800c1be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1c2:	f000 ba5f 	b.w	800c684 <__malloc_unlock>
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	d90b      	bls.n	800c1e2 <_free_r+0x4e>
 800c1ca:	6821      	ldr	r1, [r4, #0]
 800c1cc:	1862      	adds	r2, r4, r1
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	bf04      	itt	eq
 800c1d2:	681a      	ldreq	r2, [r3, #0]
 800c1d4:	685b      	ldreq	r3, [r3, #4]
 800c1d6:	6063      	str	r3, [r4, #4]
 800c1d8:	bf04      	itt	eq
 800c1da:	1852      	addeq	r2, r2, r1
 800c1dc:	6022      	streq	r2, [r4, #0]
 800c1de:	602c      	str	r4, [r5, #0]
 800c1e0:	e7ec      	b.n	800c1bc <_free_r+0x28>
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	b10b      	cbz	r3, 800c1ec <_free_r+0x58>
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	d9fa      	bls.n	800c1e2 <_free_r+0x4e>
 800c1ec:	6811      	ldr	r1, [r2, #0]
 800c1ee:	1855      	adds	r5, r2, r1
 800c1f0:	42a5      	cmp	r5, r4
 800c1f2:	d10b      	bne.n	800c20c <_free_r+0x78>
 800c1f4:	6824      	ldr	r4, [r4, #0]
 800c1f6:	4421      	add	r1, r4
 800c1f8:	1854      	adds	r4, r2, r1
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	6011      	str	r1, [r2, #0]
 800c1fe:	d1dd      	bne.n	800c1bc <_free_r+0x28>
 800c200:	681c      	ldr	r4, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	6053      	str	r3, [r2, #4]
 800c206:	4421      	add	r1, r4
 800c208:	6011      	str	r1, [r2, #0]
 800c20a:	e7d7      	b.n	800c1bc <_free_r+0x28>
 800c20c:	d902      	bls.n	800c214 <_free_r+0x80>
 800c20e:	230c      	movs	r3, #12
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	e7d3      	b.n	800c1bc <_free_r+0x28>
 800c214:	6825      	ldr	r5, [r4, #0]
 800c216:	1961      	adds	r1, r4, r5
 800c218:	428b      	cmp	r3, r1
 800c21a:	bf04      	itt	eq
 800c21c:	6819      	ldreq	r1, [r3, #0]
 800c21e:	685b      	ldreq	r3, [r3, #4]
 800c220:	6063      	str	r3, [r4, #4]
 800c222:	bf04      	itt	eq
 800c224:	1949      	addeq	r1, r1, r5
 800c226:	6021      	streq	r1, [r4, #0]
 800c228:	6054      	str	r4, [r2, #4]
 800c22a:	e7c7      	b.n	800c1bc <_free_r+0x28>
 800c22c:	b003      	add	sp, #12
 800c22e:	bd30      	pop	{r4, r5, pc}
 800c230:	20000378 	.word	0x20000378

0800c234 <_malloc_r>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	1ccd      	adds	r5, r1, #3
 800c238:	f025 0503 	bic.w	r5, r5, #3
 800c23c:	3508      	adds	r5, #8
 800c23e:	2d0c      	cmp	r5, #12
 800c240:	bf38      	it	cc
 800c242:	250c      	movcc	r5, #12
 800c244:	2d00      	cmp	r5, #0
 800c246:	4606      	mov	r6, r0
 800c248:	db01      	blt.n	800c24e <_malloc_r+0x1a>
 800c24a:	42a9      	cmp	r1, r5
 800c24c:	d903      	bls.n	800c256 <_malloc_r+0x22>
 800c24e:	230c      	movs	r3, #12
 800c250:	6033      	str	r3, [r6, #0]
 800c252:	2000      	movs	r0, #0
 800c254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c256:	f000 fa0f 	bl	800c678 <__malloc_lock>
 800c25a:	4921      	ldr	r1, [pc, #132]	; (800c2e0 <_malloc_r+0xac>)
 800c25c:	680a      	ldr	r2, [r1, #0]
 800c25e:	4614      	mov	r4, r2
 800c260:	b99c      	cbnz	r4, 800c28a <_malloc_r+0x56>
 800c262:	4f20      	ldr	r7, [pc, #128]	; (800c2e4 <_malloc_r+0xb0>)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	b923      	cbnz	r3, 800c272 <_malloc_r+0x3e>
 800c268:	4621      	mov	r1, r4
 800c26a:	4630      	mov	r0, r6
 800c26c:	f000 f998 	bl	800c5a0 <_sbrk_r>
 800c270:	6038      	str	r0, [r7, #0]
 800c272:	4629      	mov	r1, r5
 800c274:	4630      	mov	r0, r6
 800c276:	f000 f993 	bl	800c5a0 <_sbrk_r>
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	d123      	bne.n	800c2c6 <_malloc_r+0x92>
 800c27e:	230c      	movs	r3, #12
 800c280:	6033      	str	r3, [r6, #0]
 800c282:	4630      	mov	r0, r6
 800c284:	f000 f9fe 	bl	800c684 <__malloc_unlock>
 800c288:	e7e3      	b.n	800c252 <_malloc_r+0x1e>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	1b5b      	subs	r3, r3, r5
 800c28e:	d417      	bmi.n	800c2c0 <_malloc_r+0x8c>
 800c290:	2b0b      	cmp	r3, #11
 800c292:	d903      	bls.n	800c29c <_malloc_r+0x68>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	441c      	add	r4, r3
 800c298:	6025      	str	r5, [r4, #0]
 800c29a:	e004      	b.n	800c2a6 <_malloc_r+0x72>
 800c29c:	6863      	ldr	r3, [r4, #4]
 800c29e:	42a2      	cmp	r2, r4
 800c2a0:	bf0c      	ite	eq
 800c2a2:	600b      	streq	r3, [r1, #0]
 800c2a4:	6053      	strne	r3, [r2, #4]
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f000 f9ec 	bl	800c684 <__malloc_unlock>
 800c2ac:	f104 000b 	add.w	r0, r4, #11
 800c2b0:	1d23      	adds	r3, r4, #4
 800c2b2:	f020 0007 	bic.w	r0, r0, #7
 800c2b6:	1ac2      	subs	r2, r0, r3
 800c2b8:	d0cc      	beq.n	800c254 <_malloc_r+0x20>
 800c2ba:	1a1b      	subs	r3, r3, r0
 800c2bc:	50a3      	str	r3, [r4, r2]
 800c2be:	e7c9      	b.n	800c254 <_malloc_r+0x20>
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	6864      	ldr	r4, [r4, #4]
 800c2c4:	e7cc      	b.n	800c260 <_malloc_r+0x2c>
 800c2c6:	1cc4      	adds	r4, r0, #3
 800c2c8:	f024 0403 	bic.w	r4, r4, #3
 800c2cc:	42a0      	cmp	r0, r4
 800c2ce:	d0e3      	beq.n	800c298 <_malloc_r+0x64>
 800c2d0:	1a21      	subs	r1, r4, r0
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f000 f964 	bl	800c5a0 <_sbrk_r>
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d1dd      	bne.n	800c298 <_malloc_r+0x64>
 800c2dc:	e7cf      	b.n	800c27e <_malloc_r+0x4a>
 800c2de:	bf00      	nop
 800c2e0:	20000378 	.word	0x20000378
 800c2e4:	2000037c 	.word	0x2000037c

0800c2e8 <__ssputs_r>:
 800c2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ec:	688e      	ldr	r6, [r1, #8]
 800c2ee:	429e      	cmp	r6, r3
 800c2f0:	4682      	mov	sl, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	4690      	mov	r8, r2
 800c2f6:	461f      	mov	r7, r3
 800c2f8:	d838      	bhi.n	800c36c <__ssputs_r+0x84>
 800c2fa:	898a      	ldrh	r2, [r1, #12]
 800c2fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c300:	d032      	beq.n	800c368 <__ssputs_r+0x80>
 800c302:	6825      	ldr	r5, [r4, #0]
 800c304:	6909      	ldr	r1, [r1, #16]
 800c306:	eba5 0901 	sub.w	r9, r5, r1
 800c30a:	6965      	ldr	r5, [r4, #20]
 800c30c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c314:	3301      	adds	r3, #1
 800c316:	444b      	add	r3, r9
 800c318:	106d      	asrs	r5, r5, #1
 800c31a:	429d      	cmp	r5, r3
 800c31c:	bf38      	it	cc
 800c31e:	461d      	movcc	r5, r3
 800c320:	0553      	lsls	r3, r2, #21
 800c322:	d531      	bpl.n	800c388 <__ssputs_r+0xa0>
 800c324:	4629      	mov	r1, r5
 800c326:	f7ff ff85 	bl	800c234 <_malloc_r>
 800c32a:	4606      	mov	r6, r0
 800c32c:	b950      	cbnz	r0, 800c344 <__ssputs_r+0x5c>
 800c32e:	230c      	movs	r3, #12
 800c330:	f8ca 3000 	str.w	r3, [sl]
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33a:	81a3      	strh	r3, [r4, #12]
 800c33c:	f04f 30ff 	mov.w	r0, #4294967295
 800c340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c344:	6921      	ldr	r1, [r4, #16]
 800c346:	464a      	mov	r2, r9
 800c348:	f7ff fb88 	bl	800ba5c <memcpy>
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c356:	81a3      	strh	r3, [r4, #12]
 800c358:	6126      	str	r6, [r4, #16]
 800c35a:	6165      	str	r5, [r4, #20]
 800c35c:	444e      	add	r6, r9
 800c35e:	eba5 0509 	sub.w	r5, r5, r9
 800c362:	6026      	str	r6, [r4, #0]
 800c364:	60a5      	str	r5, [r4, #8]
 800c366:	463e      	mov	r6, r7
 800c368:	42be      	cmp	r6, r7
 800c36a:	d900      	bls.n	800c36e <__ssputs_r+0x86>
 800c36c:	463e      	mov	r6, r7
 800c36e:	4632      	mov	r2, r6
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	4641      	mov	r1, r8
 800c374:	f000 f966 	bl	800c644 <memmove>
 800c378:	68a3      	ldr	r3, [r4, #8]
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	1b9b      	subs	r3, r3, r6
 800c37e:	4432      	add	r2, r6
 800c380:	60a3      	str	r3, [r4, #8]
 800c382:	6022      	str	r2, [r4, #0]
 800c384:	2000      	movs	r0, #0
 800c386:	e7db      	b.n	800c340 <__ssputs_r+0x58>
 800c388:	462a      	mov	r2, r5
 800c38a:	f000 f981 	bl	800c690 <_realloc_r>
 800c38e:	4606      	mov	r6, r0
 800c390:	2800      	cmp	r0, #0
 800c392:	d1e1      	bne.n	800c358 <__ssputs_r+0x70>
 800c394:	6921      	ldr	r1, [r4, #16]
 800c396:	4650      	mov	r0, sl
 800c398:	f7ff fefc 	bl	800c194 <_free_r>
 800c39c:	e7c7      	b.n	800c32e <__ssputs_r+0x46>
	...

0800c3a0 <_svfiprintf_r>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	4698      	mov	r8, r3
 800c3a6:	898b      	ldrh	r3, [r1, #12]
 800c3a8:	061b      	lsls	r3, r3, #24
 800c3aa:	b09d      	sub	sp, #116	; 0x74
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	d50e      	bpl.n	800c3d2 <_svfiprintf_r+0x32>
 800c3b4:	690b      	ldr	r3, [r1, #16]
 800c3b6:	b963      	cbnz	r3, 800c3d2 <_svfiprintf_r+0x32>
 800c3b8:	2140      	movs	r1, #64	; 0x40
 800c3ba:	f7ff ff3b 	bl	800c234 <_malloc_r>
 800c3be:	6028      	str	r0, [r5, #0]
 800c3c0:	6128      	str	r0, [r5, #16]
 800c3c2:	b920      	cbnz	r0, 800c3ce <_svfiprintf_r+0x2e>
 800c3c4:	230c      	movs	r3, #12
 800c3c6:	603b      	str	r3, [r7, #0]
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3cc:	e0d1      	b.n	800c572 <_svfiprintf_r+0x1d2>
 800c3ce:	2340      	movs	r3, #64	; 0x40
 800c3d0:	616b      	str	r3, [r5, #20]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d6:	2320      	movs	r3, #32
 800c3d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3e0:	2330      	movs	r3, #48	; 0x30
 800c3e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c58c <_svfiprintf_r+0x1ec>
 800c3e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3ea:	f04f 0901 	mov.w	r9, #1
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	469a      	mov	sl, r3
 800c3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3f6:	b10a      	cbz	r2, 800c3fc <_svfiprintf_r+0x5c>
 800c3f8:	2a25      	cmp	r2, #37	; 0x25
 800c3fa:	d1f9      	bne.n	800c3f0 <_svfiprintf_r+0x50>
 800c3fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c400:	d00b      	beq.n	800c41a <_svfiprintf_r+0x7a>
 800c402:	465b      	mov	r3, fp
 800c404:	4622      	mov	r2, r4
 800c406:	4629      	mov	r1, r5
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff ff6d 	bl	800c2e8 <__ssputs_r>
 800c40e:	3001      	adds	r0, #1
 800c410:	f000 80aa 	beq.w	800c568 <_svfiprintf_r+0x1c8>
 800c414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c416:	445a      	add	r2, fp
 800c418:	9209      	str	r2, [sp, #36]	; 0x24
 800c41a:	f89a 3000 	ldrb.w	r3, [sl]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 80a2 	beq.w	800c568 <_svfiprintf_r+0x1c8>
 800c424:	2300      	movs	r3, #0
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c42e:	f10a 0a01 	add.w	sl, sl, #1
 800c432:	9304      	str	r3, [sp, #16]
 800c434:	9307      	str	r3, [sp, #28]
 800c436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c43a:	931a      	str	r3, [sp, #104]	; 0x68
 800c43c:	4654      	mov	r4, sl
 800c43e:	2205      	movs	r2, #5
 800c440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c444:	4851      	ldr	r0, [pc, #324]	; (800c58c <_svfiprintf_r+0x1ec>)
 800c446:	f7f3 ff03 	bl	8000250 <memchr>
 800c44a:	9a04      	ldr	r2, [sp, #16]
 800c44c:	b9d8      	cbnz	r0, 800c486 <_svfiprintf_r+0xe6>
 800c44e:	06d0      	lsls	r0, r2, #27
 800c450:	bf44      	itt	mi
 800c452:	2320      	movmi	r3, #32
 800c454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c458:	0711      	lsls	r1, r2, #28
 800c45a:	bf44      	itt	mi
 800c45c:	232b      	movmi	r3, #43	; 0x2b
 800c45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b2a      	cmp	r3, #42	; 0x2a
 800c468:	d015      	beq.n	800c496 <_svfiprintf_r+0xf6>
 800c46a:	9a07      	ldr	r2, [sp, #28]
 800c46c:	4654      	mov	r4, sl
 800c46e:	2000      	movs	r0, #0
 800c470:	f04f 0c0a 	mov.w	ip, #10
 800c474:	4621      	mov	r1, r4
 800c476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c47a:	3b30      	subs	r3, #48	; 0x30
 800c47c:	2b09      	cmp	r3, #9
 800c47e:	d94e      	bls.n	800c51e <_svfiprintf_r+0x17e>
 800c480:	b1b0      	cbz	r0, 800c4b0 <_svfiprintf_r+0x110>
 800c482:	9207      	str	r2, [sp, #28]
 800c484:	e014      	b.n	800c4b0 <_svfiprintf_r+0x110>
 800c486:	eba0 0308 	sub.w	r3, r0, r8
 800c48a:	fa09 f303 	lsl.w	r3, r9, r3
 800c48e:	4313      	orrs	r3, r2
 800c490:	9304      	str	r3, [sp, #16]
 800c492:	46a2      	mov	sl, r4
 800c494:	e7d2      	b.n	800c43c <_svfiprintf_r+0x9c>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	1d19      	adds	r1, r3, #4
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9103      	str	r1, [sp, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bfbb      	ittet	lt
 800c4a2:	425b      	neglt	r3, r3
 800c4a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a8:	9307      	strge	r3, [sp, #28]
 800c4aa:	9307      	strlt	r3, [sp, #28]
 800c4ac:	bfb8      	it	lt
 800c4ae:	9204      	strlt	r2, [sp, #16]
 800c4b0:	7823      	ldrb	r3, [r4, #0]
 800c4b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4b4:	d10c      	bne.n	800c4d0 <_svfiprintf_r+0x130>
 800c4b6:	7863      	ldrb	r3, [r4, #1]
 800c4b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ba:	d135      	bne.n	800c528 <_svfiprintf_r+0x188>
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	9203      	str	r2, [sp, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	bfb8      	it	lt
 800c4c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4cc:	3402      	adds	r4, #2
 800c4ce:	9305      	str	r3, [sp, #20]
 800c4d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c59c <_svfiprintf_r+0x1fc>
 800c4d4:	7821      	ldrb	r1, [r4, #0]
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	4650      	mov	r0, sl
 800c4da:	f7f3 feb9 	bl	8000250 <memchr>
 800c4de:	b140      	cbz	r0, 800c4f2 <_svfiprintf_r+0x152>
 800c4e0:	2340      	movs	r3, #64	; 0x40
 800c4e2:	eba0 000a 	sub.w	r0, r0, sl
 800c4e6:	fa03 f000 	lsl.w	r0, r3, r0
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	4303      	orrs	r3, r0
 800c4ee:	3401      	adds	r4, #1
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f6:	4826      	ldr	r0, [pc, #152]	; (800c590 <_svfiprintf_r+0x1f0>)
 800c4f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4fc:	2206      	movs	r2, #6
 800c4fe:	f7f3 fea7 	bl	8000250 <memchr>
 800c502:	2800      	cmp	r0, #0
 800c504:	d038      	beq.n	800c578 <_svfiprintf_r+0x1d8>
 800c506:	4b23      	ldr	r3, [pc, #140]	; (800c594 <_svfiprintf_r+0x1f4>)
 800c508:	bb1b      	cbnz	r3, 800c552 <_svfiprintf_r+0x1b2>
 800c50a:	9b03      	ldr	r3, [sp, #12]
 800c50c:	3307      	adds	r3, #7
 800c50e:	f023 0307 	bic.w	r3, r3, #7
 800c512:	3308      	adds	r3, #8
 800c514:	9303      	str	r3, [sp, #12]
 800c516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c518:	4433      	add	r3, r6
 800c51a:	9309      	str	r3, [sp, #36]	; 0x24
 800c51c:	e767      	b.n	800c3ee <_svfiprintf_r+0x4e>
 800c51e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c522:	460c      	mov	r4, r1
 800c524:	2001      	movs	r0, #1
 800c526:	e7a5      	b.n	800c474 <_svfiprintf_r+0xd4>
 800c528:	2300      	movs	r3, #0
 800c52a:	3401      	adds	r4, #1
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	4619      	mov	r1, r3
 800c530:	f04f 0c0a 	mov.w	ip, #10
 800c534:	4620      	mov	r0, r4
 800c536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c53a:	3a30      	subs	r2, #48	; 0x30
 800c53c:	2a09      	cmp	r2, #9
 800c53e:	d903      	bls.n	800c548 <_svfiprintf_r+0x1a8>
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0c5      	beq.n	800c4d0 <_svfiprintf_r+0x130>
 800c544:	9105      	str	r1, [sp, #20]
 800c546:	e7c3      	b.n	800c4d0 <_svfiprintf_r+0x130>
 800c548:	fb0c 2101 	mla	r1, ip, r1, r2
 800c54c:	4604      	mov	r4, r0
 800c54e:	2301      	movs	r3, #1
 800c550:	e7f0      	b.n	800c534 <_svfiprintf_r+0x194>
 800c552:	ab03      	add	r3, sp, #12
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	462a      	mov	r2, r5
 800c558:	4b0f      	ldr	r3, [pc, #60]	; (800c598 <_svfiprintf_r+0x1f8>)
 800c55a:	a904      	add	r1, sp, #16
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7fe f88f 	bl	800a680 <_printf_float>
 800c562:	1c42      	adds	r2, r0, #1
 800c564:	4606      	mov	r6, r0
 800c566:	d1d6      	bne.n	800c516 <_svfiprintf_r+0x176>
 800c568:	89ab      	ldrh	r3, [r5, #12]
 800c56a:	065b      	lsls	r3, r3, #25
 800c56c:	f53f af2c 	bmi.w	800c3c8 <_svfiprintf_r+0x28>
 800c570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c572:	b01d      	add	sp, #116	; 0x74
 800c574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c578:	ab03      	add	r3, sp, #12
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	462a      	mov	r2, r5
 800c57e:	4b06      	ldr	r3, [pc, #24]	; (800c598 <_svfiprintf_r+0x1f8>)
 800c580:	a904      	add	r1, sp, #16
 800c582:	4638      	mov	r0, r7
 800c584:	f7fe fb08 	bl	800ab98 <_printf_i>
 800c588:	e7eb      	b.n	800c562 <_svfiprintf_r+0x1c2>
 800c58a:	bf00      	nop
 800c58c:	0800d784 	.word	0x0800d784
 800c590:	0800d78e 	.word	0x0800d78e
 800c594:	0800a681 	.word	0x0800a681
 800c598:	0800c2e9 	.word	0x0800c2e9
 800c59c:	0800d78a 	.word	0x0800d78a

0800c5a0 <_sbrk_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4d06      	ldr	r5, [pc, #24]	; (800c5bc <_sbrk_r+0x1c>)
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	602b      	str	r3, [r5, #0]
 800c5ac:	f7f7 fd40 	bl	8004030 <_sbrk>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d102      	bne.n	800c5ba <_sbrk_r+0x1a>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	b103      	cbz	r3, 800c5ba <_sbrk_r+0x1a>
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	2000075c 	.word	0x2000075c

0800c5c0 <__assert_func>:
 800c5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5c2:	4614      	mov	r4, r2
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	4b09      	ldr	r3, [pc, #36]	; (800c5ec <__assert_func+0x2c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	68d8      	ldr	r0, [r3, #12]
 800c5ce:	b14c      	cbz	r4, 800c5e4 <__assert_func+0x24>
 800c5d0:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <__assert_func+0x30>)
 800c5d2:	9100      	str	r1, [sp, #0]
 800c5d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5d8:	4906      	ldr	r1, [pc, #24]	; (800c5f4 <__assert_func+0x34>)
 800c5da:	462b      	mov	r3, r5
 800c5dc:	f000 f80e 	bl	800c5fc <fiprintf>
 800c5e0:	f000 faa4 	bl	800cb2c <abort>
 800c5e4:	4b04      	ldr	r3, [pc, #16]	; (800c5f8 <__assert_func+0x38>)
 800c5e6:	461c      	mov	r4, r3
 800c5e8:	e7f3      	b.n	800c5d2 <__assert_func+0x12>
 800c5ea:	bf00      	nop
 800c5ec:	200000d0 	.word	0x200000d0
 800c5f0:	0800d795 	.word	0x0800d795
 800c5f4:	0800d7a2 	.word	0x0800d7a2
 800c5f8:	0800d7d0 	.word	0x0800d7d0

0800c5fc <fiprintf>:
 800c5fc:	b40e      	push	{r1, r2, r3}
 800c5fe:	b503      	push	{r0, r1, lr}
 800c600:	4601      	mov	r1, r0
 800c602:	ab03      	add	r3, sp, #12
 800c604:	4805      	ldr	r0, [pc, #20]	; (800c61c <fiprintf+0x20>)
 800c606:	f853 2b04 	ldr.w	r2, [r3], #4
 800c60a:	6800      	ldr	r0, [r0, #0]
 800c60c:	9301      	str	r3, [sp, #4]
 800c60e:	f000 f88f 	bl	800c730 <_vfiprintf_r>
 800c612:	b002      	add	sp, #8
 800c614:	f85d eb04 	ldr.w	lr, [sp], #4
 800c618:	b003      	add	sp, #12
 800c61a:	4770      	bx	lr
 800c61c:	200000d0 	.word	0x200000d0

0800c620 <__ascii_mbtowc>:
 800c620:	b082      	sub	sp, #8
 800c622:	b901      	cbnz	r1, 800c626 <__ascii_mbtowc+0x6>
 800c624:	a901      	add	r1, sp, #4
 800c626:	b142      	cbz	r2, 800c63a <__ascii_mbtowc+0x1a>
 800c628:	b14b      	cbz	r3, 800c63e <__ascii_mbtowc+0x1e>
 800c62a:	7813      	ldrb	r3, [r2, #0]
 800c62c:	600b      	str	r3, [r1, #0]
 800c62e:	7812      	ldrb	r2, [r2, #0]
 800c630:	1e10      	subs	r0, r2, #0
 800c632:	bf18      	it	ne
 800c634:	2001      	movne	r0, #1
 800c636:	b002      	add	sp, #8
 800c638:	4770      	bx	lr
 800c63a:	4610      	mov	r0, r2
 800c63c:	e7fb      	b.n	800c636 <__ascii_mbtowc+0x16>
 800c63e:	f06f 0001 	mvn.w	r0, #1
 800c642:	e7f8      	b.n	800c636 <__ascii_mbtowc+0x16>

0800c644 <memmove>:
 800c644:	4288      	cmp	r0, r1
 800c646:	b510      	push	{r4, lr}
 800c648:	eb01 0402 	add.w	r4, r1, r2
 800c64c:	d902      	bls.n	800c654 <memmove+0x10>
 800c64e:	4284      	cmp	r4, r0
 800c650:	4623      	mov	r3, r4
 800c652:	d807      	bhi.n	800c664 <memmove+0x20>
 800c654:	1e43      	subs	r3, r0, #1
 800c656:	42a1      	cmp	r1, r4
 800c658:	d008      	beq.n	800c66c <memmove+0x28>
 800c65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c662:	e7f8      	b.n	800c656 <memmove+0x12>
 800c664:	4402      	add	r2, r0
 800c666:	4601      	mov	r1, r0
 800c668:	428a      	cmp	r2, r1
 800c66a:	d100      	bne.n	800c66e <memmove+0x2a>
 800c66c:	bd10      	pop	{r4, pc}
 800c66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c676:	e7f7      	b.n	800c668 <memmove+0x24>

0800c678 <__malloc_lock>:
 800c678:	4801      	ldr	r0, [pc, #4]	; (800c680 <__malloc_lock+0x8>)
 800c67a:	f000 bc17 	b.w	800ceac <__retarget_lock_acquire_recursive>
 800c67e:	bf00      	nop
 800c680:	20000764 	.word	0x20000764

0800c684 <__malloc_unlock>:
 800c684:	4801      	ldr	r0, [pc, #4]	; (800c68c <__malloc_unlock+0x8>)
 800c686:	f000 bc12 	b.w	800ceae <__retarget_lock_release_recursive>
 800c68a:	bf00      	nop
 800c68c:	20000764 	.word	0x20000764

0800c690 <_realloc_r>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	4607      	mov	r7, r0
 800c694:	4614      	mov	r4, r2
 800c696:	460e      	mov	r6, r1
 800c698:	b921      	cbnz	r1, 800c6a4 <_realloc_r+0x14>
 800c69a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c69e:	4611      	mov	r1, r2
 800c6a0:	f7ff bdc8 	b.w	800c234 <_malloc_r>
 800c6a4:	b922      	cbnz	r2, 800c6b0 <_realloc_r+0x20>
 800c6a6:	f7ff fd75 	bl	800c194 <_free_r>
 800c6aa:	4625      	mov	r5, r4
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b0:	f000 fc62 	bl	800cf78 <_malloc_usable_size_r>
 800c6b4:	42a0      	cmp	r0, r4
 800c6b6:	d20f      	bcs.n	800c6d8 <_realloc_r+0x48>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	f7ff fdba 	bl	800c234 <_malloc_r>
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	d0f2      	beq.n	800c6ac <_realloc_r+0x1c>
 800c6c6:	4631      	mov	r1, r6
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	f7ff f9c7 	bl	800ba5c <memcpy>
 800c6ce:	4631      	mov	r1, r6
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff fd5f 	bl	800c194 <_free_r>
 800c6d6:	e7e9      	b.n	800c6ac <_realloc_r+0x1c>
 800c6d8:	4635      	mov	r5, r6
 800c6da:	e7e7      	b.n	800c6ac <_realloc_r+0x1c>

0800c6dc <__sfputc_r>:
 800c6dc:	6893      	ldr	r3, [r2, #8]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	b410      	push	{r4}
 800c6e4:	6093      	str	r3, [r2, #8]
 800c6e6:	da08      	bge.n	800c6fa <__sfputc_r+0x1e>
 800c6e8:	6994      	ldr	r4, [r2, #24]
 800c6ea:	42a3      	cmp	r3, r4
 800c6ec:	db01      	blt.n	800c6f2 <__sfputc_r+0x16>
 800c6ee:	290a      	cmp	r1, #10
 800c6f0:	d103      	bne.n	800c6fa <__sfputc_r+0x1e>
 800c6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6f6:	f000 b94b 	b.w	800c990 <__swbuf_r>
 800c6fa:	6813      	ldr	r3, [r2, #0]
 800c6fc:	1c58      	adds	r0, r3, #1
 800c6fe:	6010      	str	r0, [r2, #0]
 800c700:	7019      	strb	r1, [r3, #0]
 800c702:	4608      	mov	r0, r1
 800c704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <__sfputs_r>:
 800c70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70c:	4606      	mov	r6, r0
 800c70e:	460f      	mov	r7, r1
 800c710:	4614      	mov	r4, r2
 800c712:	18d5      	adds	r5, r2, r3
 800c714:	42ac      	cmp	r4, r5
 800c716:	d101      	bne.n	800c71c <__sfputs_r+0x12>
 800c718:	2000      	movs	r0, #0
 800c71a:	e007      	b.n	800c72c <__sfputs_r+0x22>
 800c71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c720:	463a      	mov	r2, r7
 800c722:	4630      	mov	r0, r6
 800c724:	f7ff ffda 	bl	800c6dc <__sfputc_r>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d1f3      	bne.n	800c714 <__sfputs_r+0xa>
 800c72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c730 <_vfiprintf_r>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	460d      	mov	r5, r1
 800c736:	b09d      	sub	sp, #116	; 0x74
 800c738:	4614      	mov	r4, r2
 800c73a:	4698      	mov	r8, r3
 800c73c:	4606      	mov	r6, r0
 800c73e:	b118      	cbz	r0, 800c748 <_vfiprintf_r+0x18>
 800c740:	6983      	ldr	r3, [r0, #24]
 800c742:	b90b      	cbnz	r3, 800c748 <_vfiprintf_r+0x18>
 800c744:	f000 fb14 	bl	800cd70 <__sinit>
 800c748:	4b89      	ldr	r3, [pc, #548]	; (800c970 <_vfiprintf_r+0x240>)
 800c74a:	429d      	cmp	r5, r3
 800c74c:	d11b      	bne.n	800c786 <_vfiprintf_r+0x56>
 800c74e:	6875      	ldr	r5, [r6, #4]
 800c750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c752:	07d9      	lsls	r1, r3, #31
 800c754:	d405      	bmi.n	800c762 <_vfiprintf_r+0x32>
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	059a      	lsls	r2, r3, #22
 800c75a:	d402      	bmi.n	800c762 <_vfiprintf_r+0x32>
 800c75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75e:	f000 fba5 	bl	800ceac <__retarget_lock_acquire_recursive>
 800c762:	89ab      	ldrh	r3, [r5, #12]
 800c764:	071b      	lsls	r3, r3, #28
 800c766:	d501      	bpl.n	800c76c <_vfiprintf_r+0x3c>
 800c768:	692b      	ldr	r3, [r5, #16]
 800c76a:	b9eb      	cbnz	r3, 800c7a8 <_vfiprintf_r+0x78>
 800c76c:	4629      	mov	r1, r5
 800c76e:	4630      	mov	r0, r6
 800c770:	f000 f96e 	bl	800ca50 <__swsetup_r>
 800c774:	b1c0      	cbz	r0, 800c7a8 <_vfiprintf_r+0x78>
 800c776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c778:	07dc      	lsls	r4, r3, #31
 800c77a:	d50e      	bpl.n	800c79a <_vfiprintf_r+0x6a>
 800c77c:	f04f 30ff 	mov.w	r0, #4294967295
 800c780:	b01d      	add	sp, #116	; 0x74
 800c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c786:	4b7b      	ldr	r3, [pc, #492]	; (800c974 <_vfiprintf_r+0x244>)
 800c788:	429d      	cmp	r5, r3
 800c78a:	d101      	bne.n	800c790 <_vfiprintf_r+0x60>
 800c78c:	68b5      	ldr	r5, [r6, #8]
 800c78e:	e7df      	b.n	800c750 <_vfiprintf_r+0x20>
 800c790:	4b79      	ldr	r3, [pc, #484]	; (800c978 <_vfiprintf_r+0x248>)
 800c792:	429d      	cmp	r5, r3
 800c794:	bf08      	it	eq
 800c796:	68f5      	ldreq	r5, [r6, #12]
 800c798:	e7da      	b.n	800c750 <_vfiprintf_r+0x20>
 800c79a:	89ab      	ldrh	r3, [r5, #12]
 800c79c:	0598      	lsls	r0, r3, #22
 800c79e:	d4ed      	bmi.n	800c77c <_vfiprintf_r+0x4c>
 800c7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7a2:	f000 fb84 	bl	800ceae <__retarget_lock_release_recursive>
 800c7a6:	e7e9      	b.n	800c77c <_vfiprintf_r+0x4c>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ac:	2320      	movs	r3, #32
 800c7ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7b6:	2330      	movs	r3, #48	; 0x30
 800c7b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c97c <_vfiprintf_r+0x24c>
 800c7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7c0:	f04f 0901 	mov.w	r9, #1
 800c7c4:	4623      	mov	r3, r4
 800c7c6:	469a      	mov	sl, r3
 800c7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7cc:	b10a      	cbz	r2, 800c7d2 <_vfiprintf_r+0xa2>
 800c7ce:	2a25      	cmp	r2, #37	; 0x25
 800c7d0:	d1f9      	bne.n	800c7c6 <_vfiprintf_r+0x96>
 800c7d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d6:	d00b      	beq.n	800c7f0 <_vfiprintf_r+0xc0>
 800c7d8:	465b      	mov	r3, fp
 800c7da:	4622      	mov	r2, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	4630      	mov	r0, r6
 800c7e0:	f7ff ff93 	bl	800c70a <__sfputs_r>
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	f000 80aa 	beq.w	800c93e <_vfiprintf_r+0x20e>
 800c7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ec:	445a      	add	r2, fp
 800c7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800c7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 80a2 	beq.w	800c93e <_vfiprintf_r+0x20e>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c804:	f10a 0a01 	add.w	sl, sl, #1
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	9307      	str	r3, [sp, #28]
 800c80c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c810:	931a      	str	r3, [sp, #104]	; 0x68
 800c812:	4654      	mov	r4, sl
 800c814:	2205      	movs	r2, #5
 800c816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81a:	4858      	ldr	r0, [pc, #352]	; (800c97c <_vfiprintf_r+0x24c>)
 800c81c:	f7f3 fd18 	bl	8000250 <memchr>
 800c820:	9a04      	ldr	r2, [sp, #16]
 800c822:	b9d8      	cbnz	r0, 800c85c <_vfiprintf_r+0x12c>
 800c824:	06d1      	lsls	r1, r2, #27
 800c826:	bf44      	itt	mi
 800c828:	2320      	movmi	r3, #32
 800c82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c82e:	0713      	lsls	r3, r2, #28
 800c830:	bf44      	itt	mi
 800c832:	232b      	movmi	r3, #43	; 0x2b
 800c834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c838:	f89a 3000 	ldrb.w	r3, [sl]
 800c83c:	2b2a      	cmp	r3, #42	; 0x2a
 800c83e:	d015      	beq.n	800c86c <_vfiprintf_r+0x13c>
 800c840:	9a07      	ldr	r2, [sp, #28]
 800c842:	4654      	mov	r4, sl
 800c844:	2000      	movs	r0, #0
 800c846:	f04f 0c0a 	mov.w	ip, #10
 800c84a:	4621      	mov	r1, r4
 800c84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c850:	3b30      	subs	r3, #48	; 0x30
 800c852:	2b09      	cmp	r3, #9
 800c854:	d94e      	bls.n	800c8f4 <_vfiprintf_r+0x1c4>
 800c856:	b1b0      	cbz	r0, 800c886 <_vfiprintf_r+0x156>
 800c858:	9207      	str	r2, [sp, #28]
 800c85a:	e014      	b.n	800c886 <_vfiprintf_r+0x156>
 800c85c:	eba0 0308 	sub.w	r3, r0, r8
 800c860:	fa09 f303 	lsl.w	r3, r9, r3
 800c864:	4313      	orrs	r3, r2
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	46a2      	mov	sl, r4
 800c86a:	e7d2      	b.n	800c812 <_vfiprintf_r+0xe2>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	1d19      	adds	r1, r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	9103      	str	r1, [sp, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	bfbb      	ittet	lt
 800c878:	425b      	neglt	r3, r3
 800c87a:	f042 0202 	orrlt.w	r2, r2, #2
 800c87e:	9307      	strge	r3, [sp, #28]
 800c880:	9307      	strlt	r3, [sp, #28]
 800c882:	bfb8      	it	lt
 800c884:	9204      	strlt	r2, [sp, #16]
 800c886:	7823      	ldrb	r3, [r4, #0]
 800c888:	2b2e      	cmp	r3, #46	; 0x2e
 800c88a:	d10c      	bne.n	800c8a6 <_vfiprintf_r+0x176>
 800c88c:	7863      	ldrb	r3, [r4, #1]
 800c88e:	2b2a      	cmp	r3, #42	; 0x2a
 800c890:	d135      	bne.n	800c8fe <_vfiprintf_r+0x1ce>
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	1d1a      	adds	r2, r3, #4
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	9203      	str	r2, [sp, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	bfb8      	it	lt
 800c89e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8a2:	3402      	adds	r4, #2
 800c8a4:	9305      	str	r3, [sp, #20]
 800c8a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c98c <_vfiprintf_r+0x25c>
 800c8aa:	7821      	ldrb	r1, [r4, #0]
 800c8ac:	2203      	movs	r2, #3
 800c8ae:	4650      	mov	r0, sl
 800c8b0:	f7f3 fcce 	bl	8000250 <memchr>
 800c8b4:	b140      	cbz	r0, 800c8c8 <_vfiprintf_r+0x198>
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	eba0 000a 	sub.w	r0, r0, sl
 800c8bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c8c0:	9b04      	ldr	r3, [sp, #16]
 800c8c2:	4303      	orrs	r3, r0
 800c8c4:	3401      	adds	r4, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8cc:	482c      	ldr	r0, [pc, #176]	; (800c980 <_vfiprintf_r+0x250>)
 800c8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8d2:	2206      	movs	r2, #6
 800c8d4:	f7f3 fcbc 	bl	8000250 <memchr>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d03f      	beq.n	800c95c <_vfiprintf_r+0x22c>
 800c8dc:	4b29      	ldr	r3, [pc, #164]	; (800c984 <_vfiprintf_r+0x254>)
 800c8de:	bb1b      	cbnz	r3, 800c928 <_vfiprintf_r+0x1f8>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	3307      	adds	r3, #7
 800c8e4:	f023 0307 	bic.w	r3, r3, #7
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ee:	443b      	add	r3, r7
 800c8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f2:	e767      	b.n	800c7c4 <_vfiprintf_r+0x94>
 800c8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	e7a5      	b.n	800c84a <_vfiprintf_r+0x11a>
 800c8fe:	2300      	movs	r3, #0
 800c900:	3401      	adds	r4, #1
 800c902:	9305      	str	r3, [sp, #20]
 800c904:	4619      	mov	r1, r3
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4620      	mov	r0, r4
 800c90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c910:	3a30      	subs	r2, #48	; 0x30
 800c912:	2a09      	cmp	r2, #9
 800c914:	d903      	bls.n	800c91e <_vfiprintf_r+0x1ee>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0c5      	beq.n	800c8a6 <_vfiprintf_r+0x176>
 800c91a:	9105      	str	r1, [sp, #20]
 800c91c:	e7c3      	b.n	800c8a6 <_vfiprintf_r+0x176>
 800c91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c922:	4604      	mov	r4, r0
 800c924:	2301      	movs	r3, #1
 800c926:	e7f0      	b.n	800c90a <_vfiprintf_r+0x1da>
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	462a      	mov	r2, r5
 800c92e:	4b16      	ldr	r3, [pc, #88]	; (800c988 <_vfiprintf_r+0x258>)
 800c930:	a904      	add	r1, sp, #16
 800c932:	4630      	mov	r0, r6
 800c934:	f7fd fea4 	bl	800a680 <_printf_float>
 800c938:	4607      	mov	r7, r0
 800c93a:	1c78      	adds	r0, r7, #1
 800c93c:	d1d6      	bne.n	800c8ec <_vfiprintf_r+0x1bc>
 800c93e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c940:	07d9      	lsls	r1, r3, #31
 800c942:	d405      	bmi.n	800c950 <_vfiprintf_r+0x220>
 800c944:	89ab      	ldrh	r3, [r5, #12]
 800c946:	059a      	lsls	r2, r3, #22
 800c948:	d402      	bmi.n	800c950 <_vfiprintf_r+0x220>
 800c94a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c94c:	f000 faaf 	bl	800ceae <__retarget_lock_release_recursive>
 800c950:	89ab      	ldrh	r3, [r5, #12]
 800c952:	065b      	lsls	r3, r3, #25
 800c954:	f53f af12 	bmi.w	800c77c <_vfiprintf_r+0x4c>
 800c958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c95a:	e711      	b.n	800c780 <_vfiprintf_r+0x50>
 800c95c:	ab03      	add	r3, sp, #12
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	462a      	mov	r2, r5
 800c962:	4b09      	ldr	r3, [pc, #36]	; (800c988 <_vfiprintf_r+0x258>)
 800c964:	a904      	add	r1, sp, #16
 800c966:	4630      	mov	r0, r6
 800c968:	f7fe f916 	bl	800ab98 <_printf_i>
 800c96c:	e7e4      	b.n	800c938 <_vfiprintf_r+0x208>
 800c96e:	bf00      	nop
 800c970:	0800d8fc 	.word	0x0800d8fc
 800c974:	0800d91c 	.word	0x0800d91c
 800c978:	0800d8dc 	.word	0x0800d8dc
 800c97c:	0800d784 	.word	0x0800d784
 800c980:	0800d78e 	.word	0x0800d78e
 800c984:	0800a681 	.word	0x0800a681
 800c988:	0800c70b 	.word	0x0800c70b
 800c98c:	0800d78a 	.word	0x0800d78a

0800c990 <__swbuf_r>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	460e      	mov	r6, r1
 800c994:	4614      	mov	r4, r2
 800c996:	4605      	mov	r5, r0
 800c998:	b118      	cbz	r0, 800c9a2 <__swbuf_r+0x12>
 800c99a:	6983      	ldr	r3, [r0, #24]
 800c99c:	b90b      	cbnz	r3, 800c9a2 <__swbuf_r+0x12>
 800c99e:	f000 f9e7 	bl	800cd70 <__sinit>
 800c9a2:	4b21      	ldr	r3, [pc, #132]	; (800ca28 <__swbuf_r+0x98>)
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d12b      	bne.n	800ca00 <__swbuf_r+0x70>
 800c9a8:	686c      	ldr	r4, [r5, #4]
 800c9aa:	69a3      	ldr	r3, [r4, #24]
 800c9ac:	60a3      	str	r3, [r4, #8]
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	071a      	lsls	r2, r3, #28
 800c9b2:	d52f      	bpl.n	800ca14 <__swbuf_r+0x84>
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	b36b      	cbz	r3, 800ca14 <__swbuf_r+0x84>
 800c9b8:	6923      	ldr	r3, [r4, #16]
 800c9ba:	6820      	ldr	r0, [r4, #0]
 800c9bc:	1ac0      	subs	r0, r0, r3
 800c9be:	6963      	ldr	r3, [r4, #20]
 800c9c0:	b2f6      	uxtb	r6, r6
 800c9c2:	4283      	cmp	r3, r0
 800c9c4:	4637      	mov	r7, r6
 800c9c6:	dc04      	bgt.n	800c9d2 <__swbuf_r+0x42>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f000 f93c 	bl	800cc48 <_fflush_r>
 800c9d0:	bb30      	cbnz	r0, 800ca20 <__swbuf_r+0x90>
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	60a3      	str	r3, [r4, #8]
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	6022      	str	r2, [r4, #0]
 800c9de:	701e      	strb	r6, [r3, #0]
 800c9e0:	6963      	ldr	r3, [r4, #20]
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	4283      	cmp	r3, r0
 800c9e6:	d004      	beq.n	800c9f2 <__swbuf_r+0x62>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	07db      	lsls	r3, r3, #31
 800c9ec:	d506      	bpl.n	800c9fc <__swbuf_r+0x6c>
 800c9ee:	2e0a      	cmp	r6, #10
 800c9f0:	d104      	bne.n	800c9fc <__swbuf_r+0x6c>
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	f000 f927 	bl	800cc48 <_fflush_r>
 800c9fa:	b988      	cbnz	r0, 800ca20 <__swbuf_r+0x90>
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca00:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <__swbuf_r+0x9c>)
 800ca02:	429c      	cmp	r4, r3
 800ca04:	d101      	bne.n	800ca0a <__swbuf_r+0x7a>
 800ca06:	68ac      	ldr	r4, [r5, #8]
 800ca08:	e7cf      	b.n	800c9aa <__swbuf_r+0x1a>
 800ca0a:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <__swbuf_r+0xa0>)
 800ca0c:	429c      	cmp	r4, r3
 800ca0e:	bf08      	it	eq
 800ca10:	68ec      	ldreq	r4, [r5, #12]
 800ca12:	e7ca      	b.n	800c9aa <__swbuf_r+0x1a>
 800ca14:	4621      	mov	r1, r4
 800ca16:	4628      	mov	r0, r5
 800ca18:	f000 f81a 	bl	800ca50 <__swsetup_r>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d0cb      	beq.n	800c9b8 <__swbuf_r+0x28>
 800ca20:	f04f 37ff 	mov.w	r7, #4294967295
 800ca24:	e7ea      	b.n	800c9fc <__swbuf_r+0x6c>
 800ca26:	bf00      	nop
 800ca28:	0800d8fc 	.word	0x0800d8fc
 800ca2c:	0800d91c 	.word	0x0800d91c
 800ca30:	0800d8dc 	.word	0x0800d8dc

0800ca34 <__ascii_wctomb>:
 800ca34:	b149      	cbz	r1, 800ca4a <__ascii_wctomb+0x16>
 800ca36:	2aff      	cmp	r2, #255	; 0xff
 800ca38:	bf85      	ittet	hi
 800ca3a:	238a      	movhi	r3, #138	; 0x8a
 800ca3c:	6003      	strhi	r3, [r0, #0]
 800ca3e:	700a      	strbls	r2, [r1, #0]
 800ca40:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca44:	bf98      	it	ls
 800ca46:	2001      	movls	r0, #1
 800ca48:	4770      	bx	lr
 800ca4a:	4608      	mov	r0, r1
 800ca4c:	4770      	bx	lr
	...

0800ca50 <__swsetup_r>:
 800ca50:	4b32      	ldr	r3, [pc, #200]	; (800cb1c <__swsetup_r+0xcc>)
 800ca52:	b570      	push	{r4, r5, r6, lr}
 800ca54:	681d      	ldr	r5, [r3, #0]
 800ca56:	4606      	mov	r6, r0
 800ca58:	460c      	mov	r4, r1
 800ca5a:	b125      	cbz	r5, 800ca66 <__swsetup_r+0x16>
 800ca5c:	69ab      	ldr	r3, [r5, #24]
 800ca5e:	b913      	cbnz	r3, 800ca66 <__swsetup_r+0x16>
 800ca60:	4628      	mov	r0, r5
 800ca62:	f000 f985 	bl	800cd70 <__sinit>
 800ca66:	4b2e      	ldr	r3, [pc, #184]	; (800cb20 <__swsetup_r+0xd0>)
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	d10f      	bne.n	800ca8c <__swsetup_r+0x3c>
 800ca6c:	686c      	ldr	r4, [r5, #4]
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca74:	0719      	lsls	r1, r3, #28
 800ca76:	d42c      	bmi.n	800cad2 <__swsetup_r+0x82>
 800ca78:	06dd      	lsls	r5, r3, #27
 800ca7a:	d411      	bmi.n	800caa0 <__swsetup_r+0x50>
 800ca7c:	2309      	movs	r3, #9
 800ca7e:	6033      	str	r3, [r6, #0]
 800ca80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca84:	81a3      	strh	r3, [r4, #12]
 800ca86:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8a:	e03e      	b.n	800cb0a <__swsetup_r+0xba>
 800ca8c:	4b25      	ldr	r3, [pc, #148]	; (800cb24 <__swsetup_r+0xd4>)
 800ca8e:	429c      	cmp	r4, r3
 800ca90:	d101      	bne.n	800ca96 <__swsetup_r+0x46>
 800ca92:	68ac      	ldr	r4, [r5, #8]
 800ca94:	e7eb      	b.n	800ca6e <__swsetup_r+0x1e>
 800ca96:	4b24      	ldr	r3, [pc, #144]	; (800cb28 <__swsetup_r+0xd8>)
 800ca98:	429c      	cmp	r4, r3
 800ca9a:	bf08      	it	eq
 800ca9c:	68ec      	ldreq	r4, [r5, #12]
 800ca9e:	e7e6      	b.n	800ca6e <__swsetup_r+0x1e>
 800caa0:	0758      	lsls	r0, r3, #29
 800caa2:	d512      	bpl.n	800caca <__swsetup_r+0x7a>
 800caa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caa6:	b141      	cbz	r1, 800caba <__swsetup_r+0x6a>
 800caa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800caac:	4299      	cmp	r1, r3
 800caae:	d002      	beq.n	800cab6 <__swsetup_r+0x66>
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7ff fb6f 	bl	800c194 <_free_r>
 800cab6:	2300      	movs	r3, #0
 800cab8:	6363      	str	r3, [r4, #52]	; 0x34
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cac0:	81a3      	strh	r3, [r4, #12]
 800cac2:	2300      	movs	r3, #0
 800cac4:	6063      	str	r3, [r4, #4]
 800cac6:	6923      	ldr	r3, [r4, #16]
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	f043 0308 	orr.w	r3, r3, #8
 800cad0:	81a3      	strh	r3, [r4, #12]
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	b94b      	cbnz	r3, 800caea <__swsetup_r+0x9a>
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cae0:	d003      	beq.n	800caea <__swsetup_r+0x9a>
 800cae2:	4621      	mov	r1, r4
 800cae4:	4630      	mov	r0, r6
 800cae6:	f000 fa07 	bl	800cef8 <__smakebuf_r>
 800caea:	89a0      	ldrh	r0, [r4, #12]
 800caec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caf0:	f010 0301 	ands.w	r3, r0, #1
 800caf4:	d00a      	beq.n	800cb0c <__swsetup_r+0xbc>
 800caf6:	2300      	movs	r3, #0
 800caf8:	60a3      	str	r3, [r4, #8]
 800cafa:	6963      	ldr	r3, [r4, #20]
 800cafc:	425b      	negs	r3, r3
 800cafe:	61a3      	str	r3, [r4, #24]
 800cb00:	6923      	ldr	r3, [r4, #16]
 800cb02:	b943      	cbnz	r3, 800cb16 <__swsetup_r+0xc6>
 800cb04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb08:	d1ba      	bne.n	800ca80 <__swsetup_r+0x30>
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}
 800cb0c:	0781      	lsls	r1, r0, #30
 800cb0e:	bf58      	it	pl
 800cb10:	6963      	ldrpl	r3, [r4, #20]
 800cb12:	60a3      	str	r3, [r4, #8]
 800cb14:	e7f4      	b.n	800cb00 <__swsetup_r+0xb0>
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7f7      	b.n	800cb0a <__swsetup_r+0xba>
 800cb1a:	bf00      	nop
 800cb1c:	200000d0 	.word	0x200000d0
 800cb20:	0800d8fc 	.word	0x0800d8fc
 800cb24:	0800d91c 	.word	0x0800d91c
 800cb28:	0800d8dc 	.word	0x0800d8dc

0800cb2c <abort>:
 800cb2c:	b508      	push	{r3, lr}
 800cb2e:	2006      	movs	r0, #6
 800cb30:	f000 fa52 	bl	800cfd8 <raise>
 800cb34:	2001      	movs	r0, #1
 800cb36:	f7f7 fa03 	bl	8003f40 <_exit>
	...

0800cb3c <__sflush_r>:
 800cb3c:	898a      	ldrh	r2, [r1, #12]
 800cb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb42:	4605      	mov	r5, r0
 800cb44:	0710      	lsls	r0, r2, #28
 800cb46:	460c      	mov	r4, r1
 800cb48:	d458      	bmi.n	800cbfc <__sflush_r+0xc0>
 800cb4a:	684b      	ldr	r3, [r1, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dc05      	bgt.n	800cb5c <__sflush_r+0x20>
 800cb50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	dc02      	bgt.n	800cb5c <__sflush_r+0x20>
 800cb56:	2000      	movs	r0, #0
 800cb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb5e:	2e00      	cmp	r6, #0
 800cb60:	d0f9      	beq.n	800cb56 <__sflush_r+0x1a>
 800cb62:	2300      	movs	r3, #0
 800cb64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb68:	682f      	ldr	r7, [r5, #0]
 800cb6a:	602b      	str	r3, [r5, #0]
 800cb6c:	d032      	beq.n	800cbd4 <__sflush_r+0x98>
 800cb6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	075a      	lsls	r2, r3, #29
 800cb74:	d505      	bpl.n	800cb82 <__sflush_r+0x46>
 800cb76:	6863      	ldr	r3, [r4, #4]
 800cb78:	1ac0      	subs	r0, r0, r3
 800cb7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb7c:	b10b      	cbz	r3, 800cb82 <__sflush_r+0x46>
 800cb7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb80:	1ac0      	subs	r0, r0, r3
 800cb82:	2300      	movs	r3, #0
 800cb84:	4602      	mov	r2, r0
 800cb86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb88:	6a21      	ldr	r1, [r4, #32]
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	47b0      	blx	r6
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	d106      	bne.n	800cba2 <__sflush_r+0x66>
 800cb94:	6829      	ldr	r1, [r5, #0]
 800cb96:	291d      	cmp	r1, #29
 800cb98:	d82c      	bhi.n	800cbf4 <__sflush_r+0xb8>
 800cb9a:	4a2a      	ldr	r2, [pc, #168]	; (800cc44 <__sflush_r+0x108>)
 800cb9c:	40ca      	lsrs	r2, r1
 800cb9e:	07d6      	lsls	r6, r2, #31
 800cba0:	d528      	bpl.n	800cbf4 <__sflush_r+0xb8>
 800cba2:	2200      	movs	r2, #0
 800cba4:	6062      	str	r2, [r4, #4]
 800cba6:	04d9      	lsls	r1, r3, #19
 800cba8:	6922      	ldr	r2, [r4, #16]
 800cbaa:	6022      	str	r2, [r4, #0]
 800cbac:	d504      	bpl.n	800cbb8 <__sflush_r+0x7c>
 800cbae:	1c42      	adds	r2, r0, #1
 800cbb0:	d101      	bne.n	800cbb6 <__sflush_r+0x7a>
 800cbb2:	682b      	ldr	r3, [r5, #0]
 800cbb4:	b903      	cbnz	r3, 800cbb8 <__sflush_r+0x7c>
 800cbb6:	6560      	str	r0, [r4, #84]	; 0x54
 800cbb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbba:	602f      	str	r7, [r5, #0]
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	d0ca      	beq.n	800cb56 <__sflush_r+0x1a>
 800cbc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc4:	4299      	cmp	r1, r3
 800cbc6:	d002      	beq.n	800cbce <__sflush_r+0x92>
 800cbc8:	4628      	mov	r0, r5
 800cbca:	f7ff fae3 	bl	800c194 <_free_r>
 800cbce:	2000      	movs	r0, #0
 800cbd0:	6360      	str	r0, [r4, #52]	; 0x34
 800cbd2:	e7c1      	b.n	800cb58 <__sflush_r+0x1c>
 800cbd4:	6a21      	ldr	r1, [r4, #32]
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4628      	mov	r0, r5
 800cbda:	47b0      	blx	r6
 800cbdc:	1c41      	adds	r1, r0, #1
 800cbde:	d1c7      	bne.n	800cb70 <__sflush_r+0x34>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0c4      	beq.n	800cb70 <__sflush_r+0x34>
 800cbe6:	2b1d      	cmp	r3, #29
 800cbe8:	d001      	beq.n	800cbee <__sflush_r+0xb2>
 800cbea:	2b16      	cmp	r3, #22
 800cbec:	d101      	bne.n	800cbf2 <__sflush_r+0xb6>
 800cbee:	602f      	str	r7, [r5, #0]
 800cbf0:	e7b1      	b.n	800cb56 <__sflush_r+0x1a>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbf8:	81a3      	strh	r3, [r4, #12]
 800cbfa:	e7ad      	b.n	800cb58 <__sflush_r+0x1c>
 800cbfc:	690f      	ldr	r7, [r1, #16]
 800cbfe:	2f00      	cmp	r7, #0
 800cc00:	d0a9      	beq.n	800cb56 <__sflush_r+0x1a>
 800cc02:	0793      	lsls	r3, r2, #30
 800cc04:	680e      	ldr	r6, [r1, #0]
 800cc06:	bf08      	it	eq
 800cc08:	694b      	ldreq	r3, [r1, #20]
 800cc0a:	600f      	str	r7, [r1, #0]
 800cc0c:	bf18      	it	ne
 800cc0e:	2300      	movne	r3, #0
 800cc10:	eba6 0807 	sub.w	r8, r6, r7
 800cc14:	608b      	str	r3, [r1, #8]
 800cc16:	f1b8 0f00 	cmp.w	r8, #0
 800cc1a:	dd9c      	ble.n	800cb56 <__sflush_r+0x1a>
 800cc1c:	6a21      	ldr	r1, [r4, #32]
 800cc1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc20:	4643      	mov	r3, r8
 800cc22:	463a      	mov	r2, r7
 800cc24:	4628      	mov	r0, r5
 800cc26:	47b0      	blx	r6
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	dc06      	bgt.n	800cc3a <__sflush_r+0xfe>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc32:	81a3      	strh	r3, [r4, #12]
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	e78e      	b.n	800cb58 <__sflush_r+0x1c>
 800cc3a:	4407      	add	r7, r0
 800cc3c:	eba8 0800 	sub.w	r8, r8, r0
 800cc40:	e7e9      	b.n	800cc16 <__sflush_r+0xda>
 800cc42:	bf00      	nop
 800cc44:	20400001 	.word	0x20400001

0800cc48 <_fflush_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	690b      	ldr	r3, [r1, #16]
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	b913      	cbnz	r3, 800cc58 <_fflush_r+0x10>
 800cc52:	2500      	movs	r5, #0
 800cc54:	4628      	mov	r0, r5
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
 800cc58:	b118      	cbz	r0, 800cc62 <_fflush_r+0x1a>
 800cc5a:	6983      	ldr	r3, [r0, #24]
 800cc5c:	b90b      	cbnz	r3, 800cc62 <_fflush_r+0x1a>
 800cc5e:	f000 f887 	bl	800cd70 <__sinit>
 800cc62:	4b14      	ldr	r3, [pc, #80]	; (800ccb4 <_fflush_r+0x6c>)
 800cc64:	429c      	cmp	r4, r3
 800cc66:	d11b      	bne.n	800cca0 <_fflush_r+0x58>
 800cc68:	686c      	ldr	r4, [r5, #4]
 800cc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0ef      	beq.n	800cc52 <_fflush_r+0xa>
 800cc72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc74:	07d0      	lsls	r0, r2, #31
 800cc76:	d404      	bmi.n	800cc82 <_fflush_r+0x3a>
 800cc78:	0599      	lsls	r1, r3, #22
 800cc7a:	d402      	bmi.n	800cc82 <_fflush_r+0x3a>
 800cc7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc7e:	f000 f915 	bl	800ceac <__retarget_lock_acquire_recursive>
 800cc82:	4628      	mov	r0, r5
 800cc84:	4621      	mov	r1, r4
 800cc86:	f7ff ff59 	bl	800cb3c <__sflush_r>
 800cc8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc8c:	07da      	lsls	r2, r3, #31
 800cc8e:	4605      	mov	r5, r0
 800cc90:	d4e0      	bmi.n	800cc54 <_fflush_r+0xc>
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	059b      	lsls	r3, r3, #22
 800cc96:	d4dd      	bmi.n	800cc54 <_fflush_r+0xc>
 800cc98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc9a:	f000 f908 	bl	800ceae <__retarget_lock_release_recursive>
 800cc9e:	e7d9      	b.n	800cc54 <_fflush_r+0xc>
 800cca0:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <_fflush_r+0x70>)
 800cca2:	429c      	cmp	r4, r3
 800cca4:	d101      	bne.n	800ccaa <_fflush_r+0x62>
 800cca6:	68ac      	ldr	r4, [r5, #8]
 800cca8:	e7df      	b.n	800cc6a <_fflush_r+0x22>
 800ccaa:	4b04      	ldr	r3, [pc, #16]	; (800ccbc <_fflush_r+0x74>)
 800ccac:	429c      	cmp	r4, r3
 800ccae:	bf08      	it	eq
 800ccb0:	68ec      	ldreq	r4, [r5, #12]
 800ccb2:	e7da      	b.n	800cc6a <_fflush_r+0x22>
 800ccb4:	0800d8fc 	.word	0x0800d8fc
 800ccb8:	0800d91c 	.word	0x0800d91c
 800ccbc:	0800d8dc 	.word	0x0800d8dc

0800ccc0 <std>:
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	b510      	push	{r4, lr}
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	e9c0 3300 	strd	r3, r3, [r0]
 800ccca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccce:	6083      	str	r3, [r0, #8]
 800ccd0:	8181      	strh	r1, [r0, #12]
 800ccd2:	6643      	str	r3, [r0, #100]	; 0x64
 800ccd4:	81c2      	strh	r2, [r0, #14]
 800ccd6:	6183      	str	r3, [r0, #24]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	2208      	movs	r2, #8
 800ccdc:	305c      	adds	r0, #92	; 0x5c
 800ccde:	f7fd fc37 	bl	800a550 <memset>
 800cce2:	4b05      	ldr	r3, [pc, #20]	; (800ccf8 <std+0x38>)
 800cce4:	6263      	str	r3, [r4, #36]	; 0x24
 800cce6:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <std+0x3c>)
 800cce8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccea:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <std+0x40>)
 800ccec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccee:	4b05      	ldr	r3, [pc, #20]	; (800cd04 <std+0x44>)
 800ccf0:	6224      	str	r4, [r4, #32]
 800ccf2:	6323      	str	r3, [r4, #48]	; 0x30
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	bf00      	nop
 800ccf8:	0800d011 	.word	0x0800d011
 800ccfc:	0800d033 	.word	0x0800d033
 800cd00:	0800d06b 	.word	0x0800d06b
 800cd04:	0800d08f 	.word	0x0800d08f

0800cd08 <_cleanup_r>:
 800cd08:	4901      	ldr	r1, [pc, #4]	; (800cd10 <_cleanup_r+0x8>)
 800cd0a:	f000 b8af 	b.w	800ce6c <_fwalk_reent>
 800cd0e:	bf00      	nop
 800cd10:	0800cc49 	.word	0x0800cc49

0800cd14 <__sfmoreglue>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	1e4a      	subs	r2, r1, #1
 800cd18:	2568      	movs	r5, #104	; 0x68
 800cd1a:	4355      	muls	r5, r2
 800cd1c:	460e      	mov	r6, r1
 800cd1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd22:	f7ff fa87 	bl	800c234 <_malloc_r>
 800cd26:	4604      	mov	r4, r0
 800cd28:	b140      	cbz	r0, 800cd3c <__sfmoreglue+0x28>
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	e9c0 1600 	strd	r1, r6, [r0]
 800cd30:	300c      	adds	r0, #12
 800cd32:	60a0      	str	r0, [r4, #8]
 800cd34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd38:	f7fd fc0a 	bl	800a550 <memset>
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}

0800cd40 <__sfp_lock_acquire>:
 800cd40:	4801      	ldr	r0, [pc, #4]	; (800cd48 <__sfp_lock_acquire+0x8>)
 800cd42:	f000 b8b3 	b.w	800ceac <__retarget_lock_acquire_recursive>
 800cd46:	bf00      	nop
 800cd48:	20000768 	.word	0x20000768

0800cd4c <__sfp_lock_release>:
 800cd4c:	4801      	ldr	r0, [pc, #4]	; (800cd54 <__sfp_lock_release+0x8>)
 800cd4e:	f000 b8ae 	b.w	800ceae <__retarget_lock_release_recursive>
 800cd52:	bf00      	nop
 800cd54:	20000768 	.word	0x20000768

0800cd58 <__sinit_lock_acquire>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__sinit_lock_acquire+0x8>)
 800cd5a:	f000 b8a7 	b.w	800ceac <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	20000763 	.word	0x20000763

0800cd64 <__sinit_lock_release>:
 800cd64:	4801      	ldr	r0, [pc, #4]	; (800cd6c <__sinit_lock_release+0x8>)
 800cd66:	f000 b8a2 	b.w	800ceae <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	20000763 	.word	0x20000763

0800cd70 <__sinit>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	4604      	mov	r4, r0
 800cd74:	f7ff fff0 	bl	800cd58 <__sinit_lock_acquire>
 800cd78:	69a3      	ldr	r3, [r4, #24]
 800cd7a:	b11b      	cbz	r3, 800cd84 <__sinit+0x14>
 800cd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd80:	f7ff bff0 	b.w	800cd64 <__sinit_lock_release>
 800cd84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd88:	6523      	str	r3, [r4, #80]	; 0x50
 800cd8a:	4b13      	ldr	r3, [pc, #76]	; (800cdd8 <__sinit+0x68>)
 800cd8c:	4a13      	ldr	r2, [pc, #76]	; (800cddc <__sinit+0x6c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	bf04      	itt	eq
 800cd96:	2301      	moveq	r3, #1
 800cd98:	61a3      	streq	r3, [r4, #24]
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 f820 	bl	800cde0 <__sfp>
 800cda0:	6060      	str	r0, [r4, #4]
 800cda2:	4620      	mov	r0, r4
 800cda4:	f000 f81c 	bl	800cde0 <__sfp>
 800cda8:	60a0      	str	r0, [r4, #8]
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f000 f818 	bl	800cde0 <__sfp>
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	60e0      	str	r0, [r4, #12]
 800cdb4:	2104      	movs	r1, #4
 800cdb6:	6860      	ldr	r0, [r4, #4]
 800cdb8:	f7ff ff82 	bl	800ccc0 <std>
 800cdbc:	68a0      	ldr	r0, [r4, #8]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	2109      	movs	r1, #9
 800cdc2:	f7ff ff7d 	bl	800ccc0 <std>
 800cdc6:	68e0      	ldr	r0, [r4, #12]
 800cdc8:	2202      	movs	r2, #2
 800cdca:	2112      	movs	r1, #18
 800cdcc:	f7ff ff78 	bl	800ccc0 <std>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	61a3      	str	r3, [r4, #24]
 800cdd4:	e7d2      	b.n	800cd7c <__sinit+0xc>
 800cdd6:	bf00      	nop
 800cdd8:	0800d558 	.word	0x0800d558
 800cddc:	0800cd09 	.word	0x0800cd09

0800cde0 <__sfp>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	4607      	mov	r7, r0
 800cde4:	f7ff ffac 	bl	800cd40 <__sfp_lock_acquire>
 800cde8:	4b1e      	ldr	r3, [pc, #120]	; (800ce64 <__sfp+0x84>)
 800cdea:	681e      	ldr	r6, [r3, #0]
 800cdec:	69b3      	ldr	r3, [r6, #24]
 800cdee:	b913      	cbnz	r3, 800cdf6 <__sfp+0x16>
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f7ff ffbd 	bl	800cd70 <__sinit>
 800cdf6:	3648      	adds	r6, #72	; 0x48
 800cdf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	d503      	bpl.n	800ce08 <__sfp+0x28>
 800ce00:	6833      	ldr	r3, [r6, #0]
 800ce02:	b30b      	cbz	r3, 800ce48 <__sfp+0x68>
 800ce04:	6836      	ldr	r6, [r6, #0]
 800ce06:	e7f7      	b.n	800cdf8 <__sfp+0x18>
 800ce08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce0c:	b9d5      	cbnz	r5, 800ce44 <__sfp+0x64>
 800ce0e:	4b16      	ldr	r3, [pc, #88]	; (800ce68 <__sfp+0x88>)
 800ce10:	60e3      	str	r3, [r4, #12]
 800ce12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce16:	6665      	str	r5, [r4, #100]	; 0x64
 800ce18:	f000 f847 	bl	800ceaa <__retarget_lock_init_recursive>
 800ce1c:	f7ff ff96 	bl	800cd4c <__sfp_lock_release>
 800ce20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce28:	6025      	str	r5, [r4, #0]
 800ce2a:	61a5      	str	r5, [r4, #24]
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce34:	f7fd fb8c 	bl	800a550 <memset>
 800ce38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce40:	4620      	mov	r0, r4
 800ce42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce44:	3468      	adds	r4, #104	; 0x68
 800ce46:	e7d9      	b.n	800cdfc <__sfp+0x1c>
 800ce48:	2104      	movs	r1, #4
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	f7ff ff62 	bl	800cd14 <__sfmoreglue>
 800ce50:	4604      	mov	r4, r0
 800ce52:	6030      	str	r0, [r6, #0]
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d1d5      	bne.n	800ce04 <__sfp+0x24>
 800ce58:	f7ff ff78 	bl	800cd4c <__sfp_lock_release>
 800ce5c:	230c      	movs	r3, #12
 800ce5e:	603b      	str	r3, [r7, #0]
 800ce60:	e7ee      	b.n	800ce40 <__sfp+0x60>
 800ce62:	bf00      	nop
 800ce64:	0800d558 	.word	0x0800d558
 800ce68:	ffff0001 	.word	0xffff0001

0800ce6c <_fwalk_reent>:
 800ce6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce70:	4606      	mov	r6, r0
 800ce72:	4688      	mov	r8, r1
 800ce74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce78:	2700      	movs	r7, #0
 800ce7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce7e:	f1b9 0901 	subs.w	r9, r9, #1
 800ce82:	d505      	bpl.n	800ce90 <_fwalk_reent+0x24>
 800ce84:	6824      	ldr	r4, [r4, #0]
 800ce86:	2c00      	cmp	r4, #0
 800ce88:	d1f7      	bne.n	800ce7a <_fwalk_reent+0xe>
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce90:	89ab      	ldrh	r3, [r5, #12]
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d907      	bls.n	800cea6 <_fwalk_reent+0x3a>
 800ce96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	d003      	beq.n	800cea6 <_fwalk_reent+0x3a>
 800ce9e:	4629      	mov	r1, r5
 800cea0:	4630      	mov	r0, r6
 800cea2:	47c0      	blx	r8
 800cea4:	4307      	orrs	r7, r0
 800cea6:	3568      	adds	r5, #104	; 0x68
 800cea8:	e7e9      	b.n	800ce7e <_fwalk_reent+0x12>

0800ceaa <__retarget_lock_init_recursive>:
 800ceaa:	4770      	bx	lr

0800ceac <__retarget_lock_acquire_recursive>:
 800ceac:	4770      	bx	lr

0800ceae <__retarget_lock_release_recursive>:
 800ceae:	4770      	bx	lr

0800ceb0 <__swhatbuf_r>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	460e      	mov	r6, r1
 800ceb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb8:	2900      	cmp	r1, #0
 800ceba:	b096      	sub	sp, #88	; 0x58
 800cebc:	4614      	mov	r4, r2
 800cebe:	461d      	mov	r5, r3
 800cec0:	da07      	bge.n	800ced2 <__swhatbuf_r+0x22>
 800cec2:	2300      	movs	r3, #0
 800cec4:	602b      	str	r3, [r5, #0]
 800cec6:	89b3      	ldrh	r3, [r6, #12]
 800cec8:	061a      	lsls	r2, r3, #24
 800ceca:	d410      	bmi.n	800ceee <__swhatbuf_r+0x3e>
 800cecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ced0:	e00e      	b.n	800cef0 <__swhatbuf_r+0x40>
 800ced2:	466a      	mov	r2, sp
 800ced4:	f000 f902 	bl	800d0dc <_fstat_r>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	dbf2      	blt.n	800cec2 <__swhatbuf_r+0x12>
 800cedc:	9a01      	ldr	r2, [sp, #4]
 800cede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cee6:	425a      	negs	r2, r3
 800cee8:	415a      	adcs	r2, r3
 800ceea:	602a      	str	r2, [r5, #0]
 800ceec:	e7ee      	b.n	800cecc <__swhatbuf_r+0x1c>
 800ceee:	2340      	movs	r3, #64	; 0x40
 800cef0:	2000      	movs	r0, #0
 800cef2:	6023      	str	r3, [r4, #0]
 800cef4:	b016      	add	sp, #88	; 0x58
 800cef6:	bd70      	pop	{r4, r5, r6, pc}

0800cef8 <__smakebuf_r>:
 800cef8:	898b      	ldrh	r3, [r1, #12]
 800cefa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cefc:	079d      	lsls	r5, r3, #30
 800cefe:	4606      	mov	r6, r0
 800cf00:	460c      	mov	r4, r1
 800cf02:	d507      	bpl.n	800cf14 <__smakebuf_r+0x1c>
 800cf04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	6123      	str	r3, [r4, #16]
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	6163      	str	r3, [r4, #20]
 800cf10:	b002      	add	sp, #8
 800cf12:	bd70      	pop	{r4, r5, r6, pc}
 800cf14:	ab01      	add	r3, sp, #4
 800cf16:	466a      	mov	r2, sp
 800cf18:	f7ff ffca 	bl	800ceb0 <__swhatbuf_r>
 800cf1c:	9900      	ldr	r1, [sp, #0]
 800cf1e:	4605      	mov	r5, r0
 800cf20:	4630      	mov	r0, r6
 800cf22:	f7ff f987 	bl	800c234 <_malloc_r>
 800cf26:	b948      	cbnz	r0, 800cf3c <__smakebuf_r+0x44>
 800cf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2c:	059a      	lsls	r2, r3, #22
 800cf2e:	d4ef      	bmi.n	800cf10 <__smakebuf_r+0x18>
 800cf30:	f023 0303 	bic.w	r3, r3, #3
 800cf34:	f043 0302 	orr.w	r3, r3, #2
 800cf38:	81a3      	strh	r3, [r4, #12]
 800cf3a:	e7e3      	b.n	800cf04 <__smakebuf_r+0xc>
 800cf3c:	4b0d      	ldr	r3, [pc, #52]	; (800cf74 <__smakebuf_r+0x7c>)
 800cf3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf40:	89a3      	ldrh	r3, [r4, #12]
 800cf42:	6020      	str	r0, [r4, #0]
 800cf44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf48:	81a3      	strh	r3, [r4, #12]
 800cf4a:	9b00      	ldr	r3, [sp, #0]
 800cf4c:	6163      	str	r3, [r4, #20]
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	6120      	str	r0, [r4, #16]
 800cf52:	b15b      	cbz	r3, 800cf6c <__smakebuf_r+0x74>
 800cf54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f000 f8d1 	bl	800d100 <_isatty_r>
 800cf5e:	b128      	cbz	r0, 800cf6c <__smakebuf_r+0x74>
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	f023 0303 	bic.w	r3, r3, #3
 800cf66:	f043 0301 	orr.w	r3, r3, #1
 800cf6a:	81a3      	strh	r3, [r4, #12]
 800cf6c:	89a0      	ldrh	r0, [r4, #12]
 800cf6e:	4305      	orrs	r5, r0
 800cf70:	81a5      	strh	r5, [r4, #12]
 800cf72:	e7cd      	b.n	800cf10 <__smakebuf_r+0x18>
 800cf74:	0800cd09 	.word	0x0800cd09

0800cf78 <_malloc_usable_size_r>:
 800cf78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf7c:	1f18      	subs	r0, r3, #4
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	bfbc      	itt	lt
 800cf82:	580b      	ldrlt	r3, [r1, r0]
 800cf84:	18c0      	addlt	r0, r0, r3
 800cf86:	4770      	bx	lr

0800cf88 <_raise_r>:
 800cf88:	291f      	cmp	r1, #31
 800cf8a:	b538      	push	{r3, r4, r5, lr}
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	460d      	mov	r5, r1
 800cf90:	d904      	bls.n	800cf9c <_raise_r+0x14>
 800cf92:	2316      	movs	r3, #22
 800cf94:	6003      	str	r3, [r0, #0]
 800cf96:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf9e:	b112      	cbz	r2, 800cfa6 <_raise_r+0x1e>
 800cfa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfa4:	b94b      	cbnz	r3, 800cfba <_raise_r+0x32>
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 f830 	bl	800d00c <_getpid_r>
 800cfac:	462a      	mov	r2, r5
 800cfae:	4601      	mov	r1, r0
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb6:	f000 b817 	b.w	800cfe8 <_kill_r>
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d00a      	beq.n	800cfd4 <_raise_r+0x4c>
 800cfbe:	1c59      	adds	r1, r3, #1
 800cfc0:	d103      	bne.n	800cfca <_raise_r+0x42>
 800cfc2:	2316      	movs	r3, #22
 800cfc4:	6003      	str	r3, [r0, #0]
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	e7e7      	b.n	800cf9a <_raise_r+0x12>
 800cfca:	2400      	movs	r4, #0
 800cfcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	4798      	blx	r3
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e7e0      	b.n	800cf9a <_raise_r+0x12>

0800cfd8 <raise>:
 800cfd8:	4b02      	ldr	r3, [pc, #8]	; (800cfe4 <raise+0xc>)
 800cfda:	4601      	mov	r1, r0
 800cfdc:	6818      	ldr	r0, [r3, #0]
 800cfde:	f7ff bfd3 	b.w	800cf88 <_raise_r>
 800cfe2:	bf00      	nop
 800cfe4:	200000d0 	.word	0x200000d0

0800cfe8 <_kill_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d07      	ldr	r5, [pc, #28]	; (800d008 <_kill_r+0x20>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	4611      	mov	r1, r2
 800cff4:	602b      	str	r3, [r5, #0]
 800cff6:	f7f6 ff93 	bl	8003f20 <_kill>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	d102      	bne.n	800d004 <_kill_r+0x1c>
 800cffe:	682b      	ldr	r3, [r5, #0]
 800d000:	b103      	cbz	r3, 800d004 <_kill_r+0x1c>
 800d002:	6023      	str	r3, [r4, #0]
 800d004:	bd38      	pop	{r3, r4, r5, pc}
 800d006:	bf00      	nop
 800d008:	2000075c 	.word	0x2000075c

0800d00c <_getpid_r>:
 800d00c:	f7f6 bf80 	b.w	8003f10 <_getpid>

0800d010 <__sread>:
 800d010:	b510      	push	{r4, lr}
 800d012:	460c      	mov	r4, r1
 800d014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d018:	f000 f894 	bl	800d144 <_read_r>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	bfab      	itete	ge
 800d020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d022:	89a3      	ldrhlt	r3, [r4, #12]
 800d024:	181b      	addge	r3, r3, r0
 800d026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d02a:	bfac      	ite	ge
 800d02c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d02e:	81a3      	strhlt	r3, [r4, #12]
 800d030:	bd10      	pop	{r4, pc}

0800d032 <__swrite>:
 800d032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d036:	461f      	mov	r7, r3
 800d038:	898b      	ldrh	r3, [r1, #12]
 800d03a:	05db      	lsls	r3, r3, #23
 800d03c:	4605      	mov	r5, r0
 800d03e:	460c      	mov	r4, r1
 800d040:	4616      	mov	r6, r2
 800d042:	d505      	bpl.n	800d050 <__swrite+0x1e>
 800d044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d048:	2302      	movs	r3, #2
 800d04a:	2200      	movs	r2, #0
 800d04c:	f000 f868 	bl	800d120 <_lseek_r>
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d05a:	81a3      	strh	r3, [r4, #12]
 800d05c:	4632      	mov	r2, r6
 800d05e:	463b      	mov	r3, r7
 800d060:	4628      	mov	r0, r5
 800d062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d066:	f000 b817 	b.w	800d098 <_write_r>

0800d06a <__sseek>:
 800d06a:	b510      	push	{r4, lr}
 800d06c:	460c      	mov	r4, r1
 800d06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d072:	f000 f855 	bl	800d120 <_lseek_r>
 800d076:	1c43      	adds	r3, r0, #1
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	bf15      	itete	ne
 800d07c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d07e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d086:	81a3      	strheq	r3, [r4, #12]
 800d088:	bf18      	it	ne
 800d08a:	81a3      	strhne	r3, [r4, #12]
 800d08c:	bd10      	pop	{r4, pc}

0800d08e <__sclose>:
 800d08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d092:	f000 b813 	b.w	800d0bc <_close_r>
	...

0800d098 <_write_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d07      	ldr	r5, [pc, #28]	; (800d0b8 <_write_r+0x20>)
 800d09c:	4604      	mov	r4, r0
 800d09e:	4608      	mov	r0, r1
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	602a      	str	r2, [r5, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	f7f6 ff71 	bl	8003f8e <_write>
 800d0ac:	1c43      	adds	r3, r0, #1
 800d0ae:	d102      	bne.n	800d0b6 <_write_r+0x1e>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	b103      	cbz	r3, 800d0b6 <_write_r+0x1e>
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	2000075c 	.word	0x2000075c

0800d0bc <_close_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4d06      	ldr	r5, [pc, #24]	; (800d0d8 <_close_r+0x1c>)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	f7f6 ff7d 	bl	8003fc6 <_close>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_close_r+0x1a>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_close_r+0x1a>
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	2000075c 	.word	0x2000075c

0800d0dc <_fstat_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	; (800d0fc <_fstat_r+0x20>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	602b      	str	r3, [r5, #0]
 800d0ea:	f7f6 ff78 	bl	8003fde <_fstat>
 800d0ee:	1c43      	adds	r3, r0, #1
 800d0f0:	d102      	bne.n	800d0f8 <_fstat_r+0x1c>
 800d0f2:	682b      	ldr	r3, [r5, #0]
 800d0f4:	b103      	cbz	r3, 800d0f8 <_fstat_r+0x1c>
 800d0f6:	6023      	str	r3, [r4, #0]
 800d0f8:	bd38      	pop	{r3, r4, r5, pc}
 800d0fa:	bf00      	nop
 800d0fc:	2000075c 	.word	0x2000075c

0800d100 <_isatty_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d06      	ldr	r5, [pc, #24]	; (800d11c <_isatty_r+0x1c>)
 800d104:	2300      	movs	r3, #0
 800d106:	4604      	mov	r4, r0
 800d108:	4608      	mov	r0, r1
 800d10a:	602b      	str	r3, [r5, #0]
 800d10c:	f7f6 ff77 	bl	8003ffe <_isatty>
 800d110:	1c43      	adds	r3, r0, #1
 800d112:	d102      	bne.n	800d11a <_isatty_r+0x1a>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b103      	cbz	r3, 800d11a <_isatty_r+0x1a>
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	2000075c 	.word	0x2000075c

0800d120 <_lseek_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4d07      	ldr	r5, [pc, #28]	; (800d140 <_lseek_r+0x20>)
 800d124:	4604      	mov	r4, r0
 800d126:	4608      	mov	r0, r1
 800d128:	4611      	mov	r1, r2
 800d12a:	2200      	movs	r2, #0
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7f6 ff70 	bl	8004014 <_lseek>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_lseek_r+0x1e>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_lseek_r+0x1e>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	2000075c 	.word	0x2000075c

0800d144 <_read_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4d07      	ldr	r5, [pc, #28]	; (800d164 <_read_r+0x20>)
 800d148:	4604      	mov	r4, r0
 800d14a:	4608      	mov	r0, r1
 800d14c:	4611      	mov	r1, r2
 800d14e:	2200      	movs	r2, #0
 800d150:	602a      	str	r2, [r5, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	f7f6 fefe 	bl	8003f54 <_read>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_read_r+0x1e>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_read_r+0x1e>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	2000075c 	.word	0x2000075c

0800d168 <_init>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	bf00      	nop
 800d16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16e:	bc08      	pop	{r3}
 800d170:	469e      	mov	lr, r3
 800d172:	4770      	bx	lr

0800d174 <_fini>:
 800d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d176:	bf00      	nop
 800d178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d17a:	bc08      	pop	{r3}
 800d17c:	469e      	mov	lr, r3
 800d17e:	4770      	bx	lr

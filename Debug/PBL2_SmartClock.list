
PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  0800d160  0800d160  0001d160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d91c  0800d91c  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d91c  0800d91c  0001d91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d924  0800d924  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d924  0800d924  0001d924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800d92c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  200002b0  0800dbd8  000202b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  0800dbd8  00020770  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c25e  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c5f  00000000  00000000  0003c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00040198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00041868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b560  00000000  00000000  00042d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c076  00000000  00000000  0006e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101d7c  00000000  00000000  0008a366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c0e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e40  00000000  00000000  0018c138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b0 	.word	0x200002b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d148 	.word	0x0800d148

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b4 	.word	0x200002b4
 800023c:	0800d148 	.word	0x0800d148

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f005 fd33 	bl	8006110 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f004 ff7d 	bl	80055c4 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000388 	.word	0x20000388

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000384 	.word	0x20000384

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f005 fd63 	bl	8006338 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000388 	.word	0x20000388

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 fe2e 	bl	800a52c <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f005 fc11 	bl	8006110 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f004 fe68 	bl	80055c4 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000388 	.word	0x20000388

08000900 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	4b97      	ldr	r3, [pc, #604]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a96      	ldr	r2, [pc, #600]	; (8000b74 <MX_GPIO_Init+0x274>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b94      	ldr	r3, [pc, #592]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b91      	ldr	r3, [pc, #580]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a90      	ldr	r2, [pc, #576]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b8e      	ldr	r3, [pc, #568]	; (8000b74 <MX_GPIO_Init+0x274>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b8b      	ldr	r3, [pc, #556]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a8a      	ldr	r2, [pc, #552]	; (8000b74 <MX_GPIO_Init+0x274>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b88      	ldr	r3, [pc, #544]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b85      	ldr	r3, [pc, #532]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a84      	ldr	r2, [pc, #528]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b82      	ldr	r3, [pc, #520]	; (8000b74 <MX_GPIO_Init+0x274>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b7f      	ldr	r3, [pc, #508]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a7e      	ldr	r2, [pc, #504]	; (8000b74 <MX_GPIO_Init+0x274>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b7c      	ldr	r3, [pc, #496]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b79      	ldr	r3, [pc, #484]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a78      	ldr	r2, [pc, #480]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b76      	ldr	r3, [pc, #472]	; (8000b74 <MX_GPIO_Init+0x274>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b73      	ldr	r3, [pc, #460]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a72      	ldr	r2, [pc, #456]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b6d      	ldr	r3, [pc, #436]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a6c      	ldr	r2, [pc, #432]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b6a      	ldr	r3, [pc, #424]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2168      	movs	r1, #104	; 0x68
 80009da:	4867      	ldr	r0, [pc, #412]	; (8000b78 <MX_GPIO_Init+0x278>)
 80009dc:	f005 f8ec 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009e6:	4865      	ldr	r0, [pc, #404]	; (8000b7c <MX_GPIO_Init+0x27c>)
 80009e8:	f005 f8e6 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4863      	ldr	r0, [pc, #396]	; (8000b80 <MX_GPIO_Init+0x280>)
 80009f2:	f005 f8e1 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009fc:	4861      	ldr	r0, [pc, #388]	; (8000b84 <MX_GPIO_Init+0x284>)
 80009fe:	f005 f8db 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000a02:	2314      	movs	r3, #20
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4858      	ldr	r0, [pc, #352]	; (8000b78 <MX_GPIO_Init+0x278>)
 8000a16:	f004 ff0b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000a1a:	2368      	movs	r3, #104	; 0x68
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4851      	ldr	r0, [pc, #324]	; (8000b78 <MX_GPIO_Init+0x278>)
 8000a32:	f004 fefd 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3c:	4b52      	ldr	r3, [pc, #328]	; (8000b88 <MX_GPIO_Init+0x288>)
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	484e      	ldr	r0, [pc, #312]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000a4c:	f004 fef0 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a50:	2332      	movs	r3, #50	; 0x32
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a60:	230b      	movs	r3, #11
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4846      	ldr	r0, [pc, #280]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000a6c:	f004 fee0 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a70:	2386      	movs	r3, #134	; 0x86
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a80:	230b      	movs	r3, #11
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4840      	ldr	r0, [pc, #256]	; (8000b8c <MX_GPIO_Init+0x28c>)
 8000a8c:	f004 fed0 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa2:	230b      	movs	r3, #11
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4833      	ldr	r0, [pc, #204]	; (8000b7c <MX_GPIO_Init+0x27c>)
 8000aae:	f004 febf 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ab2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482c      	ldr	r0, [pc, #176]	; (8000b7c <MX_GPIO_Init+0x27c>)
 8000acc:	f004 feb0 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4826      	ldr	r0, [pc, #152]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000ae8:	f004 fea2 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000b00:	f004 fe96 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000b04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4819      	ldr	r0, [pc, #100]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000b1e:	f004 fe87 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b22:	23f0      	movs	r3, #240	; 0xf0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4816      	ldr	r0, [pc, #88]	; (8000b90 <MX_GPIO_Init+0x290>)
 8000b36:	f004 fe7b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000b58:	f004 fe6a 	bl	8005830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2103      	movs	r1, #3
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f004 fe2e 	bl	80057c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b66:	2028      	movs	r0, #40	; 0x28
 8000b68:	f004 fe47 	bl	80057fa <HAL_NVIC_EnableIRQ>

}
 8000b6c:	bf00      	nop
 8000b6e:	3738      	adds	r7, #56	; 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40020800 	.word	0x40020800
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <MX_I2C1_Init+0x7c>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bd0:	f005 f824 	bl	8005c1c <HAL_I2C_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bda:	f003 f875 	bl	8003cc8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000be2:	f005 ff4b 	bl	8006a7c <HAL_I2CEx_ConfigAnalogFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f003 f86c 	bl	8003cc8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bf4:	f005 ff8d 	bl	8006b12 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f003 f863 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000388 	.word	0x20000388
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	00c0eaff 	.word	0x00c0eaff

08000c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x7c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d128      	bne.n	8000c88 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c60:	2304      	movs	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480b      	ldr	r0, [pc, #44]	; (8000c98 <HAL_I2C_MspInit+0x84>)
 8000c6c:	f004 fde0 	bl	8005830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca0:	f3bf 8f4f 	dsb	sy
}
 8000ca4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ca6:	f3bf 8f6f 	isb	sy
}
 8000caa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb4:	f3bf 8f4f 	dsb	sy
}
 8000cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
}
 8000cbe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ccc:	f3bf 8f4f 	dsb	sy
}
 8000cd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cd2:	f3bf 8f6f 	isb	sy
}
 8000cd6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf6:	f3bf 8f4f 	dsb	sy
}
 8000cfa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d02:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0b5b      	lsrs	r3, r3, #13
 8000d08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d0c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d16:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	015a      	lsls	r2, r3, #5
 8000d1c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d20:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d26:	4911      	ldr	r1, [pc, #68]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	60ba      	str	r2, [r7, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1ef      	bne.n	8000d18 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	60fa      	str	r2, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1e5      	bne.n	8000d0e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d42:	f3bf 8f4f 	dsb	sy
}
 8000d46:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d54:	f3bf 8f4f 	dsb	sy
}
 8000d58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d5a:	f3bf 8f6f 	isb	sy
}
 8000d5e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <println>:
uint8_t SerialNumber[] = {0x00, 0x00, 0x7E, 0x00, 0xD0, 0x01, 0x03, 0x2B, 0x7E};
static int pre_define_data_size = 70;

// Utility function
void println(char input[])
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	char stringBuffer[30];
	sprintf(stringBuffer, "%s\r\n", input);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	490a      	ldr	r1, [pc, #40]	; (8000da8 <println+0x38>)
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00a f81f 	bl	800adc4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa58 	bl	8000240 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	f107 0108 	add.w	r1, r7, #8
 8000d98:	23c8      	movs	r3, #200	; 0xc8
 8000d9a:	4804      	ldr	r0, [pc, #16]	; (8000dac <println+0x3c>)
 8000d9c:	f008 fe6e 	bl	8009a7c <HAL_UART_Transmit>
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800d160 	.word	0x0800d160
 8000dac:	200005d0 	.word	0x200005d0

08000db0 <sensirion_bytes_to_float>:
	HAL_UART_Transmit(&huart3, (uint8_t *)data, pre_define_data_size, 1000);
}

// For convert concatenate hex to float ieee754
float sensirion_bytes_to_float(const uint32_t bytes)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32_value;
		float float32;
	} tmp;

	tmp.u32_value = bytes;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60fb      	str	r3, [r7, #12]
	return tmp.float32;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	ee07 3a90 	vmov	s15, r3
}
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <wake_sensirion>:

// Wake up SPS30 by sent start frame
uint8_t *wake_sensirion()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent start frame");

	static uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	e007      	b.n	8000dec <wake_sensirion+0x1c>
	{
		data[i] = 0x00;
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <wake_sensirion+0x68>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3301      	adds	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b45      	cmp	r3, #69	; 0x45
 8000df0:	d9f4      	bls.n	8000ddc <wake_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000df2:	bf00      	nop
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <wake_sensirion+0x6c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfe:	2b40      	cmp	r3, #64	; 0x40
 8000e00:	d1f8      	bne.n	8000df4 <wake_sensirion+0x24>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	220a      	movs	r2, #10
 8000e08:	490d      	ldr	r1, [pc, #52]	; (8000e40 <wake_sensirion+0x70>)
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <wake_sensirion+0x6c>)
 8000e0c:	f008 fe36 	bl	8009a7c <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e10:	bf00      	nop
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <wake_sensirion+0x6c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1c:	2b40      	cmp	r3, #64	; 0x40
 8000e1e:	d1f8      	bne.n	8000e12 <wake_sensirion+0x42>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	2246      	movs	r2, #70	; 0x46
 8000e26:	4904      	ldr	r1, [pc, #16]	; (8000e38 <wake_sensirion+0x68>)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <wake_sensirion+0x6c>)
 8000e2a:	f008 feba 	bl	8009ba2 <HAL_UART_Receive>
	//HAL_Delay(1000);
	return data;
 8000e2e:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <wake_sensirion+0x68>)
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000308 	.word	0x20000308
 8000e3c:	20000654 	.word	0x20000654
 8000e40:	20000000 	.word	0x20000000

08000e44 <read_sensirion>:

// Read from SPS30 by sent read frame
float *read_sensirion()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a8      	sub	sp, #160	; 0xa0
 8000e48:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent read frame");

	uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e50:	e00b      	b.n	8000e6a <read_sensirion+0x26>
	{
		data[i] = 0x00;
 8000e52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e64:	3301      	adds	r3, #1
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e6e:	2b45      	cmp	r3, #69	; 0x45
 8000e70:	d9ef      	bls.n	8000e52 <read_sensirion+0xe>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e72:	bf00      	nop
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <read_sensirion+0x1d0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7e:	2b40      	cmp	r3, #64	; 0x40
 8000e80:	d1f8      	bne.n	8000e74 <read_sensirion+0x30>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	2208      	movs	r2, #8
 8000e88:	4963      	ldr	r1, [pc, #396]	; (8001018 <read_sensirion+0x1d4>)
 8000e8a:	4862      	ldr	r0, [pc, #392]	; (8001014 <read_sensirion+0x1d0>)
 8000e8c:	f008 fdf6 	bl	8009a7c <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e90:	bf00      	nop
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <read_sensirion+0x1d0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	2b40      	cmp	r3, #64	; 0x40
 8000e9e:	d1f8      	bne.n	8000e92 <read_sensirion+0x4e>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 100); // from 1000 to 100
 8000ea0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2246      	movs	r2, #70	; 0x46
 8000ea8:	485a      	ldr	r0, [pc, #360]	; (8001014 <read_sensirion+0x1d0>)
 8000eaa:	f008 fe7a 	bl	8009ba2 <HAL_UART_Receive>

	// Check for start frame
	if (data[0] == 0x7E && data[1] == 0x00)
 8000eae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000eb2:	2b7e      	cmp	r3, #126	; 0x7e
 8000eb4:	f040 80a8 	bne.w	8001008 <read_sensirion+0x1c4>
 8000eb8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 80a3 	bne.w	8001008 <read_sensirion+0x1c4>
	{
		// Header frame
		uint8_t command = data[2];
 8000ec2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000ec6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t errorcode = data[3];
 8000eca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ece:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		uint8_t length = data[4];
 8000ed2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ed6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		uint8_t state = data[5];
 8000eda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ede:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

		uint8_t checksum;
		// Find checksum frame by start from the back of the array
		for (uint8_t i = sizeof(data); i > 0; i--)
 8000ee2:	2346      	movs	r3, #70	; 0x46
 8000ee4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000ee8:	e017      	b.n	8000f1a <read_sensirion+0xd6>
		{
			if (data[i] == 0x7E)
 8000eea:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000eee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000ef8:	2b7e      	cmp	r3, #126	; 0x7e
 8000efa:	d109      	bne.n	8000f10 <read_sensirion+0xcc>
			{
				data[i - 1] = checksum;
 8000efc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000f00:	3b01      	subs	r3, #1
 8000f02:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000f06:	4413      	add	r3, r2
 8000f08:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000f0c:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (uint8_t i = sizeof(data); i > 0; i--)
 8000f10:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000f14:	3b01      	subs	r3, #1
 8000f16:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000f1a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1e3      	bne.n	8000eea <read_sensirion+0xa6>
		}

		uint32_t concatenateHex[10];
		static float actualValue[10];
		// Concatenate HEX(2,2,2,2) into HEX(8) and convert concatenate hex to float ieee754
		for (int i = 0; i < 10; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f28:	e068      	b.n	8000ffc <read_sensirion+0x1b8>
		{
			// 40 HEX(2) into 10 Groups
			// Skip first 5 bits (header)
			concatenateHex[i] = ((data[4 * i + 5]) << 24) + ((data[(4 * i) + 1 + 5]) << 16) + ((data[(4 * i) + 2 + 5]) << 8) + (data[(4 * i) + 3 + 5]);
 8000f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	3305      	adds	r3, #5
 8000f32:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000f36:	4413      	add	r3, r2
 8000f38:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f3c:	061a      	lsls	r2, r3, #24
 8000f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	3306      	adds	r3, #6
 8000f46:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	441a      	add	r2, r3
 8000f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	3307      	adds	r3, #7
 8000f5c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f60:	440b      	add	r3, r1
 8000f62:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	4413      	add	r3, r2
 8000f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f6e:	3202      	adds	r2, #2
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f76:	440a      	add	r2, r1
 8000f78:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f843 2ca0 	str.w	r2, [r3, #-160]

			// Convert sensirion bytes to float
			actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 8000f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff05 	bl	8000db0 <sensirion_bytes_to_float>
 8000fa6:	eef0 7a40 	vmov.f32	s15, s0
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <read_sensirion+0x1d8>)
 8000fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	edc3 7a00 	vstr	s15, [r3]

			// ! For debug only
			char stringBuffer[30];
			sprintf(stringBuffer, "%.4f\r\n", actualValue[i]);
 8000fb8:	4a18      	ldr	r2, [pc, #96]	; (800101c <read_sensirion+0x1d8>)
 8000fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fce:	ec53 2b17 	vmov	r2, r3, d7
 8000fd2:	4913      	ldr	r1, [pc, #76]	; (8001020 <read_sensirion+0x1dc>)
 8000fd4:	f009 fef6 	bl	800adc4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f92f 	bl	8000240 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fea:	23c8      	movs	r3, #200	; 0xc8
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <read_sensirion+0x1e0>)
 8000fee:	f008 fd45 	bl	8009a7c <HAL_UART_Transmit>
		for (int i = 0; i < 10; i++)
 8000ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000ffc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001000:	2b09      	cmp	r3, #9
 8001002:	dd92      	ble.n	8000f2a <read_sensirion+0xe6>
		}
		//HAL_Delay(1000);
		return actualValue;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <read_sensirion+0x1d8>)
 8001006:	e000      	b.n	800100a <read_sensirion+0x1c6>
	}
	else
	{
		//HAL_Delay(1000);
		return NULL;
 8001008:	2300      	movs	r3, #0
	}
}
 800100a:	4618      	mov	r0, r3
 800100c:	37a0      	adds	r7, #160	; 0xa0
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000654 	.word	0x20000654
 8001018:	2000000c 	.word	0x2000000c
 800101c:	20000350 	.word	0x20000350
 8001020:	0800d168 	.word	0x0800d168
 8001024:	200005d0 	.word	0x200005d0

08001028 <sent_string_to_mcu>:
#include "string.h"
#include "stdio.h"

void sent_string_to_mcu(char data[]){
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800102e:	af00      	add	r7, sp, #0
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	6018      	str	r0, [r3, #0]
	char stringBuffer[500];
	sprintf(stringBuffer, "%s\n" , data);
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	f107 000c 	add.w	r0, r7, #12
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	490a      	ldr	r1, [pc, #40]	; (8001068 <sent_string_to_mcu+0x40>)
 800103e:	f009 fec1 	bl	800adc4 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f8fa 	bl	8000240 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	23c8      	movs	r3, #200	; 0xc8
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <sent_string_to_mcu+0x44>)
 8001058:	f008 fd10 	bl	8009a7c <HAL_UART_Transmit>
}
 800105c:	bf00      	nop
 800105e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800d170 	.word	0x0800d170
 800106c:	200006d8 	.word	0x200006d8

08001070 <saveData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Save EEPROM
void saveData(){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	//Clock
	EEPROM_Write_NUM (1, 0, hourNum);
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <saveData+0xb8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	2100      	movs	r1, #0
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fb74 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (2, 0, minuteNum);
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <saveData+0xbc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	2100      	movs	r1, #0
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff fb68 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (3, 0, secondNum);
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <saveData+0xc0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	2100      	movs	r1, #0
 80010b6:	2003      	movs	r0, #3
 80010b8:	f7ff fb5c 	bl	8000774 <EEPROM_Write_NUM>

	//Date
	EEPROM_Write_NUM (4, 0, dayIndex);
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <saveData+0xc4>)
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	2100      	movs	r1, #0
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fb4f 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (5, 0, date);
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <saveData+0xc8>)
 80010d8:	f993 3000 	ldrsb.w	r3, [r3]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	2100      	movs	r1, #0
 80010ea:	2005      	movs	r0, #5
 80010ec:	f7ff fb42 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (6, 0, monthIndex);
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <saveData+0xcc>)
 80010f2:	f993 3000 	ldrsb.w	r3, [r3]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001102:	2100      	movs	r1, #0
 8001104:	2006      	movs	r0, #6
 8001106:	f7ff fb35 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (7, 0, year);
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <saveData+0xd0>)
 800110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	2100      	movs	r1, #0
 800111e:	2007      	movs	r0, #7
 8001120:	f7ff fb28 	bl	8000774 <EEPROM_Write_NUM>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000034 	.word	0x20000034
 800112c:	20000030 	.word	0x20000030
 8001130:	2000002c 	.word	0x2000002c
 8001134:	200000a4 	.word	0x200000a4
 8001138:	20000056 	.word	0x20000056
 800113c:	200000a5 	.word	0x200000a5
 8001140:	200000a6 	.word	0x200000a6

08001144 <readData>:
// Read EEPROM
void readData(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	//Clock
	hourNum = EEPROM_Read_NUM (1, 0);
 800114a:	2100      	movs	r1, #0
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff fb2d 	bl	80007ac <EEPROM_Read_NUM>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115a:	ee17 2a90 	vmov	r2, s15
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <readData+0xc4>)
 8001160:	601a      	str	r2, [r3, #0]
	minuteNum = EEPROM_Read_NUM (2, 0);
 8001162:	2100      	movs	r1, #0
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fb21 	bl	80007ac <EEPROM_Read_NUM>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 2a90 	vmov	r2, s15
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <readData+0xc8>)
 8001178:	601a      	str	r2, [r3, #0]
	secondNum = EEPROM_Read_NUM (3, 0);
 800117a:	2100      	movs	r1, #0
 800117c:	2003      	movs	r0, #3
 800117e:	f7ff fb15 	bl	80007ac <EEPROM_Read_NUM>
 8001182:	eef0 7a40 	vmov.f32	s15, s0
 8001186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118a:	ee17 2a90 	vmov	r2, s15
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <readData+0xcc>)
 8001190:	601a      	str	r2, [r3, #0]

	//Date
	dayIndex = EEPROM_Read_NUM (4, 0);
 8001192:	2100      	movs	r1, #0
 8001194:	2004      	movs	r0, #4
 8001196:	f7ff fb09 	bl	80007ac <EEPROM_Read_NUM>
 800119a:	eef0 7a40 	vmov.f32	s15, s0
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80011a6:	793b      	ldrb	r3, [r7, #4]
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <readData+0xd0>)
 80011ac:	701a      	strb	r2, [r3, #0]
	date = EEPROM_Read_NUM (5, 0);
 80011ae:	2100      	movs	r1, #0
 80011b0:	2005      	movs	r0, #5
 80011b2:	f7ff fafb 	bl	80007ac <EEPROM_Read_NUM>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011be:	edc7 7a01 	vstr	s15, [r7, #4]
 80011c2:	793b      	ldrb	r3, [r7, #4]
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <readData+0xd4>)
 80011c8:	701a      	strb	r2, [r3, #0]
	monthIndex = EEPROM_Read_NUM (6, 0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	2006      	movs	r0, #6
 80011ce:	f7ff faed 	bl	80007ac <EEPROM_Read_NUM>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011da:	edc7 7a01 	vstr	s15, [r7, #4]
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <readData+0xd8>)
 80011e4:	701a      	strb	r2, [r3, #0]
	year = EEPROM_Read_NUM (7, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2007      	movs	r0, #7
 80011ea:	f7ff fadf 	bl	80007ac <EEPROM_Read_NUM>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f6:	ee17 3a90 	vmov	r3, s15
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <readData+0xdc>)
 80011fe:	801a      	strh	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000034 	.word	0x20000034
 800120c:	20000030 	.word	0x20000030
 8001210:	2000002c 	.word	0x2000002c
 8001214:	200000a4 	.word	0x200000a4
 8001218:	20000056 	.word	0x20000056
 800121c:	200000a5 	.word	0x200000a5
 8001220:	200000a6 	.word	0x200000a6

08001224 <eraseAllData>:

// Erase EERPOM
void eraseAllData(){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	e007      	b.n	8001240 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fb37 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001246:	dbf3      	blt.n	8001230 <eraseAllData+0xc>
	}
	year = 2021;
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <eraseAllData+0x54>)
 800124a:	f240 72e5 	movw	r2, #2021	; 0x7e5
 800124e:	801a      	strh	r2, [r3, #0]
	EEPROM_Write_NUM (7, 0, year); // override year
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <eraseAllData+0x54>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	2100      	movs	r1, #0
 8001264:	2007      	movs	r0, #7
 8001266:	f7ff fa85 	bl	8000774 <EEPROM_Write_NUM>
	readData(); // Read from Clean EEPROM
 800126a:	f7ff ff6b 	bl	8001144 <readData>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000a6 	.word	0x200000a6

0800127c <checkResetData>:

void checkResetData(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	if(userResetButton == 1){
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <checkResetData+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <checkResetData+0x16>
		eraseAllData();
 8001288:	f7ff ffcc 	bl	8001224 <eraseAllData>
		userResetButton = 0;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <checkResetData+0x1c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	}
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002e0 	.word	0x200002e0

0800129c <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 ff3b 	bl	8005124 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f003 fd32 	bl	8004d18 <ILI9341_Set_Rotation>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <check31Days>:

bool check31Days(){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	if(monthIndex == 0 || monthIndex == 2 || monthIndex == 4 || monthIndex == 6 || monthIndex == 7 || monthIndex == 9 || monthIndex == 11){
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <check31Days+0x5c>)
 80012c2:	f993 3000 	ldrsb.w	r3, [r3]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01d      	beq.n	8001306 <check31Days+0x4a>
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <check31Days+0x5c>)
 80012cc:	f993 3000 	ldrsb.w	r3, [r3]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d018      	beq.n	8001306 <check31Days+0x4a>
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <check31Days+0x5c>)
 80012d6:	f993 3000 	ldrsb.w	r3, [r3]
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d013      	beq.n	8001306 <check31Days+0x4a>
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <check31Days+0x5c>)
 80012e0:	f993 3000 	ldrsb.w	r3, [r3]
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d00e      	beq.n	8001306 <check31Days+0x4a>
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <check31Days+0x5c>)
 80012ea:	f993 3000 	ldrsb.w	r3, [r3]
 80012ee:	2b07      	cmp	r3, #7
 80012f0:	d009      	beq.n	8001306 <check31Days+0x4a>
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <check31Days+0x5c>)
 80012f4:	f993 3000 	ldrsb.w	r3, [r3]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d004      	beq.n	8001306 <check31Days+0x4a>
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <check31Days+0x5c>)
 80012fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001302:	2b0b      	cmp	r3, #11
 8001304:	d101      	bne.n	800130a <check31Days+0x4e>
		return true;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <check31Days+0x50>
	}else{
		return false;
 800130a:	2300      	movs	r3, #0
	}
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200000a5 	.word	0x200000a5

0800131c <setDayOneIncrementMonth>:
void setDayOneIncrementMonth(uint8_t num){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	if(date > num){
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <setDayOneIncrementMonth+0x48>)
 8001328:	f993 3000 	ldrsb.w	r3, [r3]
 800132c:	461a      	mov	r2, r3
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	429a      	cmp	r2, r3
 8001332:	dd10      	ble.n	8001356 <setDayOneIncrementMonth+0x3a>
		date = 1;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <setDayOneIncrementMonth+0x48>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
		if(mode != 100){
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <setDayOneIncrementMonth+0x4c>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d008      	beq.n	8001356 <setDayOneIncrementMonth+0x3a>
			monthIndex++;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <setDayOneIncrementMonth+0x50>)
 8001346:	f993 3000 	ldrsb.w	r3, [r3]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	b25a      	sxtb	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <setDayOneIncrementMonth+0x50>)
 8001354:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000056 	.word	0x20000056
 8001368:	2000004e 	.word	0x2000004e
 800136c:	200000a5 	.word	0x200000a5

08001370 <setDayX>:
void setDayX(uint8_t num){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	date = num;
 800137a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <setDayX+0x20>)
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000056 	.word	0x20000056

08001394 <calculationClock>:

//Calculation
void calculationClock(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

	millisecondHAL = HAL_GetTick();
 8001398:	f004 f908 	bl	80055ac <HAL_GetTick>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	498a      	ldr	r1, [pc, #552]	; (80015d0 <calculationClock+0x23c>)
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]

	//Normal Clock
	if (millisecond >= 1000){
 80013aa:	4b8a      	ldr	r3, [pc, #552]	; (80015d4 <calculationClock+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b2:	d307      	bcc.n	80013c4 <calculationClock+0x30>
		millisecond = 0;
 80013b4:	4b87      	ldr	r3, [pc, #540]	; (80015d4 <calculationClock+0x240>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
		secondNum++;
 80013ba:	4b87      	ldr	r3, [pc, #540]	; (80015d8 <calculationClock+0x244>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a85      	ldr	r2, [pc, #532]	; (80015d8 <calculationClock+0x244>)
 80013c2:	6013      	str	r3, [r2, #0]
	}
	if (secondNum >= 60){
 80013c4:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <calculationClock+0x244>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b3b      	cmp	r3, #59	; 0x3b
 80013ca:	dd0c      	ble.n	80013e6 <calculationClock+0x52>
		secondNum = 0;
 80013cc:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <calculationClock+0x244>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <calculationClock+0x248>)
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d004      	beq.n	80013e6 <calculationClock+0x52>
			minuteNum++;
 80013dc:	4b80      	ldr	r3, [pc, #512]	; (80015e0 <calculationClock+0x24c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a7f      	ldr	r2, [pc, #508]	; (80015e0 <calculationClock+0x24c>)
 80013e4:	6013      	str	r3, [r2, #0]
		}
	}
	if (minuteNum >= 60){
 80013e6:	4b7e      	ldr	r3, [pc, #504]	; (80015e0 <calculationClock+0x24c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b3b      	cmp	r3, #59	; 0x3b
 80013ec:	dd0c      	ble.n	8001408 <calculationClock+0x74>
		minuteNum = 0;
 80013ee:	4b7c      	ldr	r3, [pc, #496]	; (80015e0 <calculationClock+0x24c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 80013f4:	4b79      	ldr	r3, [pc, #484]	; (80015dc <calculationClock+0x248>)
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d004      	beq.n	8001408 <calculationClock+0x74>
			hourNum++;
 80013fe:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <calculationClock+0x250>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <calculationClock+0x250>)
 8001406:	6013      	str	r3, [r2, #0]
		}
	}
	if (hourNum >= 24){
 8001408:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <calculationClock+0x250>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b17      	cmp	r3, #23
 800140e:	dd19      	ble.n	8001444 <calculationClock+0xb0>
		hourNum = 0;
 8001410:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <calculationClock+0x250>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001416:	4b71      	ldr	r3, [pc, #452]	; (80015dc <calculationClock+0x248>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d011      	beq.n	8001444 <calculationClock+0xb0>
			dayIndex++;
 8001420:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <calculationClock+0x254>)
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	3301      	adds	r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	b25a      	sxtb	r2, r3
 800142e:	4b6e      	ldr	r3, [pc, #440]	; (80015e8 <calculationClock+0x254>)
 8001430:	701a      	strb	r2, [r3, #0]
			date++;
 8001432:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <calculationClock+0x258>)
 8001434:	f993 3000 	ldrsb.w	r3, [r3]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3301      	adds	r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	b25a      	sxtb	r2, r3
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <calculationClock+0x258>)
 8001442:	701a      	strb	r2, [r3, #0]
		}
	}
	//Normal Date
	if (dayIndex >= 7){
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <calculationClock+0x254>)
 8001446:	f993 3000 	ldrsb.w	r3, [r3]
 800144a:	2b06      	cmp	r3, #6
 800144c:	dd02      	ble.n	8001454 <calculationClock+0xc0>
		dayIndex = 0;
 800144e:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <calculationClock+0x254>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	}
	if (year % 4 == 0){ //check for FEB 29 days
 8001454:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <calculationClock+0x25c>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	b29b      	uxth	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d115      	bne.n	8001492 <calculationClock+0xfe>
		if(monthIndex == 1){
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <calculationClock+0x260>)
 8001468:	f993 3000 	ldrsb.w	r3, [r3]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d103      	bne.n	8001478 <calculationClock+0xe4>
			setDayOneIncrementMonth(29); // 29 days
 8001470:	201d      	movs	r0, #29
 8001472:	f7ff ff53 	bl	800131c <setDayOneIncrementMonth>
 8001476:	e021      	b.n	80014bc <calculationClock+0x128>
		}else if(check31Days() == true){
 8001478:	f7ff ff20 	bl	80012bc <check31Days>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <calculationClock+0xf6>
			setDayOneIncrementMonth(31); // 31 days
 8001482:	201f      	movs	r0, #31
 8001484:	f7ff ff4a 	bl	800131c <setDayOneIncrementMonth>
 8001488:	e018      	b.n	80014bc <calculationClock+0x128>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 800148a:	201e      	movs	r0, #30
 800148c:	f7ff ff46 	bl	800131c <setDayOneIncrementMonth>
 8001490:	e014      	b.n	80014bc <calculationClock+0x128>
		}
	}else{
		if(monthIndex == 1){
 8001492:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <calculationClock+0x260>)
 8001494:	f993 3000 	ldrsb.w	r3, [r3]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d103      	bne.n	80014a4 <calculationClock+0x110>
			setDayOneIncrementMonth(28); // 28 days
 800149c:	201c      	movs	r0, #28
 800149e:	f7ff ff3d 	bl	800131c <setDayOneIncrementMonth>
 80014a2:	e00b      	b.n	80014bc <calculationClock+0x128>
		}else if(check31Days() == true){
 80014a4:	f7ff ff0a 	bl	80012bc <check31Days>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <calculationClock+0x122>
			setDayOneIncrementMonth(31); // 31 days
 80014ae:	201f      	movs	r0, #31
 80014b0:	f7ff ff34 	bl	800131c <setDayOneIncrementMonth>
 80014b4:	e002      	b.n	80014bc <calculationClock+0x128>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 80014b6:	201e      	movs	r0, #30
 80014b8:	f7ff ff30 	bl	800131c <setDayOneIncrementMonth>
		}
	}
	if (monthIndex >= 12){
 80014bc:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <calculationClock+0x260>)
 80014be:	f993 3000 	ldrsb.w	r3, [r3]
 80014c2:	2b0b      	cmp	r3, #11
 80014c4:	dd10      	ble.n	80014e8 <calculationClock+0x154>
		monthIndex = 0;
 80014c6:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <calculationClock+0x260>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		if (mode != 100){
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <calculationClock+0x248>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d008      	beq.n	80014e8 <calculationClock+0x154>
			year++;
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <calculationClock+0x25c>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <calculationClock+0x25c>)
 80014e6:	801a      	strh	r2, [r3, #0]
		}
	}
	if (year >= 10000){
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <calculationClock+0x25c>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80014f2:	4293      	cmp	r3, r2
 80014f4:	dd02      	ble.n	80014fc <calculationClock+0x168>
		year = 1;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <calculationClock+0x25c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	801a      	strh	r2, [r3, #0]
	}

	//check for editMode
	if(mode == 100){
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <calculationClock+0x248>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d15f      	bne.n	80015c6 <calculationClock+0x232>
		if (minuteNum < 0){
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <calculationClock+0x24c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	da02      	bge.n	8001514 <calculationClock+0x180>
			minuteNum = 59;
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <calculationClock+0x24c>)
 8001510:	223b      	movs	r2, #59	; 0x3b
 8001512:	601a      	str	r2, [r3, #0]
		}
		if (hourNum < 0){
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <calculationClock+0x250>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da02      	bge.n	8001522 <calculationClock+0x18e>
			hourNum = 23;
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <calculationClock+0x250>)
 800151e:	2217      	movs	r2, #23
 8001520:	601a      	str	r2, [r3, #0]
		}
		if (dayIndex < 0){
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <calculationClock+0x254>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da02      	bge.n	8001532 <calculationClock+0x19e>
			dayIndex = 6;
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <calculationClock+0x254>)
 800152e:	2206      	movs	r2, #6
 8001530:	701a      	strb	r2, [r3, #0]
		}
		if (date < 1){
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <calculationClock+0x258>)
 8001534:	f993 3000 	ldrsb.w	r3, [r3]
 8001538:	2b00      	cmp	r3, #0
 800153a:	dc33      	bgt.n	80015a4 <calculationClock+0x210>
			if (year % 4 == 0){ //check for FEB 29 days
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <calculationClock+0x25c>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	b29b      	uxth	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d115      	bne.n	800157a <calculationClock+0x1e6>
				if(monthIndex == 1){
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <calculationClock+0x260>)
 8001550:	f993 3000 	ldrsb.w	r3, [r3]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d103      	bne.n	8001560 <calculationClock+0x1cc>
					setDayX(29); // 29 days
 8001558:	201d      	movs	r0, #29
 800155a:	f7ff ff09 	bl	8001370 <setDayX>
 800155e:	e021      	b.n	80015a4 <calculationClock+0x210>
				}else if(check31Days() == true){
 8001560:	f7ff feac 	bl	80012bc <check31Days>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <calculationClock+0x1de>
					setDayX(31); // 31 days
 800156a:	201f      	movs	r0, #31
 800156c:	f7ff ff00 	bl	8001370 <setDayX>
 8001570:	e018      	b.n	80015a4 <calculationClock+0x210>
				}else{
					setDayX(30); // 30 days
 8001572:	201e      	movs	r0, #30
 8001574:	f7ff fefc 	bl	8001370 <setDayX>
 8001578:	e014      	b.n	80015a4 <calculationClock+0x210>
				}
			}else{
				if(monthIndex == 1){
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <calculationClock+0x260>)
 800157c:	f993 3000 	ldrsb.w	r3, [r3]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d103      	bne.n	800158c <calculationClock+0x1f8>
					setDayX(28); // 28 days
 8001584:	201c      	movs	r0, #28
 8001586:	f7ff fef3 	bl	8001370 <setDayX>
 800158a:	e00b      	b.n	80015a4 <calculationClock+0x210>
				}else if(check31Days() == true){
 800158c:	f7ff fe96 	bl	80012bc <check31Days>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <calculationClock+0x20a>
					setDayX(31); // 31 days
 8001596:	201f      	movs	r0, #31
 8001598:	f7ff feea 	bl	8001370 <setDayX>
 800159c:	e002      	b.n	80015a4 <calculationClock+0x210>
				}else{
					setDayX(30); // 30 days
 800159e:	201e      	movs	r0, #30
 80015a0:	f7ff fee6 	bl	8001370 <setDayX>
				}
			}
		}
		if (monthIndex < 0){
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <calculationClock+0x260>)
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da02      	bge.n	80015b4 <calculationClock+0x220>
			monthIndex = 11;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <calculationClock+0x260>)
 80015b0:	220b      	movs	r2, #11
 80015b2:	701a      	strb	r2, [r3, #0]
		}
		if (year < 1){
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <calculationClock+0x25c>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dc03      	bgt.n	80015c6 <calculationClock+0x232>
			year = 9999;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <calculationClock+0x25c>)
 80015c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80015c4:	801a      	strh	r2, [r3, #0]
		}
	}

	saveData();
 80015c6:	f7ff fd53 	bl	8001070 <saveData>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200002f0 	.word	0x200002f0
 80015d4:	200002cc 	.word	0x200002cc
 80015d8:	2000002c 	.word	0x2000002c
 80015dc:	2000004e 	.word	0x2000004e
 80015e0:	20000030 	.word	0x20000030
 80015e4:	20000034 	.word	0x20000034
 80015e8:	200000a4 	.word	0x200000a4
 80015ec:	20000056 	.word	0x20000056
 80015f0:	200000a6 	.word	0x200000a6
 80015f4:	200000a5 	.word	0x200000a5

080015f8 <dayScreen>:
//	}
//}


//Date Clock Atomic
void dayScreen(bool status, bool isEdit){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]

	if (prevDayIndex != dayIndex || isEdit == true){
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <dayScreen+0xe0>)
 800160a:	f993 2000 	ldrsb.w	r2, [r3]
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <dayScreen+0xe4>)
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	429a      	cmp	r2, r3
 8001616:	d102      	bne.n	800161e <dayScreen+0x26>
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d054      	beq.n	80016c8 <dayScreen+0xd0>
		if (status == true){
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d02a      	beq.n	800167a <dayScreen+0x82>
			sprintf(Temp_Buffer_text, "%s", dayText[dayIndex]);
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <dayScreen+0xe4>)
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	461a      	mov	r2, r3
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <dayScreen+0xe8>)
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	461a      	mov	r2, r3
 8001634:	492b      	ldr	r1, [pc, #172]	; (80016e4 <dayScreen+0xec>)
 8001636:	482c      	ldr	r0, [pc, #176]	; (80016e8 <dayScreen+0xf0>)
 8001638:	f009 fbc4 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <dayScreen+0xf4>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3b05      	subs	r3, #5
 8001644:	b2d9      	uxtb	r1, r3
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <dayScreen+0xf8>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001652:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80016d0 <dayScreen+0xd8>
 8001656:	ee27 7b06 	vmul.f64	d7, d7, d6
 800165a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800165e:	edc7 7a00 	vstr	s15, [r7]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	2300      	movs	r3, #0
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	2302      	movs	r3, #2
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <dayScreen+0xf0>)
 8001674:	f003 fa50 	bl	8004b18 <ILI9341_Draw_Text>
 8001678:	e021      	b.n	80016be <dayScreen+0xc6>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 800167a:	491e      	ldr	r1, [pc, #120]	; (80016f4 <dayScreen+0xfc>)
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <dayScreen+0xf0>)
 800167e:	f009 fba1 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <dayScreen+0xf4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	3b05      	subs	r3, #5
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <dayScreen+0xf8>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001698:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80016d0 <dayScreen+0xd8>
 800169c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016a4:	edc7 7a00 	vstr	s15, [r7]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2302      	movs	r3, #2
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <dayScreen+0xf0>)
 80016ba:	f003 fa2d 	bl	8004b18 <ILI9341_Draw_Text>
		}
		prevDayIndex = dayIndex;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <dayScreen+0xe4>)
 80016c0:	f993 2000 	ldrsb.w	r2, [r3]
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <dayScreen+0xe0>)
 80016c6:	701a      	strb	r2, [r3, #0]
	}
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	9999999a 	.word	0x9999999a
 80016d4:	3fb99999 	.word	0x3fb99999
 80016d8:	200000a9 	.word	0x200000a9
 80016dc:	200000a4 	.word	0x200000a4
 80016e0:	20000058 	.word	0x20000058
 80016e4:	0800d1c0 	.word	0x0800d1c0
 80016e8:	20000414 	.word	0x20000414
 80016ec:	20000048 	.word	0x20000048
 80016f0:	2000004a 	.word	0x2000004a
 80016f4:	0800d1c4 	.word	0x0800d1c4

080016f8 <dateScreen>:
void dateScreen(bool status, bool isEdit){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]
	if (prevDate != date || isEdit == true){
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <dateScreen+0xf0>)
 800170a:	f993 2000 	ldrsb.w	r2, [r3]
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <dateScreen+0xf4>)
 8001710:	f993 3000 	ldrsb.w	r3, [r3]
 8001714:	429a      	cmp	r2, r3
 8001716:	d102      	bne.n	800171e <dateScreen+0x26>
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d05a      	beq.n	80017d4 <dateScreen+0xdc>
		if (status == true){
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d02b      	beq.n	800177c <dateScreen+0x84>
			sprintf(Temp_Buffer_text, "%02d", (int)date);
 8001724:	4b31      	ldr	r3, [pc, #196]	; (80017ec <dateScreen+0xf4>)
 8001726:	f993 3000 	ldrsb.w	r3, [r3]
 800172a:	461a      	mov	r2, r3
 800172c:	4930      	ldr	r1, [pc, #192]	; (80017f0 <dateScreen+0xf8>)
 800172e:	4831      	ldr	r0, [pc, #196]	; (80017f4 <dateScreen+0xfc>)
 8001730:	f009 fb48 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <dateScreen+0x100>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <dateScreen+0x104>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4413      	add	r3, r2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	3303      	adds	r3, #3
 8001746:	b2d9      	uxtb	r1, r3
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <dateScreen+0x108>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001754:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80017e0 <dateScreen+0xe8>
 8001758:	ee27 7b06 	vmul.f64	d7, d7, d6
 800175c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001760:	edc7 7a00 	vstr	s15, [r7]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001774:	481f      	ldr	r0, [pc, #124]	; (80017f4 <dateScreen+0xfc>)
 8001776:	f003 f9cf 	bl	8004b18 <ILI9341_Draw_Text>
 800177a:	e026      	b.n	80017ca <dateScreen+0xd2>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 800177c:	4921      	ldr	r1, [pc, #132]	; (8001804 <dateScreen+0x10c>)
 800177e:	481d      	ldr	r0, [pc, #116]	; (80017f4 <dateScreen+0xfc>)
 8001780:	f009 fb20 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <dateScreen+0x100>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <dateScreen+0x104>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3303      	adds	r3, #3
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <dateScreen+0x108>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017a4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80017e0 <dateScreen+0xe8>
 80017a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017b0:	edc7 7a00 	vstr	s15, [r7]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2302      	movs	r3, #2
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <dateScreen+0xfc>)
 80017c6:	f003 f9a7 	bl	8004b18 <ILI9341_Draw_Text>
		}
		prevDate = date;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <dateScreen+0xf4>)
 80017cc:	f993 2000 	ldrsb.w	r2, [r3]
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <dateScreen+0xf0>)
 80017d2:	701a      	strb	r2, [r3, #0]
	}
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	f3af 8000 	nop.w
 80017e0:	9999999a 	.word	0x9999999a
 80017e4:	3fb99999 	.word	0x3fb99999
 80017e8:	200000a8 	.word	0x200000a8
 80017ec:	20000056 	.word	0x20000056
 80017f0:	0800d1c8 	.word	0x0800d1c8
 80017f4:	20000414 	.word	0x20000414
 80017f8:	20000048 	.word	0x20000048
 80017fc:	2000004c 	.word	0x2000004c
 8001800:	2000004a 	.word	0x2000004a
 8001804:	0800d1d0 	.word	0x0800d1d0

08001808 <monthScreen>:
void monthScreen(bool status, bool isEdit){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af02      	add	r7, sp, #8
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	if (prevMonthIndex != monthIndex || isEdit == true){
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <monthScreen+0x100>)
 800181a:	f993 2000 	ldrsb.w	r2, [r3]
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <monthScreen+0x104>)
 8001820:	f993 3000 	ldrsb.w	r3, [r3]
 8001824:	429a      	cmp	r2, r3
 8001826:	d102      	bne.n	800182e <monthScreen+0x26>
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d062      	beq.n	80018f4 <monthScreen+0xec>
		if (status == true){
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d031      	beq.n	8001898 <monthScreen+0x90>
			sprintf(Temp_Buffer_text, "%s", monthText[monthIndex]);
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <monthScreen+0x104>)
 8001836:	f993 3000 	ldrsb.w	r3, [r3]
 800183a:	461a      	mov	r2, r3
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <monthScreen+0x108>)
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	461a      	mov	r2, r3
 8001844:	4933      	ldr	r1, [pc, #204]	; (8001914 <monthScreen+0x10c>)
 8001846:	4834      	ldr	r0, [pc, #208]	; (8001918 <monthScreen+0x110>)
 8001848:	f009 fabc 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <monthScreen+0x114>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <monthScreen+0x118>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3b05      	subs	r3, #5
 8001862:	b2d9      	uxtb	r1, r3
 8001864:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <monthScreen+0x11c>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001870:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001900 <monthScreen+0xf8>
 8001874:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001878:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800187c:	edc7 7a00 	vstr	s15, [r7]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	2300      	movs	r3, #0
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2302      	movs	r3, #2
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <monthScreen+0x110>)
 8001892:	f003 f941 	bl	8004b18 <ILI9341_Draw_Text>
 8001896:	e028      	b.n	80018ea <monthScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001898:	4923      	ldr	r1, [pc, #140]	; (8001928 <monthScreen+0x120>)
 800189a:	481f      	ldr	r0, [pc, #124]	; (8001918 <monthScreen+0x110>)
 800189c:	f009 fa92 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <monthScreen+0x114>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <monthScreen+0x118>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3b05      	subs	r3, #5
 80018b6:	b2d9      	uxtb	r1, r3
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <monthScreen+0x11c>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018c4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001900 <monthScreen+0xf8>
 80018c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018d0:	edc7 7a00 	vstr	s15, [r7]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <monthScreen+0x110>)
 80018e6:	f003 f917 	bl	8004b18 <ILI9341_Draw_Text>
		}
		prevMonthIndex = monthIndex;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <monthScreen+0x104>)
 80018ec:	f993 2000 	ldrsb.w	r2, [r3]
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <monthScreen+0x100>)
 80018f2:	701a      	strb	r2, [r3, #0]
	}
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	f3af 8000 	nop.w
 8001900:	9999999a 	.word	0x9999999a
 8001904:	3fb99999 	.word	0x3fb99999
 8001908:	200000aa 	.word	0x200000aa
 800190c:	200000a5 	.word	0x200000a5
 8001910:	20000074 	.word	0x20000074
 8001914:	0800d1c0 	.word	0x0800d1c0
 8001918:	20000414 	.word	0x20000414
 800191c:	20000048 	.word	0x20000048
 8001920:	2000004c 	.word	0x2000004c
 8001924:	2000004a 	.word	0x2000004a
 8001928:	0800d1c4 	.word	0x0800d1c4
 800192c:	00000000 	.word	0x00000000

08001930 <yearScreen>:
void yearScreen(bool status, bool isEdit){
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af02      	add	r7, sp, #8
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	if (prevYear != year || isEdit == true){
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <yearScreen+0x100>)
 8001942:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <yearScreen+0x104>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	429a      	cmp	r2, r3
 800194e:	d102      	bne.n	8001956 <yearScreen+0x26>
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d062      	beq.n	8001a1c <yearScreen+0xec>
		if (status == true){
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02f      	beq.n	80019bc <yearScreen+0x8c>
			sprintf(Temp_Buffer_text, "%04d", (int)year);
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <yearScreen+0x104>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	461a      	mov	r2, r3
 8001964:	4934      	ldr	r1, [pc, #208]	; (8001a38 <yearScreen+0x108>)
 8001966:	4835      	ldr	r0, [pc, #212]	; (8001a3c <yearScreen+0x10c>)
 8001968:	f009 fa2c 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800196c:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <yearScreen+0x110>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <yearScreen+0x114>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	0049      	lsls	r1, r1, #1
 800197c:	440b      	add	r3, r1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3303      	adds	r3, #3
 8001986:	b2d9      	uxtb	r1, r3
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <yearScreen+0x118>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001994:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001a28 <yearScreen+0xf8>
 8001998:	ee27 7b06 	vmul.f64	d7, d7, d6
 800199c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019a0:	edc7 7a00 	vstr	s15, [r7]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	4821      	ldr	r0, [pc, #132]	; (8001a3c <yearScreen+0x10c>)
 80019b6:	f003 f8af 	bl	8004b18 <ILI9341_Draw_Text>
 80019ba:	e02a      	b.n	8001a12 <yearScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "    ");
 80019bc:	4923      	ldr	r1, [pc, #140]	; (8001a4c <yearScreen+0x11c>)
 80019be:	481f      	ldr	r0, [pc, #124]	; (8001a3c <yearScreen+0x10c>)
 80019c0:	f009 fa00 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <yearScreen+0x110>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <yearScreen+0x114>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4619      	mov	r1, r3
 80019d2:	0049      	lsls	r1, r1, #1
 80019d4:	440b      	add	r3, r1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	3303      	adds	r3, #3
 80019de:	b2d9      	uxtb	r1, r3
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <yearScreen+0x118>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019ec:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001a28 <yearScreen+0xf8>
 80019f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019f8:	edc7 7a00 	vstr	s15, [r7]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <yearScreen+0x10c>)
 8001a0e:	f003 f883 	bl	8004b18 <ILI9341_Draw_Text>
		}
		prevYear = year;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <yearScreen+0x104>)
 8001a14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <yearScreen+0x100>)
 8001a1a:	801a      	strh	r2, [r3, #0]
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	f3af 8000 	nop.w
 8001a28:	9999999a 	.word	0x9999999a
 8001a2c:	3fb99999 	.word	0x3fb99999
 8001a30:	200000ac 	.word	0x200000ac
 8001a34:	200000a6 	.word	0x200000a6
 8001a38:	0800d1d4 	.word	0x0800d1d4
 8001a3c:	20000414 	.word	0x20000414
 8001a40:	20000048 	.word	0x20000048
 8001a44:	2000004c 	.word	0x2000004c
 8001a48:	2000004a 	.word	0x2000004a
 8001a4c:	0800d1dc 	.word	0x0800d1dc

08001a50 <displayDateScreen>:

//Display Date Clock Screen
void displayDateScreen(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8001a54:	2100      	movs	r1, #0
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fdce 	bl	80015f8 <dayScreen>
	dateScreen(true, false);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fe4a 	bl	80016f8 <dateScreen>
	monthScreen(true, false);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff fece 	bl	8001808 <monthScreen>
	yearScreen(true, false);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7ff ff5e 	bl	8001930 <yearScreen>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <topBarScreen>:

//Top Screen
void topBarScreen(){
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af02      	add	r7, sp, #8
	displayDateScreen();
 8001a7e:	f7ff ffe7 	bl	8001a50 <displayDateScreen>

	//Alarm
	ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, YELLOW);
 8001a82:	4b99      	ldr	r3, [pc, #612]	; (8001ce8 <topBarScreen+0x270>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a8e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8001cc0 <topBarScreen+0x248>
 8001a92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a96:	4b95      	ldr	r3, [pc, #596]	; (8001cec <topBarScreen+0x274>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001aa2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aa6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	b298      	uxth	r0, r3
 8001ab0:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <topBarScreen+0x278>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001abc:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8001cc8 <topBarScreen+0x250>
 8001ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ac4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ac8:	ee17 3a90 	vmov	r3, s15
 8001acc:	b299      	uxth	r1, r3
 8001ace:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ad2:	2206      	movs	r2, #6
 8001ad4:	f002 fe1d 	bl	8004712 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, YELLOW);
 8001ad8:	4b83      	ldr	r3, [pc, #524]	; (8001ce8 <topBarScreen+0x270>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ae4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8001cc0 <topBarScreen+0x248>
 8001ae8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001aec:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <topBarScreen+0x274>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001afc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b00:	ee17 3a90 	vmov	r3, s15
 8001b04:	b298      	uxth	r0, r3
 8001b06:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <topBarScreen+0x278>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b12:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8001cd0 <topBarScreen+0x258>
 8001b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b26:	ee17 3a90 	vmov	r3, s15
 8001b2a:	b299      	uxth	r1, r3
 8001b2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b30:	2203      	movs	r2, #3
 8001b32:	f002 fdee 	bl	8004712 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, YELLOW);
 8001b36:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <topBarScreen+0x270>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b42:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001cd8 <topBarScreen+0x260>
 8001b46:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b4a:	4b68      	ldr	r3, [pc, #416]	; (8001cec <topBarScreen+0x274>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b5a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001b5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b66:	ee17 3a90 	vmov	r3, s15
 8001b6a:	b298      	uxth	r0, r3
 8001b6c:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <topBarScreen+0x278>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b78:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001ce0 <topBarScreen+0x268>
 8001b7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b80:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001b84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b8c:	ee17 3a90 	vmov	r3, s15
 8001b90:	b299      	uxth	r1, r3
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <topBarScreen+0x270>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b9e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001cd8 <topBarScreen+0x260>
 8001ba2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <topBarScreen+0x274>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bb6:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001bba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bc2:	ee17 3a90 	vmov	r3, s15
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <topBarScreen+0x278>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bd4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001ce0 <topBarScreen+0x268>
 8001bd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bdc:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001be0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001be4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8001bf2:	9400      	str	r4, [sp, #0]
 8001bf4:	f002 fe96 	bl	8004924 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <topBarScreen+0x270>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c04:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001cd8 <topBarScreen+0x260>
 8001c08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <topBarScreen+0x274>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c1c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001c20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c28:	ee17 3a90 	vmov	r3, s15
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <topBarScreen+0x278>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c3a:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001ce0 <topBarScreen+0x268>
 8001c3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c42:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001c46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c4e:	ee17 3a90 	vmov	r3, s15
 8001c52:	b299      	uxth	r1, r3
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <topBarScreen+0x270>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c60:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8001cd8 <topBarScreen+0x260>
 8001c64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <topBarScreen+0x274>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c78:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001c7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <topBarScreen+0x278>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c96:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001ce0 <topBarScreen+0x268>
 8001c9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c9e:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001ca2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ca6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	9400      	str	r4, [sp, #0]
 8001cb4:	f002 fdb5 	bl	8004822 <ILI9341_Draw_Hollow_Rectangle_Coord>


//	sprintf(Temp_Buffer_text, "24:00");
//	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.7 + offsetWidth, maxHeight * 0.1, WHITE, 2, BLACK);
}
 8001cb8:	bf00      	nop
 8001cba:	3704      	adds	r7, #4
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	d70a3d71 	.word	0xd70a3d71
 8001cc4:	3fed70a3 	.word	0x3fed70a3
 8001cc8:	0a3d70a4 	.word	0x0a3d70a4
 8001ccc:	3fc0a3d7 	.word	0x3fc0a3d7
 8001cd0:	47ae147b 	.word	0x47ae147b
 8001cd4:	3fc47ae1 	.word	0x3fc47ae1
 8001cd8:	cccccccd 	.word	0xcccccccd
 8001cdc:	3feccccc 	.word	0x3feccccc
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	3fb99999 	.word	0x3fb99999
 8001ce8:	20000046 	.word	0x20000046
 8001cec:	20000048 	.word	0x20000048
 8001cf0:	2000004a 	.word	0x2000004a

08001cf4 <resetPrevNum>:

//Reset Prev Values
void resetPrevNum(){
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <resetPrevNum+0x54>)
 8001cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfe:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <resetPrevNum+0x58>)
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <resetPrevNum+0x5c>)
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	601a      	str	r2, [r3, #0]

	prevDayIndex = -1;
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <resetPrevNum+0x60>)
 8001d12:	22ff      	movs	r2, #255	; 0xff
 8001d14:	701a      	strb	r2, [r3, #0]
	prevDate = -1;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <resetPrevNum+0x64>)
 8001d18:	22ff      	movs	r2, #255	; 0xff
 8001d1a:	701a      	strb	r2, [r3, #0]
	prevMonthIndex = -1;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <resetPrevNum+0x68>)
 8001d1e:	22ff      	movs	r2, #255	; 0xff
 8001d20:	701a      	strb	r2, [r3, #0]
	prevYear = -1;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <resetPrevNum+0x6c>)
 8001d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d28:	801a      	strh	r2, [r3, #0]

	prevTemp = -1.0;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <resetPrevNum+0x70>)
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <resetPrevNum+0x74>)
 8001d2e:	601a      	str	r2, [r3, #0]
	prevHumid = -1.0;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <resetPrevNum+0x78>)
 8001d32:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <resetPrevNum+0x74>)
 8001d34:	601a      	str	r2, [r3, #0]
	prevPmTwoPointFive = -1.0;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <resetPrevNum+0x7c>)
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <resetPrevNum+0x74>)
 8001d3a:	601a      	str	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000038 	.word	0x20000038
 8001d4c:	2000003c 	.word	0x2000003c
 8001d50:	20000040 	.word	0x20000040
 8001d54:	200000a9 	.word	0x200000a9
 8001d58:	200000a8 	.word	0x200000a8
 8001d5c:	200000aa 	.word	0x200000aa
 8001d60:	200000ac 	.word	0x200000ac
 8001d64:	20000020 	.word	0x20000020
 8001d68:	bf800000 	.word	0xbf800000
 8001d6c:	20000024 	.word	0x20000024
 8001d70:	20000028 	.word	0x20000028
 8001d74:	00000000 	.word	0x00000000

08001d78 <hourScreen>:

//Clock Screen Atomic
void hourScreen(bool status, bool isEdit){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460a      	mov	r2, r1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	4613      	mov	r3, r2
 8001d86:	71bb      	strb	r3, [r7, #6]
	if (prevHourNum != hourNum || isEdit == true){
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <hourScreen+0xd0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <hourScreen+0xd4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d102      	bne.n	8001d9a <hourScreen+0x22>
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d04e      	beq.n	8001e38 <hourScreen+0xc0>
		if (status == true){
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d025      	beq.n	8001dec <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <hourScreen+0xd4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	492a      	ldr	r1, [pc, #168]	; (8001e50 <hourScreen+0xd8>)
 8001da8:	482a      	ldr	r0, [pc, #168]	; (8001e54 <hourScreen+0xdc>)
 8001daa:	f009 f80b 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <hourScreen+0xe0>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3b05      	subs	r3, #5
 8001db6:	b2d9      	uxtb	r1, r3
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <hourScreen+0xe4>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001dc4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001e40 <hourScreen+0xc8>
 8001dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dd0:	edc7 7a00 	vstr	s15, [r7]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	2306      	movs	r3, #6
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de4:	481b      	ldr	r0, [pc, #108]	; (8001e54 <hourScreen+0xdc>)
 8001de6:	f002 fe97 	bl	8004b18 <ILI9341_Draw_Text>
 8001dea:	e021      	b.n	8001e30 <hourScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001dec:	491c      	ldr	r1, [pc, #112]	; (8001e60 <hourScreen+0xe8>)
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <hourScreen+0xdc>)
 8001df0:	f008 ffe8 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <hourScreen+0xe0>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b05      	subs	r3, #5
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <hourScreen+0xe4>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e0a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001e40 <hourScreen+0xc8>
 8001e0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e16:	edc7 7a00 	vstr	s15, [r7]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2306      	movs	r3, #6
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2a:	480a      	ldr	r0, [pc, #40]	; (8001e54 <hourScreen+0xdc>)
 8001e2c:	f002 fe74 	bl	8004b18 <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <hourScreen+0xd4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <hourScreen+0xd0>)
 8001e36:	6013      	str	r3, [r2, #0]
	}
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	33333333 	.word	0x33333333
 8001e44:	3fd33333 	.word	0x3fd33333
 8001e48:	20000040 	.word	0x20000040
 8001e4c:	20000034 	.word	0x20000034
 8001e50:	0800d1c8 	.word	0x0800d1c8
 8001e54:	20000414 	.word	0x20000414
 8001e58:	20000048 	.word	0x20000048
 8001e5c:	2000004a 	.word	0x2000004a
 8001e60:	0800d1d0 	.word	0x0800d1d0
 8001e64:	00000000 	.word	0x00000000

08001e68 <colonScreen>:

void colonScreen(bool status){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	if (status == true){
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d022      	beq.n	8001ebe <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8001e78:	4927      	ldr	r1, [pc, #156]	; (8001f18 <colonScreen+0xb0>)
 8001e7a:	4828      	ldr	r0, [pc, #160]	; (8001f1c <colonScreen+0xb4>)
 8001e7c:	f008 ffa2 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <colonScreen+0xb8>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3349      	adds	r3, #73	; 0x49
 8001e88:	b2d9      	uxtb	r1, r3
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <colonScreen+0xbc>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e96:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001f10 <colonScreen+0xa8>
 8001e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ea2:	edc7 7a00 	vstr	s15, [r7]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	2300      	movs	r3, #0
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2304      	movs	r3, #4
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb6:	4819      	ldr	r0, [pc, #100]	; (8001f1c <colonScreen+0xb4>)
 8001eb8:	f002 fe2e 	bl	8004b18 <ILI9341_Draw_Text>
	}
	else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
	}
}
 8001ebc:	e021      	b.n	8001f02 <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 8001ebe:	491a      	ldr	r1, [pc, #104]	; (8001f28 <colonScreen+0xc0>)
 8001ec0:	4816      	ldr	r0, [pc, #88]	; (8001f1c <colonScreen+0xb4>)
 8001ec2:	f008 ff7f 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <colonScreen+0xb8>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3349      	adds	r3, #73	; 0x49
 8001ece:	b2d9      	uxtb	r1, r3
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <colonScreen+0xbc>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001edc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001f10 <colonScreen+0xa8>
 8001ee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ee4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ee8:	edc7 7a00 	vstr	s15, [r7]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <colonScreen+0xb4>)
 8001efe:	f002 fe0b 	bl	8004b18 <ILI9341_Draw_Text>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	f3af 8000 	nop.w
 8001f10:	66666666 	.word	0x66666666
 8001f14:	3fd66666 	.word	0x3fd66666
 8001f18:	0800d1e4 	.word	0x0800d1e4
 8001f1c:	20000414 	.word	0x20000414
 8001f20:	20000048 	.word	0x20000048
 8001f24:	2000004a 	.word	0x2000004a
 8001f28:	0800d1e8 	.word	0x0800d1e8
 8001f2c:	00000000 	.word	0x00000000

08001f30 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	if (prevMinuteNum != minuteNum || isEdit == true){
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <minuteScreen+0xd0>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <minuteScreen+0xd4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d102      	bne.n	8001f52 <minuteScreen+0x22>
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04e      	beq.n	8001ff0 <minuteScreen+0xc0>
		if (status == true){
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d025      	beq.n	8001fa4 <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <minuteScreen+0xd4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	492a      	ldr	r1, [pc, #168]	; (8002008 <minuteScreen+0xd8>)
 8001f60:	482a      	ldr	r0, [pc, #168]	; (800200c <minuteScreen+0xdc>)
 8001f62:	f008 ff2f 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <minuteScreen+0xe0>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3361      	adds	r3, #97	; 0x61
 8001f6e:	b2d9      	uxtb	r1, r3
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <minuteScreen+0xe4>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f7c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001ff8 <minuteScreen+0xc8>
 8001f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f88:	edc7 7a00 	vstr	s15, [r7]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2306      	movs	r3, #6
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9c:	481b      	ldr	r0, [pc, #108]	; (800200c <minuteScreen+0xdc>)
 8001f9e:	f002 fdbb 	bl	8004b18 <ILI9341_Draw_Text>
 8001fa2:	e021      	b.n	8001fe8 <minuteScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001fa4:	491c      	ldr	r1, [pc, #112]	; (8002018 <minuteScreen+0xe8>)
 8001fa6:	4819      	ldr	r0, [pc, #100]	; (800200c <minuteScreen+0xdc>)
 8001fa8:	f008 ff0c 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <minuteScreen+0xe0>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <minuteScreen+0xe4>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fc2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001ff8 <minuteScreen+0xc8>
 8001fc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fce:	edc7 7a00 	vstr	s15, [r7]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2306      	movs	r3, #6
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe2:	480a      	ldr	r0, [pc, #40]	; (800200c <minuteScreen+0xdc>)
 8001fe4:	f002 fd98 	bl	8004b18 <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <minuteScreen+0xd4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <minuteScreen+0xd0>)
 8001fee:	6013      	str	r3, [r2, #0]
	}
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	33333333 	.word	0x33333333
 8001ffc:	3fd33333 	.word	0x3fd33333
 8002000:	2000003c 	.word	0x2000003c
 8002004:	20000030 	.word	0x20000030
 8002008:	0800d1c8 	.word	0x0800d1c8
 800200c:	20000414 	.word	0x20000414
 8002010:	20000048 	.word	0x20000048
 8002014:	2000004a 	.word	0x2000004a
 8002018:	0800d1d0 	.word	0x0800d1d0
 800201c:	00000000 	.word	0x00000000

08002020 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
	if (prevSecondNum != secondNum || isEdit == true){
 8002030:	4b49      	ldr	r3, [pc, #292]	; (8002158 <secondScreen+0x138>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <secondScreen+0x13c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d102      	bne.n	8002042 <secondScreen+0x22>
 800203c:	79bb      	ldrb	r3, [r7, #6]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d07c      	beq.n	800213c <secondScreen+0x11c>
		if (status == true){
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d03c      	beq.n	80020c2 <secondScreen+0xa2>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8002048:	4b44      	ldr	r3, [pc, #272]	; (800215c <secondScreen+0x13c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4944      	ldr	r1, [pc, #272]	; (8002160 <secondScreen+0x140>)
 8002050:	4844      	ldr	r0, [pc, #272]	; (8002164 <secondScreen+0x144>)
 8002052:	f008 feb7 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 8002056:	4b44      	ldr	r3, [pc, #272]	; (8002168 <secondScreen+0x148>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002062:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002148 <secondScreen+0x128>
 8002066:	ee27 6b06 	vmul.f64	d6, d7, d6
 800206a:	4b40      	ldr	r3, [pc, #256]	; (800216c <secondScreen+0x14c>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002076:	ee36 7b07 	vadd.f64	d7, d6, d7
 800207a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800207e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002082:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002086:	edc7 7a00 	vstr	s15, [r7]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2d9      	uxtb	r1, r3
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <secondScreen+0x150>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800209a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002150 <secondScreen+0x130>
 800209e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a6:	edc7 7a00 	vstr	s15, [r7]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2302      	movs	r3, #2
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ba:	482a      	ldr	r0, [pc, #168]	; (8002164 <secondScreen+0x144>)
 80020bc:	f002 fd2c 	bl	8004b18 <ILI9341_Draw_Text>
 80020c0:	e038      	b.n	8002134 <secondScreen+0x114>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80020c2:	492c      	ldr	r1, [pc, #176]	; (8002174 <secondScreen+0x154>)
 80020c4:	4827      	ldr	r0, [pc, #156]	; (8002164 <secondScreen+0x144>)
 80020c6:	f008 fe7d 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <secondScreen+0x148>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020d6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002148 <secondScreen+0x128>
 80020da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <secondScreen+0x14c>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020ee:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80020f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020fa:	edc7 7a00 	vstr	s15, [r7]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2d9      	uxtb	r1, r3
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <secondScreen+0x150>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800210e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002150 <secondScreen+0x130>
 8002112:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002116:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800211a:	edc7 7a00 	vstr	s15, [r7]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	2300      	movs	r3, #0
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2302      	movs	r3, #2
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <secondScreen+0x144>)
 8002130:	f002 fcf2 	bl	8004b18 <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <secondScreen+0x13c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <secondScreen+0x138>)
 800213a:	6013      	str	r3, [r2, #0]
	}
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	f3af 8000 	nop.w
 8002148:	cccccccd 	.word	0xcccccccd
 800214c:	3feccccc 	.word	0x3feccccc
 8002150:	ae147ae1 	.word	0xae147ae1
 8002154:	3fdae147 	.word	0x3fdae147
 8002158:	20000038 	.word	0x20000038
 800215c:	2000002c 	.word	0x2000002c
 8002160:	0800d1c8 	.word	0x0800d1c8
 8002164:	20000414 	.word	0x20000414
 8002168:	20000046 	.word	0x20000046
 800216c:	20000048 	.word	0x20000048
 8002170:	2000004a 	.word	0x2000004a
 8002174:	0800d1d0 	.word	0x0800d1d0

08002178 <displayClockScreen>:

//Display Clock Screen
void displayClockScreen(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

	if (halfsecondState == false){ // colon behaviour
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <displayClockScreen+0x3c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <displayClockScreen+0x1a>
		colonScreen(true);
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff fe6c 	bl	8001e68 <colonScreen>
 8002190:	e002      	b.n	8002198 <displayClockScreen+0x20>
	}
	else{
		colonScreen(false);
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff fe68 	bl	8001e68 <colonScreen>
	}

	secondScreen(true, false);
 8002198:	2100      	movs	r1, #0
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff40 	bl	8002020 <secondScreen>
	minuteScreen(true, false);
 80021a0:	2100      	movs	r1, #0
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fec4 	bl	8001f30 <minuteScreen>
	hourScreen(true, false);
 80021a8:	2100      	movs	r1, #0
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fde4 	bl	8001d78 <hourScreen>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000044 	.word	0x20000044

080021b8 <staticClockScreen>:

void staticClockScreen(){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	colonScreen(true);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff fe53 	bl	8001e68 <colonScreen>
	hourScreen(true, false);
 80021c2:	2100      	movs	r1, #0
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff fdd7 	bl	8001d78 <hourScreen>
	minuteScreen(true, false);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff feaf 	bl	8001f30 <minuteScreen>
	secondScreen(true, false);
 80021d2:	2100      	movs	r1, #0
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff ff23 	bl	8002020 <secondScreen>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <editHourScreen>:

//Edit Clock Screen
void editHourScreen()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	displayDateScreen(); // Init first
 80021e4:	f7ff fc34 	bl	8001a50 <displayDateScreen>
	colonScreen(true);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7ff fe3d 	bl	8001e68 <colonScreen>
	minuteScreen(true, false);
 80021ee:	2100      	movs	r1, #0
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7ff fe9d 	bl	8001f30 <minuteScreen>
	secondScreen(true, false);
 80021f6:	2100      	movs	r1, #0
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7ff ff11 	bl	8002020 <secondScreen>

	if (halfsecondState == false){ // hour
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <editHourScreen+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <editHourScreen+0x36>
		hourScreen(false, true);
 800220c:	2101      	movs	r1, #1
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff fdb2 	bl	8001d78 <hourScreen>
	}
	else{
		hourScreen(true, true);
	}
}
 8002214:	e003      	b.n	800221e <editHourScreen+0x3e>
		hourScreen(true, true);
 8002216:	2101      	movs	r1, #1
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff fdad 	bl	8001d78 <hourScreen>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000044 	.word	0x20000044

08002228 <editMinuteScreen>:
void editMinuteScreen(){
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

	colonScreen(true);
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff fe1b 	bl	8001e68 <colonScreen>
	hourScreen(true, false);
 8002232:	2100      	movs	r1, #0
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff fd9f 	bl	8001d78 <hourScreen>
	secondScreen(true, false);
 800223a:	2100      	movs	r1, #0
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff feef 	bl	8002020 <secondScreen>

	if (halfsecondState == false){ //minute
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <editMinuteScreen+0x40>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f083 0301 	eor.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <editMinuteScreen+0x32>
		minuteScreen(false, true);
 8002250:	2101      	movs	r1, #1
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff fe6c 	bl	8001f30 <minuteScreen>
	}
	else{
		minuteScreen(true, true);
	}
}
 8002258:	e003      	b.n	8002262 <editMinuteScreen+0x3a>
		minuteScreen(true, true);
 800225a:	2101      	movs	r1, #1
 800225c:	2001      	movs	r0, #1
 800225e:	f7ff fe67 	bl	8001f30 <minuteScreen>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000044 	.word	0x20000044

0800226c <editSecondScreen>:
void editSecondScreen(){
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fdf9 	bl	8001e68 <colonScreen>
	hourScreen(true, false);
 8002276:	2100      	movs	r1, #0
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fd7d 	bl	8001d78 <hourScreen>
	minuteScreen(true, false);
 800227e:	2100      	movs	r1, #0
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff fe55 	bl	8001f30 <minuteScreen>

	if (halfsecondState == false){ //second
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <editSecondScreen+0x40>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f083 0301 	eor.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <editSecondScreen+0x32>
		secondScreen(false, true);
 8002294:	2101      	movs	r1, #1
 8002296:	2000      	movs	r0, #0
 8002298:	f7ff fec2 	bl	8002020 <secondScreen>
	}
	else{
		secondScreen(true, true);
	}
}
 800229c:	e003      	b.n	80022a6 <editSecondScreen+0x3a>
		secondScreen(true, true);
 800229e:	2101      	movs	r1, #1
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff febd 	bl	8002020 <secondScreen>
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000044 	.word	0x20000044

080022b0 <editDayScreen>:

//Edit Date Clock Screen
void editDayScreen()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	dateScreen(true, false);
 80022b4:	2100      	movs	r1, #0
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7ff fa1e 	bl	80016f8 <dateScreen>
	monthScreen(true, false);
 80022bc:	2100      	movs	r1, #0
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff faa2 	bl	8001808 <monthScreen>
	yearScreen(true, false);
 80022c4:	2100      	movs	r1, #0
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff fb32 	bl	8001930 <yearScreen>

	if (halfsecondState == false){ // day
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <editDayScreen+0x40>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <editDayScreen+0x34>
		dayScreen(false, true);
 80022da:	2101      	movs	r1, #1
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff f98b 	bl	80015f8 <dayScreen>
	}
	else{
		dayScreen(true, true);
	}
}
 80022e2:	e003      	b.n	80022ec <editDayScreen+0x3c>
		dayScreen(true, true);
 80022e4:	2101      	movs	r1, #1
 80022e6:	2001      	movs	r0, #1
 80022e8:	f7ff f986 	bl	80015f8 <dayScreen>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000044 	.word	0x20000044

080022f4 <editDateScreen>:
void editDateScreen()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 80022f8:	2100      	movs	r1, #0
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff f97c 	bl	80015f8 <dayScreen>
	monthScreen(true, false);
 8002300:	2100      	movs	r1, #0
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff fa80 	bl	8001808 <monthScreen>
	yearScreen(true, false);
 8002308:	2100      	movs	r1, #0
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fb10 	bl	8001930 <yearScreen>

	if (halfsecondState == false){ // date
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <editDateScreen+0x40>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <editDateScreen+0x34>
		dateScreen(false, true);
 800231e:	2101      	movs	r1, #1
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff f9e9 	bl	80016f8 <dateScreen>
	}
	else{
		dateScreen(true, true);
	}
}
 8002326:	e003      	b.n	8002330 <editDateScreen+0x3c>
		dateScreen(true, true);
 8002328:	2101      	movs	r1, #1
 800232a:	2001      	movs	r0, #1
 800232c:	f7ff f9e4 	bl	80016f8 <dateScreen>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000044 	.word	0x20000044

08002338 <editMonthScreen>:
void editMonthScreen()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 800233c:	2100      	movs	r1, #0
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff f95a 	bl	80015f8 <dayScreen>
	dateScreen(true, false);
 8002344:	2100      	movs	r1, #0
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff f9d6 	bl	80016f8 <dateScreen>
	yearScreen(true, false);
 800234c:	2100      	movs	r1, #0
 800234e:	2001      	movs	r0, #1
 8002350:	f7ff faee 	bl	8001930 <yearScreen>

	if (halfsecondState == false){ // month
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <editMonthScreen+0x40>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <editMonthScreen+0x34>
		monthScreen(false, true);
 8002362:	2101      	movs	r1, #1
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff fa4f 	bl	8001808 <monthScreen>
	}
	else{
		monthScreen(true, true);
	}
}
 800236a:	e003      	b.n	8002374 <editMonthScreen+0x3c>
		monthScreen(true, true);
 800236c:	2101      	movs	r1, #1
 800236e:	2001      	movs	r0, #1
 8002370:	f7ff fa4a 	bl	8001808 <monthScreen>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000044 	.word	0x20000044

0800237c <editYearScreen>:
void editYearScreen()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	staticClockScreen(); // init Clock first in editing mode
 8002380:	f7ff ff1a 	bl	80021b8 <staticClockScreen>
	dayScreen(true, false);
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f7ff f936 	bl	80015f8 <dayScreen>
	dateScreen(true, false);
 800238c:	2100      	movs	r1, #0
 800238e:	2001      	movs	r0, #1
 8002390:	f7ff f9b2 	bl	80016f8 <dateScreen>
	monthScreen(true, false);
 8002394:	2100      	movs	r1, #0
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff fa36 	bl	8001808 <monthScreen>

	if (halfsecondState == false){ // day
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <editYearScreen+0x44>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <editYearScreen+0x38>
		yearScreen(false, true);
 80023aa:	2101      	movs	r1, #1
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fabf 	bl	8001930 <yearScreen>
	}
	else{
		yearScreen(true, true);
	}
}
 80023b2:	e003      	b.n	80023bc <editYearScreen+0x40>
		yearScreen(true, true);
 80023b4:	2101      	movs	r1, #1
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff faba 	bl	8001930 <yearScreen>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000044 	.word	0x20000044
 80023c4:	00000000 	.word	0x00000000

080023c8 <bottomBarScreen>:

//Bottom Screen
void bottomBarScreen(){
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomHeight = maxHeight * 0.87;
 80023d2:	4bb3      	ldr	r3, [pc, #716]	; (80026a0 <bottomBarScreen+0x2d8>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023de:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002688 <bottomBarScreen+0x2c0>
 80023e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80023ee:	793b      	ldrb	r3, [r7, #4]
 80023f0:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 80023f2:	2333      	movs	r3, #51	; 0x33
 80023f4:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth * 0.25 + 51;
 80023f6:	4bab      	ldr	r3, [pc, #684]	; (80026a4 <bottomBarScreen+0x2dc>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002402:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800240a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002690 <bottomBarScreen+0x2c8>
 800240e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002412:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002416:	edc7 7a01 	vstr	s15, [r7, #4]
 800241a:	793b      	ldrb	r3, [r7, #4]
 800241c:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth * 0.50 + 51;
 800241e:	4ba1      	ldr	r3, [pc, #644]	; (80026a4 <bottomBarScreen+0x2dc>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800242a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800242e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002432:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002690 <bottomBarScreen+0x2c8>
 8002436:	ee37 7b06 	vadd.f64	d7, d7, d6
 800243a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800243e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002442:	793b      	ldrb	r3, [r7, #4]
 8002444:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002446:	4b97      	ldr	r3, [pc, #604]	; (80026a4 <bottomBarScreen+0x2dc>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002452:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800245a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002690 <bottomBarScreen+0x2c8>
 800245e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002462:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002466:	edc7 7a01 	vstr	s15, [r7, #4]
 800246a:	793b      	ldrb	r3, [r7, #4]
 800246c:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 800246e:	2337      	movs	r3, #55	; 0x37
 8002470:	727b      	strb	r3, [r7, #9]

	//Rectangle Background Color
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1 + bottomWidth, maxHeight, RED);
 8002472:	7b7b      	ldrb	r3, [r7, #13]
 8002474:	b298      	uxth	r0, r3
 8002476:	7bbb      	ldrb	r3, [r7, #14]
 8002478:	b299      	uxth	r1, r3
 800247a:	7b7b      	ldrb	r3, [r7, #13]
 800247c:	b29a      	uxth	r2, r3
 800247e:	7a7b      	ldrb	r3, [r7, #9]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4413      	add	r3, r2
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b86      	ldr	r3, [pc, #536]	; (80026a0 <bottomBarScreen+0x2d8>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800248e:	9400      	str	r4, [sp, #0]
 8002490:	f002 fa48 	bl	8004924 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2 + bottomWidth, maxHeight, YELLOW);
 8002494:	7b3b      	ldrb	r3, [r7, #12]
 8002496:	b298      	uxth	r0, r3
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	b299      	uxth	r1, r3
 800249c:	7b3b      	ldrb	r3, [r7, #12]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	7a7b      	ldrb	r3, [r7, #9]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b7d      	ldr	r3, [pc, #500]	; (80026a0 <bottomBarScreen+0x2d8>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 80024b0:	9400      	str	r4, [sp, #0]
 80024b2:	f002 fa37 	bl	8004924 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3 + bottomWidth, maxHeight, CYAN);
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	b298      	uxth	r0, r3
 80024ba:	7bbb      	ldrb	r3, [r7, #14]
 80024bc:	b299      	uxth	r1, r3
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	7a7b      	ldrb	r3, [r7, #9]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <bottomBarScreen+0x2d8>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	f240 74ff 	movw	r4, #2047	; 0x7ff
 80024d2:	9400      	str	r4, [sp, #0]
 80024d4:	f002 fa26 	bl	8004924 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4 + bottomWidth, maxHeight, GREEN);
 80024d8:	7abb      	ldrb	r3, [r7, #10]
 80024da:	b298      	uxth	r0, r3
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	b299      	uxth	r1, r3
 80024e0:	7abb      	ldrb	r3, [r7, #10]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	7a7b      	ldrb	r3, [r7, #9]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <bottomBarScreen+0x2d8>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80024f4:	9400      	str	r4, [sp, #0]
 80024f6:	f002 fa15 	bl	8004924 <ILI9341_Draw_Filled_Rectangle_Coord>

	//Text Layout
	sprintf(Temp_Buffer_text, "MOD");
 80024fa:	496b      	ldr	r1, [pc, #428]	; (80026a8 <bottomBarScreen+0x2e0>)
 80024fc:	486b      	ldr	r0, [pc, #428]	; (80026ac <bottomBarScreen+0x2e4>)
 80024fe:	f008 fc61 	bl	800adc4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.9, BLACK, size, RED);
 8002502:	4b6b      	ldr	r3, [pc, #428]	; (80026b0 <bottomBarScreen+0x2e8>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b2d9      	uxtb	r1, r3
 8002508:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <bottomBarScreen+0x2d8>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002514:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002698 <bottomBarScreen+0x2d0>
 8002518:	ee27 7b06 	vmul.f64	d7, d7, d6
 800251c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002520:	edc7 7a01 	vstr	s15, [r7, #4]
 8002524:	793b      	ldrb	r3, [r7, #4]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002530:	9001      	str	r0, [sp, #4]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	485d      	ldr	r0, [pc, #372]	; (80026ac <bottomBarScreen+0x2e4>)
 8002538:	f002 faee 	bl	8004b18 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "ADJ");
 800253c:	495d      	ldr	r1, [pc, #372]	; (80026b4 <bottomBarScreen+0x2ec>)
 800253e:	485b      	ldr	r0, [pc, #364]	; (80026ac <bottomBarScreen+0x2e4>)
 8002540:	f008 fc40 	bl	800adc4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.25 + offsetWidth, maxHeight * 0.9, BLACK, size, YELLOW);
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <bottomBarScreen+0x2dc>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002550:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002554:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002558:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <bottomBarScreen+0x2e8>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002564:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002568:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800256c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002570:	793b      	ldrb	r3, [r7, #4]
 8002572:	b2d9      	uxtb	r1, r3
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <bottomBarScreen+0x2d8>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002580:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002698 <bottomBarScreen+0x2d0>
 8002584:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002588:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800258c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002590:	793b      	ldrb	r3, [r7, #4]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800259c:	9001      	str	r0, [sp, #4]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2300      	movs	r3, #0
 80025a2:	4842      	ldr	r0, [pc, #264]	; (80026ac <bottomBarScreen+0x2e4>)
 80025a4:	f002 fab8 	bl	8004b18 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "FWD");
 80025a8:	4943      	ldr	r1, [pc, #268]	; (80026b8 <bottomBarScreen+0x2f0>)
 80025aa:	4840      	ldr	r0, [pc, #256]	; (80026ac <bottomBarScreen+0x2e4>)
 80025ac:	f008 fc0a 	bl	800adc4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.5 + offsetWidth, maxHeight * 0.9, BLACK, size, CYAN);
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <bottomBarScreen+0x2dc>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80025c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <bottomBarScreen+0x2e8>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80025dc:	793b      	ldrb	r3, [r7, #4]
 80025de:	b2d9      	uxtb	r1, r3
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <bottomBarScreen+0x2d8>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025ec:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002698 <bottomBarScreen+0x2d0>
 80025f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80025fc:	793b      	ldrb	r3, [r7, #4]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002608:	9001      	str	r0, [sp, #4]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2300      	movs	r3, #0
 800260e:	4827      	ldr	r0, [pc, #156]	; (80026ac <bottomBarScreen+0x2e4>)
 8002610:	f002 fa82 	bl	8004b18 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "BWD");
 8002614:	4929      	ldr	r1, [pc, #164]	; (80026bc <bottomBarScreen+0x2f4>)
 8002616:	4825      	ldr	r0, [pc, #148]	; (80026ac <bottomBarScreen+0x2e4>)
 8002618:	f008 fbd4 	bl	800adc4 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.75 + offsetWidth, maxHeight * 0.9, BLACK, size, GREEN);
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <bottomBarScreen+0x2dc>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002628:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 800262c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <bottomBarScreen+0x2e8>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800263c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002640:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002644:	edc7 7a01 	vstr	s15, [r7, #4]
 8002648:	793b      	ldrb	r3, [r7, #4]
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <bottomBarScreen+0x2d8>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002658:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002698 <bottomBarScreen+0x2d0>
 800265c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002660:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002664:	edc7 7a01 	vstr	s15, [r7, #4]
 8002668:	793b      	ldrb	r3, [r7, #4]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002674:	9001      	str	r0, [sp, #4]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2300      	movs	r3, #0
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <bottomBarScreen+0x2e4>)
 800267c:	f002 fa4c 	bl	8004b18 <ILI9341_Draw_Text>
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}
 8002688:	3d70a3d7 	.word	0x3d70a3d7
 800268c:	3febd70a 	.word	0x3febd70a
 8002690:	00000000 	.word	0x00000000
 8002694:	40498000 	.word	0x40498000
 8002698:	cccccccd 	.word	0xcccccccd
 800269c:	3feccccc 	.word	0x3feccccc
 80026a0:	2000004a 	.word	0x2000004a
 80026a4:	20000046 	.word	0x20000046
 80026a8:	0800d1ec 	.word	0x0800d1ec
 80026ac:	20000414 	.word	0x20000414
 80026b0:	20000048 	.word	0x20000048
 80026b4:	0800d1f0 	.word	0x0800d1f0
 80026b8:	0800d1f4 	.word	0x0800d1f4
 80026bc:	0800d1f8 	.word	0x0800d1f8

080026c0 <bottomBarScreenUpdate>:
void bottomBarScreenUpdate(){
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 80026c6:	2302      	movs	r3, #2
 80026c8:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 80026ca:	2333      	movs	r3, #51	; 0x33
 80026cc:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomHeight = maxHeight * 0.87;
 80026ce:	4bc6      	ldr	r3, [pc, #792]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026da:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80029c0 <bottomBarScreenUpdate+0x300>
 80026de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80026ea:	793b      	ldrb	r3, [r7, #4]
 80026ec:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 80026ee:	4bbf      	ldr	r3, [pc, #764]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026fa:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 80026fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002702:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 80029c8 <bottomBarScreenUpdate+0x308>
 8002706:	ee37 7b06 	vadd.f64	d7, d7, d6
 800270a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800270e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002712:	793b      	ldrb	r3, [r7, #4]
 8002714:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth = 55;
 8002716:	2337      	movs	r3, #55	; 0x37
 8002718:	72fb      	strb	r3, [r7, #11]

	//Update Temperature
	if(prevTemp != temp){
 800271a:	4bb5      	ldr	r3, [pc, #724]	; (80029f0 <bottomBarScreenUpdate+0x330>)
 800271c:	ed93 7a00 	vldr	s14, [r3]
 8002720:	4bb4      	ldr	r3, [pc, #720]	; (80029f4 <bottomBarScreenUpdate+0x334>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	eeb4 7a67 	vcmp.f32	s14, s15
 800272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272e:	d059      	beq.n	80027e4 <bottomBarScreenUpdate+0x124>
		sprintf(Temp_Buffer_text, "%0.1f 'C", temp);
 8002730:	4bb0      	ldr	r3, [pc, #704]	; (80029f4 <bottomBarScreenUpdate+0x334>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800273a:	ec53 2b17 	vmov	r2, r3, d7
 800273e:	49ae      	ldr	r1, [pc, #696]	; (80029f8 <bottomBarScreenUpdate+0x338>)
 8002740:	48ae      	ldr	r0, [pc, #696]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 8002742:	f008 fb3f 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002746:	4ba9      	ldr	r3, [pc, #676]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002752:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80029d0 <bottomBarScreenUpdate+0x310>
 8002756:	ee27 6b06 	vmul.f64	d6, d7, d6
 800275a:	4ba9      	ldr	r3, [pc, #676]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002766:	ee36 7b07 	vadd.f64	d7, d6, d7
 800276a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800276e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002772:	793b      	ldrb	r3, [r7, #4]
 8002774:	b2d9      	uxtb	r1, r3
 8002776:	4b9c      	ldr	r3, [pc, #624]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002782:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80029d8 <bottomBarScreenUpdate+0x318>
 8002786:	ee27 7b06 	vmul.f64	d7, d7, d6
 800278a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800278e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002792:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002796:	edc7 7a01 	vstr	s15, [r7, #4]
 800279a:	793b      	ldrb	r3, [r7, #4]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2000      	movs	r0, #0
 80027a4:	9001      	str	r0, [sp, #4]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ac:	4893      	ldr	r0, [pc, #588]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 80027ae:	f002 f9b3 	bl	8004b18 <ILI9341_Draw_Text>
		prevTemp = temp;
 80027b2:	4b90      	ldr	r3, [pc, #576]	; (80029f4 <bottomBarScreenUpdate+0x334>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a8e      	ldr	r2, [pc, #568]	; (80029f0 <bottomBarScreenUpdate+0x330>)
 80027b8:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 80027ba:	7bbb      	ldrb	r3, [r7, #14]
 80027bc:	b298      	uxth	r0, r3
 80027be:	7b7b      	ldrb	r3, [r7, #13]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b37      	subs	r3, #55	; 0x37
 80027c4:	b299      	uxth	r1, r3
 80027c6:	7b3b      	ldrb	r3, [r7, #12]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	3b3e      	subs	r3, #62	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80027de:	9400      	str	r4, [sp, #0]
 80027e0:	f002 f81f 	bl	8004822 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update Humidity
	if(prevHumid != humid){
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <bottomBarScreenUpdate+0x344>)
 80027e6:	ed93 7a00 	vldr	s14, [r3]
 80027ea:	4b87      	ldr	r3, [pc, #540]	; (8002a08 <bottomBarScreenUpdate+0x348>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d059      	beq.n	80028ae <bottomBarScreenUpdate+0x1ee>
		sprintf(Temp_Buffer_text, "%0.1f %%", humid);
 80027fa:	4b83      	ldr	r3, [pc, #524]	; (8002a08 <bottomBarScreenUpdate+0x348>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	ec53 2b17 	vmov	r2, r3, d7
 8002808:	4980      	ldr	r1, [pc, #512]	; (8002a0c <bottomBarScreenUpdate+0x34c>)
 800280a:	487c      	ldr	r0, [pc, #496]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 800280c:	f008 fada 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.55 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002810:	4b76      	ldr	r3, [pc, #472]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800281c:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80029e0 <bottomBarScreenUpdate+0x320>
 8002820:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002824:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002830:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002834:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002838:	edc7 7a01 	vstr	s15, [r7, #4]
 800283c:	793b      	ldrb	r3, [r7, #4]
 800283e:	b2d9      	uxtb	r1, r3
 8002840:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800284c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80029d8 <bottomBarScreenUpdate+0x318>
 8002850:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002854:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002858:	ee37 7b46 	vsub.f64	d7, d7, d6
 800285c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002860:	edc7 7a01 	vstr	s15, [r7, #4]
 8002864:	793b      	ldrb	r3, [r7, #4]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	b29b      	uxth	r3, r3
 800286c:	2000      	movs	r0, #0
 800286e:	9001      	str	r0, [sp, #4]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002876:	4861      	ldr	r0, [pc, #388]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 8002878:	f002 f94e 	bl	8004b18 <ILI9341_Draw_Text>
		prevHumid = humid;
 800287c:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <bottomBarScreenUpdate+0x348>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a60      	ldr	r2, [pc, #384]	; (8002a04 <bottomBarScreenUpdate+0x344>)
 8002882:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	b298      	uxth	r0, r3
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b37      	subs	r3, #55	; 0x37
 800288e:	b299      	uxth	r1, r3
 8002890:	7b3b      	ldrb	r3, [r7, #12]
 8002892:	b29a      	uxth	r2, r3
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4413      	add	r3, r2
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	3b3e      	subs	r3, #62	; 0x3e
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028a8:	9400      	str	r4, [sp, #0]
 80028aa:	f001 ffba 	bl	8004822 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update PM2.5
	if(prevPmTwoPointFive != pmTwoPointFive){ // update this value please
 80028ae:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <bottomBarScreenUpdate+0x350>)
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <bottomBarScreenUpdate+0x354>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	f000 80c6 	beq.w	8002a52 <bottomBarScreenUpdate+0x392>
		sprintf(Temp_Buffer_text, "      %03d ug/m^3", (int)pmTwoPointFive);
 80028c6:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <bottomBarScreenUpdate+0x354>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d0:	ee17 2a90 	vmov	r2, s15
 80028d4:	4950      	ldr	r1, [pc, #320]	; (8002a18 <bottomBarScreenUpdate+0x358>)
 80028d6:	4849      	ldr	r0, [pc, #292]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 80028d8:	f008 fa74 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK); // Change color
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028e8:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80029d0 <bottomBarScreenUpdate+0x310>
 80028ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80028f0:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002900:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002904:	edc7 7a01 	vstr	s15, [r7, #4]
 8002908:	793b      	ldrb	r3, [r7, #4]
 800290a:	b2d9      	uxtb	r1, r3
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002918:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80029d8 <bottomBarScreenUpdate+0x318>
 800291c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002920:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002924:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002928:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800292c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002930:	793b      	ldrb	r3, [r7, #4]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	b29b      	uxth	r3, r3
 8002938:	2000      	movs	r0, #0
 800293a:	9001      	str	r0, [sp, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002942:	482e      	ldr	r0, [pc, #184]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 8002944:	f002 f8e8 	bl	8004b18 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, "PM2.5");
 8002948:	4934      	ldr	r1, [pc, #208]	; (8002a1c <bottomBarScreenUpdate+0x35c>)
 800294a:	482c      	ldr	r0, [pc, #176]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 800294c:	f008 fa3a 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK);
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <bottomBarScreenUpdate+0x32c>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800295c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80029d0 <bottomBarScreenUpdate+0x310>
 8002960:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002964:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <bottomBarScreenUpdate+0x340>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002970:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002974:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002978:	edc7 7a01 	vstr	s15, [r7, #4]
 800297c:	793b      	ldrb	r3, [r7, #4]
 800297e:	b2d9      	uxtb	r1, r3
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <bottomBarScreenUpdate+0x328>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800298c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80029d8 <bottomBarScreenUpdate+0x318>
 8002990:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002994:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002998:	ee37 7b06 	vadd.f64	d7, d7, d6
 800299c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80029a4:	793b      	ldrb	r3, [r7, #4]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2000      	movs	r0, #0
 80029ae:	9001      	str	r0, [sp, #4]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b6:	4811      	ldr	r0, [pc, #68]	; (80029fc <bottomBarScreenUpdate+0x33c>)
 80029b8:	f002 f8ae 	bl	8004b18 <ILI9341_Draw_Text>
 80029bc:	e030      	b.n	8002a20 <bottomBarScreenUpdate+0x360>
 80029be:	bf00      	nop
 80029c0:	3d70a3d7 	.word	0x3d70a3d7
 80029c4:	3febd70a 	.word	0x3febd70a
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40498000 	.word	0x40498000
	...
 80029d8:	66666666 	.word	0x66666666
 80029dc:	3fe66666 	.word	0x3fe66666
 80029e0:	9999999a 	.word	0x9999999a
 80029e4:	3fe19999 	.word	0x3fe19999
 80029e8:	2000004a 	.word	0x2000004a
 80029ec:	20000046 	.word	0x20000046
 80029f0:	20000020 	.word	0x20000020
 80029f4:	20000014 	.word	0x20000014
 80029f8:	0800d1fc 	.word	0x0800d1fc
 80029fc:	20000414 	.word	0x20000414
 8002a00:	20000048 	.word	0x20000048
 8002a04:	20000024 	.word	0x20000024
 8002a08:	20000018 	.word	0x20000018
 8002a0c:	0800d208 	.word	0x0800d208
 8002a10:	20000028 	.word	0x20000028
 8002a14:	2000001c 	.word	0x2000001c
 8002a18:	0800d214 	.word	0x0800d214
 8002a1c:	0800d228 	.word	0x0800d228

		prevPmTwoPointFive = pmTwoPointFive;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <bottomBarScreenUpdate+0x39c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <bottomBarScreenUpdate+0x3a0>)
 8002a26:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45+18, bottomWidth4 + bottomWidth, maxHeight-52+18, WHITE);
 8002a28:	7bbb      	ldrb	r3, [r7, #14]
 8002a2a:	b298      	uxth	r0, r3
 8002a2c:	7b7b      	ldrb	r3, [r7, #13]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b1b      	subs	r3, #27
 8002a32:	b299      	uxth	r1, r3
 8002a34:	7b3b      	ldrb	r3, [r7, #12]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <bottomBarScreenUpdate+0x3a4>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	3b22      	subs	r3, #34	; 0x22
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002a4c:	9400      	str	r4, [sp, #0]
 8002a4e:	f001 fee8 	bl	8004822 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000001c 	.word	0x2000001c
 8002a60:	20000028 	.word	0x20000028
 8002a64:	2000004a 	.word	0x2000004a

08002a68 <buzzerSound>:

//Buzzer Sound
void buzzerSound(){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = (1000 - 1) * 0.5;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <buzzerSound+0x28>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a76:	2100      	movs	r1, #0
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <buzzerSound+0x28>)
 8002a7a:	f005 fea5 	bl	80087c8 <HAL_TIM_PWM_Start>
	HAL_Delay(70);
 8002a7e:	2046      	movs	r0, #70	; 0x46
 8002a80:	f002 fda0 	bl	80055c4 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002a84:	2100      	movs	r1, #0
 8002a86:	4802      	ldr	r0, [pc, #8]	; (8002a90 <buzzerSound+0x28>)
 8002a88:	f005 ff98 	bl	80089bc <HAL_TIM_PWM_Stop>
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	200004ec 	.word	0x200004ec

08002a94 <notifyPm>:

void notifyPm(){
 8002a94:	b5b0      	push	{r4, r5, r7, lr}
 8002a96:	ed2d 8b06 	vpush	{d8-d10}
 8002a9a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8002a9e:	af14      	add	r7, sp, #80	; 0x50
	float *respondRead;
	respondRead = read_sensirion();
 8002aa0:	f7fe f9d0 	bl	8000e44 <read_sensirion>
 8002aa4:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002aa8:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <notifyPm+0x1e0>)
 8002aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <notifyPm+0x1e4>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	1a84      	subs	r4, r0, r2
 8002ab6:	eb61 0503 	sbc.w	r5, r1, r3
 8002aba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	42ab      	cmp	r3, r5
 8002ac4:	bf08      	it	eq
 8002ac6:	42a2      	cmpeq	r2, r4
 8002ac8:	f080 80cd 	bcs.w	8002c66 <notifyPm+0x1d2>
 8002acc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	da00      	bge.n	8002ae2 <notifyPm+0x4e>

		pmPrevMillisecondHAL = millisecondHAL;
	}


}
 8002ae0:	e0c1      	b.n	8002c66 <notifyPm+0x1d2>
	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002ae2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002c7c <notifyPm+0x1e8>
 8002af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	d900      	bls.n	8002afc <notifyPm+0x68>
}
 8002afa:	e0b4      	b.n	8002c66 <notifyPm+0x1d2>
		if(respondRead[1]>=250){
 8002afc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b00:	3304      	adds	r3, #4
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002c80 <notifyPm+0x1ec>
 8002b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	db03      	blt.n	8002b1c <notifyPm+0x88>
			sent_string_to_mcu("HAZ");
 8002b14:	485b      	ldr	r0, [pc, #364]	; (8002c84 <notifyPm+0x1f0>)
 8002b16:	f7fe fa87 	bl	8001028 <sent_string_to_mcu>
 8002b1a:	e01e      	b.n	8002b5a <notifyPm+0xc6>
		else if(respondRead[1]>=150){
 8002b1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b20:	3304      	adds	r3, #4
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002c88 <notifyPm+0x1f4>
 8002b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	db03      	blt.n	8002b3c <notifyPm+0xa8>
			sent_string_to_mcu("VUH");
 8002b34:	4855      	ldr	r0, [pc, #340]	; (8002c8c <notifyPm+0x1f8>)
 8002b36:	f7fe fa77 	bl	8001028 <sent_string_to_mcu>
 8002b3a:	e00e      	b.n	8002b5a <notifyPm+0xc6>
		else if(respondRead[1]>=55){
 8002b3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b40:	3304      	adds	r3, #4
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002c90 <notifyPm+0x1fc>
 8002b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	db02      	blt.n	8002b5a <notifyPm+0xc6>
			sent_string_to_mcu("UHT");
 8002b54:	484f      	ldr	r0, [pc, #316]	; (8002c94 <notifyPm+0x200>)
 8002b56:	f7fe fa67 	bl	8001028 <sent_string_to_mcu>
		if(respondRead[1]>=55){
 8002b5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b5e:	3304      	adds	r3, #4
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002c90 <notifyPm+0x1fc>
 8002b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	db70      	blt.n	8002c54 <notifyPm+0x1c0>
			println("Danger Air");
 8002b72:	4849      	ldr	r0, [pc, #292]	; (8002c98 <notifyPm+0x204>)
 8002b74:	f7fe f8fc 	bl	8000d70 <println>
			println("Sending");
 8002b78:	4848      	ldr	r0, [pc, #288]	; (8002c9c <notifyPm+0x208>)
 8002b7a:	f7fe f8f9 	bl	8000d70 <println>
			sprintf(stringBuffer, "EXC %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f" , respondRead[0], respondRead[1], respondRead[2], respondRead[3], respondRead[4], respondRead[5], respondRead[6], respondRead[7], respondRead[8], respondRead[9], respondRead[10]);
 8002b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002b8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b8e:	3304      	adds	r3, #4
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	edd3 6a00 	vldr	s13, [r3]
 8002ba2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002ba6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002baa:	330c      	adds	r3, #12
 8002bac:	edd3 5a00 	vldr	s11, [r3]
 8002bb0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002bb4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bb8:	3310      	adds	r3, #16
 8002bba:	edd3 4a00 	vldr	s9, [r3]
 8002bbe:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8002bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	edd3 3a00 	vldr	s7, [r3]
 8002bcc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002bd0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	edd3 2a00 	vldr	s5, [r3]
 8002bda:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8002bde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002be2:	331c      	adds	r3, #28
 8002be4:	edd3 1a00 	vldr	s3, [r3]
 8002be8:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8002bec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	edd3 0a00 	vldr	s1, [r3]
 8002bf6:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8002bfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	ed93 8a00 	vldr	s16, [r3]
 8002c04:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8002c08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c0c:	3328      	adds	r3, #40	; 0x28
 8002c0e:	ed93 9a00 	vldr	s18, [r3]
 8002c12:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002c16:	4638      	mov	r0, r7
 8002c18:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 8002c1c:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 8002c20:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 8002c24:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8002c28:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8002c2c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002c30:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002c34:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002c38:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002c3c:	ed8d 7b00 	vstr	d7, [sp]
 8002c40:	ec53 2b1a 	vmov	r2, r3, d10
 8002c44:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <notifyPm+0x20c>)
 8002c46:	f008 f8bd 	bl	800adc4 <siprintf>
			sent_string_to_mcu(stringBuffer);
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f9eb 	bl	8001028 <sent_string_to_mcu>
 8002c52:	e002      	b.n	8002c5a <notifyPm+0x1c6>
			println("Normal Air");
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <notifyPm+0x210>)
 8002c56:	f7fe f88b 	bl	8000d70 <println>
		pmPrevMillisecondHAL = millisecondHAL;
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <notifyPm+0x1e0>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	4905      	ldr	r1, [pc, #20]	; (8002c78 <notifyPm+0x1e4>)
 8002c62:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002c66:	bf00      	nop
 8002c68:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	ecbd 8b06 	vpop	{d8-d10}
 8002c72:	bdb0      	pop	{r4, r5, r7, pc}
 8002c74:	200002f0 	.word	0x200002f0
 8002c78:	200002f8 	.word	0x200002f8
 8002c7c:	461c3c00 	.word	0x461c3c00
 8002c80:	437a0000 	.word	0x437a0000
 8002c84:	0800d230 	.word	0x0800d230
 8002c88:	43160000 	.word	0x43160000
 8002c8c:	0800d234 	.word	0x0800d234
 8002c90:	425c0000 	.word	0x425c0000
 8002c94:	0800d238 	.word	0x0800d238
 8002c98:	0800d23c 	.word	0x0800d23c
 8002c9c:	0800d248 	.word	0x0800d248
 8002ca0:	0800d250 	.word	0x0800d250
 8002ca4:	0800d288 	.word	0x0800d288

08002ca8 <resetPrevStopWatch>:
//State
bool initalStopWatchScreen = false;
bool isStopWatchRunning = false;


void resetPrevStopWatch(){
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	prevStopWatchHour = -1;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <resetPrevStopWatch+0x30>)
 8002cae:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb2:	601a      	str	r2, [r3, #0]
	prevStopWatchMinute = -1;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <resetPrevStopWatch+0x34>)
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cba:	601a      	str	r2, [r3, #0]
	prevStopWatchSecond = -1;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <resetPrevStopWatch+0x38>)
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc2:	601a      	str	r2, [r3, #0]
	prevStopWatchMillisecond = -1;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <resetPrevStopWatch+0x3c>)
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	200000bc 	.word	0x200000bc
 8002cdc:	200000c0 	.word	0x200000c0
 8002ce0:	200000c4 	.word	0x200000c4
 8002ce4:	200000c8 	.word	0x200000c8

08002ce8 <resetStopWatch>:
void resetStopWatch(){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	stopWatchHour = 0;
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <resetStopWatch+0x24>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
	stopWatchMinute = 0;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <resetStopWatch+0x28>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
	stopWatchSecond = 0;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <resetStopWatch+0x2c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
	stopWatchMillisecond = 0;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <resetStopWatch+0x30>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
	resetPrevStopWatch();
 8002d04:	f7ff ffd0 	bl	8002ca8 <resetPrevStopWatch>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200000b0 	.word	0x200000b0
 8002d10:	200000b4 	.word	0x200000b4
 8002d14:	200000b8 	.word	0x200000b8
 8002d18:	20000300 	.word	0x20000300
 8002d1c:	00000000 	.word	0x00000000

08002d20 <displayStopWatchScreen>:

void displayStopWatchScreen(){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af02      	add	r7, sp, #8
	if(stopWatchHour < 1){ // Normal StopWatch Mode
 8002d26:	4ba8      	ldr	r3, [pc, #672]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f300 80a8 	bgt.w	8002e80 <displayStopWatchScreen+0x160>
		if(prevStopWatchMinute != stopWatchMinute){
 8002d30:	4ba6      	ldr	r3, [pc, #664]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4ba6      	ldr	r3, [pc, #664]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d02a      	beq.n	8002d92 <displayStopWatchScreen+0x72>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 8002d3c:	4ba4      	ldr	r3, [pc, #656]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	49a4      	ldr	r1, [pc, #656]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002d44:	48a4      	ldr	r0, [pc, #656]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002d46:	f008 f83d 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002d4a:	4ba4      	ldr	r3, [pc, #656]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	4ba3      	ldr	r3, [pc, #652]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d5c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002d60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d64:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002d68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d70:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d74:	793b      	ldrb	r3, [r7, #4]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	2305      	movs	r3, #5
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d84:	4894      	ldr	r0, [pc, #592]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002d86:	f001 fec7 	bl	8004b18 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 8002d8a:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a8f      	ldr	r2, [pc, #572]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002d90:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchSecond != stopWatchSecond){
 8002d92:	4b94      	ldr	r3, [pc, #592]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b94      	ldr	r3, [pc, #592]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d02c      	beq.n	8002df8 <displayStopWatchScreen+0xd8>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 8002d9e:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	498b      	ldr	r1, [pc, #556]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002da6:	488c      	ldr	r0, [pc, #560]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002da8:	f008 f80c 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002dac:	4b8b      	ldr	r3, [pc, #556]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	3346      	adds	r3, #70	; 0x46
 8002db4:	b2d9      	uxtb	r1, r3
 8002db6:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002dc2:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002dc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dca:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002dce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002dd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002dd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002dda:	793b      	ldrb	r3, [r7, #4]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	2300      	movs	r3, #0
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	2305      	movs	r3, #5
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dea:	487b      	ldr	r0, [pc, #492]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002dec:	f001 fe94 	bl	8004b18 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8002df0:	4b7d      	ldr	r3, [pc, #500]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7b      	ldr	r2, [pc, #492]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002df6:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchMillisecond != stopWatchMillisecond){
 8002df8:	4b7c      	ldr	r3, [pc, #496]	; (8002fec <displayStopWatchScreen+0x2cc>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b7c      	ldr	r3, [pc, #496]	; (8002ff0 <displayStopWatchScreen+0x2d0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f000 80d9 	beq.w	8002fb8 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)((stopWatchMillisecond/10)%100));
 8002e06:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <displayStopWatchScreen+0x2d0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <displayStopWatchScreen+0x2d4>)
 8002e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e10:	1092      	asrs	r2, r2, #2
 8002e12:	17db      	asrs	r3, r3, #31
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	4a78      	ldr	r2, [pc, #480]	; (8002ff8 <displayStopWatchScreen+0x2d8>)
 8002e18:	fb82 1203 	smull	r1, r2, r2, r3
 8002e1c:	1151      	asrs	r1, r2, #5
 8002e1e:	17da      	asrs	r2, r3, #31
 8002e20:	1a8a      	subs	r2, r1, r2
 8002e22:	2164      	movs	r1, #100	; 0x64
 8002e24:	fb01 f202 	mul.w	r2, r1, r2
 8002e28:	1a9a      	subs	r2, r3, r2
 8002e2a:	496a      	ldr	r1, [pc, #424]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002e2c:	486a      	ldr	r0, [pc, #424]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002e2e:	f007 ffc9 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002e32:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3b74      	subs	r3, #116	; 0x74
 8002e3a:	b2d9      	uxtb	r1, r3
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e48:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e50:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e60:	793b      	ldrb	r3, [r7, #4]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2305      	movs	r3, #5
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e70:	4859      	ldr	r0, [pc, #356]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002e72:	f001 fe51 	bl	8004b18 <ILI9341_Draw_Text>
			prevStopWatchMillisecond = stopWatchMillisecond;
 8002e76:	4b5e      	ldr	r3, [pc, #376]	; (8002ff0 <displayStopWatchScreen+0x2d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <displayStopWatchScreen+0x2cc>)
 8002e7c:	6013      	str	r3, [r2, #0]
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
			prevStopWatchSecond = stopWatchSecond;
		}
	}
}
 8002e7e:	e09b      	b.n	8002fb8 <displayStopWatchScreen+0x298>
	}else if (stopWatchHour >= 1){ // counting more than equal to 1 hour
 8002e80:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f340 8097 	ble.w	8002fb8 <displayStopWatchScreen+0x298>
		if(prevStopWatchHour != stopWatchHour){
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <displayStopWatchScreen+0x2dc>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d02a      	beq.n	8002eec <displayStopWatchScreen+0x1cc>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchHour);
 8002e96:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002e9e:	484e      	ldr	r0, [pc, #312]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002ea0:	f007 ff90 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b2d9      	uxtb	r1, r3
 8002eaa:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002eb6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002eba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ebe:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002ec2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ec6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002eca:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ece:	793b      	ldrb	r3, [r7, #4]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ede:	483e      	ldr	r0, [pc, #248]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002ee0:	f001 fe1a 	bl	8004b18 <ILI9341_Draw_Text>
			prevStopWatchHour = stopWatchHour;
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <displayStopWatchScreen+0x2a8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a44      	ldr	r2, [pc, #272]	; (8002ffc <displayStopWatchScreen+0x2dc>)
 8002eea:	6013      	str	r3, [r2, #0]
		if(prevStopWatchMinute != stopWatchMinute){
 8002eec:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d02c      	beq.n	8002f52 <displayStopWatchScreen+0x232>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4935      	ldr	r1, [pc, #212]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002f00:	4835      	ldr	r0, [pc, #212]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002f02:	f007 ff5f 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002f06:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3346      	adds	r3, #70	; 0x46
 8002f0e:	b2d9      	uxtb	r1, r3
 8002f10:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f1c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002f20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f24:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002f28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f30:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f34:	793b      	ldrb	r3, [r7, #4]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	2305      	movs	r3, #5
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f44:	4824      	ldr	r0, [pc, #144]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002f46:	f001 fde7 	bl	8004b18 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <displayStopWatchScreen+0x2b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <displayStopWatchScreen+0x2ac>)
 8002f50:	6013      	str	r3, [r2, #0]
		if(prevStopWatchSecond != stopWatchSecond){
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d02c      	beq.n	8002fb8 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <displayStopWatchScreen+0x2b4>)
 8002f66:	481c      	ldr	r0, [pc, #112]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002f68:	f007 ff2c 	bl	800adc4 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <displayStopWatchScreen+0x2bc>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3b74      	subs	r3, #116	; 0x74
 8002f74:	b2d9      	uxtb	r1, r3
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <displayStopWatchScreen+0x2c0>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f82:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002fc0 <displayStopWatchScreen+0x2a0>
 8002f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f8a:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8002f8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f96:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f9a:	793b      	ldrb	r3, [r7, #4]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002faa:	480b      	ldr	r0, [pc, #44]	; (8002fd8 <displayStopWatchScreen+0x2b8>)
 8002fac:	f001 fdb4 	bl	8004b18 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <displayStopWatchScreen+0x2c8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <displayStopWatchScreen+0x2c4>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	66666666 	.word	0x66666666
 8002fc4:	3fd66666 	.word	0x3fd66666
 8002fc8:	200000b0 	.word	0x200000b0
 8002fcc:	200000c0 	.word	0x200000c0
 8002fd0:	200000b4 	.word	0x200000b4
 8002fd4:	0800d1c8 	.word	0x0800d1c8
 8002fd8:	20000414 	.word	0x20000414
 8002fdc:	20000048 	.word	0x20000048
 8002fe0:	2000004a 	.word	0x2000004a
 8002fe4:	200000c4 	.word	0x200000c4
 8002fe8:	200000b8 	.word	0x200000b8
 8002fec:	200000c8 	.word	0x200000c8
 8002ff0:	20000300 	.word	0x20000300
 8002ff4:	66666667 	.word	0x66666667
 8002ff8:	51eb851f 	.word	0x51eb851f
 8002ffc:	200000bc 	.word	0x200000bc

08003000 <stopWatchScreen>:

void stopWatchScreen(){
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af02      	add	r7, sp, #8

	if(initalStopWatchScreen == false){
 8003006:	4b64      	ldr	r3, [pc, #400]	; (8003198 <stopWatchScreen+0x198>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d074      	beq.n	80030fe <stopWatchScreen+0xfe>
		resetPrevStopWatch();
 8003014:	f7ff fe48 	bl	8002ca8 <resetPrevStopWatch>
		//Statics
		sprintf(Temp_Buffer_text, "Stopwatch");
 8003018:	4960      	ldr	r1, [pc, #384]	; (800319c <stopWatchScreen+0x19c>)
 800301a:	4861      	ldr	r0, [pc, #388]	; (80031a0 <stopWatchScreen+0x1a0>)
 800301c:	f007 fed2 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8003020:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <stopWatchScreen+0x1a4>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3b05      	subs	r3, #5
 8003028:	b2d9      	uxtb	r1, r3
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <stopWatchScreen+0x1a8>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003036:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8003188 <stopWatchScreen+0x188>
 800303a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800303e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003042:	edc7 7a01 	vstr	s15, [r7, #4]
 8003046:	793b      	ldrb	r3, [r7, #4]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	2302      	movs	r3, #2
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003056:	4852      	ldr	r0, [pc, #328]	; (80031a0 <stopWatchScreen+0x1a0>)
 8003058:	f001 fd5e 	bl	8004b18 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, ":");
 800305c:	4953      	ldr	r1, [pc, #332]	; (80031ac <stopWatchScreen+0x1ac>)
 800305e:	4850      	ldr	r0, [pc, #320]	; (80031a0 <stopWatchScreen+0x1a0>)
 8003060:	f007 feb0 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+60, maxHeight * 0.37+16, WHITE, 4, BLACK);
 8003064:	4b4f      	ldr	r3, [pc, #316]	; (80031a4 <stopWatchScreen+0x1a4>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	b2d9      	uxtb	r1, r3
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <stopWatchScreen+0x1a8>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800307a:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003190 <stopWatchScreen+0x190>
 800307e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003082:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003086:	ee37 7b06 	vadd.f64	d7, d7, d6
 800308a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800308e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003092:	793b      	ldrb	r3, [r7, #4]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	2300      	movs	r3, #0
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2304      	movs	r3, #4
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a2:	483f      	ldr	r0, [pc, #252]	; (80031a0 <stopWatchScreen+0x1a0>)
 80030a4:	f001 fd38 	bl	8004b18 <ILI9341_Draw_Text>
		sprintf(Temp_Buffer_text, ":");
 80030a8:	4940      	ldr	r1, [pc, #256]	; (80031ac <stopWatchScreen+0x1ac>)
 80030aa:	483d      	ldr	r0, [pc, #244]	; (80031a0 <stopWatchScreen+0x1a0>)
 80030ac:	f007 fe8a 	bl	800adc4 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+130, maxHeight * 0.37+16, WHITE, 4, BLACK);
 80030b0:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <stopWatchScreen+0x1a4>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	3b7e      	subs	r3, #126	; 0x7e
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <stopWatchScreen+0x1a8>)
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80030c6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003190 <stopWatchScreen+0x190>
 80030ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030ce:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80030d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80030da:	edc7 7a01 	vstr	s15, [r7, #4]
 80030de:	793b      	ldrb	r3, [r7, #4]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	2300      	movs	r3, #0
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2304      	movs	r3, #4
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ee:	482c      	ldr	r0, [pc, #176]	; (80031a0 <stopWatchScreen+0x1a0>)
 80030f0:	f001 fd12 	bl	8004b18 <ILI9341_Draw_Text>

		displayStopWatchScreen(); //Initial first Time;
 80030f4:	f7ff fe14 	bl	8002d20 <displayStopWatchScreen>
		initalStopWatchScreen = true;
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <stopWatchScreen+0x198>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
	}

	//Time running
	if(isStopWatchRunning == true){
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <stopWatchScreen+0x1b0>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <stopWatchScreen+0x11e>
		stopWatchMillisecond += millisecondStopWatch;
 8003106:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <stopWatchScreen+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4413      	add	r3, r2
 8003112:	461a      	mov	r2, r3
 8003114:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003116:	601a      	str	r2, [r3, #0]
		millisecondStopWatch = 0;
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <stopWatchScreen+0x1b8>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
	}

	//Normal Clock
	if (stopWatchMillisecond >= 1000){
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003126:	db0a      	blt.n	800313e <stopWatchScreen+0x13e>
		stopWatchMillisecond = stopWatchMillisecond - 1000; //Keep remainder of millisecondStopWatch
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <stopWatchScreen+0x1b4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <stopWatchScreen+0x1b4>)
 8003132:	6013      	str	r3, [r2, #0]
		stopWatchSecond++;
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <stopWatchScreen+0x1bc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a20      	ldr	r2, [pc, #128]	; (80031bc <stopWatchScreen+0x1bc>)
 800313c:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchSecond >= 60){
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <stopWatchScreen+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b3b      	cmp	r3, #59	; 0x3b
 8003144:	dd07      	ble.n	8003156 <stopWatchScreen+0x156>
		stopWatchSecond = 0;
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <stopWatchScreen+0x1bc>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
		stopWatchMinute++;
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <stopWatchScreen+0x1c0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <stopWatchScreen+0x1c0>)
 8003154:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchMinute >= 60){
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <stopWatchScreen+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b3b      	cmp	r3, #59	; 0x3b
 800315c:	dd07      	ble.n	800316e <stopWatchScreen+0x16e>
		stopWatchMinute = 0;
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <stopWatchScreen+0x1c0>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
		stopWatchHour++;
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <stopWatchScreen+0x1c4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <stopWatchScreen+0x1c4>)
 800316c:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchHour >= 99){
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <stopWatchScreen+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b62      	cmp	r3, #98	; 0x62
 8003174:	dd02      	ble.n	800317c <stopWatchScreen+0x17c>
		stopWatchHour = 0;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <stopWatchScreen+0x1c4>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
	}

	//Running
	displayStopWatchScreen();
 800317c:	f7ff fdd0 	bl	8002d20 <displayStopWatchScreen>
	//		sprintf(hexString,"%d\r\n",millisecondStopWatch);
	//		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);



}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	9999999a 	.word	0x9999999a
 800318c:	3fb99999 	.word	0x3fb99999
 8003190:	7ae147ae 	.word	0x7ae147ae
 8003194:	3fd7ae14 	.word	0x3fd7ae14
 8003198:	20000304 	.word	0x20000304
 800319c:	0800d294 	.word	0x0800d294
 80031a0:	20000414 	.word	0x20000414
 80031a4:	20000048 	.word	0x20000048
 80031a8:	2000004a 	.word	0x2000004a
 80031ac:	0800d1e4 	.word	0x0800d1e4
 80031b0:	20000305 	.word	0x20000305
 80031b4:	20000300 	.word	0x20000300
 80031b8:	200002d0 	.word	0x200002d0
 80031bc:	200000b8 	.word	0x200000b8
 80031c0:	200000b4 	.word	0x200000b4
 80031c4:	200000b0 	.word	0x200000b0

080031c8 <tempMonitor>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void tempMonitor(){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af02      	add	r7, sp, #8
	//Temperature
	cmdBuffer[0] = 0x03;
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <tempMonitor+0x150>)
 80031d0:	2203      	movs	r2, #3
 80031d2:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <tempMonitor+0x150>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 80031da:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <tempMonitor+0x150>)
 80031dc:	2204      	movs	r2, #4
 80031de:	709a      	strb	r2, [r3, #2]

	//Send Temp & Humid via UART3
	sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", temp, humid);
 80031e0:	4b4e      	ldr	r3, [pc, #312]	; (800331c <tempMonitor+0x154>)
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031ea:	4b4d      	ldr	r3, [pc, #308]	; (8003320 <tempMonitor+0x158>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031f4:	ed8d 7b00 	vstr	d7, [sp]
 80031f8:	ec53 2b16 	vmov	r2, r3, d6
 80031fc:	4949      	ldr	r1, [pc, #292]	; (8003324 <tempMonitor+0x15c>)
 80031fe:	484a      	ldr	r0, [pc, #296]	; (8003328 <tempMonitor+0x160>)
 8003200:	f007 fde0 	bl	800adc4 <siprintf>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8003204:	bf00      	nop
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <tempMonitor+0x164>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d1f8      	bne.n	8003206 <tempMonitor+0x3e>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8003214:	4844      	ldr	r0, [pc, #272]	; (8003328 <tempMonitor+0x160>)
 8003216:	f7fd f813 	bl	8000240 <strlen>
 800321a:	4603      	mov	r3, r0
 800321c:	b29a      	uxth	r2, r3
 800321e:	23c8      	movs	r3, #200	; 0xc8
 8003220:	4941      	ldr	r1, [pc, #260]	; (8003328 <tempMonitor+0x160>)
 8003222:	4842      	ldr	r0, [pc, #264]	; (800332c <tempMonitor+0x164>)
 8003224:	f006 fc2a 	bl	8009a7c <HAL_UART_Transmit>

	//HAL_Delay(5000); //>3000 ms
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003228:	23c8      	movs	r3, #200	; 0xc8
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2303      	movs	r3, #3
 800322e:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <tempMonitor+0x150>)
 8003230:	21b8      	movs	r1, #184	; 0xb8
 8003232:	483f      	ldr	r0, [pc, #252]	; (8003330 <tempMonitor+0x168>)
 8003234:	f002 fd82 	bl	8005d3c <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003238:	23c8      	movs	r3, #200	; 0xc8
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2303      	movs	r3, #3
 800323e:	4a36      	ldr	r2, [pc, #216]	; (8003318 <tempMonitor+0x150>)
 8003240:	21b8      	movs	r1, #184	; 0xb8
 8003242:	483b      	ldr	r0, [pc, #236]	; (8003330 <tempMonitor+0x168>)
 8003244:	f002 fd7a 	bl	8005d3c <HAL_I2C_Master_Transmit>

	HAL_Delay(80); // 50 is too low, 80 is okay
 8003248:	2050      	movs	r0, #80	; 0x50
 800324a:	f002 f9bb 	bl	80055c4 <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 800324e:	23c8      	movs	r3, #200	; 0xc8
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2308      	movs	r3, #8
 8003254:	4a37      	ldr	r2, [pc, #220]	; (8003334 <tempMonitor+0x16c>)
 8003256:	21b8      	movs	r1, #184	; 0xb8
 8003258:	4835      	ldr	r0, [pc, #212]	; (8003330 <tempMonitor+0x168>)
 800325a:	f002 fe63 	bl	8005f24 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <tempMonitor+0x16c>)
 8003260:	79db      	ldrb	r3, [r3, #7]
 8003262:	b29b      	uxth	r3, r3
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <tempMonitor+0x16c>)
 800326a:	799b      	ldrb	r3, [r3, #6]
 800326c:	b29a      	uxth	r2, r3
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	4413      	add	r3, r2
 8003272:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8003274:	2106      	movs	r1, #6
 8003276:	482f      	ldr	r0, [pc, #188]	; (8003334 <tempMonitor+0x16c>)
 8003278:	f000 fcc4 	bl	8003c04 <CRC16_2>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	4293      	cmp	r3, r2
 8003284:	d143      	bne.n	800330e <tempMonitor+0x146>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <tempMonitor+0x16c>)
 8003288:	791b      	ldrb	r3, [r3, #4]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	b29b      	uxth	r3, r3
 800328e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <tempMonitor+0x16c>)
 8003296:	795b      	ldrb	r3, [r3, #5]
 8003298:	b29b      	uxth	r3, r3
 800329a:	4413      	add	r3, r2
 800329c:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 800329e:	88bb      	ldrh	r3, [r7, #4]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80032a8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80032ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80032b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <tempMonitor+0x154>)
 80032b6:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <tempMonitor+0x16c>)
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	09db      	lsrs	r3, r3, #7
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <tempMonitor+0x10a>
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <tempMonitor+0x154>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	eef1 7a67 	vneg.f32	s15, s15
 80032d0:	e002      	b.n	80032d8 <tempMonitor+0x110>
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <tempMonitor+0x154>)
 80032d4:	edd3 7a00 	vldr	s15, [r3]
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <tempMonitor+0x154>)
 80032da:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <tempMonitor+0x16c>)
 80032e0:	789b      	ldrb	r3, [r3, #2]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <tempMonitor+0x16c>)
 80032ea:	78db      	ldrb	r3, [r3, #3]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80032fc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003300:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003304:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <tempMonitor+0x158>)
 800330a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200003d4 	.word	0x200003d4
 800331c:	20000014 	.word	0x20000014
 8003320:	20000018 	.word	0x20000018
 8003324:	0800d2a0 	.word	0x0800d2a0
 8003328:	200003e0 	.word	0x200003e0
 800332c:	200005d0 	.word	0x200005d0
 8003330:	20000388 	.word	0x20000388
 8003334:	200003d8 	.word	0x200003d8

08003338 <assignmentTwo>:


void assignmentTwo(){
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0

	//calculationClock();
	//checkResetData();
	tempMonitor();
 800333c:	f7ff ff44 	bl	80031c8 <tempMonitor>
	notifyPm();
 8003340:	f7ff fba8 	bl	8002a94 <notifyPm>


	if (mode == 0){
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <assignmentTwo+0xa0>)
 8003346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <assignmentTwo+0x24>
		topBarScreen();
 800334e:	f7fe fb93 	bl	8001a78 <topBarScreen>
		displayClockScreen();
 8003352:	f7fe ff11 	bl	8002178 <displayClockScreen>
		bottomBarScreenUpdate();
 8003356:	f7ff f9b3 	bl	80026c0 <bottomBarScreenUpdate>
	}

	//Test huart1 UART PB6 TX - PB15 RX
	//	sprintf(Temp_Buffer_text, "AA");
	//	HAL_UART_Transmit(&huart1, (uint8_t*) Temp_Buffer_text, strlen(Temp_Buffer_text), 1000);
}
 800335a:	e03b      	b.n	80033d4 <assignmentTwo+0x9c>
	else if (mode == 100){ // Adjust modeEdit 1-year, 2-month, 3-date, 4-day, 5-hour, 6-minute, 7-second
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <assignmentTwo+0xa0>)
 800335e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d136      	bne.n	80033d4 <assignmentTwo+0x9c>
		if(modeEdit == 1){
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <assignmentTwo+0xa4>)
 8003368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <assignmentTwo+0x3e>
			editYearScreen();
 8003370:	f7ff f804 	bl	800237c <editYearScreen>
}
 8003374:	e02e      	b.n	80033d4 <assignmentTwo+0x9c>
		else if (modeEdit == 2){
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <assignmentTwo+0xa4>)
 8003378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d102      	bne.n	8003386 <assignmentTwo+0x4e>
			editMonthScreen();
 8003380:	f7fe ffda 	bl	8002338 <editMonthScreen>
}
 8003384:	e026      	b.n	80033d4 <assignmentTwo+0x9c>
		else if (modeEdit == 3){
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <assignmentTwo+0xa4>)
 8003388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d102      	bne.n	8003396 <assignmentTwo+0x5e>
			editDateScreen();
 8003390:	f7fe ffb0 	bl	80022f4 <editDateScreen>
}
 8003394:	e01e      	b.n	80033d4 <assignmentTwo+0x9c>
		else if (modeEdit == 4){
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <assignmentTwo+0xa4>)
 8003398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d102      	bne.n	80033a6 <assignmentTwo+0x6e>
			editDayScreen();
 80033a0:	f7fe ff86 	bl	80022b0 <editDayScreen>
}
 80033a4:	e016      	b.n	80033d4 <assignmentTwo+0x9c>
		else if (modeEdit == 5){
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <assignmentTwo+0xa4>)
 80033a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d102      	bne.n	80033b6 <assignmentTwo+0x7e>
			editHourScreen();
 80033b0:	f7fe ff16 	bl	80021e0 <editHourScreen>
}
 80033b4:	e00e      	b.n	80033d4 <assignmentTwo+0x9c>
		else if (modeEdit == 6){
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <assignmentTwo+0xa4>)
 80033b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d102      	bne.n	80033c6 <assignmentTwo+0x8e>
			editMinuteScreen();
 80033c0:	f7fe ff32 	bl	8002228 <editMinuteScreen>
}
 80033c4:	e006      	b.n	80033d4 <assignmentTwo+0x9c>
		else if (modeEdit == 7){
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <assignmentTwo+0xa4>)
 80033c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d101      	bne.n	80033d4 <assignmentTwo+0x9c>
			editSecondScreen();
 80033d0:	f7fe ff4c 	bl	800226c <editSecondScreen>
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2000004e 	.word	0x2000004e
 80033dc:	20000050 	.word	0x20000050

080033e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80033e8:	f7fd fc58 	bl	8000c9c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80033ec:	f7fd fc7c 	bl	8000ce8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033f0:	f002 f87c 	bl	80054ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033f4:	f000 fb68 	bl	8003ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033f8:	f7fd fa82 	bl	8000900 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80033fc:	f001 f878 	bl	80044f0 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8003400:	f000 fc9a 	bl	8003d38 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003404:	f000 fe6e 	bl	80040e4 <MX_TIM1_Init>
  MX_RNG_Init();
 8003408:	f000 fc62 	bl	8003cd0 <MX_RNG_Init>
  MX_I2C1_Init();
 800340c:	f7fd fbc2 	bl	8000b94 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003410:	f000 febc 	bl	800418c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003414:	f000 ff08 	bl	8004228 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003418:	f001 f83a 	bl	8004490 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800341c:	f001 f808 	bl	8004430 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	//Temp but not has code in here yet
	cmdBuffer[0] = 0x03;
 8003420:	4ba6      	ldr	r3, [pc, #664]	; (80036bc <main+0x2dc>)
 8003422:	2203      	movs	r2, #3
 8003424:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003426:	4ba5      	ldr	r3, [pc, #660]	; (80036bc <main+0x2dc>)
 8003428:	2200      	movs	r2, #0
 800342a:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 800342c:	4ba3      	ldr	r3, [pc, #652]	; (80036bc <main+0x2dc>)
 800342e:	2204      	movs	r2, #4
 8003430:	709a      	strb	r2, [r3, #2]

	//initial driver setup to drive ili9341
	ILI9341_Init();
 8003432:	f001 fccf 	bl	8004dd4 <ILI9341_Init>

	//Interrupt millisecond
	HAL_TIM_Base_Start_IT(&htim1);
 8003436:	48a2      	ldr	r0, [pc, #648]	; (80036c0 <main+0x2e0>)
 8003438:	f005 f8ec 	bl	8008614 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800343c:	48a1      	ldr	r0, [pc, #644]	; (80036c4 <main+0x2e4>)
 800343e:	f005 f8e9 	bl	8008614 <HAL_TIM_Base_Start_IT>

	//Reset Screen
	setHorizontalScreen(BLACK);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fd ff2a 	bl	800129c <setHorizontalScreen>

	//Read EEPROM First Time
	readData();
 8003448:	f7fd fe7c 	bl	8001144 <readData>

	// Setup PM Sensor
	uint8_t *respondStart;
	respondStart = wake_sensirion();
 800344c:	f7fd fcc0 	bl	8000dd0 <wake_sensirion>
 8003450:	6078      	str	r0, [r7, #4]
	sent_string_to_mcu("STA");
 8003452:	489d      	ldr	r0, [pc, #628]	; (80036c8 <main+0x2e8>)
 8003454:	f7fd fde8 	bl	8001028 <sent_string_to_mcu>

		//	  char stringBuffer[30];
		//	  sprintf(stringBuffer, "%d\r\n" , millisecond);
		//	  HAL_UART_Transmit(&huart3, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);

		calculationClock();
 8003458:	f7fd ff9c 	bl	8001394 <calculationClock>
		checkResetData();
 800345c:	f7fd ff0e 	bl	800127c <checkResetData>


		if (prevMode != mode || prevModeEdit != modeEdit){
 8003460:	4b9a      	ldr	r3, [pc, #616]	; (80036cc <main+0x2ec>)
 8003462:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003466:	4b9a      	ldr	r3, [pc, #616]	; (80036d0 <main+0x2f0>)
 8003468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800346c:	429a      	cmp	r2, r3
 800346e:	d107      	bne.n	8003480 <main+0xa0>
 8003470:	4b98      	ldr	r3, [pc, #608]	; (80036d4 <main+0x2f4>)
 8003472:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003476:	4b98      	ldr	r3, [pc, #608]	; (80036d8 <main+0x2f8>)
 8003478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347c:	429a      	cmp	r2, r3
 800347e:	d006      	beq.n	800348e <main+0xae>
			prevModeEdit = modeEdit;
 8003480:	4b95      	ldr	r3, [pc, #596]	; (80036d8 <main+0x2f8>)
 8003482:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003486:	4b93      	ldr	r3, [pc, #588]	; (80036d4 <main+0x2f4>)
 8003488:	801a      	strh	r2, [r3, #0]
			resetPrevNum();
 800348a:	f7fe fc33 	bl	8001cf4 <resetPrevNum>
		}
		// When Change Mode
		if (prevMode != mode){
 800348e:	4b8f      	ldr	r3, [pc, #572]	; (80036cc <main+0x2ec>)
 8003490:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003494:	4b8e      	ldr	r3, [pc, #568]	; (80036d0 <main+0x2f0>)
 8003496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349a:	429a      	cmp	r2, r3
 800349c:	d00c      	beq.n	80034b8 <main+0xd8>
			prevMode = mode;
 800349e:	4b8c      	ldr	r3, [pc, #560]	; (80036d0 <main+0x2f0>)
 80034a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034a4:	4b89      	ldr	r3, [pc, #548]	; (80036cc <main+0x2ec>)
 80034a6:	801a      	strh	r2, [r3, #0]
			setHorizontalScreen(BLACK);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd fef7 	bl	800129c <setHorizontalScreen>
			bottomBarScreen();
 80034ae:	f7fe ff8b 	bl	80023c8 <bottomBarScreen>

			//For Mode 1 StopWatch
			initalStopWatchScreen = false;
 80034b2:	4b8a      	ldr	r3, [pc, #552]	; (80036dc <main+0x2fc>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 0){
 80034b8:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <main+0x2f0>)
 80034ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <main+0x114>
			if (halfsecond == 1){	// interupt every 500 ms
 80034c2:	4b87      	ldr	r3, [pc, #540]	; (80036e0 <main+0x300>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d11b      	bne.n	8003502 <main+0x122>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 80034ca:	4b86      	ldr	r3, [pc, #536]	; (80036e4 <main+0x304>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f083 0301 	eor.w	r3, r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <main+0x304>)
 80034e6:	701a      	strb	r2, [r3, #0]
				//displayClock(millisecond);
				halfsecond = 0;
 80034e8:	4b7d      	ldr	r3, [pc, #500]	; (80036e0 <main+0x300>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
				assignmentTwo();
 80034ee:	f7ff ff23 	bl	8003338 <assignmentTwo>
 80034f2:	e006      	b.n	8003502 <main+0x122>
			}
		}else if(mode == 1){
 80034f4:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <main+0x2f0>)
 80034f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <main+0x122>
			//Dont forget save EEPROM Here (or all in main)
			stopWatchScreen();
 80034fe:	f7ff fd7f 	bl	8003000 <stopWatchScreen>
		}


		pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	4878      	ldr	r0, [pc, #480]	; (80036e8 <main+0x308>)
 8003506:	f002 fb3f 	bl	8005b88 <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4b75      	ldr	r3, [pc, #468]	; (80036ec <main+0x30c>)
 8003518:	701a      	strb	r2, [r3, #0]
		pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 800351a:	2140      	movs	r1, #64	; 0x40
 800351c:	4872      	ldr	r0, [pc, #456]	; (80036e8 <main+0x308>)
 800351e:	f002 fb33 	bl	8005b88 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4b70      	ldr	r3, [pc, #448]	; (80036f0 <main+0x310>)
 8003530:	701a      	strb	r2, [r3, #0]
		pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8003532:	2120      	movs	r1, #32
 8003534:	486c      	ldr	r0, [pc, #432]	; (80036e8 <main+0x308>)
 8003536:	f002 fb27 	bl	8005b88 <HAL_GPIO_ReadPin>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b6b      	ldr	r3, [pc, #428]	; (80036f4 <main+0x314>)
 8003548:	701a      	strb	r2, [r3, #0]
		pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 800354a:	2110      	movs	r1, #16
 800354c:	4866      	ldr	r0, [pc, #408]	; (80036e8 <main+0x308>)
 800354e:	f002 fb1b 	bl	8005b88 <HAL_GPIO_ReadPin>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <main+0x318>)
 8003560:	701a      	strb	r2, [r3, #0]
//		pressButton2 = 0;
//		pressButton3 = 0;
//		pressButton4 = 0;

		//Buzzer
		if ((pressButton1 == true && isPressButton1 == false) ||
 8003562:	4b62      	ldr	r3, [pc, #392]	; (80036ec <main+0x30c>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <main+0x198>
 800356a:	4b64      	ldr	r3, [pc, #400]	; (80036fc <main+0x31c>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	f083 0301 	eor.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d120      	bne.n	80035ba <main+0x1da>
			(pressButton2 == true && isPressButton2 == false) ||
 8003578:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <main+0x310>)
 800357a:	781b      	ldrb	r3, [r3, #0]
		if ((pressButton1 == true && isPressButton1 == false) ||
 800357c:	2b00      	cmp	r3, #0
 800357e:	d006      	beq.n	800358e <main+0x1ae>
			(pressButton2 == true && isPressButton2 == false) ||
 8003580:	4b5f      	ldr	r3, [pc, #380]	; (8003700 <main+0x320>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <main+0x1da>
			(pressButton3 == true && isPressButton3 == false) ||
 800358e:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <main+0x314>)
 8003590:	781b      	ldrb	r3, [r3, #0]
			(pressButton2 == true && isPressButton2 == false) ||
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <main+0x1c4>
			(pressButton3 == true && isPressButton3 == false) ||
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <main+0x324>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	f083 0301 	eor.w	r3, r3, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <main+0x1da>
			(pressButton4 == true && isPressButton4 == false)){
 80035a4:	4b54      	ldr	r3, [pc, #336]	; (80036f8 <main+0x318>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
			(pressButton3 == true && isPressButton3 == false) ||
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <main+0x1de>
			(pressButton4 == true && isPressButton4 == false)){
 80035ac:	4b56      	ldr	r3, [pc, #344]	; (8003708 <main+0x328>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	f083 0301 	eor.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <main+0x1de>
			buzzerSound();
 80035ba:	f7ff fa55 	bl	8002a68 <buzzerSound>
		}

		//General Mode
		if (pressButton1 == true && isPressButton1 == false && mode != 100){ // increase mode only once
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <main+0x30c>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01f      	beq.n	8003606 <main+0x226>
 80035c6:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <main+0x31c>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	f083 0301 	eor.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d018      	beq.n	8003606 <main+0x226>
 80035d4:	4b3e      	ldr	r3, [pc, #248]	; (80036d0 <main+0x2f0>)
 80035d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d013      	beq.n	8003606 <main+0x226>
			mode++;
 80035de:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <main+0x2f0>)
 80035e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b21a      	sxth	r2, r3
 80035ec:	4b38      	ldr	r3, [pc, #224]	; (80036d0 <main+0x2f0>)
 80035ee:	801a      	strh	r2, [r3, #0]
			if(mode == 3){
 80035f0:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <main+0x2f0>)
 80035f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d102      	bne.n	8003600 <main+0x220>
				mode = 0;
 80035fa:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <main+0x2f0>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	801a      	strh	r2, [r3, #0]
			}
			isPressButton1 = true;
 8003600:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <main+0x31c>)
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
		}
		//StopWatch Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 1 && isStopWatchRunning != true){ //Reset StopWatch
 8003606:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <main+0x310>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d017      	beq.n	800363e <main+0x25e>
 800360e:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <main+0x320>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	f083 0301 	eor.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <main+0x25e>
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <main+0x2f0>)
 800361e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10b      	bne.n	800363e <main+0x25e>
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <main+0x32c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <main+0x25e>
			isPressButton2 = true;
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <main+0x320>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
			resetStopWatch();
 800363a:	f7ff fb55 	bl	8002ce8 <resetStopWatch>
		}
		if (pressButton3 == true && isPressButton3 == false && mode == 1){ //Running/Stop StopWatch
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <main+0x314>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01f      	beq.n	8003686 <main+0x2a6>
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <main+0x324>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d018      	beq.n	8003686 <main+0x2a6>
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <main+0x2f0>)
 8003656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d113      	bne.n	8003686 <main+0x2a6>
			isPressButton3 = true;
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <main+0x324>)
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
			if(isStopWatchRunning == false){ // press button
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <main+0x32c>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <main+0x2a0>
				millisecondStopWatch = 0;
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <main+0x330>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
				isStopWatchRunning = true;
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <main+0x32c>)
 800367a:	2201      	movs	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e002      	b.n	8003686 <main+0x2a6>
			}else{
				isStopWatchRunning = false;
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <main+0x32c>)
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
		}



		//Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <main+0x310>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d046      	beq.n	800371c <main+0x33c>
 800368e:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <main+0x320>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	f083 0301 	eor.w	r3, r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d03f      	beq.n	800371c <main+0x33c>
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <main+0x2f0>)
 800369e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d13a      	bne.n	800371c <main+0x33c>
			isPressButton2 = true;
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <main+0x320>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <main+0x334>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	4919      	ldr	r1, [pc, #100]	; (8003718 <main+0x338>)
 80036b4:	e9c1 2300 	strd	r2, r3, [r1]
 80036b8:	e05c      	b.n	8003774 <main+0x394>
 80036ba:	bf00      	nop
 80036bc:	200003d4 	.word	0x200003d4
 80036c0:	20000538 	.word	0x20000538
 80036c4:	20000584 	.word	0x20000584
 80036c8:	0800d2c8 	.word	0x0800d2c8
 80036cc:	20000052 	.word	0x20000052
 80036d0:	2000004e 	.word	0x2000004e
 80036d4:	20000054 	.word	0x20000054
 80036d8:	20000050 	.word	0x20000050
 80036dc:	20000304 	.word	0x20000304
 80036e0:	200002d4 	.word	0x200002d4
 80036e4:	20000044 	.word	0x20000044
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	200002d8 	.word	0x200002d8
 80036f0:	200002d9 	.word	0x200002d9
 80036f4:	200002da 	.word	0x200002da
 80036f8:	200002db 	.word	0x200002db
 80036fc:	200002dc 	.word	0x200002dc
 8003700:	200002dd 	.word	0x200002dd
 8003704:	200002de 	.word	0x200002de
 8003708:	200002df 	.word	0x200002df
 800370c:	20000305 	.word	0x20000305
 8003710:	200002d0 	.word	0x200002d0
 8003714:	200002f0 	.word	0x200002f0
 8003718:	200002e8 	.word	0x200002e8
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 800371c:	4ba7      	ldr	r3, [pc, #668]	; (80039bc <main+0x5dc>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d027      	beq.n	8003774 <main+0x394>
 8003724:	4ba6      	ldr	r3, [pc, #664]	; (80039c0 <main+0x5e0>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <main+0x394>
 800372c:	4ba5      	ldr	r3, [pc, #660]	; (80039c4 <main+0x5e4>)
 800372e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11e      	bne.n	8003774 <main+0x394>
 8003736:	4ba4      	ldr	r3, [pc, #656]	; (80039c8 <main+0x5e8>)
 8003738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800373c:	4ba3      	ldr	r3, [pc, #652]	; (80039cc <main+0x5ec>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	1a84      	subs	r4, r0, r2
 8003744:	eb61 0503 	sbc.w	r5, r1, r3
 8003748:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	42ab      	cmp	r3, r5
 8003752:	bf08      	it	eq
 8003754:	42a2      	cmpeq	r2, r4
 8003756:	d20d      	bcs.n	8003774 <main+0x394>
			buzzerSound();
 8003758:	f7ff f986 	bl	8002a68 <buzzerSound>
			modeEdit = 1; // Reset to Year First time
 800375c:	4b9c      	ldr	r3, [pc, #624]	; (80039d0 <main+0x5f0>)
 800375e:	2201      	movs	r2, #1
 8003760:	801a      	strh	r2, [r3, #0]
			mode = 100;
 8003762:	4b98      	ldr	r3, [pc, #608]	; (80039c4 <main+0x5e4>)
 8003764:	2264      	movs	r2, #100	; 0x64
 8003766:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8003768:	4b97      	ldr	r3, [pc, #604]	; (80039c8 <main+0x5e8>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	4997      	ldr	r1, [pc, #604]	; (80039cc <main+0x5ec>)
 8003770:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 8003774:	4b91      	ldr	r3, [pc, #580]	; (80039bc <main+0x5dc>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02c      	beq.n	80037d6 <main+0x3f6>
 800377c:	4b90      	ldr	r3, [pc, #576]	; (80039c0 <main+0x5e0>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	f083 0301 	eor.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <main+0x3f6>
 800378a:	4b8f      	ldr	r3, [pc, #572]	; (80039c8 <main+0x5e8>)
 800378c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003790:	4b8e      	ldr	r3, [pc, #568]	; (80039cc <main+0x5ec>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	ebb0 0802 	subs.w	r8, r0, r2
 800379a:	eb61 0903 	sbc.w	r9, r1, r3
 800379e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	454b      	cmp	r3, r9
 80037a8:	bf08      	it	eq
 80037aa:	4542      	cmpeq	r2, r8
 80037ac:	d213      	bcs.n	80037d6 <main+0x3f6>
 80037ae:	4b85      	ldr	r3, [pc, #532]	; (80039c4 <main+0x5e4>)
 80037b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b4:	2b64      	cmp	r3, #100	; 0x64
 80037b6:	d10e      	bne.n	80037d6 <main+0x3f6>
			isPressButton2 = true;
 80037b8:	4b81      	ldr	r3, [pc, #516]	; (80039c0 <main+0x5e0>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Year First time
 80037be:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <main+0x5f0>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	801a      	strh	r2, [r3, #0]
			mode = 0;
 80037c4:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <main+0x5e4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80037ca:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <main+0x5e8>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	497e      	ldr	r1, [pc, #504]	; (80039cc <main+0x5ec>)
 80037d2:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 80037d6:	4b7f      	ldr	r3, [pc, #508]	; (80039d4 <main+0x5f4>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d022      	beq.n	8003824 <main+0x444>
 80037de:	4b7e      	ldr	r3, [pc, #504]	; (80039d8 <main+0x5f8>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f083 0301 	eor.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <main+0x444>
 80037ec:	4b75      	ldr	r3, [pc, #468]	; (80039c4 <main+0x5e4>)
 80037ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d116      	bne.n	8003824 <main+0x444>
			modeEdit++;
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <main+0x5f0>)
 80037f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	b29b      	uxth	r3, r3
 8003802:	b21a      	sxth	r2, r3
 8003804:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <main+0x5f0>)
 8003806:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 8003808:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <main+0x5f8>)
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 8){	 // finish loop edit
 800380e:	4b70      	ldr	r3, [pc, #448]	; (80039d0 <main+0x5f0>)
 8003810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d105      	bne.n	8003824 <main+0x444>
				modeEdit = 1; // Reset to Year
 8003818:	4b6d      	ldr	r3, [pc, #436]	; (80039d0 <main+0x5f0>)
 800381a:	2201      	movs	r2, #1
 800381c:	801a      	strh	r2, [r3, #0]
				mode = 0;	  // Back to General Mode
 800381e:	4b69      	ldr	r3, [pc, #420]	; (80039c4 <main+0x5e4>)
 8003820:	2200      	movs	r2, #0
 8003822:	801a      	strh	r2, [r3, #0]
			}
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 8003824:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <main+0x5fc>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d06d      	beq.n	8003908 <main+0x528>
 800382c:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <main+0x600>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f083 0301 	eor.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d066      	beq.n	8003908 <main+0x528>
 800383a:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <main+0x5e4>)
 800383c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d161      	bne.n	8003908 <main+0x528>
			if (modeEdit == 1){
 8003844:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <main+0x5f0>)
 8003846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d109      	bne.n	8003862 <main+0x482>
				year--;
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <main+0x604>)
 8003850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	b21a      	sxth	r2, r3
 800385c:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <main+0x604>)
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e04a      	b.n	80038f8 <main+0x518>
			}
			else if (modeEdit == 2){
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <main+0x5f0>)
 8003864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d109      	bne.n	8003880 <main+0x4a0>
				monthIndex--;
 800386c:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <main+0x608>)
 800386e:	f993 3000 	ldrsb.w	r3, [r3]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	b25a      	sxtb	r2, r3
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <main+0x608>)
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e03b      	b.n	80038f8 <main+0x518>
			}
			else if (modeEdit == 3){
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <main+0x5f0>)
 8003882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d109      	bne.n	800389e <main+0x4be>
				date--;
 800388a:	4b58      	ldr	r3, [pc, #352]	; (80039ec <main+0x60c>)
 800388c:	f993 3000 	ldrsb.w	r3, [r3]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	b25a      	sxtb	r2, r3
 8003898:	4b54      	ldr	r3, [pc, #336]	; (80039ec <main+0x60c>)
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e02c      	b.n	80038f8 <main+0x518>
			}
			else if (modeEdit == 4){
 800389e:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <main+0x5f0>)
 80038a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d109      	bne.n	80038bc <main+0x4dc>
				dayIndex--;
 80038a8:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <main+0x610>)
 80038aa:	f993 3000 	ldrsb.w	r3, [r3]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	b25a      	sxtb	r2, r3
 80038b6:	4b4e      	ldr	r3, [pc, #312]	; (80039f0 <main+0x610>)
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e01d      	b.n	80038f8 <main+0x518>
			}
			else if (modeEdit == 5){
 80038bc:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <main+0x5f0>)
 80038be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d105      	bne.n	80038d2 <main+0x4f2>
				hourNum--;
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <main+0x614>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	4a49      	ldr	r2, [pc, #292]	; (80039f4 <main+0x614>)
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e012      	b.n	80038f8 <main+0x518>
			}
			else if (modeEdit == 6){
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <main+0x5f0>)
 80038d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d8:	2b06      	cmp	r3, #6
 80038da:	d105      	bne.n	80038e8 <main+0x508>
				minuteNum--;
 80038dc:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <main+0x618>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	4a45      	ldr	r2, [pc, #276]	; (80039f8 <main+0x618>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e007      	b.n	80038f8 <main+0x518>
			}
			else if (modeEdit == 7){
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <main+0x5f0>)
 80038ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	d102      	bne.n	80038f8 <main+0x518>
				secondNum = 0;
 80038f2:	4b42      	ldr	r3, [pc, #264]	; (80039fc <main+0x61c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <main+0x620>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 80038fe:	f7fe f9f9 	bl	8001cf4 <resetPrevNum>
			isPressButton3 = true;
 8003902:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <main+0x600>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 8003908:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <main+0x624>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8098 	beq.w	8003a42 <main+0x662>
 8003912:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <main+0x628>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8090 	beq.w	8003a42 <main+0x662>
 8003922:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <main+0x5e4>)
 8003924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003928:	2b64      	cmp	r3, #100	; 0x64
 800392a:	f040 808a 	bne.w	8003a42 <main+0x662>
			if (modeEdit == 1){
 800392e:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <main+0x5f0>)
 8003930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d109      	bne.n	800394c <main+0x56c>
				year++;
 8003938:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <main+0x604>)
 800393a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393e:	b29b      	uxth	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	b29b      	uxth	r3, r3
 8003944:	b21a      	sxth	r2, r3
 8003946:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <main+0x604>)
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	e072      	b.n	8003a32 <main+0x652>
			}
			else if (modeEdit == 2){
 800394c:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <main+0x5f0>)
 800394e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d109      	bne.n	800396a <main+0x58a>
				monthIndex++;
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <main+0x608>)
 8003958:	f993 3000 	ldrsb.w	r3, [r3]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3301      	adds	r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	b25a      	sxtb	r2, r3
 8003964:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <main+0x608>)
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e063      	b.n	8003a32 <main+0x652>
			}
			else if (modeEdit == 3){
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <main+0x5f0>)
 800396c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d109      	bne.n	8003988 <main+0x5a8>
				date++;
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <main+0x60c>)
 8003976:	f993 3000 	ldrsb.w	r3, [r3]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	b25a      	sxtb	r2, r3
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <main+0x60c>)
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e054      	b.n	8003a32 <main+0x652>
			}
			else if (modeEdit == 4){
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <main+0x5f0>)
 800398a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d109      	bne.n	80039a6 <main+0x5c6>
				dayIndex++;
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <main+0x610>)
 8003994:	f993 3000 	ldrsb.w	r3, [r3]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	b25a      	sxtb	r2, r3
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <main+0x610>)
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e045      	b.n	8003a32 <main+0x652>
			}
			else if (modeEdit == 5){
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <main+0x5f0>)
 80039a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d12d      	bne.n	8003a0c <main+0x62c>
				hourNum++;
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <main+0x614>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <main+0x614>)
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e03a      	b.n	8003a32 <main+0x652>
 80039bc:	200002d9 	.word	0x200002d9
 80039c0:	200002dd 	.word	0x200002dd
 80039c4:	2000004e 	.word	0x2000004e
 80039c8:	200002f0 	.word	0x200002f0
 80039cc:	200002e8 	.word	0x200002e8
 80039d0:	20000050 	.word	0x20000050
 80039d4:	200002d8 	.word	0x200002d8
 80039d8:	200002dc 	.word	0x200002dc
 80039dc:	200002da 	.word	0x200002da
 80039e0:	200002de 	.word	0x200002de
 80039e4:	200000a6 	.word	0x200000a6
 80039e8:	200000a5 	.word	0x200000a5
 80039ec:	20000056 	.word	0x20000056
 80039f0:	200000a4 	.word	0x200000a4
 80039f4:	20000034 	.word	0x20000034
 80039f8:	20000030 	.word	0x20000030
 80039fc:	2000002c 	.word	0x2000002c
 8003a00:	20000044 	.word	0x20000044
 8003a04:	200002db 	.word	0x200002db
 8003a08:	200002df 	.word	0x200002df
			}
			else if (modeEdit == 6){
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <main+0x6b8>)
 8003a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d105      	bne.n	8003a22 <main+0x642>
				minuteNum++;
 8003a16:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <main+0x6bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <main+0x6bc>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	e007      	b.n	8003a32 <main+0x652>
			}
			else if (modeEdit == 7){
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <main+0x6b8>)
 8003a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a28:	2b07      	cmp	r3, #7
 8003a2a:	d102      	bne.n	8003a32 <main+0x652>
				secondNum = 0;
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <main+0x6c0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8003a32:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <main+0x6c4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8003a38:	f7fe f95c 	bl	8001cf4 <resetPrevNum>
			isPressButton4 = true;
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <main+0x6c8>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
		}

		//Reset isPressButton
		if (pressButton1 == false){
 8003a42:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <main+0x6cc>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	f083 0301 	eor.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <main+0x676>
			isPressButton1 = false;
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <main+0x6d0>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton2 == false){
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <main+0x6d4>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f083 0301 	eor.w	r3, r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <main+0x68a>
			isPressButton2 = false;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <main+0x6d8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton3 == false){
 8003a6a:	4b14      	ldr	r3, [pc, #80]	; (8003abc <main+0x6dc>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	f083 0301 	eor.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <main+0x69e>
			isPressButton3 = false;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <main+0x6e0>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton4 == false){
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <main+0x6e4>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	f083 0301 	eor.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f43f ace5 	beq.w	8003458 <main+0x78>
			isPressButton4 = false;
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <main+0x6c8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
		calculationClock();
 8003a94:	e4e0      	b.n	8003458 <main+0x78>
 8003a96:	bf00      	nop
 8003a98:	20000050 	.word	0x20000050
 8003a9c:	20000030 	.word	0x20000030
 8003aa0:	2000002c 	.word	0x2000002c
 8003aa4:	20000044 	.word	0x20000044
 8003aa8:	200002df 	.word	0x200002df
 8003aac:	200002d8 	.word	0x200002d8
 8003ab0:	200002dc 	.word	0x200002dc
 8003ab4:	200002d9 	.word	0x200002d9
 8003ab8:	200002dd 	.word	0x200002dd
 8003abc:	200002da 	.word	0x200002da
 8003ac0:	200002de 	.word	0x200002de
 8003ac4:	200002db 	.word	0x200002db

08003ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b0b8      	sub	sp, #224	; 0xe0
 8003acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ace:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ad2:	2234      	movs	r2, #52	; 0x34
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f006 fd28 	bl	800a52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003adc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	2290      	movs	r2, #144	; 0x90
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f006 fd19 	bl	800a52c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003afa:	f003 f857 	bl	8006bac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <SystemClock_Config+0x130>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <SystemClock_Config+0x130>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <SystemClock_Config+0x130>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b16:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <SystemClock_Config+0x134>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a38      	ldr	r2, [pc, #224]	; (8003bfc <SystemClock_Config+0x134>)
 8003b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <SystemClock_Config+0x134>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003b34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8003b50:	23c8      	movs	r3, #200	; 0xc8
 8003b52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b56:	2302      	movs	r3, #2
 8003b58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003b5c:	2309      	movs	r3, #9
 8003b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b62:	2302      	movs	r3, #2
 8003b64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 f87d 	bl	8006c6c <HAL_RCC_OscConfig>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003b78:	f000 f8a6 	bl	8003cc8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003b7c:	f003 f826 	bl	8006bcc <HAL_PWREx_EnableOverDrive>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003b86:	f000 f89f 	bl	8003cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b8a:	230f      	movs	r3, #15
 8003b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b90:	2302      	movs	r3, #2
 8003b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003bac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bb0:	2106      	movs	r1, #6
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 fb08 	bl	80071c8 <HAL_RCC_ClockConfig>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8003bbe:	f000 f883 	bl	8003cc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <SystemClock_Config+0x138>)
 8003bc4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fcf3 	bl	80075cc <HAL_RCCEx_PeriphCLKConfig>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8003bec:	f000 f86c 	bl	8003cc8 <Error_Handler>
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	37e0      	adds	r7, #224	; 0xe0
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	00204340 	.word	0x00204340

08003c04 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8003c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c14:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8003c16:	2300      	movs	r3, #0
 8003c18:	737b      	strb	r3, [r7, #13]

	while (length--){
 8003c1a:	e023      	b.n	8003c64 <CRC16_2+0x60>
		crc ^= *ptr++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	89fb      	ldrh	r3, [r7, #14]
 8003c28:	4053      	eors	r3, r2
 8003c2a:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	737b      	strb	r3, [r7, #13]
 8003c30:	e015      	b.n	8003c5e <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <CRC16_2+0x4e>
				crc >>= 1;
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8003c42:	89fb      	ldrh	r3, [r7, #14]
 8003c44:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8003c48:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	81fb      	strh	r3, [r7, #14]
 8003c50:	e002      	b.n	8003c58 <CRC16_2+0x54>
			}
			else
				crc >>= 1;
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8003c58:	7b7b      	ldrb	r3, [r7, #13]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	737b      	strb	r3, [r7, #13]
 8003c5e:	7b7b      	ldrb	r3, [r7, #13]
 8003c60:	2b07      	cmp	r3, #7
 8003c62:	d9e6      	bls.n	8003c32 <CRC16_2+0x2e>
	while (length--){
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	1e5a      	subs	r2, r3, #1
 8003c68:	70fa      	strb	r2, [r7, #3]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1d6      	bne.n	8003c1c <CRC16_2+0x18>
		}
	}
	return crc;
 8003c6e:	89fb      	ldrh	r3, [r7, #14]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]

	//On Board
	//Blue
	if (GPIO_Pin == GPIO_PIN_13){
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	d110      	bne.n	8003cb0 <HAL_GPIO_EXTI_Callback+0x34>
		userResetButton = 1;
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Interrupt pin13 \n\r");
 8003c94:	4909      	ldr	r1, [pc, #36]	; (8003cbc <HAL_GPIO_EXTI_Callback+0x40>)
 8003c96:	480a      	ldr	r0, [pc, #40]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x44>)
 8003c98:	f007 f894 	bl	800adc4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8003c9c:	4808      	ldr	r0, [pc, #32]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x44>)
 8003c9e:	f7fc facf 	bl	8000240 <strlen>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	23c8      	movs	r3, #200	; 0xc8
 8003ca8:	4905      	ldr	r1, [pc, #20]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x44>)
 8003caa:	4806      	ldr	r0, [pc, #24]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x48>)
 8003cac:	f005 fee6 	bl	8009a7c <HAL_UART_Transmit>
	}

}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	200002e0 	.word	0x200002e0
 8003cbc:	0800d2cc 	.word	0x0800d2cc
 8003cc0:	200003e0 	.word	0x200003e0
 8003cc4:	200005d0 	.word	0x200005d0

08003cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8003ccc:	e7fe      	b.n	8003ccc <Error_Handler+0x4>
	...

08003cd0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <MX_RNG_Init+0x20>)
 8003cd6:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <MX_RNG_Init+0x24>)
 8003cd8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003cda:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <MX_RNG_Init+0x20>)
 8003cdc:	f004 f89e 	bl	8007e1c <HAL_RNG_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003ce6:	f7ff ffef 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000478 	.word	0x20000478
 8003cf4:	50060800 	.word	0x50060800

08003cf8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RNG_MspInit+0x38>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10b      	bne.n	8003d22 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_RNG_MspInit+0x3c>)
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <HAL_RNG_MspInit+0x3c>)
 8003d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d14:	6353      	str	r3, [r2, #52]	; 0x34
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <HAL_RNG_MspInit+0x3c>)
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	50060800 	.word	0x50060800
 8003d34:	40023800 	.word	0x40023800

08003d38 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <MX_SPI5_Init+0x78>)
 8003d40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d56:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d86:	2207      	movs	r2, #7
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d8a:	4b08      	ldr	r3, [pc, #32]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003d96:	4805      	ldr	r0, [pc, #20]	; (8003dac <MX_SPI5_Init+0x74>)
 8003d98:	f004 f86a 	bl	8007e70 <HAL_SPI_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8003da2:	f7ff ff91 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000488 	.word	0x20000488
 8003db0:	40015000 	.word	0x40015000

08003db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	60da      	str	r2, [r3, #12]
 8003dca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_SPI_MspInit+0x7c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d128      	bne.n	8003e28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003dd6:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_SPI_MspInit+0x80>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_SPI_MspInit+0x80>)
 8003ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de0:	6453      	str	r3, [r2, #68]	; 0x44
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_SPI_MspInit+0x80>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <HAL_SPI_MspInit+0x80>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a10      	ldr	r2, [pc, #64]	; (8003e34 <HAL_SPI_MspInit+0x80>)
 8003df4:	f043 0320 	orr.w	r3, r3, #32
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_SPI_MspInit+0x80>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003e06:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e14:	2303      	movs	r3, #3
 8003e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e18:	2305      	movs	r3, #5
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	4619      	mov	r1, r3
 8003e22:	4805      	ldr	r0, [pc, #20]	; (8003e38 <HAL_SPI_MspInit+0x84>)
 8003e24:	f001 fd04 	bl	8005830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3728      	adds	r7, #40	; 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40015000 	.word	0x40015000
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40021400 	.word	0x40021400

08003e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_MspInit+0x44>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <HAL_MspInit+0x44>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_MspInit+0x44>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_MspInit+0x44>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <HAL_MspInit+0x44>)
 8003e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e64:	6453      	str	r3, [r2, #68]	; 0x44
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_MspInit+0x44>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e88:	f001 fb7c 	bl	8005584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e94:	4807      	ldr	r0, [pc, #28]	; (8003eb4 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8003e96:	f004 fe11 	bl	8008abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8003ea2:	6013      	str	r3, [r2, #0]
  millisecondStopWatch++;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8003eac:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000538 	.word	0x20000538
 8003eb8:	200002cc 	.word	0x200002cc
 8003ebc:	200002d0 	.word	0x200002d0

08003ec0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ec4:	4803      	ldr	r0, [pc, #12]	; (8003ed4 <TIM2_IRQHandler+0x14>)
 8003ec6:	f004 fdf9 	bl	8008abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8003eca:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <TIM2_IRQHandler+0x18>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000584 	.word	0x20000584
 8003ed8:	200002d4 	.word	0x200002d4

08003edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ee0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ee4:	f001 fe82 	bl	8005bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
	return 1;
 8003ef0:	2301      	movs	r3, #1
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_kill>:

int _kill(int pid, int sig)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f06:	f006 fae7 	bl	800a4d8 <__errno>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2216      	movs	r2, #22
 8003f0e:	601a      	str	r2, [r3, #0]
	return -1;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_exit>:

void _exit (int status)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ffe7 	bl	8003efc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f2e:	e7fe      	b.n	8003f2e <_exit+0x12>

08003f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e00a      	b.n	8003f58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f42:	f3af 8000 	nop.w
 8003f46:	4601      	mov	r1, r0
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60ba      	str	r2, [r7, #8]
 8003f4e:	b2ca      	uxtb	r2, r1
 8003f50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3301      	adds	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	dbf0      	blt.n	8003f42 <_read+0x12>
	}

return len;
 8003f60:	687b      	ldr	r3, [r7, #4]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e009      	b.n	8003f90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	60ba      	str	r2, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	dbf1      	blt.n	8003f7c <_write+0x12>
	}
	return len;
 8003f98:	687b      	ldr	r3, [r7, #4]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <_close>:

int _close(int file)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
	return -1;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fca:	605a      	str	r2, [r3, #4]
	return 0;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <_isatty>:

int _isatty(int file)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
	return 1;
 8003fe2:	2301      	movs	r3, #1
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
	return 0;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004014:	4a14      	ldr	r2, [pc, #80]	; (8004068 <_sbrk+0x5c>)
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <_sbrk+0x60>)
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_sbrk+0x64>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <_sbrk+0x64>)
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <_sbrk+0x68>)
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <_sbrk+0x64>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d207      	bcs.n	800404c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800403c:	f006 fa4c 	bl	800a4d8 <__errno>
 8004040:	4603      	mov	r3, r0
 8004042:	220c      	movs	r2, #12
 8004044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e009      	b.n	8004060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <_sbrk+0x64>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <_sbrk+0x64>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <_sbrk+0x64>)
 800405c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20080000 	.word	0x20080000
 800406c:	00000400 	.word	0x00000400
 8004070:	20000378 	.word	0x20000378
 8004074:	20000770 	.word	0x20000770

08004078 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800407c:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <SystemInit+0x5c>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <SystemInit+0x5c>)
 8004084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <SystemInit+0x60>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <SystemInit+0x60>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <SystemInit+0x60>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <SystemInit+0x60>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <SystemInit+0x60>)
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <SystemInit+0x64>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <SystemInit+0x60>)
 80040ac:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <SystemInit+0x68>)
 80040ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <SystemInit+0x60>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <SystemInit+0x60>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <SystemInit+0x60>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040c2:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <SystemInit+0x5c>)
 80040c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040c8:	609a      	str	r2, [r3, #8]
#endif
}
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000ed00 	.word	0xe000ed00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	fef6ffff 	.word	0xfef6ffff
 80040e0:	24003010 	.word	0x24003010

080040e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ea:	f107 0310 	add.w	r3, r7, #16
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <MX_TIM1_Init+0xa0>)
 8004104:	4a20      	ldr	r2, [pc, #128]	; (8004188 <MX_TIM1_Init+0xa4>)
 8004106:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <MX_TIM1_Init+0xa0>)
 800410a:	22c7      	movs	r2, #199	; 0xc7
 800410c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <MX_TIM1_Init+0xa0>)
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <MX_TIM1_Init+0xa0>)
 8004116:	f240 32e7 	movw	r2, #999	; 0x3e7
 800411a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <MX_TIM1_Init+0xa0>)
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <MX_TIM1_Init+0xa0>)
 8004124:	2200      	movs	r2, #0
 8004126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <MX_TIM1_Init+0xa0>)
 800412a:	2200      	movs	r2, #0
 800412c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800412e:	4815      	ldr	r0, [pc, #84]	; (8004184 <MX_TIM1_Init+0xa0>)
 8004130:	f004 fa18 	bl	8008564 <HAL_TIM_Base_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800413a:	f7ff fdc5 	bl	8003cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800413e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004142:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004144:	f107 0310 	add.w	r3, r7, #16
 8004148:	4619      	mov	r1, r3
 800414a:	480e      	ldr	r0, [pc, #56]	; (8004184 <MX_TIM1_Init+0xa0>)
 800414c:	f004 fee6 	bl	8008f1c <HAL_TIM_ConfigClockSource>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004156:	f7ff fdb7 	bl	8003cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4806      	ldr	r0, [pc, #24]	; (8004184 <MX_TIM1_Init+0xa0>)
 800416c:	f005 fb8c 	bl	8009888 <HAL_TIMEx_MasterConfigSynchronization>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004176:	f7ff fda7 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800417a:	bf00      	nop
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000538 	.word	0x20000538
 8004188:	40010000 	.word	0x40010000

0800418c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004192:	f107 0310 	add.w	r3, r7, #16
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <MX_TIM2_Init+0x98>)
 80041ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <MX_TIM2_Init+0x98>)
 80041b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <MX_TIM2_Init+0x98>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <MX_TIM2_Init+0x98>)
 80041c2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80041c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c8:	4b16      	ldr	r3, [pc, #88]	; (8004224 <MX_TIM2_Init+0x98>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <MX_TIM2_Init+0x98>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041d4:	4813      	ldr	r0, [pc, #76]	; (8004224 <MX_TIM2_Init+0x98>)
 80041d6:	f004 f9c5 	bl	8008564 <HAL_TIM_Base_Init>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80041e0:	f7ff fd72 	bl	8003cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041ea:	f107 0310 	add.w	r3, r7, #16
 80041ee:	4619      	mov	r1, r3
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <MX_TIM2_Init+0x98>)
 80041f2:	f004 fe93 	bl	8008f1c <HAL_TIM_ConfigClockSource>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80041fc:	f7ff fd64 	bl	8003cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004200:	2300      	movs	r3, #0
 8004202:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	4619      	mov	r1, r3
 800420c:	4805      	ldr	r0, [pc, #20]	; (8004224 <MX_TIM2_Init+0x98>)
 800420e:	f005 fb3b 	bl	8009888 <HAL_TIMEx_MasterConfigSynchronization>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004218:	f7ff fd56 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800421c:	bf00      	nop
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000584 	.word	0x20000584

08004228 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	; 0x38
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800422e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800423c:	f107 031c 	add.w	r3, r7, #28
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004248:	463b      	mov	r3, r7
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]
 8004250:	609a      	str	r2, [r3, #8]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	611a      	str	r2, [r3, #16]
 8004256:	615a      	str	r2, [r3, #20]
 8004258:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800425a:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <MX_TIM3_Init+0xe8>)
 800425c:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <MX_TIM3_Init+0xec>)
 800425e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <MX_TIM3_Init+0xe8>)
 8004262:	22f9      	movs	r2, #249	; 0xf9
 8004264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <MX_TIM3_Init+0xe8>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <MX_TIM3_Init+0xe8>)
 800426e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004274:	4b26      	ldr	r3, [pc, #152]	; (8004310 <MX_TIM3_Init+0xe8>)
 8004276:	2200      	movs	r2, #0
 8004278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <MX_TIM3_Init+0xe8>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004280:	4823      	ldr	r0, [pc, #140]	; (8004310 <MX_TIM3_Init+0xe8>)
 8004282:	f004 f96f 	bl	8008564 <HAL_TIM_Base_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800428c:	f7ff fd1c 	bl	8003cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800429a:	4619      	mov	r1, r3
 800429c:	481c      	ldr	r0, [pc, #112]	; (8004310 <MX_TIM3_Init+0xe8>)
 800429e:	f004 fe3d 	bl	8008f1c <HAL_TIM_ConfigClockSource>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80042a8:	f7ff fd0e 	bl	8003cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042ac:	4818      	ldr	r0, [pc, #96]	; (8004310 <MX_TIM3_Init+0xe8>)
 80042ae:	f004 fa29 	bl	8008704 <HAL_TIM_PWM_Init>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80042b8:	f7ff fd06 	bl	8003cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042c4:	f107 031c 	add.w	r3, r7, #28
 80042c8:	4619      	mov	r1, r3
 80042ca:	4811      	ldr	r0, [pc, #68]	; (8004310 <MX_TIM3_Init+0xe8>)
 80042cc:	f005 fadc 	bl	8009888 <HAL_TIMEx_MasterConfigSynchronization>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80042d6:	f7ff fcf7 	bl	8003cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042da:	2360      	movs	r3, #96	; 0x60
 80042dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 80042de:	f240 33e7 	movw	r3, #999	; 0x3e7
 80042e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042ec:	463b      	mov	r3, r7
 80042ee:	2200      	movs	r2, #0
 80042f0:	4619      	mov	r1, r3
 80042f2:	4807      	ldr	r0, [pc, #28]	; (8004310 <MX_TIM3_Init+0xe8>)
 80042f4:	f004 fd02 	bl	8008cfc <HAL_TIM_PWM_ConfigChannel>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80042fe:	f7ff fce3 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004302:	4803      	ldr	r0, [pc, #12]	; (8004310 <MX_TIM3_Init+0xe8>)
 8004304:	f000 f85c 	bl	80043c0 <HAL_TIM_MspPostInit>

}
 8004308:	bf00      	nop
 800430a:	3738      	adds	r7, #56	; 0x38
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	200004ec 	.word	0x200004ec
 8004314:	40000400 	.word	0x40000400

08004318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <HAL_TIM_Base_MspInit+0x9c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d114      	bne.n	8004354 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6453      	str	r3, [r2, #68]	; 0x44
 8004336:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2101      	movs	r1, #1
 8004346:	2019      	movs	r0, #25
 8004348:	f001 fa3b 	bl	80057c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800434c:	2019      	movs	r0, #25
 800434e:	f001 fa54 	bl	80057fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004352:	e02a      	b.n	80043aa <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d114      	bne.n	8004388 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004376:	2200      	movs	r2, #0
 8004378:	2102      	movs	r1, #2
 800437a:	201c      	movs	r0, #28
 800437c:	f001 fa21 	bl	80057c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004380:	201c      	movs	r0, #28
 8004382:	f001 fa3a 	bl	80057fa <HAL_NVIC_EnableIRQ>
}
 8004386:	e010      	b.n	80043aa <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <HAL_TIM_Base_MspInit+0xa4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10b      	bne.n	80043aa <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004398:	f043 0302 	orr.w	r3, r3, #2
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_TIM_Base_MspInit+0xa0>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
}
 80043aa:	bf00      	nop
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40000400 	.word	0x40000400

080043c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	f107 030c 	add.w	r3, r7, #12
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a11      	ldr	r2, [pc, #68]	; (8004424 <HAL_TIM_MspPostInit+0x64>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d11b      	bne.n	800441a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_TIM_MspPostInit+0x68>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4a10      	ldr	r2, [pc, #64]	; (8004428 <HAL_TIM_MspPostInit+0x68>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6313      	str	r3, [r2, #48]	; 0x30
 80043ee:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_TIM_MspPostInit+0x68>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043fa:	2340      	movs	r3, #64	; 0x40
 80043fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800440a:	2302      	movs	r3, #2
 800440c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	f107 030c 	add.w	r3, r7, #12
 8004412:	4619      	mov	r1, r3
 8004414:	4805      	ldr	r0, [pc, #20]	; (800442c <HAL_TIM_MspPostInit+0x6c>)
 8004416:	f001 fa0b 	bl	8005830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800441a:	bf00      	nop
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40000400 	.word	0x40000400
 8004428:	40023800 	.word	0x40023800
 800442c:	40020000 	.word	0x40020000

08004430 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <MX_UART4_Init+0x58>)
 8004436:	4a15      	ldr	r2, [pc, #84]	; (800448c <MX_UART4_Init+0x5c>)
 8004438:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <MX_UART4_Init+0x58>)
 800443c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004440:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_UART4_Init+0x58>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_UART4_Init+0x58>)
 800444a:	2200      	movs	r2, #0
 800444c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_UART4_Init+0x58>)
 8004450:	2200      	movs	r2, #0
 8004452:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_UART4_Init+0x58>)
 8004456:	220c      	movs	r2, #12
 8004458:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <MX_UART4_Init+0x58>)
 800445c:	2200      	movs	r2, #0
 800445e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_UART4_Init+0x58>)
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <MX_UART4_Init+0x58>)
 8004468:	2200      	movs	r2, #0
 800446a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_UART4_Init+0x58>)
 800446e:	2200      	movs	r2, #0
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_UART4_Init+0x58>)
 8004474:	f005 fab4 	bl	80099e0 <HAL_UART_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800447e:	f7ff fc23 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200006d8 	.word	0x200006d8
 800448c:	40004c00 	.word	0x40004c00

08004490 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <MX_USART1_UART_Init+0x5c>)
 8004498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 800449c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044b6:	220c      	movs	r2, #12
 80044b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <MX_USART1_UART_Init+0x58>)
 80044d4:	f005 fa84 	bl	80099e0 <HAL_UART_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80044de:	f7ff fbf3 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000654 	.word	0x20000654
 80044ec:	40011000 	.word	0x40011000

080044f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <MX_USART3_UART_Init+0x58>)
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <MX_USART3_UART_Init+0x5c>)
 80044f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <MX_USART3_UART_Init+0x58>)
 80044fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004500:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <MX_USART3_UART_Init+0x58>)
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <MX_USART3_UART_Init+0x58>)
 800450a:	2200      	movs	r2, #0
 800450c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <MX_USART3_UART_Init+0x58>)
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <MX_USART3_UART_Init+0x58>)
 8004516:	220c      	movs	r2, #12
 8004518:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <MX_USART3_UART_Init+0x58>)
 800451c:	2200      	movs	r2, #0
 800451e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <MX_USART3_UART_Init+0x58>)
 8004522:	2200      	movs	r2, #0
 8004524:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <MX_USART3_UART_Init+0x58>)
 8004528:	2200      	movs	r2, #0
 800452a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <MX_USART3_UART_Init+0x58>)
 800452e:	2200      	movs	r2, #0
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004532:	4805      	ldr	r0, [pc, #20]	; (8004548 <MX_USART3_UART_Init+0x58>)
 8004534:	f005 fa54 	bl	80099e0 <HAL_UART_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800453e:	f7ff fbc3 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	200005d0 	.word	0x200005d0
 800454c:	40004800 	.word	0x40004800

08004550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08e      	sub	sp, #56	; 0x38
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a4e      	ldr	r2, [pc, #312]	; (80046a8 <HAL_UART_MspInit+0x158>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d128      	bne.n	80045c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004572:	4b4e      	ldr	r3, [pc, #312]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	4a4d      	ldr	r2, [pc, #308]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800457c:	6413      	str	r3, [r2, #64]	; 0x40
 800457e:	4b4b      	ldr	r3, [pc, #300]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004586:	623b      	str	r3, [r7, #32]
 8004588:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800458a:	4b48      	ldr	r3, [pc, #288]	; (80046ac <HAL_UART_MspInit+0x15c>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	4a47      	ldr	r2, [pc, #284]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	6313      	str	r3, [r2, #48]	; 0x30
 8004596:	4b45      	ldr	r3, [pc, #276]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045a2:	2303      	movs	r3, #3
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a6:	2302      	movs	r3, #2
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ae:	2303      	movs	r3, #3
 80045b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80045b2:	2308      	movs	r3, #8
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ba:	4619      	mov	r1, r3
 80045bc:	483c      	ldr	r0, [pc, #240]	; (80046b0 <HAL_UART_MspInit+0x160>)
 80045be:	f001 f937 	bl	8005830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80045c2:	e06c      	b.n	800469e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_UART_MspInit+0x164>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d139      	bne.n	8004642 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_UART_MspInit+0x15c>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	4a36      	ldr	r2, [pc, #216]	; (80046ac <HAL_UART_MspInit+0x15c>)
 80045d4:	f043 0310 	orr.w	r3, r3, #16
 80045d8:	6453      	str	r3, [r2, #68]	; 0x44
 80045da:	4b34      	ldr	r3, [pc, #208]	; (80046ac <HAL_UART_MspInit+0x15c>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_UART_MspInit+0x15c>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4a30      	ldr	r2, [pc, #192]	; (80046ac <HAL_UART_MspInit+0x15c>)
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	6313      	str	r3, [r2, #48]	; 0x30
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_UART_MspInit+0x15c>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460c:	2303      	movs	r3, #3
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004610:	2304      	movs	r3, #4
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004618:	4619      	mov	r1, r3
 800461a:	4827      	ldr	r0, [pc, #156]	; (80046b8 <HAL_UART_MspInit+0x168>)
 800461c:	f001 f908 	bl	8005830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004624:	2302      	movs	r3, #2
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462c:	2303      	movs	r3, #3
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004630:	2307      	movs	r3, #7
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004638:	4619      	mov	r1, r3
 800463a:	481f      	ldr	r0, [pc, #124]	; (80046b8 <HAL_UART_MspInit+0x168>)
 800463c:	f001 f8f8 	bl	8005830 <HAL_GPIO_Init>
}
 8004640:	e02d      	b.n	800469e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART3)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <HAL_UART_MspInit+0x16c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d128      	bne.n	800469e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800464c:	4b17      	ldr	r3, [pc, #92]	; (80046ac <HAL_UART_MspInit+0x15c>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	4a16      	ldr	r2, [pc, #88]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004656:	6413      	str	r3, [r2, #64]	; 0x40
 8004658:	4b14      	ldr	r3, [pc, #80]	; (80046ac <HAL_UART_MspInit+0x15c>)
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	4a10      	ldr	r2, [pc, #64]	; (80046ac <HAL_UART_MspInit+0x15c>)
 800466a:	f043 0308 	orr.w	r3, r3, #8
 800466e:	6313      	str	r3, [r2, #48]	; 0x30
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <HAL_UART_MspInit+0x15c>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800467c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004682:	2302      	movs	r3, #2
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004686:	2300      	movs	r3, #0
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800468a:	2303      	movs	r3, #3
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800468e:	2307      	movs	r3, #7
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004696:	4619      	mov	r1, r3
 8004698:	4805      	ldr	r0, [pc, #20]	; (80046b0 <HAL_UART_MspInit+0x160>)
 800469a:	f001 f8c9 	bl	8005830 <HAL_GPIO_Init>
}
 800469e:	bf00      	nop
 80046a0:	3738      	adds	r7, #56	; 0x38
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40004c00 	.word	0x40004c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020c00 	.word	0x40020c00
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40020400 	.word	0x40020400
 80046bc:	40004800 	.word	0x40004800

080046c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80046c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046c6:	e003      	b.n	80046d0 <LoopCopyDataInit>

080046c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046ce:	3104      	adds	r1, #4

080046d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046d0:	480b      	ldr	r0, [pc, #44]	; (8004700 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046d2:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80046d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80046d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80046d8:	d3f6      	bcc.n	80046c8 <CopyDataInit>
  ldr  r2, =_sbss
 80046da:	4a0b      	ldr	r2, [pc, #44]	; (8004708 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80046dc:	e002      	b.n	80046e4 <LoopFillZerobss>

080046de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80046de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80046e0:	f842 3b04 	str.w	r3, [r2], #4

080046e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80046e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80046e8:	d3f9      	bcc.n	80046de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046ea:	f7ff fcc5 	bl	8004078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046ee:	f005 fef9 	bl	800a4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046f2:	f7fe fe75 	bl	80033e0 <main>
  bx  lr    
 80046f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046f8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80046fc:	0800d92c 	.word	0x0800d92c
  ldr  r0, =_sdata
 8004700:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004704:	200002ac 	.word	0x200002ac
  ldr  r2, =_sbss
 8004708:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 800470c:	20000770 	.word	0x20000770

08004710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004710:	e7fe      	b.n	8004710 <ADC_IRQHandler>

08004712 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8004712:	b590      	push	{r4, r7, lr}
 8004714:	b08b      	sub	sp, #44	; 0x2c
 8004716:	af00      	add	r7, sp, #0
 8004718:	4604      	mov	r4, r0
 800471a:	4608      	mov	r0, r1
 800471c:	4611      	mov	r1, r2
 800471e:	461a      	mov	r2, r3
 8004720:	4623      	mov	r3, r4
 8004722:	80fb      	strh	r3, [r7, #6]
 8004724:	4603      	mov	r3, r0
 8004726:	80bb      	strh	r3, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]
 800472c:	4613      	mov	r3, r2
 800472e:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8004738:	887b      	ldrh	r3, [r7, #2]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	f1c3 0301 	rsb	r3, r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800474a:	e061      	b.n	8004810 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	e018      	b.n	8004788 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	b298      	uxth	r0, r3
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	b29a      	uxth	r2, r3
 800475e:	88bb      	ldrh	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	883a      	ldrh	r2, [r7, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	f000 fd02 	bl	8005170 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	b298      	uxth	r0, r3
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	b29b      	uxth	r3, r3
 8004774:	88ba      	ldrh	r2, [r7, #4]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	b29b      	uxth	r3, r3
 800477a:	883a      	ldrh	r2, [r7, #0]
 800477c:	4619      	mov	r1, r3
 800477e:	f000 fcf7 	bl	8005170 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3301      	adds	r3, #1
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	88fa      	ldrh	r2, [r7, #6]
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	4413      	add	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	429a      	cmp	r2, r3
 8004792:	dde0      	ble.n	8004756 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e018      	b.n	80047d0 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	b298      	uxth	r0, r3
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	88bb      	ldrh	r3, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	883a      	ldrh	r2, [r7, #0]
 80047ae:	4619      	mov	r1, r3
 80047b0:	f000 fcde 	bl	8005170 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	b298      	uxth	r0, r3
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	88ba      	ldrh	r2, [r7, #4]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	883a      	ldrh	r2, [r7, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f000 fcd3 	bl	8005170 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3301      	adds	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	4413      	add	r3, r2
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	dde0      	ble.n	800479e <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	3301      	adds	r3, #1
 80047e0:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	4413      	add	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	3302      	adds	r3, #2
 80047ee:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	005a      	lsls	r2, r3, #1
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	4413      	add	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	dd09      	ble.n	8004810 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	3b01      	subs	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3302      	adds	r3, #2
 800480e:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	429a      	cmp	r2, r3
 8004816:	da99      	bge.n	800474c <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	372c      	adds	r7, #44	; 0x2c
 800481e:	46bd      	mov	sp, r7
 8004820:	bd90      	pop	{r4, r7, pc}

08004822 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8004822:	b590      	push	{r4, r7, lr}
 8004824:	b087      	sub	sp, #28
 8004826:	af00      	add	r7, sp, #0
 8004828:	4604      	mov	r4, r0
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	461a      	mov	r2, r3
 8004830:	4623      	mov	r3, r4
 8004832:	80fb      	strh	r3, [r7, #6]
 8004834:	4603      	mov	r3, r0
 8004836:	80bb      	strh	r3, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
 800483c:	4613      	mov	r3, r2
 800483e:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004864:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8004868:	edd7 7a03 	vldr	s15, [r7, #12]
 800486c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004874:	d501      	bpl.n	800487a <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8004876:	2301      	movs	r3, #1
 8004878:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8004880:	883a      	ldrh	r2, [r7, #0]
 8004882:	88bb      	ldrh	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800488e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8004892:	edd7 7a03 	vldr	s15, [r7, #12]
 8004896:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	d501      	bpl.n	80048a4 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 80048a0:	2301      	movs	r3, #1
 80048a2:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	82fb      	strh	r3, [r7, #22]
 80048b2:	e003      	b.n	80048bc <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	887b      	ldrh	r3, [r7, #2]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80048bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048be:	8afa      	ldrh	r2, [r7, #22]
 80048c0:	88b9      	ldrh	r1, [r7, #4]
 80048c2:	88f8      	ldrh	r0, [r7, #6]
 80048c4:	f000 fd8a 	bl	80053dc <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 80048c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ca:	8afa      	ldrh	r2, [r7, #22]
 80048cc:	8839      	ldrh	r1, [r7, #0]
 80048ce:	88f8      	ldrh	r0, [r7, #6]
 80048d0:	f000 fd84 	bl	80053dc <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80048d4:	7cbb      	ldrb	r3, [r7, #18]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 80048da:	883a      	ldrh	r2, [r7, #0]
 80048dc:	88bb      	ldrh	r3, [r7, #4]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	82bb      	strh	r3, [r7, #20]
 80048e2:	e003      	b.n	80048ec <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 80048e4:	88ba      	ldrh	r2, [r7, #4]
 80048e6:	883b      	ldrh	r3, [r7, #0]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80048ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ee:	8aba      	ldrh	r2, [r7, #20]
 80048f0:	88b9      	ldrh	r1, [r7, #4]
 80048f2:	88f8      	ldrh	r0, [r7, #6]
 80048f4:	f000 fdb6 	bl	8005464 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80048f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048fa:	8aba      	ldrh	r2, [r7, #20]
 80048fc:	88b9      	ldrh	r1, [r7, #4]
 80048fe:	8878      	ldrh	r0, [r7, #2]
 8004900:	f000 fdb0 	bl	8005464 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8004904:	8afb      	ldrh	r3, [r7, #22]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800490a:	8abb      	ldrh	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8004910:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004912:	8839      	ldrh	r1, [r7, #0]
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fc2a 	bl	8005170 <ILI9341_Draw_Pixel>
	}
	
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd90      	pop	{r4, r7, pc}

08004924 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af02      	add	r7, sp, #8
 800492a:	4604      	mov	r4, r0
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4623      	mov	r3, r4
 8004934:	80fb      	strh	r3, [r7, #6]
 8004936:	4603      	mov	r3, r0
 8004938:	80bb      	strh	r3, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	807b      	strh	r3, [r7, #2]
 800493e:	4613      	mov	r3, r2
 8004940:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	da01      	bge.n	8004970 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800496c:	2301      	movs	r3, #1
 800496e:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8004974:	883a      	ldrh	r2, [r7, #0]
 8004976:	88bb      	ldrh	r3, [r7, #4]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	da01      	bge.n	8004986 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8004982:	2301      	movs	r3, #1
 8004984:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800498c:	887a      	ldrh	r2, [r7, #2]
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	823b      	strh	r3, [r7, #16]
 8004998:	e005      	b.n	80049a6 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80049a2:	887b      	ldrh	r3, [r7, #2]
 80049a4:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80049a6:	7cbb      	ldrb	r3, [r7, #18]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80049ac:	883a      	ldrh	r2, [r7, #0]
 80049ae:	88bb      	ldrh	r3, [r7, #4]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80049b4:	88bb      	ldrh	r3, [r7, #4]
 80049b6:	81fb      	strh	r3, [r7, #14]
 80049b8:	e005      	b.n	80049c6 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80049ba:	88ba      	ldrh	r2, [r7, #4]
 80049bc:	883b      	ldrh	r3, [r7, #0]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80049c2:	883b      	ldrh	r3, [r7, #0]
 80049c4:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80049c6:	8abc      	ldrh	r4, [r7, #20]
 80049c8:	8afa      	ldrh	r2, [r7, #22]
 80049ca:	89f9      	ldrh	r1, [r7, #14]
 80049cc:	8a38      	ldrh	r0, [r7, #16]
 80049ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	4623      	mov	r3, r4
 80049d4:	f000 fca6 	bl	8005324 <ILI9341_Draw_Rectangle>
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}

080049e0 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	461a      	mov	r2, r3
 80049ee:	4623      	mov	r3, r4
 80049f0:	71fb      	strb	r3, [r7, #7]
 80049f2:	4603      	mov	r3, r0
 80049f4:	71bb      	strb	r3, [r7, #6]
 80049f6:	460b      	mov	r3, r1
 80049f8:	717b      	strb	r3, [r7, #5]
 80049fa:	4613      	mov	r3, r2
 80049fc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	2b1f      	cmp	r3, #31
 8004a06:	d802      	bhi.n	8004a0e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	71fb      	strb	r3, [r7, #7]
 8004a0c:	e002      	b.n	8004a14 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	3b20      	subs	r3, #32
 8004a12:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004a14:	2300      	movs	r3, #0
 8004a16:	753b      	strb	r3, [r7, #20]
 8004a18:	e012      	b.n	8004a40 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8004a1a:	7dfa      	ldrb	r2, [r7, #23]
 8004a1c:	7d38      	ldrb	r0, [r7, #20]
 8004a1e:	7d39      	ldrb	r1, [r7, #20]
 8004a20:	4c3c      	ldr	r4, [pc, #240]	; (8004b14 <ILI9341_Draw_Char+0x134>)
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4423      	add	r3, r4
 8004a2c:	4403      	add	r3, r0
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	f107 0318 	add.w	r3, r7, #24
 8004a34:	440b      	add	r3, r1
 8004a36:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004a3a:	7d3b      	ldrb	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	753b      	strb	r3, [r7, #20]
 8004a40:	7d3b      	ldrb	r3, [r7, #20]
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d9e9      	bls.n	8004a1a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8004a46:	79bb      	ldrb	r3, [r7, #6]
 8004a48:	b298      	uxth	r0, r3
 8004a4a:	797b      	ldrb	r3, [r7, #5]
 8004a4c:	b299      	uxth	r1, r3
 8004a4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a50:	461a      	mov	r2, r3
 8004a52:	0052      	lsls	r2, r2, #1
 8004a54:	4413      	add	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	b29c      	uxth	r4, r3
 8004a60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4623      	mov	r3, r4
 8004a66:	f000 fc5d 	bl	8005324 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	757b      	strb	r3, [r7, #21]
 8004a6e:	e048      	b.n	8004b02 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004a70:	2300      	movs	r3, #0
 8004a72:	75bb      	strb	r3, [r7, #22]
 8004a74:	e03f      	b.n	8004af6 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8004a76:	7d7b      	ldrb	r3, [r7, #21]
 8004a78:	f107 0218 	add.w	r2, r7, #24
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004a82:	461a      	mov	r2, r3
 8004a84:	7dbb      	ldrb	r3, [r7, #22]
 8004a86:	fa42 f303 	asr.w	r3, r2, r3
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02e      	beq.n	8004af0 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8004a92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d110      	bne.n	8004aba <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8004a98:	79bb      	ldrb	r3, [r7, #6]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	7d7b      	ldrb	r3, [r7, #21]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	b298      	uxth	r0, r3
 8004aa4:	797b      	ldrb	r3, [r7, #5]
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	7dbb      	ldrb	r3, [r7, #22]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f000 fb5c 	bl	8005170 <ILI9341_Draw_Pixel>
 8004ab8:	e01a      	b.n	8004af0 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8004aba:	79bb      	ldrb	r3, [r7, #6]
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	7d7b      	ldrb	r3, [r7, #21]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004ac4:	fb11 f303 	smulbb	r3, r1, r3
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	b298      	uxth	r0, r3
 8004ace:	797b      	ldrb	r3, [r7, #5]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	7dbb      	ldrb	r3, [r7, #22]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004ad8:	fb11 f303 	smulbb	r3, r1, r3
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	b299      	uxth	r1, r3
 8004ae2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8004ae4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4623      	mov	r3, r4
 8004aec:	f000 fc1a 	bl	8005324 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004af0:	7dbb      	ldrb	r3, [r7, #22]
 8004af2:	3301      	adds	r3, #1
 8004af4:	75bb      	strb	r3, [r7, #22]
 8004af6:	7dbb      	ldrb	r3, [r7, #22]
 8004af8:	2b07      	cmp	r3, #7
 8004afa:	d9bc      	bls.n	8004a76 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004afc:	7d7b      	ldrb	r3, [r7, #21]
 8004afe:	3301      	adds	r3, #1
 8004b00:	757b      	strb	r3, [r7, #21]
 8004b02:	7d7b      	ldrb	r3, [r7, #21]
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d9b3      	bls.n	8004a70 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	0800d2f8 	.word	0x0800d2f8

08004b18 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	70fb      	strb	r3, [r7, #3]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	70bb      	strb	r3, [r7, #2]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8004b32:	e017      	b.n	8004b64 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	7818      	ldrb	r0, [r3, #0]
 8004b3c:	883c      	ldrh	r4, [r7, #0]
 8004b3e:	78ba      	ldrb	r2, [r7, #2]
 8004b40:	78f9      	ldrb	r1, [r7, #3]
 8004b42:	8bbb      	ldrh	r3, [r7, #28]
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	8b3b      	ldrh	r3, [r7, #24]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	f7ff ff48 	bl	80049e0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8004b50:	8b3b      	ldrh	r3, [r7, #24]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	0052      	lsls	r2, r2, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	4413      	add	r3, r2
 8004b62:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e3      	bne.n	8004b34 <ILI9341_Draw_Text+0x1c>
    }
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd90      	pop	{r4, r7, pc}
	...

08004b78 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8004b7c:	f7ff f8dc 	bl	8003d38 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8004b80:	f7fb febe 	bl	8000900 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8004b84:	2200      	movs	r2, #0
 8004b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b8a:	4802      	ldr	r0, [pc, #8]	; (8004b94 <ILI9341_SPI_Init+0x1c>)
 8004b8c:	f001 f814 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 8004b90:	bf00      	nop
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40020800 	.word	0x40020800

08004b98 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8004ba2:	1df9      	adds	r1, r7, #7
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4803      	ldr	r0, [pc, #12]	; (8004bb8 <ILI9341_SPI_Send+0x20>)
 8004baa:	f003 fa0c 	bl	8007fc6 <HAL_SPI_Transmit>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000488 	.word	0x20000488

08004bbc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bcc:	480b      	ldr	r0, [pc, #44]	; (8004bfc <ILI9341_Write_Command+0x40>)
 8004bce:	f000 fff3 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <ILI9341_Write_Command+0x40>)
 8004bda:	f000 ffed 	bl	8005bb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ffd9 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004be6:	2201      	movs	r2, #1
 8004be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bec:	4803      	ldr	r0, [pc, #12]	; (8004bfc <ILI9341_Write_Command+0x40>)
 8004bee:	f000 ffe3 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40020800 	.word	0x40020800

08004c00 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c10:	480b      	ldr	r0, [pc, #44]	; (8004c40 <ILI9341_Write_Data+0x40>)
 8004c12:	f000 ffd1 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004c16:	2200      	movs	r2, #0
 8004c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c1c:	4808      	ldr	r0, [pc, #32]	; (8004c40 <ILI9341_Write_Data+0x40>)
 8004c1e:	f000 ffcb 	bl	8005bb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ffb7 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c30:	4803      	ldr	r0, [pc, #12]	; (8004c40 <ILI9341_Write_Data+0x40>)
 8004c32:	f000 ffc1 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40020800 	.word	0x40020800

08004c44 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	80fb      	strh	r3, [r7, #6]
 8004c56:	4603      	mov	r3, r0
 8004c58:	80bb      	strh	r3, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8004c62:	202a      	movs	r0, #42	; 0x2a
 8004c64:	f7ff ffaa 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffc5 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ffc0 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ffb9 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8004c8e:	887b      	ldrh	r3, [r7, #2]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ffb4 	bl	8004c00 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8004c98:	202b      	movs	r0, #43	; 0x2b
 8004c9a:	f7ff ff8f 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8004c9e:	88bb      	ldrh	r3, [r7, #4]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ffaa 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8004cac:	88bb      	ldrh	r3, [r7, #4]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ffa5 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8004cb6:	883b      	ldrh	r3, [r7, #0]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff9e 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8004cc4:	883b      	ldrh	r3, [r7, #0]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff99 	bl	8004c00 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8004cce:	202c      	movs	r0, #44	; 0x2c
 8004cd0:	f7ff ff74 	bl	8004bbc <ILI9341_Write_Command>
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd90      	pop	{r4, r7, pc}

08004cdc <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce6:	480b      	ldr	r0, [pc, #44]	; (8004d14 <ILI9341_Reset+0x38>)
 8004ce8:	f000 ff66 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004cec:	20c8      	movs	r0, #200	; 0xc8
 8004cee:	f000 fc69 	bl	80055c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cf8:	4806      	ldr	r0, [pc, #24]	; (8004d14 <ILI9341_Reset+0x38>)
 8004cfa:	f000 ff5d 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004cfe:	20c8      	movs	r0, #200	; 0xc8
 8004d00:	f000 fc60 	bl	80055c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8004d04:	2201      	movs	r2, #1
 8004d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d0a:	4802      	ldr	r0, [pc, #8]	; (8004d14 <ILI9341_Reset+0x38>)
 8004d0c:	f000 ff54 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 8004d10:	bf00      	nop
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40020800 	.word	0x40020800

08004d18 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8004d26:	2036      	movs	r0, #54	; 0x36
 8004d28:	f7ff ff48 	bl	8004bbc <ILI9341_Write_Command>
HAL_Delay(1);
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f000 fc49 	bl	80055c4 <HAL_Delay>
	
switch(screen_rotation) 
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d837      	bhi.n	8004da8 <ILI9341_Set_Rotation+0x90>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <ILI9341_Set_Rotation+0x28>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d67 	.word	0x08004d67
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d93 	.word	0x08004d93
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8004d50:	2048      	movs	r0, #72	; 0x48
 8004d52:	f7ff ff55 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8004d56:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d58:	22f0      	movs	r2, #240	; 0xf0
 8004d5a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004d5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d62:	801a      	strh	r2, [r3, #0]
			break;
 8004d64:	e021      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8004d66:	2028      	movs	r0, #40	; 0x28
 8004d68:	f7ff ff4a 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d72:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004d76:	22f0      	movs	r2, #240	; 0xf0
 8004d78:	801a      	strh	r2, [r3, #0]
			break;
 8004d7a:	e016      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8004d7c:	2088      	movs	r0, #136	; 0x88
 8004d7e:	f7ff ff3f 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d84:	22f0      	movs	r2, #240	; 0xf0
 8004d86:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004d8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d8e:	801a      	strh	r2, [r3, #0]
			break;
 8004d90:	e00b      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8004d92:	20e8      	movs	r0, #232	; 0xe8
 8004d94:	f7ff ff34 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d9e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004da2:	22f0      	movs	r2, #240	; 0xf0
 8004da4:	801a      	strh	r2, [r3, #0]
			break;
 8004da6:	e000      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004da8:	bf00      	nop
	}
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	200000d2 	.word	0x200000d2
 8004db8:	200000d0 	.word	0x200000d0

08004dbc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dc6:	4802      	ldr	r0, [pc, #8]	; (8004dd0 <ILI9341_Enable+0x14>)
 8004dc8:	f000 fef6 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40020800 	.word	0x40020800

08004dd4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8004dd8:	f7ff fff0 	bl	8004dbc <ILI9341_Enable>
ILI9341_SPI_Init();
 8004ddc:	f7ff fecc 	bl	8004b78 <ILI9341_SPI_Init>
ILI9341_Reset();
 8004de0:	f7ff ff7c 	bl	8004cdc <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8004de4:	2001      	movs	r0, #1
 8004de6:	f7ff fee9 	bl	8004bbc <ILI9341_Write_Command>
HAL_Delay(1000);
 8004dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dee:	f000 fbe9 	bl	80055c4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8004df2:	20cb      	movs	r0, #203	; 0xcb
 8004df4:	f7ff fee2 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8004df8:	2039      	movs	r0, #57	; 0x39
 8004dfa:	f7ff ff01 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8004dfe:	202c      	movs	r0, #44	; 0x2c
 8004e00:	f7ff fefe 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7ff fefb 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8004e0a:	2034      	movs	r0, #52	; 0x34
 8004e0c:	f7ff fef8 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8004e10:	2002      	movs	r0, #2
 8004e12:	f7ff fef5 	bl	8004c00 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8004e16:	20cf      	movs	r0, #207	; 0xcf
 8004e18:	f7ff fed0 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7ff feef 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004e22:	20c1      	movs	r0, #193	; 0xc1
 8004e24:	f7ff feec 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8004e28:	2030      	movs	r0, #48	; 0x30
 8004e2a:	f7ff fee9 	bl	8004c00 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8004e2e:	20e8      	movs	r0, #232	; 0xe8
 8004e30:	f7ff fec4 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8004e34:	2085      	movs	r0, #133	; 0x85
 8004e36:	f7ff fee3 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f7ff fee0 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8004e40:	2078      	movs	r0, #120	; 0x78
 8004e42:	f7ff fedd 	bl	8004c00 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8004e46:	20ea      	movs	r0, #234	; 0xea
 8004e48:	f7ff feb8 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f7ff fed7 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff fed4 	bl	8004c00 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8004e58:	20ed      	movs	r0, #237	; 0xed
 8004e5a:	f7ff feaf 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8004e5e:	2064      	movs	r0, #100	; 0x64
 8004e60:	f7ff fece 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004e64:	2003      	movs	r0, #3
 8004e66:	f7ff fecb 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8004e6a:	2012      	movs	r0, #18
 8004e6c:	f7ff fec8 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8004e70:	2081      	movs	r0, #129	; 0x81
 8004e72:	f7ff fec5 	bl	8004c00 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8004e76:	20f7      	movs	r0, #247	; 0xf7
 8004e78:	f7ff fea0 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8004e7c:	2020      	movs	r0, #32
 8004e7e:	f7ff febf 	bl	8004c00 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8004e82:	20c0      	movs	r0, #192	; 0xc0
 8004e84:	f7ff fe9a 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8004e88:	2023      	movs	r0, #35	; 0x23
 8004e8a:	f7ff feb9 	bl	8004c00 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8004e8e:	20c1      	movs	r0, #193	; 0xc1
 8004e90:	f7ff fe94 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8004e94:	2010      	movs	r0, #16
 8004e96:	f7ff feb3 	bl	8004c00 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8004e9a:	20c5      	movs	r0, #197	; 0xc5
 8004e9c:	f7ff fe8e 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8004ea0:	203e      	movs	r0, #62	; 0x3e
 8004ea2:	f7ff fead 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8004ea6:	2028      	movs	r0, #40	; 0x28
 8004ea8:	f7ff feaa 	bl	8004c00 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8004eac:	20c7      	movs	r0, #199	; 0xc7
 8004eae:	f7ff fe85 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8004eb2:	2086      	movs	r0, #134	; 0x86
 8004eb4:	f7ff fea4 	bl	8004c00 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8004eb8:	2036      	movs	r0, #54	; 0x36
 8004eba:	f7ff fe7f 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8004ebe:	2048      	movs	r0, #72	; 0x48
 8004ec0:	f7ff fe9e 	bl	8004c00 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8004ec4:	203a      	movs	r0, #58	; 0x3a
 8004ec6:	f7ff fe79 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8004eca:	2055      	movs	r0, #85	; 0x55
 8004ecc:	f7ff fe98 	bl	8004c00 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8004ed0:	20b1      	movs	r0, #177	; 0xb1
 8004ed2:	f7ff fe73 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7ff fe92 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8004edc:	2018      	movs	r0, #24
 8004ede:	f7ff fe8f 	bl	8004c00 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8004ee2:	20b6      	movs	r0, #182	; 0xb6
 8004ee4:	f7ff fe6a 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8004ee8:	2008      	movs	r0, #8
 8004eea:	f7ff fe89 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8004eee:	2082      	movs	r0, #130	; 0x82
 8004ef0:	f7ff fe86 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8004ef4:	2027      	movs	r0, #39	; 0x27
 8004ef6:	f7ff fe83 	bl	8004c00 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8004efa:	20f2      	movs	r0, #242	; 0xf2
 8004efc:	f7ff fe5e 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7ff fe7d 	bl	8004c00 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8004f06:	2026      	movs	r0, #38	; 0x26
 8004f08:	f7ff fe58 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f7ff fe77 	bl	8004c00 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8004f12:	20e0      	movs	r0, #224	; 0xe0
 8004f14:	f7ff fe52 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8004f18:	200f      	movs	r0, #15
 8004f1a:	f7ff fe71 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004f1e:	2031      	movs	r0, #49	; 0x31
 8004f20:	f7ff fe6e 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8004f24:	202b      	movs	r0, #43	; 0x2b
 8004f26:	f7ff fe6b 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004f2a:	200c      	movs	r0, #12
 8004f2c:	f7ff fe68 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f30:	200e      	movs	r0, #14
 8004f32:	f7ff fe65 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004f36:	2008      	movs	r0, #8
 8004f38:	f7ff fe62 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8004f3c:	204e      	movs	r0, #78	; 0x4e
 8004f3e:	f7ff fe5f 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8004f42:	20f1      	movs	r0, #241	; 0xf1
 8004f44:	f7ff fe5c 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8004f48:	2037      	movs	r0, #55	; 0x37
 8004f4a:	f7ff fe59 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004f4e:	2007      	movs	r0, #7
 8004f50:	f7ff fe56 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8004f54:	2010      	movs	r0, #16
 8004f56:	f7ff fe53 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004f5a:	2003      	movs	r0, #3
 8004f5c:	f7ff fe50 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f60:	200e      	movs	r0, #14
 8004f62:	f7ff fe4d 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8004f66:	2009      	movs	r0, #9
 8004f68:	f7ff fe4a 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7ff fe47 	bl	8004c00 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8004f72:	20e1      	movs	r0, #225	; 0xe1
 8004f74:	f7ff fe22 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7ff fe41 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f7e:	200e      	movs	r0, #14
 8004f80:	f7ff fe3e 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8004f84:	2014      	movs	r0, #20
 8004f86:	f7ff fe3b 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004f8a:	2003      	movs	r0, #3
 8004f8c:	f7ff fe38 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8004f90:	2011      	movs	r0, #17
 8004f92:	f7ff fe35 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004f96:	2007      	movs	r0, #7
 8004f98:	f7ff fe32 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004f9c:	2031      	movs	r0, #49	; 0x31
 8004f9e:	f7ff fe2f 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004fa2:	20c1      	movs	r0, #193	; 0xc1
 8004fa4:	f7ff fe2c 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8004fa8:	2048      	movs	r0, #72	; 0x48
 8004faa:	f7ff fe29 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004fae:	2008      	movs	r0, #8
 8004fb0:	f7ff fe26 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004fb4:	200f      	movs	r0, #15
 8004fb6:	f7ff fe23 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004fba:	200c      	movs	r0, #12
 8004fbc:	f7ff fe20 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004fc0:	2031      	movs	r0, #49	; 0x31
 8004fc2:	f7ff fe1d 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8004fc6:	2036      	movs	r0, #54	; 0x36
 8004fc8:	f7ff fe1a 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004fcc:	200f      	movs	r0, #15
 8004fce:	f7ff fe17 	bl	8004c00 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8004fd2:	2011      	movs	r0, #17
 8004fd4:	f7ff fdf2 	bl	8004bbc <ILI9341_Write_Command>
HAL_Delay(120);
 8004fd8:	2078      	movs	r0, #120	; 0x78
 8004fda:	f000 faf3 	bl	80055c4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8004fde:	2029      	movs	r0, #41	; 0x29
 8004fe0:	f7ff fdec 	bl	8004bbc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7ff fe97 	bl	8004d18 <ILI9341_Set_Rotation>
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8004ff0:	b5b0      	push	{r4, r5, r7, lr}
 8004ff2:	b08c      	sub	sp, #48	; 0x30
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	6039      	str	r1, [r7, #0]
 8004ffa:	80fb      	strh	r3, [r7, #6]
 8004ffc:	466b      	mov	r3, sp
 8004ffe:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800500c:	d202      	bcs.n	8005014 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	e002      	b.n	800501a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8005014:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800501a:	2201      	movs	r2, #1
 800501c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005020:	483e      	ldr	r0, [pc, #248]	; (800511c <ILI9341_Draw_Colour_Burst+0x12c>)
 8005022:	f000 fdc9 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005026:	2200      	movs	r2, #0
 8005028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502c:	483b      	ldr	r0, [pc, #236]	; (800511c <ILI9341_Draw_Colour_Burst+0x12c>)
 800502e:	f000 fdc3 	bl	8005bb8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800503c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800503e:	4623      	mov	r3, r4
 8005040:	3b01      	subs	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	4620      	mov	r0, r4
 8005046:	f04f 0100 	mov.w	r1, #0
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	00cb      	lsls	r3, r1, #3
 8005054:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005058:	00c2      	lsls	r2, r0, #3
 800505a:	4620      	mov	r0, r4
 800505c:	f04f 0100 	mov.w	r1, #0
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	00cb      	lsls	r3, r1, #3
 800506a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800506e:	00c2      	lsls	r2, r0, #3
 8005070:	1de3      	adds	r3, r4, #7
 8005072:	08db      	lsrs	r3, r3, #3
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	ebad 0d03 	sub.w	sp, sp, r3
 800507a:	466b      	mov	r3, sp
 800507c:	3300      	adds	r3, #0
 800507e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005080:	2300      	movs	r3, #0
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28
 8005084:	e00e      	b.n	80050a4 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	4413      	add	r3, r2
 800508c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005090:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	3301      	adds	r3, #1
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	b2d1      	uxtb	r1, r2
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	3302      	adds	r3, #2
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d3ec      	bcc.n	8005086 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80050c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c6:	fb01 f202 	mul.w	r2, r1, r2
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d010      	beq.n	80050f6 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d8:	e009      	b.n	80050ee <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	b29a      	uxth	r2, r3
 80050e0:	230a      	movs	r3, #10
 80050e2:	480f      	ldr	r0, [pc, #60]	; (8005120 <ILI9341_Draw_Colour_Burst+0x130>)
 80050e4:	f002 ff6f 	bl	8007fc6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	3301      	adds	r3, #1
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3f1      	bcc.n	80050da <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	230a      	movs	r3, #10
 80050fe:	4808      	ldr	r0, [pc, #32]	; (8005120 <ILI9341_Draw_Colour_Burst+0x130>)
 8005100:	f002 ff61 	bl	8007fc6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005104:	2201      	movs	r2, #1
 8005106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800510a:	4804      	ldr	r0, [pc, #16]	; (800511c <ILI9341_Draw_Colour_Burst+0x12c>)
 800510c:	f000 fd54 	bl	8005bb8 <HAL_GPIO_WritePin>
 8005110:	46ad      	mov	sp, r5
}
 8005112:	bf00      	nop
 8005114:	3730      	adds	r7, #48	; 0x30
 8005116:	46bd      	mov	sp, r7
 8005118:	bdb0      	pop	{r4, r5, r7, pc}
 800511a:	bf00      	nop
 800511c:	40020800 	.word	0x40020800
 8005120:	20000488 	.word	0x20000488

08005124 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <ILI9341_Fill_Screen+0x44>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29a      	uxth	r2, r3
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <ILI9341_Fill_Screen+0x48>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	2100      	movs	r1, #0
 800513c:	2000      	movs	r0, #0
 800513e:	f7ff fd81 	bl	8004c44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <ILI9341_Fill_Screen+0x44>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	4b08      	ldr	r3, [pc, #32]	; (800516c <ILI9341_Fill_Screen+0x48>)
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	fb03 f302 	mul.w	r3, r3, r2
 8005154:	461a      	mov	r2, r3
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff ff48 	bl	8004ff0 <ILI9341_Draw_Colour_Burst>
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	200000d2 	.word	0x200000d2
 800516c:	200000d0 	.word	0x200000d0

08005170 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	80fb      	strh	r3, [r7, #6]
 800517a:	460b      	mov	r3, r1
 800517c:	80bb      	strh	r3, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005182:	4b64      	ldr	r3, [pc, #400]	; (8005314 <ILI9341_Draw_Pixel+0x1a4>)
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	429a      	cmp	r2, r3
 800518c:	f080 80be 	bcs.w	800530c <ILI9341_Draw_Pixel+0x19c>
 8005190:	4b61      	ldr	r3, [pc, #388]	; (8005318 <ILI9341_Draw_Pixel+0x1a8>)
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	88ba      	ldrh	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	f080 80b7 	bcs.w	800530c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800519e:	2200      	movs	r2, #0
 80051a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051a4:	485d      	ldr	r0, [pc, #372]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80051a6:	f000 fd07 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80051aa:	2200      	movs	r2, #0
 80051ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051b0:	485a      	ldr	r0, [pc, #360]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80051b2:	f000 fd01 	bl	8005bb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80051b6:	202a      	movs	r0, #42	; 0x2a
 80051b8:	f7ff fcee 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80051bc:	2201      	movs	r2, #1
 80051be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051c2:	4856      	ldr	r0, [pc, #344]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80051c4:	f000 fcf8 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80051c8:	2201      	movs	r2, #1
 80051ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051ce:	4853      	ldr	r0, [pc, #332]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80051d0:	f000 fcf2 	bl	8005bb8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80051d4:	2200      	movs	r2, #0
 80051d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051da:	4850      	ldr	r0, [pc, #320]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80051dc:	f000 fcec 	bl	8005bb8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	753b      	strb	r3, [r7, #20]
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	757b      	strb	r3, [r7, #21]
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	3301      	adds	r3, #1
 80051f4:	121b      	asrs	r3, r3, #8
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	75bb      	strb	r3, [r7, #22]
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	3301      	adds	r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005204:	f107 0114 	add.w	r1, r7, #20
 8005208:	2301      	movs	r3, #1
 800520a:	2204      	movs	r2, #4
 800520c:	4844      	ldr	r0, [pc, #272]	; (8005320 <ILI9341_Draw_Pixel+0x1b0>)
 800520e:	f002 feda 	bl	8007fc6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005212:	2201      	movs	r2, #1
 8005214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005218:	4840      	ldr	r0, [pc, #256]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 800521a:	f000 fccd 	bl	8005bb8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800521e:	2200      	movs	r2, #0
 8005220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005224:	483d      	ldr	r0, [pc, #244]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 8005226:	f000 fcc7 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800522a:	2200      	movs	r2, #0
 800522c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005230:	483a      	ldr	r0, [pc, #232]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 8005232:	f000 fcc1 	bl	8005bb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8005236:	202b      	movs	r0, #43	; 0x2b
 8005238:	f7ff fcae 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800523c:	2201      	movs	r2, #1
 800523e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005242:	4836      	ldr	r0, [pc, #216]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 8005244:	f000 fcb8 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005248:	2201      	movs	r2, #1
 800524a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800524e:	4833      	ldr	r0, [pc, #204]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 8005250:	f000 fcb2 	bl	8005bb8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005254:	2200      	movs	r2, #0
 8005256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800525a:	4830      	ldr	r0, [pc, #192]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 800525c:	f000 fcac 	bl	8005bb8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8005260:	88bb      	ldrh	r3, [r7, #4]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	b29b      	uxth	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	743b      	strb	r3, [r7, #16]
 800526a:	88bb      	ldrh	r3, [r7, #4]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	747b      	strb	r3, [r7, #17]
 8005270:	88bb      	ldrh	r3, [r7, #4]
 8005272:	3301      	adds	r3, #1
 8005274:	121b      	asrs	r3, r3, #8
 8005276:	b2db      	uxtb	r3, r3
 8005278:	74bb      	strb	r3, [r7, #18]
 800527a:	88bb      	ldrh	r3, [r7, #4]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	3301      	adds	r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8005284:	f107 0110 	add.w	r1, r7, #16
 8005288:	2301      	movs	r3, #1
 800528a:	2204      	movs	r2, #4
 800528c:	4824      	ldr	r0, [pc, #144]	; (8005320 <ILI9341_Draw_Pixel+0x1b0>)
 800528e:	f002 fe9a 	bl	8007fc6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005292:	2201      	movs	r2, #1
 8005294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005298:	4820      	ldr	r0, [pc, #128]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 800529a:	f000 fc8d 	bl	8005bb8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800529e:	2200      	movs	r2, #0
 80052a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052a4:	481d      	ldr	r0, [pc, #116]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80052a6:	f000 fc87 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80052aa:	2200      	movs	r2, #0
 80052ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052b0:	481a      	ldr	r0, [pc, #104]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80052b2:	f000 fc81 	bl	8005bb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80052b6:	202c      	movs	r0, #44	; 0x2c
 80052b8:	f7ff fc6e 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80052bc:	2201      	movs	r2, #1
 80052be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052c2:	4816      	ldr	r0, [pc, #88]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80052c4:	f000 fc78 	bl	8005bb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80052c8:	2201      	movs	r2, #1
 80052ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052ce:	4813      	ldr	r0, [pc, #76]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80052d0:	f000 fc72 	bl	8005bb8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052da:	4810      	ldr	r0, [pc, #64]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 80052dc:	f000 fc6c 	bl	8005bb8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80052e0:	887b      	ldrh	r3, [r7, #2]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	733b      	strb	r3, [r7, #12]
 80052ea:	887b      	ldrh	r3, [r7, #2]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80052f0:	f107 010c 	add.w	r1, r7, #12
 80052f4:	2301      	movs	r3, #1
 80052f6:	2202      	movs	r2, #2
 80052f8:	4809      	ldr	r0, [pc, #36]	; (8005320 <ILI9341_Draw_Pixel+0x1b0>)
 80052fa:	f002 fe64 	bl	8007fc6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80052fe:	2201      	movs	r2, #1
 8005300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005304:	4805      	ldr	r0, [pc, #20]	; (800531c <ILI9341_Draw_Pixel+0x1ac>)
 8005306:	f000 fc57 	bl	8005bb8 <HAL_GPIO_WritePin>
 800530a:	e000      	b.n	800530e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800530c:	bf00      	nop
	
}
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200000d2 	.word	0x200000d2
 8005318:	200000d0 	.word	0x200000d0
 800531c:	40020800 	.word	0x40020800
 8005320:	20000488 	.word	0x20000488

08005324 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4623      	mov	r3, r4
 8005334:	80fb      	strh	r3, [r7, #6]
 8005336:	4603      	mov	r3, r0
 8005338:	80bb      	strh	r3, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	807b      	strh	r3, [r7, #2]
 800533e:	4613      	mov	r3, r2
 8005340:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <ILI9341_Draw_Rectangle+0xb0>)
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	429a      	cmp	r2, r3
 800534c:	d23d      	bcs.n	80053ca <ILI9341_Draw_Rectangle+0xa6>
 800534e:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <ILI9341_Draw_Rectangle+0xb4>)
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	88ba      	ldrh	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d237      	bcs.n	80053ca <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	887b      	ldrh	r3, [r7, #2]
 800535e:	4413      	add	r3, r2
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <ILI9341_Draw_Rectangle+0xb0>)
 8005362:	8812      	ldrh	r2, [r2, #0]
 8005364:	b292      	uxth	r2, r2
 8005366:	4293      	cmp	r3, r2
 8005368:	dd05      	ble.n	8005376 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800536a:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <ILI9341_Draw_Rectangle+0xb0>)
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29a      	uxth	r2, r3
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8005376:	88ba      	ldrh	r2, [r7, #4]
 8005378:	883b      	ldrh	r3, [r7, #0]
 800537a:	4413      	add	r3, r2
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <ILI9341_Draw_Rectangle+0xb4>)
 800537e:	8812      	ldrh	r2, [r2, #0]
 8005380:	b292      	uxth	r2, r2
 8005382:	4293      	cmp	r3, r2
 8005384:	dd05      	ble.n	8005392 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <ILI9341_Draw_Rectangle+0xb4>)
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29a      	uxth	r2, r3
 800538c:	88bb      	ldrh	r3, [r7, #4]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	4413      	add	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29c      	uxth	r4, r3
 800539e:	88ba      	ldrh	r2, [r7, #4]
 80053a0:	883b      	ldrh	r3, [r7, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	88b9      	ldrh	r1, [r7, #4]
 80053ac:	88f8      	ldrh	r0, [r7, #6]
 80053ae:	4622      	mov	r2, r4
 80053b0:	f7ff fc48 	bl	8004c44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80053b4:	883b      	ldrh	r3, [r7, #0]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	8b3b      	ldrh	r3, [r7, #24]
 80053c0:	4611      	mov	r1, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fe14 	bl	8004ff0 <ILI9341_Draw_Colour_Burst>
 80053c8:	e000      	b.n	80053cc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80053ca:	bf00      	nop
}
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd90      	pop	{r4, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200000d2 	.word	0x200000d2
 80053d8:	200000d0 	.word	0x200000d0

080053dc <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4623      	mov	r3, r4
 80053ec:	80fb      	strh	r3, [r7, #6]
 80053ee:	4603      	mov	r3, r0
 80053f0:	80bb      	strh	r3, [r7, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	807b      	strh	r3, [r7, #2]
 80053f6:	4613      	mov	r3, r2
 80053f8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <ILI9341_Draw_Horizontal_Line+0x80>)
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	429a      	cmp	r2, r3
 8005404:	d225      	bcs.n	8005452 <ILI9341_Draw_Horizontal_Line+0x76>
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <ILI9341_Draw_Horizontal_Line+0x84>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	88ba      	ldrh	r2, [r7, #4]
 800540e:	429a      	cmp	r2, r3
 8005410:	d21f      	bcs.n	8005452 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	887b      	ldrh	r3, [r7, #2]
 8005416:	4413      	add	r3, r2
 8005418:	4a10      	ldr	r2, [pc, #64]	; (800545c <ILI9341_Draw_Horizontal_Line+0x80>)
 800541a:	8812      	ldrh	r2, [r2, #0]
 800541c:	b292      	uxth	r2, r2
 800541e:	4293      	cmp	r3, r2
 8005420:	dd05      	ble.n	800542e <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8005422:	4b0e      	ldr	r3, [pc, #56]	; (800545c <ILI9341_Draw_Horizontal_Line+0x80>)
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29a      	uxth	r2, r3
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800542e:	88fa      	ldrh	r2, [r7, #6]
 8005430:	887b      	ldrh	r3, [r7, #2]
 8005432:	4413      	add	r3, r2
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	88bb      	ldrh	r3, [r7, #4]
 800543c:	88b9      	ldrh	r1, [r7, #4]
 800543e:	88f8      	ldrh	r0, [r7, #6]
 8005440:	f7ff fc00 	bl	8004c44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8005444:	887a      	ldrh	r2, [r7, #2]
 8005446:	883b      	ldrh	r3, [r7, #0]
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fdd0 	bl	8004ff0 <ILI9341_Draw_Colour_Burst>
 8005450:	e000      	b.n	8005454 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005452:	bf00      	nop
}
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	bd90      	pop	{r4, r7, pc}
 800545a:	bf00      	nop
 800545c:	200000d2 	.word	0x200000d2
 8005460:	200000d0 	.word	0x200000d0

08005464 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	461a      	mov	r2, r3
 8005472:	4623      	mov	r3, r4
 8005474:	80fb      	strh	r3, [r7, #6]
 8005476:	4603      	mov	r3, r0
 8005478:	80bb      	strh	r3, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	807b      	strh	r3, [r7, #2]
 800547e:	4613      	mov	r3, r2
 8005480:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005482:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <ILI9341_Draw_Vertical_Line+0x80>)
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	88fa      	ldrh	r2, [r7, #6]
 800548a:	429a      	cmp	r2, r3
 800548c:	d225      	bcs.n	80054da <ILI9341_Draw_Vertical_Line+0x76>
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <ILI9341_Draw_Vertical_Line+0x84>)
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	88ba      	ldrh	r2, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d21f      	bcs.n	80054da <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800549a:	88ba      	ldrh	r2, [r7, #4]
 800549c:	887b      	ldrh	r3, [r7, #2]
 800549e:	4413      	add	r3, r2
 80054a0:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80054a2:	8812      	ldrh	r2, [r2, #0]
 80054a4:	b292      	uxth	r2, r2
 80054a6:	4293      	cmp	r3, r2
 80054a8:	dd05      	ble.n	80054b6 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80054aa:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	88bb      	ldrh	r3, [r7, #4]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80054b6:	88ba      	ldrh	r2, [r7, #4]
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	4413      	add	r3, r2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	88b9      	ldrh	r1, [r7, #4]
 80054c6:	88f8      	ldrh	r0, [r7, #6]
 80054c8:	f7ff fbbc 	bl	8004c44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80054cc:	887a      	ldrh	r2, [r7, #2]
 80054ce:	883b      	ldrh	r3, [r7, #0]
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fd8c 	bl	8004ff0 <ILI9341_Draw_Colour_Burst>
 80054d8:	e000      	b.n	80054dc <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80054da:	bf00      	nop
}
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd90      	pop	{r4, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	200000d2 	.word	0x200000d2
 80054e8:	200000d0 	.word	0x200000d0

080054ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_Init+0x34>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <HAL_Init+0x34>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fa:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054fc:	4b08      	ldr	r3, [pc, #32]	; (8005520 <HAL_Init+0x34>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a07      	ldr	r2, [pc, #28]	; (8005520 <HAL_Init+0x34>)
 8005502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005508:	2003      	movs	r0, #3
 800550a:	f000 f94f 	bl	80057ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800550e:	2000      	movs	r0, #0
 8005510:	f000 f808 	bl	8005524 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005514:	f7fe fc92 	bl	8003e3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40023c00 	.word	0x40023c00

08005524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <HAL_InitTick+0x54>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b12      	ldr	r3, [pc, #72]	; (800557c <HAL_InitTick+0x58>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800553a:	fbb3 f3f1 	udiv	r3, r3, r1
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f967 	bl	8005816 <HAL_SYSTICK_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e00e      	b.n	8005570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d80a      	bhi.n	800556e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005558:	2200      	movs	r2, #0
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	f000 f92f 	bl	80057c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005564:	4a06      	ldr	r2, [pc, #24]	; (8005580 <HAL_InitTick+0x5c>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e000      	b.n	8005570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	200000cc 	.word	0x200000cc
 800557c:	200000d8 	.word	0x200000d8
 8005580:	200000d4 	.word	0x200000d4

08005584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_IncTick+0x20>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <HAL_IncTick+0x24>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4413      	add	r3, r2
 8005594:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <HAL_IncTick+0x24>)
 8005596:	6013      	str	r3, [r2, #0]
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	200000d8 	.word	0x200000d8
 80055a8:	2000075c 	.word	0x2000075c

080055ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return uwTick;
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_GetTick+0x14>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	2000075c 	.word	0x2000075c

080055c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055cc:	f7ff ffee 	bl	80055ac <HAL_GetTick>
 80055d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d005      	beq.n	80055ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_Delay+0x44>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055ea:	bf00      	nop
 80055ec:	f7ff ffde 	bl	80055ac <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d8f7      	bhi.n	80055ec <HAL_Delay+0x28>
  {
  }
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	200000d8 	.word	0x200000d8

0800560c <__NVIC_SetPriorityGrouping>:
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <__NVIC_SetPriorityGrouping+0x40>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005628:	4013      	ands	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <__NVIC_SetPriorityGrouping+0x44>)
 8005636:	4313      	orrs	r3, r2
 8005638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800563a:	4a04      	ldr	r2, [pc, #16]	; (800564c <__NVIC_SetPriorityGrouping+0x40>)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	60d3      	str	r3, [r2, #12]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	e000ed00 	.word	0xe000ed00
 8005650:	05fa0000 	.word	0x05fa0000

08005654 <__NVIC_GetPriorityGrouping>:
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <__NVIC_GetPriorityGrouping+0x18>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	f003 0307 	and.w	r3, r3, #7
}
 8005662:	4618      	mov	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_EnableIRQ>:
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	2b00      	cmp	r3, #0
 8005680:	db0b      	blt.n	800569a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	f003 021f 	and.w	r2, r3, #31
 8005688:	4907      	ldr	r1, [pc, #28]	; (80056a8 <__NVIC_EnableIRQ+0x38>)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2001      	movs	r0, #1
 8005692:	fa00 f202 	lsl.w	r2, r0, r2
 8005696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	e000e100 	.word	0xe000e100

080056ac <__NVIC_SetPriority>:
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	6039      	str	r1, [r7, #0]
 80056b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db0a      	blt.n	80056d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	490c      	ldr	r1, [pc, #48]	; (80056f8 <__NVIC_SetPriority+0x4c>)
 80056c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ca:	0112      	lsls	r2, r2, #4
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	440b      	add	r3, r1
 80056d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056d4:	e00a      	b.n	80056ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4908      	ldr	r1, [pc, #32]	; (80056fc <__NVIC_SetPriority+0x50>)
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	3b04      	subs	r3, #4
 80056e4:	0112      	lsls	r2, r2, #4
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	440b      	add	r3, r1
 80056ea:	761a      	strb	r2, [r3, #24]
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	e000e100 	.word	0xe000e100
 80056fc:	e000ed00 	.word	0xe000ed00

08005700 <NVIC_EncodePriority>:
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f1c3 0307 	rsb	r3, r3, #7
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf28      	it	cs
 800571e:	2304      	movcs	r3, #4
 8005720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3304      	adds	r3, #4
 8005726:	2b06      	cmp	r3, #6
 8005728:	d902      	bls.n	8005730 <NVIC_EncodePriority+0x30>
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3b03      	subs	r3, #3
 800572e:	e000      	b.n	8005732 <NVIC_EncodePriority+0x32>
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43da      	mvns	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	401a      	ands	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005748:	f04f 31ff 	mov.w	r1, #4294967295
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	43d9      	mvns	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005758:	4313      	orrs	r3, r2
}
 800575a:	4618      	mov	r0, r3
 800575c:	3724      	adds	r7, #36	; 0x24
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3b01      	subs	r3, #1
 8005774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005778:	d301      	bcc.n	800577e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800577a:	2301      	movs	r3, #1
 800577c:	e00f      	b.n	800579e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <SysTick_Config+0x40>)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005786:	210f      	movs	r1, #15
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	f7ff ff8e 	bl	80056ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <SysTick_Config+0x40>)
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005796:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <SysTick_Config+0x40>)
 8005798:	2207      	movs	r2, #7
 800579a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	e000e010 	.word	0xe000e010

080057ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff ff29 	bl	800560c <__NVIC_SetPriorityGrouping>
}
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4603      	mov	r3, r0
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057d4:	f7ff ff3e 	bl	8005654 <__NVIC_GetPriorityGrouping>
 80057d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	f7ff ff8e 	bl	8005700 <NVIC_EncodePriority>
 80057e4:	4602      	mov	r2, r0
 80057e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff ff5d 	bl	80056ac <__NVIC_SetPriority>
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff ff31 	bl	8005670 <__NVIC_EnableIRQ>
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff ffa2 	bl	8005768 <SysTick_Config>
 8005824:	4603      	mov	r3, r0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	; 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005846:	2300      	movs	r3, #0
 8005848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	e175      	b.n	8005b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005850:	2201      	movs	r2, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4013      	ands	r3, r2
 8005862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	429a      	cmp	r2, r3
 800586a:	f040 8164 	bne.w	8005b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d00b      	beq.n	800588e <HAL_GPIO_Init+0x5e>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d007      	beq.n	800588e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005882:	2b11      	cmp	r3, #17
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b12      	cmp	r3, #18
 800588c:	d130      	bne.n	80058f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2203      	movs	r2, #3
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058c4:	2201      	movs	r2, #1
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	f003 0201 	and.w	r2, r3, #1
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	2203      	movs	r2, #3
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4013      	ands	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x100>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b12      	cmp	r3, #18
 800592e:	d123      	bne.n	8005978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	08da      	lsrs	r2, r3, #3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3208      	adds	r2, #8
 8005938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	220f      	movs	r2, #15
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	08da      	lsrs	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3208      	adds	r2, #8
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	2203      	movs	r2, #3
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4013      	ands	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80be 	beq.w	8005b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	4b66      	ldr	r3, [pc, #408]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059c4:	6453      	str	r3, [r2, #68]	; 0x44
 80059c6:	4b63      	ldr	r3, [pc, #396]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80059d2:	4a61      	ldr	r2, [pc, #388]	; (8005b58 <HAL_GPIO_Init+0x328>)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	3302      	adds	r3, #2
 80059da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	220f      	movs	r2, #15
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_GPIO_Init+0x32c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d037      	beq.n	8005a6e <HAL_GPIO_Init+0x23e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a57      	ldr	r2, [pc, #348]	; (8005b60 <HAL_GPIO_Init+0x330>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d031      	beq.n	8005a6a <HAL_GPIO_Init+0x23a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a56      	ldr	r2, [pc, #344]	; (8005b64 <HAL_GPIO_Init+0x334>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d02b      	beq.n	8005a66 <HAL_GPIO_Init+0x236>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a55      	ldr	r2, [pc, #340]	; (8005b68 <HAL_GPIO_Init+0x338>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d025      	beq.n	8005a62 <HAL_GPIO_Init+0x232>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a54      	ldr	r2, [pc, #336]	; (8005b6c <HAL_GPIO_Init+0x33c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01f      	beq.n	8005a5e <HAL_GPIO_Init+0x22e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a53      	ldr	r2, [pc, #332]	; (8005b70 <HAL_GPIO_Init+0x340>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d019      	beq.n	8005a5a <HAL_GPIO_Init+0x22a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a52      	ldr	r2, [pc, #328]	; (8005b74 <HAL_GPIO_Init+0x344>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_GPIO_Init+0x226>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a51      	ldr	r2, [pc, #324]	; (8005b78 <HAL_GPIO_Init+0x348>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00d      	beq.n	8005a52 <HAL_GPIO_Init+0x222>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a50      	ldr	r2, [pc, #320]	; (8005b7c <HAL_GPIO_Init+0x34c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <HAL_GPIO_Init+0x21e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a4f      	ldr	r2, [pc, #316]	; (8005b80 <HAL_GPIO_Init+0x350>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <HAL_GPIO_Init+0x21a>
 8005a46:	2309      	movs	r3, #9
 8005a48:	e012      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	e010      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	e00e      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a52:	2307      	movs	r3, #7
 8005a54:	e00c      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a56:	2306      	movs	r3, #6
 8005a58:	e00a      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a5a:	2305      	movs	r3, #5
 8005a5c:	e008      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a5e:	2304      	movs	r3, #4
 8005a60:	e006      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a62:	2303      	movs	r3, #3
 8005a64:	e004      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e002      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	f002 0203 	and.w	r2, r2, #3
 8005a76:	0092      	lsls	r2, r2, #2
 8005a78:	4093      	lsls	r3, r2
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a80:	4935      	ldr	r1, [pc, #212]	; (8005b58 <HAL_GPIO_Init+0x328>)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	3302      	adds	r3, #2
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a8e:	4b3d      	ldr	r3, [pc, #244]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ab2:	4a34      	ldr	r2, [pc, #208]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ab8:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b06:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	f67f ae86 	bls.w	8005850 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3724      	adds	r7, #36	; 0x24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40013800 	.word	0x40013800
 8005b5c:	40020000 	.word	0x40020000
 8005b60:	40020400 	.word	0x40020400
 8005b64:	40020800 	.word	0x40020800
 8005b68:	40020c00 	.word	0x40020c00
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40021400 	.word	0x40021400
 8005b74:	40021800 	.word	0x40021800
 8005b78:	40021c00 	.word	0x40021c00
 8005b7c:	40022000 	.word	0x40022000
 8005b80:	40022400 	.word	0x40022400
 8005b84:	40013c00 	.word	0x40013c00

08005b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	887b      	ldrh	r3, [r7, #2]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e001      	b.n	8005baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bc8:	787b      	ldrb	r3, [r7, #1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bce:	887a      	ldrh	r2, [r7, #2]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005bd4:	e003      	b.n	8005bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005bd6:	887b      	ldrh	r3, [r7, #2]
 8005bd8:	041a      	lsls	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bf6:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c02:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c08:	88fb      	ldrh	r3, [r7, #6]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe f836 	bl	8003c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40013c00 	.word	0x40013c00

08005c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e07f      	b.n	8005d2e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fa ffe6 	bl	8000c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2224      	movs	r2, #36	; 0x24
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d107      	bne.n	8005c96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	e006      	b.n	8005ca4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ca2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d104      	bne.n	8005cb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <HAL_I2C_Init+0x11c>)
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	ea42 0103 	orr.w	r1, r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	02008000 	.word	0x02008000

08005d3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	461a      	mov	r2, r3
 8005d48:	460b      	mov	r3, r1
 8005d4a:	817b      	strh	r3, [r7, #10]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	f040 80da 	bne.w	8005f12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_I2C_Master_Transmit+0x30>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e0d3      	b.n	8005f14 <HAL_I2C_Master_Transmit+0x1d8>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d74:	f7ff fc1a 	bl	80055ac <HAL_GetTick>
 8005d78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	2319      	movs	r3, #25
 8005d80:	2201      	movs	r2, #1
 8005d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fcbc 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e0be      	b.n	8005f14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2221      	movs	r2, #33	; 0x21
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2210      	movs	r2, #16
 8005da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	893a      	ldrh	r2, [r7, #8]
 8005db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2bff      	cmp	r3, #255	; 0xff
 8005dc6:	d90e      	bls.n	8005de6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	22ff      	movs	r2, #255	; 0xff
 8005dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	8979      	ldrh	r1, [r7, #10]
 8005dd6:	4b51      	ldr	r3, [pc, #324]	; (8005f1c <HAL_I2C_Master_Transmit+0x1e0>)
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fe1e 	bl	8006a20 <I2C_TransferConfig>
 8005de4:	e06c      	b.n	8005ec0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	8979      	ldrh	r1, [r7, #10]
 8005df8:	4b48      	ldr	r3, [pc, #288]	; (8005f1c <HAL_I2C_Master_Transmit+0x1e0>)
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fe0d 	bl	8006a20 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005e06:	e05b      	b.n	8005ec0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	6a39      	ldr	r1, [r7, #32]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fcb9 	bl	8006784 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e07b      	b.n	8005f14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d034      	beq.n	8005ec0 <HAL_I2C_Master_Transmit+0x184>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d130      	bne.n	8005ec0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2180      	movs	r1, #128	; 0x80
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fc4b 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e04d      	b.n	8005f14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2bff      	cmp	r3, #255	; 0xff
 8005e80:	d90e      	bls.n	8005ea0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	22ff      	movs	r2, #255	; 0xff
 8005e86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	8979      	ldrh	r1, [r7, #10]
 8005e90:	2300      	movs	r3, #0
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 fdc1 	bl	8006a20 <I2C_TransferConfig>
 8005e9e:	e00f      	b.n	8005ec0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	8979      	ldrh	r1, [r7, #10]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fdb0 	bl	8006a20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d19e      	bne.n	8005e08 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	6a39      	ldr	r1, [r7, #32]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fc98 	bl	8006804 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e01a      	b.n	8005f14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6859      	ldr	r1, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_I2C_Master_Transmit+0x1e4>)
 8005ef2:	400b      	ands	r3, r1
 8005ef4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e000      	b.n	8005f14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	80002000 	.word	0x80002000
 8005f20:	fe00e800 	.word	0xfe00e800

08005f24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	460b      	mov	r3, r1
 8005f32:	817b      	strh	r3, [r7, #10]
 8005f34:	4613      	mov	r3, r2
 8005f36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	f040 80db 	bne.w	80060fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_I2C_Master_Receive+0x30>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e0d4      	b.n	80060fe <HAL_I2C_Master_Receive+0x1da>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f5c:	f7ff fb26 	bl	80055ac <HAL_GetTick>
 8005f60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	2319      	movs	r3, #25
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fbc8 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e0bf      	b.n	80060fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2222      	movs	r2, #34	; 0x22
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2210      	movs	r2, #16
 8005f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	893a      	ldrh	r2, [r7, #8]
 8005f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2bff      	cmp	r3, #255	; 0xff
 8005fae:	d90e      	bls.n	8005fce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	8979      	ldrh	r1, [r7, #10]
 8005fbe:	4b52      	ldr	r3, [pc, #328]	; (8006108 <HAL_I2C_Master_Receive+0x1e4>)
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fd2a 	bl	8006a20 <I2C_TransferConfig>
 8005fcc:	e06d      	b.n	80060aa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	8979      	ldrh	r1, [r7, #10]
 8005fe0:	4b49      	ldr	r3, [pc, #292]	; (8006108 <HAL_I2C_Master_Receive+0x1e4>)
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fd19 	bl	8006a20 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005fee:	e05c      	b.n	80060aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	6a39      	ldr	r1, [r7, #32]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fc41 	bl	800687c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e07c      	b.n	80060fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d034      	beq.n	80060aa <HAL_I2C_Master_Receive+0x186>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d130      	bne.n	80060aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	2200      	movs	r2, #0
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fb56 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e04d      	b.n	80060fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	2bff      	cmp	r3, #255	; 0xff
 800606a:	d90e      	bls.n	800608a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	22ff      	movs	r2, #255	; 0xff
 8006070:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	b2da      	uxtb	r2, r3
 8006078:	8979      	ldrh	r1, [r7, #10]
 800607a:	2300      	movs	r3, #0
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fccc 	bl	8006a20 <I2C_TransferConfig>
 8006088:	e00f      	b.n	80060aa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006098:	b2da      	uxtb	r2, r3
 800609a:	8979      	ldrh	r1, [r7, #10]
 800609c:	2300      	movs	r3, #0
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fcbb 	bl	8006a20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d19d      	bne.n	8005ff0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	6a39      	ldr	r1, [r7, #32]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fba3 	bl	8006804 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e01a      	b.n	80060fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2220      	movs	r2, #32
 80060ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_I2C_Master_Receive+0x1e8>)
 80060dc:	400b      	ands	r3, r1
 80060de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	e000      	b.n	80060fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
  }
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	80002400 	.word	0x80002400
 800610c:	fe00e800 	.word	0xfe00e800

08006110 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	461a      	mov	r2, r3
 800611e:	4603      	mov	r3, r0
 8006120:	817b      	strh	r3, [r7, #10]
 8006122:	460b      	mov	r3, r1
 8006124:	813b      	strh	r3, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b20      	cmp	r3, #32
 8006134:	f040 80f9 	bne.w	800632a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_I2C_Mem_Write+0x34>
 800613e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800614a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0ed      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_I2C_Mem_Write+0x4e>
 800615a:	2302      	movs	r3, #2
 800615c:	e0e6      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006166:	f7ff fa21 	bl	80055ac <HAL_GetTick>
 800616a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2319      	movs	r3, #25
 8006172:	2201      	movs	r2, #1
 8006174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fac3 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0d1      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2221      	movs	r2, #33	; 0x21
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2240      	movs	r2, #64	; 0x40
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061b0:	88f8      	ldrh	r0, [r7, #6]
 80061b2:	893a      	ldrh	r2, [r7, #8]
 80061b4:	8979      	ldrh	r1, [r7, #10]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4603      	mov	r3, r0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f9d3 	bl	800656c <I2C_RequestMemoryWrite>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0a9      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2bff      	cmp	r3, #255	; 0xff
 80061e0:	d90e      	bls.n	8006200 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	8979      	ldrh	r1, [r7, #10]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fc11 	bl	8006a20 <I2C_TransferConfig>
 80061fe:	e00f      	b.n	8006220 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	b2da      	uxtb	r2, r3
 8006210:	8979      	ldrh	r1, [r7, #10]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fc00 	bl	8006a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 faad 	bl	8006784 <I2C_WaitOnTXISFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e07b      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d034      	beq.n	80062d8 <HAL_I2C_Mem_Write+0x1c8>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d130      	bne.n	80062d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2200      	movs	r2, #0
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fa3f 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e04d      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2bff      	cmp	r3, #255	; 0xff
 8006298:	d90e      	bls.n	80062b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	22ff      	movs	r2, #255	; 0xff
 800629e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	8979      	ldrh	r1, [r7, #10]
 80062a8:	2300      	movs	r3, #0
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fbb5 	bl	8006a20 <I2C_TransferConfig>
 80062b6:	e00f      	b.n	80062d8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	8979      	ldrh	r1, [r7, #10]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fba4 	bl	8006a20 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d19e      	bne.n	8006220 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fa8c 	bl	8006804 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e01a      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2220      	movs	r2, #32
 80062fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_I2C_Mem_Write+0x224>)
 800630a:	400b      	ands	r3, r1
 800630c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e000      	b.n	800632c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800632a:	2302      	movs	r3, #2
  }
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	fe00e800 	.word	0xfe00e800

08006338 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	4608      	mov	r0, r1
 8006342:	4611      	mov	r1, r2
 8006344:	461a      	mov	r2, r3
 8006346:	4603      	mov	r3, r0
 8006348:	817b      	strh	r3, [r7, #10]
 800634a:	460b      	mov	r3, r1
 800634c:	813b      	strh	r3, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b20      	cmp	r3, #32
 800635c:	f040 80fd 	bne.w	800655a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_I2C_Mem_Read+0x34>
 8006366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006372:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0f1      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_I2C_Mem_Read+0x4e>
 8006382:	2302      	movs	r3, #2
 8006384:	e0ea      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800638e:	f7ff f90d 	bl	80055ac <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2319      	movs	r3, #25
 800639a:	2201      	movs	r2, #1
 800639c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f9af 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0d5      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2222      	movs	r2, #34	; 0x22
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2240      	movs	r2, #64	; 0x40
 80063bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a3a      	ldr	r2, [r7, #32]
 80063ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063d8:	88f8      	ldrh	r0, [r7, #6]
 80063da:	893a      	ldrh	r2, [r7, #8]
 80063dc:	8979      	ldrh	r1, [r7, #10]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4603      	mov	r3, r0
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f913 	bl	8006614 <I2C_RequestMemoryRead>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0ad      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2bff      	cmp	r3, #255	; 0xff
 8006408:	d90e      	bls.n	8006428 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	b2da      	uxtb	r2, r3
 8006416:	8979      	ldrh	r1, [r7, #10]
 8006418:	4b52      	ldr	r3, [pc, #328]	; (8006564 <HAL_I2C_Mem_Read+0x22c>)
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fafd 	bl	8006a20 <I2C_TransferConfig>
 8006426:	e00f      	b.n	8006448 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	b2da      	uxtb	r2, r3
 8006438:	8979      	ldrh	r1, [r7, #10]
 800643a:	4b4a      	ldr	r3, [pc, #296]	; (8006564 <HAL_I2C_Mem_Read+0x22c>)
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 faec 	bl	8006a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	2200      	movs	r2, #0
 8006450:	2104      	movs	r1, #4
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f956 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e07c      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d034      	beq.n	8006508 <HAL_I2C_Mem_Read+0x1d0>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d130      	bne.n	8006508 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2200      	movs	r2, #0
 80064ae:	2180      	movs	r1, #128	; 0x80
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f927 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e04d      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2bff      	cmp	r3, #255	; 0xff
 80064c8:	d90e      	bls.n	80064e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	8979      	ldrh	r1, [r7, #10]
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fa9d 	bl	8006a20 <I2C_TransferConfig>
 80064e6:	e00f      	b.n	8006508 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	8979      	ldrh	r1, [r7, #10]
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fa8c 	bl	8006a20 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d19a      	bne.n	8006448 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 f974 	bl	8006804 <I2C_WaitOnSTOPFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e01a      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2220      	movs	r2, #32
 800652c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6859      	ldr	r1, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_I2C_Mem_Read+0x230>)
 800653a:	400b      	ands	r3, r1
 800653c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	80002400 	.word	0x80002400
 8006568:	fe00e800 	.word	0xfe00e800

0800656c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	461a      	mov	r2, r3
 800657a:	4603      	mov	r3, r0
 800657c:	817b      	strh	r3, [r7, #10]
 800657e:	460b      	mov	r3, r1
 8006580:	813b      	strh	r3, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	8979      	ldrh	r1, [r7, #10]
 800658c:	4b20      	ldr	r3, [pc, #128]	; (8006610 <I2C_RequestMemoryWrite+0xa4>)
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fa43 	bl	8006a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	69b9      	ldr	r1, [r7, #24]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f8f0 	bl	8006784 <I2C_WaitOnTXISFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e02c      	b.n	8006608 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d105      	bne.n	80065c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065b4:	893b      	ldrh	r3, [r7, #8]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	629a      	str	r2, [r3, #40]	; 0x28
 80065be:	e015      	b.n	80065ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065c0:	893b      	ldrh	r3, [r7, #8]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	69b9      	ldr	r1, [r7, #24]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f8d6 	bl	8006784 <I2C_WaitOnTXISFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e012      	b.n	8006608 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065e2:	893b      	ldrh	r3, [r7, #8]
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2200      	movs	r2, #0
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f884 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	80002000 	.word	0x80002000

08006614 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	461a      	mov	r2, r3
 8006622:	4603      	mov	r3, r0
 8006624:	817b      	strh	r3, [r7, #10]
 8006626:	460b      	mov	r3, r1
 8006628:	813b      	strh	r3, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	8979      	ldrh	r1, [r7, #10]
 8006634:	4b20      	ldr	r3, [pc, #128]	; (80066b8 <I2C_RequestMemoryRead+0xa4>)
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f9f0 	bl	8006a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	69b9      	ldr	r1, [r7, #24]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f89d 	bl	8006784 <I2C_WaitOnTXISFlagUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e02c      	b.n	80066ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d105      	bne.n	8006666 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800665a:	893b      	ldrh	r3, [r7, #8]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	629a      	str	r2, [r3, #40]	; 0x28
 8006664:	e015      	b.n	8006692 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006666:	893b      	ldrh	r3, [r7, #8]
 8006668:	0a1b      	lsrs	r3, r3, #8
 800666a:	b29b      	uxth	r3, r3
 800666c:	b2da      	uxtb	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	69b9      	ldr	r1, [r7, #24]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f883 	bl	8006784 <I2C_WaitOnTXISFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e012      	b.n	80066ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006688:	893b      	ldrh	r3, [r7, #8]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2200      	movs	r2, #0
 800669a:	2140      	movs	r1, #64	; 0x40
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f831 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	80002000 	.word	0x80002000

080066bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d103      	bne.n	80066da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d007      	beq.n	80066f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	619a      	str	r2, [r3, #24]
  }
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006714:	e022      	b.n	800675c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d01e      	beq.n	800675c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671e:	f7fe ff45 	bl	80055ac <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d302      	bcc.n	8006734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d113      	bne.n	800675c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006738:	f043 0220 	orr.w	r2, r3, #32
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e00f      	b.n	800677c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	429a      	cmp	r2, r3
 8006778:	d0cd      	beq.n	8006716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006790:	e02c      	b.n	80067ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 f8dc 	bl	8006954 <I2C_IsAcknowledgeFailed>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e02a      	b.n	80067fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d01e      	beq.n	80067ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ae:	f7fe fefd 	bl	80055ac <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d113      	bne.n	80067ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e007      	b.n	80067fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d1cb      	bne.n	8006792 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006810:	e028      	b.n	8006864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f89c 	bl	8006954 <I2C_IsAcknowledgeFailed>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e026      	b.n	8006874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fe fec1 	bl	80055ac <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d113      	bne.n	8006864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e007      	b.n	8006874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b20      	cmp	r3, #32
 8006870:	d1cf      	bne.n	8006812 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006888:	e055      	b.n	8006936 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f860 	bl	8006954 <I2C_IsAcknowledgeFailed>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e053      	b.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d129      	bne.n	8006900 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d105      	bne.n	80068c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e03f      	b.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2220      	movs	r2, #32
 80068cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6859      	ldr	r1, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80068da:	400b      	ands	r3, r1
 80068dc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e022      	b.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006900:	f7fe fe54 	bl	80055ac <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	d302      	bcc.n	8006916 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	f043 0220 	orr.w	r2, r3, #32
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e007      	b.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b04      	cmp	r3, #4
 8006942:	d1a2      	bne.n	800688a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	fe00e800 	.word	0xfe00e800

08006954 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b10      	cmp	r3, #16
 800696c:	d151      	bne.n	8006a12 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800696e:	e022      	b.n	80069b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d01e      	beq.n	80069b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006978:	f7fe fe18 	bl	80055ac <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <I2C_IsAcknowledgeFailed+0x3a>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d113      	bne.n	80069b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e02e      	b.n	8006a14 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d1d5      	bne.n	8006970 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2210      	movs	r2, #16
 80069ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2220      	movs	r2, #32
 80069d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff fe71 	bl	80066bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6859      	ldr	r1, [r3, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <I2C_IsAcknowledgeFailed+0xc8>)
 80069e6:	400b      	ands	r3, r1
 80069e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ee:	f043 0204 	orr.w	r2, r3, #4
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	fe00e800 	.word	0xfe00e800

08006a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	607b      	str	r3, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	817b      	strh	r3, [r7, #10]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	0d5b      	lsrs	r3, r3, #21
 8006a3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a40:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <I2C_TransferConfig+0x58>)
 8006a42:	430b      	orrs	r3, r1
 8006a44:	43db      	mvns	r3, r3
 8006a46:	ea02 0103 	and.w	r1, r2, r3
 8006a4a:	897b      	ldrh	r3, [r7, #10]
 8006a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a50:	7a7b      	ldrb	r3, [r7, #9]
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	03ff63ff 	.word	0x03ff63ff

08006a7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d138      	bne.n	8006b04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e032      	b.n	8006b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2224      	movs	r2, #36	; 0x24
 8006aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ace:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6819      	ldr	r1, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e000      	b.n	8006b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
  }
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d139      	bne.n	8006b9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e033      	b.n	8006b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2224      	movs	r2, #36	; 0x24
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bba:	6013      	str	r3, [r2, #0]
}
 8006bbc:	bf00      	nop
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40007000 	.word	0x40007000

08006bcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	4a22      	ldr	r2, [pc, #136]	; (8006c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8006bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be0:	6413      	str	r3, [r2, #64]	; 0x40
 8006be2:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006bee:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1d      	ldr	r2, [pc, #116]	; (8006c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bfa:	f7fe fcd7 	bl	80055ac <HAL_GetTick>
 8006bfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c00:	e009      	b.n	8006c16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c02:	f7fe fcd3 	bl	80055ac <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c10:	d901      	bls.n	8006c16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e022      	b.n	8006c5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c22:	d1ee      	bne.n	8006c02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006c24:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c30:	f7fe fcbc 	bl	80055ac <HAL_GetTick>
 8006c34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c36:	e009      	b.n	8006c4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c38:	f7fe fcb8 	bl	80055ac <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c46:	d901      	bls.n	8006c4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e007      	b.n	8006c5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c58:	d1ee      	bne.n	8006c38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40007000 	.word	0x40007000

08006c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006c74:	2300      	movs	r3, #0
 8006c76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e29b      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8087 	beq.w	8006d9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c90:	4b96      	ldr	r3, [pc, #600]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 030c 	and.w	r3, r3, #12
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d00c      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c9c:	4b93      	ldr	r3, [pc, #588]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 030c 	and.w	r3, r3, #12
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d112      	bne.n	8006cce <HAL_RCC_OscConfig+0x62>
 8006ca8:	4b90      	ldr	r3, [pc, #576]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cb4:	d10b      	bne.n	8006cce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb6:	4b8d      	ldr	r3, [pc, #564]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d06c      	beq.n	8006d9c <HAL_RCC_OscConfig+0x130>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d168      	bne.n	8006d9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e275      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x7a>
 8006cd8:	4b84      	ldr	r3, [pc, #528]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a83      	ldr	r2, [pc, #524]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e02e      	b.n	8006d44 <HAL_RCC_OscConfig+0xd8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10c      	bne.n	8006d08 <HAL_RCC_OscConfig+0x9c>
 8006cee:	4b7f      	ldr	r3, [pc, #508]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a7e      	ldr	r2, [pc, #504]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	4b7c      	ldr	r3, [pc, #496]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a7b      	ldr	r2, [pc, #492]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	e01d      	b.n	8006d44 <HAL_RCC_OscConfig+0xd8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d10:	d10c      	bne.n	8006d2c <HAL_RCC_OscConfig+0xc0>
 8006d12:	4b76      	ldr	r3, [pc, #472]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a75      	ldr	r2, [pc, #468]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	4b73      	ldr	r3, [pc, #460]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a72      	ldr	r2, [pc, #456]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e00b      	b.n	8006d44 <HAL_RCC_OscConfig+0xd8>
 8006d2c:	4b6f      	ldr	r3, [pc, #444]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a6e      	ldr	r2, [pc, #440]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	4b6c      	ldr	r3, [pc, #432]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a6b      	ldr	r2, [pc, #428]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d013      	beq.n	8006d74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4c:	f7fe fc2e 	bl	80055ac <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d54:	f7fe fc2a 	bl	80055ac <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b64      	cmp	r3, #100	; 0x64
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e229      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d66:	4b61      	ldr	r3, [pc, #388]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0f0      	beq.n	8006d54 <HAL_RCC_OscConfig+0xe8>
 8006d72:	e014      	b.n	8006d9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d74:	f7fe fc1a 	bl	80055ac <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d7c:	f7fe fc16 	bl	80055ac <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b64      	cmp	r3, #100	; 0x64
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e215      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d8e:	4b57      	ldr	r3, [pc, #348]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f0      	bne.n	8006d7c <HAL_RCC_OscConfig+0x110>
 8006d9a:	e000      	b.n	8006d9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d069      	beq.n	8006e7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006daa:	4b50      	ldr	r3, [pc, #320]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 030c 	and.w	r3, r3, #12
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00b      	beq.n	8006dce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006db6:	4b4d      	ldr	r3, [pc, #308]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 030c 	and.w	r3, r3, #12
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d11c      	bne.n	8006dfc <HAL_RCC_OscConfig+0x190>
 8006dc2:	4b4a      	ldr	r3, [pc, #296]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d116      	bne.n	8006dfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dce:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_RCC_OscConfig+0x17a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d001      	beq.n	8006de6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e1e9      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de6:	4b41      	ldr	r3, [pc, #260]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	493d      	ldr	r1, [pc, #244]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dfa:	e040      	b.n	8006e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d023      	beq.n	8006e4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e04:	4b39      	ldr	r3, [pc, #228]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a38      	ldr	r2, [pc, #224]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e10:	f7fe fbcc 	bl	80055ac <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e18:	f7fe fbc8 	bl	80055ac <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e1c7      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e2a:	4b30      	ldr	r3, [pc, #192]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f0      	beq.n	8006e18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e36:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	4929      	ldr	r1, [pc, #164]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]
 8006e4a:	e018      	b.n	8006e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e4c:	4b27      	ldr	r3, [pc, #156]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e52:	f023 0301 	bic.w	r3, r3, #1
 8006e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fe fba8 	bl	80055ac <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e60:	f7fe fba4 	bl	80055ac <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e1a3      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e72:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d038      	beq.n	8006efc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d019      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e96:	4a15      	ldr	r2, [pc, #84]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9e:	f7fe fb85 	bl	80055ac <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea6:	f7fe fb81 	bl	80055ac <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e180      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x23a>
 8006ec4:	e01a      	b.n	8006efc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ec6:	4b09      	ldr	r3, [pc, #36]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eca:	4a08      	ldr	r2, [pc, #32]	; (8006eec <HAL_RCC_OscConfig+0x280>)
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed2:	f7fe fb6b 	bl	80055ac <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eda:	f7fe fb67 	bl	80055ac <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d903      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e166      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
 8006eec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef0:	4b92      	ldr	r3, [pc, #584]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1ee      	bne.n	8006eda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80a4 	beq.w	8007052 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f0a:	4b8c      	ldr	r3, [pc, #560]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10d      	bne.n	8006f32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f16:	4b89      	ldr	r3, [pc, #548]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	4a88      	ldr	r2, [pc, #544]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f20:	6413      	str	r3, [r2, #64]	; 0x40
 8006f22:	4b86      	ldr	r3, [pc, #536]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f32:	4b83      	ldr	r3, [pc, #524]	; (8007140 <HAL_RCC_OscConfig+0x4d4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d118      	bne.n	8006f70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006f3e:	4b80      	ldr	r3, [pc, #512]	; (8007140 <HAL_RCC_OscConfig+0x4d4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a7f      	ldr	r2, [pc, #508]	; (8007140 <HAL_RCC_OscConfig+0x4d4>)
 8006f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f4a:	f7fe fb2f 	bl	80055ac <HAL_GetTick>
 8006f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f50:	e008      	b.n	8006f64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f52:	f7fe fb2b 	bl	80055ac <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b64      	cmp	r3, #100	; 0x64
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e12a      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f64:	4b76      	ldr	r3, [pc, #472]	; (8007140 <HAL_RCC_OscConfig+0x4d4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0f0      	beq.n	8006f52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d106      	bne.n	8006f86 <HAL_RCC_OscConfig+0x31a>
 8006f78:	4b70      	ldr	r3, [pc, #448]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7c:	4a6f      	ldr	r2, [pc, #444]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f7e:	f043 0301 	orr.w	r3, r3, #1
 8006f82:	6713      	str	r3, [r2, #112]	; 0x70
 8006f84:	e02d      	b.n	8006fe2 <HAL_RCC_OscConfig+0x376>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x33c>
 8006f8e:	4b6b      	ldr	r3, [pc, #428]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	4a6a      	ldr	r2, [pc, #424]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6713      	str	r3, [r2, #112]	; 0x70
 8006f9a:	4b68      	ldr	r3, [pc, #416]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	4a67      	ldr	r2, [pc, #412]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fa0:	f023 0304 	bic.w	r3, r3, #4
 8006fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa6:	e01c      	b.n	8006fe2 <HAL_RCC_OscConfig+0x376>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d10c      	bne.n	8006fca <HAL_RCC_OscConfig+0x35e>
 8006fb0:	4b62      	ldr	r3, [pc, #392]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb4:	4a61      	ldr	r2, [pc, #388]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fb6:	f043 0304 	orr.w	r3, r3, #4
 8006fba:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbc:	4b5f      	ldr	r3, [pc, #380]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc0:	4a5e      	ldr	r2, [pc, #376]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc8:	e00b      	b.n	8006fe2 <HAL_RCC_OscConfig+0x376>
 8006fca:	4b5c      	ldr	r3, [pc, #368]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fce:	4a5b      	ldr	r2, [pc, #364]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fd0:	f023 0301 	bic.w	r3, r3, #1
 8006fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd6:	4b59      	ldr	r3, [pc, #356]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4a58      	ldr	r2, [pc, #352]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8006fdc:	f023 0304 	bic.w	r3, r3, #4
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d015      	beq.n	8007016 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fea:	f7fe fadf 	bl	80055ac <HAL_GetTick>
 8006fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff0:	e00a      	b.n	8007008 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff2:	f7fe fadb 	bl	80055ac <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007000:	4293      	cmp	r3, r2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e0d8      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007008:	4b4c      	ldr	r3, [pc, #304]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0ee      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x386>
 8007014:	e014      	b.n	8007040 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007016:	f7fe fac9 	bl	80055ac <HAL_GetTick>
 800701a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800701c:	e00a      	b.n	8007034 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701e:	f7fe fac5 	bl	80055ac <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	f241 3288 	movw	r2, #5000	; 0x1388
 800702c:	4293      	cmp	r3, r2
 800702e:	d901      	bls.n	8007034 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e0c2      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007034:	4b41      	ldr	r3, [pc, #260]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8007036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1ee      	bne.n	800701e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d105      	bne.n	8007052 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	4a3c      	ldr	r2, [pc, #240]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 800704c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007050:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 80ae 	beq.w	80071b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800705c:	4b37      	ldr	r3, [pc, #220]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 030c 	and.w	r3, r3, #12
 8007064:	2b08      	cmp	r3, #8
 8007066:	d06d      	beq.n	8007144 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d14b      	bne.n	8007108 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007070:	4b32      	ldr	r3, [pc, #200]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a31      	ldr	r2, [pc, #196]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8007076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800707a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800707c:	f7fe fa96 	bl	80055ac <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007084:	f7fe fa92 	bl	80055ac <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e091      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007096:	4b29      	ldr	r3, [pc, #164]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f0      	bne.n	8007084 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69da      	ldr	r2, [r3, #28]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	019b      	lsls	r3, r3, #6
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	3b01      	subs	r3, #1
 80070bc:	041b      	lsls	r3, r3, #16
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	061b      	lsls	r3, r3, #24
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	071b      	lsls	r3, r3, #28
 80070ce:	491b      	ldr	r1, [pc, #108]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d4:	4b19      	ldr	r3, [pc, #100]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a18      	ldr	r2, [pc, #96]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 80070da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fe fa64 	bl	80055ac <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e8:	f7fe fa60 	bl	80055ac <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e05f      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x47c>
 8007106:	e057      	b.n	80071b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a0b      	ldr	r2, [pc, #44]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 800710e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fe fa4a 	bl	80055ac <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800711c:	f7fe fa46 	bl	80055ac <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e045      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712e:	4b03      	ldr	r3, [pc, #12]	; (800713c <HAL_RCC_OscConfig+0x4d0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f0      	bne.n	800711c <HAL_RCC_OscConfig+0x4b0>
 800713a:	e03d      	b.n	80071b8 <HAL_RCC_OscConfig+0x54c>
 800713c:	40023800 	.word	0x40023800
 8007140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007144:	4b1f      	ldr	r3, [pc, #124]	; (80071c4 <HAL_RCC_OscConfig+0x558>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d030      	beq.n	80071b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800715c:	429a      	cmp	r2, r3
 800715e:	d129      	bne.n	80071b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800716a:	429a      	cmp	r2, r3
 800716c:	d122      	bne.n	80071b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007174:	4013      	ands	r3, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800717a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800717c:	4293      	cmp	r3, r2
 800717e:	d119      	bne.n	80071b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	085b      	lsrs	r3, r3, #1
 800718c:	3b01      	subs	r3, #1
 800718e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007190:	429a      	cmp	r2, r3
 8007192:	d10f      	bne.n	80071b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d107      	bne.n	80071b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d001      	beq.n	80071b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800

080071c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e0d0      	b.n	8007382 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071e0:	4b6a      	ldr	r3, [pc, #424]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d910      	bls.n	8007210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ee:	4b67      	ldr	r3, [pc, #412]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 020f 	bic.w	r2, r3, #15
 80071f6:	4965      	ldr	r1, [pc, #404]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fe:	4b63      	ldr	r3, [pc, #396]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d001      	beq.n	8007210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0b8      	b.n	8007382 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d020      	beq.n	800725e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007228:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	4a58      	ldr	r2, [pc, #352]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 800722e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007232:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007240:	4b53      	ldr	r3, [pc, #332]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	4a52      	ldr	r2, [pc, #328]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 8007246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800724a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800724c:	4b50      	ldr	r3, [pc, #320]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	494d      	ldr	r1, [pc, #308]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 800725a:	4313      	orrs	r3, r2
 800725c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d040      	beq.n	80072ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d107      	bne.n	8007282 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007272:	4b47      	ldr	r3, [pc, #284]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d115      	bne.n	80072aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e07f      	b.n	8007382 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d107      	bne.n	800729a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728a:	4b41      	ldr	r3, [pc, #260]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e073      	b.n	8007382 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729a:	4b3d      	ldr	r3, [pc, #244]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e06b      	b.n	8007382 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072aa:	4b39      	ldr	r3, [pc, #228]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f023 0203 	bic.w	r2, r3, #3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	4936      	ldr	r1, [pc, #216]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072bc:	f7fe f976 	bl	80055ac <HAL_GetTick>
 80072c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c2:	e00a      	b.n	80072da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c4:	f7fe f972 	bl	80055ac <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e053      	b.n	8007382 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072da:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 020c 	and.w	r2, r3, #12
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d1eb      	bne.n	80072c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072ec:	4b27      	ldr	r3, [pc, #156]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d210      	bcs.n	800731c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fa:	4b24      	ldr	r3, [pc, #144]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f023 020f 	bic.w	r2, r3, #15
 8007302:	4922      	ldr	r1, [pc, #136]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	4313      	orrs	r3, r2
 8007308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730a:	4b20      	ldr	r3, [pc, #128]	; (800738c <HAL_RCC_ClockConfig+0x1c4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e032      	b.n	8007382 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d008      	beq.n	800733a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007328:	4b19      	ldr	r3, [pc, #100]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	4916      	ldr	r1, [pc, #88]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 8007336:	4313      	orrs	r3, r2
 8007338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007346:	4b12      	ldr	r3, [pc, #72]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	490e      	ldr	r1, [pc, #56]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 8007356:	4313      	orrs	r3, r2
 8007358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800735a:	f000 f821 	bl	80073a0 <HAL_RCC_GetSysClockFreq>
 800735e:	4602      	mov	r2, r0
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <HAL_RCC_ClockConfig+0x1c8>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	091b      	lsrs	r3, r3, #4
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	490a      	ldr	r1, [pc, #40]	; (8007394 <HAL_RCC_ClockConfig+0x1cc>)
 800736c:	5ccb      	ldrb	r3, [r1, r3]
 800736e:	fa22 f303 	lsr.w	r3, r2, r3
 8007372:	4a09      	ldr	r2, [pc, #36]	; (8007398 <HAL_RCC_ClockConfig+0x1d0>)
 8007374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <HAL_RCC_ClockConfig+0x1d4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe f8d2 	bl	8005524 <HAL_InitTick>

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40023c00 	.word	0x40023c00
 8007390:	40023800 	.word	0x40023800
 8007394:	0800d2e0 	.word	0x0800d2e0
 8007398:	200000cc 	.word	0x200000cc
 800739c:	200000d4 	.word	0x200000d4

080073a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	2300      	movs	r3, #0
 80073b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073b8:	4b67      	ldr	r3, [pc, #412]	; (8007558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f003 030c 	and.w	r3, r3, #12
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d00d      	beq.n	80073e0 <HAL_RCC_GetSysClockFreq+0x40>
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	f200 80bd 	bhi.w	8007544 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_RCC_GetSysClockFreq+0x34>
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d003      	beq.n	80073da <HAL_RCC_GetSysClockFreq+0x3a>
 80073d2:	e0b7      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073d4:	4b61      	ldr	r3, [pc, #388]	; (800755c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073d6:	60bb      	str	r3, [r7, #8]
      break;
 80073d8:	e0b7      	b.n	800754a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073da:	4b61      	ldr	r3, [pc, #388]	; (8007560 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80073dc:	60bb      	str	r3, [r7, #8]
      break;
 80073de:	e0b4      	b.n	800754a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073e0:	4b5d      	ldr	r3, [pc, #372]	; (8007558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80073ea:	4b5b      	ldr	r3, [pc, #364]	; (8007558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d04d      	beq.n	8007492 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073f6:	4b58      	ldr	r3, [pc, #352]	; (8007558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	099b      	lsrs	r3, r3, #6
 80073fc:	461a      	mov	r2, r3
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007406:	f04f 0100 	mov.w	r1, #0
 800740a:	ea02 0800 	and.w	r8, r2, r0
 800740e:	ea03 0901 	and.w	r9, r3, r1
 8007412:	4640      	mov	r0, r8
 8007414:	4649      	mov	r1, r9
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	014b      	lsls	r3, r1, #5
 8007420:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007424:	0142      	lsls	r2, r0, #5
 8007426:	4610      	mov	r0, r2
 8007428:	4619      	mov	r1, r3
 800742a:	ebb0 0008 	subs.w	r0, r0, r8
 800742e:	eb61 0109 	sbc.w	r1, r1, r9
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	018b      	lsls	r3, r1, #6
 800743c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007440:	0182      	lsls	r2, r0, #6
 8007442:	1a12      	subs	r2, r2, r0
 8007444:	eb63 0301 	sbc.w	r3, r3, r1
 8007448:	f04f 0000 	mov.w	r0, #0
 800744c:	f04f 0100 	mov.w	r1, #0
 8007450:	00d9      	lsls	r1, r3, #3
 8007452:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007456:	00d0      	lsls	r0, r2, #3
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	eb12 0208 	adds.w	r2, r2, r8
 8007460:	eb43 0309 	adc.w	r3, r3, r9
 8007464:	f04f 0000 	mov.w	r0, #0
 8007468:	f04f 0100 	mov.w	r1, #0
 800746c:	0259      	lsls	r1, r3, #9
 800746e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007472:	0250      	lsls	r0, r2, #9
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4610      	mov	r0, r2
 800747a:	4619      	mov	r1, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	461a      	mov	r2, r3
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	f7f8 ff34 	bl	80002f0 <__aeabi_uldivmod>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4613      	mov	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	e04a      	b.n	8007528 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007492:	4b31      	ldr	r3, [pc, #196]	; (8007558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	099b      	lsrs	r3, r3, #6
 8007498:	461a      	mov	r2, r3
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074a2:	f04f 0100 	mov.w	r1, #0
 80074a6:	ea02 0400 	and.w	r4, r2, r0
 80074aa:	ea03 0501 	and.w	r5, r3, r1
 80074ae:	4620      	mov	r0, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	014b      	lsls	r3, r1, #5
 80074bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074c0:	0142      	lsls	r2, r0, #5
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	1b00      	subs	r0, r0, r4
 80074c8:	eb61 0105 	sbc.w	r1, r1, r5
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	018b      	lsls	r3, r1, #6
 80074d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074da:	0182      	lsls	r2, r0, #6
 80074dc:	1a12      	subs	r2, r2, r0
 80074de:	eb63 0301 	sbc.w	r3, r3, r1
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f04f 0100 	mov.w	r1, #0
 80074ea:	00d9      	lsls	r1, r3, #3
 80074ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074f0:	00d0      	lsls	r0, r2, #3
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	1912      	adds	r2, r2, r4
 80074f8:	eb45 0303 	adc.w	r3, r5, r3
 80074fc:	f04f 0000 	mov.w	r0, #0
 8007500:	f04f 0100 	mov.w	r1, #0
 8007504:	0299      	lsls	r1, r3, #10
 8007506:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800750a:	0290      	lsls	r0, r2, #10
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4610      	mov	r0, r2
 8007512:	4619      	mov	r1, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	461a      	mov	r2, r3
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	f7f8 fee8 	bl	80002f0 <__aeabi_uldivmod>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4613      	mov	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007528:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	0c1b      	lsrs	r3, r3, #16
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	3301      	adds	r3, #1
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007540:	60bb      	str	r3, [r7, #8]
      break;
 8007542:	e002      	b.n	800754a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007546:	60bb      	str	r3, [r7, #8]
      break;
 8007548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800754a:	68bb      	ldr	r3, [r7, #8]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007556:	bf00      	nop
 8007558:	40023800 	.word	0x40023800
 800755c:	00f42400 	.word	0x00f42400
 8007560:	007a1200 	.word	0x007a1200

08007564 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007568:	4b03      	ldr	r3, [pc, #12]	; (8007578 <HAL_RCC_GetHCLKFreq+0x14>)
 800756a:	681b      	ldr	r3, [r3, #0]
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	200000cc 	.word	0x200000cc

0800757c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007580:	f7ff fff0 	bl	8007564 <HAL_RCC_GetHCLKFreq>
 8007584:	4602      	mov	r2, r0
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	0a9b      	lsrs	r3, r3, #10
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	4903      	ldr	r1, [pc, #12]	; (80075a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007592:	5ccb      	ldrb	r3, [r1, r3]
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40023800 	.word	0x40023800
 80075a0:	0800d2f0 	.word	0x0800d2f0

080075a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075a8:	f7ff ffdc 	bl	8007564 <HAL_RCC_GetHCLKFreq>
 80075ac:	4602      	mov	r2, r0
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	0b5b      	lsrs	r3, r3, #13
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	4903      	ldr	r1, [pc, #12]	; (80075c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075ba:	5ccb      	ldrb	r3, [r1, r3]
 80075bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40023800 	.word	0x40023800
 80075c8:	0800d2f0 	.word	0x0800d2f0

080075cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d012      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075f4:	4b69      	ldr	r3, [pc, #420]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	4a68      	ldr	r2, [pc, #416]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075fe:	6093      	str	r3, [r2, #8]
 8007600:	4b66      	ldr	r3, [pc, #408]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007608:	4964      	ldr	r1, [pc, #400]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800760a:	4313      	orrs	r3, r2
 800760c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007616:	2301      	movs	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d017      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007626:	4b5d      	ldr	r3, [pc, #372]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800762c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007634:	4959      	ldr	r1, [pc, #356]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007644:	d101      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007646:	2301      	movs	r3, #1
 8007648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007652:	2301      	movs	r3, #1
 8007654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d017      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007662:	4b4e      	ldr	r3, [pc, #312]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	494a      	ldr	r1, [pc, #296]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007680:	d101      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007682:	2301      	movs	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800768e:	2301      	movs	r3, #1
 8007690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800769e:	2301      	movs	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 808b 	beq.w	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076b0:	4b3a      	ldr	r3, [pc, #232]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	4a39      	ldr	r2, [pc, #228]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ba:	6413      	str	r3, [r2, #64]	; 0x40
 80076bc:	4b37      	ldr	r3, [pc, #220]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076c8:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a34      	ldr	r2, [pc, #208]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d4:	f7fd ff6a 	bl	80055ac <HAL_GetTick>
 80076d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076dc:	f7fd ff66 	bl	80055ac <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b64      	cmp	r3, #100	; 0x64
 80076e8:	d901      	bls.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e38f      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80076ee:	4b2c      	ldr	r3, [pc, #176]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f0      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076fa:	4b28      	ldr	r3, [pc, #160]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007702:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d035      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	429a      	cmp	r2, r3
 8007716:	d02e      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007718:	4b20      	ldr	r3, [pc, #128]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800771a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007720:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007722:	4b1e      	ldr	r3, [pc, #120]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007726:	4a1d      	ldr	r2, [pc, #116]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800772e:	4b1b      	ldr	r3, [pc, #108]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007732:	4a1a      	ldr	r2, [pc, #104]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007738:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800773a:	4a18      	ldr	r2, [pc, #96]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007740:	4b16      	ldr	r3, [pc, #88]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b01      	cmp	r3, #1
 800774a:	d114      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800774c:	f7fd ff2e 	bl	80055ac <HAL_GetTick>
 8007750:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007752:	e00a      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007754:	f7fd ff2a 	bl	80055ac <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e351      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0ee      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800777e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007782:	d111      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007792:	400b      	ands	r3, r1
 8007794:	4901      	ldr	r1, [pc, #4]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007796:	4313      	orrs	r3, r2
 8007798:	608b      	str	r3, [r1, #8]
 800779a:	e00b      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800779c:	40023800 	.word	0x40023800
 80077a0:	40007000 	.word	0x40007000
 80077a4:	0ffffcff 	.word	0x0ffffcff
 80077a8:	4bb3      	ldr	r3, [pc, #716]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	4ab2      	ldr	r2, [pc, #712]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077b2:	6093      	str	r3, [r2, #8]
 80077b4:	4bb0      	ldr	r3, [pc, #704]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077c0:	49ad      	ldr	r1, [pc, #692]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d010      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077d2:	4ba9      	ldr	r3, [pc, #676]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d8:	4aa7      	ldr	r2, [pc, #668]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80077e2:	4ba5      	ldr	r3, [pc, #660]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	49a2      	ldr	r1, [pc, #648]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007800:	4b9d      	ldr	r3, [pc, #628]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800780e:	499a      	ldr	r1, [pc, #616]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007822:	4b95      	ldr	r3, [pc, #596]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007830:	4991      	ldr	r1, [pc, #580]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007844:	4b8c      	ldr	r3, [pc, #560]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007852:	4989      	ldr	r1, [pc, #548]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007854:	4313      	orrs	r3, r2
 8007856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007866:	4b84      	ldr	r3, [pc, #528]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	4980      	ldr	r1, [pc, #512]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007876:	4313      	orrs	r3, r2
 8007878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007888:	4b7b      	ldr	r3, [pc, #492]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788e:	f023 0203 	bic.w	r2, r3, #3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	4978      	ldr	r1, [pc, #480]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078aa:	4b73      	ldr	r3, [pc, #460]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b0:	f023 020c 	bic.w	r2, r3, #12
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b8:	496f      	ldr	r1, [pc, #444]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078cc:	4b6a      	ldr	r3, [pc, #424]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078da:	4967      	ldr	r1, [pc, #412]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078ee:	4b62      	ldr	r3, [pc, #392]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	495e      	ldr	r1, [pc, #376]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007910:	4b59      	ldr	r3, [pc, #356]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	4956      	ldr	r1, [pc, #344]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007920:	4313      	orrs	r3, r2
 8007922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007932:	4b51      	ldr	r3, [pc, #324]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007938:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007940:	494d      	ldr	r1, [pc, #308]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007954:	4b48      	ldr	r3, [pc, #288]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007962:	4945      	ldr	r1, [pc, #276]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007976:	4b40      	ldr	r3, [pc, #256]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007984:	493c      	ldr	r1, [pc, #240]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007998:	4b37      	ldr	r3, [pc, #220]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800799a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079a6:	4934      	ldr	r1, [pc, #208]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d011      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80079ba:	4b2f      	ldr	r3, [pc, #188]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c8:	492b      	ldr	r1, [pc, #172]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d8:	d101      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80079da:	2301      	movs	r3, #1
 80079dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80079ea:	2301      	movs	r3, #1
 80079ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079fa:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a08:	491b      	ldr	r1, [pc, #108]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a1c:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2c:	4912      	ldr	r1, [pc, #72]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007a40:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a50:	4909      	ldr	r1, [pc, #36]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00f      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a74:	e002      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007a76:	bf00      	nop
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	4986      	ldr	r1, [pc, #536]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007a90:	4b81      	ldr	r3, [pc, #516]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa0:	497d      	ldr	r1, [pc, #500]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d006      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 80d6 	beq.w	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007abc:	4b76      	ldr	r3, [pc, #472]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a75      	ldr	r2, [pc, #468]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac8:	f7fd fd70 	bl	80055ac <HAL_GetTick>
 8007acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ad0:	f7fd fd6c 	bl	80055ac <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e195      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ae2:	4b6d      	ldr	r3, [pc, #436]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d021      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d11d      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b02:	4b65      	ldr	r3, [pc, #404]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b08:	0c1b      	lsrs	r3, r3, #16
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b10:	4b61      	ldr	r3, [pc, #388]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b16:	0e1b      	lsrs	r3, r3, #24
 8007b18:	f003 030f 	and.w	r3, r3, #15
 8007b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	019a      	lsls	r2, r3, #6
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	041b      	lsls	r3, r3, #16
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	061b      	lsls	r3, r3, #24
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	071b      	lsls	r3, r3, #28
 8007b36:	4958      	ldr	r1, [pc, #352]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b52:	d00a      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d02e      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b68:	d129      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b6a:	4b4b      	ldr	r3, [pc, #300]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b78:	4b47      	ldr	r3, [pc, #284]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7e:	0f1b      	lsrs	r3, r3, #28
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	019a      	lsls	r2, r3, #6
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	041b      	lsls	r3, r3, #16
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	061b      	lsls	r3, r3, #24
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	071b      	lsls	r3, r3, #28
 8007b9e:	493e      	ldr	r1, [pc, #248]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ba6:	4b3c      	ldr	r3, [pc, #240]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bac:	f023 021f 	bic.w	r2, r3, #31
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	4938      	ldr	r1, [pc, #224]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01d      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bca:	4b33      	ldr	r3, [pc, #204]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd0:	0e1b      	lsrs	r3, r3, #24
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bd8:	4b2f      	ldr	r3, [pc, #188]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bde:	0f1b      	lsrs	r3, r3, #28
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	019a      	lsls	r2, r3, #6
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	061b      	lsls	r3, r3, #24
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	071b      	lsls	r3, r3, #28
 8007bfe:	4926      	ldr	r1, [pc, #152]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d011      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	019a      	lsls	r2, r3, #6
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	041b      	lsls	r3, r3, #16
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	061b      	lsls	r3, r3, #24
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	071b      	lsls	r3, r3, #28
 8007c2e:	491a      	ldr	r1, [pc, #104]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c36:	4b18      	ldr	r3, [pc, #96]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c42:	f7fd fcb3 	bl	80055ac <HAL_GetTick>
 8007c46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c48:	e008      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c4a:	f7fd fcaf 	bl	80055ac <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b64      	cmp	r3, #100	; 0x64
 8007c56:	d901      	bls.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e0d8      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c5c:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f0      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	f040 80ce 	bne.w	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c70:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a08      	ldr	r2, [pc, #32]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7c:	f7fd fc96 	bl	80055ac <HAL_GetTick>
 8007c80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c82:	e00b      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007c84:	f7fd fc92 	bl	80055ac <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b64      	cmp	r3, #100	; 0x64
 8007c90:	d904      	bls.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e0bb      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007c96:	bf00      	nop
 8007c98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c9c:	4b5e      	ldr	r3, [pc, #376]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d0ec      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d02e      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d12a      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007cd2:	4b51      	ldr	r3, [pc, #324]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd8:	0c1b      	lsrs	r3, r3, #16
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ce0:	4b4d      	ldr	r3, [pc, #308]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce6:	0f1b      	lsrs	r3, r3, #28
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	019a      	lsls	r2, r3, #6
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	061b      	lsls	r3, r3, #24
 8007d00:	431a      	orrs	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	071b      	lsls	r3, r3, #28
 8007d06:	4944      	ldr	r1, [pc, #272]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d0e:	4b42      	ldr	r3, [pc, #264]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	493d      	ldr	r1, [pc, #244]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d022      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d3c:	d11d      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d3e:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d44:	0e1b      	lsrs	r3, r3, #24
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d52:	0f1b      	lsrs	r3, r3, #28
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	019a      	lsls	r2, r3, #6
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	041b      	lsls	r3, r3, #16
 8007d66:	431a      	orrs	r2, r3
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	061b      	lsls	r3, r3, #24
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	071b      	lsls	r3, r3, #28
 8007d72:	4929      	ldr	r1, [pc, #164]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d028      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d86:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8c:	0e1b      	lsrs	r3, r3, #24
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d94:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	019a      	lsls	r2, r3, #6
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	041b      	lsls	r3, r3, #16
 8007dac:	431a      	orrs	r2, r3
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	061b      	lsls	r3, r3, #24
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	071b      	lsls	r3, r3, #28
 8007dba:	4917      	ldr	r1, [pc, #92]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4911      	ldr	r1, [pc, #68]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a0e      	ldr	r2, [pc, #56]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007de4:	f7fd fbe2 	bl	80055ac <HAL_GetTick>
 8007de8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dea:	e008      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dec:	f7fd fbde 	bl	80055ac <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b64      	cmp	r3, #100	; 0x64
 8007df8:	d901      	bls.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e007      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e0a:	d1ef      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3720      	adds	r7, #32
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	40023800 	.word	0x40023800

08007e1c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e01c      	b.n	8007e68 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fb ff5a 	bl	8003cf8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0204 	orr.w	r2, r2, #4
 8007e58:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e09d      	b.n	8007fbe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d108      	bne.n	8007e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e92:	d009      	beq.n	8007ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	61da      	str	r2, [r3, #28]
 8007e9a:	e005      	b.n	8007ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fb ff76 	bl	8003db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ede:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ee8:	d902      	bls.n	8007ef0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	e002      	b.n	8007ef6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ef4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007efe:	d007      	beq.n	8007f10 <HAL_SPI_Init+0xa0>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f08:	d002      	beq.n	8007f10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	431a      	orrs	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	ea42 0103 	orr.w	r1, r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	0c1b      	lsrs	r3, r3, #16
 8007f6c:	f003 0204 	and.w	r2, r3, #4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f8c:	ea42 0103 	orr.w	r1, r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	69da      	ldr	r2, [r3, #28]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b088      	sub	sp, #32
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	603b      	str	r3, [r7, #0]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_SPI_Transmit+0x22>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e158      	b.n	800829a <HAL_SPI_Transmit+0x2d4>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ff0:	f7fd fadc 	bl	80055ac <HAL_GetTick>
 8007ff4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b01      	cmp	r3, #1
 8008004:	d002      	beq.n	800800c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008006:	2302      	movs	r3, #2
 8008008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800800a:	e13d      	b.n	8008288 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_SPI_Transmit+0x52>
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800801c:	e134      	b.n	8008288 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2203      	movs	r2, #3
 8008022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	88fa      	ldrh	r2, [r7, #6]
 8008036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	88fa      	ldrh	r2, [r7, #6]
 800803c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008068:	d10f      	bne.n	800808a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008078:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d007      	beq.n	80080a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080b0:	d94b      	bls.n	800814a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_SPI_Transmit+0xfa>
 80080ba:	8afb      	ldrh	r3, [r7, #22]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d13e      	bne.n	800813e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	881a      	ldrh	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	1c9a      	adds	r2, r3, #2
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080e4:	e02b      	b.n	800813e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d112      	bne.n	800811a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	881a      	ldrh	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	1c9a      	adds	r2, r3, #2
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800810e:	b29b      	uxth	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008118:	e011      	b.n	800813e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800811a:	f7fd fa47 	bl	80055ac <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d803      	bhi.n	8008132 <HAL_SPI_Transmit+0x16c>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008130:	d102      	bne.n	8008138 <HAL_SPI_Transmit+0x172>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d102      	bne.n	800813e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800813c:	e0a4      	b.n	8008288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1ce      	bne.n	80080e6 <HAL_SPI_Transmit+0x120>
 8008148:	e07c      	b.n	8008244 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_SPI_Transmit+0x192>
 8008152:	8afb      	ldrh	r3, [r7, #22]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d170      	bne.n	800823a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b01      	cmp	r3, #1
 8008160:	d912      	bls.n	8008188 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	881a      	ldrh	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	1c9a      	adds	r2, r3, #2
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b02      	subs	r3, #2
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008186:	e058      	b.n	800823a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	330c      	adds	r3, #12
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80081ae:	e044      	b.n	800823a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d12b      	bne.n	8008216 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d912      	bls.n	80081ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	881a      	ldrh	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b02      	subs	r3, #2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081ec:	e025      	b.n	800823a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	330c      	adds	r3, #12
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008214:	e011      	b.n	800823a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008216:	f7fd f9c9 	bl	80055ac <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d803      	bhi.n	800822e <HAL_SPI_Transmit+0x268>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d102      	bne.n	8008234 <HAL_SPI_Transmit+0x26e>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d102      	bne.n	800823a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008238:	e026      	b.n	8008288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800823e:	b29b      	uxth	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1b5      	bne.n	80081b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f945 	bl	80084d8 <SPI_EndRxTxTransaction>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10a      	bne.n	8008278 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008262:	2300      	movs	r3, #0
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	613b      	str	r3, [r7, #16]
 8008276:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	77fb      	strb	r3, [r7, #31]
 8008284:	e000      	b.n	8008288 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008298:	7ffb      	ldrb	r3, [r7, #31]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3720      	adds	r7, #32
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082b4:	f7fd f97a 	bl	80055ac <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4413      	add	r3, r2
 80082c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082c4:	f7fd f972 	bl	80055ac <HAL_GetTick>
 80082c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082ca:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	015b      	lsls	r3, r3, #5
 80082d0:	0d1b      	lsrs	r3, r3, #20
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	fb02 f303 	mul.w	r3, r2, r3
 80082d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082da:	e054      	b.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d050      	beq.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082e4:	f7fd f962 	bl	80055ac <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d902      	bls.n	80082fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d13d      	bne.n	8008376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008312:	d111      	bne.n	8008338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800831c:	d004      	beq.n	8008328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008326:	d107      	bne.n	8008338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008340:	d10f      	bne.n	8008362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e017      	b.n	80083a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	3b01      	subs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4013      	ands	r3, r2
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	429a      	cmp	r2, r3
 8008394:	bf0c      	ite	eq
 8008396:	2301      	moveq	r3, #1
 8008398:	2300      	movne	r3, #0
 800839a:	b2db      	uxtb	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d19b      	bne.n	80082dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	200000cc 	.word	0x200000cc

080083b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083c2:	f7fd f8f3 	bl	80055ac <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	4413      	add	r3, r2
 80083d0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083d2:	f7fd f8eb 	bl	80055ac <HAL_GetTick>
 80083d6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083d8:	4b3e      	ldr	r3, [pc, #248]	; (80084d4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	00da      	lsls	r2, r3, #3
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	0d1b      	lsrs	r3, r3, #20
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	fb02 f303 	mul.w	r3, r2, r3
 80083ee:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80083f0:	e062      	b.n	80084b8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083f8:	d109      	bne.n	800840e <SPI_WaitFifoStateUntilTimeout+0x5a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800840c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008414:	d050      	beq.n	80084b8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008416:	f7fd f8c9 	bl	80055ac <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	429a      	cmp	r2, r3
 8008424:	d902      	bls.n	800842c <SPI_WaitFifoStateUntilTimeout+0x78>
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d13d      	bne.n	80084a8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800843a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008444:	d111      	bne.n	800846a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800844e:	d004      	beq.n	800845a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008458:	d107      	bne.n	800846a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008468:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008472:	d10f      	bne.n	8008494 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008492:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e010      	b.n	80084ca <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4013      	ands	r3, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d194      	bne.n	80083f2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3720      	adds	r7, #32
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	200000cc 	.word	0x200000cc

080084d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f7ff ff5f 	bl	80083b4 <SPI_WaitFifoStateUntilTimeout>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d007      	beq.n	800850c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008500:	f043 0220 	orr.w	r2, r3, #32
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e027      	b.n	800855c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2200      	movs	r2, #0
 8008514:	2180      	movs	r1, #128	; 0x80
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7ff fec4 	bl	80082a4 <SPI_WaitFlagStateUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008526:	f043 0220 	orr.w	r2, r3, #32
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e014      	b.n	800855c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2200      	movs	r2, #0
 800853a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff ff38 	bl	80083b4 <SPI_WaitFifoStateUntilTimeout>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854e:	f043 0220 	orr.w	r2, r3, #32
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e000      	b.n	800855c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e049      	b.n	800860a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fb fec4 	bl	8004318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3304      	adds	r3, #4
 80085a0:	4619      	mov	r1, r3
 80085a2:	4610      	mov	r0, r2
 80085a4:	f000 fdb2 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b01      	cmp	r3, #1
 8008626:	d001      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e054      	b.n	80086d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a26      	ldr	r2, [pc, #152]	; (80086e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d022      	beq.n	8008694 <HAL_TIM_Base_Start_IT+0x80>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008656:	d01d      	beq.n	8008694 <HAL_TIM_Base_Start_IT+0x80>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a22      	ldr	r2, [pc, #136]	; (80086e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d018      	beq.n	8008694 <HAL_TIM_Base_Start_IT+0x80>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a21      	ldr	r2, [pc, #132]	; (80086ec <HAL_TIM_Base_Start_IT+0xd8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d013      	beq.n	8008694 <HAL_TIM_Base_Start_IT+0x80>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00e      	beq.n	8008694 <HAL_TIM_Base_Start_IT+0x80>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d009      	beq.n	8008694 <HAL_TIM_Base_Start_IT+0x80>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <HAL_TIM_Base_Start_IT+0x80>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <HAL_TIM_Base_Start_IT+0xe8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d115      	bne.n	80086c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	4b19      	ldr	r3, [pc, #100]	; (8008700 <HAL_TIM_Base_Start_IT+0xec>)
 800869c:	4013      	ands	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b06      	cmp	r3, #6
 80086a4:	d015      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0xbe>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ac:	d011      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086be:	e008      	b.n	80086d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	e000      	b.n	80086d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	40010000 	.word	0x40010000
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40000800 	.word	0x40000800
 80086f0:	40000c00 	.word	0x40000c00
 80086f4:	40010400 	.word	0x40010400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	40001800 	.word	0x40001800
 8008700:	00010007 	.word	0x00010007

08008704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e049      	b.n	80087aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f841 	bl	80087b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f000 fce2 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <HAL_TIM_PWM_Start+0x24>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	bf14      	ite	ne
 80087e4:	2301      	movne	r3, #1
 80087e6:	2300      	moveq	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	e03c      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d109      	bne.n	8008806 <HAL_TIM_PWM_Start+0x3e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e02f      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b08      	cmp	r3, #8
 800880a:	d109      	bne.n	8008820 <HAL_TIM_PWM_Start+0x58>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	bf14      	ite	ne
 8008818:	2301      	movne	r3, #1
 800881a:	2300      	moveq	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	e022      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b0c      	cmp	r3, #12
 8008824:	d109      	bne.n	800883a <HAL_TIM_PWM_Start+0x72>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b01      	cmp	r3, #1
 8008830:	bf14      	ite	ne
 8008832:	2301      	movne	r3, #1
 8008834:	2300      	moveq	r3, #0
 8008836:	b2db      	uxtb	r3, r3
 8008838:	e015      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b10      	cmp	r3, #16
 800883e:	d109      	bne.n	8008854 <HAL_TIM_PWM_Start+0x8c>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b01      	cmp	r3, #1
 800884a:	bf14      	ite	ne
 800884c:	2301      	movne	r3, #1
 800884e:	2300      	moveq	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	e008      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b01      	cmp	r3, #1
 800885e:	bf14      	ite	ne
 8008860:	2301      	movne	r3, #1
 8008862:	2300      	moveq	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e092      	b.n	8008994 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <HAL_TIM_PWM_Start+0xb6>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800887c:	e023      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b04      	cmp	r3, #4
 8008882:	d104      	bne.n	800888e <HAL_TIM_PWM_Start+0xc6>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800888c:	e01b      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b08      	cmp	r3, #8
 8008892:	d104      	bne.n	800889e <HAL_TIM_PWM_Start+0xd6>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800889c:	e013      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b0c      	cmp	r3, #12
 80088a2:	d104      	bne.n	80088ae <HAL_TIM_PWM_Start+0xe6>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088ac:	e00b      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d104      	bne.n	80088be <HAL_TIM_PWM_Start+0xf6>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088bc:	e003      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2201      	movs	r2, #1
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 ffb4 	bl	800983c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a30      	ldr	r2, [pc, #192]	; (800899c <HAL_TIM_PWM_Start+0x1d4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d004      	beq.n	80088e8 <HAL_TIM_PWM_Start+0x120>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a2f      	ldr	r2, [pc, #188]	; (80089a0 <HAL_TIM_PWM_Start+0x1d8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d101      	bne.n	80088ec <HAL_TIM_PWM_Start+0x124>
 80088e8:	2301      	movs	r3, #1
 80088ea:	e000      	b.n	80088ee <HAL_TIM_PWM_Start+0x126>
 80088ec:	2300      	movs	r3, #0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008900:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a25      	ldr	r2, [pc, #148]	; (800899c <HAL_TIM_PWM_Start+0x1d4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d022      	beq.n	8008952 <HAL_TIM_PWM_Start+0x18a>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008914:	d01d      	beq.n	8008952 <HAL_TIM_PWM_Start+0x18a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a22      	ldr	r2, [pc, #136]	; (80089a4 <HAL_TIM_PWM_Start+0x1dc>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d018      	beq.n	8008952 <HAL_TIM_PWM_Start+0x18a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a20      	ldr	r2, [pc, #128]	; (80089a8 <HAL_TIM_PWM_Start+0x1e0>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d013      	beq.n	8008952 <HAL_TIM_PWM_Start+0x18a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1f      	ldr	r2, [pc, #124]	; (80089ac <HAL_TIM_PWM_Start+0x1e4>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00e      	beq.n	8008952 <HAL_TIM_PWM_Start+0x18a>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a19      	ldr	r2, [pc, #100]	; (80089a0 <HAL_TIM_PWM_Start+0x1d8>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d009      	beq.n	8008952 <HAL_TIM_PWM_Start+0x18a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1b      	ldr	r2, [pc, #108]	; (80089b0 <HAL_TIM_PWM_Start+0x1e8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d004      	beq.n	8008952 <HAL_TIM_PWM_Start+0x18a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a19      	ldr	r2, [pc, #100]	; (80089b4 <HAL_TIM_PWM_Start+0x1ec>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d115      	bne.n	800897e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <HAL_TIM_PWM_Start+0x1f0>)
 800895a:	4013      	ands	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b06      	cmp	r3, #6
 8008962:	d015      	beq.n	8008990 <HAL_TIM_PWM_Start+0x1c8>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896a:	d011      	beq.n	8008990 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800897c:	e008      	b.n	8008990 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f042 0201 	orr.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e000      	b.n	8008992 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40000400 	.word	0x40000400
 80089a8:	40000800 	.word	0x40000800
 80089ac:	40000c00 	.word	0x40000c00
 80089b0:	40014000 	.word	0x40014000
 80089b4:	40001800 	.word	0x40001800
 80089b8:	00010007 	.word	0x00010007

080089bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 ff34 	bl	800983c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a36      	ldr	r2, [pc, #216]	; (8008ab4 <HAL_TIM_PWM_Stop+0xf8>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d004      	beq.n	80089e8 <HAL_TIM_PWM_Stop+0x2c>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a35      	ldr	r2, [pc, #212]	; (8008ab8 <HAL_TIM_PWM_Stop+0xfc>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d101      	bne.n	80089ec <HAL_TIM_PWM_Stop+0x30>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <HAL_TIM_PWM_Stop+0x32>
 80089ec:	2300      	movs	r3, #0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d017      	beq.n	8008a22 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a1a      	ldr	r2, [r3, #32]
 80089f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80089fc:	4013      	ands	r3, r2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10f      	bne.n	8008a22 <HAL_TIM_PWM_Stop+0x66>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6a1a      	ldr	r2, [r3, #32]
 8008a08:	f240 4344 	movw	r3, #1092	; 0x444
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d107      	bne.n	8008a22 <HAL_TIM_PWM_Stop+0x66>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a1a      	ldr	r2, [r3, #32]
 8008a28:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10f      	bne.n	8008a52 <HAL_TIM_PWM_Stop+0x96>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6a1a      	ldr	r2, [r3, #32]
 8008a38:	f240 4344 	movw	r3, #1092	; 0x444
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d107      	bne.n	8008a52 <HAL_TIM_PWM_Stop+0x96>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0201 	bic.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <HAL_TIM_PWM_Stop+0xa6>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a60:	e023      	b.n	8008aaa <HAL_TIM_PWM_Stop+0xee>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d104      	bne.n	8008a72 <HAL_TIM_PWM_Stop+0xb6>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a70:	e01b      	b.n	8008aaa <HAL_TIM_PWM_Stop+0xee>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d104      	bne.n	8008a82 <HAL_TIM_PWM_Stop+0xc6>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a80:	e013      	b.n	8008aaa <HAL_TIM_PWM_Stop+0xee>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d104      	bne.n	8008a92 <HAL_TIM_PWM_Stop+0xd6>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a90:	e00b      	b.n	8008aaa <HAL_TIM_PWM_Stop+0xee>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d104      	bne.n	8008aa2 <HAL_TIM_PWM_Stop+0xe6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aa0:	e003      	b.n	8008aaa <HAL_TIM_PWM_Stop+0xee>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40010400 	.word	0x40010400

08008abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d122      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d11b      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0202 	mvn.w	r2, #2
 8008ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fae6 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008b04:	e005      	b.n	8008b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fad8 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fae9 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0304 	and.w	r3, r3, #4
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d122      	bne.n	8008b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d11b      	bne.n	8008b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0204 	mvn.w	r2, #4
 8008b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2202      	movs	r2, #2
 8008b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fabc 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008b58:	e005      	b.n	8008b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 faae 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fabf 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	d122      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0308 	and.w	r3, r3, #8
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d11b      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0208 	mvn.w	r2, #8
 8008b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2204      	movs	r2, #4
 8008b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa92 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008bac:	e005      	b.n	8008bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa84 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa95 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b10      	cmp	r3, #16
 8008bcc:	d122      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	d11b      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0210 	mvn.w	r2, #16
 8008be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2208      	movs	r2, #8
 8008bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa68 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008c00:	e005      	b.n	8008c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa5a 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa6b 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d10e      	bne.n	8008c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d107      	bne.n	8008c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0201 	mvn.w	r2, #1
 8008c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fa34 	bl	80090a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b80      	cmp	r3, #128	; 0x80
 8008c4c:	d10e      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c58:	2b80      	cmp	r3, #128	; 0x80
 8008c5a:	d107      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fea6 	bl	80099b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c7a:	d10e      	bne.n	8008c9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c86:	2b80      	cmp	r3, #128	; 0x80
 8008c88:	d107      	bne.n	8008c9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fe99 	bl	80099cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	2b40      	cmp	r3, #64	; 0x40
 8008ca6:	d10e      	bne.n	8008cc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb2:	2b40      	cmp	r3, #64	; 0x40
 8008cb4:	d107      	bne.n	8008cc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fa19 	bl	80090f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f003 0320 	and.w	r3, r3, #32
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d10e      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b20      	cmp	r3, #32
 8008ce0:	d107      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f06f 0220 	mvn.w	r2, #32
 8008cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fe59 	bl	80099a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e0fd      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b14      	cmp	r3, #20
 8008d22:	f200 80f0 	bhi.w	8008f06 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008d26:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d81 	.word	0x08008d81
 8008d30:	08008f07 	.word	0x08008f07
 8008d34:	08008f07 	.word	0x08008f07
 8008d38:	08008f07 	.word	0x08008f07
 8008d3c:	08008dc1 	.word	0x08008dc1
 8008d40:	08008f07 	.word	0x08008f07
 8008d44:	08008f07 	.word	0x08008f07
 8008d48:	08008f07 	.word	0x08008f07
 8008d4c:	08008e03 	.word	0x08008e03
 8008d50:	08008f07 	.word	0x08008f07
 8008d54:	08008f07 	.word	0x08008f07
 8008d58:	08008f07 	.word	0x08008f07
 8008d5c:	08008e43 	.word	0x08008e43
 8008d60:	08008f07 	.word	0x08008f07
 8008d64:	08008f07 	.word	0x08008f07
 8008d68:	08008f07 	.word	0x08008f07
 8008d6c:	08008e85 	.word	0x08008e85
 8008d70:	08008f07 	.word	0x08008f07
 8008d74:	08008f07 	.word	0x08008f07
 8008d78:	08008f07 	.word	0x08008f07
 8008d7c:	08008ec5 	.word	0x08008ec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fa60 	bl	800924c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0208 	orr.w	r2, r2, #8
 8008d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0204 	bic.w	r2, r2, #4
 8008daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6999      	ldr	r1, [r3, #24]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	691a      	ldr	r2, [r3, #16]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	619a      	str	r2, [r3, #24]
      break;
 8008dbe:	e0a3      	b.n	8008f08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fab2 	bl	8009330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699a      	ldr	r2, [r3, #24]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699a      	ldr	r2, [r3, #24]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6999      	ldr	r1, [r3, #24]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	021a      	lsls	r2, r3, #8
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	619a      	str	r2, [r3, #24]
      break;
 8008e00:	e082      	b.n	8008f08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fb09 	bl	8009420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69da      	ldr	r2, [r3, #28]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0208 	orr.w	r2, r2, #8
 8008e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69da      	ldr	r2, [r3, #28]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0204 	bic.w	r2, r2, #4
 8008e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69d9      	ldr	r1, [r3, #28]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	61da      	str	r2, [r3, #28]
      break;
 8008e40:	e062      	b.n	8008f08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fb5f 	bl	800950c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69da      	ldr	r2, [r3, #28]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69da      	ldr	r2, [r3, #28]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69d9      	ldr	r1, [r3, #28]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	021a      	lsls	r2, r3, #8
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	61da      	str	r2, [r3, #28]
      break;
 8008e82:	e041      	b.n	8008f08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fb96 	bl	80095bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0208 	orr.w	r2, r2, #8
 8008e9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f022 0204 	bic.w	r2, r2, #4
 8008eae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	691a      	ldr	r2, [r3, #16]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ec2:	e021      	b.n	8008f08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fbc8 	bl	8009660 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	021a      	lsls	r2, r3, #8
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f04:	e000      	b.n	8008f08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008f06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop

08008f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_TIM_ConfigClockSource+0x18>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e0b3      	b.n	800909c <HAL_TIM_ConfigClockSource+0x180>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4b55      	ldr	r3, [pc, #340]	; (80090a4 <HAL_TIM_ConfigClockSource+0x188>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f6c:	d03e      	beq.n	8008fec <HAL_TIM_ConfigClockSource+0xd0>
 8008f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f72:	f200 8087 	bhi.w	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f7a:	f000 8085 	beq.w	8009088 <HAL_TIM_ConfigClockSource+0x16c>
 8008f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f82:	d87f      	bhi.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008f84:	2b70      	cmp	r3, #112	; 0x70
 8008f86:	d01a      	beq.n	8008fbe <HAL_TIM_ConfigClockSource+0xa2>
 8008f88:	2b70      	cmp	r3, #112	; 0x70
 8008f8a:	d87b      	bhi.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008f8c:	2b60      	cmp	r3, #96	; 0x60
 8008f8e:	d050      	beq.n	8009032 <HAL_TIM_ConfigClockSource+0x116>
 8008f90:	2b60      	cmp	r3, #96	; 0x60
 8008f92:	d877      	bhi.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008f94:	2b50      	cmp	r3, #80	; 0x50
 8008f96:	d03c      	beq.n	8009012 <HAL_TIM_ConfigClockSource+0xf6>
 8008f98:	2b50      	cmp	r3, #80	; 0x50
 8008f9a:	d873      	bhi.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008f9c:	2b40      	cmp	r3, #64	; 0x40
 8008f9e:	d058      	beq.n	8009052 <HAL_TIM_ConfigClockSource+0x136>
 8008fa0:	2b40      	cmp	r3, #64	; 0x40
 8008fa2:	d86f      	bhi.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008fa4:	2b30      	cmp	r3, #48	; 0x30
 8008fa6:	d064      	beq.n	8009072 <HAL_TIM_ConfigClockSource+0x156>
 8008fa8:	2b30      	cmp	r3, #48	; 0x30
 8008faa:	d86b      	bhi.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d060      	beq.n	8009072 <HAL_TIM_ConfigClockSource+0x156>
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d867      	bhi.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d05c      	beq.n	8009072 <HAL_TIM_ConfigClockSource+0x156>
 8008fb8:	2b10      	cmp	r3, #16
 8008fba:	d05a      	beq.n	8009072 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008fbc:	e062      	b.n	8009084 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	6899      	ldr	r1, [r3, #8]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f000 fc15 	bl	80097fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	609a      	str	r2, [r3, #8]
      break;
 8008fea:	e04e      	b.n	800908a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	6899      	ldr	r1, [r3, #8]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f000 fbfe 	bl	80097fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800900e:	609a      	str	r2, [r3, #8]
      break;
 8009010:	e03b      	b.n	800908a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	6859      	ldr	r1, [r3, #4]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	461a      	mov	r2, r3
 8009020:	f000 fb72 	bl	8009708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2150      	movs	r1, #80	; 0x50
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fbcb 	bl	80097c6 <TIM_ITRx_SetConfig>
      break;
 8009030:	e02b      	b.n	800908a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6859      	ldr	r1, [r3, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	461a      	mov	r2, r3
 8009040:	f000 fb91 	bl	8009766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2160      	movs	r1, #96	; 0x60
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fbbb 	bl	80097c6 <TIM_ITRx_SetConfig>
      break;
 8009050:	e01b      	b.n	800908a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	6859      	ldr	r1, [r3, #4]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	461a      	mov	r2, r3
 8009060:	f000 fb52 	bl	8009708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2140      	movs	r1, #64	; 0x40
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fbab 	bl	80097c6 <TIM_ITRx_SetConfig>
      break;
 8009070:	e00b      	b.n	800908a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4619      	mov	r1, r3
 800907c:	4610      	mov	r0, r2
 800907e:	f000 fba2 	bl	80097c6 <TIM_ITRx_SetConfig>
        break;
 8009082:	e002      	b.n	800908a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009084:	bf00      	nop
 8009086:	e000      	b.n	800908a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009088:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	fffeff88 	.word	0xfffeff88

080090a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a40      	ldr	r2, [pc, #256]	; (8009220 <TIM_Base_SetConfig+0x114>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d013      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912a:	d00f      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a3d      	ldr	r2, [pc, #244]	; (8009224 <TIM_Base_SetConfig+0x118>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a3c      	ldr	r2, [pc, #240]	; (8009228 <TIM_Base_SetConfig+0x11c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a3b      	ldr	r2, [pc, #236]	; (800922c <TIM_Base_SetConfig+0x120>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a3a      	ldr	r2, [pc, #232]	; (8009230 <TIM_Base_SetConfig+0x124>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d108      	bne.n	800915e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a2f      	ldr	r2, [pc, #188]	; (8009220 <TIM_Base_SetConfig+0x114>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d02b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916c:	d027      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a2c      	ldr	r2, [pc, #176]	; (8009224 <TIM_Base_SetConfig+0x118>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d023      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a2b      	ldr	r2, [pc, #172]	; (8009228 <TIM_Base_SetConfig+0x11c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d01f      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2a      	ldr	r2, [pc, #168]	; (800922c <TIM_Base_SetConfig+0x120>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d01b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a29      	ldr	r2, [pc, #164]	; (8009230 <TIM_Base_SetConfig+0x124>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d017      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a28      	ldr	r2, [pc, #160]	; (8009234 <TIM_Base_SetConfig+0x128>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a27      	ldr	r2, [pc, #156]	; (8009238 <TIM_Base_SetConfig+0x12c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00f      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a26      	ldr	r2, [pc, #152]	; (800923c <TIM_Base_SetConfig+0x130>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a25      	ldr	r2, [pc, #148]	; (8009240 <TIM_Base_SetConfig+0x134>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d007      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a24      	ldr	r2, [pc, #144]	; (8009244 <TIM_Base_SetConfig+0x138>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a23      	ldr	r2, [pc, #140]	; (8009248 <TIM_Base_SetConfig+0x13c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d108      	bne.n	80091d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a0a      	ldr	r2, [pc, #40]	; (8009220 <TIM_Base_SetConfig+0x114>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d003      	beq.n	8009204 <TIM_Base_SetConfig+0xf8>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a0c      	ldr	r2, [pc, #48]	; (8009230 <TIM_Base_SetConfig+0x124>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d103      	bne.n	800920c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	615a      	str	r2, [r3, #20]
}
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40010000 	.word	0x40010000
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	40010400 	.word	0x40010400
 8009234:	40014000 	.word	0x40014000
 8009238:	40014400 	.word	0x40014400
 800923c:	40014800 	.word	0x40014800
 8009240:	40001800 	.word	0x40001800
 8009244:	40001c00 	.word	0x40001c00
 8009248:	40002000 	.word	0x40002000

0800924c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	f023 0201 	bic.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	4b2b      	ldr	r3, [pc, #172]	; (8009324 <TIM_OC1_SetConfig+0xd8>)
 8009278:	4013      	ands	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f023 0302 	bic.w	r3, r3, #2
 8009294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a21      	ldr	r2, [pc, #132]	; (8009328 <TIM_OC1_SetConfig+0xdc>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d003      	beq.n	80092b0 <TIM_OC1_SetConfig+0x64>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a20      	ldr	r2, [pc, #128]	; (800932c <TIM_OC1_SetConfig+0xe0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10c      	bne.n	80092ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f023 0308 	bic.w	r3, r3, #8
 80092b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f023 0304 	bic.w	r3, r3, #4
 80092c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a16      	ldr	r2, [pc, #88]	; (8009328 <TIM_OC1_SetConfig+0xdc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d003      	beq.n	80092da <TIM_OC1_SetConfig+0x8e>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a15      	ldr	r2, [pc, #84]	; (800932c <TIM_OC1_SetConfig+0xe0>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d111      	bne.n	80092fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	621a      	str	r2, [r3, #32]
}
 8009318:	bf00      	nop
 800931a:	371c      	adds	r7, #28
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	fffeff8f 	.word	0xfffeff8f
 8009328:	40010000 	.word	0x40010000
 800932c:	40010400 	.word	0x40010400

08009330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	f023 0210 	bic.w	r2, r3, #16
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4b2e      	ldr	r3, [pc, #184]	; (8009414 <TIM_OC2_SetConfig+0xe4>)
 800935c:	4013      	ands	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	4313      	orrs	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f023 0320 	bic.w	r3, r3, #32
 800937a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	011b      	lsls	r3, r3, #4
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	4313      	orrs	r3, r2
 8009386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a23      	ldr	r2, [pc, #140]	; (8009418 <TIM_OC2_SetConfig+0xe8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_OC2_SetConfig+0x68>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a22      	ldr	r2, [pc, #136]	; (800941c <TIM_OC2_SetConfig+0xec>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d10d      	bne.n	80093b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	011b      	lsls	r3, r3, #4
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <TIM_OC2_SetConfig+0xe8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d003      	beq.n	80093c4 <TIM_OC2_SetConfig+0x94>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a17      	ldr	r2, [pc, #92]	; (800941c <TIM_OC2_SetConfig+0xec>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d113      	bne.n	80093ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4313      	orrs	r3, r2
 80093de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	621a      	str	r2, [r3, #32]
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	feff8fff 	.word	0xfeff8fff
 8009418:	40010000 	.word	0x40010000
 800941c:	40010400 	.word	0x40010400

08009420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4b2d      	ldr	r3, [pc, #180]	; (8009500 <TIM_OC3_SetConfig+0xe0>)
 800944c:	4013      	ands	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0303 	bic.w	r3, r3, #3
 8009456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	021b      	lsls	r3, r3, #8
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	4313      	orrs	r3, r2
 8009474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a22      	ldr	r2, [pc, #136]	; (8009504 <TIM_OC3_SetConfig+0xe4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d003      	beq.n	8009486 <TIM_OC3_SetConfig+0x66>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a21      	ldr	r2, [pc, #132]	; (8009508 <TIM_OC3_SetConfig+0xe8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d10d      	bne.n	80094a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800948c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	021b      	lsls	r3, r3, #8
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	4313      	orrs	r3, r2
 8009498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a17      	ldr	r2, [pc, #92]	; (8009504 <TIM_OC3_SetConfig+0xe4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d003      	beq.n	80094b2 <TIM_OC3_SetConfig+0x92>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a16      	ldr	r2, [pc, #88]	; (8009508 <TIM_OC3_SetConfig+0xe8>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d113      	bne.n	80094da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	fffeff8f 	.word	0xfffeff8f
 8009504:	40010000 	.word	0x40010000
 8009508:	40010400 	.word	0x40010400

0800950c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4b1e      	ldr	r3, [pc, #120]	; (80095b0 <TIM_OC4_SetConfig+0xa4>)
 8009538:	4013      	ands	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	021b      	lsls	r3, r3, #8
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	4313      	orrs	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	031b      	lsls	r3, r3, #12
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	4313      	orrs	r3, r2
 8009562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a13      	ldr	r2, [pc, #76]	; (80095b4 <TIM_OC4_SetConfig+0xa8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d003      	beq.n	8009574 <TIM_OC4_SetConfig+0x68>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a12      	ldr	r2, [pc, #72]	; (80095b8 <TIM_OC4_SetConfig+0xac>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d109      	bne.n	8009588 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800957a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	019b      	lsls	r3, r3, #6
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	4313      	orrs	r3, r2
 8009586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	621a      	str	r2, [r3, #32]
}
 80095a2:	bf00      	nop
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	feff8fff 	.word	0xfeff8fff
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40010400 	.word	0x40010400

080095bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <TIM_OC5_SetConfig+0x98>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	4313      	orrs	r3, r2
 8009608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a12      	ldr	r2, [pc, #72]	; (8009658 <TIM_OC5_SetConfig+0x9c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d003      	beq.n	800961a <TIM_OC5_SetConfig+0x5e>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a11      	ldr	r2, [pc, #68]	; (800965c <TIM_OC5_SetConfig+0xa0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d109      	bne.n	800962e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	621a      	str	r2, [r3, #32]
}
 8009648:	bf00      	nop
 800964a:	371c      	adds	r7, #28
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	fffeff8f 	.word	0xfffeff8f
 8009658:	40010000 	.word	0x40010000
 800965c:	40010400 	.word	0x40010400

08009660 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4b1c      	ldr	r3, [pc, #112]	; (80096fc <TIM_OC6_SetConfig+0x9c>)
 800968c:	4013      	ands	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	051b      	lsls	r3, r3, #20
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a13      	ldr	r2, [pc, #76]	; (8009700 <TIM_OC6_SetConfig+0xa0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_OC6_SetConfig+0x60>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a12      	ldr	r2, [pc, #72]	; (8009704 <TIM_OC6_SetConfig+0xa4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d109      	bne.n	80096d4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	029b      	lsls	r3, r3, #10
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	621a      	str	r2, [r3, #32]
}
 80096ee:	bf00      	nop
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	feff8fff 	.word	0xfeff8fff
 8009700:	40010000 	.word	0x40010000
 8009704:	40010400 	.word	0x40010400

08009708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	f023 0201 	bic.w	r2, r3, #1
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f023 030a 	bic.w	r3, r3, #10
 8009744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4313      	orrs	r3, r2
 800974c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	621a      	str	r2, [r3, #32]
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009766:	b480      	push	{r7}
 8009768:	b087      	sub	sp, #28
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	f023 0210 	bic.w	r2, r3, #16
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	031b      	lsls	r3, r3, #12
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	4313      	orrs	r3, r2
 800979a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	621a      	str	r2, [r3, #32]
}
 80097ba:	bf00      	nop
 80097bc:	371c      	adds	r7, #28
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b085      	sub	sp, #20
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	f043 0307 	orr.w	r3, r3, #7
 80097e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	609a      	str	r2, [r3, #8]
}
 80097f0:	bf00      	nop
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	021a      	lsls	r2, r3, #8
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	431a      	orrs	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4313      	orrs	r3, r2
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	4313      	orrs	r3, r2
 8009828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	609a      	str	r2, [r3, #8]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f003 031f 	and.w	r3, r3, #31
 800984e:	2201      	movs	r2, #1
 8009850:	fa02 f303 	lsl.w	r3, r2, r3
 8009854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a1a      	ldr	r2, [r3, #32]
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	43db      	mvns	r3, r3
 800985e:	401a      	ands	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a1a      	ldr	r2, [r3, #32]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f003 031f 	and.w	r3, r3, #31
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	fa01 f303 	lsl.w	r3, r1, r3
 8009874:	431a      	orrs	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
	...

08009888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800989c:	2302      	movs	r3, #2
 800989e:	e06d      	b.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a30      	ldr	r2, [pc, #192]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d004      	beq.n	80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a2f      	ldr	r2, [pc, #188]	; (800998c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d108      	bne.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a20      	ldr	r2, [pc, #128]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d022      	beq.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009912:	d01d      	beq.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a1d      	ldr	r2, [pc, #116]	; (8009990 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d018      	beq.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a1c      	ldr	r2, [pc, #112]	; (8009994 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d013      	beq.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a1a      	ldr	r2, [pc, #104]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00e      	beq.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a15      	ldr	r2, [pc, #84]	; (800998c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d009      	beq.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a16      	ldr	r2, [pc, #88]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d004      	beq.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a15      	ldr	r2, [pc, #84]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d10c      	bne.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009956:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	4313      	orrs	r3, r2
 8009960:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	40010000 	.word	0x40010000
 800998c:	40010400 	.word	0x40010400
 8009990:	40000400 	.word	0x40000400
 8009994:	40000800 	.word	0x40000800
 8009998:	40000c00 	.word	0x40000c00
 800999c:	40014000 	.word	0x40014000
 80099a0:	40001800 	.word	0x40001800

080099a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e040      	b.n	8009a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fa fda4 	bl	8004550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2224      	movs	r2, #36	; 0x24
 8009a0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f022 0201 	bic.w	r2, r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f990 	bl	8009d44 <UART_SetConfig>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e022      	b.n	8009a74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fbe6 	bl	800a208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc6d 	bl	800a34c <UART_CheckIdleState>
 8009a72:	4603      	mov	r3, r0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	f040 8081 	bne.w	8009b98 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <HAL_UART_Transmit+0x26>
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e079      	b.n	8009b9a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_UART_Transmit+0x38>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e072      	b.n	8009b9a <HAL_UART_Transmit+0x11e>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2221      	movs	r2, #33	; 0x21
 8009ac8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aca:	f7fb fd6f 	bl	80055ac <HAL_GetTick>
 8009ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	88fa      	ldrh	r2, [r7, #6]
 8009ad4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	88fa      	ldrh	r2, [r7, #6]
 8009adc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae8:	d108      	bne.n	8009afc <HAL_UART_Transmit+0x80>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e003      	b.n	8009b04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009b0c:	e02c      	b.n	8009b68 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2200      	movs	r2, #0
 8009b16:	2180      	movs	r1, #128	; 0x80
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 fc60 	bl	800a3de <UART_WaitOnFlagUntilTimeout>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e038      	b.n	8009b9a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10b      	bne.n	8009b46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	3302      	adds	r3, #2
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	e007      	b.n	8009b56 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3301      	adds	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1cc      	bne.n	8009b0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2140      	movs	r1, #64	; 0x40
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 fc2d 	bl	800a3de <UART_WaitOnFlagUntilTimeout>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e005      	b.n	8009b9a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2220      	movs	r2, #32
 8009b92:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	e000      	b.n	8009b9a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009b98:	2302      	movs	r3, #2
  }
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3720      	adds	r7, #32
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b08a      	sub	sp, #40	; 0x28
 8009ba6:	af02      	add	r7, sp, #8
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	603b      	str	r3, [r7, #0]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb6:	2b20      	cmp	r3, #32
 8009bb8:	f040 80be 	bne.w	8009d38 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <HAL_UART_Receive+0x26>
 8009bc2:	88fb      	ldrh	r3, [r7, #6]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e0b6      	b.n	8009d3a <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_UART_Receive+0x38>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e0af      	b.n	8009d3a <HAL_UART_Receive+0x198>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2222      	movs	r2, #34	; 0x22
 8009bee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bf6:	f7fb fcd9 	bl	80055ac <HAL_GetTick>
 8009bfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	88fa      	ldrh	r2, [r7, #6]
 8009c00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c14:	d10e      	bne.n	8009c34 <HAL_UART_Receive+0x92>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d105      	bne.n	8009c2a <HAL_UART_Receive+0x88>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c28:	e02d      	b.n	8009c86 <HAL_UART_Receive+0xe4>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	22ff      	movs	r2, #255	; 0xff
 8009c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c32:	e028      	b.n	8009c86 <HAL_UART_Receive+0xe4>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10d      	bne.n	8009c58 <HAL_UART_Receive+0xb6>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d104      	bne.n	8009c4e <HAL_UART_Receive+0xac>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	22ff      	movs	r2, #255	; 0xff
 8009c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c4c:	e01b      	b.n	8009c86 <HAL_UART_Receive+0xe4>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	227f      	movs	r2, #127	; 0x7f
 8009c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c56:	e016      	b.n	8009c86 <HAL_UART_Receive+0xe4>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c60:	d10d      	bne.n	8009c7e <HAL_UART_Receive+0xdc>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d104      	bne.n	8009c74 <HAL_UART_Receive+0xd2>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	227f      	movs	r2, #127	; 0x7f
 8009c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c72:	e008      	b.n	8009c86 <HAL_UART_Receive+0xe4>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	223f      	movs	r2, #63	; 0x3f
 8009c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c7c:	e003      	b.n	8009c86 <HAL_UART_Receive+0xe4>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c8c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c96:	d108      	bne.n	8009caa <HAL_UART_Receive+0x108>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d104      	bne.n	8009caa <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	61bb      	str	r3, [r7, #24]
 8009ca8:	e003      	b.n	8009cb2 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009cba:	e032      	b.n	8009d22 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2120      	movs	r1, #32
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 fb89 	bl	800a3de <UART_WaitOnFlagUntilTimeout>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e031      	b.n	8009d3a <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10c      	bne.n	8009cf6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	8a7b      	ldrh	r3, [r7, #18]
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	e00c      	b.n	8009d10 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	8a7b      	ldrh	r3, [r7, #18]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	4013      	ands	r3, r2
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1c6      	bne.n	8009cbc <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	e000      	b.n	8009d3a <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8009d38:	2302      	movs	r3, #2
  }
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4ba7      	ldr	r3, [pc, #668]	; (800a00c <UART_SetConfig+0x2c8>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	6979      	ldr	r1, [r7, #20]
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a95      	ldr	r2, [pc, #596]	; (800a010 <UART_SetConfig+0x2cc>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d120      	bne.n	8009e02 <UART_SetConfig+0xbe>
 8009dc0:	4b94      	ldr	r3, [pc, #592]	; (800a014 <UART_SetConfig+0x2d0>)
 8009dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d816      	bhi.n	8009dfc <UART_SetConfig+0xb8>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <UART_SetConfig+0x90>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009de5 	.word	0x08009de5
 8009dd8:	08009df1 	.word	0x08009df1
 8009ddc:	08009deb 	.word	0x08009deb
 8009de0:	08009df7 	.word	0x08009df7
 8009de4:	2301      	movs	r3, #1
 8009de6:	77fb      	strb	r3, [r7, #31]
 8009de8:	e14f      	b.n	800a08a <UART_SetConfig+0x346>
 8009dea:	2302      	movs	r3, #2
 8009dec:	77fb      	strb	r3, [r7, #31]
 8009dee:	e14c      	b.n	800a08a <UART_SetConfig+0x346>
 8009df0:	2304      	movs	r3, #4
 8009df2:	77fb      	strb	r3, [r7, #31]
 8009df4:	e149      	b.n	800a08a <UART_SetConfig+0x346>
 8009df6:	2308      	movs	r3, #8
 8009df8:	77fb      	strb	r3, [r7, #31]
 8009dfa:	e146      	b.n	800a08a <UART_SetConfig+0x346>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	77fb      	strb	r3, [r7, #31]
 8009e00:	e143      	b.n	800a08a <UART_SetConfig+0x346>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a84      	ldr	r2, [pc, #528]	; (800a018 <UART_SetConfig+0x2d4>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d132      	bne.n	8009e72 <UART_SetConfig+0x12e>
 8009e0c:	4b81      	ldr	r3, [pc, #516]	; (800a014 <UART_SetConfig+0x2d0>)
 8009e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e12:	f003 030c 	and.w	r3, r3, #12
 8009e16:	2b0c      	cmp	r3, #12
 8009e18:	d828      	bhi.n	8009e6c <UART_SetConfig+0x128>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <UART_SetConfig+0xdc>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e55 	.word	0x08009e55
 8009e24:	08009e6d 	.word	0x08009e6d
 8009e28:	08009e6d 	.word	0x08009e6d
 8009e2c:	08009e6d 	.word	0x08009e6d
 8009e30:	08009e61 	.word	0x08009e61
 8009e34:	08009e6d 	.word	0x08009e6d
 8009e38:	08009e6d 	.word	0x08009e6d
 8009e3c:	08009e6d 	.word	0x08009e6d
 8009e40:	08009e5b 	.word	0x08009e5b
 8009e44:	08009e6d 	.word	0x08009e6d
 8009e48:	08009e6d 	.word	0x08009e6d
 8009e4c:	08009e6d 	.word	0x08009e6d
 8009e50:	08009e67 	.word	0x08009e67
 8009e54:	2300      	movs	r3, #0
 8009e56:	77fb      	strb	r3, [r7, #31]
 8009e58:	e117      	b.n	800a08a <UART_SetConfig+0x346>
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	77fb      	strb	r3, [r7, #31]
 8009e5e:	e114      	b.n	800a08a <UART_SetConfig+0x346>
 8009e60:	2304      	movs	r3, #4
 8009e62:	77fb      	strb	r3, [r7, #31]
 8009e64:	e111      	b.n	800a08a <UART_SetConfig+0x346>
 8009e66:	2308      	movs	r3, #8
 8009e68:	77fb      	strb	r3, [r7, #31]
 8009e6a:	e10e      	b.n	800a08a <UART_SetConfig+0x346>
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	77fb      	strb	r3, [r7, #31]
 8009e70:	e10b      	b.n	800a08a <UART_SetConfig+0x346>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a69      	ldr	r2, [pc, #420]	; (800a01c <UART_SetConfig+0x2d8>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d120      	bne.n	8009ebe <UART_SetConfig+0x17a>
 8009e7c:	4b65      	ldr	r3, [pc, #404]	; (800a014 <UART_SetConfig+0x2d0>)
 8009e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e86:	2b30      	cmp	r3, #48	; 0x30
 8009e88:	d013      	beq.n	8009eb2 <UART_SetConfig+0x16e>
 8009e8a:	2b30      	cmp	r3, #48	; 0x30
 8009e8c:	d814      	bhi.n	8009eb8 <UART_SetConfig+0x174>
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d009      	beq.n	8009ea6 <UART_SetConfig+0x162>
 8009e92:	2b20      	cmp	r3, #32
 8009e94:	d810      	bhi.n	8009eb8 <UART_SetConfig+0x174>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <UART_SetConfig+0x15c>
 8009e9a:	2b10      	cmp	r3, #16
 8009e9c:	d006      	beq.n	8009eac <UART_SetConfig+0x168>
 8009e9e:	e00b      	b.n	8009eb8 <UART_SetConfig+0x174>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	77fb      	strb	r3, [r7, #31]
 8009ea4:	e0f1      	b.n	800a08a <UART_SetConfig+0x346>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	77fb      	strb	r3, [r7, #31]
 8009eaa:	e0ee      	b.n	800a08a <UART_SetConfig+0x346>
 8009eac:	2304      	movs	r3, #4
 8009eae:	77fb      	strb	r3, [r7, #31]
 8009eb0:	e0eb      	b.n	800a08a <UART_SetConfig+0x346>
 8009eb2:	2308      	movs	r3, #8
 8009eb4:	77fb      	strb	r3, [r7, #31]
 8009eb6:	e0e8      	b.n	800a08a <UART_SetConfig+0x346>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	77fb      	strb	r3, [r7, #31]
 8009ebc:	e0e5      	b.n	800a08a <UART_SetConfig+0x346>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a57      	ldr	r2, [pc, #348]	; (800a020 <UART_SetConfig+0x2dc>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d120      	bne.n	8009f0a <UART_SetConfig+0x1c6>
 8009ec8:	4b52      	ldr	r3, [pc, #328]	; (800a014 <UART_SetConfig+0x2d0>)
 8009eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ece:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8009ed4:	d013      	beq.n	8009efe <UART_SetConfig+0x1ba>
 8009ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8009ed8:	d814      	bhi.n	8009f04 <UART_SetConfig+0x1c0>
 8009eda:	2b80      	cmp	r3, #128	; 0x80
 8009edc:	d009      	beq.n	8009ef2 <UART_SetConfig+0x1ae>
 8009ede:	2b80      	cmp	r3, #128	; 0x80
 8009ee0:	d810      	bhi.n	8009f04 <UART_SetConfig+0x1c0>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <UART_SetConfig+0x1a8>
 8009ee6:	2b40      	cmp	r3, #64	; 0x40
 8009ee8:	d006      	beq.n	8009ef8 <UART_SetConfig+0x1b4>
 8009eea:	e00b      	b.n	8009f04 <UART_SetConfig+0x1c0>
 8009eec:	2300      	movs	r3, #0
 8009eee:	77fb      	strb	r3, [r7, #31]
 8009ef0:	e0cb      	b.n	800a08a <UART_SetConfig+0x346>
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	77fb      	strb	r3, [r7, #31]
 8009ef6:	e0c8      	b.n	800a08a <UART_SetConfig+0x346>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	77fb      	strb	r3, [r7, #31]
 8009efc:	e0c5      	b.n	800a08a <UART_SetConfig+0x346>
 8009efe:	2308      	movs	r3, #8
 8009f00:	77fb      	strb	r3, [r7, #31]
 8009f02:	e0c2      	b.n	800a08a <UART_SetConfig+0x346>
 8009f04:	2310      	movs	r3, #16
 8009f06:	77fb      	strb	r3, [r7, #31]
 8009f08:	e0bf      	b.n	800a08a <UART_SetConfig+0x346>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a45      	ldr	r2, [pc, #276]	; (800a024 <UART_SetConfig+0x2e0>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d125      	bne.n	8009f60 <UART_SetConfig+0x21c>
 8009f14:	4b3f      	ldr	r3, [pc, #252]	; (800a014 <UART_SetConfig+0x2d0>)
 8009f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f22:	d017      	beq.n	8009f54 <UART_SetConfig+0x210>
 8009f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f28:	d817      	bhi.n	8009f5a <UART_SetConfig+0x216>
 8009f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f2e:	d00b      	beq.n	8009f48 <UART_SetConfig+0x204>
 8009f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f34:	d811      	bhi.n	8009f5a <UART_SetConfig+0x216>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <UART_SetConfig+0x1fe>
 8009f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3e:	d006      	beq.n	8009f4e <UART_SetConfig+0x20a>
 8009f40:	e00b      	b.n	8009f5a <UART_SetConfig+0x216>
 8009f42:	2300      	movs	r3, #0
 8009f44:	77fb      	strb	r3, [r7, #31]
 8009f46:	e0a0      	b.n	800a08a <UART_SetConfig+0x346>
 8009f48:	2302      	movs	r3, #2
 8009f4a:	77fb      	strb	r3, [r7, #31]
 8009f4c:	e09d      	b.n	800a08a <UART_SetConfig+0x346>
 8009f4e:	2304      	movs	r3, #4
 8009f50:	77fb      	strb	r3, [r7, #31]
 8009f52:	e09a      	b.n	800a08a <UART_SetConfig+0x346>
 8009f54:	2308      	movs	r3, #8
 8009f56:	77fb      	strb	r3, [r7, #31]
 8009f58:	e097      	b.n	800a08a <UART_SetConfig+0x346>
 8009f5a:	2310      	movs	r3, #16
 8009f5c:	77fb      	strb	r3, [r7, #31]
 8009f5e:	e094      	b.n	800a08a <UART_SetConfig+0x346>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a30      	ldr	r2, [pc, #192]	; (800a028 <UART_SetConfig+0x2e4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d125      	bne.n	8009fb6 <UART_SetConfig+0x272>
 8009f6a:	4b2a      	ldr	r3, [pc, #168]	; (800a014 <UART_SetConfig+0x2d0>)
 8009f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f78:	d017      	beq.n	8009faa <UART_SetConfig+0x266>
 8009f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f7e:	d817      	bhi.n	8009fb0 <UART_SetConfig+0x26c>
 8009f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f84:	d00b      	beq.n	8009f9e <UART_SetConfig+0x25a>
 8009f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f8a:	d811      	bhi.n	8009fb0 <UART_SetConfig+0x26c>
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <UART_SetConfig+0x254>
 8009f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f94:	d006      	beq.n	8009fa4 <UART_SetConfig+0x260>
 8009f96:	e00b      	b.n	8009fb0 <UART_SetConfig+0x26c>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	e075      	b.n	800a08a <UART_SetConfig+0x346>
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	77fb      	strb	r3, [r7, #31]
 8009fa2:	e072      	b.n	800a08a <UART_SetConfig+0x346>
 8009fa4:	2304      	movs	r3, #4
 8009fa6:	77fb      	strb	r3, [r7, #31]
 8009fa8:	e06f      	b.n	800a08a <UART_SetConfig+0x346>
 8009faa:	2308      	movs	r3, #8
 8009fac:	77fb      	strb	r3, [r7, #31]
 8009fae:	e06c      	b.n	800a08a <UART_SetConfig+0x346>
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	77fb      	strb	r3, [r7, #31]
 8009fb4:	e069      	b.n	800a08a <UART_SetConfig+0x346>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a1c      	ldr	r2, [pc, #112]	; (800a02c <UART_SetConfig+0x2e8>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d137      	bne.n	800a030 <UART_SetConfig+0x2ec>
 8009fc0:	4b14      	ldr	r3, [pc, #80]	; (800a014 <UART_SetConfig+0x2d0>)
 8009fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009fca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fce:	d017      	beq.n	800a000 <UART_SetConfig+0x2bc>
 8009fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fd4:	d817      	bhi.n	800a006 <UART_SetConfig+0x2c2>
 8009fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fda:	d00b      	beq.n	8009ff4 <UART_SetConfig+0x2b0>
 8009fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe0:	d811      	bhi.n	800a006 <UART_SetConfig+0x2c2>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <UART_SetConfig+0x2aa>
 8009fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fea:	d006      	beq.n	8009ffa <UART_SetConfig+0x2b6>
 8009fec:	e00b      	b.n	800a006 <UART_SetConfig+0x2c2>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	77fb      	strb	r3, [r7, #31]
 8009ff2:	e04a      	b.n	800a08a <UART_SetConfig+0x346>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e047      	b.n	800a08a <UART_SetConfig+0x346>
 8009ffa:	2304      	movs	r3, #4
 8009ffc:	77fb      	strb	r3, [r7, #31]
 8009ffe:	e044      	b.n	800a08a <UART_SetConfig+0x346>
 800a000:	2308      	movs	r3, #8
 800a002:	77fb      	strb	r3, [r7, #31]
 800a004:	e041      	b.n	800a08a <UART_SetConfig+0x346>
 800a006:	2310      	movs	r3, #16
 800a008:	77fb      	strb	r3, [r7, #31]
 800a00a:	e03e      	b.n	800a08a <UART_SetConfig+0x346>
 800a00c:	efff69f3 	.word	0xefff69f3
 800a010:	40011000 	.word	0x40011000
 800a014:	40023800 	.word	0x40023800
 800a018:	40004400 	.word	0x40004400
 800a01c:	40004800 	.word	0x40004800
 800a020:	40004c00 	.word	0x40004c00
 800a024:	40005000 	.word	0x40005000
 800a028:	40011400 	.word	0x40011400
 800a02c:	40007800 	.word	0x40007800
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a71      	ldr	r2, [pc, #452]	; (800a1fc <UART_SetConfig+0x4b8>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d125      	bne.n	800a086 <UART_SetConfig+0x342>
 800a03a:	4b71      	ldr	r3, [pc, #452]	; (800a200 <UART_SetConfig+0x4bc>)
 800a03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a044:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a048:	d017      	beq.n	800a07a <UART_SetConfig+0x336>
 800a04a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a04e:	d817      	bhi.n	800a080 <UART_SetConfig+0x33c>
 800a050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a054:	d00b      	beq.n	800a06e <UART_SetConfig+0x32a>
 800a056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05a:	d811      	bhi.n	800a080 <UART_SetConfig+0x33c>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <UART_SetConfig+0x324>
 800a060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a064:	d006      	beq.n	800a074 <UART_SetConfig+0x330>
 800a066:	e00b      	b.n	800a080 <UART_SetConfig+0x33c>
 800a068:	2300      	movs	r3, #0
 800a06a:	77fb      	strb	r3, [r7, #31]
 800a06c:	e00d      	b.n	800a08a <UART_SetConfig+0x346>
 800a06e:	2302      	movs	r3, #2
 800a070:	77fb      	strb	r3, [r7, #31]
 800a072:	e00a      	b.n	800a08a <UART_SetConfig+0x346>
 800a074:	2304      	movs	r3, #4
 800a076:	77fb      	strb	r3, [r7, #31]
 800a078:	e007      	b.n	800a08a <UART_SetConfig+0x346>
 800a07a:	2308      	movs	r3, #8
 800a07c:	77fb      	strb	r3, [r7, #31]
 800a07e:	e004      	b.n	800a08a <UART_SetConfig+0x346>
 800a080:	2310      	movs	r3, #16
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e001      	b.n	800a08a <UART_SetConfig+0x346>
 800a086:	2310      	movs	r3, #16
 800a088:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a092:	d15b      	bne.n	800a14c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a094:	7ffb      	ldrb	r3, [r7, #31]
 800a096:	2b08      	cmp	r3, #8
 800a098:	d827      	bhi.n	800a0ea <UART_SetConfig+0x3a6>
 800a09a:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <UART_SetConfig+0x35c>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0cd 	.word	0x0800a0cd
 800a0a8:	0800a0d5 	.word	0x0800a0d5
 800a0ac:	0800a0eb 	.word	0x0800a0eb
 800a0b0:	0800a0db 	.word	0x0800a0db
 800a0b4:	0800a0eb 	.word	0x0800a0eb
 800a0b8:	0800a0eb 	.word	0x0800a0eb
 800a0bc:	0800a0eb 	.word	0x0800a0eb
 800a0c0:	0800a0e3 	.word	0x0800a0e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0c4:	f7fd fa5a 	bl	800757c <HAL_RCC_GetPCLK1Freq>
 800a0c8:	61b8      	str	r0, [r7, #24]
        break;
 800a0ca:	e013      	b.n	800a0f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0cc:	f7fd fa6a 	bl	80075a4 <HAL_RCC_GetPCLK2Freq>
 800a0d0:	61b8      	str	r0, [r7, #24]
        break;
 800a0d2:	e00f      	b.n	800a0f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d4:	4b4b      	ldr	r3, [pc, #300]	; (800a204 <UART_SetConfig+0x4c0>)
 800a0d6:	61bb      	str	r3, [r7, #24]
        break;
 800a0d8:	e00c      	b.n	800a0f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0da:	f7fd f961 	bl	80073a0 <HAL_RCC_GetSysClockFreq>
 800a0de:	61b8      	str	r0, [r7, #24]
        break;
 800a0e0:	e008      	b.n	800a0f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e6:	61bb      	str	r3, [r7, #24]
        break;
 800a0e8:	e004      	b.n	800a0f4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	77bb      	strb	r3, [r7, #30]
        break;
 800a0f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d074      	beq.n	800a1e4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	005a      	lsls	r2, r3, #1
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	085b      	lsrs	r3, r3, #1
 800a104:	441a      	add	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a10e:	b29b      	uxth	r3, r3
 800a110:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b0f      	cmp	r3, #15
 800a116:	d916      	bls.n	800a146 <UART_SetConfig+0x402>
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11e:	d212      	bcs.n	800a146 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	b29b      	uxth	r3, r3
 800a124:	f023 030f 	bic.w	r3, r3, #15
 800a128:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	085b      	lsrs	r3, r3, #1
 800a12e:	b29b      	uxth	r3, r3
 800a130:	f003 0307 	and.w	r3, r3, #7
 800a134:	b29a      	uxth	r2, r3
 800a136:	89fb      	ldrh	r3, [r7, #14]
 800a138:	4313      	orrs	r3, r2
 800a13a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	89fa      	ldrh	r2, [r7, #14]
 800a142:	60da      	str	r2, [r3, #12]
 800a144:	e04e      	b.n	800a1e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	77bb      	strb	r3, [r7, #30]
 800a14a:	e04b      	b.n	800a1e4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a14c:	7ffb      	ldrb	r3, [r7, #31]
 800a14e:	2b08      	cmp	r3, #8
 800a150:	d827      	bhi.n	800a1a2 <UART_SetConfig+0x45e>
 800a152:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <UART_SetConfig+0x414>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a17d 	.word	0x0800a17d
 800a15c:	0800a185 	.word	0x0800a185
 800a160:	0800a18d 	.word	0x0800a18d
 800a164:	0800a1a3 	.word	0x0800a1a3
 800a168:	0800a193 	.word	0x0800a193
 800a16c:	0800a1a3 	.word	0x0800a1a3
 800a170:	0800a1a3 	.word	0x0800a1a3
 800a174:	0800a1a3 	.word	0x0800a1a3
 800a178:	0800a19b 	.word	0x0800a19b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a17c:	f7fd f9fe 	bl	800757c <HAL_RCC_GetPCLK1Freq>
 800a180:	61b8      	str	r0, [r7, #24]
        break;
 800a182:	e013      	b.n	800a1ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a184:	f7fd fa0e 	bl	80075a4 <HAL_RCC_GetPCLK2Freq>
 800a188:	61b8      	str	r0, [r7, #24]
        break;
 800a18a:	e00f      	b.n	800a1ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a18c:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <UART_SetConfig+0x4c0>)
 800a18e:	61bb      	str	r3, [r7, #24]
        break;
 800a190:	e00c      	b.n	800a1ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a192:	f7fd f905 	bl	80073a0 <HAL_RCC_GetSysClockFreq>
 800a196:	61b8      	str	r0, [r7, #24]
        break;
 800a198:	e008      	b.n	800a1ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a19a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a19e:	61bb      	str	r3, [r7, #24]
        break;
 800a1a0:	e004      	b.n	800a1ac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	77bb      	strb	r3, [r7, #30]
        break;
 800a1aa:	bf00      	nop
    }

    if (pclk != 0U)
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d018      	beq.n	800a1e4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	085a      	lsrs	r2, r3, #1
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	441a      	add	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b0f      	cmp	r3, #15
 800a1cc:	d908      	bls.n	800a1e0 <UART_SetConfig+0x49c>
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d4:	d204      	bcs.n	800a1e0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	60da      	str	r2, [r3, #12]
 800a1de:	e001      	b.n	800a1e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a1f0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	40007c00 	.word	0x40007c00
 800a200:	40023800 	.word	0x40023800
 800a204:	00f42400 	.word	0x00f42400

0800a208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00a      	beq.n	800a232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	f003 0304 	and.w	r3, r3, #4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00a      	beq.n	800a276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	f003 0308 	and.w	r3, r3, #8
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00a      	beq.n	800a298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	f003 0310 	and.w	r3, r3, #16
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00a      	beq.n	800a2ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	f003 0320 	and.w	r3, r3, #32
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00a      	beq.n	800a2dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01a      	beq.n	800a31e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	430a      	orrs	r2, r1
 800a2fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a306:	d10a      	bne.n	800a31e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	430a      	orrs	r2, r1
 800a33e:	605a      	str	r2, [r3, #4]
  }
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af02      	add	r7, sp, #8
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a35c:	f7fb f926 	bl	80055ac <HAL_GetTick>
 800a360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0308 	and.w	r3, r3, #8
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d10e      	bne.n	800a38e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f82d 	bl	800a3de <UART_WaitOnFlagUntilTimeout>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e023      	b.n	800a3d6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d10e      	bne.n	800a3ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a39c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f817 	bl	800a3de <UART_WaitOnFlagUntilTimeout>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e00d      	b.n	800a3d6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	603b      	str	r3, [r7, #0]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ee:	e05e      	b.n	800a4ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f6:	d05a      	beq.n	800a4ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3f8:	f7fb f8d8 	bl	80055ac <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	429a      	cmp	r2, r3
 800a406:	d302      	bcc.n	800a40e <UART_WaitOnFlagUntilTimeout+0x30>
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d11b      	bne.n	800a446 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a41c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f022 0201 	bic.w	r2, r2, #1
 800a42c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2220      	movs	r2, #32
 800a432:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2220      	movs	r2, #32
 800a438:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e043      	b.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b00      	cmp	r3, #0
 800a452:	d02c      	beq.n	800a4ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a45e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a462:	d124      	bne.n	800a4ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a46c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a47c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f022 0201 	bic.w	r2, r2, #1
 800a48c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2220      	movs	r2, #32
 800a492:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2220      	movs	r2, #32
 800a49e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e00f      	b.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69da      	ldr	r2, [r3, #28]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	bf0c      	ite	eq
 800a4be:	2301      	moveq	r3, #1
 800a4c0:	2300      	movne	r3, #0
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d091      	beq.n	800a3f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <__errno>:
 800a4d8:	4b01      	ldr	r3, [pc, #4]	; (800a4e0 <__errno+0x8>)
 800a4da:	6818      	ldr	r0, [r3, #0]
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	200000dc 	.word	0x200000dc

0800a4e4 <__libc_init_array>:
 800a4e4:	b570      	push	{r4, r5, r6, lr}
 800a4e6:	4d0d      	ldr	r5, [pc, #52]	; (800a51c <__libc_init_array+0x38>)
 800a4e8:	4c0d      	ldr	r4, [pc, #52]	; (800a520 <__libc_init_array+0x3c>)
 800a4ea:	1b64      	subs	r4, r4, r5
 800a4ec:	10a4      	asrs	r4, r4, #2
 800a4ee:	2600      	movs	r6, #0
 800a4f0:	42a6      	cmp	r6, r4
 800a4f2:	d109      	bne.n	800a508 <__libc_init_array+0x24>
 800a4f4:	4d0b      	ldr	r5, [pc, #44]	; (800a524 <__libc_init_array+0x40>)
 800a4f6:	4c0c      	ldr	r4, [pc, #48]	; (800a528 <__libc_init_array+0x44>)
 800a4f8:	f002 fe26 	bl	800d148 <_init>
 800a4fc:	1b64      	subs	r4, r4, r5
 800a4fe:	10a4      	asrs	r4, r4, #2
 800a500:	2600      	movs	r6, #0
 800a502:	42a6      	cmp	r6, r4
 800a504:	d105      	bne.n	800a512 <__libc_init_array+0x2e>
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	f855 3b04 	ldr.w	r3, [r5], #4
 800a50c:	4798      	blx	r3
 800a50e:	3601      	adds	r6, #1
 800a510:	e7ee      	b.n	800a4f0 <__libc_init_array+0xc>
 800a512:	f855 3b04 	ldr.w	r3, [r5], #4
 800a516:	4798      	blx	r3
 800a518:	3601      	adds	r6, #1
 800a51a:	e7f2      	b.n	800a502 <__libc_init_array+0x1e>
 800a51c:	0800d924 	.word	0x0800d924
 800a520:	0800d924 	.word	0x0800d924
 800a524:	0800d924 	.word	0x0800d924
 800a528:	0800d928 	.word	0x0800d928

0800a52c <memset>:
 800a52c:	4402      	add	r2, r0
 800a52e:	4603      	mov	r3, r0
 800a530:	4293      	cmp	r3, r2
 800a532:	d100      	bne.n	800a536 <memset+0xa>
 800a534:	4770      	bx	lr
 800a536:	f803 1b01 	strb.w	r1, [r3], #1
 800a53a:	e7f9      	b.n	800a530 <memset+0x4>

0800a53c <__cvt>:
 800a53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a53e:	ed2d 8b02 	vpush	{d8}
 800a542:	eeb0 8b40 	vmov.f64	d8, d0
 800a546:	b085      	sub	sp, #20
 800a548:	4617      	mov	r7, r2
 800a54a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a54c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a54e:	ee18 2a90 	vmov	r2, s17
 800a552:	f025 0520 	bic.w	r5, r5, #32
 800a556:	2a00      	cmp	r2, #0
 800a558:	bfb6      	itet	lt
 800a55a:	222d      	movlt	r2, #45	; 0x2d
 800a55c:	2200      	movge	r2, #0
 800a55e:	eeb1 8b40 	vneglt.f64	d8, d0
 800a562:	2d46      	cmp	r5, #70	; 0x46
 800a564:	460c      	mov	r4, r1
 800a566:	701a      	strb	r2, [r3, #0]
 800a568:	d004      	beq.n	800a574 <__cvt+0x38>
 800a56a:	2d45      	cmp	r5, #69	; 0x45
 800a56c:	d100      	bne.n	800a570 <__cvt+0x34>
 800a56e:	3401      	adds	r4, #1
 800a570:	2102      	movs	r1, #2
 800a572:	e000      	b.n	800a576 <__cvt+0x3a>
 800a574:	2103      	movs	r1, #3
 800a576:	ab03      	add	r3, sp, #12
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	ab02      	add	r3, sp, #8
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	4622      	mov	r2, r4
 800a580:	4633      	mov	r3, r6
 800a582:	eeb0 0b48 	vmov.f64	d0, d8
 800a586:	f000 fccb 	bl	800af20 <_dtoa_r>
 800a58a:	2d47      	cmp	r5, #71	; 0x47
 800a58c:	d109      	bne.n	800a5a2 <__cvt+0x66>
 800a58e:	07fb      	lsls	r3, r7, #31
 800a590:	d407      	bmi.n	800a5a2 <__cvt+0x66>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a596:	1a1b      	subs	r3, r3, r0
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	b005      	add	sp, #20
 800a59c:	ecbd 8b02 	vpop	{d8}
 800a5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5a2:	2d46      	cmp	r5, #70	; 0x46
 800a5a4:	eb00 0204 	add.w	r2, r0, r4
 800a5a8:	d10c      	bne.n	800a5c4 <__cvt+0x88>
 800a5aa:	7803      	ldrb	r3, [r0, #0]
 800a5ac:	2b30      	cmp	r3, #48	; 0x30
 800a5ae:	d107      	bne.n	800a5c0 <__cvt+0x84>
 800a5b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b8:	bf1c      	itt	ne
 800a5ba:	f1c4 0401 	rsbne	r4, r4, #1
 800a5be:	6034      	strne	r4, [r6, #0]
 800a5c0:	6833      	ldr	r3, [r6, #0]
 800a5c2:	441a      	add	r2, r3
 800a5c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5cc:	bf08      	it	eq
 800a5ce:	9203      	streq	r2, [sp, #12]
 800a5d0:	2130      	movs	r1, #48	; 0x30
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d2dc      	bcs.n	800a592 <__cvt+0x56>
 800a5d8:	1c5c      	adds	r4, r3, #1
 800a5da:	9403      	str	r4, [sp, #12]
 800a5dc:	7019      	strb	r1, [r3, #0]
 800a5de:	e7f8      	b.n	800a5d2 <__cvt+0x96>

0800a5e0 <__exponent>:
 800a5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	bfb8      	it	lt
 800a5e8:	4249      	neglt	r1, r1
 800a5ea:	f803 2b02 	strb.w	r2, [r3], #2
 800a5ee:	bfb4      	ite	lt
 800a5f0:	222d      	movlt	r2, #45	; 0x2d
 800a5f2:	222b      	movge	r2, #43	; 0x2b
 800a5f4:	2909      	cmp	r1, #9
 800a5f6:	7042      	strb	r2, [r0, #1]
 800a5f8:	dd2a      	ble.n	800a650 <__exponent+0x70>
 800a5fa:	f10d 0407 	add.w	r4, sp, #7
 800a5fe:	46a4      	mov	ip, r4
 800a600:	270a      	movs	r7, #10
 800a602:	46a6      	mov	lr, r4
 800a604:	460a      	mov	r2, r1
 800a606:	fb91 f6f7 	sdiv	r6, r1, r7
 800a60a:	fb07 1516 	mls	r5, r7, r6, r1
 800a60e:	3530      	adds	r5, #48	; 0x30
 800a610:	2a63      	cmp	r2, #99	; 0x63
 800a612:	f104 34ff 	add.w	r4, r4, #4294967295
 800a616:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a61a:	4631      	mov	r1, r6
 800a61c:	dcf1      	bgt.n	800a602 <__exponent+0x22>
 800a61e:	3130      	adds	r1, #48	; 0x30
 800a620:	f1ae 0502 	sub.w	r5, lr, #2
 800a624:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a628:	1c44      	adds	r4, r0, #1
 800a62a:	4629      	mov	r1, r5
 800a62c:	4561      	cmp	r1, ip
 800a62e:	d30a      	bcc.n	800a646 <__exponent+0x66>
 800a630:	f10d 0209 	add.w	r2, sp, #9
 800a634:	eba2 020e 	sub.w	r2, r2, lr
 800a638:	4565      	cmp	r5, ip
 800a63a:	bf88      	it	hi
 800a63c:	2200      	movhi	r2, #0
 800a63e:	4413      	add	r3, r2
 800a640:	1a18      	subs	r0, r3, r0
 800a642:	b003      	add	sp, #12
 800a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a64a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a64e:	e7ed      	b.n	800a62c <__exponent+0x4c>
 800a650:	2330      	movs	r3, #48	; 0x30
 800a652:	3130      	adds	r1, #48	; 0x30
 800a654:	7083      	strb	r3, [r0, #2]
 800a656:	70c1      	strb	r1, [r0, #3]
 800a658:	1d03      	adds	r3, r0, #4
 800a65a:	e7f1      	b.n	800a640 <__exponent+0x60>
 800a65c:	0000      	movs	r0, r0
	...

0800a660 <_printf_float>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	b08b      	sub	sp, #44	; 0x2c
 800a666:	460c      	mov	r4, r1
 800a668:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a66c:	4616      	mov	r6, r2
 800a66e:	461f      	mov	r7, r3
 800a670:	4605      	mov	r5, r0
 800a672:	f001 f9d7 	bl	800ba24 <_localeconv_r>
 800a676:	f8d0 b000 	ldr.w	fp, [r0]
 800a67a:	4658      	mov	r0, fp
 800a67c:	f7f5 fde0 	bl	8000240 <strlen>
 800a680:	2300      	movs	r3, #0
 800a682:	9308      	str	r3, [sp, #32]
 800a684:	f8d8 3000 	ldr.w	r3, [r8]
 800a688:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a68c:	6822      	ldr	r2, [r4, #0]
 800a68e:	3307      	adds	r3, #7
 800a690:	f023 0307 	bic.w	r3, r3, #7
 800a694:	f103 0108 	add.w	r1, r3, #8
 800a698:	f8c8 1000 	str.w	r1, [r8]
 800a69c:	4682      	mov	sl, r0
 800a69e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a6a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a908 <_printf_float+0x2a8>
 800a6aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a6ae:	eeb0 6bc0 	vabs.f64	d6, d0
 800a6b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800a6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ba:	dd24      	ble.n	800a706 <_printf_float+0xa6>
 800a6bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c4:	d502      	bpl.n	800a6cc <_printf_float+0x6c>
 800a6c6:	232d      	movs	r3, #45	; 0x2d
 800a6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6cc:	4b90      	ldr	r3, [pc, #576]	; (800a910 <_printf_float+0x2b0>)
 800a6ce:	4891      	ldr	r0, [pc, #580]	; (800a914 <_printf_float+0x2b4>)
 800a6d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a6d4:	bf94      	ite	ls
 800a6d6:	4698      	movls	r8, r3
 800a6d8:	4680      	movhi	r8, r0
 800a6da:	2303      	movs	r3, #3
 800a6dc:	6123      	str	r3, [r4, #16]
 800a6de:	f022 0204 	bic.w	r2, r2, #4
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	9700      	str	r7, [sp, #0]
 800a6ea:	4633      	mov	r3, r6
 800a6ec:	aa09      	add	r2, sp, #36	; 0x24
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 f9d3 	bl	800aa9c <_printf_common>
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	f040 808a 	bne.w	800a810 <_printf_float+0x1b0>
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	b00b      	add	sp, #44	; 0x2c
 800a702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a706:	eeb4 0b40 	vcmp.f64	d0, d0
 800a70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70e:	d709      	bvc.n	800a724 <_printf_float+0xc4>
 800a710:	ee10 3a90 	vmov	r3, s1
 800a714:	2b00      	cmp	r3, #0
 800a716:	bfbc      	itt	lt
 800a718:	232d      	movlt	r3, #45	; 0x2d
 800a71a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a71e:	487e      	ldr	r0, [pc, #504]	; (800a918 <_printf_float+0x2b8>)
 800a720:	4b7e      	ldr	r3, [pc, #504]	; (800a91c <_printf_float+0x2bc>)
 800a722:	e7d5      	b.n	800a6d0 <_printf_float+0x70>
 800a724:	6863      	ldr	r3, [r4, #4]
 800a726:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a72a:	9104      	str	r1, [sp, #16]
 800a72c:	1c59      	adds	r1, r3, #1
 800a72e:	d13c      	bne.n	800a7aa <_printf_float+0x14a>
 800a730:	2306      	movs	r3, #6
 800a732:	6063      	str	r3, [r4, #4]
 800a734:	2300      	movs	r3, #0
 800a736:	9303      	str	r3, [sp, #12]
 800a738:	ab08      	add	r3, sp, #32
 800a73a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a73e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a742:	ab07      	add	r3, sp, #28
 800a744:	6861      	ldr	r1, [r4, #4]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	6022      	str	r2, [r4, #0]
 800a74a:	f10d 031b 	add.w	r3, sp, #27
 800a74e:	4628      	mov	r0, r5
 800a750:	f7ff fef4 	bl	800a53c <__cvt>
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	9907      	ldr	r1, [sp, #28]
 800a758:	2b47      	cmp	r3, #71	; 0x47
 800a75a:	4680      	mov	r8, r0
 800a75c:	d108      	bne.n	800a770 <_printf_float+0x110>
 800a75e:	1cc8      	adds	r0, r1, #3
 800a760:	db02      	blt.n	800a768 <_printf_float+0x108>
 800a762:	6863      	ldr	r3, [r4, #4]
 800a764:	4299      	cmp	r1, r3
 800a766:	dd41      	ble.n	800a7ec <_printf_float+0x18c>
 800a768:	f1a9 0902 	sub.w	r9, r9, #2
 800a76c:	fa5f f989 	uxtb.w	r9, r9
 800a770:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a774:	d820      	bhi.n	800a7b8 <_printf_float+0x158>
 800a776:	3901      	subs	r1, #1
 800a778:	464a      	mov	r2, r9
 800a77a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a77e:	9107      	str	r1, [sp, #28]
 800a780:	f7ff ff2e 	bl	800a5e0 <__exponent>
 800a784:	9a08      	ldr	r2, [sp, #32]
 800a786:	9004      	str	r0, [sp, #16]
 800a788:	1813      	adds	r3, r2, r0
 800a78a:	2a01      	cmp	r2, #1
 800a78c:	6123      	str	r3, [r4, #16]
 800a78e:	dc02      	bgt.n	800a796 <_printf_float+0x136>
 800a790:	6822      	ldr	r2, [r4, #0]
 800a792:	07d2      	lsls	r2, r2, #31
 800a794:	d501      	bpl.n	800a79a <_printf_float+0x13a>
 800a796:	3301      	adds	r3, #1
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0a2      	beq.n	800a6e8 <_printf_float+0x88>
 800a7a2:	232d      	movs	r3, #45	; 0x2d
 800a7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a8:	e79e      	b.n	800a6e8 <_printf_float+0x88>
 800a7aa:	9904      	ldr	r1, [sp, #16]
 800a7ac:	2947      	cmp	r1, #71	; 0x47
 800a7ae:	d1c1      	bne.n	800a734 <_printf_float+0xd4>
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1bf      	bne.n	800a734 <_printf_float+0xd4>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e7bc      	b.n	800a732 <_printf_float+0xd2>
 800a7b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a7bc:	d118      	bne.n	800a7f0 <_printf_float+0x190>
 800a7be:	2900      	cmp	r1, #0
 800a7c0:	6863      	ldr	r3, [r4, #4]
 800a7c2:	dd0b      	ble.n	800a7dc <_printf_float+0x17c>
 800a7c4:	6121      	str	r1, [r4, #16]
 800a7c6:	b913      	cbnz	r3, 800a7ce <_printf_float+0x16e>
 800a7c8:	6822      	ldr	r2, [r4, #0]
 800a7ca:	07d0      	lsls	r0, r2, #31
 800a7cc:	d502      	bpl.n	800a7d4 <_printf_float+0x174>
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	440b      	add	r3, r1
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7d8:	9304      	str	r3, [sp, #16]
 800a7da:	e7de      	b.n	800a79a <_printf_float+0x13a>
 800a7dc:	b913      	cbnz	r3, 800a7e4 <_printf_float+0x184>
 800a7de:	6822      	ldr	r2, [r4, #0]
 800a7e0:	07d2      	lsls	r2, r2, #31
 800a7e2:	d501      	bpl.n	800a7e8 <_printf_float+0x188>
 800a7e4:	3302      	adds	r3, #2
 800a7e6:	e7f4      	b.n	800a7d2 <_printf_float+0x172>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7f2      	b.n	800a7d2 <_printf_float+0x172>
 800a7ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a7f0:	9b08      	ldr	r3, [sp, #32]
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	db05      	blt.n	800a802 <_printf_float+0x1a2>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	6121      	str	r1, [r4, #16]
 800a7fa:	07d8      	lsls	r0, r3, #31
 800a7fc:	d5ea      	bpl.n	800a7d4 <_printf_float+0x174>
 800a7fe:	1c4b      	adds	r3, r1, #1
 800a800:	e7e7      	b.n	800a7d2 <_printf_float+0x172>
 800a802:	2900      	cmp	r1, #0
 800a804:	bfd4      	ite	le
 800a806:	f1c1 0202 	rsble	r2, r1, #2
 800a80a:	2201      	movgt	r2, #1
 800a80c:	4413      	add	r3, r2
 800a80e:	e7e0      	b.n	800a7d2 <_printf_float+0x172>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	055a      	lsls	r2, r3, #21
 800a814:	d407      	bmi.n	800a826 <_printf_float+0x1c6>
 800a816:	6923      	ldr	r3, [r4, #16]
 800a818:	4642      	mov	r2, r8
 800a81a:	4631      	mov	r1, r6
 800a81c:	4628      	mov	r0, r5
 800a81e:	47b8      	blx	r7
 800a820:	3001      	adds	r0, #1
 800a822:	d12a      	bne.n	800a87a <_printf_float+0x21a>
 800a824:	e76a      	b.n	800a6fc <_printf_float+0x9c>
 800a826:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a82a:	f240 80e2 	bls.w	800a9f2 <_printf_float+0x392>
 800a82e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a832:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a83a:	d133      	bne.n	800a8a4 <_printf_float+0x244>
 800a83c:	4a38      	ldr	r2, [pc, #224]	; (800a920 <_printf_float+0x2c0>)
 800a83e:	2301      	movs	r3, #1
 800a840:	4631      	mov	r1, r6
 800a842:	4628      	mov	r0, r5
 800a844:	47b8      	blx	r7
 800a846:	3001      	adds	r0, #1
 800a848:	f43f af58 	beq.w	800a6fc <_printf_float+0x9c>
 800a84c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a850:	429a      	cmp	r2, r3
 800a852:	db02      	blt.n	800a85a <_printf_float+0x1fa>
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	07d8      	lsls	r0, r3, #31
 800a858:	d50f      	bpl.n	800a87a <_printf_float+0x21a>
 800a85a:	4653      	mov	r3, sl
 800a85c:	465a      	mov	r2, fp
 800a85e:	4631      	mov	r1, r6
 800a860:	4628      	mov	r0, r5
 800a862:	47b8      	blx	r7
 800a864:	3001      	adds	r0, #1
 800a866:	f43f af49 	beq.w	800a6fc <_printf_float+0x9c>
 800a86a:	f04f 0800 	mov.w	r8, #0
 800a86e:	f104 091a 	add.w	r9, r4, #26
 800a872:	9b08      	ldr	r3, [sp, #32]
 800a874:	3b01      	subs	r3, #1
 800a876:	4543      	cmp	r3, r8
 800a878:	dc09      	bgt.n	800a88e <_printf_float+0x22e>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	079b      	lsls	r3, r3, #30
 800a87e:	f100 8108 	bmi.w	800aa92 <_printf_float+0x432>
 800a882:	68e0      	ldr	r0, [r4, #12]
 800a884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a886:	4298      	cmp	r0, r3
 800a888:	bfb8      	it	lt
 800a88a:	4618      	movlt	r0, r3
 800a88c:	e738      	b.n	800a700 <_printf_float+0xa0>
 800a88e:	2301      	movs	r3, #1
 800a890:	464a      	mov	r2, r9
 800a892:	4631      	mov	r1, r6
 800a894:	4628      	mov	r0, r5
 800a896:	47b8      	blx	r7
 800a898:	3001      	adds	r0, #1
 800a89a:	f43f af2f 	beq.w	800a6fc <_printf_float+0x9c>
 800a89e:	f108 0801 	add.w	r8, r8, #1
 800a8a2:	e7e6      	b.n	800a872 <_printf_float+0x212>
 800a8a4:	9b07      	ldr	r3, [sp, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc3c      	bgt.n	800a924 <_printf_float+0x2c4>
 800a8aa:	4a1d      	ldr	r2, [pc, #116]	; (800a920 <_printf_float+0x2c0>)
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	47b8      	blx	r7
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	f43f af21 	beq.w	800a6fc <_printf_float+0x9c>
 800a8ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	d102      	bne.n	800a8c8 <_printf_float+0x268>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	07d9      	lsls	r1, r3, #31
 800a8c6:	d5d8      	bpl.n	800a87a <_printf_float+0x21a>
 800a8c8:	4653      	mov	r3, sl
 800a8ca:	465a      	mov	r2, fp
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f af12 	beq.w	800a6fc <_printf_float+0x9c>
 800a8d8:	f04f 0900 	mov.w	r9, #0
 800a8dc:	f104 0a1a 	add.w	sl, r4, #26
 800a8e0:	9b07      	ldr	r3, [sp, #28]
 800a8e2:	425b      	negs	r3, r3
 800a8e4:	454b      	cmp	r3, r9
 800a8e6:	dc01      	bgt.n	800a8ec <_printf_float+0x28c>
 800a8e8:	9b08      	ldr	r3, [sp, #32]
 800a8ea:	e795      	b.n	800a818 <_printf_float+0x1b8>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	4652      	mov	r2, sl
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	47b8      	blx	r7
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	f43f af00 	beq.w	800a6fc <_printf_float+0x9c>
 800a8fc:	f109 0901 	add.w	r9, r9, #1
 800a900:	e7ee      	b.n	800a8e0 <_printf_float+0x280>
 800a902:	bf00      	nop
 800a904:	f3af 8000 	nop.w
 800a908:	ffffffff 	.word	0xffffffff
 800a90c:	7fefffff 	.word	0x7fefffff
 800a910:	0800d53c 	.word	0x0800d53c
 800a914:	0800d540 	.word	0x0800d540
 800a918:	0800d548 	.word	0x0800d548
 800a91c:	0800d544 	.word	0x0800d544
 800a920:	0800d54c 	.word	0x0800d54c
 800a924:	9a08      	ldr	r2, [sp, #32]
 800a926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a928:	429a      	cmp	r2, r3
 800a92a:	bfa8      	it	ge
 800a92c:	461a      	movge	r2, r3
 800a92e:	2a00      	cmp	r2, #0
 800a930:	4691      	mov	r9, r2
 800a932:	dc38      	bgt.n	800a9a6 <_printf_float+0x346>
 800a934:	2300      	movs	r3, #0
 800a936:	9305      	str	r3, [sp, #20]
 800a938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a93c:	f104 021a 	add.w	r2, r4, #26
 800a940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a942:	9905      	ldr	r1, [sp, #20]
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	eba3 0309 	sub.w	r3, r3, r9
 800a94a:	428b      	cmp	r3, r1
 800a94c:	dc33      	bgt.n	800a9b6 <_printf_float+0x356>
 800a94e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a952:	429a      	cmp	r2, r3
 800a954:	db3c      	blt.n	800a9d0 <_printf_float+0x370>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	07da      	lsls	r2, r3, #31
 800a95a:	d439      	bmi.n	800a9d0 <_printf_float+0x370>
 800a95c:	9a08      	ldr	r2, [sp, #32]
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	9907      	ldr	r1, [sp, #28]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	eba2 0901 	sub.w	r9, r2, r1
 800a968:	4599      	cmp	r9, r3
 800a96a:	bfa8      	it	ge
 800a96c:	4699      	movge	r9, r3
 800a96e:	f1b9 0f00 	cmp.w	r9, #0
 800a972:	dc35      	bgt.n	800a9e0 <_printf_float+0x380>
 800a974:	f04f 0800 	mov.w	r8, #0
 800a978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a97c:	f104 0a1a 	add.w	sl, r4, #26
 800a980:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	eba3 0309 	sub.w	r3, r3, r9
 800a98a:	4543      	cmp	r3, r8
 800a98c:	f77f af75 	ble.w	800a87a <_printf_float+0x21a>
 800a990:	2301      	movs	r3, #1
 800a992:	4652      	mov	r2, sl
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	f43f aeae 	beq.w	800a6fc <_printf_float+0x9c>
 800a9a0:	f108 0801 	add.w	r8, r8, #1
 800a9a4:	e7ec      	b.n	800a980 <_printf_float+0x320>
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4642      	mov	r2, r8
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	47b8      	blx	r7
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d1bf      	bne.n	800a934 <_printf_float+0x2d4>
 800a9b4:	e6a2      	b.n	800a6fc <_printf_float+0x9c>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	9204      	str	r2, [sp, #16]
 800a9be:	47b8      	blx	r7
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	f43f ae9b 	beq.w	800a6fc <_printf_float+0x9c>
 800a9c6:	9b05      	ldr	r3, [sp, #20]
 800a9c8:	9a04      	ldr	r2, [sp, #16]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	e7b7      	b.n	800a940 <_printf_float+0x2e0>
 800a9d0:	4653      	mov	r3, sl
 800a9d2:	465a      	mov	r2, fp
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	47b8      	blx	r7
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d1be      	bne.n	800a95c <_printf_float+0x2fc>
 800a9de:	e68d      	b.n	800a6fc <_printf_float+0x9c>
 800a9e0:	9a04      	ldr	r2, [sp, #16]
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	4442      	add	r2, r8
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	47b8      	blx	r7
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d1c1      	bne.n	800a974 <_printf_float+0x314>
 800a9f0:	e684      	b.n	800a6fc <_printf_float+0x9c>
 800a9f2:	9a08      	ldr	r2, [sp, #32]
 800a9f4:	2a01      	cmp	r2, #1
 800a9f6:	dc01      	bgt.n	800a9fc <_printf_float+0x39c>
 800a9f8:	07db      	lsls	r3, r3, #31
 800a9fa:	d537      	bpl.n	800aa6c <_printf_float+0x40c>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4642      	mov	r2, r8
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f ae78 	beq.w	800a6fc <_printf_float+0x9c>
 800aa0c:	4653      	mov	r3, sl
 800aa0e:	465a      	mov	r2, fp
 800aa10:	4631      	mov	r1, r6
 800aa12:	4628      	mov	r0, r5
 800aa14:	47b8      	blx	r7
 800aa16:	3001      	adds	r0, #1
 800aa18:	f43f ae70 	beq.w	800a6fc <_printf_float+0x9c>
 800aa1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aa20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa28:	d01b      	beq.n	800aa62 <_printf_float+0x402>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	f108 0201 	add.w	r2, r8, #1
 800aa30:	3b01      	subs	r3, #1
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b8      	blx	r7
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d10e      	bne.n	800aa5a <_printf_float+0x3fa>
 800aa3c:	e65e      	b.n	800a6fc <_printf_float+0x9c>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	464a      	mov	r2, r9
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f ae57 	beq.w	800a6fc <_printf_float+0x9c>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	9b08      	ldr	r3, [sp, #32]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	4543      	cmp	r3, r8
 800aa58:	dcf1      	bgt.n	800aa3e <_printf_float+0x3de>
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa60:	e6db      	b.n	800a81a <_printf_float+0x1ba>
 800aa62:	f04f 0800 	mov.w	r8, #0
 800aa66:	f104 091a 	add.w	r9, r4, #26
 800aa6a:	e7f2      	b.n	800aa52 <_printf_float+0x3f2>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	4642      	mov	r2, r8
 800aa70:	e7df      	b.n	800aa32 <_printf_float+0x3d2>
 800aa72:	2301      	movs	r3, #1
 800aa74:	464a      	mov	r2, r9
 800aa76:	4631      	mov	r1, r6
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b8      	blx	r7
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	f43f ae3d 	beq.w	800a6fc <_printf_float+0x9c>
 800aa82:	f108 0801 	add.w	r8, r8, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa8a:	1a5b      	subs	r3, r3, r1
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	dcf0      	bgt.n	800aa72 <_printf_float+0x412>
 800aa90:	e6f7      	b.n	800a882 <_printf_float+0x222>
 800aa92:	f04f 0800 	mov.w	r8, #0
 800aa96:	f104 0919 	add.w	r9, r4, #25
 800aa9a:	e7f4      	b.n	800aa86 <_printf_float+0x426>

0800aa9c <_printf_common>:
 800aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	4699      	mov	r9, r3
 800aaa4:	688a      	ldr	r2, [r1, #8]
 800aaa6:	690b      	ldr	r3, [r1, #16]
 800aaa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaac:	4293      	cmp	r3, r2
 800aaae:	bfb8      	it	lt
 800aab0:	4613      	movlt	r3, r2
 800aab2:	6033      	str	r3, [r6, #0]
 800aab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aab8:	4607      	mov	r7, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	b10a      	cbz	r2, 800aac2 <_printf_common+0x26>
 800aabe:	3301      	adds	r3, #1
 800aac0:	6033      	str	r3, [r6, #0]
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	0699      	lsls	r1, r3, #26
 800aac6:	bf42      	ittt	mi
 800aac8:	6833      	ldrmi	r3, [r6, #0]
 800aaca:	3302      	addmi	r3, #2
 800aacc:	6033      	strmi	r3, [r6, #0]
 800aace:	6825      	ldr	r5, [r4, #0]
 800aad0:	f015 0506 	ands.w	r5, r5, #6
 800aad4:	d106      	bne.n	800aae4 <_printf_common+0x48>
 800aad6:	f104 0a19 	add.w	sl, r4, #25
 800aada:	68e3      	ldr	r3, [r4, #12]
 800aadc:	6832      	ldr	r2, [r6, #0]
 800aade:	1a9b      	subs	r3, r3, r2
 800aae0:	42ab      	cmp	r3, r5
 800aae2:	dc26      	bgt.n	800ab32 <_printf_common+0x96>
 800aae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aae8:	1e13      	subs	r3, r2, #0
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	bf18      	it	ne
 800aaee:	2301      	movne	r3, #1
 800aaf0:	0692      	lsls	r2, r2, #26
 800aaf2:	d42b      	bmi.n	800ab4c <_printf_common+0xb0>
 800aaf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	3001      	adds	r0, #1
 800ab00:	d01e      	beq.n	800ab40 <_printf_common+0xa4>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	68e5      	ldr	r5, [r4, #12]
 800ab06:	6832      	ldr	r2, [r6, #0]
 800ab08:	f003 0306 	and.w	r3, r3, #6
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	bf08      	it	eq
 800ab10:	1aad      	subeq	r5, r5, r2
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	6922      	ldr	r2, [r4, #16]
 800ab16:	bf0c      	ite	eq
 800ab18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab1c:	2500      	movne	r5, #0
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	bfc4      	itt	gt
 800ab22:	1a9b      	subgt	r3, r3, r2
 800ab24:	18ed      	addgt	r5, r5, r3
 800ab26:	2600      	movs	r6, #0
 800ab28:	341a      	adds	r4, #26
 800ab2a:	42b5      	cmp	r5, r6
 800ab2c:	d11a      	bne.n	800ab64 <_printf_common+0xc8>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e008      	b.n	800ab44 <_printf_common+0xa8>
 800ab32:	2301      	movs	r3, #1
 800ab34:	4652      	mov	r2, sl
 800ab36:	4649      	mov	r1, r9
 800ab38:	4638      	mov	r0, r7
 800ab3a:	47c0      	blx	r8
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d103      	bne.n	800ab48 <_printf_common+0xac>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab48:	3501      	adds	r5, #1
 800ab4a:	e7c6      	b.n	800aada <_printf_common+0x3e>
 800ab4c:	18e1      	adds	r1, r4, r3
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	2030      	movs	r0, #48	; 0x30
 800ab52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab56:	4422      	add	r2, r4
 800ab58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab60:	3302      	adds	r3, #2
 800ab62:	e7c7      	b.n	800aaf4 <_printf_common+0x58>
 800ab64:	2301      	movs	r3, #1
 800ab66:	4622      	mov	r2, r4
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	47c0      	blx	r8
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d0e6      	beq.n	800ab40 <_printf_common+0xa4>
 800ab72:	3601      	adds	r6, #1
 800ab74:	e7d9      	b.n	800ab2a <_printf_common+0x8e>
	...

0800ab78 <_printf_i>:
 800ab78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	4691      	mov	r9, r2
 800ab80:	7e27      	ldrb	r7, [r4, #24]
 800ab82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab84:	2f78      	cmp	r7, #120	; 0x78
 800ab86:	4680      	mov	r8, r0
 800ab88:	469a      	mov	sl, r3
 800ab8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab8e:	d807      	bhi.n	800aba0 <_printf_i+0x28>
 800ab90:	2f62      	cmp	r7, #98	; 0x62
 800ab92:	d80a      	bhi.n	800abaa <_printf_i+0x32>
 800ab94:	2f00      	cmp	r7, #0
 800ab96:	f000 80d8 	beq.w	800ad4a <_printf_i+0x1d2>
 800ab9a:	2f58      	cmp	r7, #88	; 0x58
 800ab9c:	f000 80a3 	beq.w	800ace6 <_printf_i+0x16e>
 800aba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aba8:	e03a      	b.n	800ac20 <_printf_i+0xa8>
 800abaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abae:	2b15      	cmp	r3, #21
 800abb0:	d8f6      	bhi.n	800aba0 <_printf_i+0x28>
 800abb2:	a001      	add	r0, pc, #4	; (adr r0, 800abb8 <_printf_i+0x40>)
 800abb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abb8:	0800ac11 	.word	0x0800ac11
 800abbc:	0800ac25 	.word	0x0800ac25
 800abc0:	0800aba1 	.word	0x0800aba1
 800abc4:	0800aba1 	.word	0x0800aba1
 800abc8:	0800aba1 	.word	0x0800aba1
 800abcc:	0800aba1 	.word	0x0800aba1
 800abd0:	0800ac25 	.word	0x0800ac25
 800abd4:	0800aba1 	.word	0x0800aba1
 800abd8:	0800aba1 	.word	0x0800aba1
 800abdc:	0800aba1 	.word	0x0800aba1
 800abe0:	0800aba1 	.word	0x0800aba1
 800abe4:	0800ad31 	.word	0x0800ad31
 800abe8:	0800ac55 	.word	0x0800ac55
 800abec:	0800ad13 	.word	0x0800ad13
 800abf0:	0800aba1 	.word	0x0800aba1
 800abf4:	0800aba1 	.word	0x0800aba1
 800abf8:	0800ad53 	.word	0x0800ad53
 800abfc:	0800aba1 	.word	0x0800aba1
 800ac00:	0800ac55 	.word	0x0800ac55
 800ac04:	0800aba1 	.word	0x0800aba1
 800ac08:	0800aba1 	.word	0x0800aba1
 800ac0c:	0800ad1b 	.word	0x0800ad1b
 800ac10:	680b      	ldr	r3, [r1, #0]
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	600a      	str	r2, [r1, #0]
 800ac18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac20:	2301      	movs	r3, #1
 800ac22:	e0a3      	b.n	800ad6c <_printf_i+0x1f4>
 800ac24:	6825      	ldr	r5, [r4, #0]
 800ac26:	6808      	ldr	r0, [r1, #0]
 800ac28:	062e      	lsls	r6, r5, #24
 800ac2a:	f100 0304 	add.w	r3, r0, #4
 800ac2e:	d50a      	bpl.n	800ac46 <_printf_i+0xce>
 800ac30:	6805      	ldr	r5, [r0, #0]
 800ac32:	600b      	str	r3, [r1, #0]
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	da03      	bge.n	800ac40 <_printf_i+0xc8>
 800ac38:	232d      	movs	r3, #45	; 0x2d
 800ac3a:	426d      	negs	r5, r5
 800ac3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac40:	485e      	ldr	r0, [pc, #376]	; (800adbc <_printf_i+0x244>)
 800ac42:	230a      	movs	r3, #10
 800ac44:	e019      	b.n	800ac7a <_printf_i+0x102>
 800ac46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac4a:	6805      	ldr	r5, [r0, #0]
 800ac4c:	600b      	str	r3, [r1, #0]
 800ac4e:	bf18      	it	ne
 800ac50:	b22d      	sxthne	r5, r5
 800ac52:	e7ef      	b.n	800ac34 <_printf_i+0xbc>
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	6825      	ldr	r5, [r4, #0]
 800ac58:	1d18      	adds	r0, r3, #4
 800ac5a:	6008      	str	r0, [r1, #0]
 800ac5c:	0628      	lsls	r0, r5, #24
 800ac5e:	d501      	bpl.n	800ac64 <_printf_i+0xec>
 800ac60:	681d      	ldr	r5, [r3, #0]
 800ac62:	e002      	b.n	800ac6a <_printf_i+0xf2>
 800ac64:	0669      	lsls	r1, r5, #25
 800ac66:	d5fb      	bpl.n	800ac60 <_printf_i+0xe8>
 800ac68:	881d      	ldrh	r5, [r3, #0]
 800ac6a:	4854      	ldr	r0, [pc, #336]	; (800adbc <_printf_i+0x244>)
 800ac6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac6e:	bf0c      	ite	eq
 800ac70:	2308      	moveq	r3, #8
 800ac72:	230a      	movne	r3, #10
 800ac74:	2100      	movs	r1, #0
 800ac76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac7a:	6866      	ldr	r6, [r4, #4]
 800ac7c:	60a6      	str	r6, [r4, #8]
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	bfa2      	ittt	ge
 800ac82:	6821      	ldrge	r1, [r4, #0]
 800ac84:	f021 0104 	bicge.w	r1, r1, #4
 800ac88:	6021      	strge	r1, [r4, #0]
 800ac8a:	b90d      	cbnz	r5, 800ac90 <_printf_i+0x118>
 800ac8c:	2e00      	cmp	r6, #0
 800ac8e:	d04d      	beq.n	800ad2c <_printf_i+0x1b4>
 800ac90:	4616      	mov	r6, r2
 800ac92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac96:	fb03 5711 	mls	r7, r3, r1, r5
 800ac9a:	5dc7      	ldrb	r7, [r0, r7]
 800ac9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aca0:	462f      	mov	r7, r5
 800aca2:	42bb      	cmp	r3, r7
 800aca4:	460d      	mov	r5, r1
 800aca6:	d9f4      	bls.n	800ac92 <_printf_i+0x11a>
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d10b      	bne.n	800acc4 <_printf_i+0x14c>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	07df      	lsls	r7, r3, #31
 800acb0:	d508      	bpl.n	800acc4 <_printf_i+0x14c>
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	6861      	ldr	r1, [r4, #4]
 800acb6:	4299      	cmp	r1, r3
 800acb8:	bfde      	ittt	le
 800acba:	2330      	movle	r3, #48	; 0x30
 800acbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800acc4:	1b92      	subs	r2, r2, r6
 800acc6:	6122      	str	r2, [r4, #16]
 800acc8:	f8cd a000 	str.w	sl, [sp]
 800accc:	464b      	mov	r3, r9
 800acce:	aa03      	add	r2, sp, #12
 800acd0:	4621      	mov	r1, r4
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7ff fee2 	bl	800aa9c <_printf_common>
 800acd8:	3001      	adds	r0, #1
 800acda:	d14c      	bne.n	800ad76 <_printf_i+0x1fe>
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	b004      	add	sp, #16
 800ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace6:	4835      	ldr	r0, [pc, #212]	; (800adbc <_printf_i+0x244>)
 800ace8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	680e      	ldr	r6, [r1, #0]
 800acf0:	061f      	lsls	r7, r3, #24
 800acf2:	f856 5b04 	ldr.w	r5, [r6], #4
 800acf6:	600e      	str	r6, [r1, #0]
 800acf8:	d514      	bpl.n	800ad24 <_printf_i+0x1ac>
 800acfa:	07d9      	lsls	r1, r3, #31
 800acfc:	bf44      	itt	mi
 800acfe:	f043 0320 	orrmi.w	r3, r3, #32
 800ad02:	6023      	strmi	r3, [r4, #0]
 800ad04:	b91d      	cbnz	r5, 800ad0e <_printf_i+0x196>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f023 0320 	bic.w	r3, r3, #32
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	2310      	movs	r3, #16
 800ad10:	e7b0      	b.n	800ac74 <_printf_i+0xfc>
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	f043 0320 	orr.w	r3, r3, #32
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	2378      	movs	r3, #120	; 0x78
 800ad1c:	4828      	ldr	r0, [pc, #160]	; (800adc0 <_printf_i+0x248>)
 800ad1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad22:	e7e3      	b.n	800acec <_printf_i+0x174>
 800ad24:	065e      	lsls	r6, r3, #25
 800ad26:	bf48      	it	mi
 800ad28:	b2ad      	uxthmi	r5, r5
 800ad2a:	e7e6      	b.n	800acfa <_printf_i+0x182>
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	e7bb      	b.n	800aca8 <_printf_i+0x130>
 800ad30:	680b      	ldr	r3, [r1, #0]
 800ad32:	6826      	ldr	r6, [r4, #0]
 800ad34:	6960      	ldr	r0, [r4, #20]
 800ad36:	1d1d      	adds	r5, r3, #4
 800ad38:	600d      	str	r5, [r1, #0]
 800ad3a:	0635      	lsls	r5, r6, #24
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0x1cc>
 800ad40:	6018      	str	r0, [r3, #0]
 800ad42:	e002      	b.n	800ad4a <_printf_i+0x1d2>
 800ad44:	0671      	lsls	r1, r6, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0x1c8>
 800ad48:	8018      	strh	r0, [r3, #0]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6123      	str	r3, [r4, #16]
 800ad4e:	4616      	mov	r6, r2
 800ad50:	e7ba      	b.n	800acc8 <_printf_i+0x150>
 800ad52:	680b      	ldr	r3, [r1, #0]
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	600a      	str	r2, [r1, #0]
 800ad58:	681e      	ldr	r6, [r3, #0]
 800ad5a:	6862      	ldr	r2, [r4, #4]
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7f5 fa76 	bl	8000250 <memchr>
 800ad64:	b108      	cbz	r0, 800ad6a <_printf_i+0x1f2>
 800ad66:	1b80      	subs	r0, r0, r6
 800ad68:	6060      	str	r0, [r4, #4]
 800ad6a:	6863      	ldr	r3, [r4, #4]
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad74:	e7a8      	b.n	800acc8 <_printf_i+0x150>
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	4632      	mov	r2, r6
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	47d0      	blx	sl
 800ad80:	3001      	adds	r0, #1
 800ad82:	d0ab      	beq.n	800acdc <_printf_i+0x164>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	079b      	lsls	r3, r3, #30
 800ad88:	d413      	bmi.n	800adb2 <_printf_i+0x23a>
 800ad8a:	68e0      	ldr	r0, [r4, #12]
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	4298      	cmp	r0, r3
 800ad90:	bfb8      	it	lt
 800ad92:	4618      	movlt	r0, r3
 800ad94:	e7a4      	b.n	800ace0 <_printf_i+0x168>
 800ad96:	2301      	movs	r3, #1
 800ad98:	4632      	mov	r2, r6
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	47d0      	blx	sl
 800ada0:	3001      	adds	r0, #1
 800ada2:	d09b      	beq.n	800acdc <_printf_i+0x164>
 800ada4:	3501      	adds	r5, #1
 800ada6:	68e3      	ldr	r3, [r4, #12]
 800ada8:	9903      	ldr	r1, [sp, #12]
 800adaa:	1a5b      	subs	r3, r3, r1
 800adac:	42ab      	cmp	r3, r5
 800adae:	dcf2      	bgt.n	800ad96 <_printf_i+0x21e>
 800adb0:	e7eb      	b.n	800ad8a <_printf_i+0x212>
 800adb2:	2500      	movs	r5, #0
 800adb4:	f104 0619 	add.w	r6, r4, #25
 800adb8:	e7f5      	b.n	800ada6 <_printf_i+0x22e>
 800adba:	bf00      	nop
 800adbc:	0800d54e 	.word	0x0800d54e
 800adc0:	0800d55f 	.word	0x0800d55f

0800adc4 <siprintf>:
 800adc4:	b40e      	push	{r1, r2, r3}
 800adc6:	b500      	push	{lr}
 800adc8:	b09c      	sub	sp, #112	; 0x70
 800adca:	ab1d      	add	r3, sp, #116	; 0x74
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	9006      	str	r0, [sp, #24]
 800add0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800add4:	4809      	ldr	r0, [pc, #36]	; (800adfc <siprintf+0x38>)
 800add6:	9107      	str	r1, [sp, #28]
 800add8:	9104      	str	r1, [sp, #16]
 800adda:	4909      	ldr	r1, [pc, #36]	; (800ae00 <siprintf+0x3c>)
 800addc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade0:	9105      	str	r1, [sp, #20]
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	a902      	add	r1, sp, #8
 800ade8:	f001 faca 	bl	800c380 <_svfiprintf_r>
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	b01c      	add	sp, #112	; 0x70
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b003      	add	sp, #12
 800adfa:	4770      	bx	lr
 800adfc:	200000dc 	.word	0x200000dc
 800ae00:	ffff0208 	.word	0xffff0208

0800ae04 <quorem>:
 800ae04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	6903      	ldr	r3, [r0, #16]
 800ae0a:	690c      	ldr	r4, [r1, #16]
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	4607      	mov	r7, r0
 800ae10:	f2c0 8081 	blt.w	800af16 <quorem+0x112>
 800ae14:	3c01      	subs	r4, #1
 800ae16:	f101 0814 	add.w	r8, r1, #20
 800ae1a:	f100 0514 	add.w	r5, r0, #20
 800ae1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae38:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae3c:	d331      	bcc.n	800aea2 <quorem+0x9e>
 800ae3e:	f04f 0e00 	mov.w	lr, #0
 800ae42:	4640      	mov	r0, r8
 800ae44:	46ac      	mov	ip, r5
 800ae46:	46f2      	mov	sl, lr
 800ae48:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae4c:	b293      	uxth	r3, r2
 800ae4e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	ebaa 0303 	sub.w	r3, sl, r3
 800ae5c:	0c12      	lsrs	r2, r2, #16
 800ae5e:	f8dc a000 	ldr.w	sl, [ip]
 800ae62:	fb06 e202 	mla	r2, r6, r2, lr
 800ae66:	fa13 f38a 	uxtah	r3, r3, sl
 800ae6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae6e:	fa1f fa82 	uxth.w	sl, r2
 800ae72:	f8dc 2000 	ldr.w	r2, [ip]
 800ae76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae84:	4581      	cmp	r9, r0
 800ae86:	f84c 3b04 	str.w	r3, [ip], #4
 800ae8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae8e:	d2db      	bcs.n	800ae48 <quorem+0x44>
 800ae90:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae94:	b92b      	cbnz	r3, 800aea2 <quorem+0x9e>
 800ae96:	9b01      	ldr	r3, [sp, #4]
 800ae98:	3b04      	subs	r3, #4
 800ae9a:	429d      	cmp	r5, r3
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	d32e      	bcc.n	800aefe <quorem+0xfa>
 800aea0:	613c      	str	r4, [r7, #16]
 800aea2:	4638      	mov	r0, r7
 800aea4:	f001 f856 	bl	800bf54 <__mcmp>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	db24      	blt.n	800aef6 <quorem+0xf2>
 800aeac:	3601      	adds	r6, #1
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f04f 0c00 	mov.w	ip, #0
 800aeb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aeb8:	f8d0 e000 	ldr.w	lr, [r0]
 800aebc:	b293      	uxth	r3, r2
 800aebe:	ebac 0303 	sub.w	r3, ip, r3
 800aec2:	0c12      	lsrs	r2, r2, #16
 800aec4:	fa13 f38e 	uxtah	r3, r3, lr
 800aec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aed6:	45c1      	cmp	r9, r8
 800aed8:	f840 3b04 	str.w	r3, [r0], #4
 800aedc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aee0:	d2e8      	bcs.n	800aeb4 <quorem+0xb0>
 800aee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeea:	b922      	cbnz	r2, 800aef6 <quorem+0xf2>
 800aeec:	3b04      	subs	r3, #4
 800aeee:	429d      	cmp	r5, r3
 800aef0:	461a      	mov	r2, r3
 800aef2:	d30a      	bcc.n	800af0a <quorem+0x106>
 800aef4:	613c      	str	r4, [r7, #16]
 800aef6:	4630      	mov	r0, r6
 800aef8:	b003      	add	sp, #12
 800aefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	3b04      	subs	r3, #4
 800af02:	2a00      	cmp	r2, #0
 800af04:	d1cc      	bne.n	800aea0 <quorem+0x9c>
 800af06:	3c01      	subs	r4, #1
 800af08:	e7c7      	b.n	800ae9a <quorem+0x96>
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	2a00      	cmp	r2, #0
 800af10:	d1f0      	bne.n	800aef4 <quorem+0xf0>
 800af12:	3c01      	subs	r4, #1
 800af14:	e7eb      	b.n	800aeee <quorem+0xea>
 800af16:	2000      	movs	r0, #0
 800af18:	e7ee      	b.n	800aef8 <quorem+0xf4>
 800af1a:	0000      	movs	r0, r0
 800af1c:	0000      	movs	r0, r0
	...

0800af20 <_dtoa_r>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	ec59 8b10 	vmov	r8, r9, d0
 800af28:	b095      	sub	sp, #84	; 0x54
 800af2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af2c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800af2e:	9107      	str	r1, [sp, #28]
 800af30:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800af34:	4606      	mov	r6, r0
 800af36:	9209      	str	r2, [sp, #36]	; 0x24
 800af38:	9310      	str	r3, [sp, #64]	; 0x40
 800af3a:	b975      	cbnz	r5, 800af5a <_dtoa_r+0x3a>
 800af3c:	2010      	movs	r0, #16
 800af3e:	f000 fd75 	bl	800ba2c <malloc>
 800af42:	4602      	mov	r2, r0
 800af44:	6270      	str	r0, [r6, #36]	; 0x24
 800af46:	b920      	cbnz	r0, 800af52 <_dtoa_r+0x32>
 800af48:	4bab      	ldr	r3, [pc, #684]	; (800b1f8 <_dtoa_r+0x2d8>)
 800af4a:	21ea      	movs	r1, #234	; 0xea
 800af4c:	48ab      	ldr	r0, [pc, #684]	; (800b1fc <_dtoa_r+0x2dc>)
 800af4e:	f001 fb27 	bl	800c5a0 <__assert_func>
 800af52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af56:	6005      	str	r5, [r0, #0]
 800af58:	60c5      	str	r5, [r0, #12]
 800af5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af5c:	6819      	ldr	r1, [r3, #0]
 800af5e:	b151      	cbz	r1, 800af76 <_dtoa_r+0x56>
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	604a      	str	r2, [r1, #4]
 800af64:	2301      	movs	r3, #1
 800af66:	4093      	lsls	r3, r2
 800af68:	608b      	str	r3, [r1, #8]
 800af6a:	4630      	mov	r0, r6
 800af6c:	f000 fdb4 	bl	800bad8 <_Bfree>
 800af70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	f1b9 0300 	subs.w	r3, r9, #0
 800af7a:	bfbb      	ittet	lt
 800af7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af80:	9303      	strlt	r3, [sp, #12]
 800af82:	2300      	movge	r3, #0
 800af84:	2201      	movlt	r2, #1
 800af86:	bfac      	ite	ge
 800af88:	6023      	strge	r3, [r4, #0]
 800af8a:	6022      	strlt	r2, [r4, #0]
 800af8c:	4b9c      	ldr	r3, [pc, #624]	; (800b200 <_dtoa_r+0x2e0>)
 800af8e:	9c03      	ldr	r4, [sp, #12]
 800af90:	43a3      	bics	r3, r4
 800af92:	d11a      	bne.n	800afca <_dtoa_r+0xaa>
 800af94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af96:	f242 730f 	movw	r3, #9999	; 0x270f
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800afa0:	ea53 0308 	orrs.w	r3, r3, r8
 800afa4:	f000 8512 	beq.w	800b9cc <_dtoa_r+0xaac>
 800afa8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afaa:	b953      	cbnz	r3, 800afc2 <_dtoa_r+0xa2>
 800afac:	4b95      	ldr	r3, [pc, #596]	; (800b204 <_dtoa_r+0x2e4>)
 800afae:	e01f      	b.n	800aff0 <_dtoa_r+0xd0>
 800afb0:	4b95      	ldr	r3, [pc, #596]	; (800b208 <_dtoa_r+0x2e8>)
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	3308      	adds	r3, #8
 800afb6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	9800      	ldr	r0, [sp, #0]
 800afbc:	b015      	add	sp, #84	; 0x54
 800afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc2:	4b90      	ldr	r3, [pc, #576]	; (800b204 <_dtoa_r+0x2e4>)
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	3303      	adds	r3, #3
 800afc8:	e7f5      	b.n	800afb6 <_dtoa_r+0x96>
 800afca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800afda:	d10b      	bne.n	800aff4 <_dtoa_r+0xd4>
 800afdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afde:	2301      	movs	r3, #1
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 84ee 	beq.w	800b9c6 <_dtoa_r+0xaa6>
 800afea:	4888      	ldr	r0, [pc, #544]	; (800b20c <_dtoa_r+0x2ec>)
 800afec:	6018      	str	r0, [r3, #0]
 800afee:	1e43      	subs	r3, r0, #1
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	e7e2      	b.n	800afba <_dtoa_r+0x9a>
 800aff4:	a913      	add	r1, sp, #76	; 0x4c
 800aff6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800affa:	aa12      	add	r2, sp, #72	; 0x48
 800affc:	4630      	mov	r0, r6
 800affe:	f001 f84d 	bl	800c09c <__d2b>
 800b002:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b006:	4605      	mov	r5, r0
 800b008:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b00a:	2900      	cmp	r1, #0
 800b00c:	d047      	beq.n	800b09e <_dtoa_r+0x17e>
 800b00e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b010:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b018:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b01c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b020:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b024:	2400      	movs	r4, #0
 800b026:	ec43 2b16 	vmov	d6, r2, r3
 800b02a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b02e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b1e0 <_dtoa_r+0x2c0>
 800b032:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b036:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800b1e8 <_dtoa_r+0x2c8>
 800b03a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b03e:	eeb0 7b46 	vmov.f64	d7, d6
 800b042:	ee06 1a90 	vmov	s13, r1
 800b046:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800b04a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b1f0 <_dtoa_r+0x2d0>
 800b04e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b052:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b056:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b05e:	ee16 ba90 	vmov	fp, s13
 800b062:	9411      	str	r4, [sp, #68]	; 0x44
 800b064:	d508      	bpl.n	800b078 <_dtoa_r+0x158>
 800b066:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b06a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b072:	bf18      	it	ne
 800b074:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b078:	f1bb 0f16 	cmp.w	fp, #22
 800b07c:	d832      	bhi.n	800b0e4 <_dtoa_r+0x1c4>
 800b07e:	4b64      	ldr	r3, [pc, #400]	; (800b210 <_dtoa_r+0x2f0>)
 800b080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b084:	ed93 7b00 	vldr	d7, [r3]
 800b088:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b08c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b094:	d501      	bpl.n	800b09a <_dtoa_r+0x17a>
 800b096:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b09a:	2300      	movs	r3, #0
 800b09c:	e023      	b.n	800b0e6 <_dtoa_r+0x1c6>
 800b09e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b0a0:	4401      	add	r1, r0
 800b0a2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	bfc3      	ittte	gt
 800b0aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0ae:	fa04 f303 	lslgt.w	r3, r4, r3
 800b0b2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b0b6:	f1c3 0320 	rsble	r3, r3, #32
 800b0ba:	bfc6      	itte	gt
 800b0bc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b0c0:	ea43 0308 	orrgt.w	r3, r3, r8
 800b0c4:	fa08 f303 	lslle.w	r3, r8, r3
 800b0c8:	ee07 3a90 	vmov	s15, r3
 800b0cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b0d0:	3901      	subs	r1, #1
 800b0d2:	ed8d 7b00 	vstr	d7, [sp]
 800b0d6:	9c01      	ldr	r4, [sp, #4]
 800b0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b0e0:	2401      	movs	r4, #1
 800b0e2:	e7a0      	b.n	800b026 <_dtoa_r+0x106>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0e8:	1a43      	subs	r3, r0, r1
 800b0ea:	1e5a      	subs	r2, r3, #1
 800b0ec:	bf45      	ittet	mi
 800b0ee:	f1c3 0301 	rsbmi	r3, r3, #1
 800b0f2:	9305      	strmi	r3, [sp, #20]
 800b0f4:	2300      	movpl	r3, #0
 800b0f6:	2300      	movmi	r3, #0
 800b0f8:	9206      	str	r2, [sp, #24]
 800b0fa:	bf54      	ite	pl
 800b0fc:	9305      	strpl	r3, [sp, #20]
 800b0fe:	9306      	strmi	r3, [sp, #24]
 800b100:	f1bb 0f00 	cmp.w	fp, #0
 800b104:	db18      	blt.n	800b138 <_dtoa_r+0x218>
 800b106:	9b06      	ldr	r3, [sp, #24]
 800b108:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b10c:	445b      	add	r3, fp
 800b10e:	9306      	str	r3, [sp, #24]
 800b110:	2300      	movs	r3, #0
 800b112:	9a07      	ldr	r2, [sp, #28]
 800b114:	2a09      	cmp	r2, #9
 800b116:	d849      	bhi.n	800b1ac <_dtoa_r+0x28c>
 800b118:	2a05      	cmp	r2, #5
 800b11a:	bfc4      	itt	gt
 800b11c:	3a04      	subgt	r2, #4
 800b11e:	9207      	strgt	r2, [sp, #28]
 800b120:	9a07      	ldr	r2, [sp, #28]
 800b122:	f1a2 0202 	sub.w	r2, r2, #2
 800b126:	bfcc      	ite	gt
 800b128:	2400      	movgt	r4, #0
 800b12a:	2401      	movle	r4, #1
 800b12c:	2a03      	cmp	r2, #3
 800b12e:	d848      	bhi.n	800b1c2 <_dtoa_r+0x2a2>
 800b130:	e8df f002 	tbb	[pc, r2]
 800b134:	3a2c2e0b 	.word	0x3a2c2e0b
 800b138:	9b05      	ldr	r3, [sp, #20]
 800b13a:	2200      	movs	r2, #0
 800b13c:	eba3 030b 	sub.w	r3, r3, fp
 800b140:	9305      	str	r3, [sp, #20]
 800b142:	920e      	str	r2, [sp, #56]	; 0x38
 800b144:	f1cb 0300 	rsb	r3, fp, #0
 800b148:	e7e3      	b.n	800b112 <_dtoa_r+0x1f2>
 800b14a:	2200      	movs	r2, #0
 800b14c:	9208      	str	r2, [sp, #32]
 800b14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b150:	2a00      	cmp	r2, #0
 800b152:	dc39      	bgt.n	800b1c8 <_dtoa_r+0x2a8>
 800b154:	f04f 0a01 	mov.w	sl, #1
 800b158:	46d1      	mov	r9, sl
 800b15a:	4652      	mov	r2, sl
 800b15c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b160:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b162:	2100      	movs	r1, #0
 800b164:	6079      	str	r1, [r7, #4]
 800b166:	2004      	movs	r0, #4
 800b168:	f100 0c14 	add.w	ip, r0, #20
 800b16c:	4594      	cmp	ip, r2
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	d92f      	bls.n	800b1d2 <_dtoa_r+0x2b2>
 800b172:	4630      	mov	r0, r6
 800b174:	930c      	str	r3, [sp, #48]	; 0x30
 800b176:	f000 fc6f 	bl	800ba58 <_Balloc>
 800b17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b17c:	9000      	str	r0, [sp, #0]
 800b17e:	4602      	mov	r2, r0
 800b180:	2800      	cmp	r0, #0
 800b182:	d149      	bne.n	800b218 <_dtoa_r+0x2f8>
 800b184:	4b23      	ldr	r3, [pc, #140]	; (800b214 <_dtoa_r+0x2f4>)
 800b186:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b18a:	e6df      	b.n	800af4c <_dtoa_r+0x2c>
 800b18c:	2201      	movs	r2, #1
 800b18e:	e7dd      	b.n	800b14c <_dtoa_r+0x22c>
 800b190:	2200      	movs	r2, #0
 800b192:	9208      	str	r2, [sp, #32]
 800b194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b196:	eb0b 0a02 	add.w	sl, fp, r2
 800b19a:	f10a 0901 	add.w	r9, sl, #1
 800b19e:	464a      	mov	r2, r9
 800b1a0:	2a01      	cmp	r2, #1
 800b1a2:	bfb8      	it	lt
 800b1a4:	2201      	movlt	r2, #1
 800b1a6:	e7db      	b.n	800b160 <_dtoa_r+0x240>
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	e7f2      	b.n	800b192 <_dtoa_r+0x272>
 800b1ac:	2401      	movs	r4, #1
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b1b4:	f04f 3aff 	mov.w	sl, #4294967295
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	46d1      	mov	r9, sl
 800b1bc:	2212      	movs	r2, #18
 800b1be:	9109      	str	r1, [sp, #36]	; 0x24
 800b1c0:	e7ce      	b.n	800b160 <_dtoa_r+0x240>
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	9208      	str	r2, [sp, #32]
 800b1c6:	e7f5      	b.n	800b1b4 <_dtoa_r+0x294>
 800b1c8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800b1cc:	46d1      	mov	r9, sl
 800b1ce:	4652      	mov	r2, sl
 800b1d0:	e7c6      	b.n	800b160 <_dtoa_r+0x240>
 800b1d2:	3101      	adds	r1, #1
 800b1d4:	6079      	str	r1, [r7, #4]
 800b1d6:	0040      	lsls	r0, r0, #1
 800b1d8:	e7c6      	b.n	800b168 <_dtoa_r+0x248>
 800b1da:	bf00      	nop
 800b1dc:	f3af 8000 	nop.w
 800b1e0:	636f4361 	.word	0x636f4361
 800b1e4:	3fd287a7 	.word	0x3fd287a7
 800b1e8:	8b60c8b3 	.word	0x8b60c8b3
 800b1ec:	3fc68a28 	.word	0x3fc68a28
 800b1f0:	509f79fb 	.word	0x509f79fb
 800b1f4:	3fd34413 	.word	0x3fd34413
 800b1f8:	0800d57d 	.word	0x0800d57d
 800b1fc:	0800d594 	.word	0x0800d594
 800b200:	7ff00000 	.word	0x7ff00000
 800b204:	0800d579 	.word	0x0800d579
 800b208:	0800d570 	.word	0x0800d570
 800b20c:	0800d54d 	.word	0x0800d54d
 800b210:	0800d690 	.word	0x0800d690
 800b214:	0800d5f3 	.word	0x0800d5f3
 800b218:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b21a:	9900      	ldr	r1, [sp, #0]
 800b21c:	6011      	str	r1, [r2, #0]
 800b21e:	f1b9 0f0e 	cmp.w	r9, #14
 800b222:	d872      	bhi.n	800b30a <_dtoa_r+0x3ea>
 800b224:	2c00      	cmp	r4, #0
 800b226:	d070      	beq.n	800b30a <_dtoa_r+0x3ea>
 800b228:	f1bb 0f00 	cmp.w	fp, #0
 800b22c:	f340 80a6 	ble.w	800b37c <_dtoa_r+0x45c>
 800b230:	49ca      	ldr	r1, [pc, #808]	; (800b55c <_dtoa_r+0x63c>)
 800b232:	f00b 020f 	and.w	r2, fp, #15
 800b236:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b23a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b23e:	ed92 7b00 	vldr	d7, [r2]
 800b242:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b246:	f000 808d 	beq.w	800b364 <_dtoa_r+0x444>
 800b24a:	4ac5      	ldr	r2, [pc, #788]	; (800b560 <_dtoa_r+0x640>)
 800b24c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800b250:	ed92 6b08 	vldr	d6, [r2, #32]
 800b254:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b258:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b25c:	f001 010f 	and.w	r1, r1, #15
 800b260:	2203      	movs	r2, #3
 800b262:	48bf      	ldr	r0, [pc, #764]	; (800b560 <_dtoa_r+0x640>)
 800b264:	2900      	cmp	r1, #0
 800b266:	d17f      	bne.n	800b368 <_dtoa_r+0x448>
 800b268:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b26c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b270:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b274:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b276:	2900      	cmp	r1, #0
 800b278:	f000 80b2 	beq.w	800b3e0 <_dtoa_r+0x4c0>
 800b27c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b280:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b284:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28c:	f140 80a8 	bpl.w	800b3e0 <_dtoa_r+0x4c0>
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	f000 80a4 	beq.w	800b3e0 <_dtoa_r+0x4c0>
 800b298:	f1ba 0f00 	cmp.w	sl, #0
 800b29c:	dd31      	ble.n	800b302 <_dtoa_r+0x3e2>
 800b29e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b2a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2aa:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b2ae:	3201      	adds	r2, #1
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b2b6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b2ba:	ee07 2a90 	vmov	s15, r2
 800b2be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b2c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b2c6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b2ca:	9c03      	ldr	r4, [sp, #12]
 800b2cc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b2d0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f040 8086 	bne.w	800b3e6 <_dtoa_r+0x4c6>
 800b2da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b2de:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b2e2:	ec42 1b17 	vmov	d7, r1, r2
 800b2e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ee:	f300 8272 	bgt.w	800b7d6 <_dtoa_r+0x8b6>
 800b2f2:	eeb1 7b47 	vneg.f64	d7, d7
 800b2f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fe:	f100 8267 	bmi.w	800b7d0 <_dtoa_r+0x8b0>
 800b302:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800b306:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b30a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b30c:	2a00      	cmp	r2, #0
 800b30e:	f2c0 8129 	blt.w	800b564 <_dtoa_r+0x644>
 800b312:	f1bb 0f0e 	cmp.w	fp, #14
 800b316:	f300 8125 	bgt.w	800b564 <_dtoa_r+0x644>
 800b31a:	4b90      	ldr	r3, [pc, #576]	; (800b55c <_dtoa_r+0x63c>)
 800b31c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b320:	ed93 6b00 	vldr	d6, [r3]
 800b324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b326:	2b00      	cmp	r3, #0
 800b328:	f280 80c3 	bge.w	800b4b2 <_dtoa_r+0x592>
 800b32c:	f1b9 0f00 	cmp.w	r9, #0
 800b330:	f300 80bf 	bgt.w	800b4b2 <_dtoa_r+0x592>
 800b334:	f040 824c 	bne.w	800b7d0 <_dtoa_r+0x8b0>
 800b338:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b33c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b340:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b344:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34c:	464c      	mov	r4, r9
 800b34e:	464f      	mov	r7, r9
 800b350:	f280 8222 	bge.w	800b798 <_dtoa_r+0x878>
 800b354:	f8dd 8000 	ldr.w	r8, [sp]
 800b358:	2331      	movs	r3, #49	; 0x31
 800b35a:	f808 3b01 	strb.w	r3, [r8], #1
 800b35e:	f10b 0b01 	add.w	fp, fp, #1
 800b362:	e21e      	b.n	800b7a2 <_dtoa_r+0x882>
 800b364:	2202      	movs	r2, #2
 800b366:	e77c      	b.n	800b262 <_dtoa_r+0x342>
 800b368:	07cc      	lsls	r4, r1, #31
 800b36a:	d504      	bpl.n	800b376 <_dtoa_r+0x456>
 800b36c:	ed90 6b00 	vldr	d6, [r0]
 800b370:	3201      	adds	r2, #1
 800b372:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b376:	1049      	asrs	r1, r1, #1
 800b378:	3008      	adds	r0, #8
 800b37a:	e773      	b.n	800b264 <_dtoa_r+0x344>
 800b37c:	d02e      	beq.n	800b3dc <_dtoa_r+0x4bc>
 800b37e:	f1cb 0100 	rsb	r1, fp, #0
 800b382:	4a76      	ldr	r2, [pc, #472]	; (800b55c <_dtoa_r+0x63c>)
 800b384:	f001 000f 	and.w	r0, r1, #15
 800b388:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b38c:	ed92 7b00 	vldr	d7, [r2]
 800b390:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b394:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b398:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b39c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800b3a0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800b3a4:	486e      	ldr	r0, [pc, #440]	; (800b560 <_dtoa_r+0x640>)
 800b3a6:	1109      	asrs	r1, r1, #4
 800b3a8:	2400      	movs	r4, #0
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	b939      	cbnz	r1, 800b3be <_dtoa_r+0x49e>
 800b3ae:	2c00      	cmp	r4, #0
 800b3b0:	f43f af60 	beq.w	800b274 <_dtoa_r+0x354>
 800b3b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3bc:	e75a      	b.n	800b274 <_dtoa_r+0x354>
 800b3be:	07cf      	lsls	r7, r1, #31
 800b3c0:	d509      	bpl.n	800b3d6 <_dtoa_r+0x4b6>
 800b3c2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800b3c6:	ed90 7b00 	vldr	d7, [r0]
 800b3ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b3d2:	3201      	adds	r2, #1
 800b3d4:	2401      	movs	r4, #1
 800b3d6:	1049      	asrs	r1, r1, #1
 800b3d8:	3008      	adds	r0, #8
 800b3da:	e7e7      	b.n	800b3ac <_dtoa_r+0x48c>
 800b3dc:	2202      	movs	r2, #2
 800b3de:	e749      	b.n	800b274 <_dtoa_r+0x354>
 800b3e0:	465f      	mov	r7, fp
 800b3e2:	4648      	mov	r0, r9
 800b3e4:	e765      	b.n	800b2b2 <_dtoa_r+0x392>
 800b3e6:	ec42 1b17 	vmov	d7, r1, r2
 800b3ea:	4a5c      	ldr	r2, [pc, #368]	; (800b55c <_dtoa_r+0x63c>)
 800b3ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b3f0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b3f4:	9a00      	ldr	r2, [sp, #0]
 800b3f6:	1814      	adds	r4, r2, r0
 800b3f8:	9a08      	ldr	r2, [sp, #32]
 800b3fa:	b352      	cbz	r2, 800b452 <_dtoa_r+0x532>
 800b3fc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b400:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b404:	f8dd 8000 	ldr.w	r8, [sp]
 800b408:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b40c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b410:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b414:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b418:	ee14 2a90 	vmov	r2, s9
 800b41c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b420:	3230      	adds	r2, #48	; 0x30
 800b422:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b426:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42e:	f808 2b01 	strb.w	r2, [r8], #1
 800b432:	d439      	bmi.n	800b4a8 <_dtoa_r+0x588>
 800b434:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b438:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b440:	d472      	bmi.n	800b528 <_dtoa_r+0x608>
 800b442:	45a0      	cmp	r8, r4
 800b444:	f43f af5d 	beq.w	800b302 <_dtoa_r+0x3e2>
 800b448:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b44c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b450:	e7e0      	b.n	800b414 <_dtoa_r+0x4f4>
 800b452:	f8dd 8000 	ldr.w	r8, [sp]
 800b456:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b45a:	4621      	mov	r1, r4
 800b45c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b460:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b464:	ee14 2a90 	vmov	r2, s9
 800b468:	3230      	adds	r2, #48	; 0x30
 800b46a:	f808 2b01 	strb.w	r2, [r8], #1
 800b46e:	45a0      	cmp	r8, r4
 800b470:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b474:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b478:	d118      	bne.n	800b4ac <_dtoa_r+0x58c>
 800b47a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b47e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b482:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48a:	dc4d      	bgt.n	800b528 <_dtoa_r+0x608>
 800b48c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b490:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b498:	f57f af33 	bpl.w	800b302 <_dtoa_r+0x3e2>
 800b49c:	4688      	mov	r8, r1
 800b49e:	3901      	subs	r1, #1
 800b4a0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b4a4:	2b30      	cmp	r3, #48	; 0x30
 800b4a6:	d0f9      	beq.n	800b49c <_dtoa_r+0x57c>
 800b4a8:	46bb      	mov	fp, r7
 800b4aa:	e02a      	b.n	800b502 <_dtoa_r+0x5e2>
 800b4ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b4b0:	e7d6      	b.n	800b460 <_dtoa_r+0x540>
 800b4b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b4ba:	f8dd 8000 	ldr.w	r8, [sp]
 800b4be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b4c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b4c6:	ee15 3a10 	vmov	r3, s10
 800b4ca:	3330      	adds	r3, #48	; 0x30
 800b4cc:	f808 3b01 	strb.w	r3, [r8], #1
 800b4d0:	9b00      	ldr	r3, [sp, #0]
 800b4d2:	eba8 0303 	sub.w	r3, r8, r3
 800b4d6:	4599      	cmp	r9, r3
 800b4d8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b4dc:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b4e0:	d133      	bne.n	800b54a <_dtoa_r+0x62a>
 800b4e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b4e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ee:	dc1a      	bgt.n	800b526 <_dtoa_r+0x606>
 800b4f0:	eeb4 7b46 	vcmp.f64	d7, d6
 800b4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f8:	d103      	bne.n	800b502 <_dtoa_r+0x5e2>
 800b4fa:	ee15 3a10 	vmov	r3, s10
 800b4fe:	07d9      	lsls	r1, r3, #31
 800b500:	d411      	bmi.n	800b526 <_dtoa_r+0x606>
 800b502:	4629      	mov	r1, r5
 800b504:	4630      	mov	r0, r6
 800b506:	f000 fae7 	bl	800bad8 <_Bfree>
 800b50a:	2300      	movs	r3, #0
 800b50c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b50e:	f888 3000 	strb.w	r3, [r8]
 800b512:	f10b 0301 	add.w	r3, fp, #1
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f43f ad4d 	beq.w	800afba <_dtoa_r+0x9a>
 800b520:	f8c3 8000 	str.w	r8, [r3]
 800b524:	e549      	b.n	800afba <_dtoa_r+0x9a>
 800b526:	465f      	mov	r7, fp
 800b528:	4643      	mov	r3, r8
 800b52a:	4698      	mov	r8, r3
 800b52c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b530:	2a39      	cmp	r2, #57	; 0x39
 800b532:	d106      	bne.n	800b542 <_dtoa_r+0x622>
 800b534:	9a00      	ldr	r2, [sp, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d1f7      	bne.n	800b52a <_dtoa_r+0x60a>
 800b53a:	9900      	ldr	r1, [sp, #0]
 800b53c:	2230      	movs	r2, #48	; 0x30
 800b53e:	3701      	adds	r7, #1
 800b540:	700a      	strb	r2, [r1, #0]
 800b542:	781a      	ldrb	r2, [r3, #0]
 800b544:	3201      	adds	r2, #1
 800b546:	701a      	strb	r2, [r3, #0]
 800b548:	e7ae      	b.n	800b4a8 <_dtoa_r+0x588>
 800b54a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b54e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b556:	d1b2      	bne.n	800b4be <_dtoa_r+0x59e>
 800b558:	e7d3      	b.n	800b502 <_dtoa_r+0x5e2>
 800b55a:	bf00      	nop
 800b55c:	0800d690 	.word	0x0800d690
 800b560:	0800d668 	.word	0x0800d668
 800b564:	9908      	ldr	r1, [sp, #32]
 800b566:	2900      	cmp	r1, #0
 800b568:	f000 80d1 	beq.w	800b70e <_dtoa_r+0x7ee>
 800b56c:	9907      	ldr	r1, [sp, #28]
 800b56e:	2901      	cmp	r1, #1
 800b570:	f300 80b4 	bgt.w	800b6dc <_dtoa_r+0x7bc>
 800b574:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b576:	2900      	cmp	r1, #0
 800b578:	f000 80ac 	beq.w	800b6d4 <_dtoa_r+0x7b4>
 800b57c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b580:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b584:	461c      	mov	r4, r3
 800b586:	930a      	str	r3, [sp, #40]	; 0x28
 800b588:	9b05      	ldr	r3, [sp, #20]
 800b58a:	4413      	add	r3, r2
 800b58c:	9305      	str	r3, [sp, #20]
 800b58e:	9b06      	ldr	r3, [sp, #24]
 800b590:	2101      	movs	r1, #1
 800b592:	4413      	add	r3, r2
 800b594:	4630      	mov	r0, r6
 800b596:	9306      	str	r3, [sp, #24]
 800b598:	f000 fb5a 	bl	800bc50 <__i2b>
 800b59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f1b8 0f00 	cmp.w	r8, #0
 800b5a4:	dd0d      	ble.n	800b5c2 <_dtoa_r+0x6a2>
 800b5a6:	9a06      	ldr	r2, [sp, #24]
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	dd0a      	ble.n	800b5c2 <_dtoa_r+0x6a2>
 800b5ac:	4542      	cmp	r2, r8
 800b5ae:	9905      	ldr	r1, [sp, #20]
 800b5b0:	bfa8      	it	ge
 800b5b2:	4642      	movge	r2, r8
 800b5b4:	1a89      	subs	r1, r1, r2
 800b5b6:	9105      	str	r1, [sp, #20]
 800b5b8:	9906      	ldr	r1, [sp, #24]
 800b5ba:	eba8 0802 	sub.w	r8, r8, r2
 800b5be:	1a8a      	subs	r2, r1, r2
 800b5c0:	9206      	str	r2, [sp, #24]
 800b5c2:	b303      	cbz	r3, 800b606 <_dtoa_r+0x6e6>
 800b5c4:	9a08      	ldr	r2, [sp, #32]
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	f000 80a6 	beq.w	800b718 <_dtoa_r+0x7f8>
 800b5cc:	2c00      	cmp	r4, #0
 800b5ce:	dd13      	ble.n	800b5f8 <_dtoa_r+0x6d8>
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5d8:	f000 fbf6 	bl	800bdc8 <__pow5mult>
 800b5dc:	462a      	mov	r2, r5
 800b5de:	4601      	mov	r1, r0
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f000 fb4a 	bl	800bc7c <__multiply>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	900a      	str	r0, [sp, #40]	; 0x28
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f000 fa73 	bl	800bad8 <_Bfree>
 800b5f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5f6:	4615      	mov	r5, r2
 800b5f8:	1b1a      	subs	r2, r3, r4
 800b5fa:	d004      	beq.n	800b606 <_dtoa_r+0x6e6>
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	4630      	mov	r0, r6
 800b600:	f000 fbe2 	bl	800bdc8 <__pow5mult>
 800b604:	4605      	mov	r5, r0
 800b606:	2101      	movs	r1, #1
 800b608:	4630      	mov	r0, r6
 800b60a:	f000 fb21 	bl	800bc50 <__i2b>
 800b60e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b610:	2b00      	cmp	r3, #0
 800b612:	4604      	mov	r4, r0
 800b614:	f340 8082 	ble.w	800b71c <_dtoa_r+0x7fc>
 800b618:	461a      	mov	r2, r3
 800b61a:	4601      	mov	r1, r0
 800b61c:	4630      	mov	r0, r6
 800b61e:	f000 fbd3 	bl	800bdc8 <__pow5mult>
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	2b01      	cmp	r3, #1
 800b626:	4604      	mov	r4, r0
 800b628:	dd7b      	ble.n	800b722 <_dtoa_r+0x802>
 800b62a:	2300      	movs	r3, #0
 800b62c:	930a      	str	r3, [sp, #40]	; 0x28
 800b62e:	6922      	ldr	r2, [r4, #16]
 800b630:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b634:	6910      	ldr	r0, [r2, #16]
 800b636:	f000 fabb 	bl	800bbb0 <__hi0bits>
 800b63a:	f1c0 0020 	rsb	r0, r0, #32
 800b63e:	9b06      	ldr	r3, [sp, #24]
 800b640:	4418      	add	r0, r3
 800b642:	f010 001f 	ands.w	r0, r0, #31
 800b646:	f000 808d 	beq.w	800b764 <_dtoa_r+0x844>
 800b64a:	f1c0 0220 	rsb	r2, r0, #32
 800b64e:	2a04      	cmp	r2, #4
 800b650:	f340 8086 	ble.w	800b760 <_dtoa_r+0x840>
 800b654:	f1c0 001c 	rsb	r0, r0, #28
 800b658:	9b05      	ldr	r3, [sp, #20]
 800b65a:	4403      	add	r3, r0
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	9b06      	ldr	r3, [sp, #24]
 800b660:	4403      	add	r3, r0
 800b662:	4480      	add	r8, r0
 800b664:	9306      	str	r3, [sp, #24]
 800b666:	9b05      	ldr	r3, [sp, #20]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dd05      	ble.n	800b678 <_dtoa_r+0x758>
 800b66c:	4629      	mov	r1, r5
 800b66e:	461a      	mov	r2, r3
 800b670:	4630      	mov	r0, r6
 800b672:	f000 fc03 	bl	800be7c <__lshift>
 800b676:	4605      	mov	r5, r0
 800b678:	9b06      	ldr	r3, [sp, #24]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dd05      	ble.n	800b68a <_dtoa_r+0x76a>
 800b67e:	4621      	mov	r1, r4
 800b680:	461a      	mov	r2, r3
 800b682:	4630      	mov	r0, r6
 800b684:	f000 fbfa 	bl	800be7c <__lshift>
 800b688:	4604      	mov	r4, r0
 800b68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d06b      	beq.n	800b768 <_dtoa_r+0x848>
 800b690:	4621      	mov	r1, r4
 800b692:	4628      	mov	r0, r5
 800b694:	f000 fc5e 	bl	800bf54 <__mcmp>
 800b698:	2800      	cmp	r0, #0
 800b69a:	da65      	bge.n	800b768 <_dtoa_r+0x848>
 800b69c:	2300      	movs	r3, #0
 800b69e:	4629      	mov	r1, r5
 800b6a0:	220a      	movs	r2, #10
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f000 fa3a 	bl	800bb1c <__multadd>
 800b6a8:	9b08      	ldr	r3, [sp, #32]
 800b6aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 8192 	beq.w	800b9da <_dtoa_r+0xaba>
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	220a      	movs	r2, #10
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f000 fa2d 	bl	800bb1c <__multadd>
 800b6c2:	f1ba 0f00 	cmp.w	sl, #0
 800b6c6:	4607      	mov	r7, r0
 800b6c8:	f300 808e 	bgt.w	800b7e8 <_dtoa_r+0x8c8>
 800b6cc:	9b07      	ldr	r3, [sp, #28]
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	dc51      	bgt.n	800b776 <_dtoa_r+0x856>
 800b6d2:	e089      	b.n	800b7e8 <_dtoa_r+0x8c8>
 800b6d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b6da:	e751      	b.n	800b580 <_dtoa_r+0x660>
 800b6dc:	f109 34ff 	add.w	r4, r9, #4294967295
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	bfbf      	itttt	lt
 800b6e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b6e6:	1ae3      	sublt	r3, r4, r3
 800b6e8:	18d2      	addlt	r2, r2, r3
 800b6ea:	4613      	movlt	r3, r2
 800b6ec:	bfb7      	itett	lt
 800b6ee:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b6f0:	1b1c      	subge	r4, r3, r4
 800b6f2:	4623      	movlt	r3, r4
 800b6f4:	2400      	movlt	r4, #0
 800b6f6:	f1b9 0f00 	cmp.w	r9, #0
 800b6fa:	bfb5      	itete	lt
 800b6fc:	9a05      	ldrlt	r2, [sp, #20]
 800b6fe:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800b702:	eba2 0809 	sublt.w	r8, r2, r9
 800b706:	464a      	movge	r2, r9
 800b708:	bfb8      	it	lt
 800b70a:	2200      	movlt	r2, #0
 800b70c:	e73b      	b.n	800b586 <_dtoa_r+0x666>
 800b70e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b712:	9f08      	ldr	r7, [sp, #32]
 800b714:	461c      	mov	r4, r3
 800b716:	e743      	b.n	800b5a0 <_dtoa_r+0x680>
 800b718:	461a      	mov	r2, r3
 800b71a:	e76f      	b.n	800b5fc <_dtoa_r+0x6dc>
 800b71c:	9b07      	ldr	r3, [sp, #28]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	dc18      	bgt.n	800b754 <_dtoa_r+0x834>
 800b722:	9b02      	ldr	r3, [sp, #8]
 800b724:	b9b3      	cbnz	r3, 800b754 <_dtoa_r+0x834>
 800b726:	9b03      	ldr	r3, [sp, #12]
 800b728:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b72c:	b9a2      	cbnz	r2, 800b758 <_dtoa_r+0x838>
 800b72e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b732:	0d12      	lsrs	r2, r2, #20
 800b734:	0512      	lsls	r2, r2, #20
 800b736:	b18a      	cbz	r2, 800b75c <_dtoa_r+0x83c>
 800b738:	9b05      	ldr	r3, [sp, #20]
 800b73a:	3301      	adds	r3, #1
 800b73c:	9305      	str	r3, [sp, #20]
 800b73e:	9b06      	ldr	r3, [sp, #24]
 800b740:	3301      	adds	r3, #1
 800b742:	9306      	str	r3, [sp, #24]
 800b744:	2301      	movs	r3, #1
 800b746:	930a      	str	r3, [sp, #40]	; 0x28
 800b748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f47f af6f 	bne.w	800b62e <_dtoa_r+0x70e>
 800b750:	2001      	movs	r0, #1
 800b752:	e774      	b.n	800b63e <_dtoa_r+0x71e>
 800b754:	2300      	movs	r3, #0
 800b756:	e7f6      	b.n	800b746 <_dtoa_r+0x826>
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	e7f4      	b.n	800b746 <_dtoa_r+0x826>
 800b75c:	920a      	str	r2, [sp, #40]	; 0x28
 800b75e:	e7f3      	b.n	800b748 <_dtoa_r+0x828>
 800b760:	d081      	beq.n	800b666 <_dtoa_r+0x746>
 800b762:	4610      	mov	r0, r2
 800b764:	301c      	adds	r0, #28
 800b766:	e777      	b.n	800b658 <_dtoa_r+0x738>
 800b768:	f1b9 0f00 	cmp.w	r9, #0
 800b76c:	dc37      	bgt.n	800b7de <_dtoa_r+0x8be>
 800b76e:	9b07      	ldr	r3, [sp, #28]
 800b770:	2b02      	cmp	r3, #2
 800b772:	dd34      	ble.n	800b7de <_dtoa_r+0x8be>
 800b774:	46ca      	mov	sl, r9
 800b776:	f1ba 0f00 	cmp.w	sl, #0
 800b77a:	d10d      	bne.n	800b798 <_dtoa_r+0x878>
 800b77c:	4621      	mov	r1, r4
 800b77e:	4653      	mov	r3, sl
 800b780:	2205      	movs	r2, #5
 800b782:	4630      	mov	r0, r6
 800b784:	f000 f9ca 	bl	800bb1c <__multadd>
 800b788:	4601      	mov	r1, r0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4628      	mov	r0, r5
 800b78e:	f000 fbe1 	bl	800bf54 <__mcmp>
 800b792:	2800      	cmp	r0, #0
 800b794:	f73f adde 	bgt.w	800b354 <_dtoa_r+0x434>
 800b798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b79a:	f8dd 8000 	ldr.w	r8, [sp]
 800b79e:	ea6f 0b03 	mvn.w	fp, r3
 800b7a2:	f04f 0900 	mov.w	r9, #0
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f000 f995 	bl	800bad8 <_Bfree>
 800b7ae:	2f00      	cmp	r7, #0
 800b7b0:	f43f aea7 	beq.w	800b502 <_dtoa_r+0x5e2>
 800b7b4:	f1b9 0f00 	cmp.w	r9, #0
 800b7b8:	d005      	beq.n	800b7c6 <_dtoa_r+0x8a6>
 800b7ba:	45b9      	cmp	r9, r7
 800b7bc:	d003      	beq.n	800b7c6 <_dtoa_r+0x8a6>
 800b7be:	4649      	mov	r1, r9
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f000 f989 	bl	800bad8 <_Bfree>
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f000 f985 	bl	800bad8 <_Bfree>
 800b7ce:	e698      	b.n	800b502 <_dtoa_r+0x5e2>
 800b7d0:	2400      	movs	r4, #0
 800b7d2:	4627      	mov	r7, r4
 800b7d4:	e7e0      	b.n	800b798 <_dtoa_r+0x878>
 800b7d6:	46bb      	mov	fp, r7
 800b7d8:	4604      	mov	r4, r0
 800b7da:	4607      	mov	r7, r0
 800b7dc:	e5ba      	b.n	800b354 <_dtoa_r+0x434>
 800b7de:	9b08      	ldr	r3, [sp, #32]
 800b7e0:	46ca      	mov	sl, r9
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 8100 	beq.w	800b9e8 <_dtoa_r+0xac8>
 800b7e8:	f1b8 0f00 	cmp.w	r8, #0
 800b7ec:	dd05      	ble.n	800b7fa <_dtoa_r+0x8da>
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f000 fb42 	bl	800be7c <__lshift>
 800b7f8:	4607      	mov	r7, r0
 800b7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d05d      	beq.n	800b8bc <_dtoa_r+0x99c>
 800b800:	6879      	ldr	r1, [r7, #4]
 800b802:	4630      	mov	r0, r6
 800b804:	f000 f928 	bl	800ba58 <_Balloc>
 800b808:	4680      	mov	r8, r0
 800b80a:	b928      	cbnz	r0, 800b818 <_dtoa_r+0x8f8>
 800b80c:	4b82      	ldr	r3, [pc, #520]	; (800ba18 <_dtoa_r+0xaf8>)
 800b80e:	4602      	mov	r2, r0
 800b810:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b814:	f7ff bb9a 	b.w	800af4c <_dtoa_r+0x2c>
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	3202      	adds	r2, #2
 800b81c:	0092      	lsls	r2, r2, #2
 800b81e:	f107 010c 	add.w	r1, r7, #12
 800b822:	300c      	adds	r0, #12
 800b824:	f000 f90a 	bl	800ba3c <memcpy>
 800b828:	2201      	movs	r2, #1
 800b82a:	4641      	mov	r1, r8
 800b82c:	4630      	mov	r0, r6
 800b82e:	f000 fb25 	bl	800be7c <__lshift>
 800b832:	9b00      	ldr	r3, [sp, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	9305      	str	r3, [sp, #20]
 800b838:	9b00      	ldr	r3, [sp, #0]
 800b83a:	4453      	add	r3, sl
 800b83c:	9309      	str	r3, [sp, #36]	; 0x24
 800b83e:	9b02      	ldr	r3, [sp, #8]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	46b9      	mov	r9, r7
 800b846:	9308      	str	r3, [sp, #32]
 800b848:	4607      	mov	r7, r0
 800b84a:	9b05      	ldr	r3, [sp, #20]
 800b84c:	4621      	mov	r1, r4
 800b84e:	3b01      	subs	r3, #1
 800b850:	4628      	mov	r0, r5
 800b852:	9302      	str	r3, [sp, #8]
 800b854:	f7ff fad6 	bl	800ae04 <quorem>
 800b858:	4603      	mov	r3, r0
 800b85a:	3330      	adds	r3, #48	; 0x30
 800b85c:	9006      	str	r0, [sp, #24]
 800b85e:	4649      	mov	r1, r9
 800b860:	4628      	mov	r0, r5
 800b862:	930a      	str	r3, [sp, #40]	; 0x28
 800b864:	f000 fb76 	bl	800bf54 <__mcmp>
 800b868:	463a      	mov	r2, r7
 800b86a:	4682      	mov	sl, r0
 800b86c:	4621      	mov	r1, r4
 800b86e:	4630      	mov	r0, r6
 800b870:	f000 fb8c 	bl	800bf8c <__mdiff>
 800b874:	68c2      	ldr	r2, [r0, #12]
 800b876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b878:	4680      	mov	r8, r0
 800b87a:	bb0a      	cbnz	r2, 800b8c0 <_dtoa_r+0x9a0>
 800b87c:	4601      	mov	r1, r0
 800b87e:	4628      	mov	r0, r5
 800b880:	f000 fb68 	bl	800bf54 <__mcmp>
 800b884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b886:	4602      	mov	r2, r0
 800b888:	4641      	mov	r1, r8
 800b88a:	4630      	mov	r0, r6
 800b88c:	920e      	str	r2, [sp, #56]	; 0x38
 800b88e:	930a      	str	r3, [sp, #40]	; 0x28
 800b890:	f000 f922 	bl	800bad8 <_Bfree>
 800b894:	9b07      	ldr	r3, [sp, #28]
 800b896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b898:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b89c:	ea43 0102 	orr.w	r1, r3, r2
 800b8a0:	9b08      	ldr	r3, [sp, #32]
 800b8a2:	430b      	orrs	r3, r1
 800b8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8a6:	d10d      	bne.n	800b8c4 <_dtoa_r+0x9a4>
 800b8a8:	2b39      	cmp	r3, #57	; 0x39
 800b8aa:	d029      	beq.n	800b900 <_dtoa_r+0x9e0>
 800b8ac:	f1ba 0f00 	cmp.w	sl, #0
 800b8b0:	dd01      	ble.n	800b8b6 <_dtoa_r+0x996>
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	3331      	adds	r3, #49	; 0x31
 800b8b6:	9a02      	ldr	r2, [sp, #8]
 800b8b8:	7013      	strb	r3, [r2, #0]
 800b8ba:	e774      	b.n	800b7a6 <_dtoa_r+0x886>
 800b8bc:	4638      	mov	r0, r7
 800b8be:	e7b8      	b.n	800b832 <_dtoa_r+0x912>
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	e7e1      	b.n	800b888 <_dtoa_r+0x968>
 800b8c4:	f1ba 0f00 	cmp.w	sl, #0
 800b8c8:	db06      	blt.n	800b8d8 <_dtoa_r+0x9b8>
 800b8ca:	9907      	ldr	r1, [sp, #28]
 800b8cc:	ea41 0a0a 	orr.w	sl, r1, sl
 800b8d0:	9908      	ldr	r1, [sp, #32]
 800b8d2:	ea5a 0101 	orrs.w	r1, sl, r1
 800b8d6:	d120      	bne.n	800b91a <_dtoa_r+0x9fa>
 800b8d8:	2a00      	cmp	r2, #0
 800b8da:	ddec      	ble.n	800b8b6 <_dtoa_r+0x996>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	f000 faca 	bl	800be7c <__lshift>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	f000 fb32 	bl	800bf54 <__mcmp>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	9b05      	ldr	r3, [sp, #20]
 800b8f4:	dc02      	bgt.n	800b8fc <_dtoa_r+0x9dc>
 800b8f6:	d1de      	bne.n	800b8b6 <_dtoa_r+0x996>
 800b8f8:	07da      	lsls	r2, r3, #31
 800b8fa:	d5dc      	bpl.n	800b8b6 <_dtoa_r+0x996>
 800b8fc:	2b39      	cmp	r3, #57	; 0x39
 800b8fe:	d1d8      	bne.n	800b8b2 <_dtoa_r+0x992>
 800b900:	9a02      	ldr	r2, [sp, #8]
 800b902:	2339      	movs	r3, #57	; 0x39
 800b904:	7013      	strb	r3, [r2, #0]
 800b906:	4643      	mov	r3, r8
 800b908:	4698      	mov	r8, r3
 800b90a:	3b01      	subs	r3, #1
 800b90c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b910:	2a39      	cmp	r2, #57	; 0x39
 800b912:	d051      	beq.n	800b9b8 <_dtoa_r+0xa98>
 800b914:	3201      	adds	r2, #1
 800b916:	701a      	strb	r2, [r3, #0]
 800b918:	e745      	b.n	800b7a6 <_dtoa_r+0x886>
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	dd03      	ble.n	800b926 <_dtoa_r+0xa06>
 800b91e:	2b39      	cmp	r3, #57	; 0x39
 800b920:	d0ee      	beq.n	800b900 <_dtoa_r+0x9e0>
 800b922:	3301      	adds	r3, #1
 800b924:	e7c7      	b.n	800b8b6 <_dtoa_r+0x996>
 800b926:	9a05      	ldr	r2, [sp, #20]
 800b928:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b92a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b92e:	428a      	cmp	r2, r1
 800b930:	d02b      	beq.n	800b98a <_dtoa_r+0xa6a>
 800b932:	4629      	mov	r1, r5
 800b934:	2300      	movs	r3, #0
 800b936:	220a      	movs	r2, #10
 800b938:	4630      	mov	r0, r6
 800b93a:	f000 f8ef 	bl	800bb1c <__multadd>
 800b93e:	45b9      	cmp	r9, r7
 800b940:	4605      	mov	r5, r0
 800b942:	f04f 0300 	mov.w	r3, #0
 800b946:	f04f 020a 	mov.w	r2, #10
 800b94a:	4649      	mov	r1, r9
 800b94c:	4630      	mov	r0, r6
 800b94e:	d107      	bne.n	800b960 <_dtoa_r+0xa40>
 800b950:	f000 f8e4 	bl	800bb1c <__multadd>
 800b954:	4681      	mov	r9, r0
 800b956:	4607      	mov	r7, r0
 800b958:	9b05      	ldr	r3, [sp, #20]
 800b95a:	3301      	adds	r3, #1
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	e774      	b.n	800b84a <_dtoa_r+0x92a>
 800b960:	f000 f8dc 	bl	800bb1c <__multadd>
 800b964:	4639      	mov	r1, r7
 800b966:	4681      	mov	r9, r0
 800b968:	2300      	movs	r3, #0
 800b96a:	220a      	movs	r2, #10
 800b96c:	4630      	mov	r0, r6
 800b96e:	f000 f8d5 	bl	800bb1c <__multadd>
 800b972:	4607      	mov	r7, r0
 800b974:	e7f0      	b.n	800b958 <_dtoa_r+0xa38>
 800b976:	f1ba 0f00 	cmp.w	sl, #0
 800b97a:	9a00      	ldr	r2, [sp, #0]
 800b97c:	bfcc      	ite	gt
 800b97e:	46d0      	movgt	r8, sl
 800b980:	f04f 0801 	movle.w	r8, #1
 800b984:	4490      	add	r8, r2
 800b986:	f04f 0900 	mov.w	r9, #0
 800b98a:	4629      	mov	r1, r5
 800b98c:	2201      	movs	r2, #1
 800b98e:	4630      	mov	r0, r6
 800b990:	9302      	str	r3, [sp, #8]
 800b992:	f000 fa73 	bl	800be7c <__lshift>
 800b996:	4621      	mov	r1, r4
 800b998:	4605      	mov	r5, r0
 800b99a:	f000 fadb 	bl	800bf54 <__mcmp>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	dcb1      	bgt.n	800b906 <_dtoa_r+0x9e6>
 800b9a2:	d102      	bne.n	800b9aa <_dtoa_r+0xa8a>
 800b9a4:	9b02      	ldr	r3, [sp, #8]
 800b9a6:	07db      	lsls	r3, r3, #31
 800b9a8:	d4ad      	bmi.n	800b906 <_dtoa_r+0x9e6>
 800b9aa:	4643      	mov	r3, r8
 800b9ac:	4698      	mov	r8, r3
 800b9ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9b2:	2a30      	cmp	r2, #48	; 0x30
 800b9b4:	d0fa      	beq.n	800b9ac <_dtoa_r+0xa8c>
 800b9b6:	e6f6      	b.n	800b7a6 <_dtoa_r+0x886>
 800b9b8:	9a00      	ldr	r2, [sp, #0]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d1a4      	bne.n	800b908 <_dtoa_r+0x9e8>
 800b9be:	f10b 0b01 	add.w	fp, fp, #1
 800b9c2:	2331      	movs	r3, #49	; 0x31
 800b9c4:	e778      	b.n	800b8b8 <_dtoa_r+0x998>
 800b9c6:	4b15      	ldr	r3, [pc, #84]	; (800ba1c <_dtoa_r+0xafc>)
 800b9c8:	f7ff bb12 	b.w	800aff0 <_dtoa_r+0xd0>
 800b9cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f47f aaee 	bne.w	800afb0 <_dtoa_r+0x90>
 800b9d4:	4b12      	ldr	r3, [pc, #72]	; (800ba20 <_dtoa_r+0xb00>)
 800b9d6:	f7ff bb0b 	b.w	800aff0 <_dtoa_r+0xd0>
 800b9da:	f1ba 0f00 	cmp.w	sl, #0
 800b9de:	dc03      	bgt.n	800b9e8 <_dtoa_r+0xac8>
 800b9e0:	9b07      	ldr	r3, [sp, #28]
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	f73f aec7 	bgt.w	800b776 <_dtoa_r+0x856>
 800b9e8:	f8dd 8000 	ldr.w	r8, [sp]
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f7ff fa08 	bl	800ae04 <quorem>
 800b9f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b9f8:	f808 3b01 	strb.w	r3, [r8], #1
 800b9fc:	9a00      	ldr	r2, [sp, #0]
 800b9fe:	eba8 0202 	sub.w	r2, r8, r2
 800ba02:	4592      	cmp	sl, r2
 800ba04:	ddb7      	ble.n	800b976 <_dtoa_r+0xa56>
 800ba06:	4629      	mov	r1, r5
 800ba08:	2300      	movs	r3, #0
 800ba0a:	220a      	movs	r2, #10
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f000 f885 	bl	800bb1c <__multadd>
 800ba12:	4605      	mov	r5, r0
 800ba14:	e7ea      	b.n	800b9ec <_dtoa_r+0xacc>
 800ba16:	bf00      	nop
 800ba18:	0800d5f3 	.word	0x0800d5f3
 800ba1c:	0800d54c 	.word	0x0800d54c
 800ba20:	0800d570 	.word	0x0800d570

0800ba24 <_localeconv_r>:
 800ba24:	4800      	ldr	r0, [pc, #0]	; (800ba28 <_localeconv_r+0x4>)
 800ba26:	4770      	bx	lr
 800ba28:	20000230 	.word	0x20000230

0800ba2c <malloc>:
 800ba2c:	4b02      	ldr	r3, [pc, #8]	; (800ba38 <malloc+0xc>)
 800ba2e:	4601      	mov	r1, r0
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	f000 bbef 	b.w	800c214 <_malloc_r>
 800ba36:	bf00      	nop
 800ba38:	200000dc 	.word	0x200000dc

0800ba3c <memcpy>:
 800ba3c:	440a      	add	r2, r1
 800ba3e:	4291      	cmp	r1, r2
 800ba40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba44:	d100      	bne.n	800ba48 <memcpy+0xc>
 800ba46:	4770      	bx	lr
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba52:	4291      	cmp	r1, r2
 800ba54:	d1f9      	bne.n	800ba4a <memcpy+0xe>
 800ba56:	bd10      	pop	{r4, pc}

0800ba58 <_Balloc>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	460d      	mov	r5, r1
 800ba60:	b976      	cbnz	r6, 800ba80 <_Balloc+0x28>
 800ba62:	2010      	movs	r0, #16
 800ba64:	f7ff ffe2 	bl	800ba2c <malloc>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba6c:	b920      	cbnz	r0, 800ba78 <_Balloc+0x20>
 800ba6e:	4b18      	ldr	r3, [pc, #96]	; (800bad0 <_Balloc+0x78>)
 800ba70:	4818      	ldr	r0, [pc, #96]	; (800bad4 <_Balloc+0x7c>)
 800ba72:	2166      	movs	r1, #102	; 0x66
 800ba74:	f000 fd94 	bl	800c5a0 <__assert_func>
 800ba78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba7c:	6006      	str	r6, [r0, #0]
 800ba7e:	60c6      	str	r6, [r0, #12]
 800ba80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba82:	68f3      	ldr	r3, [r6, #12]
 800ba84:	b183      	cbz	r3, 800baa8 <_Balloc+0x50>
 800ba86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba8e:	b9b8      	cbnz	r0, 800bac0 <_Balloc+0x68>
 800ba90:	2101      	movs	r1, #1
 800ba92:	fa01 f605 	lsl.w	r6, r1, r5
 800ba96:	1d72      	adds	r2, r6, #5
 800ba98:	0092      	lsls	r2, r2, #2
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 fb5a 	bl	800c154 <_calloc_r>
 800baa0:	b160      	cbz	r0, 800babc <_Balloc+0x64>
 800baa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baa6:	e00e      	b.n	800bac6 <_Balloc+0x6e>
 800baa8:	2221      	movs	r2, #33	; 0x21
 800baaa:	2104      	movs	r1, #4
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fb51 	bl	800c154 <_calloc_r>
 800bab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab4:	60f0      	str	r0, [r6, #12]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e4      	bne.n	800ba86 <_Balloc+0x2e>
 800babc:	2000      	movs	r0, #0
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	6802      	ldr	r2, [r0, #0]
 800bac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bac6:	2300      	movs	r3, #0
 800bac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bacc:	e7f7      	b.n	800babe <_Balloc+0x66>
 800bace:	bf00      	nop
 800bad0:	0800d57d 	.word	0x0800d57d
 800bad4:	0800d604 	.word	0x0800d604

0800bad8 <_Bfree>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800badc:	4605      	mov	r5, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	b976      	cbnz	r6, 800bb00 <_Bfree+0x28>
 800bae2:	2010      	movs	r0, #16
 800bae4:	f7ff ffa2 	bl	800ba2c <malloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	6268      	str	r0, [r5, #36]	; 0x24
 800baec:	b920      	cbnz	r0, 800baf8 <_Bfree+0x20>
 800baee:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <_Bfree+0x3c>)
 800baf0:	4809      	ldr	r0, [pc, #36]	; (800bb18 <_Bfree+0x40>)
 800baf2:	218a      	movs	r1, #138	; 0x8a
 800baf4:	f000 fd54 	bl	800c5a0 <__assert_func>
 800baf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bafc:	6006      	str	r6, [r0, #0]
 800bafe:	60c6      	str	r6, [r0, #12]
 800bb00:	b13c      	cbz	r4, 800bb12 <_Bfree+0x3a>
 800bb02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb04:	6862      	ldr	r2, [r4, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb0c:	6021      	str	r1, [r4, #0]
 800bb0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	0800d57d 	.word	0x0800d57d
 800bb18:	0800d604 	.word	0x0800d604

0800bb1c <__multadd>:
 800bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb20:	690e      	ldr	r6, [r1, #16]
 800bb22:	4607      	mov	r7, r0
 800bb24:	4698      	mov	r8, r3
 800bb26:	460c      	mov	r4, r1
 800bb28:	f101 0014 	add.w	r0, r1, #20
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	6805      	ldr	r5, [r0, #0]
 800bb30:	b2a9      	uxth	r1, r5
 800bb32:	fb02 8101 	mla	r1, r2, r1, r8
 800bb36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bb3a:	0c2d      	lsrs	r5, r5, #16
 800bb3c:	fb02 c505 	mla	r5, r2, r5, ip
 800bb40:	b289      	uxth	r1, r1
 800bb42:	3301      	adds	r3, #1
 800bb44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bb48:	429e      	cmp	r6, r3
 800bb4a:	f840 1b04 	str.w	r1, [r0], #4
 800bb4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb52:	dcec      	bgt.n	800bb2e <__multadd+0x12>
 800bb54:	f1b8 0f00 	cmp.w	r8, #0
 800bb58:	d022      	beq.n	800bba0 <__multadd+0x84>
 800bb5a:	68a3      	ldr	r3, [r4, #8]
 800bb5c:	42b3      	cmp	r3, r6
 800bb5e:	dc19      	bgt.n	800bb94 <__multadd+0x78>
 800bb60:	6861      	ldr	r1, [r4, #4]
 800bb62:	4638      	mov	r0, r7
 800bb64:	3101      	adds	r1, #1
 800bb66:	f7ff ff77 	bl	800ba58 <_Balloc>
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <__multadd+0x5e>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b0d      	ldr	r3, [pc, #52]	; (800bba8 <__multadd+0x8c>)
 800bb72:	480e      	ldr	r0, [pc, #56]	; (800bbac <__multadd+0x90>)
 800bb74:	21b5      	movs	r1, #181	; 0xb5
 800bb76:	f000 fd13 	bl	800c5a0 <__assert_func>
 800bb7a:	6922      	ldr	r2, [r4, #16]
 800bb7c:	3202      	adds	r2, #2
 800bb7e:	f104 010c 	add.w	r1, r4, #12
 800bb82:	0092      	lsls	r2, r2, #2
 800bb84:	300c      	adds	r0, #12
 800bb86:	f7ff ff59 	bl	800ba3c <memcpy>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f7ff ffa3 	bl	800bad8 <_Bfree>
 800bb92:	462c      	mov	r4, r5
 800bb94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb98:	3601      	adds	r6, #1
 800bb9a:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb9e:	6126      	str	r6, [r4, #16]
 800bba0:	4620      	mov	r0, r4
 800bba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba6:	bf00      	nop
 800bba8:	0800d5f3 	.word	0x0800d5f3
 800bbac:	0800d604 	.word	0x0800d604

0800bbb0 <__hi0bits>:
 800bbb0:	0c03      	lsrs	r3, r0, #16
 800bbb2:	041b      	lsls	r3, r3, #16
 800bbb4:	b9d3      	cbnz	r3, 800bbec <__hi0bits+0x3c>
 800bbb6:	0400      	lsls	r0, r0, #16
 800bbb8:	2310      	movs	r3, #16
 800bbba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbbe:	bf04      	itt	eq
 800bbc0:	0200      	lsleq	r0, r0, #8
 800bbc2:	3308      	addeq	r3, #8
 800bbc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbc8:	bf04      	itt	eq
 800bbca:	0100      	lsleq	r0, r0, #4
 800bbcc:	3304      	addeq	r3, #4
 800bbce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbd2:	bf04      	itt	eq
 800bbd4:	0080      	lsleq	r0, r0, #2
 800bbd6:	3302      	addeq	r3, #2
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	db05      	blt.n	800bbe8 <__hi0bits+0x38>
 800bbdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbe0:	f103 0301 	add.w	r3, r3, #1
 800bbe4:	bf08      	it	eq
 800bbe6:	2320      	moveq	r3, #32
 800bbe8:	4618      	mov	r0, r3
 800bbea:	4770      	bx	lr
 800bbec:	2300      	movs	r3, #0
 800bbee:	e7e4      	b.n	800bbba <__hi0bits+0xa>

0800bbf0 <__lo0bits>:
 800bbf0:	6803      	ldr	r3, [r0, #0]
 800bbf2:	f013 0207 	ands.w	r2, r3, #7
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	d00b      	beq.n	800bc12 <__lo0bits+0x22>
 800bbfa:	07da      	lsls	r2, r3, #31
 800bbfc:	d424      	bmi.n	800bc48 <__lo0bits+0x58>
 800bbfe:	0798      	lsls	r0, r3, #30
 800bc00:	bf49      	itett	mi
 800bc02:	085b      	lsrmi	r3, r3, #1
 800bc04:	089b      	lsrpl	r3, r3, #2
 800bc06:	2001      	movmi	r0, #1
 800bc08:	600b      	strmi	r3, [r1, #0]
 800bc0a:	bf5c      	itt	pl
 800bc0c:	600b      	strpl	r3, [r1, #0]
 800bc0e:	2002      	movpl	r0, #2
 800bc10:	4770      	bx	lr
 800bc12:	b298      	uxth	r0, r3
 800bc14:	b9b0      	cbnz	r0, 800bc44 <__lo0bits+0x54>
 800bc16:	0c1b      	lsrs	r3, r3, #16
 800bc18:	2010      	movs	r0, #16
 800bc1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc1e:	bf04      	itt	eq
 800bc20:	0a1b      	lsreq	r3, r3, #8
 800bc22:	3008      	addeq	r0, #8
 800bc24:	071a      	lsls	r2, r3, #28
 800bc26:	bf04      	itt	eq
 800bc28:	091b      	lsreq	r3, r3, #4
 800bc2a:	3004      	addeq	r0, #4
 800bc2c:	079a      	lsls	r2, r3, #30
 800bc2e:	bf04      	itt	eq
 800bc30:	089b      	lsreq	r3, r3, #2
 800bc32:	3002      	addeq	r0, #2
 800bc34:	07da      	lsls	r2, r3, #31
 800bc36:	d403      	bmi.n	800bc40 <__lo0bits+0x50>
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	f100 0001 	add.w	r0, r0, #1
 800bc3e:	d005      	beq.n	800bc4c <__lo0bits+0x5c>
 800bc40:	600b      	str	r3, [r1, #0]
 800bc42:	4770      	bx	lr
 800bc44:	4610      	mov	r0, r2
 800bc46:	e7e8      	b.n	800bc1a <__lo0bits+0x2a>
 800bc48:	2000      	movs	r0, #0
 800bc4a:	4770      	bx	lr
 800bc4c:	2020      	movs	r0, #32
 800bc4e:	4770      	bx	lr

0800bc50 <__i2b>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	460c      	mov	r4, r1
 800bc54:	2101      	movs	r1, #1
 800bc56:	f7ff feff 	bl	800ba58 <_Balloc>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	b928      	cbnz	r0, 800bc6a <__i2b+0x1a>
 800bc5e:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <__i2b+0x24>)
 800bc60:	4805      	ldr	r0, [pc, #20]	; (800bc78 <__i2b+0x28>)
 800bc62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc66:	f000 fc9b 	bl	800c5a0 <__assert_func>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	6144      	str	r4, [r0, #20]
 800bc6e:	6103      	str	r3, [r0, #16]
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	bf00      	nop
 800bc74:	0800d5f3 	.word	0x0800d5f3
 800bc78:	0800d604 	.word	0x0800d604

0800bc7c <__multiply>:
 800bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	4614      	mov	r4, r2
 800bc82:	690a      	ldr	r2, [r1, #16]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	bfb8      	it	lt
 800bc8a:	460b      	movlt	r3, r1
 800bc8c:	460d      	mov	r5, r1
 800bc8e:	bfbc      	itt	lt
 800bc90:	4625      	movlt	r5, r4
 800bc92:	461c      	movlt	r4, r3
 800bc94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bc98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bc9c:	68ab      	ldr	r3, [r5, #8]
 800bc9e:	6869      	ldr	r1, [r5, #4]
 800bca0:	eb0a 0709 	add.w	r7, sl, r9
 800bca4:	42bb      	cmp	r3, r7
 800bca6:	b085      	sub	sp, #20
 800bca8:	bfb8      	it	lt
 800bcaa:	3101      	addlt	r1, #1
 800bcac:	f7ff fed4 	bl	800ba58 <_Balloc>
 800bcb0:	b930      	cbnz	r0, 800bcc0 <__multiply+0x44>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	4b42      	ldr	r3, [pc, #264]	; (800bdc0 <__multiply+0x144>)
 800bcb6:	4843      	ldr	r0, [pc, #268]	; (800bdc4 <__multiply+0x148>)
 800bcb8:	f240 115d 	movw	r1, #349	; 0x15d
 800bcbc:	f000 fc70 	bl	800c5a0 <__assert_func>
 800bcc0:	f100 0614 	add.w	r6, r0, #20
 800bcc4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bcc8:	4633      	mov	r3, r6
 800bcca:	2200      	movs	r2, #0
 800bccc:	4543      	cmp	r3, r8
 800bcce:	d31e      	bcc.n	800bd0e <__multiply+0x92>
 800bcd0:	f105 0c14 	add.w	ip, r5, #20
 800bcd4:	f104 0314 	add.w	r3, r4, #20
 800bcd8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bcdc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bce0:	9202      	str	r2, [sp, #8]
 800bce2:	ebac 0205 	sub.w	r2, ip, r5
 800bce6:	3a15      	subs	r2, #21
 800bce8:	f022 0203 	bic.w	r2, r2, #3
 800bcec:	3204      	adds	r2, #4
 800bcee:	f105 0115 	add.w	r1, r5, #21
 800bcf2:	458c      	cmp	ip, r1
 800bcf4:	bf38      	it	cc
 800bcf6:	2204      	movcc	r2, #4
 800bcf8:	9201      	str	r2, [sp, #4]
 800bcfa:	9a02      	ldr	r2, [sp, #8]
 800bcfc:	9303      	str	r3, [sp, #12]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d808      	bhi.n	800bd14 <__multiply+0x98>
 800bd02:	2f00      	cmp	r7, #0
 800bd04:	dc55      	bgt.n	800bdb2 <__multiply+0x136>
 800bd06:	6107      	str	r7, [r0, #16]
 800bd08:	b005      	add	sp, #20
 800bd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0e:	f843 2b04 	str.w	r2, [r3], #4
 800bd12:	e7db      	b.n	800bccc <__multiply+0x50>
 800bd14:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd18:	f1ba 0f00 	cmp.w	sl, #0
 800bd1c:	d020      	beq.n	800bd60 <__multiply+0xe4>
 800bd1e:	f105 0e14 	add.w	lr, r5, #20
 800bd22:	46b1      	mov	r9, r6
 800bd24:	2200      	movs	r2, #0
 800bd26:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd2a:	f8d9 b000 	ldr.w	fp, [r9]
 800bd2e:	b2a1      	uxth	r1, r4
 800bd30:	fa1f fb8b 	uxth.w	fp, fp
 800bd34:	fb0a b101 	mla	r1, sl, r1, fp
 800bd38:	4411      	add	r1, r2
 800bd3a:	f8d9 2000 	ldr.w	r2, [r9]
 800bd3e:	0c24      	lsrs	r4, r4, #16
 800bd40:	0c12      	lsrs	r2, r2, #16
 800bd42:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd4a:	b289      	uxth	r1, r1
 800bd4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd50:	45f4      	cmp	ip, lr
 800bd52:	f849 1b04 	str.w	r1, [r9], #4
 800bd56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd5a:	d8e4      	bhi.n	800bd26 <__multiply+0xaa>
 800bd5c:	9901      	ldr	r1, [sp, #4]
 800bd5e:	5072      	str	r2, [r6, r1]
 800bd60:	9a03      	ldr	r2, [sp, #12]
 800bd62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd66:	3304      	adds	r3, #4
 800bd68:	f1b9 0f00 	cmp.w	r9, #0
 800bd6c:	d01f      	beq.n	800bdae <__multiply+0x132>
 800bd6e:	6834      	ldr	r4, [r6, #0]
 800bd70:	f105 0114 	add.w	r1, r5, #20
 800bd74:	46b6      	mov	lr, r6
 800bd76:	f04f 0a00 	mov.w	sl, #0
 800bd7a:	880a      	ldrh	r2, [r1, #0]
 800bd7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd80:	fb09 b202 	mla	r2, r9, r2, fp
 800bd84:	4492      	add	sl, r2
 800bd86:	b2a4      	uxth	r4, r4
 800bd88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bd8c:	f84e 4b04 	str.w	r4, [lr], #4
 800bd90:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd94:	f8be 2000 	ldrh.w	r2, [lr]
 800bd98:	0c24      	lsrs	r4, r4, #16
 800bd9a:	fb09 2404 	mla	r4, r9, r4, r2
 800bd9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bda2:	458c      	cmp	ip, r1
 800bda4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bda8:	d8e7      	bhi.n	800bd7a <__multiply+0xfe>
 800bdaa:	9a01      	ldr	r2, [sp, #4]
 800bdac:	50b4      	str	r4, [r6, r2]
 800bdae:	3604      	adds	r6, #4
 800bdb0:	e7a3      	b.n	800bcfa <__multiply+0x7e>
 800bdb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1a5      	bne.n	800bd06 <__multiply+0x8a>
 800bdba:	3f01      	subs	r7, #1
 800bdbc:	e7a1      	b.n	800bd02 <__multiply+0x86>
 800bdbe:	bf00      	nop
 800bdc0:	0800d5f3 	.word	0x0800d5f3
 800bdc4:	0800d604 	.word	0x0800d604

0800bdc8 <__pow5mult>:
 800bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdcc:	4615      	mov	r5, r2
 800bdce:	f012 0203 	ands.w	r2, r2, #3
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	d007      	beq.n	800bde8 <__pow5mult+0x20>
 800bdd8:	4c25      	ldr	r4, [pc, #148]	; (800be70 <__pow5mult+0xa8>)
 800bdda:	3a01      	subs	r2, #1
 800bddc:	2300      	movs	r3, #0
 800bdde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bde2:	f7ff fe9b 	bl	800bb1c <__multadd>
 800bde6:	4607      	mov	r7, r0
 800bde8:	10ad      	asrs	r5, r5, #2
 800bdea:	d03d      	beq.n	800be68 <__pow5mult+0xa0>
 800bdec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdee:	b97c      	cbnz	r4, 800be10 <__pow5mult+0x48>
 800bdf0:	2010      	movs	r0, #16
 800bdf2:	f7ff fe1b 	bl	800ba2c <malloc>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	6270      	str	r0, [r6, #36]	; 0x24
 800bdfa:	b928      	cbnz	r0, 800be08 <__pow5mult+0x40>
 800bdfc:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <__pow5mult+0xac>)
 800bdfe:	481e      	ldr	r0, [pc, #120]	; (800be78 <__pow5mult+0xb0>)
 800be00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be04:	f000 fbcc 	bl	800c5a0 <__assert_func>
 800be08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be0c:	6004      	str	r4, [r0, #0]
 800be0e:	60c4      	str	r4, [r0, #12]
 800be10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be18:	b94c      	cbnz	r4, 800be2e <__pow5mult+0x66>
 800be1a:	f240 2171 	movw	r1, #625	; 0x271
 800be1e:	4630      	mov	r0, r6
 800be20:	f7ff ff16 	bl	800bc50 <__i2b>
 800be24:	2300      	movs	r3, #0
 800be26:	f8c8 0008 	str.w	r0, [r8, #8]
 800be2a:	4604      	mov	r4, r0
 800be2c:	6003      	str	r3, [r0, #0]
 800be2e:	f04f 0900 	mov.w	r9, #0
 800be32:	07eb      	lsls	r3, r5, #31
 800be34:	d50a      	bpl.n	800be4c <__pow5mult+0x84>
 800be36:	4639      	mov	r1, r7
 800be38:	4622      	mov	r2, r4
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7ff ff1e 	bl	800bc7c <__multiply>
 800be40:	4639      	mov	r1, r7
 800be42:	4680      	mov	r8, r0
 800be44:	4630      	mov	r0, r6
 800be46:	f7ff fe47 	bl	800bad8 <_Bfree>
 800be4a:	4647      	mov	r7, r8
 800be4c:	106d      	asrs	r5, r5, #1
 800be4e:	d00b      	beq.n	800be68 <__pow5mult+0xa0>
 800be50:	6820      	ldr	r0, [r4, #0]
 800be52:	b938      	cbnz	r0, 800be64 <__pow5mult+0x9c>
 800be54:	4622      	mov	r2, r4
 800be56:	4621      	mov	r1, r4
 800be58:	4630      	mov	r0, r6
 800be5a:	f7ff ff0f 	bl	800bc7c <__multiply>
 800be5e:	6020      	str	r0, [r4, #0]
 800be60:	f8c0 9000 	str.w	r9, [r0]
 800be64:	4604      	mov	r4, r0
 800be66:	e7e4      	b.n	800be32 <__pow5mult+0x6a>
 800be68:	4638      	mov	r0, r7
 800be6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6e:	bf00      	nop
 800be70:	0800d758 	.word	0x0800d758
 800be74:	0800d57d 	.word	0x0800d57d
 800be78:	0800d604 	.word	0x0800d604

0800be7c <__lshift>:
 800be7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be80:	460c      	mov	r4, r1
 800be82:	6849      	ldr	r1, [r1, #4]
 800be84:	6923      	ldr	r3, [r4, #16]
 800be86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be8a:	68a3      	ldr	r3, [r4, #8]
 800be8c:	4607      	mov	r7, r0
 800be8e:	4691      	mov	r9, r2
 800be90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be94:	f108 0601 	add.w	r6, r8, #1
 800be98:	42b3      	cmp	r3, r6
 800be9a:	db0b      	blt.n	800beb4 <__lshift+0x38>
 800be9c:	4638      	mov	r0, r7
 800be9e:	f7ff fddb 	bl	800ba58 <_Balloc>
 800bea2:	4605      	mov	r5, r0
 800bea4:	b948      	cbnz	r0, 800beba <__lshift+0x3e>
 800bea6:	4602      	mov	r2, r0
 800bea8:	4b28      	ldr	r3, [pc, #160]	; (800bf4c <__lshift+0xd0>)
 800beaa:	4829      	ldr	r0, [pc, #164]	; (800bf50 <__lshift+0xd4>)
 800beac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800beb0:	f000 fb76 	bl	800c5a0 <__assert_func>
 800beb4:	3101      	adds	r1, #1
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	e7ee      	b.n	800be98 <__lshift+0x1c>
 800beba:	2300      	movs	r3, #0
 800bebc:	f100 0114 	add.w	r1, r0, #20
 800bec0:	f100 0210 	add.w	r2, r0, #16
 800bec4:	4618      	mov	r0, r3
 800bec6:	4553      	cmp	r3, sl
 800bec8:	db33      	blt.n	800bf32 <__lshift+0xb6>
 800beca:	6920      	ldr	r0, [r4, #16]
 800becc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bed0:	f104 0314 	add.w	r3, r4, #20
 800bed4:	f019 091f 	ands.w	r9, r9, #31
 800bed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bedc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bee0:	d02b      	beq.n	800bf3a <__lshift+0xbe>
 800bee2:	f1c9 0e20 	rsb	lr, r9, #32
 800bee6:	468a      	mov	sl, r1
 800bee8:	2200      	movs	r2, #0
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	fa00 f009 	lsl.w	r0, r0, r9
 800bef0:	4302      	orrs	r2, r0
 800bef2:	f84a 2b04 	str.w	r2, [sl], #4
 800bef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800befa:	459c      	cmp	ip, r3
 800befc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf00:	d8f3      	bhi.n	800beea <__lshift+0x6e>
 800bf02:	ebac 0304 	sub.w	r3, ip, r4
 800bf06:	3b15      	subs	r3, #21
 800bf08:	f023 0303 	bic.w	r3, r3, #3
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	f104 0015 	add.w	r0, r4, #21
 800bf12:	4584      	cmp	ip, r0
 800bf14:	bf38      	it	cc
 800bf16:	2304      	movcc	r3, #4
 800bf18:	50ca      	str	r2, [r1, r3]
 800bf1a:	b10a      	cbz	r2, 800bf20 <__lshift+0xa4>
 800bf1c:	f108 0602 	add.w	r6, r8, #2
 800bf20:	3e01      	subs	r6, #1
 800bf22:	4638      	mov	r0, r7
 800bf24:	612e      	str	r6, [r5, #16]
 800bf26:	4621      	mov	r1, r4
 800bf28:	f7ff fdd6 	bl	800bad8 <_Bfree>
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf32:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf36:	3301      	adds	r3, #1
 800bf38:	e7c5      	b.n	800bec6 <__lshift+0x4a>
 800bf3a:	3904      	subs	r1, #4
 800bf3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf40:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf44:	459c      	cmp	ip, r3
 800bf46:	d8f9      	bhi.n	800bf3c <__lshift+0xc0>
 800bf48:	e7ea      	b.n	800bf20 <__lshift+0xa4>
 800bf4a:	bf00      	nop
 800bf4c:	0800d5f3 	.word	0x0800d5f3
 800bf50:	0800d604 	.word	0x0800d604

0800bf54 <__mcmp>:
 800bf54:	b530      	push	{r4, r5, lr}
 800bf56:	6902      	ldr	r2, [r0, #16]
 800bf58:	690c      	ldr	r4, [r1, #16]
 800bf5a:	1b12      	subs	r2, r2, r4
 800bf5c:	d10e      	bne.n	800bf7c <__mcmp+0x28>
 800bf5e:	f100 0314 	add.w	r3, r0, #20
 800bf62:	3114      	adds	r1, #20
 800bf64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf74:	42a5      	cmp	r5, r4
 800bf76:	d003      	beq.n	800bf80 <__mcmp+0x2c>
 800bf78:	d305      	bcc.n	800bf86 <__mcmp+0x32>
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	bd30      	pop	{r4, r5, pc}
 800bf80:	4283      	cmp	r3, r0
 800bf82:	d3f3      	bcc.n	800bf6c <__mcmp+0x18>
 800bf84:	e7fa      	b.n	800bf7c <__mcmp+0x28>
 800bf86:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8a:	e7f7      	b.n	800bf7c <__mcmp+0x28>

0800bf8c <__mdiff>:
 800bf8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	460c      	mov	r4, r1
 800bf92:	4606      	mov	r6, r0
 800bf94:	4611      	mov	r1, r2
 800bf96:	4620      	mov	r0, r4
 800bf98:	4617      	mov	r7, r2
 800bf9a:	f7ff ffdb 	bl	800bf54 <__mcmp>
 800bf9e:	1e05      	subs	r5, r0, #0
 800bfa0:	d110      	bne.n	800bfc4 <__mdiff+0x38>
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7ff fd57 	bl	800ba58 <_Balloc>
 800bfaa:	b930      	cbnz	r0, 800bfba <__mdiff+0x2e>
 800bfac:	4b39      	ldr	r3, [pc, #228]	; (800c094 <__mdiff+0x108>)
 800bfae:	4602      	mov	r2, r0
 800bfb0:	f240 2132 	movw	r1, #562	; 0x232
 800bfb4:	4838      	ldr	r0, [pc, #224]	; (800c098 <__mdiff+0x10c>)
 800bfb6:	f000 faf3 	bl	800c5a0 <__assert_func>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc4:	bfa4      	itt	ge
 800bfc6:	463b      	movge	r3, r7
 800bfc8:	4627      	movge	r7, r4
 800bfca:	4630      	mov	r0, r6
 800bfcc:	6879      	ldr	r1, [r7, #4]
 800bfce:	bfa6      	itte	ge
 800bfd0:	461c      	movge	r4, r3
 800bfd2:	2500      	movge	r5, #0
 800bfd4:	2501      	movlt	r5, #1
 800bfd6:	f7ff fd3f 	bl	800ba58 <_Balloc>
 800bfda:	b920      	cbnz	r0, 800bfe6 <__mdiff+0x5a>
 800bfdc:	4b2d      	ldr	r3, [pc, #180]	; (800c094 <__mdiff+0x108>)
 800bfde:	4602      	mov	r2, r0
 800bfe0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfe4:	e7e6      	b.n	800bfb4 <__mdiff+0x28>
 800bfe6:	693e      	ldr	r6, [r7, #16]
 800bfe8:	60c5      	str	r5, [r0, #12]
 800bfea:	6925      	ldr	r5, [r4, #16]
 800bfec:	f107 0114 	add.w	r1, r7, #20
 800bff0:	f104 0914 	add.w	r9, r4, #20
 800bff4:	f100 0e14 	add.w	lr, r0, #20
 800bff8:	f107 0210 	add.w	r2, r7, #16
 800bffc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c000:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c004:	46f2      	mov	sl, lr
 800c006:	2700      	movs	r7, #0
 800c008:	f859 3b04 	ldr.w	r3, [r9], #4
 800c00c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c010:	fa1f f883 	uxth.w	r8, r3
 800c014:	fa17 f78b 	uxtah	r7, r7, fp
 800c018:	0c1b      	lsrs	r3, r3, #16
 800c01a:	eba7 0808 	sub.w	r8, r7, r8
 800c01e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c022:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c026:	fa1f f888 	uxth.w	r8, r8
 800c02a:	141f      	asrs	r7, r3, #16
 800c02c:	454d      	cmp	r5, r9
 800c02e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c032:	f84a 3b04 	str.w	r3, [sl], #4
 800c036:	d8e7      	bhi.n	800c008 <__mdiff+0x7c>
 800c038:	1b2b      	subs	r3, r5, r4
 800c03a:	3b15      	subs	r3, #21
 800c03c:	f023 0303 	bic.w	r3, r3, #3
 800c040:	3304      	adds	r3, #4
 800c042:	3415      	adds	r4, #21
 800c044:	42a5      	cmp	r5, r4
 800c046:	bf38      	it	cc
 800c048:	2304      	movcc	r3, #4
 800c04a:	4419      	add	r1, r3
 800c04c:	4473      	add	r3, lr
 800c04e:	469e      	mov	lr, r3
 800c050:	460d      	mov	r5, r1
 800c052:	4565      	cmp	r5, ip
 800c054:	d30e      	bcc.n	800c074 <__mdiff+0xe8>
 800c056:	f10c 0203 	add.w	r2, ip, #3
 800c05a:	1a52      	subs	r2, r2, r1
 800c05c:	f022 0203 	bic.w	r2, r2, #3
 800c060:	3903      	subs	r1, #3
 800c062:	458c      	cmp	ip, r1
 800c064:	bf38      	it	cc
 800c066:	2200      	movcc	r2, #0
 800c068:	441a      	add	r2, r3
 800c06a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c06e:	b17b      	cbz	r3, 800c090 <__mdiff+0x104>
 800c070:	6106      	str	r6, [r0, #16]
 800c072:	e7a5      	b.n	800bfc0 <__mdiff+0x34>
 800c074:	f855 8b04 	ldr.w	r8, [r5], #4
 800c078:	fa17 f488 	uxtah	r4, r7, r8
 800c07c:	1422      	asrs	r2, r4, #16
 800c07e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c082:	b2a4      	uxth	r4, r4
 800c084:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c088:	f84e 4b04 	str.w	r4, [lr], #4
 800c08c:	1417      	asrs	r7, r2, #16
 800c08e:	e7e0      	b.n	800c052 <__mdiff+0xc6>
 800c090:	3e01      	subs	r6, #1
 800c092:	e7ea      	b.n	800c06a <__mdiff+0xde>
 800c094:	0800d5f3 	.word	0x0800d5f3
 800c098:	0800d604 	.word	0x0800d604

0800c09c <__d2b>:
 800c09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0a0:	4689      	mov	r9, r1
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	ec57 6b10 	vmov	r6, r7, d0
 800c0a8:	4690      	mov	r8, r2
 800c0aa:	f7ff fcd5 	bl	800ba58 <_Balloc>
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	b930      	cbnz	r0, 800c0c0 <__d2b+0x24>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	4b25      	ldr	r3, [pc, #148]	; (800c14c <__d2b+0xb0>)
 800c0b6:	4826      	ldr	r0, [pc, #152]	; (800c150 <__d2b+0xb4>)
 800c0b8:	f240 310a 	movw	r1, #778	; 0x30a
 800c0bc:	f000 fa70 	bl	800c5a0 <__assert_func>
 800c0c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0c8:	bb35      	cbnz	r5, 800c118 <__d2b+0x7c>
 800c0ca:	2e00      	cmp	r6, #0
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	d028      	beq.n	800c122 <__d2b+0x86>
 800c0d0:	4668      	mov	r0, sp
 800c0d2:	9600      	str	r6, [sp, #0]
 800c0d4:	f7ff fd8c 	bl	800bbf0 <__lo0bits>
 800c0d8:	9900      	ldr	r1, [sp, #0]
 800c0da:	b300      	cbz	r0, 800c11e <__d2b+0x82>
 800c0dc:	9a01      	ldr	r2, [sp, #4]
 800c0de:	f1c0 0320 	rsb	r3, r0, #32
 800c0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e6:	430b      	orrs	r3, r1
 800c0e8:	40c2      	lsrs	r2, r0
 800c0ea:	6163      	str	r3, [r4, #20]
 800c0ec:	9201      	str	r2, [sp, #4]
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	61a3      	str	r3, [r4, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	bf14      	ite	ne
 800c0f6:	2202      	movne	r2, #2
 800c0f8:	2201      	moveq	r2, #1
 800c0fa:	6122      	str	r2, [r4, #16]
 800c0fc:	b1d5      	cbz	r5, 800c134 <__d2b+0x98>
 800c0fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c102:	4405      	add	r5, r0
 800c104:	f8c9 5000 	str.w	r5, [r9]
 800c108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c10c:	f8c8 0000 	str.w	r0, [r8]
 800c110:	4620      	mov	r0, r4
 800c112:	b003      	add	sp, #12
 800c114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c11c:	e7d5      	b.n	800c0ca <__d2b+0x2e>
 800c11e:	6161      	str	r1, [r4, #20]
 800c120:	e7e5      	b.n	800c0ee <__d2b+0x52>
 800c122:	a801      	add	r0, sp, #4
 800c124:	f7ff fd64 	bl	800bbf0 <__lo0bits>
 800c128:	9b01      	ldr	r3, [sp, #4]
 800c12a:	6163      	str	r3, [r4, #20]
 800c12c:	2201      	movs	r2, #1
 800c12e:	6122      	str	r2, [r4, #16]
 800c130:	3020      	adds	r0, #32
 800c132:	e7e3      	b.n	800c0fc <__d2b+0x60>
 800c134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c13c:	f8c9 0000 	str.w	r0, [r9]
 800c140:	6918      	ldr	r0, [r3, #16]
 800c142:	f7ff fd35 	bl	800bbb0 <__hi0bits>
 800c146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c14a:	e7df      	b.n	800c10c <__d2b+0x70>
 800c14c:	0800d5f3 	.word	0x0800d5f3
 800c150:	0800d604 	.word	0x0800d604

0800c154 <_calloc_r>:
 800c154:	b513      	push	{r0, r1, r4, lr}
 800c156:	434a      	muls	r2, r1
 800c158:	4611      	mov	r1, r2
 800c15a:	9201      	str	r2, [sp, #4]
 800c15c:	f000 f85a 	bl	800c214 <_malloc_r>
 800c160:	4604      	mov	r4, r0
 800c162:	b118      	cbz	r0, 800c16c <_calloc_r+0x18>
 800c164:	9a01      	ldr	r2, [sp, #4]
 800c166:	2100      	movs	r1, #0
 800c168:	f7fe f9e0 	bl	800a52c <memset>
 800c16c:	4620      	mov	r0, r4
 800c16e:	b002      	add	sp, #8
 800c170:	bd10      	pop	{r4, pc}
	...

0800c174 <_free_r>:
 800c174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c176:	2900      	cmp	r1, #0
 800c178:	d048      	beq.n	800c20c <_free_r+0x98>
 800c17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c17e:	9001      	str	r0, [sp, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	f1a1 0404 	sub.w	r4, r1, #4
 800c186:	bfb8      	it	lt
 800c188:	18e4      	addlt	r4, r4, r3
 800c18a:	f000 fa65 	bl	800c658 <__malloc_lock>
 800c18e:	4a20      	ldr	r2, [pc, #128]	; (800c210 <_free_r+0x9c>)
 800c190:	9801      	ldr	r0, [sp, #4]
 800c192:	6813      	ldr	r3, [r2, #0]
 800c194:	4615      	mov	r5, r2
 800c196:	b933      	cbnz	r3, 800c1a6 <_free_r+0x32>
 800c198:	6063      	str	r3, [r4, #4]
 800c19a:	6014      	str	r4, [r2, #0]
 800c19c:	b003      	add	sp, #12
 800c19e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1a2:	f000 ba5f 	b.w	800c664 <__malloc_unlock>
 800c1a6:	42a3      	cmp	r3, r4
 800c1a8:	d90b      	bls.n	800c1c2 <_free_r+0x4e>
 800c1aa:	6821      	ldr	r1, [r4, #0]
 800c1ac:	1862      	adds	r2, r4, r1
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	bf04      	itt	eq
 800c1b2:	681a      	ldreq	r2, [r3, #0]
 800c1b4:	685b      	ldreq	r3, [r3, #4]
 800c1b6:	6063      	str	r3, [r4, #4]
 800c1b8:	bf04      	itt	eq
 800c1ba:	1852      	addeq	r2, r2, r1
 800c1bc:	6022      	streq	r2, [r4, #0]
 800c1be:	602c      	str	r4, [r5, #0]
 800c1c0:	e7ec      	b.n	800c19c <_free_r+0x28>
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	b10b      	cbz	r3, 800c1cc <_free_r+0x58>
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	d9fa      	bls.n	800c1c2 <_free_r+0x4e>
 800c1cc:	6811      	ldr	r1, [r2, #0]
 800c1ce:	1855      	adds	r5, r2, r1
 800c1d0:	42a5      	cmp	r5, r4
 800c1d2:	d10b      	bne.n	800c1ec <_free_r+0x78>
 800c1d4:	6824      	ldr	r4, [r4, #0]
 800c1d6:	4421      	add	r1, r4
 800c1d8:	1854      	adds	r4, r2, r1
 800c1da:	42a3      	cmp	r3, r4
 800c1dc:	6011      	str	r1, [r2, #0]
 800c1de:	d1dd      	bne.n	800c19c <_free_r+0x28>
 800c1e0:	681c      	ldr	r4, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	6053      	str	r3, [r2, #4]
 800c1e6:	4421      	add	r1, r4
 800c1e8:	6011      	str	r1, [r2, #0]
 800c1ea:	e7d7      	b.n	800c19c <_free_r+0x28>
 800c1ec:	d902      	bls.n	800c1f4 <_free_r+0x80>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	6003      	str	r3, [r0, #0]
 800c1f2:	e7d3      	b.n	800c19c <_free_r+0x28>
 800c1f4:	6825      	ldr	r5, [r4, #0]
 800c1f6:	1961      	adds	r1, r4, r5
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	bf04      	itt	eq
 800c1fc:	6819      	ldreq	r1, [r3, #0]
 800c1fe:	685b      	ldreq	r3, [r3, #4]
 800c200:	6063      	str	r3, [r4, #4]
 800c202:	bf04      	itt	eq
 800c204:	1949      	addeq	r1, r1, r5
 800c206:	6021      	streq	r1, [r4, #0]
 800c208:	6054      	str	r4, [r2, #4]
 800c20a:	e7c7      	b.n	800c19c <_free_r+0x28>
 800c20c:	b003      	add	sp, #12
 800c20e:	bd30      	pop	{r4, r5, pc}
 800c210:	2000037c 	.word	0x2000037c

0800c214 <_malloc_r>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	1ccd      	adds	r5, r1, #3
 800c218:	f025 0503 	bic.w	r5, r5, #3
 800c21c:	3508      	adds	r5, #8
 800c21e:	2d0c      	cmp	r5, #12
 800c220:	bf38      	it	cc
 800c222:	250c      	movcc	r5, #12
 800c224:	2d00      	cmp	r5, #0
 800c226:	4606      	mov	r6, r0
 800c228:	db01      	blt.n	800c22e <_malloc_r+0x1a>
 800c22a:	42a9      	cmp	r1, r5
 800c22c:	d903      	bls.n	800c236 <_malloc_r+0x22>
 800c22e:	230c      	movs	r3, #12
 800c230:	6033      	str	r3, [r6, #0]
 800c232:	2000      	movs	r0, #0
 800c234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c236:	f000 fa0f 	bl	800c658 <__malloc_lock>
 800c23a:	4921      	ldr	r1, [pc, #132]	; (800c2c0 <_malloc_r+0xac>)
 800c23c:	680a      	ldr	r2, [r1, #0]
 800c23e:	4614      	mov	r4, r2
 800c240:	b99c      	cbnz	r4, 800c26a <_malloc_r+0x56>
 800c242:	4f20      	ldr	r7, [pc, #128]	; (800c2c4 <_malloc_r+0xb0>)
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	b923      	cbnz	r3, 800c252 <_malloc_r+0x3e>
 800c248:	4621      	mov	r1, r4
 800c24a:	4630      	mov	r0, r6
 800c24c:	f000 f998 	bl	800c580 <_sbrk_r>
 800c250:	6038      	str	r0, [r7, #0]
 800c252:	4629      	mov	r1, r5
 800c254:	4630      	mov	r0, r6
 800c256:	f000 f993 	bl	800c580 <_sbrk_r>
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	d123      	bne.n	800c2a6 <_malloc_r+0x92>
 800c25e:	230c      	movs	r3, #12
 800c260:	6033      	str	r3, [r6, #0]
 800c262:	4630      	mov	r0, r6
 800c264:	f000 f9fe 	bl	800c664 <__malloc_unlock>
 800c268:	e7e3      	b.n	800c232 <_malloc_r+0x1e>
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	1b5b      	subs	r3, r3, r5
 800c26e:	d417      	bmi.n	800c2a0 <_malloc_r+0x8c>
 800c270:	2b0b      	cmp	r3, #11
 800c272:	d903      	bls.n	800c27c <_malloc_r+0x68>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	441c      	add	r4, r3
 800c278:	6025      	str	r5, [r4, #0]
 800c27a:	e004      	b.n	800c286 <_malloc_r+0x72>
 800c27c:	6863      	ldr	r3, [r4, #4]
 800c27e:	42a2      	cmp	r2, r4
 800c280:	bf0c      	ite	eq
 800c282:	600b      	streq	r3, [r1, #0]
 800c284:	6053      	strne	r3, [r2, #4]
 800c286:	4630      	mov	r0, r6
 800c288:	f000 f9ec 	bl	800c664 <__malloc_unlock>
 800c28c:	f104 000b 	add.w	r0, r4, #11
 800c290:	1d23      	adds	r3, r4, #4
 800c292:	f020 0007 	bic.w	r0, r0, #7
 800c296:	1ac2      	subs	r2, r0, r3
 800c298:	d0cc      	beq.n	800c234 <_malloc_r+0x20>
 800c29a:	1a1b      	subs	r3, r3, r0
 800c29c:	50a3      	str	r3, [r4, r2]
 800c29e:	e7c9      	b.n	800c234 <_malloc_r+0x20>
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	6864      	ldr	r4, [r4, #4]
 800c2a4:	e7cc      	b.n	800c240 <_malloc_r+0x2c>
 800c2a6:	1cc4      	adds	r4, r0, #3
 800c2a8:	f024 0403 	bic.w	r4, r4, #3
 800c2ac:	42a0      	cmp	r0, r4
 800c2ae:	d0e3      	beq.n	800c278 <_malloc_r+0x64>
 800c2b0:	1a21      	subs	r1, r4, r0
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f000 f964 	bl	800c580 <_sbrk_r>
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	d1dd      	bne.n	800c278 <_malloc_r+0x64>
 800c2bc:	e7cf      	b.n	800c25e <_malloc_r+0x4a>
 800c2be:	bf00      	nop
 800c2c0:	2000037c 	.word	0x2000037c
 800c2c4:	20000380 	.word	0x20000380

0800c2c8 <__ssputs_r>:
 800c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2cc:	688e      	ldr	r6, [r1, #8]
 800c2ce:	429e      	cmp	r6, r3
 800c2d0:	4682      	mov	sl, r0
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	4690      	mov	r8, r2
 800c2d6:	461f      	mov	r7, r3
 800c2d8:	d838      	bhi.n	800c34c <__ssputs_r+0x84>
 800c2da:	898a      	ldrh	r2, [r1, #12]
 800c2dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2e0:	d032      	beq.n	800c348 <__ssputs_r+0x80>
 800c2e2:	6825      	ldr	r5, [r4, #0]
 800c2e4:	6909      	ldr	r1, [r1, #16]
 800c2e6:	eba5 0901 	sub.w	r9, r5, r1
 800c2ea:	6965      	ldr	r5, [r4, #20]
 800c2ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	444b      	add	r3, r9
 800c2f8:	106d      	asrs	r5, r5, #1
 800c2fa:	429d      	cmp	r5, r3
 800c2fc:	bf38      	it	cc
 800c2fe:	461d      	movcc	r5, r3
 800c300:	0553      	lsls	r3, r2, #21
 800c302:	d531      	bpl.n	800c368 <__ssputs_r+0xa0>
 800c304:	4629      	mov	r1, r5
 800c306:	f7ff ff85 	bl	800c214 <_malloc_r>
 800c30a:	4606      	mov	r6, r0
 800c30c:	b950      	cbnz	r0, 800c324 <__ssputs_r+0x5c>
 800c30e:	230c      	movs	r3, #12
 800c310:	f8ca 3000 	str.w	r3, [sl]
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c324:	6921      	ldr	r1, [r4, #16]
 800c326:	464a      	mov	r2, r9
 800c328:	f7ff fb88 	bl	800ba3c <memcpy>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	6126      	str	r6, [r4, #16]
 800c33a:	6165      	str	r5, [r4, #20]
 800c33c:	444e      	add	r6, r9
 800c33e:	eba5 0509 	sub.w	r5, r5, r9
 800c342:	6026      	str	r6, [r4, #0]
 800c344:	60a5      	str	r5, [r4, #8]
 800c346:	463e      	mov	r6, r7
 800c348:	42be      	cmp	r6, r7
 800c34a:	d900      	bls.n	800c34e <__ssputs_r+0x86>
 800c34c:	463e      	mov	r6, r7
 800c34e:	4632      	mov	r2, r6
 800c350:	6820      	ldr	r0, [r4, #0]
 800c352:	4641      	mov	r1, r8
 800c354:	f000 f966 	bl	800c624 <memmove>
 800c358:	68a3      	ldr	r3, [r4, #8]
 800c35a:	6822      	ldr	r2, [r4, #0]
 800c35c:	1b9b      	subs	r3, r3, r6
 800c35e:	4432      	add	r2, r6
 800c360:	60a3      	str	r3, [r4, #8]
 800c362:	6022      	str	r2, [r4, #0]
 800c364:	2000      	movs	r0, #0
 800c366:	e7db      	b.n	800c320 <__ssputs_r+0x58>
 800c368:	462a      	mov	r2, r5
 800c36a:	f000 f981 	bl	800c670 <_realloc_r>
 800c36e:	4606      	mov	r6, r0
 800c370:	2800      	cmp	r0, #0
 800c372:	d1e1      	bne.n	800c338 <__ssputs_r+0x70>
 800c374:	6921      	ldr	r1, [r4, #16]
 800c376:	4650      	mov	r0, sl
 800c378:	f7ff fefc 	bl	800c174 <_free_r>
 800c37c:	e7c7      	b.n	800c30e <__ssputs_r+0x46>
	...

0800c380 <_svfiprintf_r>:
 800c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	4698      	mov	r8, r3
 800c386:	898b      	ldrh	r3, [r1, #12]
 800c388:	061b      	lsls	r3, r3, #24
 800c38a:	b09d      	sub	sp, #116	; 0x74
 800c38c:	4607      	mov	r7, r0
 800c38e:	460d      	mov	r5, r1
 800c390:	4614      	mov	r4, r2
 800c392:	d50e      	bpl.n	800c3b2 <_svfiprintf_r+0x32>
 800c394:	690b      	ldr	r3, [r1, #16]
 800c396:	b963      	cbnz	r3, 800c3b2 <_svfiprintf_r+0x32>
 800c398:	2140      	movs	r1, #64	; 0x40
 800c39a:	f7ff ff3b 	bl	800c214 <_malloc_r>
 800c39e:	6028      	str	r0, [r5, #0]
 800c3a0:	6128      	str	r0, [r5, #16]
 800c3a2:	b920      	cbnz	r0, 800c3ae <_svfiprintf_r+0x2e>
 800c3a4:	230c      	movs	r3, #12
 800c3a6:	603b      	str	r3, [r7, #0]
 800c3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ac:	e0d1      	b.n	800c552 <_svfiprintf_r+0x1d2>
 800c3ae:	2340      	movs	r3, #64	; 0x40
 800c3b0:	616b      	str	r3, [r5, #20]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b6:	2320      	movs	r3, #32
 800c3b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3c0:	2330      	movs	r3, #48	; 0x30
 800c3c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c56c <_svfiprintf_r+0x1ec>
 800c3c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3ca:	f04f 0901 	mov.w	r9, #1
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	469a      	mov	sl, r3
 800c3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d6:	b10a      	cbz	r2, 800c3dc <_svfiprintf_r+0x5c>
 800c3d8:	2a25      	cmp	r2, #37	; 0x25
 800c3da:	d1f9      	bne.n	800c3d0 <_svfiprintf_r+0x50>
 800c3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c3e0:	d00b      	beq.n	800c3fa <_svfiprintf_r+0x7a>
 800c3e2:	465b      	mov	r3, fp
 800c3e4:	4622      	mov	r2, r4
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	f7ff ff6d 	bl	800c2c8 <__ssputs_r>
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	f000 80aa 	beq.w	800c548 <_svfiprintf_r+0x1c8>
 800c3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3f6:	445a      	add	r2, fp
 800c3f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 80a2 	beq.w	800c548 <_svfiprintf_r+0x1c8>
 800c404:	2300      	movs	r3, #0
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c40e:	f10a 0a01 	add.w	sl, sl, #1
 800c412:	9304      	str	r3, [sp, #16]
 800c414:	9307      	str	r3, [sp, #28]
 800c416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c41a:	931a      	str	r3, [sp, #104]	; 0x68
 800c41c:	4654      	mov	r4, sl
 800c41e:	2205      	movs	r2, #5
 800c420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c424:	4851      	ldr	r0, [pc, #324]	; (800c56c <_svfiprintf_r+0x1ec>)
 800c426:	f7f3 ff13 	bl	8000250 <memchr>
 800c42a:	9a04      	ldr	r2, [sp, #16]
 800c42c:	b9d8      	cbnz	r0, 800c466 <_svfiprintf_r+0xe6>
 800c42e:	06d0      	lsls	r0, r2, #27
 800c430:	bf44      	itt	mi
 800c432:	2320      	movmi	r3, #32
 800c434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c438:	0711      	lsls	r1, r2, #28
 800c43a:	bf44      	itt	mi
 800c43c:	232b      	movmi	r3, #43	; 0x2b
 800c43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c442:	f89a 3000 	ldrb.w	r3, [sl]
 800c446:	2b2a      	cmp	r3, #42	; 0x2a
 800c448:	d015      	beq.n	800c476 <_svfiprintf_r+0xf6>
 800c44a:	9a07      	ldr	r2, [sp, #28]
 800c44c:	4654      	mov	r4, sl
 800c44e:	2000      	movs	r0, #0
 800c450:	f04f 0c0a 	mov.w	ip, #10
 800c454:	4621      	mov	r1, r4
 800c456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c45a:	3b30      	subs	r3, #48	; 0x30
 800c45c:	2b09      	cmp	r3, #9
 800c45e:	d94e      	bls.n	800c4fe <_svfiprintf_r+0x17e>
 800c460:	b1b0      	cbz	r0, 800c490 <_svfiprintf_r+0x110>
 800c462:	9207      	str	r2, [sp, #28]
 800c464:	e014      	b.n	800c490 <_svfiprintf_r+0x110>
 800c466:	eba0 0308 	sub.w	r3, r0, r8
 800c46a:	fa09 f303 	lsl.w	r3, r9, r3
 800c46e:	4313      	orrs	r3, r2
 800c470:	9304      	str	r3, [sp, #16]
 800c472:	46a2      	mov	sl, r4
 800c474:	e7d2      	b.n	800c41c <_svfiprintf_r+0x9c>
 800c476:	9b03      	ldr	r3, [sp, #12]
 800c478:	1d19      	adds	r1, r3, #4
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	9103      	str	r1, [sp, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bfbb      	ittet	lt
 800c482:	425b      	neglt	r3, r3
 800c484:	f042 0202 	orrlt.w	r2, r2, #2
 800c488:	9307      	strge	r3, [sp, #28]
 800c48a:	9307      	strlt	r3, [sp, #28]
 800c48c:	bfb8      	it	lt
 800c48e:	9204      	strlt	r2, [sp, #16]
 800c490:	7823      	ldrb	r3, [r4, #0]
 800c492:	2b2e      	cmp	r3, #46	; 0x2e
 800c494:	d10c      	bne.n	800c4b0 <_svfiprintf_r+0x130>
 800c496:	7863      	ldrb	r3, [r4, #1]
 800c498:	2b2a      	cmp	r3, #42	; 0x2a
 800c49a:	d135      	bne.n	800c508 <_svfiprintf_r+0x188>
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	1d1a      	adds	r2, r3, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	9203      	str	r2, [sp, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bfb8      	it	lt
 800c4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4ac:	3402      	adds	r4, #2
 800c4ae:	9305      	str	r3, [sp, #20]
 800c4b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c57c <_svfiprintf_r+0x1fc>
 800c4b4:	7821      	ldrb	r1, [r4, #0]
 800c4b6:	2203      	movs	r2, #3
 800c4b8:	4650      	mov	r0, sl
 800c4ba:	f7f3 fec9 	bl	8000250 <memchr>
 800c4be:	b140      	cbz	r0, 800c4d2 <_svfiprintf_r+0x152>
 800c4c0:	2340      	movs	r3, #64	; 0x40
 800c4c2:	eba0 000a 	sub.w	r0, r0, sl
 800c4c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c4ca:	9b04      	ldr	r3, [sp, #16]
 800c4cc:	4303      	orrs	r3, r0
 800c4ce:	3401      	adds	r4, #1
 800c4d0:	9304      	str	r3, [sp, #16]
 800c4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d6:	4826      	ldr	r0, [pc, #152]	; (800c570 <_svfiprintf_r+0x1f0>)
 800c4d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4dc:	2206      	movs	r2, #6
 800c4de:	f7f3 feb7 	bl	8000250 <memchr>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d038      	beq.n	800c558 <_svfiprintf_r+0x1d8>
 800c4e6:	4b23      	ldr	r3, [pc, #140]	; (800c574 <_svfiprintf_r+0x1f4>)
 800c4e8:	bb1b      	cbnz	r3, 800c532 <_svfiprintf_r+0x1b2>
 800c4ea:	9b03      	ldr	r3, [sp, #12]
 800c4ec:	3307      	adds	r3, #7
 800c4ee:	f023 0307 	bic.w	r3, r3, #7
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	9303      	str	r3, [sp, #12]
 800c4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f8:	4433      	add	r3, r6
 800c4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c4fc:	e767      	b.n	800c3ce <_svfiprintf_r+0x4e>
 800c4fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c502:	460c      	mov	r4, r1
 800c504:	2001      	movs	r0, #1
 800c506:	e7a5      	b.n	800c454 <_svfiprintf_r+0xd4>
 800c508:	2300      	movs	r3, #0
 800c50a:	3401      	adds	r4, #1
 800c50c:	9305      	str	r3, [sp, #20]
 800c50e:	4619      	mov	r1, r3
 800c510:	f04f 0c0a 	mov.w	ip, #10
 800c514:	4620      	mov	r0, r4
 800c516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c51a:	3a30      	subs	r2, #48	; 0x30
 800c51c:	2a09      	cmp	r2, #9
 800c51e:	d903      	bls.n	800c528 <_svfiprintf_r+0x1a8>
 800c520:	2b00      	cmp	r3, #0
 800c522:	d0c5      	beq.n	800c4b0 <_svfiprintf_r+0x130>
 800c524:	9105      	str	r1, [sp, #20]
 800c526:	e7c3      	b.n	800c4b0 <_svfiprintf_r+0x130>
 800c528:	fb0c 2101 	mla	r1, ip, r1, r2
 800c52c:	4604      	mov	r4, r0
 800c52e:	2301      	movs	r3, #1
 800c530:	e7f0      	b.n	800c514 <_svfiprintf_r+0x194>
 800c532:	ab03      	add	r3, sp, #12
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	462a      	mov	r2, r5
 800c538:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <_svfiprintf_r+0x1f8>)
 800c53a:	a904      	add	r1, sp, #16
 800c53c:	4638      	mov	r0, r7
 800c53e:	f7fe f88f 	bl	800a660 <_printf_float>
 800c542:	1c42      	adds	r2, r0, #1
 800c544:	4606      	mov	r6, r0
 800c546:	d1d6      	bne.n	800c4f6 <_svfiprintf_r+0x176>
 800c548:	89ab      	ldrh	r3, [r5, #12]
 800c54a:	065b      	lsls	r3, r3, #25
 800c54c:	f53f af2c 	bmi.w	800c3a8 <_svfiprintf_r+0x28>
 800c550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c552:	b01d      	add	sp, #116	; 0x74
 800c554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c558:	ab03      	add	r3, sp, #12
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	462a      	mov	r2, r5
 800c55e:	4b06      	ldr	r3, [pc, #24]	; (800c578 <_svfiprintf_r+0x1f8>)
 800c560:	a904      	add	r1, sp, #16
 800c562:	4638      	mov	r0, r7
 800c564:	f7fe fb08 	bl	800ab78 <_printf_i>
 800c568:	e7eb      	b.n	800c542 <_svfiprintf_r+0x1c2>
 800c56a:	bf00      	nop
 800c56c:	0800d764 	.word	0x0800d764
 800c570:	0800d76e 	.word	0x0800d76e
 800c574:	0800a661 	.word	0x0800a661
 800c578:	0800c2c9 	.word	0x0800c2c9
 800c57c:	0800d76a 	.word	0x0800d76a

0800c580 <_sbrk_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4d06      	ldr	r5, [pc, #24]	; (800c59c <_sbrk_r+0x1c>)
 800c584:	2300      	movs	r3, #0
 800c586:	4604      	mov	r4, r0
 800c588:	4608      	mov	r0, r1
 800c58a:	602b      	str	r3, [r5, #0]
 800c58c:	f7f7 fd3e 	bl	800400c <_sbrk>
 800c590:	1c43      	adds	r3, r0, #1
 800c592:	d102      	bne.n	800c59a <_sbrk_r+0x1a>
 800c594:	682b      	ldr	r3, [r5, #0]
 800c596:	b103      	cbz	r3, 800c59a <_sbrk_r+0x1a>
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	20000760 	.word	0x20000760

0800c5a0 <__assert_func>:
 800c5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5a2:	4614      	mov	r4, r2
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <__assert_func+0x2c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	68d8      	ldr	r0, [r3, #12]
 800c5ae:	b14c      	cbz	r4, 800c5c4 <__assert_func+0x24>
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <__assert_func+0x30>)
 800c5b2:	9100      	str	r1, [sp, #0]
 800c5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5b8:	4906      	ldr	r1, [pc, #24]	; (800c5d4 <__assert_func+0x34>)
 800c5ba:	462b      	mov	r3, r5
 800c5bc:	f000 f80e 	bl	800c5dc <fiprintf>
 800c5c0:	f000 faa4 	bl	800cb0c <abort>
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <__assert_func+0x38>)
 800c5c6:	461c      	mov	r4, r3
 800c5c8:	e7f3      	b.n	800c5b2 <__assert_func+0x12>
 800c5ca:	bf00      	nop
 800c5cc:	200000dc 	.word	0x200000dc
 800c5d0:	0800d775 	.word	0x0800d775
 800c5d4:	0800d782 	.word	0x0800d782
 800c5d8:	0800d7b0 	.word	0x0800d7b0

0800c5dc <fiprintf>:
 800c5dc:	b40e      	push	{r1, r2, r3}
 800c5de:	b503      	push	{r0, r1, lr}
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	ab03      	add	r3, sp, #12
 800c5e4:	4805      	ldr	r0, [pc, #20]	; (800c5fc <fiprintf+0x20>)
 800c5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ea:	6800      	ldr	r0, [r0, #0]
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	f000 f88f 	bl	800c710 <_vfiprintf_r>
 800c5f2:	b002      	add	sp, #8
 800c5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f8:	b003      	add	sp, #12
 800c5fa:	4770      	bx	lr
 800c5fc:	200000dc 	.word	0x200000dc

0800c600 <__ascii_mbtowc>:
 800c600:	b082      	sub	sp, #8
 800c602:	b901      	cbnz	r1, 800c606 <__ascii_mbtowc+0x6>
 800c604:	a901      	add	r1, sp, #4
 800c606:	b142      	cbz	r2, 800c61a <__ascii_mbtowc+0x1a>
 800c608:	b14b      	cbz	r3, 800c61e <__ascii_mbtowc+0x1e>
 800c60a:	7813      	ldrb	r3, [r2, #0]
 800c60c:	600b      	str	r3, [r1, #0]
 800c60e:	7812      	ldrb	r2, [r2, #0]
 800c610:	1e10      	subs	r0, r2, #0
 800c612:	bf18      	it	ne
 800c614:	2001      	movne	r0, #1
 800c616:	b002      	add	sp, #8
 800c618:	4770      	bx	lr
 800c61a:	4610      	mov	r0, r2
 800c61c:	e7fb      	b.n	800c616 <__ascii_mbtowc+0x16>
 800c61e:	f06f 0001 	mvn.w	r0, #1
 800c622:	e7f8      	b.n	800c616 <__ascii_mbtowc+0x16>

0800c624 <memmove>:
 800c624:	4288      	cmp	r0, r1
 800c626:	b510      	push	{r4, lr}
 800c628:	eb01 0402 	add.w	r4, r1, r2
 800c62c:	d902      	bls.n	800c634 <memmove+0x10>
 800c62e:	4284      	cmp	r4, r0
 800c630:	4623      	mov	r3, r4
 800c632:	d807      	bhi.n	800c644 <memmove+0x20>
 800c634:	1e43      	subs	r3, r0, #1
 800c636:	42a1      	cmp	r1, r4
 800c638:	d008      	beq.n	800c64c <memmove+0x28>
 800c63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c642:	e7f8      	b.n	800c636 <memmove+0x12>
 800c644:	4402      	add	r2, r0
 800c646:	4601      	mov	r1, r0
 800c648:	428a      	cmp	r2, r1
 800c64a:	d100      	bne.n	800c64e <memmove+0x2a>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c656:	e7f7      	b.n	800c648 <memmove+0x24>

0800c658 <__malloc_lock>:
 800c658:	4801      	ldr	r0, [pc, #4]	; (800c660 <__malloc_lock+0x8>)
 800c65a:	f000 bc17 	b.w	800ce8c <__retarget_lock_acquire_recursive>
 800c65e:	bf00      	nop
 800c660:	20000768 	.word	0x20000768

0800c664 <__malloc_unlock>:
 800c664:	4801      	ldr	r0, [pc, #4]	; (800c66c <__malloc_unlock+0x8>)
 800c666:	f000 bc12 	b.w	800ce8e <__retarget_lock_release_recursive>
 800c66a:	bf00      	nop
 800c66c:	20000768 	.word	0x20000768

0800c670 <_realloc_r>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	4607      	mov	r7, r0
 800c674:	4614      	mov	r4, r2
 800c676:	460e      	mov	r6, r1
 800c678:	b921      	cbnz	r1, 800c684 <_realloc_r+0x14>
 800c67a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c67e:	4611      	mov	r1, r2
 800c680:	f7ff bdc8 	b.w	800c214 <_malloc_r>
 800c684:	b922      	cbnz	r2, 800c690 <_realloc_r+0x20>
 800c686:	f7ff fd75 	bl	800c174 <_free_r>
 800c68a:	4625      	mov	r5, r4
 800c68c:	4628      	mov	r0, r5
 800c68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c690:	f000 fc62 	bl	800cf58 <_malloc_usable_size_r>
 800c694:	42a0      	cmp	r0, r4
 800c696:	d20f      	bcs.n	800c6b8 <_realloc_r+0x48>
 800c698:	4621      	mov	r1, r4
 800c69a:	4638      	mov	r0, r7
 800c69c:	f7ff fdba 	bl	800c214 <_malloc_r>
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d0f2      	beq.n	800c68c <_realloc_r+0x1c>
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	f7ff f9c7 	bl	800ba3c <memcpy>
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff fd5f 	bl	800c174 <_free_r>
 800c6b6:	e7e9      	b.n	800c68c <_realloc_r+0x1c>
 800c6b8:	4635      	mov	r5, r6
 800c6ba:	e7e7      	b.n	800c68c <_realloc_r+0x1c>

0800c6bc <__sfputc_r>:
 800c6bc:	6893      	ldr	r3, [r2, #8]
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	b410      	push	{r4}
 800c6c4:	6093      	str	r3, [r2, #8]
 800c6c6:	da08      	bge.n	800c6da <__sfputc_r+0x1e>
 800c6c8:	6994      	ldr	r4, [r2, #24]
 800c6ca:	42a3      	cmp	r3, r4
 800c6cc:	db01      	blt.n	800c6d2 <__sfputc_r+0x16>
 800c6ce:	290a      	cmp	r1, #10
 800c6d0:	d103      	bne.n	800c6da <__sfputc_r+0x1e>
 800c6d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6d6:	f000 b94b 	b.w	800c970 <__swbuf_r>
 800c6da:	6813      	ldr	r3, [r2, #0]
 800c6dc:	1c58      	adds	r0, r3, #1
 800c6de:	6010      	str	r0, [r2, #0]
 800c6e0:	7019      	strb	r1, [r3, #0]
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <__sfputs_r>:
 800c6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	460f      	mov	r7, r1
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	18d5      	adds	r5, r2, r3
 800c6f4:	42ac      	cmp	r4, r5
 800c6f6:	d101      	bne.n	800c6fc <__sfputs_r+0x12>
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	e007      	b.n	800c70c <__sfputs_r+0x22>
 800c6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c700:	463a      	mov	r2, r7
 800c702:	4630      	mov	r0, r6
 800c704:	f7ff ffda 	bl	800c6bc <__sfputc_r>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d1f3      	bne.n	800c6f4 <__sfputs_r+0xa>
 800c70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c710 <_vfiprintf_r>:
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	460d      	mov	r5, r1
 800c716:	b09d      	sub	sp, #116	; 0x74
 800c718:	4614      	mov	r4, r2
 800c71a:	4698      	mov	r8, r3
 800c71c:	4606      	mov	r6, r0
 800c71e:	b118      	cbz	r0, 800c728 <_vfiprintf_r+0x18>
 800c720:	6983      	ldr	r3, [r0, #24]
 800c722:	b90b      	cbnz	r3, 800c728 <_vfiprintf_r+0x18>
 800c724:	f000 fb14 	bl	800cd50 <__sinit>
 800c728:	4b89      	ldr	r3, [pc, #548]	; (800c950 <_vfiprintf_r+0x240>)
 800c72a:	429d      	cmp	r5, r3
 800c72c:	d11b      	bne.n	800c766 <_vfiprintf_r+0x56>
 800c72e:	6875      	ldr	r5, [r6, #4]
 800c730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c732:	07d9      	lsls	r1, r3, #31
 800c734:	d405      	bmi.n	800c742 <_vfiprintf_r+0x32>
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	059a      	lsls	r2, r3, #22
 800c73a:	d402      	bmi.n	800c742 <_vfiprintf_r+0x32>
 800c73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c73e:	f000 fba5 	bl	800ce8c <__retarget_lock_acquire_recursive>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	071b      	lsls	r3, r3, #28
 800c746:	d501      	bpl.n	800c74c <_vfiprintf_r+0x3c>
 800c748:	692b      	ldr	r3, [r5, #16]
 800c74a:	b9eb      	cbnz	r3, 800c788 <_vfiprintf_r+0x78>
 800c74c:	4629      	mov	r1, r5
 800c74e:	4630      	mov	r0, r6
 800c750:	f000 f96e 	bl	800ca30 <__swsetup_r>
 800c754:	b1c0      	cbz	r0, 800c788 <_vfiprintf_r+0x78>
 800c756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c758:	07dc      	lsls	r4, r3, #31
 800c75a:	d50e      	bpl.n	800c77a <_vfiprintf_r+0x6a>
 800c75c:	f04f 30ff 	mov.w	r0, #4294967295
 800c760:	b01d      	add	sp, #116	; 0x74
 800c762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c766:	4b7b      	ldr	r3, [pc, #492]	; (800c954 <_vfiprintf_r+0x244>)
 800c768:	429d      	cmp	r5, r3
 800c76a:	d101      	bne.n	800c770 <_vfiprintf_r+0x60>
 800c76c:	68b5      	ldr	r5, [r6, #8]
 800c76e:	e7df      	b.n	800c730 <_vfiprintf_r+0x20>
 800c770:	4b79      	ldr	r3, [pc, #484]	; (800c958 <_vfiprintf_r+0x248>)
 800c772:	429d      	cmp	r5, r3
 800c774:	bf08      	it	eq
 800c776:	68f5      	ldreq	r5, [r6, #12]
 800c778:	e7da      	b.n	800c730 <_vfiprintf_r+0x20>
 800c77a:	89ab      	ldrh	r3, [r5, #12]
 800c77c:	0598      	lsls	r0, r3, #22
 800c77e:	d4ed      	bmi.n	800c75c <_vfiprintf_r+0x4c>
 800c780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c782:	f000 fb84 	bl	800ce8e <__retarget_lock_release_recursive>
 800c786:	e7e9      	b.n	800c75c <_vfiprintf_r+0x4c>
 800c788:	2300      	movs	r3, #0
 800c78a:	9309      	str	r3, [sp, #36]	; 0x24
 800c78c:	2320      	movs	r3, #32
 800c78e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c792:	f8cd 800c 	str.w	r8, [sp, #12]
 800c796:	2330      	movs	r3, #48	; 0x30
 800c798:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c95c <_vfiprintf_r+0x24c>
 800c79c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7a0:	f04f 0901 	mov.w	r9, #1
 800c7a4:	4623      	mov	r3, r4
 800c7a6:	469a      	mov	sl, r3
 800c7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ac:	b10a      	cbz	r2, 800c7b2 <_vfiprintf_r+0xa2>
 800c7ae:	2a25      	cmp	r2, #37	; 0x25
 800c7b0:	d1f9      	bne.n	800c7a6 <_vfiprintf_r+0x96>
 800c7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7b6:	d00b      	beq.n	800c7d0 <_vfiprintf_r+0xc0>
 800c7b8:	465b      	mov	r3, fp
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	4629      	mov	r1, r5
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7ff ff93 	bl	800c6ea <__sfputs_r>
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	f000 80aa 	beq.w	800c91e <_vfiprintf_r+0x20e>
 800c7ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7cc:	445a      	add	r2, fp
 800c7ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 80a2 	beq.w	800c91e <_vfiprintf_r+0x20e>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7e4:	f10a 0a01 	add.w	sl, sl, #1
 800c7e8:	9304      	str	r3, [sp, #16]
 800c7ea:	9307      	str	r3, [sp, #28]
 800c7ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c7f2:	4654      	mov	r4, sl
 800c7f4:	2205      	movs	r2, #5
 800c7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fa:	4858      	ldr	r0, [pc, #352]	; (800c95c <_vfiprintf_r+0x24c>)
 800c7fc:	f7f3 fd28 	bl	8000250 <memchr>
 800c800:	9a04      	ldr	r2, [sp, #16]
 800c802:	b9d8      	cbnz	r0, 800c83c <_vfiprintf_r+0x12c>
 800c804:	06d1      	lsls	r1, r2, #27
 800c806:	bf44      	itt	mi
 800c808:	2320      	movmi	r3, #32
 800c80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c80e:	0713      	lsls	r3, r2, #28
 800c810:	bf44      	itt	mi
 800c812:	232b      	movmi	r3, #43	; 0x2b
 800c814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c818:	f89a 3000 	ldrb.w	r3, [sl]
 800c81c:	2b2a      	cmp	r3, #42	; 0x2a
 800c81e:	d015      	beq.n	800c84c <_vfiprintf_r+0x13c>
 800c820:	9a07      	ldr	r2, [sp, #28]
 800c822:	4654      	mov	r4, sl
 800c824:	2000      	movs	r0, #0
 800c826:	f04f 0c0a 	mov.w	ip, #10
 800c82a:	4621      	mov	r1, r4
 800c82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c830:	3b30      	subs	r3, #48	; 0x30
 800c832:	2b09      	cmp	r3, #9
 800c834:	d94e      	bls.n	800c8d4 <_vfiprintf_r+0x1c4>
 800c836:	b1b0      	cbz	r0, 800c866 <_vfiprintf_r+0x156>
 800c838:	9207      	str	r2, [sp, #28]
 800c83a:	e014      	b.n	800c866 <_vfiprintf_r+0x156>
 800c83c:	eba0 0308 	sub.w	r3, r0, r8
 800c840:	fa09 f303 	lsl.w	r3, r9, r3
 800c844:	4313      	orrs	r3, r2
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	46a2      	mov	sl, r4
 800c84a:	e7d2      	b.n	800c7f2 <_vfiprintf_r+0xe2>
 800c84c:	9b03      	ldr	r3, [sp, #12]
 800c84e:	1d19      	adds	r1, r3, #4
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	9103      	str	r1, [sp, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	bfbb      	ittet	lt
 800c858:	425b      	neglt	r3, r3
 800c85a:	f042 0202 	orrlt.w	r2, r2, #2
 800c85e:	9307      	strge	r3, [sp, #28]
 800c860:	9307      	strlt	r3, [sp, #28]
 800c862:	bfb8      	it	lt
 800c864:	9204      	strlt	r2, [sp, #16]
 800c866:	7823      	ldrb	r3, [r4, #0]
 800c868:	2b2e      	cmp	r3, #46	; 0x2e
 800c86a:	d10c      	bne.n	800c886 <_vfiprintf_r+0x176>
 800c86c:	7863      	ldrb	r3, [r4, #1]
 800c86e:	2b2a      	cmp	r3, #42	; 0x2a
 800c870:	d135      	bne.n	800c8de <_vfiprintf_r+0x1ce>
 800c872:	9b03      	ldr	r3, [sp, #12]
 800c874:	1d1a      	adds	r2, r3, #4
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	9203      	str	r2, [sp, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bfb8      	it	lt
 800c87e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c882:	3402      	adds	r4, #2
 800c884:	9305      	str	r3, [sp, #20]
 800c886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c96c <_vfiprintf_r+0x25c>
 800c88a:	7821      	ldrb	r1, [r4, #0]
 800c88c:	2203      	movs	r2, #3
 800c88e:	4650      	mov	r0, sl
 800c890:	f7f3 fcde 	bl	8000250 <memchr>
 800c894:	b140      	cbz	r0, 800c8a8 <_vfiprintf_r+0x198>
 800c896:	2340      	movs	r3, #64	; 0x40
 800c898:	eba0 000a 	sub.w	r0, r0, sl
 800c89c:	fa03 f000 	lsl.w	r0, r3, r0
 800c8a0:	9b04      	ldr	r3, [sp, #16]
 800c8a2:	4303      	orrs	r3, r0
 800c8a4:	3401      	adds	r4, #1
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ac:	482c      	ldr	r0, [pc, #176]	; (800c960 <_vfiprintf_r+0x250>)
 800c8ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8b2:	2206      	movs	r2, #6
 800c8b4:	f7f3 fccc 	bl	8000250 <memchr>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d03f      	beq.n	800c93c <_vfiprintf_r+0x22c>
 800c8bc:	4b29      	ldr	r3, [pc, #164]	; (800c964 <_vfiprintf_r+0x254>)
 800c8be:	bb1b      	cbnz	r3, 800c908 <_vfiprintf_r+0x1f8>
 800c8c0:	9b03      	ldr	r3, [sp, #12]
 800c8c2:	3307      	adds	r3, #7
 800c8c4:	f023 0307 	bic.w	r3, r3, #7
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ce:	443b      	add	r3, r7
 800c8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d2:	e767      	b.n	800c7a4 <_vfiprintf_r+0x94>
 800c8d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8d8:	460c      	mov	r4, r1
 800c8da:	2001      	movs	r0, #1
 800c8dc:	e7a5      	b.n	800c82a <_vfiprintf_r+0x11a>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	3401      	adds	r4, #1
 800c8e2:	9305      	str	r3, [sp, #20]
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	f04f 0c0a 	mov.w	ip, #10
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8f0:	3a30      	subs	r2, #48	; 0x30
 800c8f2:	2a09      	cmp	r2, #9
 800c8f4:	d903      	bls.n	800c8fe <_vfiprintf_r+0x1ee>
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d0c5      	beq.n	800c886 <_vfiprintf_r+0x176>
 800c8fa:	9105      	str	r1, [sp, #20]
 800c8fc:	e7c3      	b.n	800c886 <_vfiprintf_r+0x176>
 800c8fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c902:	4604      	mov	r4, r0
 800c904:	2301      	movs	r3, #1
 800c906:	e7f0      	b.n	800c8ea <_vfiprintf_r+0x1da>
 800c908:	ab03      	add	r3, sp, #12
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	462a      	mov	r2, r5
 800c90e:	4b16      	ldr	r3, [pc, #88]	; (800c968 <_vfiprintf_r+0x258>)
 800c910:	a904      	add	r1, sp, #16
 800c912:	4630      	mov	r0, r6
 800c914:	f7fd fea4 	bl	800a660 <_printf_float>
 800c918:	4607      	mov	r7, r0
 800c91a:	1c78      	adds	r0, r7, #1
 800c91c:	d1d6      	bne.n	800c8cc <_vfiprintf_r+0x1bc>
 800c91e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c920:	07d9      	lsls	r1, r3, #31
 800c922:	d405      	bmi.n	800c930 <_vfiprintf_r+0x220>
 800c924:	89ab      	ldrh	r3, [r5, #12]
 800c926:	059a      	lsls	r2, r3, #22
 800c928:	d402      	bmi.n	800c930 <_vfiprintf_r+0x220>
 800c92a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c92c:	f000 faaf 	bl	800ce8e <__retarget_lock_release_recursive>
 800c930:	89ab      	ldrh	r3, [r5, #12]
 800c932:	065b      	lsls	r3, r3, #25
 800c934:	f53f af12 	bmi.w	800c75c <_vfiprintf_r+0x4c>
 800c938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c93a:	e711      	b.n	800c760 <_vfiprintf_r+0x50>
 800c93c:	ab03      	add	r3, sp, #12
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	462a      	mov	r2, r5
 800c942:	4b09      	ldr	r3, [pc, #36]	; (800c968 <_vfiprintf_r+0x258>)
 800c944:	a904      	add	r1, sp, #16
 800c946:	4630      	mov	r0, r6
 800c948:	f7fe f916 	bl	800ab78 <_printf_i>
 800c94c:	e7e4      	b.n	800c918 <_vfiprintf_r+0x208>
 800c94e:	bf00      	nop
 800c950:	0800d8dc 	.word	0x0800d8dc
 800c954:	0800d8fc 	.word	0x0800d8fc
 800c958:	0800d8bc 	.word	0x0800d8bc
 800c95c:	0800d764 	.word	0x0800d764
 800c960:	0800d76e 	.word	0x0800d76e
 800c964:	0800a661 	.word	0x0800a661
 800c968:	0800c6eb 	.word	0x0800c6eb
 800c96c:	0800d76a 	.word	0x0800d76a

0800c970 <__swbuf_r>:
 800c970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c972:	460e      	mov	r6, r1
 800c974:	4614      	mov	r4, r2
 800c976:	4605      	mov	r5, r0
 800c978:	b118      	cbz	r0, 800c982 <__swbuf_r+0x12>
 800c97a:	6983      	ldr	r3, [r0, #24]
 800c97c:	b90b      	cbnz	r3, 800c982 <__swbuf_r+0x12>
 800c97e:	f000 f9e7 	bl	800cd50 <__sinit>
 800c982:	4b21      	ldr	r3, [pc, #132]	; (800ca08 <__swbuf_r+0x98>)
 800c984:	429c      	cmp	r4, r3
 800c986:	d12b      	bne.n	800c9e0 <__swbuf_r+0x70>
 800c988:	686c      	ldr	r4, [r5, #4]
 800c98a:	69a3      	ldr	r3, [r4, #24]
 800c98c:	60a3      	str	r3, [r4, #8]
 800c98e:	89a3      	ldrh	r3, [r4, #12]
 800c990:	071a      	lsls	r2, r3, #28
 800c992:	d52f      	bpl.n	800c9f4 <__swbuf_r+0x84>
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	b36b      	cbz	r3, 800c9f4 <__swbuf_r+0x84>
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	6820      	ldr	r0, [r4, #0]
 800c99c:	1ac0      	subs	r0, r0, r3
 800c99e:	6963      	ldr	r3, [r4, #20]
 800c9a0:	b2f6      	uxtb	r6, r6
 800c9a2:	4283      	cmp	r3, r0
 800c9a4:	4637      	mov	r7, r6
 800c9a6:	dc04      	bgt.n	800c9b2 <__swbuf_r+0x42>
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f000 f93c 	bl	800cc28 <_fflush_r>
 800c9b0:	bb30      	cbnz	r0, 800ca00 <__swbuf_r+0x90>
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	60a3      	str	r3, [r4, #8]
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	6022      	str	r2, [r4, #0]
 800c9be:	701e      	strb	r6, [r3, #0]
 800c9c0:	6963      	ldr	r3, [r4, #20]
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	4283      	cmp	r3, r0
 800c9c6:	d004      	beq.n	800c9d2 <__swbuf_r+0x62>
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	07db      	lsls	r3, r3, #31
 800c9cc:	d506      	bpl.n	800c9dc <__swbuf_r+0x6c>
 800c9ce:	2e0a      	cmp	r6, #10
 800c9d0:	d104      	bne.n	800c9dc <__swbuf_r+0x6c>
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f000 f927 	bl	800cc28 <_fflush_r>
 800c9da:	b988      	cbnz	r0, 800ca00 <__swbuf_r+0x90>
 800c9dc:	4638      	mov	r0, r7
 800c9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ca0c <__swbuf_r+0x9c>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	d101      	bne.n	800c9ea <__swbuf_r+0x7a>
 800c9e6:	68ac      	ldr	r4, [r5, #8]
 800c9e8:	e7cf      	b.n	800c98a <__swbuf_r+0x1a>
 800c9ea:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <__swbuf_r+0xa0>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	bf08      	it	eq
 800c9f0:	68ec      	ldreq	r4, [r5, #12]
 800c9f2:	e7ca      	b.n	800c98a <__swbuf_r+0x1a>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f000 f81a 	bl	800ca30 <__swsetup_r>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d0cb      	beq.n	800c998 <__swbuf_r+0x28>
 800ca00:	f04f 37ff 	mov.w	r7, #4294967295
 800ca04:	e7ea      	b.n	800c9dc <__swbuf_r+0x6c>
 800ca06:	bf00      	nop
 800ca08:	0800d8dc 	.word	0x0800d8dc
 800ca0c:	0800d8fc 	.word	0x0800d8fc
 800ca10:	0800d8bc 	.word	0x0800d8bc

0800ca14 <__ascii_wctomb>:
 800ca14:	b149      	cbz	r1, 800ca2a <__ascii_wctomb+0x16>
 800ca16:	2aff      	cmp	r2, #255	; 0xff
 800ca18:	bf85      	ittet	hi
 800ca1a:	238a      	movhi	r3, #138	; 0x8a
 800ca1c:	6003      	strhi	r3, [r0, #0]
 800ca1e:	700a      	strbls	r2, [r1, #0]
 800ca20:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca24:	bf98      	it	ls
 800ca26:	2001      	movls	r0, #1
 800ca28:	4770      	bx	lr
 800ca2a:	4608      	mov	r0, r1
 800ca2c:	4770      	bx	lr
	...

0800ca30 <__swsetup_r>:
 800ca30:	4b32      	ldr	r3, [pc, #200]	; (800cafc <__swsetup_r+0xcc>)
 800ca32:	b570      	push	{r4, r5, r6, lr}
 800ca34:	681d      	ldr	r5, [r3, #0]
 800ca36:	4606      	mov	r6, r0
 800ca38:	460c      	mov	r4, r1
 800ca3a:	b125      	cbz	r5, 800ca46 <__swsetup_r+0x16>
 800ca3c:	69ab      	ldr	r3, [r5, #24]
 800ca3e:	b913      	cbnz	r3, 800ca46 <__swsetup_r+0x16>
 800ca40:	4628      	mov	r0, r5
 800ca42:	f000 f985 	bl	800cd50 <__sinit>
 800ca46:	4b2e      	ldr	r3, [pc, #184]	; (800cb00 <__swsetup_r+0xd0>)
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d10f      	bne.n	800ca6c <__swsetup_r+0x3c>
 800ca4c:	686c      	ldr	r4, [r5, #4]
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca54:	0719      	lsls	r1, r3, #28
 800ca56:	d42c      	bmi.n	800cab2 <__swsetup_r+0x82>
 800ca58:	06dd      	lsls	r5, r3, #27
 800ca5a:	d411      	bmi.n	800ca80 <__swsetup_r+0x50>
 800ca5c:	2309      	movs	r3, #9
 800ca5e:	6033      	str	r3, [r6, #0]
 800ca60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca64:	81a3      	strh	r3, [r4, #12]
 800ca66:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6a:	e03e      	b.n	800caea <__swsetup_r+0xba>
 800ca6c:	4b25      	ldr	r3, [pc, #148]	; (800cb04 <__swsetup_r+0xd4>)
 800ca6e:	429c      	cmp	r4, r3
 800ca70:	d101      	bne.n	800ca76 <__swsetup_r+0x46>
 800ca72:	68ac      	ldr	r4, [r5, #8]
 800ca74:	e7eb      	b.n	800ca4e <__swsetup_r+0x1e>
 800ca76:	4b24      	ldr	r3, [pc, #144]	; (800cb08 <__swsetup_r+0xd8>)
 800ca78:	429c      	cmp	r4, r3
 800ca7a:	bf08      	it	eq
 800ca7c:	68ec      	ldreq	r4, [r5, #12]
 800ca7e:	e7e6      	b.n	800ca4e <__swsetup_r+0x1e>
 800ca80:	0758      	lsls	r0, r3, #29
 800ca82:	d512      	bpl.n	800caaa <__swsetup_r+0x7a>
 800ca84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca86:	b141      	cbz	r1, 800ca9a <__swsetup_r+0x6a>
 800ca88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca8c:	4299      	cmp	r1, r3
 800ca8e:	d002      	beq.n	800ca96 <__swsetup_r+0x66>
 800ca90:	4630      	mov	r0, r6
 800ca92:	f7ff fb6f 	bl	800c174 <_free_r>
 800ca96:	2300      	movs	r3, #0
 800ca98:	6363      	str	r3, [r4, #52]	; 0x34
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800caa0:	81a3      	strh	r3, [r4, #12]
 800caa2:	2300      	movs	r3, #0
 800caa4:	6063      	str	r3, [r4, #4]
 800caa6:	6923      	ldr	r3, [r4, #16]
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	89a3      	ldrh	r3, [r4, #12]
 800caac:	f043 0308 	orr.w	r3, r3, #8
 800cab0:	81a3      	strh	r3, [r4, #12]
 800cab2:	6923      	ldr	r3, [r4, #16]
 800cab4:	b94b      	cbnz	r3, 800caca <__swsetup_r+0x9a>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac0:	d003      	beq.n	800caca <__swsetup_r+0x9a>
 800cac2:	4621      	mov	r1, r4
 800cac4:	4630      	mov	r0, r6
 800cac6:	f000 fa07 	bl	800ced8 <__smakebuf_r>
 800caca:	89a0      	ldrh	r0, [r4, #12]
 800cacc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cad0:	f010 0301 	ands.w	r3, r0, #1
 800cad4:	d00a      	beq.n	800caec <__swsetup_r+0xbc>
 800cad6:	2300      	movs	r3, #0
 800cad8:	60a3      	str	r3, [r4, #8]
 800cada:	6963      	ldr	r3, [r4, #20]
 800cadc:	425b      	negs	r3, r3
 800cade:	61a3      	str	r3, [r4, #24]
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	b943      	cbnz	r3, 800caf6 <__swsetup_r+0xc6>
 800cae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cae8:	d1ba      	bne.n	800ca60 <__swsetup_r+0x30>
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	0781      	lsls	r1, r0, #30
 800caee:	bf58      	it	pl
 800caf0:	6963      	ldrpl	r3, [r4, #20]
 800caf2:	60a3      	str	r3, [r4, #8]
 800caf4:	e7f4      	b.n	800cae0 <__swsetup_r+0xb0>
 800caf6:	2000      	movs	r0, #0
 800caf8:	e7f7      	b.n	800caea <__swsetup_r+0xba>
 800cafa:	bf00      	nop
 800cafc:	200000dc 	.word	0x200000dc
 800cb00:	0800d8dc 	.word	0x0800d8dc
 800cb04:	0800d8fc 	.word	0x0800d8fc
 800cb08:	0800d8bc 	.word	0x0800d8bc

0800cb0c <abort>:
 800cb0c:	b508      	push	{r3, lr}
 800cb0e:	2006      	movs	r0, #6
 800cb10:	f000 fa52 	bl	800cfb8 <raise>
 800cb14:	2001      	movs	r0, #1
 800cb16:	f7f7 fa01 	bl	8003f1c <_exit>
	...

0800cb1c <__sflush_r>:
 800cb1c:	898a      	ldrh	r2, [r1, #12]
 800cb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb22:	4605      	mov	r5, r0
 800cb24:	0710      	lsls	r0, r2, #28
 800cb26:	460c      	mov	r4, r1
 800cb28:	d458      	bmi.n	800cbdc <__sflush_r+0xc0>
 800cb2a:	684b      	ldr	r3, [r1, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	dc05      	bgt.n	800cb3c <__sflush_r+0x20>
 800cb30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	dc02      	bgt.n	800cb3c <__sflush_r+0x20>
 800cb36:	2000      	movs	r0, #0
 800cb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb3e:	2e00      	cmp	r6, #0
 800cb40:	d0f9      	beq.n	800cb36 <__sflush_r+0x1a>
 800cb42:	2300      	movs	r3, #0
 800cb44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb48:	682f      	ldr	r7, [r5, #0]
 800cb4a:	602b      	str	r3, [r5, #0]
 800cb4c:	d032      	beq.n	800cbb4 <__sflush_r+0x98>
 800cb4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	075a      	lsls	r2, r3, #29
 800cb54:	d505      	bpl.n	800cb62 <__sflush_r+0x46>
 800cb56:	6863      	ldr	r3, [r4, #4]
 800cb58:	1ac0      	subs	r0, r0, r3
 800cb5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb5c:	b10b      	cbz	r3, 800cb62 <__sflush_r+0x46>
 800cb5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb60:	1ac0      	subs	r0, r0, r3
 800cb62:	2300      	movs	r3, #0
 800cb64:	4602      	mov	r2, r0
 800cb66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb68:	6a21      	ldr	r1, [r4, #32]
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	47b0      	blx	r6
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	d106      	bne.n	800cb82 <__sflush_r+0x66>
 800cb74:	6829      	ldr	r1, [r5, #0]
 800cb76:	291d      	cmp	r1, #29
 800cb78:	d82c      	bhi.n	800cbd4 <__sflush_r+0xb8>
 800cb7a:	4a2a      	ldr	r2, [pc, #168]	; (800cc24 <__sflush_r+0x108>)
 800cb7c:	40ca      	lsrs	r2, r1
 800cb7e:	07d6      	lsls	r6, r2, #31
 800cb80:	d528      	bpl.n	800cbd4 <__sflush_r+0xb8>
 800cb82:	2200      	movs	r2, #0
 800cb84:	6062      	str	r2, [r4, #4]
 800cb86:	04d9      	lsls	r1, r3, #19
 800cb88:	6922      	ldr	r2, [r4, #16]
 800cb8a:	6022      	str	r2, [r4, #0]
 800cb8c:	d504      	bpl.n	800cb98 <__sflush_r+0x7c>
 800cb8e:	1c42      	adds	r2, r0, #1
 800cb90:	d101      	bne.n	800cb96 <__sflush_r+0x7a>
 800cb92:	682b      	ldr	r3, [r5, #0]
 800cb94:	b903      	cbnz	r3, 800cb98 <__sflush_r+0x7c>
 800cb96:	6560      	str	r0, [r4, #84]	; 0x54
 800cb98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb9a:	602f      	str	r7, [r5, #0]
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	d0ca      	beq.n	800cb36 <__sflush_r+0x1a>
 800cba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cba4:	4299      	cmp	r1, r3
 800cba6:	d002      	beq.n	800cbae <__sflush_r+0x92>
 800cba8:	4628      	mov	r0, r5
 800cbaa:	f7ff fae3 	bl	800c174 <_free_r>
 800cbae:	2000      	movs	r0, #0
 800cbb0:	6360      	str	r0, [r4, #52]	; 0x34
 800cbb2:	e7c1      	b.n	800cb38 <__sflush_r+0x1c>
 800cbb4:	6a21      	ldr	r1, [r4, #32]
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	4628      	mov	r0, r5
 800cbba:	47b0      	blx	r6
 800cbbc:	1c41      	adds	r1, r0, #1
 800cbbe:	d1c7      	bne.n	800cb50 <__sflush_r+0x34>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0c4      	beq.n	800cb50 <__sflush_r+0x34>
 800cbc6:	2b1d      	cmp	r3, #29
 800cbc8:	d001      	beq.n	800cbce <__sflush_r+0xb2>
 800cbca:	2b16      	cmp	r3, #22
 800cbcc:	d101      	bne.n	800cbd2 <__sflush_r+0xb6>
 800cbce:	602f      	str	r7, [r5, #0]
 800cbd0:	e7b1      	b.n	800cb36 <__sflush_r+0x1a>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd8:	81a3      	strh	r3, [r4, #12]
 800cbda:	e7ad      	b.n	800cb38 <__sflush_r+0x1c>
 800cbdc:	690f      	ldr	r7, [r1, #16]
 800cbde:	2f00      	cmp	r7, #0
 800cbe0:	d0a9      	beq.n	800cb36 <__sflush_r+0x1a>
 800cbe2:	0793      	lsls	r3, r2, #30
 800cbe4:	680e      	ldr	r6, [r1, #0]
 800cbe6:	bf08      	it	eq
 800cbe8:	694b      	ldreq	r3, [r1, #20]
 800cbea:	600f      	str	r7, [r1, #0]
 800cbec:	bf18      	it	ne
 800cbee:	2300      	movne	r3, #0
 800cbf0:	eba6 0807 	sub.w	r8, r6, r7
 800cbf4:	608b      	str	r3, [r1, #8]
 800cbf6:	f1b8 0f00 	cmp.w	r8, #0
 800cbfa:	dd9c      	ble.n	800cb36 <__sflush_r+0x1a>
 800cbfc:	6a21      	ldr	r1, [r4, #32]
 800cbfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc00:	4643      	mov	r3, r8
 800cc02:	463a      	mov	r2, r7
 800cc04:	4628      	mov	r0, r5
 800cc06:	47b0      	blx	r6
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	dc06      	bgt.n	800cc1a <__sflush_r+0xfe>
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc12:	81a3      	strh	r3, [r4, #12]
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295
 800cc18:	e78e      	b.n	800cb38 <__sflush_r+0x1c>
 800cc1a:	4407      	add	r7, r0
 800cc1c:	eba8 0800 	sub.w	r8, r8, r0
 800cc20:	e7e9      	b.n	800cbf6 <__sflush_r+0xda>
 800cc22:	bf00      	nop
 800cc24:	20400001 	.word	0x20400001

0800cc28 <_fflush_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	690b      	ldr	r3, [r1, #16]
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	b913      	cbnz	r3, 800cc38 <_fflush_r+0x10>
 800cc32:	2500      	movs	r5, #0
 800cc34:	4628      	mov	r0, r5
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	b118      	cbz	r0, 800cc42 <_fflush_r+0x1a>
 800cc3a:	6983      	ldr	r3, [r0, #24]
 800cc3c:	b90b      	cbnz	r3, 800cc42 <_fflush_r+0x1a>
 800cc3e:	f000 f887 	bl	800cd50 <__sinit>
 800cc42:	4b14      	ldr	r3, [pc, #80]	; (800cc94 <_fflush_r+0x6c>)
 800cc44:	429c      	cmp	r4, r3
 800cc46:	d11b      	bne.n	800cc80 <_fflush_r+0x58>
 800cc48:	686c      	ldr	r4, [r5, #4]
 800cc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d0ef      	beq.n	800cc32 <_fflush_r+0xa>
 800cc52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc54:	07d0      	lsls	r0, r2, #31
 800cc56:	d404      	bmi.n	800cc62 <_fflush_r+0x3a>
 800cc58:	0599      	lsls	r1, r3, #22
 800cc5a:	d402      	bmi.n	800cc62 <_fflush_r+0x3a>
 800cc5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc5e:	f000 f915 	bl	800ce8c <__retarget_lock_acquire_recursive>
 800cc62:	4628      	mov	r0, r5
 800cc64:	4621      	mov	r1, r4
 800cc66:	f7ff ff59 	bl	800cb1c <__sflush_r>
 800cc6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc6c:	07da      	lsls	r2, r3, #31
 800cc6e:	4605      	mov	r5, r0
 800cc70:	d4e0      	bmi.n	800cc34 <_fflush_r+0xc>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	059b      	lsls	r3, r3, #22
 800cc76:	d4dd      	bmi.n	800cc34 <_fflush_r+0xc>
 800cc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc7a:	f000 f908 	bl	800ce8e <__retarget_lock_release_recursive>
 800cc7e:	e7d9      	b.n	800cc34 <_fflush_r+0xc>
 800cc80:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <_fflush_r+0x70>)
 800cc82:	429c      	cmp	r4, r3
 800cc84:	d101      	bne.n	800cc8a <_fflush_r+0x62>
 800cc86:	68ac      	ldr	r4, [r5, #8]
 800cc88:	e7df      	b.n	800cc4a <_fflush_r+0x22>
 800cc8a:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <_fflush_r+0x74>)
 800cc8c:	429c      	cmp	r4, r3
 800cc8e:	bf08      	it	eq
 800cc90:	68ec      	ldreq	r4, [r5, #12]
 800cc92:	e7da      	b.n	800cc4a <_fflush_r+0x22>
 800cc94:	0800d8dc 	.word	0x0800d8dc
 800cc98:	0800d8fc 	.word	0x0800d8fc
 800cc9c:	0800d8bc 	.word	0x0800d8bc

0800cca0 <std>:
 800cca0:	2300      	movs	r3, #0
 800cca2:	b510      	push	{r4, lr}
 800cca4:	4604      	mov	r4, r0
 800cca6:	e9c0 3300 	strd	r3, r3, [r0]
 800ccaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccae:	6083      	str	r3, [r0, #8]
 800ccb0:	8181      	strh	r1, [r0, #12]
 800ccb2:	6643      	str	r3, [r0, #100]	; 0x64
 800ccb4:	81c2      	strh	r2, [r0, #14]
 800ccb6:	6183      	str	r3, [r0, #24]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	2208      	movs	r2, #8
 800ccbc:	305c      	adds	r0, #92	; 0x5c
 800ccbe:	f7fd fc35 	bl	800a52c <memset>
 800ccc2:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <std+0x38>)
 800ccc4:	6263      	str	r3, [r4, #36]	; 0x24
 800ccc6:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <std+0x3c>)
 800ccc8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <std+0x40>)
 800cccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccce:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <std+0x44>)
 800ccd0:	6224      	str	r4, [r4, #32]
 800ccd2:	6323      	str	r3, [r4, #48]	; 0x30
 800ccd4:	bd10      	pop	{r4, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0800cff1 	.word	0x0800cff1
 800ccdc:	0800d013 	.word	0x0800d013
 800cce0:	0800d04b 	.word	0x0800d04b
 800cce4:	0800d06f 	.word	0x0800d06f

0800cce8 <_cleanup_r>:
 800cce8:	4901      	ldr	r1, [pc, #4]	; (800ccf0 <_cleanup_r+0x8>)
 800ccea:	f000 b8af 	b.w	800ce4c <_fwalk_reent>
 800ccee:	bf00      	nop
 800ccf0:	0800cc29 	.word	0x0800cc29

0800ccf4 <__sfmoreglue>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	1e4a      	subs	r2, r1, #1
 800ccf8:	2568      	movs	r5, #104	; 0x68
 800ccfa:	4355      	muls	r5, r2
 800ccfc:	460e      	mov	r6, r1
 800ccfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd02:	f7ff fa87 	bl	800c214 <_malloc_r>
 800cd06:	4604      	mov	r4, r0
 800cd08:	b140      	cbz	r0, 800cd1c <__sfmoreglue+0x28>
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	e9c0 1600 	strd	r1, r6, [r0]
 800cd10:	300c      	adds	r0, #12
 800cd12:	60a0      	str	r0, [r4, #8]
 800cd14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd18:	f7fd fc08 	bl	800a52c <memset>
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}

0800cd20 <__sfp_lock_acquire>:
 800cd20:	4801      	ldr	r0, [pc, #4]	; (800cd28 <__sfp_lock_acquire+0x8>)
 800cd22:	f000 b8b3 	b.w	800ce8c <__retarget_lock_acquire_recursive>
 800cd26:	bf00      	nop
 800cd28:	2000076c 	.word	0x2000076c

0800cd2c <__sfp_lock_release>:
 800cd2c:	4801      	ldr	r0, [pc, #4]	; (800cd34 <__sfp_lock_release+0x8>)
 800cd2e:	f000 b8ae 	b.w	800ce8e <__retarget_lock_release_recursive>
 800cd32:	bf00      	nop
 800cd34:	2000076c 	.word	0x2000076c

0800cd38 <__sinit_lock_acquire>:
 800cd38:	4801      	ldr	r0, [pc, #4]	; (800cd40 <__sinit_lock_acquire+0x8>)
 800cd3a:	f000 b8a7 	b.w	800ce8c <__retarget_lock_acquire_recursive>
 800cd3e:	bf00      	nop
 800cd40:	20000767 	.word	0x20000767

0800cd44 <__sinit_lock_release>:
 800cd44:	4801      	ldr	r0, [pc, #4]	; (800cd4c <__sinit_lock_release+0x8>)
 800cd46:	f000 b8a2 	b.w	800ce8e <__retarget_lock_release_recursive>
 800cd4a:	bf00      	nop
 800cd4c:	20000767 	.word	0x20000767

0800cd50 <__sinit>:
 800cd50:	b510      	push	{r4, lr}
 800cd52:	4604      	mov	r4, r0
 800cd54:	f7ff fff0 	bl	800cd38 <__sinit_lock_acquire>
 800cd58:	69a3      	ldr	r3, [r4, #24]
 800cd5a:	b11b      	cbz	r3, 800cd64 <__sinit+0x14>
 800cd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd60:	f7ff bff0 	b.w	800cd44 <__sinit_lock_release>
 800cd64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd68:	6523      	str	r3, [r4, #80]	; 0x50
 800cd6a:	4b13      	ldr	r3, [pc, #76]	; (800cdb8 <__sinit+0x68>)
 800cd6c:	4a13      	ldr	r2, [pc, #76]	; (800cdbc <__sinit+0x6c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd72:	42a3      	cmp	r3, r4
 800cd74:	bf04      	itt	eq
 800cd76:	2301      	moveq	r3, #1
 800cd78:	61a3      	streq	r3, [r4, #24]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 f820 	bl	800cdc0 <__sfp>
 800cd80:	6060      	str	r0, [r4, #4]
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 f81c 	bl	800cdc0 <__sfp>
 800cd88:	60a0      	str	r0, [r4, #8]
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 f818 	bl	800cdc0 <__sfp>
 800cd90:	2200      	movs	r2, #0
 800cd92:	60e0      	str	r0, [r4, #12]
 800cd94:	2104      	movs	r1, #4
 800cd96:	6860      	ldr	r0, [r4, #4]
 800cd98:	f7ff ff82 	bl	800cca0 <std>
 800cd9c:	68a0      	ldr	r0, [r4, #8]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	2109      	movs	r1, #9
 800cda2:	f7ff ff7d 	bl	800cca0 <std>
 800cda6:	68e0      	ldr	r0, [r4, #12]
 800cda8:	2202      	movs	r2, #2
 800cdaa:	2112      	movs	r1, #18
 800cdac:	f7ff ff78 	bl	800cca0 <std>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	61a3      	str	r3, [r4, #24]
 800cdb4:	e7d2      	b.n	800cd5c <__sinit+0xc>
 800cdb6:	bf00      	nop
 800cdb8:	0800d538 	.word	0x0800d538
 800cdbc:	0800cce9 	.word	0x0800cce9

0800cdc0 <__sfp>:
 800cdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc2:	4607      	mov	r7, r0
 800cdc4:	f7ff ffac 	bl	800cd20 <__sfp_lock_acquire>
 800cdc8:	4b1e      	ldr	r3, [pc, #120]	; (800ce44 <__sfp+0x84>)
 800cdca:	681e      	ldr	r6, [r3, #0]
 800cdcc:	69b3      	ldr	r3, [r6, #24]
 800cdce:	b913      	cbnz	r3, 800cdd6 <__sfp+0x16>
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7ff ffbd 	bl	800cd50 <__sinit>
 800cdd6:	3648      	adds	r6, #72	; 0x48
 800cdd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	d503      	bpl.n	800cde8 <__sfp+0x28>
 800cde0:	6833      	ldr	r3, [r6, #0]
 800cde2:	b30b      	cbz	r3, 800ce28 <__sfp+0x68>
 800cde4:	6836      	ldr	r6, [r6, #0]
 800cde6:	e7f7      	b.n	800cdd8 <__sfp+0x18>
 800cde8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cdec:	b9d5      	cbnz	r5, 800ce24 <__sfp+0x64>
 800cdee:	4b16      	ldr	r3, [pc, #88]	; (800ce48 <__sfp+0x88>)
 800cdf0:	60e3      	str	r3, [r4, #12]
 800cdf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdf6:	6665      	str	r5, [r4, #100]	; 0x64
 800cdf8:	f000 f847 	bl	800ce8a <__retarget_lock_init_recursive>
 800cdfc:	f7ff ff96 	bl	800cd2c <__sfp_lock_release>
 800ce00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce08:	6025      	str	r5, [r4, #0]
 800ce0a:	61a5      	str	r5, [r4, #24]
 800ce0c:	2208      	movs	r2, #8
 800ce0e:	4629      	mov	r1, r5
 800ce10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce14:	f7fd fb8a 	bl	800a52c <memset>
 800ce18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce20:	4620      	mov	r0, r4
 800ce22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce24:	3468      	adds	r4, #104	; 0x68
 800ce26:	e7d9      	b.n	800cddc <__sfp+0x1c>
 800ce28:	2104      	movs	r1, #4
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	f7ff ff62 	bl	800ccf4 <__sfmoreglue>
 800ce30:	4604      	mov	r4, r0
 800ce32:	6030      	str	r0, [r6, #0]
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d1d5      	bne.n	800cde4 <__sfp+0x24>
 800ce38:	f7ff ff78 	bl	800cd2c <__sfp_lock_release>
 800ce3c:	230c      	movs	r3, #12
 800ce3e:	603b      	str	r3, [r7, #0]
 800ce40:	e7ee      	b.n	800ce20 <__sfp+0x60>
 800ce42:	bf00      	nop
 800ce44:	0800d538 	.word	0x0800d538
 800ce48:	ffff0001 	.word	0xffff0001

0800ce4c <_fwalk_reent>:
 800ce4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce50:	4606      	mov	r6, r0
 800ce52:	4688      	mov	r8, r1
 800ce54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce58:	2700      	movs	r7, #0
 800ce5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce5e:	f1b9 0901 	subs.w	r9, r9, #1
 800ce62:	d505      	bpl.n	800ce70 <_fwalk_reent+0x24>
 800ce64:	6824      	ldr	r4, [r4, #0]
 800ce66:	2c00      	cmp	r4, #0
 800ce68:	d1f7      	bne.n	800ce5a <_fwalk_reent+0xe>
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce70:	89ab      	ldrh	r3, [r5, #12]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d907      	bls.n	800ce86 <_fwalk_reent+0x3a>
 800ce76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	d003      	beq.n	800ce86 <_fwalk_reent+0x3a>
 800ce7e:	4629      	mov	r1, r5
 800ce80:	4630      	mov	r0, r6
 800ce82:	47c0      	blx	r8
 800ce84:	4307      	orrs	r7, r0
 800ce86:	3568      	adds	r5, #104	; 0x68
 800ce88:	e7e9      	b.n	800ce5e <_fwalk_reent+0x12>

0800ce8a <__retarget_lock_init_recursive>:
 800ce8a:	4770      	bx	lr

0800ce8c <__retarget_lock_acquire_recursive>:
 800ce8c:	4770      	bx	lr

0800ce8e <__retarget_lock_release_recursive>:
 800ce8e:	4770      	bx	lr

0800ce90 <__swhatbuf_r>:
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	460e      	mov	r6, r1
 800ce94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce98:	2900      	cmp	r1, #0
 800ce9a:	b096      	sub	sp, #88	; 0x58
 800ce9c:	4614      	mov	r4, r2
 800ce9e:	461d      	mov	r5, r3
 800cea0:	da07      	bge.n	800ceb2 <__swhatbuf_r+0x22>
 800cea2:	2300      	movs	r3, #0
 800cea4:	602b      	str	r3, [r5, #0]
 800cea6:	89b3      	ldrh	r3, [r6, #12]
 800cea8:	061a      	lsls	r2, r3, #24
 800ceaa:	d410      	bmi.n	800cece <__swhatbuf_r+0x3e>
 800ceac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceb0:	e00e      	b.n	800ced0 <__swhatbuf_r+0x40>
 800ceb2:	466a      	mov	r2, sp
 800ceb4:	f000 f902 	bl	800d0bc <_fstat_r>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	dbf2      	blt.n	800cea2 <__swhatbuf_r+0x12>
 800cebc:	9a01      	ldr	r2, [sp, #4]
 800cebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cec6:	425a      	negs	r2, r3
 800cec8:	415a      	adcs	r2, r3
 800ceca:	602a      	str	r2, [r5, #0]
 800cecc:	e7ee      	b.n	800ceac <__swhatbuf_r+0x1c>
 800cece:	2340      	movs	r3, #64	; 0x40
 800ced0:	2000      	movs	r0, #0
 800ced2:	6023      	str	r3, [r4, #0]
 800ced4:	b016      	add	sp, #88	; 0x58
 800ced6:	bd70      	pop	{r4, r5, r6, pc}

0800ced8 <__smakebuf_r>:
 800ced8:	898b      	ldrh	r3, [r1, #12]
 800ceda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cedc:	079d      	lsls	r5, r3, #30
 800cede:	4606      	mov	r6, r0
 800cee0:	460c      	mov	r4, r1
 800cee2:	d507      	bpl.n	800cef4 <__smakebuf_r+0x1c>
 800cee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	6123      	str	r3, [r4, #16]
 800ceec:	2301      	movs	r3, #1
 800ceee:	6163      	str	r3, [r4, #20]
 800cef0:	b002      	add	sp, #8
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	ab01      	add	r3, sp, #4
 800cef6:	466a      	mov	r2, sp
 800cef8:	f7ff ffca 	bl	800ce90 <__swhatbuf_r>
 800cefc:	9900      	ldr	r1, [sp, #0]
 800cefe:	4605      	mov	r5, r0
 800cf00:	4630      	mov	r0, r6
 800cf02:	f7ff f987 	bl	800c214 <_malloc_r>
 800cf06:	b948      	cbnz	r0, 800cf1c <__smakebuf_r+0x44>
 800cf08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf0c:	059a      	lsls	r2, r3, #22
 800cf0e:	d4ef      	bmi.n	800cef0 <__smakebuf_r+0x18>
 800cf10:	f023 0303 	bic.w	r3, r3, #3
 800cf14:	f043 0302 	orr.w	r3, r3, #2
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	e7e3      	b.n	800cee4 <__smakebuf_r+0xc>
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <__smakebuf_r+0x7c>)
 800cf1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	6020      	str	r0, [r4, #0]
 800cf24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf28:	81a3      	strh	r3, [r4, #12]
 800cf2a:	9b00      	ldr	r3, [sp, #0]
 800cf2c:	6163      	str	r3, [r4, #20]
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	6120      	str	r0, [r4, #16]
 800cf32:	b15b      	cbz	r3, 800cf4c <__smakebuf_r+0x74>
 800cf34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f000 f8d1 	bl	800d0e0 <_isatty_r>
 800cf3e:	b128      	cbz	r0, 800cf4c <__smakebuf_r+0x74>
 800cf40:	89a3      	ldrh	r3, [r4, #12]
 800cf42:	f023 0303 	bic.w	r3, r3, #3
 800cf46:	f043 0301 	orr.w	r3, r3, #1
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	89a0      	ldrh	r0, [r4, #12]
 800cf4e:	4305      	orrs	r5, r0
 800cf50:	81a5      	strh	r5, [r4, #12]
 800cf52:	e7cd      	b.n	800cef0 <__smakebuf_r+0x18>
 800cf54:	0800cce9 	.word	0x0800cce9

0800cf58 <_malloc_usable_size_r>:
 800cf58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf5c:	1f18      	subs	r0, r3, #4
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	bfbc      	itt	lt
 800cf62:	580b      	ldrlt	r3, [r1, r0]
 800cf64:	18c0      	addlt	r0, r0, r3
 800cf66:	4770      	bx	lr

0800cf68 <_raise_r>:
 800cf68:	291f      	cmp	r1, #31
 800cf6a:	b538      	push	{r3, r4, r5, lr}
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	460d      	mov	r5, r1
 800cf70:	d904      	bls.n	800cf7c <_raise_r+0x14>
 800cf72:	2316      	movs	r3, #22
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf7e:	b112      	cbz	r2, 800cf86 <_raise_r+0x1e>
 800cf80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf84:	b94b      	cbnz	r3, 800cf9a <_raise_r+0x32>
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 f830 	bl	800cfec <_getpid_r>
 800cf8c:	462a      	mov	r2, r5
 800cf8e:	4601      	mov	r1, r0
 800cf90:	4620      	mov	r0, r4
 800cf92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf96:	f000 b817 	b.w	800cfc8 <_kill_r>
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d00a      	beq.n	800cfb4 <_raise_r+0x4c>
 800cf9e:	1c59      	adds	r1, r3, #1
 800cfa0:	d103      	bne.n	800cfaa <_raise_r+0x42>
 800cfa2:	2316      	movs	r3, #22
 800cfa4:	6003      	str	r3, [r0, #0]
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	e7e7      	b.n	800cf7a <_raise_r+0x12>
 800cfaa:	2400      	movs	r4, #0
 800cfac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	4798      	blx	r3
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	e7e0      	b.n	800cf7a <_raise_r+0x12>

0800cfb8 <raise>:
 800cfb8:	4b02      	ldr	r3, [pc, #8]	; (800cfc4 <raise+0xc>)
 800cfba:	4601      	mov	r1, r0
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	f7ff bfd3 	b.w	800cf68 <_raise_r>
 800cfc2:	bf00      	nop
 800cfc4:	200000dc 	.word	0x200000dc

0800cfc8 <_kill_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4d07      	ldr	r5, [pc, #28]	; (800cfe8 <_kill_r+0x20>)
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4604      	mov	r4, r0
 800cfd0:	4608      	mov	r0, r1
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	602b      	str	r3, [r5, #0]
 800cfd6:	f7f6 ff91 	bl	8003efc <_kill>
 800cfda:	1c43      	adds	r3, r0, #1
 800cfdc:	d102      	bne.n	800cfe4 <_kill_r+0x1c>
 800cfde:	682b      	ldr	r3, [r5, #0]
 800cfe0:	b103      	cbz	r3, 800cfe4 <_kill_r+0x1c>
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	bd38      	pop	{r3, r4, r5, pc}
 800cfe6:	bf00      	nop
 800cfe8:	20000760 	.word	0x20000760

0800cfec <_getpid_r>:
 800cfec:	f7f6 bf7e 	b.w	8003eec <_getpid>

0800cff0 <__sread>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	460c      	mov	r4, r1
 800cff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff8:	f000 f894 	bl	800d124 <_read_r>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	bfab      	itete	ge
 800d000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d002:	89a3      	ldrhlt	r3, [r4, #12]
 800d004:	181b      	addge	r3, r3, r0
 800d006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d00a:	bfac      	ite	ge
 800d00c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d00e:	81a3      	strhlt	r3, [r4, #12]
 800d010:	bd10      	pop	{r4, pc}

0800d012 <__swrite>:
 800d012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d016:	461f      	mov	r7, r3
 800d018:	898b      	ldrh	r3, [r1, #12]
 800d01a:	05db      	lsls	r3, r3, #23
 800d01c:	4605      	mov	r5, r0
 800d01e:	460c      	mov	r4, r1
 800d020:	4616      	mov	r6, r2
 800d022:	d505      	bpl.n	800d030 <__swrite+0x1e>
 800d024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d028:	2302      	movs	r3, #2
 800d02a:	2200      	movs	r2, #0
 800d02c:	f000 f868 	bl	800d100 <_lseek_r>
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d03a:	81a3      	strh	r3, [r4, #12]
 800d03c:	4632      	mov	r2, r6
 800d03e:	463b      	mov	r3, r7
 800d040:	4628      	mov	r0, r5
 800d042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d046:	f000 b817 	b.w	800d078 <_write_r>

0800d04a <__sseek>:
 800d04a:	b510      	push	{r4, lr}
 800d04c:	460c      	mov	r4, r1
 800d04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d052:	f000 f855 	bl	800d100 <_lseek_r>
 800d056:	1c43      	adds	r3, r0, #1
 800d058:	89a3      	ldrh	r3, [r4, #12]
 800d05a:	bf15      	itete	ne
 800d05c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d066:	81a3      	strheq	r3, [r4, #12]
 800d068:	bf18      	it	ne
 800d06a:	81a3      	strhne	r3, [r4, #12]
 800d06c:	bd10      	pop	{r4, pc}

0800d06e <__sclose>:
 800d06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d072:	f000 b813 	b.w	800d09c <_close_r>
	...

0800d078 <_write_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4d07      	ldr	r5, [pc, #28]	; (800d098 <_write_r+0x20>)
 800d07c:	4604      	mov	r4, r0
 800d07e:	4608      	mov	r0, r1
 800d080:	4611      	mov	r1, r2
 800d082:	2200      	movs	r2, #0
 800d084:	602a      	str	r2, [r5, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	f7f6 ff6f 	bl	8003f6a <_write>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_write_r+0x1e>
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	b103      	cbz	r3, 800d096 <_write_r+0x1e>
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	20000760 	.word	0x20000760

0800d09c <_close_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4d06      	ldr	r5, [pc, #24]	; (800d0b8 <_close_r+0x1c>)
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	4608      	mov	r0, r1
 800d0a6:	602b      	str	r3, [r5, #0]
 800d0a8:	f7f6 ff7b 	bl	8003fa2 <_close>
 800d0ac:	1c43      	adds	r3, r0, #1
 800d0ae:	d102      	bne.n	800d0b6 <_close_r+0x1a>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	b103      	cbz	r3, 800d0b6 <_close_r+0x1a>
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	20000760 	.word	0x20000760

0800d0bc <_fstat_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4d07      	ldr	r5, [pc, #28]	; (800d0dc <_fstat_r+0x20>)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	4611      	mov	r1, r2
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	f7f6 ff76 	bl	8003fba <_fstat>
 800d0ce:	1c43      	adds	r3, r0, #1
 800d0d0:	d102      	bne.n	800d0d8 <_fstat_r+0x1c>
 800d0d2:	682b      	ldr	r3, [r5, #0]
 800d0d4:	b103      	cbz	r3, 800d0d8 <_fstat_r+0x1c>
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	bd38      	pop	{r3, r4, r5, pc}
 800d0da:	bf00      	nop
 800d0dc:	20000760 	.word	0x20000760

0800d0e0 <_isatty_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4d06      	ldr	r5, [pc, #24]	; (800d0fc <_isatty_r+0x1c>)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	f7f6 ff75 	bl	8003fda <_isatty>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_isatty_r+0x1a>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_isatty_r+0x1a>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20000760 	.word	0x20000760

0800d100 <_lseek_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d07      	ldr	r5, [pc, #28]	; (800d120 <_lseek_r+0x20>)
 800d104:	4604      	mov	r4, r0
 800d106:	4608      	mov	r0, r1
 800d108:	4611      	mov	r1, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	602a      	str	r2, [r5, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	f7f6 ff6e 	bl	8003ff0 <_lseek>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_lseek_r+0x1e>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_lseek_r+0x1e>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	20000760 	.word	0x20000760

0800d124 <_read_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d07      	ldr	r5, [pc, #28]	; (800d144 <_read_r+0x20>)
 800d128:	4604      	mov	r4, r0
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	f7f6 fefc 	bl	8003f30 <_read>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d102      	bne.n	800d142 <_read_r+0x1e>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b103      	cbz	r3, 800d142 <_read_r+0x1e>
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	20000760 	.word	0x20000760

0800d148 <_init>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	bf00      	nop
 800d14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14e:	bc08      	pop	{r3}
 800d150:	469e      	mov	lr, r3
 800d152:	4770      	bx	lr

0800d154 <_fini>:
 800d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d156:	bf00      	nop
 800d158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d15a:	bc08      	pop	{r3}
 800d15c:	469e      	mov	lr, r3
 800d15e:	4770      	bx	lr

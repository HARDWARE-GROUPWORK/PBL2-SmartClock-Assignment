
PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4a8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800e6a8  0800e6a8  0001e6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee54  0800ee54  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee54  0800ee54  0001ee54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee5c  0800ee5c  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee5c  0800ee5c  0001ee5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee60  0800ee60  0001ee60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800ee64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200002b0  0800f110  000202b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800f110  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df28  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004061  00000000  00000000  0003e202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00042268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00043aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2d3  00000000  00000000  00045120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4e9  00000000  00000000  000713f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107368  00000000  00000000  0008f8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196c44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007440  00000000  00000000  00196c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b0 	.word	0x200002b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e690 	.word	0x0800e690

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b4 	.word	0x200002b4
 800023c:	0800e690 	.word	0x0800e690

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f006 ffd9 	bl	800765c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f005 fe35 	bl	8006334 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200003e4 	.word	0x200003e4

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000398 	.word	0x20000398

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f007 f809 	bl	8007884 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200003e4 	.word	0x200003e4

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00b f8d4 	bl	800ba78 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f006 feb7 	bl	800765c <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f005 fd20 	bl	8006334 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200003e4 	.word	0x200003e4

08000900 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_ADC1_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC1_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800091e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ADC1_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ADC1_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_ADC1_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_ADC1_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_ADC1_Init+0x98>)
 8000962:	f005 fd0b 	bl	800637c <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800096c:	f004 f864 	bl	8004a38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000970:	230a      	movs	r3, #10
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC1_Init+0x98>)
 8000982:	f005 fea5 	bl	80066d0 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800098c:	f004 f854 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000039c 	.word	0x2000039c
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d123      	bne.n	8000a0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x7c>)
 8000a0a:	f006 f9b7 	bl	8006d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800

08000a24 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b97      	ldr	r3, [pc, #604]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a96      	ldr	r2, [pc, #600]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b94      	ldr	r3, [pc, #592]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b91      	ldr	r3, [pc, #580]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b8b      	ldr	r3, [pc, #556]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a8a      	ldr	r2, [pc, #552]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b88      	ldr	r3, [pc, #544]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b85      	ldr	r3, [pc, #532]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a84      	ldr	r2, [pc, #528]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7e      	ldr	r2, [pc, #504]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a78      	ldr	r2, [pc, #480]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a72      	ldr	r2, [pc, #456]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6c      	ldr	r2, [pc, #432]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2168      	movs	r1, #104	; 0x68
 8000afe:	4867      	ldr	r0, [pc, #412]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b00:	f006 fb00 	bl	8007104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b0a:	4865      	ldr	r0, [pc, #404]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000b0c:	f006 fafa 	bl	8007104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4863      	ldr	r0, [pc, #396]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000b16:	f006 faf5 	bl	8007104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b20:	4861      	ldr	r0, [pc, #388]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b22:	f006 faef 	bl	8007104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000b26:	2314      	movs	r3, #20
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4858      	ldr	r0, [pc, #352]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b3a:	f006 f91f 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000b3e:	2368      	movs	r3, #104	; 0x68
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4851      	ldr	r0, [pc, #324]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b56:	f006 f911 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <MX_GPIO_Init+0x288>)
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	484e      	ldr	r0, [pc, #312]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b70:	f006 f904 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b74:	2332      	movs	r3, #50	; 0x32
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4846      	ldr	r0, [pc, #280]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b90:	f006 f8f4 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b94:	2386      	movs	r3, #134	; 0x86
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4840      	ldr	r0, [pc, #256]	; (8000cb0 <MX_GPIO_Init+0x28c>)
 8000bb0:	f006 f8e4 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4833      	ldr	r0, [pc, #204]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bd2:	f006 f8d3 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bd6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bf0:	f006 f8c4 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c0c:	f006 f8b6 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c24:	f006 f8aa 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000c28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000c42:	f006 f89b 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23f0      	movs	r3, #240	; 0xf0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000c5a:	f006 f88f 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c7c:	f006 f87e 	bl	8006d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2103      	movs	r1, #3
 8000c84:	2028      	movs	r0, #40	; 0x28
 8000c86:	f006 f842 	bl	8006d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8a:	2028      	movs	r0, #40	; 0x28
 8000c8c:	f006 f85b 	bl	8006d46 <HAL_NVIC_EnableIRQ>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020c00 	.word	0x40020c00

08000cb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f006 fa38 	bl	8007168 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f003 fe9b 	bl	8004a38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f007 f95f 	bl	8007fc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f003 fe92 	bl	8004a38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f007 f9a1 	bl	800805e <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f003 fe89 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003e4 	.word	0x200003e4
 8000d30:	40005400 	.word	0x40005400
 8000d34:	00c0eaff 	.word	0x00c0eaff

08000d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_I2C_MspInit+0x7c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d128      	bne.n	8000dac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d90:	f005 fff4 	bl	8006d7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
}
 8000dc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dca:	f3bf 8f6f 	isb	sy
}
 8000dce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd8:	f3bf 8f4f 	dsb	sy
}
 8000ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dde:	f3bf 8f6f 	isb	sy
}
 8000de2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SCB_EnableICache+0x48>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df0:	f3bf 8f4f 	dsb	sy
}
 8000df4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000df6:	f3bf 8f6f 	isb	sy
}
 8000dfa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
}
 8000e1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e26:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0b5b      	lsrs	r3, r3, #13
 8000e2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	015a      	lsls	r2, r3, #5
 8000e40:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e44:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4a:	4911      	ldr	r1, [pc, #68]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ef      	bne.n	8000e3c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	60fa      	str	r2, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e5      	bne.n	8000e32 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e66:	f3bf 8f4f 	dsb	sy
}
 8000e6a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e78:	f3bf 8f4f 	dsb	sy
}
 8000e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e7e:	f3bf 8f6f 	isb	sy
}
 8000e82:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <println>:
uint8_t SerialNumber[] = {0x00, 0x00, 0x7E, 0x00, 0xD0, 0x01, 0x03, 0x2B, 0x7E};
static int pre_define_data_size = 70;

// Utility function
void println(char input[])
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	char stringBuffer[30];
	sprintf(stringBuffer, "%s\r\n", input);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <println+0x38>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00b fa31 	bl	800c30c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f9c6 	bl	8000240 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 0108 	add.w	r1, r7, #8
 8000ebc:	23c8      	movs	r3, #200	; 0xc8
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <println+0x3c>)
 8000ec0:	f00a f882 	bl	800afc8 <HAL_UART_Transmit>
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0800e6a8 	.word	0x0800e6a8
 8000ed0:	2000062c 	.word	0x2000062c

08000ed4 <sensirion_bytes_to_float>:
	HAL_UART_Transmit(&huart3, (uint8_t *)data, pre_define_data_size, 1000);
}

// For convert concatenate hex to float ieee754
float sensirion_bytes_to_float(const uint32_t bytes)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32_value;
		float float32;
	} tmp;

	tmp.u32_value = bytes;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
	return tmp.float32;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	ee07 3a90 	vmov	s15, r3
}
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <wake_sensirion>:

// Wake up SPS30 by sent start frame
uint8_t *wake_sensirion()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent start frame");

	static uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e007      	b.n	8000f10 <wake_sensirion+0x1c>
	{
		data[i] = 0x00;
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <wake_sensirion+0x68>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b45      	cmp	r3, #69	; 0x45
 8000f14:	d9f4      	bls.n	8000f00 <wake_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f16:	bf00      	nop
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <wake_sensirion+0x6c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	2b40      	cmp	r3, #64	; 0x40
 8000f24:	d1f8      	bne.n	8000f18 <wake_sensirion+0x24>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	490d      	ldr	r1, [pc, #52]	; (8000f64 <wake_sensirion+0x70>)
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <wake_sensirion+0x6c>)
 8000f30:	f00a f84a 	bl	800afc8 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f34:	bf00      	nop
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <wake_sensirion+0x6c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	2b40      	cmp	r3, #64	; 0x40
 8000f42:	d1f8      	bne.n	8000f36 <wake_sensirion+0x42>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	2246      	movs	r2, #70	; 0x46
 8000f4a:	4904      	ldr	r1, [pc, #16]	; (8000f5c <wake_sensirion+0x68>)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <wake_sensirion+0x6c>)
 8000f4e:	f00a f8ce 	bl	800b0ee <HAL_UART_Receive>
	//HAL_Delay(1000);
	return data;
 8000f52:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <wake_sensirion+0x68>)
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000031c 	.word	0x2000031c
 8000f60:	200006b0 	.word	0x200006b0
 8000f64:	20000000 	.word	0x20000000

08000f68 <read_sensirion>:

// Read from SPS30 by sent read frame
float *read_sensirion()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0a8      	sub	sp, #160	; 0xa0
 8000f6c:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent read frame");

	uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f74:	e00b      	b.n	8000f8e <read_sensirion+0x26>
	{
		data[i] = 0x00;
 8000f76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f7e:	4413      	add	r3, r2
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f92:	2b45      	cmp	r3, #69	; 0x45
 8000f94:	d9ef      	bls.n	8000f76 <read_sensirion+0xe>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f96:	bf00      	nop
 8000f98:	4b67      	ldr	r3, [pc, #412]	; (8001138 <read_sensirion+0x1d0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d1f8      	bne.n	8000f98 <read_sensirion+0x30>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	2208      	movs	r2, #8
 8000fac:	4963      	ldr	r1, [pc, #396]	; (800113c <read_sensirion+0x1d4>)
 8000fae:	4862      	ldr	r0, [pc, #392]	; (8001138 <read_sensirion+0x1d0>)
 8000fb0:	f00a f80a 	bl	800afc8 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000fb4:	bf00      	nop
 8000fb6:	4b60      	ldr	r3, [pc, #384]	; (8001138 <read_sensirion+0x1d0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc0:	2b40      	cmp	r3, #64	; 0x40
 8000fc2:	d1f8      	bne.n	8000fb6 <read_sensirion+0x4e>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 100); // from 1000 to 100
 8000fc4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	2246      	movs	r2, #70	; 0x46
 8000fcc:	485a      	ldr	r0, [pc, #360]	; (8001138 <read_sensirion+0x1d0>)
 8000fce:	f00a f88e 	bl	800b0ee <HAL_UART_Receive>

	// Check for start frame
	if (data[0] == 0x7E && data[1] == 0x00)
 8000fd2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fd6:	2b7e      	cmp	r3, #126	; 0x7e
 8000fd8:	f040 80a8 	bne.w	800112c <read_sensirion+0x1c4>
 8000fdc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 80a3 	bne.w	800112c <read_sensirion+0x1c4>
	{
		// Header frame
		uint8_t command = data[2];
 8000fe6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000fea:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t errorcode = data[3];
 8000fee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ff2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		uint8_t length = data[4];
 8000ff6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ffa:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		uint8_t state = data[5];
 8000ffe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001002:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

		uint8_t checksum;
		// Find checksum frame by start from the back of the array
		for (uint8_t i = sizeof(data); i > 0; i--)
 8001006:	2346      	movs	r3, #70	; 0x46
 8001008:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800100c:	e017      	b.n	800103e <read_sensirion+0xd6>
		{
			if (data[i] == 0x7E)
 800100e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001012:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001016:	4413      	add	r3, r2
 8001018:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800101c:	2b7e      	cmp	r3, #126	; 0x7e
 800101e:	d109      	bne.n	8001034 <read_sensirion+0xcc>
			{
				data[i - 1] = checksum;
 8001020:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001024:	3b01      	subs	r3, #1
 8001026:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800102a:	4413      	add	r3, r2
 800102c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001030:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (uint8_t i = sizeof(data); i > 0; i--)
 8001034:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001038:	3b01      	subs	r3, #1
 800103a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800103e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1e3      	bne.n	800100e <read_sensirion+0xa6>
		}

		uint32_t concatenateHex[10];
		static float actualValue[10];
		// Concatenate HEX(2,2,2,2) into HEX(8) and convert concatenate hex to float ieee754
		for (int i = 0; i < 10; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800104c:	e068      	b.n	8001120 <read_sensirion+0x1b8>
		{
			// 40 HEX(2) into 10 Groups
			// Skip first 5 bits (header)
			concatenateHex[i] = ((data[4 * i + 5]) << 24) + ((data[(4 * i) + 1 + 5]) << 16) + ((data[(4 * i) + 2 + 5]) << 8) + (data[(4 * i) + 3 + 5]);
 800104e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	3305      	adds	r3, #5
 8001056:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800105a:	4413      	add	r3, r2
 800105c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001060:	061a      	lsls	r2, r3, #24
 8001062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	3306      	adds	r3, #6
 800106a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800106e:	440b      	add	r3, r1
 8001070:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	441a      	add	r2, r3
 8001078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	3307      	adds	r3, #7
 8001080:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001084:	440b      	add	r3, r1
 8001086:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	4413      	add	r3, r2
 800108e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001092:	3202      	adds	r2, #2
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800109a:	440a      	add	r2, r1
 800109c:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 80010a0:	4413      	add	r3, r2
 80010a2:	461a      	mov	r2, r3
 80010a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010ae:	440b      	add	r3, r1
 80010b0:	f843 2ca0 	str.w	r2, [r3, #-160]

			// Convert sensirion bytes to float
			actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 80010b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80010be:	4413      	add	r3, r2
 80010c0:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff05 	bl	8000ed4 <sensirion_bytes_to_float>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <read_sensirion+0x1d8>)
 80010d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	edc3 7a00 	vstr	s15, [r3]

			// ! For debug only
			char stringBuffer[30];
			sprintf(stringBuffer, "%.4f\r\n", actualValue[i]);
 80010dc:	4a18      	ldr	r2, [pc, #96]	; (8001140 <read_sensirion+0x1d8>)
 80010de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010f2:	ec53 2b17 	vmov	r2, r3, d7
 80010f6:	4913      	ldr	r1, [pc, #76]	; (8001144 <read_sensirion+0x1dc>)
 80010f8:	f00b f908 	bl	800c30c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 80010fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f89d 	bl	8000240 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800110e:	23c8      	movs	r3, #200	; 0xc8
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <read_sensirion+0x1e0>)
 8001112:	f009 ff59 	bl	800afc8 <HAL_UART_Transmit>
		for (int i = 0; i < 10; i++)
 8001116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800111a:	3301      	adds	r3, #1
 800111c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001124:	2b09      	cmp	r3, #9
 8001126:	dd92      	ble.n	800104e <read_sensirion+0xe6>
		}
		//HAL_Delay(1000);
		return actualValue;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <read_sensirion+0x1d8>)
 800112a:	e000      	b.n	800112e <read_sensirion+0x1c6>
	}
	else
	{
		//HAL_Delay(1000);
		return NULL;
 800112c:	2300      	movs	r3, #0
	}
}
 800112e:	4618      	mov	r0, r3
 8001130:	37a0      	adds	r7, #160	; 0xa0
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200006b0 	.word	0x200006b0
 800113c:	2000000c 	.word	0x2000000c
 8001140:	20000364 	.word	0x20000364
 8001144:	0800e6b0 	.word	0x0800e6b0
 8001148:	2000062c 	.word	0x2000062c

0800114c <sent_string_to_mcu>:
#include "string.h"
#include "stdio.h"

void sent_string_to_mcu(char data[]){
 800114c:	b580      	push	{r7, lr}
 800114e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001152:	af00      	add	r7, sp, #0
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	6018      	str	r0, [r3, #0]
	char stringBuffer[500];
	sprintf(stringBuffer, "%s\n" , data);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	f107 000c 	add.w	r0, r7, #12
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	490a      	ldr	r1, [pc, #40]	; (800118c <sent_string_to_mcu+0x40>)
 8001162:	f00b f8d3 	bl	800c30c <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f868 	bl	8000240 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	23c8      	movs	r3, #200	; 0xc8
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <sent_string_to_mcu+0x44>)
 800117c:	f009 ff24 	bl	800afc8 <HAL_UART_Transmit>
}
 8001180:	bf00      	nop
 8001182:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	0800e6b8 	.word	0x0800e6b8
 8001190:	20000734 	.word	0x20000734

08001194 <saveData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Save EEPROM
void saveData(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	//Clock
	EEPROM_Write_NUM (1, 0, hourNum);
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <saveData+0x100>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	2100      	movs	r1, #0
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fae2 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (2, 0, minuteNum);
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <saveData+0x104>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	eeb0 0a67 	vmov.f32	s0, s15
 80011c0:	2100      	movs	r1, #0
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff fad6 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (3, 0, secondNum);
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <saveData+0x108>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	2100      	movs	r1, #0
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff faca 	bl	8000774 <EEPROM_Write_NUM>

	//Date
	EEPROM_Write_NUM (4, 0, dayIndex);
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <saveData+0x10c>)
 80011e2:	f993 3000 	ldrsb.w	r3, [r3]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	2100      	movs	r1, #0
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff fabd 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (5, 0, date);
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <saveData+0x110>)
 80011fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	2100      	movs	r1, #0
 800120e:	2005      	movs	r0, #5
 8001210:	f7ff fab0 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (6, 0, monthIndex);
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <saveData+0x114>)
 8001216:	f993 3000 	ldrsb.w	r3, [r3]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	eeb0 0a67 	vmov.f32	s0, s15
 8001226:	2100      	movs	r1, #0
 8001228:	2006      	movs	r0, #6
 800122a:	f7ff faa3 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (7, 0, year);
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <saveData+0x118>)
 8001230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	2100      	movs	r1, #0
 8001242:	2007      	movs	r0, #7
 8001244:	f7ff fa96 	bl	8000774 <EEPROM_Write_NUM>

	//Alarm
	EEPROM_Write_NUM (8, 0, alarmHour);
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <saveData+0x11c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	2100      	movs	r1, #0
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fa8a 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (9, 0, alarmMinute);
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <saveData+0x120>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	2100      	movs	r1, #0
 8001272:	2009      	movs	r0, #9
 8001274:	f7ff fa7e 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (10, 0, alarmIsOn);
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <saveData+0x124>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	2100      	movs	r1, #0
 800128a:	200a      	movs	r0, #10
 800128c:	f7ff fa72 	bl	8000774 <EEPROM_Write_NUM>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000040 	.word	0x20000040
 8001298:	2000003c 	.word	0x2000003c
 800129c:	20000038 	.word	0x20000038
 80012a0:	200000b0 	.word	0x200000b0
 80012a4:	20000061 	.word	0x20000061
 80012a8:	200000b1 	.word	0x200000b1
 80012ac:	200000b2 	.word	0x200000b2
 80012b0:	200002d0 	.word	0x200002d0
 80012b4:	200002cc 	.word	0x200002cc
 80012b8:	20000060 	.word	0x20000060

080012bc <readData>:
// Read EEPROM
void readData(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
	//Clock
	hourNum = EEPROM_Read_NUM (1, 0);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fa71 	bl	80007ac <EEPROM_Read_NUM>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d2:	ee17 2a90 	vmov	r2, s15
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <readData+0x114>)
 80012d8:	601a      	str	r2, [r3, #0]
	minuteNum = EEPROM_Read_NUM (2, 0);
 80012da:	2100      	movs	r1, #0
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fa65 	bl	80007ac <EEPROM_Read_NUM>
 80012e2:	eef0 7a40 	vmov.f32	s15, s0
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 2a90 	vmov	r2, s15
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <readData+0x118>)
 80012f0:	601a      	str	r2, [r3, #0]
	secondNum = EEPROM_Read_NUM (3, 0);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff fa59 	bl	80007ac <EEPROM_Read_NUM>
 80012fa:	eef0 7a40 	vmov.f32	s15, s0
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <readData+0x11c>)
 8001308:	601a      	str	r2, [r3, #0]

	//Date
	dayIndex = EEPROM_Read_NUM (4, 0);
 800130a:	2100      	movs	r1, #0
 800130c:	2004      	movs	r0, #4
 800130e:	f7ff fa4d 	bl	80007ac <EEPROM_Read_NUM>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131a:	edc7 7a01 	vstr	s15, [r7, #4]
 800131e:	793b      	ldrb	r3, [r7, #4]
 8001320:	b25a      	sxtb	r2, r3
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <readData+0x120>)
 8001324:	701a      	strb	r2, [r3, #0]
	date = EEPROM_Read_NUM (5, 0);
 8001326:	2100      	movs	r1, #0
 8001328:	2005      	movs	r0, #5
 800132a:	f7ff fa3f 	bl	80007ac <EEPROM_Read_NUM>
 800132e:	eef0 7a40 	vmov.f32	s15, s0
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	edc7 7a01 	vstr	s15, [r7, #4]
 800133a:	793b      	ldrb	r3, [r7, #4]
 800133c:	b25a      	sxtb	r2, r3
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <readData+0x124>)
 8001340:	701a      	strb	r2, [r3, #0]
	monthIndex = EEPROM_Read_NUM (6, 0);
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f7ff fa31 	bl	80007ac <EEPROM_Read_NUM>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	edc7 7a01 	vstr	s15, [r7, #4]
 8001356:	793b      	ldrb	r3, [r7, #4]
 8001358:	b25a      	sxtb	r2, r3
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <readData+0x128>)
 800135c:	701a      	strb	r2, [r3, #0]
	year = EEPROM_Read_NUM (7, 0);
 800135e:	2100      	movs	r1, #0
 8001360:	2007      	movs	r0, #7
 8001362:	f7ff fa23 	bl	80007ac <EEPROM_Read_NUM>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <readData+0x12c>)
 8001376:	801a      	strh	r2, [r3, #0]

	//Alarm
	alarmHour = EEPROM_Read_NUM (8, 0);
 8001378:	2100      	movs	r1, #0
 800137a:	2008      	movs	r0, #8
 800137c:	f7ff fa16 	bl	80007ac <EEPROM_Read_NUM>
 8001380:	eef0 7a40 	vmov.f32	s15, s0
 8001384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001388:	ee17 2a90 	vmov	r2, s15
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <readData+0x130>)
 800138e:	601a      	str	r2, [r3, #0]
	alarmMinute = EEPROM_Read_NUM (9, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	2009      	movs	r0, #9
 8001394:	f7ff fa0a 	bl	80007ac <EEPROM_Read_NUM>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
 800139c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a0:	ee17 2a90 	vmov	r2, s15
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <readData+0x134>)
 80013a6:	601a      	str	r2, [r3, #0]
	alarmIsOn = EEPROM_Read_NUM (10, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	200a      	movs	r0, #10
 80013ac:	f7ff f9fe 	bl	80007ac <EEPROM_Read_NUM>
 80013b0:	eef0 7a40 	vmov.f32	s15, s0
 80013b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <readData+0x138>)
 80013c6:	701a      	strb	r2, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000040 	.word	0x20000040
 80013d4:	2000003c 	.word	0x2000003c
 80013d8:	20000038 	.word	0x20000038
 80013dc:	200000b0 	.word	0x200000b0
 80013e0:	20000061 	.word	0x20000061
 80013e4:	200000b1 	.word	0x200000b1
 80013e8:	200000b2 	.word	0x200000b2
 80013ec:	200002d0 	.word	0x200002d0
 80013f0:	200002cc 	.word	0x200002cc
 80013f4:	20000060 	.word	0x20000060

080013f8 <eraseAllData>:

// Erase EERPOM
void eraseAllData(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	e007      	b.n	8001414 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fa4d 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800141a:	dbf3      	blt.n	8001404 <eraseAllData+0xc>
	}
	year = 2021;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <eraseAllData+0x54>)
 800141e:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8001422:	801a      	strh	r2, [r3, #0]
	EEPROM_Write_NUM (7, 0, year); // override year
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <eraseAllData+0x54>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	2100      	movs	r1, #0
 8001438:	2007      	movs	r0, #7
 800143a:	f7ff f99b 	bl	8000774 <EEPROM_Write_NUM>
	readData(); // Read from Clean EEPROM
 800143e:	f7ff ff3d 	bl	80012bc <readData>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000b2 	.word	0x200000b2

08001450 <checkResetData>:

void checkResetData(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	if(userResetButton == 1){
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <checkResetData+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <checkResetData+0x16>
		eraseAllData();
 800145c:	f7ff ffcc 	bl	80013f8 <eraseAllData>
		userResetButton = 0;
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <checkResetData+0x1c>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	}
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200002ee 	.word	0x200002ee

08001470 <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fd09 	bl	8005e94 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001482:	2001      	movs	r0, #1
 8001484:	f004 fb00 	bl	8005a88 <ILI9341_Set_Rotation>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <check31Days>:

bool check31Days(){
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	if(monthIndex == 0 || monthIndex == 2 || monthIndex == 4 || monthIndex == 6 || monthIndex == 7 || monthIndex == 9 || monthIndex == 11){
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <check31Days+0x5c>)
 8001496:	f993 3000 	ldrsb.w	r3, [r3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01d      	beq.n	80014da <check31Days+0x4a>
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <check31Days+0x5c>)
 80014a0:	f993 3000 	ldrsb.w	r3, [r3]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d018      	beq.n	80014da <check31Days+0x4a>
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <check31Days+0x5c>)
 80014aa:	f993 3000 	ldrsb.w	r3, [r3]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d013      	beq.n	80014da <check31Days+0x4a>
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <check31Days+0x5c>)
 80014b4:	f993 3000 	ldrsb.w	r3, [r3]
 80014b8:	2b06      	cmp	r3, #6
 80014ba:	d00e      	beq.n	80014da <check31Days+0x4a>
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <check31Days+0x5c>)
 80014be:	f993 3000 	ldrsb.w	r3, [r3]
 80014c2:	2b07      	cmp	r3, #7
 80014c4:	d009      	beq.n	80014da <check31Days+0x4a>
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <check31Days+0x5c>)
 80014c8:	f993 3000 	ldrsb.w	r3, [r3]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	d004      	beq.n	80014da <check31Days+0x4a>
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <check31Days+0x5c>)
 80014d2:	f993 3000 	ldrsb.w	r3, [r3]
 80014d6:	2b0b      	cmp	r3, #11
 80014d8:	d101      	bne.n	80014de <check31Days+0x4e>
		return true;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <check31Days+0x50>
	}else{
		return false;
 80014de:	2300      	movs	r3, #0
	}
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200000b1 	.word	0x200000b1

080014f0 <setDayOneIncrementMonth>:
void setDayOneIncrementMonth(uint8_t num){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	if(date > num){
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <setDayOneIncrementMonth+0x48>)
 80014fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001500:	461a      	mov	r2, r3
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	429a      	cmp	r2, r3
 8001506:	dd10      	ble.n	800152a <setDayOneIncrementMonth+0x3a>
		date = 1;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <setDayOneIncrementMonth+0x48>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
		if(mode != 100){
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <setDayOneIncrementMonth+0x4c>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d008      	beq.n	800152a <setDayOneIncrementMonth+0x3a>
			monthIndex++;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <setDayOneIncrementMonth+0x50>)
 800151a:	f993 3000 	ldrsb.w	r3, [r3]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25a      	sxtb	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <setDayOneIncrementMonth+0x50>)
 8001528:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000061 	.word	0x20000061
 800153c:	200002e4 	.word	0x200002e4
 8001540:	200000b1 	.word	0x200000b1

08001544 <setDayX>:
void setDayX(uint8_t num){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	date = num;
 800154e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <setDayX+0x20>)
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000061 	.word	0x20000061

08001568 <compareAlarmClock>:

void compareAlarmClock(){ //Check If alarmIsOn and equal to alarm setting, alert!
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
	if(alarmIsOn == true && hourNum == alarmHour && minuteNum == alarmMinute){
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <compareAlarmClock+0x70>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d02b      	beq.n	80015ce <compareAlarmClock+0x66>
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <compareAlarmClock+0x74>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <compareAlarmClock+0x78>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d125      	bne.n	80015ce <compareAlarmClock+0x66>
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <compareAlarmClock+0x7c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <compareAlarmClock+0x80>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d11f      	bne.n	80015ce <compareAlarmClock+0x66>
		for(uint8_t i = 0; i < 4; i++){
 800158e:	2300      	movs	r3, #0
 8001590:	77fb      	strb	r3, [r7, #31]
 8001592:	e008      	b.n	80015a6 <compareAlarmClock+0x3e>
			buzzerSound(40); // waiting for test
 8001594:	2028      	movs	r0, #40	; 0x28
 8001596:	f001 fce3 	bl	8002f60 <buzzerSound>
			HAL_Delay(40);
 800159a:	2028      	movs	r0, #40	; 0x28
 800159c:	f004 feca 	bl	8006334 <HAL_Delay>
		for(uint8_t i = 0; i < 4; i++){
 80015a0:	7ffb      	ldrb	r3, [r7, #31]
 80015a2:	3301      	adds	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d9f3      	bls.n	8001594 <compareAlarmClock+0x2c>
		}
		char hexString[30];
		sprintf(hexString,"Clock Alert!\r\n");
 80015ac:	463b      	mov	r3, r7
 80015ae:	490f      	ldr	r1, [pc, #60]	; (80015ec <compareAlarmClock+0x84>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00a feab 	bl	800c30c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);
 80015b6:	463b      	mov	r3, r7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fe41 	bl	8000240 <strlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4639      	mov	r1, r7
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <compareAlarmClock+0x88>)
 80015ca:	f009 fcfd 	bl	800afc8 <HAL_UART_Transmit>
	}
}
 80015ce:	bf00      	nop
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000060 	.word	0x20000060
 80015dc:	20000040 	.word	0x20000040
 80015e0:	200002d0 	.word	0x200002d0
 80015e4:	2000003c 	.word	0x2000003c
 80015e8:	200002cc 	.word	0x200002cc
 80015ec:	0800e708 	.word	0x0800e708
 80015f0:	2000062c 	.word	0x2000062c

080015f4 <calculationClock>:

//Calculation
void calculationClock(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

	millisecondHAL = HAL_GetTick();
 80015f8:	f004 fe90 	bl	800631c <HAL_GetTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	498c      	ldr	r1, [pc, #560]	; (8001838 <calculationClock+0x244>)
 8001606:	e9c1 2300 	strd	r2, r3, [r1]
//	char hexString[30];
//	sprintf(hexString,"%d\r\n", millisecond);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

	//Normal Clock
	if (millisecond >= 1000){
 800160a:	4b8c      	ldr	r3, [pc, #560]	; (800183c <calculationClock+0x248>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001612:	d30c      	bcc.n	800162e <calculationClock+0x3a>
		millisecond = millisecond - 1000;
 8001614:	4b89      	ldr	r3, [pc, #548]	; (800183c <calculationClock+0x248>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800161c:	4a87      	ldr	r2, [pc, #540]	; (800183c <calculationClock+0x248>)
 800161e:	6013      	str	r3, [r2, #0]
		secondNum++;
 8001620:	4b87      	ldr	r3, [pc, #540]	; (8001840 <calculationClock+0x24c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a86      	ldr	r2, [pc, #536]	; (8001840 <calculationClock+0x24c>)
 8001628:	6013      	str	r3, [r2, #0]
		compareAlarmClock();
 800162a:	f7ff ff9d 	bl	8001568 <compareAlarmClock>
	}
	if (secondNum >= 60){
 800162e:	4b84      	ldr	r3, [pc, #528]	; (8001840 <calculationClock+0x24c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b3b      	cmp	r3, #59	; 0x3b
 8001634:	dd0c      	ble.n	8001650 <calculationClock+0x5c>
		secondNum = 0;
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <calculationClock+0x24c>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800163c:	4b81      	ldr	r3, [pc, #516]	; (8001844 <calculationClock+0x250>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d004      	beq.n	8001650 <calculationClock+0x5c>
			minuteNum++;
 8001646:	4b80      	ldr	r3, [pc, #512]	; (8001848 <calculationClock+0x254>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a7e      	ldr	r2, [pc, #504]	; (8001848 <calculationClock+0x254>)
 800164e:	6013      	str	r3, [r2, #0]
		}
	}
	if (minuteNum >= 60){
 8001650:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <calculationClock+0x254>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b3b      	cmp	r3, #59	; 0x3b
 8001656:	dd0c      	ble.n	8001672 <calculationClock+0x7e>
		minuteNum = 0;
 8001658:	4b7b      	ldr	r3, [pc, #492]	; (8001848 <calculationClock+0x254>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800165e:	4b79      	ldr	r3, [pc, #484]	; (8001844 <calculationClock+0x250>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d004      	beq.n	8001672 <calculationClock+0x7e>
			hourNum++;
 8001668:	4b78      	ldr	r3, [pc, #480]	; (800184c <calculationClock+0x258>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a77      	ldr	r2, [pc, #476]	; (800184c <calculationClock+0x258>)
 8001670:	6013      	str	r3, [r2, #0]
		}
	}
	if (hourNum >= 24){
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <calculationClock+0x258>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b17      	cmp	r3, #23
 8001678:	dd19      	ble.n	80016ae <calculationClock+0xba>
		hourNum = 0;
 800167a:	4b74      	ldr	r3, [pc, #464]	; (800184c <calculationClock+0x258>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001680:	4b70      	ldr	r3, [pc, #448]	; (8001844 <calculationClock+0x250>)
 8001682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d011      	beq.n	80016ae <calculationClock+0xba>
			dayIndex++;
 800168a:	4b71      	ldr	r3, [pc, #452]	; (8001850 <calculationClock+0x25c>)
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b25a      	sxtb	r2, r3
 8001698:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <calculationClock+0x25c>)
 800169a:	701a      	strb	r2, [r3, #0]
			date++;
 800169c:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <calculationClock+0x260>)
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <calculationClock+0x260>)
 80016ac:	701a      	strb	r2, [r3, #0]
		}
	}
	//Normal Date
	if (dayIndex >= 7){
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <calculationClock+0x25c>)
 80016b0:	f993 3000 	ldrsb.w	r3, [r3]
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	dd02      	ble.n	80016be <calculationClock+0xca>
		dayIndex = 0;
 80016b8:	4b65      	ldr	r3, [pc, #404]	; (8001850 <calculationClock+0x25c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
	}
	if (year % 4 == 0){ //check for FEB 29 days
 80016be:	4b66      	ldr	r3, [pc, #408]	; (8001858 <calculationClock+0x264>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d115      	bne.n	80016fc <calculationClock+0x108>
		if(monthIndex == 1){
 80016d0:	4b62      	ldr	r3, [pc, #392]	; (800185c <calculationClock+0x268>)
 80016d2:	f993 3000 	ldrsb.w	r3, [r3]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d103      	bne.n	80016e2 <calculationClock+0xee>
			setDayOneIncrementMonth(29); // 29 days
 80016da:	201d      	movs	r0, #29
 80016dc:	f7ff ff08 	bl	80014f0 <setDayOneIncrementMonth>
 80016e0:	e021      	b.n	8001726 <calculationClock+0x132>
		}else if(check31Days() == true){
 80016e2:	f7ff fed5 	bl	8001490 <check31Days>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <calculationClock+0x100>
			setDayOneIncrementMonth(31); // 31 days
 80016ec:	201f      	movs	r0, #31
 80016ee:	f7ff feff 	bl	80014f0 <setDayOneIncrementMonth>
 80016f2:	e018      	b.n	8001726 <calculationClock+0x132>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 80016f4:	201e      	movs	r0, #30
 80016f6:	f7ff fefb 	bl	80014f0 <setDayOneIncrementMonth>
 80016fa:	e014      	b.n	8001726 <calculationClock+0x132>
		}
	}else{
		if(monthIndex == 1){
 80016fc:	4b57      	ldr	r3, [pc, #348]	; (800185c <calculationClock+0x268>)
 80016fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d103      	bne.n	800170e <calculationClock+0x11a>
			setDayOneIncrementMonth(28); // 28 days
 8001706:	201c      	movs	r0, #28
 8001708:	f7ff fef2 	bl	80014f0 <setDayOneIncrementMonth>
 800170c:	e00b      	b.n	8001726 <calculationClock+0x132>
		}else if(check31Days() == true){
 800170e:	f7ff febf 	bl	8001490 <check31Days>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <calculationClock+0x12c>
			setDayOneIncrementMonth(31); // 31 days
 8001718:	201f      	movs	r0, #31
 800171a:	f7ff fee9 	bl	80014f0 <setDayOneIncrementMonth>
 800171e:	e002      	b.n	8001726 <calculationClock+0x132>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 8001720:	201e      	movs	r0, #30
 8001722:	f7ff fee5 	bl	80014f0 <setDayOneIncrementMonth>
		}
	}
	if (monthIndex >= 12){
 8001726:	4b4d      	ldr	r3, [pc, #308]	; (800185c <calculationClock+0x268>)
 8001728:	f993 3000 	ldrsb.w	r3, [r3]
 800172c:	2b0b      	cmp	r3, #11
 800172e:	dd10      	ble.n	8001752 <calculationClock+0x15e>
		monthIndex = 0;
 8001730:	4b4a      	ldr	r3, [pc, #296]	; (800185c <calculationClock+0x268>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
		if (mode != 100){
 8001736:	4b43      	ldr	r3, [pc, #268]	; (8001844 <calculationClock+0x250>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d008      	beq.n	8001752 <calculationClock+0x15e>
			year++;
 8001740:	4b45      	ldr	r3, [pc, #276]	; (8001858 <calculationClock+0x264>)
 8001742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001746:	b29b      	uxth	r3, r3
 8001748:	3301      	adds	r3, #1
 800174a:	b29b      	uxth	r3, r3
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <calculationClock+0x264>)
 8001750:	801a      	strh	r2, [r3, #0]
		}
	}
	if (year >= 10000){
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <calculationClock+0x264>)
 8001754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001758:	f242 720f 	movw	r2, #9999	; 0x270f
 800175c:	4293      	cmp	r3, r2
 800175e:	dd02      	ble.n	8001766 <calculationClock+0x172>
		year = 1;
 8001760:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <calculationClock+0x264>)
 8001762:	2201      	movs	r2, #1
 8001764:	801a      	strh	r2, [r3, #0]
	}

	//check for editMode
	if(mode == 100){
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <calculationClock+0x250>)
 8001768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176c:	2b64      	cmp	r3, #100	; 0x64
 800176e:	d15f      	bne.n	8001830 <calculationClock+0x23c>
		if (minuteNum < 0){
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <calculationClock+0x254>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da02      	bge.n	800177e <calculationClock+0x18a>
			minuteNum = 59;
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <calculationClock+0x254>)
 800177a:	223b      	movs	r2, #59	; 0x3b
 800177c:	601a      	str	r2, [r3, #0]
		}
		if (hourNum < 0){
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <calculationClock+0x258>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	da02      	bge.n	800178c <calculationClock+0x198>
			hourNum = 23;
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <calculationClock+0x258>)
 8001788:	2217      	movs	r2, #23
 800178a:	601a      	str	r2, [r3, #0]
		}
		if (dayIndex < 0){
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <calculationClock+0x25c>)
 800178e:	f993 3000 	ldrsb.w	r3, [r3]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da02      	bge.n	800179c <calculationClock+0x1a8>
			dayIndex = 6;
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <calculationClock+0x25c>)
 8001798:	2206      	movs	r2, #6
 800179a:	701a      	strb	r2, [r3, #0]
		}
		if (date < 1){
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <calculationClock+0x260>)
 800179e:	f993 3000 	ldrsb.w	r3, [r3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dc33      	bgt.n	800180e <calculationClock+0x21a>
			if (year % 4 == 0){ //check for FEB 29 days
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <calculationClock+0x264>)
 80017a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d115      	bne.n	80017e4 <calculationClock+0x1f0>
				if(monthIndex == 1){
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <calculationClock+0x268>)
 80017ba:	f993 3000 	ldrsb.w	r3, [r3]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d103      	bne.n	80017ca <calculationClock+0x1d6>
					setDayX(29); // 29 days
 80017c2:	201d      	movs	r0, #29
 80017c4:	f7ff febe 	bl	8001544 <setDayX>
 80017c8:	e021      	b.n	800180e <calculationClock+0x21a>
				}else if(check31Days() == true){
 80017ca:	f7ff fe61 	bl	8001490 <check31Days>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <calculationClock+0x1e8>
					setDayX(31); // 31 days
 80017d4:	201f      	movs	r0, #31
 80017d6:	f7ff feb5 	bl	8001544 <setDayX>
 80017da:	e018      	b.n	800180e <calculationClock+0x21a>
				}else{
					setDayX(30); // 30 days
 80017dc:	201e      	movs	r0, #30
 80017de:	f7ff feb1 	bl	8001544 <setDayX>
 80017e2:	e014      	b.n	800180e <calculationClock+0x21a>
				}
			}else{
				if(monthIndex == 1){
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <calculationClock+0x268>)
 80017e6:	f993 3000 	ldrsb.w	r3, [r3]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d103      	bne.n	80017f6 <calculationClock+0x202>
					setDayX(28); // 28 days
 80017ee:	201c      	movs	r0, #28
 80017f0:	f7ff fea8 	bl	8001544 <setDayX>
 80017f4:	e00b      	b.n	800180e <calculationClock+0x21a>
				}else if(check31Days() == true){
 80017f6:	f7ff fe4b 	bl	8001490 <check31Days>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <calculationClock+0x214>
					setDayX(31); // 31 days
 8001800:	201f      	movs	r0, #31
 8001802:	f7ff fe9f 	bl	8001544 <setDayX>
 8001806:	e002      	b.n	800180e <calculationClock+0x21a>
				}else{
					setDayX(30); // 30 days
 8001808:	201e      	movs	r0, #30
 800180a:	f7ff fe9b 	bl	8001544 <setDayX>
				}
			}
		}
		if (monthIndex < 0){
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <calculationClock+0x268>)
 8001810:	f993 3000 	ldrsb.w	r3, [r3]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da02      	bge.n	800181e <calculationClock+0x22a>
			monthIndex = 11;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <calculationClock+0x268>)
 800181a:	220b      	movs	r2, #11
 800181c:	701a      	strb	r2, [r3, #0]
		}
		if (year < 1){
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <calculationClock+0x264>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	2b00      	cmp	r3, #0
 8001826:	dc03      	bgt.n	8001830 <calculationClock+0x23c>
			year = 9999;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <calculationClock+0x264>)
 800182a:	f242 720f 	movw	r2, #9999	; 0x270f
 800182e:	801a      	strh	r2, [r3, #0]
		}
	}

	saveData();
 8001830:	f7ff fcb0 	bl	8001194 <saveData>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002f8 	.word	0x200002f8
 800183c:	200002d4 	.word	0x200002d4
 8001840:	20000038 	.word	0x20000038
 8001844:	200002e4 	.word	0x200002e4
 8001848:	2000003c 	.word	0x2000003c
 800184c:	20000040 	.word	0x20000040
 8001850:	200000b0 	.word	0x200000b0
 8001854:	20000061 	.word	0x20000061
 8001858:	200000b2 	.word	0x200000b2
 800185c:	200000b1 	.word	0x200000b1

08001860 <dayScreen>:

//Date Clock Atomic
void dayScreen(bool status, bool isEdit){
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af02      	add	r7, sp, #8
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]

	if (prevDayIndex != dayIndex || isEdit == true){
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <dayScreen+0xe0>)
 8001872:	f993 2000 	ldrsb.w	r2, [r3]
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <dayScreen+0xe4>)
 8001878:	f993 3000 	ldrsb.w	r3, [r3]
 800187c:	429a      	cmp	r2, r3
 800187e:	d102      	bne.n	8001886 <dayScreen+0x26>
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d054      	beq.n	8001930 <dayScreen+0xd0>
		if (status == true){
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d02a      	beq.n	80018e2 <dayScreen+0x82>
			sprintf(Temp_Buffer_text, "%s", dayText[dayIndex]);
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <dayScreen+0xe4>)
 800188e:	f993 3000 	ldrsb.w	r3, [r3]
 8001892:	461a      	mov	r2, r3
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <dayScreen+0xe8>)
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	461a      	mov	r2, r3
 800189c:	492b      	ldr	r1, [pc, #172]	; (800194c <dayScreen+0xec>)
 800189e:	482c      	ldr	r0, [pc, #176]	; (8001950 <dayScreen+0xf0>)
 80018a0:	f00a fd34 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <dayScreen+0xf4>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3b05      	subs	r3, #5
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <dayScreen+0xf8>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018ba:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001938 <dayScreen+0xd8>
 80018be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018c6:	edc7 7a00 	vstr	s15, [r7]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2302      	movs	r3, #2
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018da:	481d      	ldr	r0, [pc, #116]	; (8001950 <dayScreen+0xf0>)
 80018dc:	f003 ffd4 	bl	8005888 <ILI9341_Draw_Text>
 80018e0:	e021      	b.n	8001926 <dayScreen+0xc6>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 80018e2:	491e      	ldr	r1, [pc, #120]	; (800195c <dayScreen+0xfc>)
 80018e4:	481a      	ldr	r0, [pc, #104]	; (8001950 <dayScreen+0xf0>)
 80018e6:	f00a fd11 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <dayScreen+0xf4>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	3b05      	subs	r3, #5
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <dayScreen+0xf8>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001900:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001938 <dayScreen+0xd8>
 8001904:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001908:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800190c:	edc7 7a00 	vstr	s15, [r7]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	2300      	movs	r3, #0
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2302      	movs	r3, #2
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <dayScreen+0xf0>)
 8001922:	f003 ffb1 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevDayIndex = dayIndex;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <dayScreen+0xe4>)
 8001928:	f993 2000 	ldrsb.w	r2, [r3]
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <dayScreen+0xe0>)
 800192e:	701a      	strb	r2, [r3, #0]
	}
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	9999999a 	.word	0x9999999a
 800193c:	3fb99999 	.word	0x3fb99999
 8001940:	200000b5 	.word	0x200000b5
 8001944:	200000b0 	.word	0x200000b0
 8001948:	20000064 	.word	0x20000064
 800194c:	0800e718 	.word	0x0800e718
 8001950:	20000470 	.word	0x20000470
 8001954:	20000054 	.word	0x20000054
 8001958:	20000056 	.word	0x20000056
 800195c:	0800e71c 	.word	0x0800e71c

08001960 <dateScreen>:
void dateScreen(bool status, bool isEdit){
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af02      	add	r7, sp, #8
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	if (prevDate != date || isEdit == true){
 8001970:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <dateScreen+0xf0>)
 8001972:	f993 2000 	ldrsb.w	r2, [r3]
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <dateScreen+0xf4>)
 8001978:	f993 3000 	ldrsb.w	r3, [r3]
 800197c:	429a      	cmp	r2, r3
 800197e:	d102      	bne.n	8001986 <dateScreen+0x26>
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d05a      	beq.n	8001a3c <dateScreen+0xdc>
		if (status == true){
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d02b      	beq.n	80019e4 <dateScreen+0x84>
			sprintf(Temp_Buffer_text, "%02d", (int)date);
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <dateScreen+0xf4>)
 800198e:	f993 3000 	ldrsb.w	r3, [r3]
 8001992:	461a      	mov	r2, r3
 8001994:	4930      	ldr	r1, [pc, #192]	; (8001a58 <dateScreen+0xf8>)
 8001996:	4831      	ldr	r0, [pc, #196]	; (8001a5c <dateScreen+0xfc>)
 8001998:	f00a fcb8 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <dateScreen+0x100>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <dateScreen+0x104>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3303      	adds	r3, #3
 80019ae:	b2d9      	uxtb	r1, r3
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <dateScreen+0x108>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019bc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001a48 <dateScreen+0xe8>
 80019c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019c8:	edc7 7a00 	vstr	s15, [r7]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019dc:	481f      	ldr	r0, [pc, #124]	; (8001a5c <dateScreen+0xfc>)
 80019de:	f003 ff53 	bl	8005888 <ILI9341_Draw_Text>
 80019e2:	e026      	b.n	8001a32 <dateScreen+0xd2>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80019e4:	4921      	ldr	r1, [pc, #132]	; (8001a6c <dateScreen+0x10c>)
 80019e6:	481d      	ldr	r0, [pc, #116]	; (8001a5c <dateScreen+0xfc>)
 80019e8:	f00a fc90 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <dateScreen+0x100>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <dateScreen+0x104>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	3303      	adds	r3, #3
 80019fe:	b2d9      	uxtb	r1, r3
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <dateScreen+0x108>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a0c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001a48 <dateScreen+0xe8>
 8001a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a18:	edc7 7a00 	vstr	s15, [r7]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2302      	movs	r3, #2
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2c:	480b      	ldr	r0, [pc, #44]	; (8001a5c <dateScreen+0xfc>)
 8001a2e:	f003 ff2b 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevDate = date;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <dateScreen+0xf4>)
 8001a34:	f993 2000 	ldrsb.w	r2, [r3]
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <dateScreen+0xf0>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	f3af 8000 	nop.w
 8001a48:	9999999a 	.word	0x9999999a
 8001a4c:	3fb99999 	.word	0x3fb99999
 8001a50:	200000b4 	.word	0x200000b4
 8001a54:	20000061 	.word	0x20000061
 8001a58:	0800e720 	.word	0x0800e720
 8001a5c:	20000470 	.word	0x20000470
 8001a60:	20000054 	.word	0x20000054
 8001a64:	20000058 	.word	0x20000058
 8001a68:	20000056 	.word	0x20000056
 8001a6c:	0800e728 	.word	0x0800e728

08001a70 <monthScreen>:
void monthScreen(bool status, bool isEdit){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
	if (prevMonthIndex != monthIndex || isEdit == true){
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <monthScreen+0x100>)
 8001a82:	f993 2000 	ldrsb.w	r2, [r3]
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <monthScreen+0x104>)
 8001a88:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d102      	bne.n	8001a96 <monthScreen+0x26>
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d062      	beq.n	8001b5c <monthScreen+0xec>
		if (status == true){
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d031      	beq.n	8001b00 <monthScreen+0x90>
			sprintf(Temp_Buffer_text, "%s", monthText[monthIndex]);
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <monthScreen+0x104>)
 8001a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <monthScreen+0x108>)
 8001aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4933      	ldr	r1, [pc, #204]	; (8001b7c <monthScreen+0x10c>)
 8001aae:	4834      	ldr	r0, [pc, #208]	; (8001b80 <monthScreen+0x110>)
 8001ab0:	f00a fc2c 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <monthScreen+0x114>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <monthScreen+0x118>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3b05      	subs	r3, #5
 8001aca:	b2d9      	uxtb	r1, r3
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <monthScreen+0x11c>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ad8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001b68 <monthScreen+0xf8>
 8001adc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ae0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ae4:	edc7 7a00 	vstr	s15, [r7]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	4821      	ldr	r0, [pc, #132]	; (8001b80 <monthScreen+0x110>)
 8001afa:	f003 fec5 	bl	8005888 <ILI9341_Draw_Text>
 8001afe:	e028      	b.n	8001b52 <monthScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001b00:	4923      	ldr	r1, [pc, #140]	; (8001b90 <monthScreen+0x120>)
 8001b02:	481f      	ldr	r0, [pc, #124]	; (8001b80 <monthScreen+0x110>)
 8001b04:	f00a fc02 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <monthScreen+0x114>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <monthScreen+0x118>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3b05      	subs	r3, #5
 8001b1e:	b2d9      	uxtb	r1, r3
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <monthScreen+0x11c>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b2c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001b68 <monthScreen+0xf8>
 8001b30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b38:	edc7 7a00 	vstr	s15, [r7]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2302      	movs	r3, #2
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <monthScreen+0x110>)
 8001b4e:	f003 fe9b 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevMonthIndex = monthIndex;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <monthScreen+0x104>)
 8001b54:	f993 2000 	ldrsb.w	r2, [r3]
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <monthScreen+0x100>)
 8001b5a:	701a      	strb	r2, [r3, #0]
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	f3af 8000 	nop.w
 8001b68:	9999999a 	.word	0x9999999a
 8001b6c:	3fb99999 	.word	0x3fb99999
 8001b70:	200000b6 	.word	0x200000b6
 8001b74:	200000b1 	.word	0x200000b1
 8001b78:	20000080 	.word	0x20000080
 8001b7c:	0800e718 	.word	0x0800e718
 8001b80:	20000470 	.word	0x20000470
 8001b84:	20000054 	.word	0x20000054
 8001b88:	20000058 	.word	0x20000058
 8001b8c:	20000056 	.word	0x20000056
 8001b90:	0800e71c 	.word	0x0800e71c
 8001b94:	00000000 	.word	0x00000000

08001b98 <yearScreen>:
void yearScreen(bool status, bool isEdit){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	71bb      	strb	r3, [r7, #6]
	if (prevYear != year || isEdit == true){
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <yearScreen+0x100>)
 8001baa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <yearScreen+0x104>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d102      	bne.n	8001bbe <yearScreen+0x26>
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d062      	beq.n	8001c84 <yearScreen+0xec>
		if (status == true){
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02f      	beq.n	8001c24 <yearScreen+0x8c>
			sprintf(Temp_Buffer_text, "%04d", (int)year);
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <yearScreen+0x104>)
 8001bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4934      	ldr	r1, [pc, #208]	; (8001ca0 <yearScreen+0x108>)
 8001bce:	4835      	ldr	r0, [pc, #212]	; (8001ca4 <yearScreen+0x10c>)
 8001bd0:	f00a fb9c 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001bd4:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <yearScreen+0x110>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <yearScreen+0x114>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	0049      	lsls	r1, r1, #1
 8001be4:	440b      	add	r3, r1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3303      	adds	r3, #3
 8001bee:	b2d9      	uxtb	r1, r3
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <yearScreen+0x118>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bfc:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001c90 <yearScreen+0xf8>
 8001c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c08:	edc7 7a00 	vstr	s15, [r7]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	4821      	ldr	r0, [pc, #132]	; (8001ca4 <yearScreen+0x10c>)
 8001c1e:	f003 fe33 	bl	8005888 <ILI9341_Draw_Text>
 8001c22:	e02a      	b.n	8001c7a <yearScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "    ");
 8001c24:	4923      	ldr	r1, [pc, #140]	; (8001cb4 <yearScreen+0x11c>)
 8001c26:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <yearScreen+0x10c>)
 8001c28:	f00a fb70 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <yearScreen+0x110>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <yearScreen+0x114>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	0049      	lsls	r1, r1, #1
 8001c3c:	440b      	add	r3, r1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3303      	adds	r3, #3
 8001c46:	b2d9      	uxtb	r1, r3
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <yearScreen+0x118>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c54:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001c90 <yearScreen+0xf8>
 8001c58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c60:	edc7 7a00 	vstr	s15, [r7]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <yearScreen+0x10c>)
 8001c76:	f003 fe07 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevYear = year;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <yearScreen+0x104>)
 8001c7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <yearScreen+0x100>)
 8001c82:	801a      	strh	r2, [r3, #0]
	}
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	f3af 8000 	nop.w
 8001c90:	9999999a 	.word	0x9999999a
 8001c94:	3fb99999 	.word	0x3fb99999
 8001c98:	200000b8 	.word	0x200000b8
 8001c9c:	200000b2 	.word	0x200000b2
 8001ca0:	0800e72c 	.word	0x0800e72c
 8001ca4:	20000470 	.word	0x20000470
 8001ca8:	20000054 	.word	0x20000054
 8001cac:	20000058 	.word	0x20000058
 8001cb0:	20000056 	.word	0x20000056
 8001cb4:	0800e734 	.word	0x0800e734

08001cb8 <displayDateScreen>:

//Display Date Clock Screen
void displayDateScreen(){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff fdce 	bl	8001860 <dayScreen>
	dateScreen(true, false);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff fe4a 	bl	8001960 <dateScreen>
	monthScreen(true, false);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fece 	bl	8001a70 <monthScreen>
	yearScreen(true, false);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f7ff ff5e 	bl	8001b98 <yearScreen>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <displayAlarmIcon>:

void displayAlarmIcon(bool on){
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	if(on == true){
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8139 	beq.w	8001f64 <displayAlarmIcon+0x284>
		//Alarm
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, YELLOW);
 8001cf2:	4b99      	ldr	r3, [pc, #612]	; (8001f58 <displayAlarmIcon+0x278>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cfe:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8001f30 <displayAlarmIcon+0x250>
 8001d02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d06:	4b95      	ldr	r3, [pc, #596]	; (8001f5c <displayAlarmIcon+0x27c>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d1a:	ee17 3a90 	vmov	r3, s15
 8001d1e:	b298      	uxth	r0, r3
 8001d20:	4b8f      	ldr	r3, [pc, #572]	; (8001f60 <displayAlarmIcon+0x280>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d2c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8001f38 <displayAlarmIcon+0x258>
 8001d30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d38:	ee17 3a90 	vmov	r3, s15
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d42:	2206      	movs	r2, #6
 8001d44:	f003 fb9d 	bl	8005482 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, YELLOW);
 8001d48:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <displayAlarmIcon+0x278>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d54:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8001f30 <displayAlarmIcon+0x250>
 8001d58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d5c:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <displayAlarmIcon+0x27c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d70:	ee17 3a90 	vmov	r3, s15
 8001d74:	b298      	uxth	r0, r3
 8001d76:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <displayAlarmIcon+0x280>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d82:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8001f40 <displayAlarmIcon+0x260>
 8001d86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d96:	ee17 3a90 	vmov	r3, s15
 8001d9a:	b299      	uxth	r1, r3
 8001d9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001da0:	2203      	movs	r2, #3
 8001da2:	f003 fb6e 	bl	8005482 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, YELLOW);
 8001da6:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <displayAlarmIcon+0x278>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001db2:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001f48 <displayAlarmIcon+0x268>
 8001db6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dba:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <displayAlarmIcon+0x27c>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001dc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dca:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001dce:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dd6:	ee17 3a90 	vmov	r3, s15
 8001dda:	b298      	uxth	r0, r3
 8001ddc:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <displayAlarmIcon+0x280>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001de8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001f50 <displayAlarmIcon+0x270>
 8001dec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001df0:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001df4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001df8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dfc:	ee17 3a90 	vmov	r3, s15
 8001e00:	b299      	uxth	r1, r3
 8001e02:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <displayAlarmIcon+0x278>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e0e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001f48 <displayAlarmIcon+0x268>
 8001e12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <displayAlarmIcon+0x27c>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e26:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001e2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e32:	ee17 3a90 	vmov	r3, s15
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <displayAlarmIcon+0x280>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e44:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001f50 <displayAlarmIcon+0x270>
 8001e48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e4c:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001e50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e58:	ee17 3a90 	vmov	r3, s15
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8001e62:	9400      	str	r4, [sp, #0]
 8001e64:	f003 fc16 	bl	8005694 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <displayAlarmIcon+0x278>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e74:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001f48 <displayAlarmIcon+0x268>
 8001e78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e7c:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <displayAlarmIcon+0x27c>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e8c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001e90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e98:	ee17 3a90 	vmov	r3, s15
 8001e9c:	b298      	uxth	r0, r3
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <displayAlarmIcon+0x280>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eaa:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001f50 <displayAlarmIcon+0x270>
 8001eae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eb2:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001eb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ebe:	ee17 3a90 	vmov	r3, s15
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <displayAlarmIcon+0x278>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ed0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8001f48 <displayAlarmIcon+0x268>
 8001ed4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ed8:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <displayAlarmIcon+0x27c>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ee4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ee8:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ef0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ef4:	ee17 3a90 	vmov	r3, s15
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <displayAlarmIcon+0x280>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f06:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001f50 <displayAlarmIcon+0x270>
 8001f0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f0e:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001f12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f1a:	ee17 3a90 	vmov	r3, s15
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2400      	movs	r4, #0
 8001f22:	9400      	str	r4, [sp, #0]
 8001f24:	f003 fb35 	bl	8005592 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
	}
}
 8001f28:	e134      	b.n	8002194 <displayAlarmIcon+0x4b4>
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w
 8001f30:	d70a3d71 	.word	0xd70a3d71
 8001f34:	3fed70a3 	.word	0x3fed70a3
 8001f38:	0a3d70a4 	.word	0x0a3d70a4
 8001f3c:	3fc0a3d7 	.word	0x3fc0a3d7
 8001f40:	47ae147b 	.word	0x47ae147b
 8001f44:	3fc47ae1 	.word	0x3fc47ae1
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	3feccccc 	.word	0x3feccccc
 8001f50:	9999999a 	.word	0x9999999a
 8001f54:	3fb99999 	.word	0x3fb99999
 8001f58:	20000052 	.word	0x20000052
 8001f5c:	20000054 	.word	0x20000054
 8001f60:	20000056 	.word	0x20000056
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
 8001f64:	4b98      	ldr	r3, [pc, #608]	; (80021c8 <displayAlarmIcon+0x4e8>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f70:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80021a0 <displayAlarmIcon+0x4c0>
 8001f74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f78:	4b94      	ldr	r3, [pc, #592]	; (80021cc <displayAlarmIcon+0x4ec>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f8c:	ee17 3a90 	vmov	r3, s15
 8001f90:	b298      	uxth	r0, r3
 8001f92:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <displayAlarmIcon+0x4f0>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f9e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 80021a8 <displayAlarmIcon+0x4c8>
 8001fa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fa6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001faa:	ee17 3a90 	vmov	r3, s15
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2206      	movs	r2, #6
 8001fb4:	f003 fa65 	bl	8005482 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
 8001fb8:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <displayAlarmIcon+0x4e8>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fc4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80021a0 <displayAlarmIcon+0x4c0>
 8001fc8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fcc:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <displayAlarmIcon+0x4ec>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fe0:	ee17 3a90 	vmov	r3, s15
 8001fe4:	b298      	uxth	r0, r3
 8001fe6:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <displayAlarmIcon+0x4f0>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ff2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80021b0 <displayAlarmIcon+0x4d0>
 8001ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ffa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ffe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002002:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002006:	ee17 3a90 	vmov	r3, s15
 800200a:	b299      	uxth	r1, r3
 800200c:	2300      	movs	r3, #0
 800200e:	2203      	movs	r2, #3
 8002010:	f003 fa37 	bl	8005482 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8002014:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <displayAlarmIcon+0x4e8>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002020:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80021b8 <displayAlarmIcon+0x4d8>
 8002024:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <displayAlarmIcon+0x4ec>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002034:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002038:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800203c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002040:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	b298      	uxth	r0, r3
 800204a:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <displayAlarmIcon+0x4f0>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002056:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80021c0 <displayAlarmIcon+0x4e0>
 800205a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800205e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002062:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002066:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800206a:	ee17 3a90 	vmov	r3, s15
 800206e:	b299      	uxth	r1, r3
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <displayAlarmIcon+0x4e8>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800207c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80021b8 <displayAlarmIcon+0x4d8>
 8002080:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002084:	4b51      	ldr	r3, [pc, #324]	; (80021cc <displayAlarmIcon+0x4ec>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002090:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002094:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002098:	ee37 7b06 	vadd.f64	d7, d7, d6
 800209c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <displayAlarmIcon+0x4f0>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020b2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80021c0 <displayAlarmIcon+0x4e0>
 80020b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020ba:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 80020be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020c6:	ee17 3a90 	vmov	r3, s15
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2400      	movs	r4, #0
 80020ce:	9400      	str	r4, [sp, #0]
 80020d0:	f003 fae0 	bl	8005694 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <displayAlarmIcon+0x4e8>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020e0:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80021b8 <displayAlarmIcon+0x4d8>
 80020e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <displayAlarmIcon+0x4ec>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020f8:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80020fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002100:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002104:	ee17 3a90 	vmov	r3, s15
 8002108:	b298      	uxth	r0, r3
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <displayAlarmIcon+0x4f0>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002116:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80021c0 <displayAlarmIcon+0x4e0>
 800211a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800211e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002122:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800212a:	ee17 3a90 	vmov	r3, s15
 800212e:	b299      	uxth	r1, r3
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <displayAlarmIcon+0x4e8>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800213c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80021b8 <displayAlarmIcon+0x4d8>
 8002140:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <displayAlarmIcon+0x4ec>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002150:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002154:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002158:	ee37 7b06 	vadd.f64	d7, d7, d6
 800215c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002160:	ee17 3a90 	vmov	r3, s15
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <displayAlarmIcon+0x4f0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002172:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80021c0 <displayAlarmIcon+0x4e0>
 8002176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800217a:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 800217e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002182:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002186:	ee17 3a90 	vmov	r3, s15
 800218a:	b29b      	uxth	r3, r3
 800218c:	2400      	movs	r4, #0
 800218e:	9400      	str	r4, [sp, #0]
 8002190:	f003 f9ff 	bl	8005592 <ILI9341_Draw_Hollow_Rectangle_Coord>
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	f3af 8000 	nop.w
 80021a0:	d70a3d71 	.word	0xd70a3d71
 80021a4:	3fed70a3 	.word	0x3fed70a3
 80021a8:	0a3d70a4 	.word	0x0a3d70a4
 80021ac:	3fc0a3d7 	.word	0x3fc0a3d7
 80021b0:	47ae147b 	.word	0x47ae147b
 80021b4:	3fc47ae1 	.word	0x3fc47ae1
 80021b8:	cccccccd 	.word	0xcccccccd
 80021bc:	3feccccc 	.word	0x3feccccc
 80021c0:	9999999a 	.word	0x9999999a
 80021c4:	3fb99999 	.word	0x3fb99999
 80021c8:	20000052 	.word	0x20000052
 80021cc:	20000054 	.word	0x20000054
 80021d0:	20000056 	.word	0x20000056

080021d4 <topBarScreen>:

//Top Screen
void topBarScreen(){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	displayDateScreen();
 80021d8:	f7ff fd6e 	bl	8001cb8 <displayDateScreen>

	displayAlarmIcon(alarmIsOn);
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <topBarScreen+0x18>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fd7d 	bl	8001ce0 <displayAlarmIcon>
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000060 	.word	0x20000060

080021f0 <resetPrevNum>:

//Reset Prev Values
void resetPrevNum(){
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <resetPrevNum+0x54>)
 80021f6:	f04f 32ff 	mov.w	r2, #4294967295
 80021fa:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <resetPrevNum+0x58>)
 80021fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002202:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <resetPrevNum+0x5c>)
 8002206:	f04f 32ff 	mov.w	r2, #4294967295
 800220a:	601a      	str	r2, [r3, #0]

	prevDayIndex = -1;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <resetPrevNum+0x60>)
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	701a      	strb	r2, [r3, #0]
	prevDate = -1;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <resetPrevNum+0x64>)
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	701a      	strb	r2, [r3, #0]
	prevMonthIndex = -1;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <resetPrevNum+0x68>)
 800221a:	22ff      	movs	r2, #255	; 0xff
 800221c:	701a      	strb	r2, [r3, #0]
	prevYear = -1;
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <resetPrevNum+0x6c>)
 8002220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002224:	801a      	strh	r2, [r3, #0]

	prevTemp = -1.0;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <resetPrevNum+0x70>)
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <resetPrevNum+0x74>)
 800222a:	601a      	str	r2, [r3, #0]
	prevHumid = -1.0;
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <resetPrevNum+0x78>)
 800222e:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <resetPrevNum+0x74>)
 8002230:	601a      	str	r2, [r3, #0]
	prevPmTwoPointFive = -1.0;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <resetPrevNum+0x7c>)
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <resetPrevNum+0x74>)
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000044 	.word	0x20000044
 8002248:	20000048 	.word	0x20000048
 800224c:	2000004c 	.word	0x2000004c
 8002250:	200000b5 	.word	0x200000b5
 8002254:	200000b4 	.word	0x200000b4
 8002258:	200000b6 	.word	0x200000b6
 800225c:	200000b8 	.word	0x200000b8
 8002260:	20000024 	.word	0x20000024
 8002264:	bf800000 	.word	0xbf800000
 8002268:	20000028 	.word	0x20000028
 800226c:	2000002c 	.word	0x2000002c

08002270 <hourScreen>:

//Clock Screen Atomic
void hourScreen(bool status, bool isEdit){
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af02      	add	r7, sp, #8
 8002276:	4603      	mov	r3, r0
 8002278:	460a      	mov	r2, r1
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	4613      	mov	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
	if (prevHourNum != hourNum || isEdit == true){
 8002280:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <hourScreen+0xd0>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <hourScreen+0xd4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d102      	bne.n	8002292 <hourScreen+0x22>
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d04e      	beq.n	8002330 <hourScreen+0xc0>
		if (status == true){
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d025      	beq.n	80022e4 <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <hourScreen+0xd4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	492a      	ldr	r1, [pc, #168]	; (8002348 <hourScreen+0xd8>)
 80022a0:	482a      	ldr	r0, [pc, #168]	; (800234c <hourScreen+0xdc>)
 80022a2:	f00a f833 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <hourScreen+0xe0>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	3b05      	subs	r3, #5
 80022ae:	b2d9      	uxtb	r1, r3
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <hourScreen+0xe4>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022bc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002338 <hourScreen+0xc8>
 80022c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022c8:	edc7 7a00 	vstr	s15, [r7]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2306      	movs	r3, #6
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022dc:	481b      	ldr	r0, [pc, #108]	; (800234c <hourScreen+0xdc>)
 80022de:	f003 fad3 	bl	8005888 <ILI9341_Draw_Text>
 80022e2:	e021      	b.n	8002328 <hourScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80022e4:	491c      	ldr	r1, [pc, #112]	; (8002358 <hourScreen+0xe8>)
 80022e6:	4819      	ldr	r0, [pc, #100]	; (800234c <hourScreen+0xdc>)
 80022e8:	f00a f810 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <hourScreen+0xe0>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b05      	subs	r3, #5
 80022f4:	b2d9      	uxtb	r1, r3
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <hourScreen+0xe4>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002302:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002338 <hourScreen+0xc8>
 8002306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800230a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800230e:	edc7 7a00 	vstr	s15, [r7]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	2300      	movs	r3, #0
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2306      	movs	r3, #6
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002322:	480a      	ldr	r0, [pc, #40]	; (800234c <hourScreen+0xdc>)
 8002324:	f003 fab0 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <hourScreen+0xd4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <hourScreen+0xd0>)
 800232e:	6013      	str	r3, [r2, #0]
	}
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	33333333 	.word	0x33333333
 800233c:	3fd33333 	.word	0x3fd33333
 8002340:	2000004c 	.word	0x2000004c
 8002344:	20000040 	.word	0x20000040
 8002348:	0800e720 	.word	0x0800e720
 800234c:	20000470 	.word	0x20000470
 8002350:	20000054 	.word	0x20000054
 8002354:	20000056 	.word	0x20000056
 8002358:	0800e728 	.word	0x0800e728
 800235c:	00000000 	.word	0x00000000

08002360 <colonScreen>:

void colonScreen(bool status){
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af02      	add	r7, sp, #8
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
	if (status == true){
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d022      	beq.n	80023b6 <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8002370:	4927      	ldr	r1, [pc, #156]	; (8002410 <colonScreen+0xb0>)
 8002372:	4828      	ldr	r0, [pc, #160]	; (8002414 <colonScreen+0xb4>)
 8002374:	f009 ffca 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <colonScreen+0xb8>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3349      	adds	r3, #73	; 0x49
 8002380:	b2d9      	uxtb	r1, r3
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <colonScreen+0xbc>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800238e:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002408 <colonScreen+0xa8>
 8002392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002396:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800239a:	edc7 7a00 	vstr	s15, [r7]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	2300      	movs	r3, #0
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2304      	movs	r3, #4
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ae:	4819      	ldr	r0, [pc, #100]	; (8002414 <colonScreen+0xb4>)
 80023b0:	f003 fa6a 	bl	8005888 <ILI9341_Draw_Text>
	}
	else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
	}
}
 80023b4:	e021      	b.n	80023fa <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 80023b6:	491a      	ldr	r1, [pc, #104]	; (8002420 <colonScreen+0xc0>)
 80023b8:	4816      	ldr	r0, [pc, #88]	; (8002414 <colonScreen+0xb4>)
 80023ba:	f009 ffa7 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <colonScreen+0xb8>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3349      	adds	r3, #73	; 0x49
 80023c6:	b2d9      	uxtb	r1, r3
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <colonScreen+0xbc>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023d4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002408 <colonScreen+0xa8>
 80023d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023e0:	edc7 7a00 	vstr	s15, [r7]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	2300      	movs	r3, #0
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2304      	movs	r3, #4
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <colonScreen+0xb4>)
 80023f6:	f003 fa47 	bl	8005888 <ILI9341_Draw_Text>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	f3af 8000 	nop.w
 8002408:	66666666 	.word	0x66666666
 800240c:	3fd66666 	.word	0x3fd66666
 8002410:	0800e73c 	.word	0x0800e73c
 8002414:	20000470 	.word	0x20000470
 8002418:	20000054 	.word	0x20000054
 800241c:	20000056 	.word	0x20000056
 8002420:	0800e740 	.word	0x0800e740
 8002424:	00000000 	.word	0x00000000

08002428 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af02      	add	r7, sp, #8
 800242e:	4603      	mov	r3, r0
 8002430:	460a      	mov	r2, r1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	71bb      	strb	r3, [r7, #6]
	if (prevMinuteNum != minuteNum || isEdit == true){
 8002438:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <minuteScreen+0xd0>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <minuteScreen+0xd4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d102      	bne.n	800244a <minuteScreen+0x22>
 8002444:	79bb      	ldrb	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d04e      	beq.n	80024e8 <minuteScreen+0xc0>
		if (status == true){
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d025      	beq.n	800249c <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <minuteScreen+0xd4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	492a      	ldr	r1, [pc, #168]	; (8002500 <minuteScreen+0xd8>)
 8002458:	482a      	ldr	r0, [pc, #168]	; (8002504 <minuteScreen+0xdc>)
 800245a:	f009 ff57 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <minuteScreen+0xe0>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3361      	adds	r3, #97	; 0x61
 8002466:	b2d9      	uxtb	r1, r3
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <minuteScreen+0xe4>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002474:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80024f0 <minuteScreen+0xc8>
 8002478:	ee27 7b06 	vmul.f64	d7, d7, d6
 800247c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002480:	edc7 7a00 	vstr	s15, [r7]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	2300      	movs	r3, #0
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2306      	movs	r3, #6
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002494:	481b      	ldr	r0, [pc, #108]	; (8002504 <minuteScreen+0xdc>)
 8002496:	f003 f9f7 	bl	8005888 <ILI9341_Draw_Text>
 800249a:	e021      	b.n	80024e0 <minuteScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 800249c:	491c      	ldr	r1, [pc, #112]	; (8002510 <minuteScreen+0xe8>)
 800249e:	4819      	ldr	r0, [pc, #100]	; (8002504 <minuteScreen+0xdc>)
 80024a0:	f009 ff34 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <minuteScreen+0xe0>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3361      	adds	r3, #97	; 0x61
 80024ac:	b2d9      	uxtb	r1, r3
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <minuteScreen+0xe4>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024ba:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80024f0 <minuteScreen+0xc8>
 80024be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024c6:	edc7 7a00 	vstr	s15, [r7]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	2300      	movs	r3, #0
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2306      	movs	r3, #6
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024da:	480a      	ldr	r0, [pc, #40]	; (8002504 <minuteScreen+0xdc>)
 80024dc:	f003 f9d4 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <minuteScreen+0xd4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <minuteScreen+0xd0>)
 80024e6:	6013      	str	r3, [r2, #0]
	}
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	33333333 	.word	0x33333333
 80024f4:	3fd33333 	.word	0x3fd33333
 80024f8:	20000048 	.word	0x20000048
 80024fc:	2000003c 	.word	0x2000003c
 8002500:	0800e720 	.word	0x0800e720
 8002504:	20000470 	.word	0x20000470
 8002508:	20000054 	.word	0x20000054
 800250c:	20000056 	.word	0x20000056
 8002510:	0800e728 	.word	0x0800e728
 8002514:	00000000 	.word	0x00000000

08002518 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af02      	add	r7, sp, #8
 800251e:	4603      	mov	r3, r0
 8002520:	460a      	mov	r2, r1
 8002522:	71fb      	strb	r3, [r7, #7]
 8002524:	4613      	mov	r3, r2
 8002526:	71bb      	strb	r3, [r7, #6]
	if (prevSecondNum != secondNum || isEdit == true){
 8002528:	4b49      	ldr	r3, [pc, #292]	; (8002650 <secondScreen+0x138>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b49      	ldr	r3, [pc, #292]	; (8002654 <secondScreen+0x13c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d102      	bne.n	800253a <secondScreen+0x22>
 8002534:	79bb      	ldrb	r3, [r7, #6]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d07c      	beq.n	8002634 <secondScreen+0x11c>
		if (status == true){
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03c      	beq.n	80025ba <secondScreen+0xa2>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8002540:	4b44      	ldr	r3, [pc, #272]	; (8002654 <secondScreen+0x13c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4944      	ldr	r1, [pc, #272]	; (8002658 <secondScreen+0x140>)
 8002548:	4844      	ldr	r0, [pc, #272]	; (800265c <secondScreen+0x144>)
 800254a:	f009 fedf 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <secondScreen+0x148>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800255a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002640 <secondScreen+0x128>
 800255e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002562:	4b40      	ldr	r3, [pc, #256]	; (8002664 <secondScreen+0x14c>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800256e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002572:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002576:	ee37 7b46 	vsub.f64	d7, d7, d6
 800257a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800257e:	edc7 7a00 	vstr	s15, [r7]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2d9      	uxtb	r1, r3
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <secondScreen+0x150>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002592:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002648 <secondScreen+0x130>
 8002596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800259a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800259e:	edc7 7a00 	vstr	s15, [r7]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	2300      	movs	r3, #0
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2302      	movs	r3, #2
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b2:	482a      	ldr	r0, [pc, #168]	; (800265c <secondScreen+0x144>)
 80025b4:	f003 f968 	bl	8005888 <ILI9341_Draw_Text>
 80025b8:	e038      	b.n	800262c <secondScreen+0x114>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80025ba:	492c      	ldr	r1, [pc, #176]	; (800266c <secondScreen+0x154>)
 80025bc:	4827      	ldr	r0, [pc, #156]	; (800265c <secondScreen+0x144>)
 80025be:	f009 fea5 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <secondScreen+0x148>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025ce:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002640 <secondScreen+0x128>
 80025d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <secondScreen+0x14c>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025e6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80025ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025f2:	edc7 7a00 	vstr	s15, [r7]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2d9      	uxtb	r1, r3
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <secondScreen+0x150>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002606:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002648 <secondScreen+0x130>
 800260a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800260e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002612:	edc7 7a00 	vstr	s15, [r7]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2302      	movs	r3, #2
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002626:	480d      	ldr	r0, [pc, #52]	; (800265c <secondScreen+0x144>)
 8002628:	f003 f92e 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <secondScreen+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <secondScreen+0x138>)
 8002632:	6013      	str	r3, [r2, #0]
	}
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	f3af 8000 	nop.w
 8002640:	cccccccd 	.word	0xcccccccd
 8002644:	3feccccc 	.word	0x3feccccc
 8002648:	ae147ae1 	.word	0xae147ae1
 800264c:	3fdae147 	.word	0x3fdae147
 8002650:	20000044 	.word	0x20000044
 8002654:	20000038 	.word	0x20000038
 8002658:	0800e720 	.word	0x0800e720
 800265c:	20000470 	.word	0x20000470
 8002660:	20000052 	.word	0x20000052
 8002664:	20000054 	.word	0x20000054
 8002668:	20000056 	.word	0x20000056
 800266c:	0800e728 	.word	0x0800e728

08002670 <displayClockScreen>:

//Display Clock Screen
void displayClockScreen(){
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0

	if (halfsecondState == false){ // colon behaviour
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <displayClockScreen+0x3c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f083 0301 	eor.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <displayClockScreen+0x1a>
		colonScreen(true);
 8002682:	2001      	movs	r0, #1
 8002684:	f7ff fe6c 	bl	8002360 <colonScreen>
 8002688:	e002      	b.n	8002690 <displayClockScreen+0x20>
	}
	else{
		colonScreen(false);
 800268a:	2000      	movs	r0, #0
 800268c:	f7ff fe68 	bl	8002360 <colonScreen>
	}

	secondScreen(true, false);
 8002690:	2100      	movs	r1, #0
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff ff40 	bl	8002518 <secondScreen>
	minuteScreen(true, false);
 8002698:	2100      	movs	r1, #0
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff fec4 	bl	8002428 <minuteScreen>
	hourScreen(true, false);
 80026a0:	2100      	movs	r1, #0
 80026a2:	2001      	movs	r0, #1
 80026a4:	f7ff fde4 	bl	8002270 <hourScreen>
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000050 	.word	0x20000050

080026b0 <staticClockScreen>:

void staticClockScreen(){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	colonScreen(true);
 80026b4:	2001      	movs	r0, #1
 80026b6:	f7ff fe53 	bl	8002360 <colonScreen>
	hourScreen(true, false);
 80026ba:	2100      	movs	r1, #0
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff fdd7 	bl	8002270 <hourScreen>
	minuteScreen(true, false);
 80026c2:	2100      	movs	r1, #0
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff feaf 	bl	8002428 <minuteScreen>
	secondScreen(true, false);
 80026ca:	2100      	movs	r1, #0
 80026cc:	2001      	movs	r0, #1
 80026ce:	f7ff ff23 	bl	8002518 <secondScreen>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <editHourScreen>:

//Edit Clock Screen
void editHourScreen()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	displayDateScreen(); // Init first
 80026dc:	f7ff faec 	bl	8001cb8 <displayDateScreen>
	colonScreen(true);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7ff fe3d 	bl	8002360 <colonScreen>
	minuteScreen(true, false);
 80026e6:	2100      	movs	r1, #0
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7ff fe9d 	bl	8002428 <minuteScreen>
	secondScreen(true, false);
 80026ee:	2100      	movs	r1, #0
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7ff ff11 	bl	8002518 <secondScreen>

	if (halfsecondState == false){ // hour
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <editHourScreen+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <editHourScreen+0x36>
		hourScreen(false, true);
 8002704:	2101      	movs	r1, #1
 8002706:	2000      	movs	r0, #0
 8002708:	f7ff fdb2 	bl	8002270 <hourScreen>
	}
	else{
		hourScreen(true, true);
	}
}
 800270c:	e003      	b.n	8002716 <editHourScreen+0x3e>
		hourScreen(true, true);
 800270e:	2101      	movs	r1, #1
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff fdad 	bl	8002270 <hourScreen>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000050 	.word	0x20000050

08002720 <editMinuteScreen>:
void editMinuteScreen(){
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002724:	2001      	movs	r0, #1
 8002726:	f7ff fe1b 	bl	8002360 <colonScreen>
	hourScreen(true, false);
 800272a:	2100      	movs	r1, #0
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff fd9f 	bl	8002270 <hourScreen>
	secondScreen(true, false);
 8002732:	2100      	movs	r1, #0
 8002734:	2001      	movs	r0, #1
 8002736:	f7ff feef 	bl	8002518 <secondScreen>

	if (halfsecondState == false){ //minute
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <editMinuteScreen+0x40>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <editMinuteScreen+0x32>
		minuteScreen(false, true);
 8002748:	2101      	movs	r1, #1
 800274a:	2000      	movs	r0, #0
 800274c:	f7ff fe6c 	bl	8002428 <minuteScreen>
	}
	else{
		minuteScreen(true, true);
	}
}
 8002750:	e003      	b.n	800275a <editMinuteScreen+0x3a>
		minuteScreen(true, true);
 8002752:	2101      	movs	r1, #1
 8002754:	2001      	movs	r0, #1
 8002756:	f7ff fe67 	bl	8002428 <minuteScreen>
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000050 	.word	0x20000050

08002764 <editSecondScreen>:
void editSecondScreen(){
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002768:	2001      	movs	r0, #1
 800276a:	f7ff fdf9 	bl	8002360 <colonScreen>
	hourScreen(true, false);
 800276e:	2100      	movs	r1, #0
 8002770:	2001      	movs	r0, #1
 8002772:	f7ff fd7d 	bl	8002270 <hourScreen>
	minuteScreen(true, false);
 8002776:	2100      	movs	r1, #0
 8002778:	2001      	movs	r0, #1
 800277a:	f7ff fe55 	bl	8002428 <minuteScreen>

	if (halfsecondState == false){ //second
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <editSecondScreen+0x40>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <editSecondScreen+0x32>
		secondScreen(false, true);
 800278c:	2101      	movs	r1, #1
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff fec2 	bl	8002518 <secondScreen>
	}
	else{
		secondScreen(true, true);
	}
}
 8002794:	e003      	b.n	800279e <editSecondScreen+0x3a>
		secondScreen(true, true);
 8002796:	2101      	movs	r1, #1
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff febd 	bl	8002518 <secondScreen>
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000050 	.word	0x20000050

080027a8 <editDayScreen>:

//Edit Date Clock Screen
void editDayScreen()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	dateScreen(true, false);
 80027ac:	2100      	movs	r1, #0
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff f8d6 	bl	8001960 <dateScreen>
	monthScreen(true, false);
 80027b4:	2100      	movs	r1, #0
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff f95a 	bl	8001a70 <monthScreen>
	yearScreen(true, false);
 80027bc:	2100      	movs	r1, #0
 80027be:	2001      	movs	r0, #1
 80027c0:	f7ff f9ea 	bl	8001b98 <yearScreen>

	if (halfsecondState == false){ // day
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <editDayScreen+0x40>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f083 0301 	eor.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <editDayScreen+0x34>
		dayScreen(false, true);
 80027d2:	2101      	movs	r1, #1
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff f843 	bl	8001860 <dayScreen>
	}
	else{
		dayScreen(true, true);
	}
}
 80027da:	e003      	b.n	80027e4 <editDayScreen+0x3c>
		dayScreen(true, true);
 80027dc:	2101      	movs	r1, #1
 80027de:	2001      	movs	r0, #1
 80027e0:	f7ff f83e 	bl	8001860 <dayScreen>
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000050 	.word	0x20000050

080027ec <editDateScreen>:
void editDateScreen()
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 80027f0:	2100      	movs	r1, #0
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7ff f834 	bl	8001860 <dayScreen>
	monthScreen(true, false);
 80027f8:	2100      	movs	r1, #0
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff f938 	bl	8001a70 <monthScreen>
	yearScreen(true, false);
 8002800:	2100      	movs	r1, #0
 8002802:	2001      	movs	r0, #1
 8002804:	f7ff f9c8 	bl	8001b98 <yearScreen>

	if (halfsecondState == false){ // date
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <editDateScreen+0x40>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f083 0301 	eor.w	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <editDateScreen+0x34>
		dateScreen(false, true);
 8002816:	2101      	movs	r1, #1
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff f8a1 	bl	8001960 <dateScreen>
	}
	else{
		dateScreen(true, true);
	}
}
 800281e:	e003      	b.n	8002828 <editDateScreen+0x3c>
		dateScreen(true, true);
 8002820:	2101      	movs	r1, #1
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff f89c 	bl	8001960 <dateScreen>
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000050 	.word	0x20000050

08002830 <editMonthScreen>:
void editMonthScreen()
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8002834:	2100      	movs	r1, #0
 8002836:	2001      	movs	r0, #1
 8002838:	f7ff f812 	bl	8001860 <dayScreen>
	dateScreen(true, false);
 800283c:	2100      	movs	r1, #0
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff f88e 	bl	8001960 <dateScreen>
	yearScreen(true, false);
 8002844:	2100      	movs	r1, #0
 8002846:	2001      	movs	r0, #1
 8002848:	f7ff f9a6 	bl	8001b98 <yearScreen>

	if (halfsecondState == false){ // month
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <editMonthScreen+0x40>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <editMonthScreen+0x34>
		monthScreen(false, true);
 800285a:	2101      	movs	r1, #1
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff f907 	bl	8001a70 <monthScreen>
	}
	else{
		monthScreen(true, true);
	}
}
 8002862:	e003      	b.n	800286c <editMonthScreen+0x3c>
		monthScreen(true, true);
 8002864:	2101      	movs	r1, #1
 8002866:	2001      	movs	r0, #1
 8002868:	f7ff f902 	bl	8001a70 <monthScreen>
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000050 	.word	0x20000050

08002874 <editYearScreen>:
void editYearScreen()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	staticClockScreen(); // init Clock first in editing mode
 8002878:	f7ff ff1a 	bl	80026b0 <staticClockScreen>
	dayScreen(true, false);
 800287c:	2100      	movs	r1, #0
 800287e:	2001      	movs	r0, #1
 8002880:	f7fe ffee 	bl	8001860 <dayScreen>
	dateScreen(true, false);
 8002884:	2100      	movs	r1, #0
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff f86a 	bl	8001960 <dateScreen>
	monthScreen(true, false);
 800288c:	2100      	movs	r1, #0
 800288e:	2001      	movs	r0, #1
 8002890:	f7ff f8ee 	bl	8001a70 <monthScreen>

	if (halfsecondState == false){ // day
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <editYearScreen+0x44>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <editYearScreen+0x38>
		yearScreen(false, true);
 80028a2:	2101      	movs	r1, #1
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff f977 	bl	8001b98 <yearScreen>
	}
	else{
		yearScreen(true, true);
	}
}
 80028aa:	e003      	b.n	80028b4 <editYearScreen+0x40>
		yearScreen(true, true);
 80028ac:	2101      	movs	r1, #1
 80028ae:	2001      	movs	r0, #1
 80028b0:	f7ff f972 	bl	8001b98 <yearScreen>
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000050 	.word	0x20000050
 80028bc:	00000000 	.word	0x00000000

080028c0 <bottomBarScreen>:

//Bottom Screen
void bottomBarScreen(){
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 80028c6:	2302      	movs	r3, #2
 80028c8:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomHeight = maxHeight * 0.87;
 80028ca:	4bb3      	ldr	r3, [pc, #716]	; (8002b98 <bottomBarScreen+0x2d8>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028d6:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002b80 <bottomBarScreen+0x2c0>
 80028da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80028e6:	793b      	ldrb	r3, [r7, #4]
 80028e8:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 80028ea:	2333      	movs	r3, #51	; 0x33
 80028ec:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth * 0.25 + 51;
 80028ee:	4bab      	ldr	r3, [pc, #684]	; (8002b9c <bottomBarScreen+0x2dc>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028fa:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80028fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002902:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002b88 <bottomBarScreen+0x2c8>
 8002906:	ee37 7b06 	vadd.f64	d7, d7, d6
 800290a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800290e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002912:	793b      	ldrb	r3, [r7, #4]
 8002914:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth * 0.50 + 51;
 8002916:	4ba1      	ldr	r3, [pc, #644]	; (8002b9c <bottomBarScreen+0x2dc>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002922:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800292a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002b88 <bottomBarScreen+0x2c8>
 800292e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002932:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002936:	edc7 7a01 	vstr	s15, [r7, #4]
 800293a:	793b      	ldrb	r3, [r7, #4]
 800293c:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 800293e:	4b97      	ldr	r3, [pc, #604]	; (8002b9c <bottomBarScreen+0x2dc>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800294a:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 800294e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002952:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002b88 <bottomBarScreen+0x2c8>
 8002956:	ee37 7b06 	vadd.f64	d7, d7, d6
 800295a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800295e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002962:	793b      	ldrb	r3, [r7, #4]
 8002964:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 8002966:	2337      	movs	r3, #55	; 0x37
 8002968:	727b      	strb	r3, [r7, #9]

	//Rectangle Background Color
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1 + bottomWidth, maxHeight, RED);
 800296a:	7b7b      	ldrb	r3, [r7, #13]
 800296c:	b298      	uxth	r0, r3
 800296e:	7bbb      	ldrb	r3, [r7, #14]
 8002970:	b299      	uxth	r1, r3
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	b29a      	uxth	r2, r3
 8002976:	7a7b      	ldrb	r3, [r7, #9]
 8002978:	b29b      	uxth	r3, r3
 800297a:	4413      	add	r3, r2
 800297c:	b29a      	uxth	r2, r3
 800297e:	4b86      	ldr	r3, [pc, #536]	; (8002b98 <bottomBarScreen+0x2d8>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002986:	9400      	str	r4, [sp, #0]
 8002988:	f002 fe84 	bl	8005694 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2 + bottomWidth, maxHeight, YELLOW);
 800298c:	7b3b      	ldrb	r3, [r7, #12]
 800298e:	b298      	uxth	r0, r3
 8002990:	7bbb      	ldrb	r3, [r7, #14]
 8002992:	b299      	uxth	r1, r3
 8002994:	7b3b      	ldrb	r3, [r7, #12]
 8002996:	b29a      	uxth	r2, r3
 8002998:	7a7b      	ldrb	r3, [r7, #9]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4413      	add	r3, r2
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <bottomBarScreen+0x2d8>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 80029a8:	9400      	str	r4, [sp, #0]
 80029aa:	f002 fe73 	bl	8005694 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3 + bottomWidth, maxHeight, CYAN);
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	b298      	uxth	r0, r3
 80029b2:	7bbb      	ldrb	r3, [r7, #14]
 80029b4:	b299      	uxth	r1, r3
 80029b6:	7afb      	ldrb	r3, [r7, #11]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	7a7b      	ldrb	r3, [r7, #9]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4413      	add	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b75      	ldr	r3, [pc, #468]	; (8002b98 <bottomBarScreen+0x2d8>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	f240 74ff 	movw	r4, #2047	; 0x7ff
 80029ca:	9400      	str	r4, [sp, #0]
 80029cc:	f002 fe62 	bl	8005694 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4 + bottomWidth, maxHeight, GREEN);
 80029d0:	7abb      	ldrb	r3, [r7, #10]
 80029d2:	b298      	uxth	r0, r3
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	b299      	uxth	r1, r3
 80029d8:	7abb      	ldrb	r3, [r7, #10]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	7a7b      	ldrb	r3, [r7, #9]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <bottomBarScreen+0x2d8>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80029ec:	9400      	str	r4, [sp, #0]
 80029ee:	f002 fe51 	bl	8005694 <ILI9341_Draw_Filled_Rectangle_Coord>

	//Text Layout
	sprintf(Temp_Buffer_text, "MOD");
 80029f2:	496b      	ldr	r1, [pc, #428]	; (8002ba0 <bottomBarScreen+0x2e0>)
 80029f4:	486b      	ldr	r0, [pc, #428]	; (8002ba4 <bottomBarScreen+0x2e4>)
 80029f6:	f009 fc89 	bl	800c30c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.9, BLACK, size, RED);
 80029fa:	4b6b      	ldr	r3, [pc, #428]	; (8002ba8 <bottomBarScreen+0x2e8>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b2d9      	uxtb	r1, r3
 8002a00:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <bottomBarScreen+0x2d8>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a0c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002b90 <bottomBarScreen+0x2d0>
 8002a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a18:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a1c:	793b      	ldrb	r3, [r7, #4]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002a28:	9001      	str	r0, [sp, #4]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	485d      	ldr	r0, [pc, #372]	; (8002ba4 <bottomBarScreen+0x2e4>)
 8002a30:	f002 ff2a 	bl	8005888 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "ADJ");
 8002a34:	495d      	ldr	r1, [pc, #372]	; (8002bac <bottomBarScreen+0x2ec>)
 8002a36:	485b      	ldr	r0, [pc, #364]	; (8002ba4 <bottomBarScreen+0x2e4>)
 8002a38:	f009 fc68 	bl	800c30c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.25 + offsetWidth, maxHeight * 0.9, BLACK, size, YELLOW);
 8002a3c:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <bottomBarScreen+0x2dc>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a48:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002a4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a50:	4b55      	ldr	r3, [pc, #340]	; (8002ba8 <bottomBarScreen+0x2e8>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a64:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a68:	793b      	ldrb	r3, [r7, #4]
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <bottomBarScreen+0x2d8>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a78:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002b90 <bottomBarScreen+0x2d0>
 8002a7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a84:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a88:	793b      	ldrb	r3, [r7, #4]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002a94:	9001      	str	r0, [sp, #4]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4842      	ldr	r0, [pc, #264]	; (8002ba4 <bottomBarScreen+0x2e4>)
 8002a9c:	f002 fef4 	bl	8005888 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "FWD");
 8002aa0:	4943      	ldr	r1, [pc, #268]	; (8002bb0 <bottomBarScreen+0x2f0>)
 8002aa2:	4840      	ldr	r0, [pc, #256]	; (8002ba4 <bottomBarScreen+0x2e4>)
 8002aa4:	f009 fc32 	bl	800c30c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.5 + offsetWidth, maxHeight * 0.9, BLACK, size, CYAN);
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <bottomBarScreen+0x2dc>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ab4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002ab8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <bottomBarScreen+0x2e8>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ac8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002acc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ad0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ad4:	793b      	ldrb	r3, [r7, #4]
 8002ad6:	b2d9      	uxtb	r1, r3
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <bottomBarScreen+0x2d8>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ae4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002b90 <bottomBarScreen+0x2d0>
 8002ae8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002aec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002af0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002af4:	793b      	ldrb	r3, [r7, #4]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002b00:	9001      	str	r0, [sp, #4]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	4827      	ldr	r0, [pc, #156]	; (8002ba4 <bottomBarScreen+0x2e4>)
 8002b08:	f002 febe 	bl	8005888 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "BWD");
 8002b0c:	4929      	ldr	r1, [pc, #164]	; (8002bb4 <bottomBarScreen+0x2f4>)
 8002b0e:	4825      	ldr	r0, [pc, #148]	; (8002ba4 <bottomBarScreen+0x2e4>)
 8002b10:	f009 fbfc 	bl	800c30c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.75 + offsetWidth, maxHeight * 0.9, BLACK, size, GREEN);
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <bottomBarScreen+0x2dc>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b20:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002b24:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <bottomBarScreen+0x2e8>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b40:	793b      	ldrb	r3, [r7, #4]
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <bottomBarScreen+0x2d8>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b50:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002b90 <bottomBarScreen+0x2d0>
 8002b54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b60:	793b      	ldrb	r3, [r7, #4]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002b6c:	9001      	str	r0, [sp, #4]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2300      	movs	r3, #0
 8002b72:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <bottomBarScreen+0x2e4>)
 8002b74:	f002 fe88 	bl	8005888 <ILI9341_Draw_Text>
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	3d70a3d7 	.word	0x3d70a3d7
 8002b84:	3febd70a 	.word	0x3febd70a
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40498000 	.word	0x40498000
 8002b90:	cccccccd 	.word	0xcccccccd
 8002b94:	3feccccc 	.word	0x3feccccc
 8002b98:	20000056 	.word	0x20000056
 8002b9c:	20000052 	.word	0x20000052
 8002ba0:	0800e744 	.word	0x0800e744
 8002ba4:	20000470 	.word	0x20000470
 8002ba8:	20000054 	.word	0x20000054
 8002bac:	0800e748 	.word	0x0800e748
 8002bb0:	0800e74c 	.word	0x0800e74c
 8002bb4:	0800e750 	.word	0x0800e750

08002bb8 <bottomBarScreenUpdate>:
void bottomBarScreenUpdate(){
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 8002bc2:	2333      	movs	r3, #51	; 0x33
 8002bc4:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomHeight = maxHeight * 0.87;
 8002bc6:	4bc6      	ldr	r3, [pc, #792]	; (8002ee0 <bottomBarScreenUpdate+0x328>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bd2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8002eb8 <bottomBarScreenUpdate+0x300>
 8002bd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bde:	edc7 7a01 	vstr	s15, [r7, #4]
 8002be2:	793b      	ldrb	r3, [r7, #4]
 8002be4:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002be6:	4bbf      	ldr	r3, [pc, #764]	; (8002ee4 <bottomBarScreenUpdate+0x32c>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bf2:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002bf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bfa:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8002ec0 <bottomBarScreenUpdate+0x308>
 8002bfe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c06:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c0a:	793b      	ldrb	r3, [r7, #4]
 8002c0c:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth = 55;
 8002c0e:	2337      	movs	r3, #55	; 0x37
 8002c10:	72fb      	strb	r3, [r7, #11]

	//Update Temperature
	if(prevTemp != temp){
 8002c12:	4bb5      	ldr	r3, [pc, #724]	; (8002ee8 <bottomBarScreenUpdate+0x330>)
 8002c14:	ed93 7a00 	vldr	s14, [r3]
 8002c18:	4bb4      	ldr	r3, [pc, #720]	; (8002eec <bottomBarScreenUpdate+0x334>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	d059      	beq.n	8002cdc <bottomBarScreenUpdate+0x124>
		sprintf(Temp_Buffer_text, "%0.1f 'C", temp);
 8002c28:	4bb0      	ldr	r3, [pc, #704]	; (8002eec <bottomBarScreenUpdate+0x334>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c32:	ec53 2b17 	vmov	r2, r3, d7
 8002c36:	49ae      	ldr	r1, [pc, #696]	; (8002ef0 <bottomBarScreenUpdate+0x338>)
 8002c38:	48ae      	ldr	r0, [pc, #696]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002c3a:	f009 fb67 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002c3e:	4ba9      	ldr	r3, [pc, #676]	; (8002ee4 <bottomBarScreenUpdate+0x32c>)
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c4a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8002ec8 <bottomBarScreenUpdate+0x310>
 8002c4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c52:	4ba9      	ldr	r3, [pc, #676]	; (8002ef8 <bottomBarScreenUpdate+0x340>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c66:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c6a:	793b      	ldrb	r3, [r7, #4]
 8002c6c:	b2d9      	uxtb	r1, r3
 8002c6e:	4b9c      	ldr	r3, [pc, #624]	; (8002ee0 <bottomBarScreenUpdate+0x328>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c7a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002ed0 <bottomBarScreenUpdate+0x318>
 8002c7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002c86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c92:	793b      	ldrb	r3, [r7, #4]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	9001      	str	r0, [sp, #4]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca4:	4893      	ldr	r0, [pc, #588]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002ca6:	f002 fdef 	bl	8005888 <ILI9341_Draw_Text>
		prevTemp = temp;
 8002caa:	4b90      	ldr	r3, [pc, #576]	; (8002eec <bottomBarScreenUpdate+0x334>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a8e      	ldr	r2, [pc, #568]	; (8002ee8 <bottomBarScreenUpdate+0x330>)
 8002cb0:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002cb2:	7bbb      	ldrb	r3, [r7, #14]
 8002cb4:	b298      	uxth	r0, r3
 8002cb6:	7b7b      	ldrb	r3, [r7, #13]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b37      	subs	r3, #55	; 0x37
 8002cbc:	b299      	uxth	r1, r3
 8002cbe:	7b3b      	ldrb	r3, [r7, #12]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <bottomBarScreenUpdate+0x328>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	3b3e      	subs	r3, #62	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002cd6:	9400      	str	r4, [sp, #0]
 8002cd8:	f002 fc5b 	bl	8005592 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update Humidity
	if(prevHumid != humid){
 8002cdc:	4b87      	ldr	r3, [pc, #540]	; (8002efc <bottomBarScreenUpdate+0x344>)
 8002cde:	ed93 7a00 	vldr	s14, [r3]
 8002ce2:	4b87      	ldr	r3, [pc, #540]	; (8002f00 <bottomBarScreenUpdate+0x348>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	d059      	beq.n	8002da6 <bottomBarScreenUpdate+0x1ee>
		sprintf(Temp_Buffer_text, "%0.1f %%", humid);
 8002cf2:	4b83      	ldr	r3, [pc, #524]	; (8002f00 <bottomBarScreenUpdate+0x348>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfc:	ec53 2b17 	vmov	r2, r3, d7
 8002d00:	4980      	ldr	r1, [pc, #512]	; (8002f04 <bottomBarScreenUpdate+0x34c>)
 8002d02:	487c      	ldr	r0, [pc, #496]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002d04:	f009 fb02 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.55 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002d08:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <bottomBarScreenUpdate+0x32c>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d14:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002ed8 <bottomBarScreenUpdate+0x320>
 8002d18:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d1c:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <bottomBarScreenUpdate+0x340>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d30:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d34:	793b      	ldrb	r3, [r7, #4]
 8002d36:	b2d9      	uxtb	r1, r3
 8002d38:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <bottomBarScreenUpdate+0x328>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d44:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002ed0 <bottomBarScreenUpdate+0x318>
 8002d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d4c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002d50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d58:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d5c:	793b      	ldrb	r3, [r7, #4]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2000      	movs	r0, #0
 8002d66:	9001      	str	r0, [sp, #4]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d6e:	4861      	ldr	r0, [pc, #388]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002d70:	f002 fd8a 	bl	8005888 <ILI9341_Draw_Text>
		prevHumid = humid;
 8002d74:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <bottomBarScreenUpdate+0x348>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a60      	ldr	r2, [pc, #384]	; (8002efc <bottomBarScreenUpdate+0x344>)
 8002d7a:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	b298      	uxth	r0, r3
 8002d80:	7b7b      	ldrb	r3, [r7, #13]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b37      	subs	r3, #55	; 0x37
 8002d86:	b299      	uxth	r1, r3
 8002d88:	7b3b      	ldrb	r3, [r7, #12]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	7afb      	ldrb	r3, [r7, #11]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b52      	ldr	r3, [pc, #328]	; (8002ee0 <bottomBarScreenUpdate+0x328>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	3b3e      	subs	r3, #62	; 0x3e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002da0:	9400      	str	r4, [sp, #0]
 8002da2:	f002 fbf6 	bl	8005592 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update PM2.5
	if(prevPmTwoPointFive != pmTwoPointFive){ // update this value please
 8002da6:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <bottomBarScreenUpdate+0x350>)
 8002da8:	ed93 7a00 	vldr	s14, [r3]
 8002dac:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <bottomBarScreenUpdate+0x354>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	eeb4 7a67 	vcmp.f32	s14, s15
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	f000 80c6 	beq.w	8002f4a <bottomBarScreenUpdate+0x392>
		sprintf(Temp_Buffer_text, "      %03d ug/m^3", (int)pmTwoPointFive);
 8002dbe:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <bottomBarScreenUpdate+0x354>)
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc8:	ee17 2a90 	vmov	r2, s15
 8002dcc:	4950      	ldr	r1, [pc, #320]	; (8002f10 <bottomBarScreenUpdate+0x358>)
 8002dce:	4849      	ldr	r0, [pc, #292]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002dd0:	f009 fa9c 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK); // Change color
 8002dd4:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <bottomBarScreenUpdate+0x32c>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002de0:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002ec8 <bottomBarScreenUpdate+0x310>
 8002de4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002de8:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <bottomBarScreenUpdate+0x340>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002df4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002df8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002dfc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e00:	793b      	ldrb	r3, [r7, #4]
 8002e02:	b2d9      	uxtb	r1, r3
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <bottomBarScreenUpdate+0x328>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e10:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8002ed0 <bottomBarScreenUpdate+0x318>
 8002e14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e18:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002e1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e24:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e28:	793b      	ldrb	r3, [r7, #4]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2000      	movs	r0, #0
 8002e32:	9001      	str	r0, [sp, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e3a:	482e      	ldr	r0, [pc, #184]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002e3c:	f002 fd24 	bl	8005888 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, "PM2.5");
 8002e40:	4934      	ldr	r1, [pc, #208]	; (8002f14 <bottomBarScreenUpdate+0x35c>)
 8002e42:	482c      	ldr	r0, [pc, #176]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002e44:	f009 fa62 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK);
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <bottomBarScreenUpdate+0x32c>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e54:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002ec8 <bottomBarScreenUpdate+0x310>
 8002e58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <bottomBarScreenUpdate+0x340>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e70:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e74:	793b      	ldrb	r3, [r7, #4]
 8002e76:	b2d9      	uxtb	r1, r3
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <bottomBarScreenUpdate+0x328>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e84:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002ed0 <bottomBarScreenUpdate+0x318>
 8002e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e8c:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002e90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e98:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e9c:	793b      	ldrb	r3, [r7, #4]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	9001      	str	r0, [sp, #4]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eae:	4811      	ldr	r0, [pc, #68]	; (8002ef4 <bottomBarScreenUpdate+0x33c>)
 8002eb0:	f002 fcea 	bl	8005888 <ILI9341_Draw_Text>
 8002eb4:	e030      	b.n	8002f18 <bottomBarScreenUpdate+0x360>
 8002eb6:	bf00      	nop
 8002eb8:	3d70a3d7 	.word	0x3d70a3d7
 8002ebc:	3febd70a 	.word	0x3febd70a
 8002ec0:	00000000 	.word	0x00000000
 8002ec4:	40498000 	.word	0x40498000
	...
 8002ed0:	66666666 	.word	0x66666666
 8002ed4:	3fe66666 	.word	0x3fe66666
 8002ed8:	9999999a 	.word	0x9999999a
 8002edc:	3fe19999 	.word	0x3fe19999
 8002ee0:	20000056 	.word	0x20000056
 8002ee4:	20000052 	.word	0x20000052
 8002ee8:	20000024 	.word	0x20000024
 8002eec:	20000018 	.word	0x20000018
 8002ef0:	0800e754 	.word	0x0800e754
 8002ef4:	20000470 	.word	0x20000470
 8002ef8:	20000054 	.word	0x20000054
 8002efc:	20000028 	.word	0x20000028
 8002f00:	2000001c 	.word	0x2000001c
 8002f04:	0800e760 	.word	0x0800e760
 8002f08:	2000002c 	.word	0x2000002c
 8002f0c:	20000020 	.word	0x20000020
 8002f10:	0800e76c 	.word	0x0800e76c
 8002f14:	0800e780 	.word	0x0800e780

		prevPmTwoPointFive = pmTwoPointFive;
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <bottomBarScreenUpdate+0x39c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <bottomBarScreenUpdate+0x3a0>)
 8002f1e:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45+18, bottomWidth4 + bottomWidth, maxHeight-52+18, WHITE);
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	b298      	uxth	r0, r3
 8002f24:	7b7b      	ldrb	r3, [r7, #13]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b1b      	subs	r3, #27
 8002f2a:	b299      	uxth	r1, r3
 8002f2c:	7b3b      	ldrb	r3, [r7, #12]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <bottomBarScreenUpdate+0x3a4>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	3b22      	subs	r3, #34	; 0x22
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002f44:	9400      	str	r4, [sp, #0]
 8002f46:	f002 fb24 	bl	8005592 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000020 	.word	0x20000020
 8002f58:	2000002c 	.word	0x2000002c
 8002f5c:	20000056 	.word	0x20000056

08002f60 <buzzerSound>:

//Buzzer Sound
void buzzerSound(uint32_t delay){
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR1 = (1000 - 1) * 0.5;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <buzzerSound+0x30>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f72:	2100      	movs	r1, #0
 8002f74:	4806      	ldr	r0, [pc, #24]	; (8002f90 <buzzerSound+0x30>)
 8002f76:	f006 fecd 	bl	8009d14 <HAL_TIM_PWM_Start>
	HAL_Delay(delay);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f003 f9da 	bl	8006334 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002f80:	2100      	movs	r1, #0
 8002f82:	4803      	ldr	r0, [pc, #12]	; (8002f90 <buzzerSound+0x30>)
 8002f84:	f006 ffc0 	bl	8009f08 <HAL_TIM_PWM_Stop>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000548 	.word	0x20000548

08002f94 <notifyPm>:

void notifyPm(){
 8002f94:	b5b0      	push	{r4, r5, r7, lr}
 8002f96:	ed2d 8b06 	vpush	{d8-d10}
 8002f9a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8002f9e:	af14      	add	r7, sp, #80	; 0x50
	float *respondRead;
	respondRead = read_sensirion();
 8002fa0:	f7fd ffe2 	bl	8000f68 <read_sensirion>
 8002fa4:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002fa8:	4b72      	ldr	r3, [pc, #456]	; (8003174 <notifyPm+0x1e0>)
 8002faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <notifyPm+0x1e4>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	1a84      	subs	r4, r0, r2
 8002fb6:	eb61 0503 	sbc.w	r5, r1, r3
 8002fba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	42ab      	cmp	r3, r5
 8002fc4:	bf08      	it	eq
 8002fc6:	42a2      	cmpeq	r2, r4
 8002fc8:	f080 80cd 	bcs.w	8003166 <notifyPm+0x1d2>
 8002fcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	da00      	bge.n	8002fe2 <notifyPm+0x4e>
			println("Normal Air");
		}

		pmPrevMillisecondHAL = millisecondHAL;
	}
}
 8002fe0:	e0c1      	b.n	8003166 <notifyPm+0x1d2>
	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002fe2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800317c <notifyPm+0x1e8>
 8002ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	d900      	bls.n	8002ffc <notifyPm+0x68>
}
 8002ffa:	e0b4      	b.n	8003166 <notifyPm+0x1d2>
		if(respondRead[1]>=250){
 8002ffc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003000:	3304      	adds	r3, #4
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003180 <notifyPm+0x1ec>
 800300a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003012:	db03      	blt.n	800301c <notifyPm+0x88>
			sent_string_to_mcu("HAZ");
 8003014:	485b      	ldr	r0, [pc, #364]	; (8003184 <notifyPm+0x1f0>)
 8003016:	f7fe f899 	bl	800114c <sent_string_to_mcu>
 800301a:	e01e      	b.n	800305a <notifyPm+0xc6>
		else if(respondRead[1]>=150){
 800301c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003020:	3304      	adds	r3, #4
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003188 <notifyPm+0x1f4>
 800302a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003032:	db03      	blt.n	800303c <notifyPm+0xa8>
			sent_string_to_mcu("VUH");
 8003034:	4855      	ldr	r0, [pc, #340]	; (800318c <notifyPm+0x1f8>)
 8003036:	f7fe f889 	bl	800114c <sent_string_to_mcu>
 800303a:	e00e      	b.n	800305a <notifyPm+0xc6>
		else if(respondRead[1]>=55){
 800303c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003040:	3304      	adds	r3, #4
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003190 <notifyPm+0x1fc>
 800304a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	db02      	blt.n	800305a <notifyPm+0xc6>
			sent_string_to_mcu("UHT");
 8003054:	484f      	ldr	r0, [pc, #316]	; (8003194 <notifyPm+0x200>)
 8003056:	f7fe f879 	bl	800114c <sent_string_to_mcu>
		if(respondRead[1]>=55){
 800305a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800305e:	3304      	adds	r3, #4
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003190 <notifyPm+0x1fc>
 8003068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db70      	blt.n	8003154 <notifyPm+0x1c0>
			println("Danger Air");
 8003072:	4849      	ldr	r0, [pc, #292]	; (8003198 <notifyPm+0x204>)
 8003074:	f7fd ff0e 	bl	8000e94 <println>
			println("Sending");
 8003078:	4848      	ldr	r0, [pc, #288]	; (800319c <notifyPm+0x208>)
 800307a:	f7fd ff0b 	bl	8000e94 <println>
			sprintf(stringBuffer, "EXC %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f" , respondRead[0], respondRead[1], respondRead[2], respondRead[3], respondRead[4], respondRead[5], respondRead[6], respondRead[7], respondRead[8], respondRead[9], respondRead[10]);
 800307e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800308a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800308e:	3304      	adds	r3, #4
 8003090:	edd3 7a00 	vldr	s15, [r3]
 8003094:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003098:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800309c:	3308      	adds	r3, #8
 800309e:	edd3 6a00 	vldr	s13, [r3]
 80030a2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80030a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030aa:	330c      	adds	r3, #12
 80030ac:	edd3 5a00 	vldr	s11, [r3]
 80030b0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80030b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030b8:	3310      	adds	r3, #16
 80030ba:	edd3 4a00 	vldr	s9, [r3]
 80030be:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80030c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030c6:	3314      	adds	r3, #20
 80030c8:	edd3 3a00 	vldr	s7, [r3]
 80030cc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80030d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030d4:	3318      	adds	r3, #24
 80030d6:	edd3 2a00 	vldr	s5, [r3]
 80030da:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80030de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030e2:	331c      	adds	r3, #28
 80030e4:	edd3 1a00 	vldr	s3, [r3]
 80030e8:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80030ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030f0:	3320      	adds	r3, #32
 80030f2:	edd3 0a00 	vldr	s1, [r3]
 80030f6:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80030fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030fe:	3324      	adds	r3, #36	; 0x24
 8003100:	ed93 8a00 	vldr	s16, [r3]
 8003104:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8003108:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800310c:	3328      	adds	r3, #40	; 0x28
 800310e:	ed93 9a00 	vldr	s18, [r3]
 8003112:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8003116:	4638      	mov	r0, r7
 8003118:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 800311c:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 8003120:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 8003124:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8003128:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800312c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8003130:	ed8d 4b06 	vstr	d4, [sp, #24]
 8003134:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003138:	ed8d 6b02 	vstr	d6, [sp, #8]
 800313c:	ed8d 7b00 	vstr	d7, [sp]
 8003140:	ec53 2b1a 	vmov	r2, r3, d10
 8003144:	4916      	ldr	r1, [pc, #88]	; (80031a0 <notifyPm+0x20c>)
 8003146:	f009 f8e1 	bl	800c30c <siprintf>
			sent_string_to_mcu(stringBuffer);
 800314a:	463b      	mov	r3, r7
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fffd 	bl	800114c <sent_string_to_mcu>
 8003152:	e002      	b.n	800315a <notifyPm+0x1c6>
			println("Normal Air");
 8003154:	4813      	ldr	r0, [pc, #76]	; (80031a4 <notifyPm+0x210>)
 8003156:	f7fd fe9d 	bl	8000e94 <println>
		pmPrevMillisecondHAL = millisecondHAL;
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <notifyPm+0x1e0>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	4905      	ldr	r1, [pc, #20]	; (8003178 <notifyPm+0x1e4>)
 8003162:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003166:	bf00      	nop
 8003168:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 800316c:	46bd      	mov	sp, r7
 800316e:	ecbd 8b06 	vpop	{d8-d10}
 8003172:	bdb0      	pop	{r4, r5, r7, pc}
 8003174:	200002f8 	.word	0x200002f8
 8003178:	20000300 	.word	0x20000300
 800317c:	461c3c00 	.word	0x461c3c00
 8003180:	437a0000 	.word	0x437a0000
 8003184:	0800e788 	.word	0x0800e788
 8003188:	43160000 	.word	0x43160000
 800318c:	0800e78c 	.word	0x0800e78c
 8003190:	425c0000 	.word	0x425c0000
 8003194:	0800e790 	.word	0x0800e790
 8003198:	0800e794 	.word	0x0800e794
 800319c:	0800e7a0 	.word	0x0800e7a0
 80031a0:	0800e7a8 	.word	0x0800e7a8
 80031a4:	0800e7e0 	.word	0x0800e7e0

080031a8 <resisterMonitor>:

void resisterMonitor(){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0

	  float dutyCycleScreen = 0.0;
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	607b      	str	r3, [r7, #4]
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 80031b4:	bf00      	nop
 80031b6:	2164      	movs	r1, #100	; 0x64
 80031b8:	4829      	ldr	r0, [pc, #164]	; (8003260 <resisterMonitor+0xb8>)
 80031ba:	f003 f9f1 	bl	80065a0 <HAL_ADC_PollForConversion>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f8      	bne.n	80031b6 <resisterMonitor+0xe>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 80031c4:	4826      	ldr	r0, [pc, #152]	; (8003260 <resisterMonitor+0xb8>)
 80031c6:	f003 fa76 	bl	80066b6 <HAL_ADC_GetValue>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <resisterMonitor+0xbc>)
 80031ce:	6013      	str	r3, [r2, #0]
	  lightPercent = adc_val*100 / 4095;
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <resisterMonitor+0xbc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2264      	movs	r2, #100	; 0x64
 80031d6:	fb02 f203 	mul.w	r2, r2, r3
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <resisterMonitor+0xc0>)
 80031dc:	fba3 1302 	umull	r1, r3, r3, r2
 80031e0:	1ad2      	subs	r2, r2, r3
 80031e2:	0852      	lsrs	r2, r2, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	0adb      	lsrs	r3, r3, #11
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <resisterMonitor+0xc4>)
 80031ec:	601a      	str	r2, [r3, #0]

	  //Change Screen Light Output
	  //PWM
	  dutyCycleScreen = ((adc_val/4095.0) * 0.8) + 0.2;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <resisterMonitor+0xbc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80031fa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8003248 <resisterMonitor+0xa0>
 80031fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003202:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003250 <resisterMonitor+0xa8>
 8003206:	ee27 7b06 	vmul.f64	d7, d7, d6
 800320a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003258 <resisterMonitor+0xb0>
 800320e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003216:	edc7 7a01 	vstr	s15, [r7, #4]
	  //No. 2
	  htim3.Instance -> CCR1 = (100-1) * dutyCycleScreen;
 800321a:	edd7 7a01 	vldr	s15, [r7, #4]
 800321e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003270 <resisterMonitor+0xc8>
 8003222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <resisterMonitor+0xcc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800322e:	ee17 2a90 	vmov	r2, s15
 8003232:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003234:	2100      	movs	r1, #0
 8003236:	480f      	ldr	r0, [pc, #60]	; (8003274 <resisterMonitor+0xcc>)
 8003238:	f006 fd6c 	bl	8009d14 <HAL_TIM_PWM_Start>
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	f3af 8000 	nop.w
 8003248:	00000000 	.word	0x00000000
 800324c:	40affe00 	.word	0x40affe00
 8003250:	9999999a 	.word	0x9999999a
 8003254:	3fe99999 	.word	0x3fe99999
 8003258:	9999999a 	.word	0x9999999a
 800325c:	3fc99999 	.word	0x3fc99999
 8003260:	2000039c 	.word	0x2000039c
 8003264:	200002e0 	.word	0x200002e0
 8003268:	00100101 	.word	0x00100101
 800326c:	20000014 	.word	0x20000014
 8003270:	42c60000 	.word	0x42c60000
 8003274:	20000548 	.word	0x20000548

08003278 <resetPrevStopWatch>:
//State
bool initialStopWatchScreen = false;
bool isStopWatchRunning = false;


void resetPrevStopWatch(){
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
	prevStopWatchHour = -1;
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <resetPrevStopWatch+0x30>)
 800327e:	f04f 32ff 	mov.w	r2, #4294967295
 8003282:	601a      	str	r2, [r3, #0]
	prevStopWatchMinute = -1;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <resetPrevStopWatch+0x34>)
 8003286:	f04f 32ff 	mov.w	r2, #4294967295
 800328a:	601a      	str	r2, [r3, #0]
	prevStopWatchSecond = -1;
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <resetPrevStopWatch+0x38>)
 800328e:	f04f 32ff 	mov.w	r2, #4294967295
 8003292:	601a      	str	r2, [r3, #0]
	prevStopWatchMillisecond = -1;
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <resetPrevStopWatch+0x3c>)
 8003296:	f04f 32ff 	mov.w	r2, #4294967295
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	200000bc 	.word	0x200000bc
 80032ac:	200000c0 	.word	0x200000c0
 80032b0:	200000c4 	.word	0x200000c4
 80032b4:	200000c8 	.word	0x200000c8

080032b8 <resetStopWatch>:
void resetStopWatch(){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	stopWatchHour = 0;
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <resetStopWatch+0x24>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
	stopWatchMinute = 0;
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <resetStopWatch+0x28>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
	stopWatchSecond = 0;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <resetStopWatch+0x2c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
	stopWatchMillisecond = 0;
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <resetStopWatch+0x30>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
	resetPrevStopWatch();
 80032d4:	f7ff ffd0 	bl	8003278 <resetPrevStopWatch>
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000308 	.word	0x20000308
 80032e0:	2000030c 	.word	0x2000030c
 80032e4:	20000310 	.word	0x20000310
 80032e8:	20000314 	.word	0x20000314
 80032ec:	00000000 	.word	0x00000000

080032f0 <displayStopWatchScreen>:

void displayStopWatchScreen(){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af02      	add	r7, sp, #8
	if(stopWatchHour < 1){ // Normal StopWatch Mode
 80032f6:	4ba8      	ldr	r3, [pc, #672]	; (8003598 <displayStopWatchScreen+0x2a8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f300 80a8 	bgt.w	8003450 <displayStopWatchScreen+0x160>
		if(prevStopWatchMinute != stopWatchMinute){
 8003300:	4ba6      	ldr	r3, [pc, #664]	; (800359c <displayStopWatchScreen+0x2ac>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4ba6      	ldr	r3, [pc, #664]	; (80035a0 <displayStopWatchScreen+0x2b0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d02a      	beq.n	8003362 <displayStopWatchScreen+0x72>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 800330c:	4ba4      	ldr	r3, [pc, #656]	; (80035a0 <displayStopWatchScreen+0x2b0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	49a4      	ldr	r1, [pc, #656]	; (80035a4 <displayStopWatchScreen+0x2b4>)
 8003314:	48a4      	ldr	r0, [pc, #656]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 8003316:	f008 fff9 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800331a:	4ba4      	ldr	r3, [pc, #656]	; (80035ac <displayStopWatchScreen+0x2bc>)
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	4ba3      	ldr	r3, [pc, #652]	; (80035b0 <displayStopWatchScreen+0x2c0>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800332c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8003590 <displayStopWatchScreen+0x2a0>
 8003330:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003334:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003338:	ee37 7b06 	vadd.f64	d7, d7, d6
 800333c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003340:	edc7 7a01 	vstr	s15, [r7, #4]
 8003344:	793b      	ldrb	r3, [r7, #4]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	2300      	movs	r3, #0
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	2305      	movs	r3, #5
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003354:	4894      	ldr	r0, [pc, #592]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 8003356:	f002 fa97 	bl	8005888 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 800335a:	4b91      	ldr	r3, [pc, #580]	; (80035a0 <displayStopWatchScreen+0x2b0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a8f      	ldr	r2, [pc, #572]	; (800359c <displayStopWatchScreen+0x2ac>)
 8003360:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchSecond != stopWatchSecond){
 8003362:	4b94      	ldr	r3, [pc, #592]	; (80035b4 <displayStopWatchScreen+0x2c4>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b94      	ldr	r3, [pc, #592]	; (80035b8 <displayStopWatchScreen+0x2c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d02c      	beq.n	80033c8 <displayStopWatchScreen+0xd8>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 800336e:	4b92      	ldr	r3, [pc, #584]	; (80035b8 <displayStopWatchScreen+0x2c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	498b      	ldr	r1, [pc, #556]	; (80035a4 <displayStopWatchScreen+0x2b4>)
 8003376:	488c      	ldr	r0, [pc, #560]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 8003378:	f008 ffc8 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800337c:	4b8b      	ldr	r3, [pc, #556]	; (80035ac <displayStopWatchScreen+0x2bc>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3346      	adds	r3, #70	; 0x46
 8003384:	b2d9      	uxtb	r1, r3
 8003386:	4b8a      	ldr	r3, [pc, #552]	; (80035b0 <displayStopWatchScreen+0x2c0>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003392:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8003590 <displayStopWatchScreen+0x2a0>
 8003396:	ee27 7b06 	vmul.f64	d7, d7, d6
 800339a:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800339e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80033aa:	793b      	ldrb	r3, [r7, #4]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	2300      	movs	r3, #0
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	2305      	movs	r3, #5
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ba:	487b      	ldr	r0, [pc, #492]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 80033bc:	f002 fa64 	bl	8005888 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 80033c0:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <displayStopWatchScreen+0x2c8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7b      	ldr	r2, [pc, #492]	; (80035b4 <displayStopWatchScreen+0x2c4>)
 80033c6:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchMillisecond != stopWatchMillisecond){
 80033c8:	4b7c      	ldr	r3, [pc, #496]	; (80035bc <displayStopWatchScreen+0x2cc>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b7c      	ldr	r3, [pc, #496]	; (80035c0 <displayStopWatchScreen+0x2d0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f000 80d9 	beq.w	8003588 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)((stopWatchMillisecond/10)%100));
 80033d6:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <displayStopWatchScreen+0x2d0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <displayStopWatchScreen+0x2d4>)
 80033dc:	fb82 1203 	smull	r1, r2, r2, r3
 80033e0:	1092      	asrs	r2, r2, #2
 80033e2:	17db      	asrs	r3, r3, #31
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	4a78      	ldr	r2, [pc, #480]	; (80035c8 <displayStopWatchScreen+0x2d8>)
 80033e8:	fb82 1203 	smull	r1, r2, r2, r3
 80033ec:	1151      	asrs	r1, r2, #5
 80033ee:	17da      	asrs	r2, r3, #31
 80033f0:	1a8a      	subs	r2, r1, r2
 80033f2:	2164      	movs	r1, #100	; 0x64
 80033f4:	fb01 f202 	mul.w	r2, r1, r2
 80033f8:	1a9a      	subs	r2, r3, r2
 80033fa:	496a      	ldr	r1, [pc, #424]	; (80035a4 <displayStopWatchScreen+0x2b4>)
 80033fc:	486a      	ldr	r0, [pc, #424]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 80033fe:	f008 ff85 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <displayStopWatchScreen+0x2bc>)
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3b74      	subs	r3, #116	; 0x74
 800340a:	b2d9      	uxtb	r1, r3
 800340c:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <displayStopWatchScreen+0x2c0>)
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003418:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8003590 <displayStopWatchScreen+0x2a0>
 800341c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003420:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003424:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800342c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003430:	793b      	ldrb	r3, [r7, #4]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	2300      	movs	r3, #0
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2305      	movs	r3, #5
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003440:	4859      	ldr	r0, [pc, #356]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 8003442:	f002 fa21 	bl	8005888 <ILI9341_Draw_Text>
			prevStopWatchMillisecond = stopWatchMillisecond;
 8003446:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <displayStopWatchScreen+0x2d0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a5c      	ldr	r2, [pc, #368]	; (80035bc <displayStopWatchScreen+0x2cc>)
 800344c:	6013      	str	r3, [r2, #0]
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
			prevStopWatchSecond = stopWatchSecond;
		}
	}
}
 800344e:	e09b      	b.n	8003588 <displayStopWatchScreen+0x298>
	}else if (stopWatchHour >= 1){ // counting more than equal to 1 hour
 8003450:	4b51      	ldr	r3, [pc, #324]	; (8003598 <displayStopWatchScreen+0x2a8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f340 8097 	ble.w	8003588 <displayStopWatchScreen+0x298>
		if(prevStopWatchHour != stopWatchHour){
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <displayStopWatchScreen+0x2dc>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b4e      	ldr	r3, [pc, #312]	; (8003598 <displayStopWatchScreen+0x2a8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d02a      	beq.n	80034bc <displayStopWatchScreen+0x1cc>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchHour);
 8003466:	4b4c      	ldr	r3, [pc, #304]	; (8003598 <displayStopWatchScreen+0x2a8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	494d      	ldr	r1, [pc, #308]	; (80035a4 <displayStopWatchScreen+0x2b4>)
 800346e:	484e      	ldr	r0, [pc, #312]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 8003470:	f008 ff4c 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8003474:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <displayStopWatchScreen+0x2bc>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b2d9      	uxtb	r1, r3
 800347a:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <displayStopWatchScreen+0x2c0>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003486:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8003590 <displayStopWatchScreen+0x2a0>
 800348a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800348e:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003492:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003496:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800349a:	edc7 7a01 	vstr	s15, [r7, #4]
 800349e:	793b      	ldrb	r3, [r7, #4]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	2300      	movs	r3, #0
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2305      	movs	r3, #5
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ae:	483e      	ldr	r0, [pc, #248]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 80034b0:	f002 f9ea 	bl	8005888 <ILI9341_Draw_Text>
			prevStopWatchHour = stopWatchHour;
 80034b4:	4b38      	ldr	r3, [pc, #224]	; (8003598 <displayStopWatchScreen+0x2a8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a44      	ldr	r2, [pc, #272]	; (80035cc <displayStopWatchScreen+0x2dc>)
 80034ba:	6013      	str	r3, [r2, #0]
		if(prevStopWatchMinute != stopWatchMinute){
 80034bc:	4b37      	ldr	r3, [pc, #220]	; (800359c <displayStopWatchScreen+0x2ac>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <displayStopWatchScreen+0x2b0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d02c      	beq.n	8003522 <displayStopWatchScreen+0x232>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <displayStopWatchScreen+0x2b0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	4935      	ldr	r1, [pc, #212]	; (80035a4 <displayStopWatchScreen+0x2b4>)
 80034d0:	4835      	ldr	r0, [pc, #212]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 80034d2:	f008 ff1b 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80034d6:	4b35      	ldr	r3, [pc, #212]	; (80035ac <displayStopWatchScreen+0x2bc>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3346      	adds	r3, #70	; 0x46
 80034de:	b2d9      	uxtb	r1, r3
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <displayStopWatchScreen+0x2c0>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034ec:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8003590 <displayStopWatchScreen+0x2a0>
 80034f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034f4:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80034f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003500:	edc7 7a01 	vstr	s15, [r7, #4]
 8003504:	793b      	ldrb	r3, [r7, #4]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	2300      	movs	r3, #0
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2305      	movs	r3, #5
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003514:	4824      	ldr	r0, [pc, #144]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 8003516:	f002 f9b7 	bl	8005888 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <displayStopWatchScreen+0x2b0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1f      	ldr	r2, [pc, #124]	; (800359c <displayStopWatchScreen+0x2ac>)
 8003520:	6013      	str	r3, [r2, #0]
		if(prevStopWatchSecond != stopWatchSecond){
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <displayStopWatchScreen+0x2c4>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <displayStopWatchScreen+0x2c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d02c      	beq.n	8003588 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 800352e:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <displayStopWatchScreen+0x2c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	491b      	ldr	r1, [pc, #108]	; (80035a4 <displayStopWatchScreen+0x2b4>)
 8003536:	481c      	ldr	r0, [pc, #112]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 8003538:	f008 fee8 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <displayStopWatchScreen+0x2bc>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3b74      	subs	r3, #116	; 0x74
 8003544:	b2d9      	uxtb	r1, r3
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <displayStopWatchScreen+0x2c0>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003552:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003590 <displayStopWatchScreen+0x2a0>
 8003556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800355a:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800355e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003562:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003566:	edc7 7a01 	vstr	s15, [r7, #4]
 800356a:	793b      	ldrb	r3, [r7, #4]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	2300      	movs	r3, #0
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2305      	movs	r3, #5
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800357a:	480b      	ldr	r0, [pc, #44]	; (80035a8 <displayStopWatchScreen+0x2b8>)
 800357c:	f002 f984 	bl	8005888 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <displayStopWatchScreen+0x2c8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <displayStopWatchScreen+0x2c4>)
 8003586:	6013      	str	r3, [r2, #0]
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	66666666 	.word	0x66666666
 8003594:	3fd66666 	.word	0x3fd66666
 8003598:	20000308 	.word	0x20000308
 800359c:	200000c0 	.word	0x200000c0
 80035a0:	2000030c 	.word	0x2000030c
 80035a4:	0800e720 	.word	0x0800e720
 80035a8:	20000470 	.word	0x20000470
 80035ac:	20000054 	.word	0x20000054
 80035b0:	20000056 	.word	0x20000056
 80035b4:	200000c4 	.word	0x200000c4
 80035b8:	20000310 	.word	0x20000310
 80035bc:	200000c8 	.word	0x200000c8
 80035c0:	20000314 	.word	0x20000314
 80035c4:	66666667 	.word	0x66666667
 80035c8:	51eb851f 	.word	0x51eb851f
 80035cc:	200000bc 	.word	0x200000bc

080035d0 <stopWatchScreen>:

void stopWatchScreen(){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af02      	add	r7, sp, #8

	if(initialStopWatchScreen == false){
 80035d6:	4b66      	ldr	r3, [pc, #408]	; (8003770 <stopWatchScreen+0x1a0>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d075      	beq.n	80036d0 <stopWatchScreen+0x100>
		resetPrevStopWatch();
 80035e4:	f7ff fe48 	bl	8003278 <resetPrevStopWatch>
		//Statics
		displayAlarmIcon(alarmIsOn);
 80035e8:	4b62      	ldr	r3, [pc, #392]	; (8003774 <stopWatchScreen+0x1a4>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fb77 	bl	8001ce0 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Stopwatch");
 80035f2:	4961      	ldr	r1, [pc, #388]	; (8003778 <stopWatchScreen+0x1a8>)
 80035f4:	4861      	ldr	r0, [pc, #388]	; (800377c <stopWatchScreen+0x1ac>)
 80035f6:	f008 fe89 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 80035fa:	4b61      	ldr	r3, [pc, #388]	; (8003780 <stopWatchScreen+0x1b0>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b2d9      	uxtb	r1, r3
 8003600:	4b60      	ldr	r3, [pc, #384]	; (8003784 <stopWatchScreen+0x1b4>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800360c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8003760 <stopWatchScreen+0x190>
 8003610:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003614:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003618:	edc7 7a01 	vstr	s15, [r7, #4]
 800361c:	793b      	ldrb	r3, [r7, #4]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	2300      	movs	r3, #0
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	2302      	movs	r3, #2
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800362c:	4853      	ldr	r0, [pc, #332]	; (800377c <stopWatchScreen+0x1ac>)
 800362e:	f002 f92b 	bl	8005888 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, ":");
 8003632:	4955      	ldr	r1, [pc, #340]	; (8003788 <stopWatchScreen+0x1b8>)
 8003634:	4851      	ldr	r0, [pc, #324]	; (800377c <stopWatchScreen+0x1ac>)
 8003636:	f008 fe69 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+60, maxHeight * 0.37+16, WHITE, 4, BLACK);
 800363a:	4b51      	ldr	r3, [pc, #324]	; (8003780 <stopWatchScreen+0x1b0>)
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	333c      	adds	r3, #60	; 0x3c
 8003642:	b2d9      	uxtb	r1, r3
 8003644:	4b4f      	ldr	r3, [pc, #316]	; (8003784 <stopWatchScreen+0x1b4>)
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003650:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003768 <stopWatchScreen+0x198>
 8003654:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003658:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800365c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003660:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003664:	edc7 7a01 	vstr	s15, [r7, #4]
 8003668:	793b      	ldrb	r3, [r7, #4]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	2300      	movs	r3, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	2304      	movs	r3, #4
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003678:	4840      	ldr	r0, [pc, #256]	; (800377c <stopWatchScreen+0x1ac>)
 800367a:	f002 f905 	bl	8005888 <ILI9341_Draw_Text>
		sprintf(Temp_Buffer_text, ":");
 800367e:	4942      	ldr	r1, [pc, #264]	; (8003788 <stopWatchScreen+0x1b8>)
 8003680:	483e      	ldr	r0, [pc, #248]	; (800377c <stopWatchScreen+0x1ac>)
 8003682:	f008 fe43 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+130, maxHeight * 0.37+16, WHITE, 4, BLACK);
 8003686:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <stopWatchScreen+0x1b0>)
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3b7e      	subs	r3, #126	; 0x7e
 800368e:	b2d9      	uxtb	r1, r3
 8003690:	4b3c      	ldr	r3, [pc, #240]	; (8003784 <stopWatchScreen+0x1b4>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800369c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003768 <stopWatchScreen+0x198>
 80036a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036a4:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80036a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80036b4:	793b      	ldrb	r3, [r7, #4]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	2304      	movs	r3, #4
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036c4:	482d      	ldr	r0, [pc, #180]	; (800377c <stopWatchScreen+0x1ac>)
 80036c6:	f002 f8df 	bl	8005888 <ILI9341_Draw_Text>

		initialStopWatchScreen = true;
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <stopWatchScreen+0x1a0>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
	}

	//Time running
	if(isStopWatchRunning == true){
 80036d0:	4b2e      	ldr	r3, [pc, #184]	; (800378c <stopWatchScreen+0x1bc>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <stopWatchScreen+0x120>
		stopWatchMillisecond += millisecondStopWatch;
 80036d8:	4b2d      	ldr	r3, [pc, #180]	; (8003790 <stopWatchScreen+0x1c0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <stopWatchScreen+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <stopWatchScreen+0x1c0>)
 80036e8:	601a      	str	r2, [r3, #0]
		millisecondStopWatch = 0;
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <stopWatchScreen+0x1c4>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
	}

	//Normal Clock
	if (stopWatchMillisecond >= 1000){
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <stopWatchScreen+0x1c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f8:	db0a      	blt.n	8003710 <stopWatchScreen+0x140>
		stopWatchMillisecond = stopWatchMillisecond - 1000; //Keep remainder of millisecondStopWatch
 80036fa:	4b25      	ldr	r3, [pc, #148]	; (8003790 <stopWatchScreen+0x1c0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003702:	4a23      	ldr	r2, [pc, #140]	; (8003790 <stopWatchScreen+0x1c0>)
 8003704:	6013      	str	r3, [r2, #0]
		stopWatchSecond++;
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <stopWatchScreen+0x1c8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <stopWatchScreen+0x1c8>)
 800370e:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchSecond >= 60){
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <stopWatchScreen+0x1c8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b3b      	cmp	r3, #59	; 0x3b
 8003716:	dd07      	ble.n	8003728 <stopWatchScreen+0x158>
		stopWatchSecond = 0;
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <stopWatchScreen+0x1c8>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
		stopWatchMinute++;
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <stopWatchScreen+0x1cc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <stopWatchScreen+0x1cc>)
 8003726:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchMinute >= 60){
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <stopWatchScreen+0x1cc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b3b      	cmp	r3, #59	; 0x3b
 800372e:	dd07      	ble.n	8003740 <stopWatchScreen+0x170>
		stopWatchMinute = 0;
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <stopWatchScreen+0x1cc>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
		stopWatchHour++;
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <stopWatchScreen+0x1d0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <stopWatchScreen+0x1d0>)
 800373e:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchHour >= 99){
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <stopWatchScreen+0x1d0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b62      	cmp	r3, #98	; 0x62
 8003746:	dd02      	ble.n	800374e <stopWatchScreen+0x17e>
		stopWatchHour = 0;
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <stopWatchScreen+0x1d0>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
	}

	//Running
	displayStopWatchScreen();
 800374e:	f7ff fdcf 	bl	80032f0 <displayStopWatchScreen>

//	char hexString[30];
//	sprintf(hexString,"%d %d\r\n",prevStopWatchHour,stopWatchHour);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	f3af 8000 	nop.w
 8003760:	9999999a 	.word	0x9999999a
 8003764:	3fb99999 	.word	0x3fb99999
 8003768:	7ae147ae 	.word	0x7ae147ae
 800376c:	3fd7ae14 	.word	0x3fd7ae14
 8003770:	20000318 	.word	0x20000318
 8003774:	20000060 	.word	0x20000060
 8003778:	0800e7ec 	.word	0x0800e7ec
 800377c:	20000470 	.word	0x20000470
 8003780:	20000054 	.word	0x20000054
 8003784:	20000056 	.word	0x20000056
 8003788:	0800e73c 	.word	0x0800e73c
 800378c:	20000319 	.word	0x20000319
 8003790:	20000314 	.word	0x20000314
 8003794:	200002d8 	.word	0x200002d8
 8003798:	20000310 	.word	0x20000310
 800379c:	2000030c 	.word	0x2000030c
 80037a0:	20000308 	.word	0x20000308

080037a4 <resetPrevAlarm>:

//State
bool initialAlarmClockScreen = false;
bool initialEditAlarmClockScreen = false;

void resetPrevAlarm(){
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
	prevAlarmMinute = -1;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <resetPrevAlarm+0x20>)
 80037aa:	f04f 32ff 	mov.w	r2, #4294967295
 80037ae:	601a      	str	r2, [r3, #0]
	prevAlarmHour = -1;
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <resetPrevAlarm+0x24>)
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000030 	.word	0x20000030
 80037c8:	20000034 	.word	0x20000034
 80037cc:	00000000 	.word	0x00000000

080037d0 <hourAlarmScreen>:

void hourAlarmScreen(bool status, bool isEdit){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	4603      	mov	r3, r0
 80037d8:	460a      	mov	r2, r1
 80037da:	71fb      	strb	r3, [r7, #7]
 80037dc:	4613      	mov	r3, r2
 80037de:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmHour != alarmHour || isEdit == true){
 80037e0:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <hourAlarmScreen+0xd8>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <hourAlarmScreen+0xdc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d102      	bne.n	80037f2 <hourAlarmScreen+0x22>
 80037ec:	79bb      	ldrb	r3, [r7, #6]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d052      	beq.n	8003898 <hourAlarmScreen+0xc8>
		if (status == true){
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d027      	beq.n	8003848 <hourAlarmScreen+0x78>
			sprintf(Temp_Buffer_text, "%02d", (int)alarmHour);
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <hourAlarmScreen+0xdc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	492c      	ldr	r1, [pc, #176]	; (80038b0 <hourAlarmScreen+0xe0>)
 8003800:	482c      	ldr	r0, [pc, #176]	; (80038b4 <hourAlarmScreen+0xe4>)
 8003802:	f008 fd83 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <hourAlarmScreen+0xe8>)
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b2d9      	uxtb	r1, r3
 800380c:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <hourAlarmScreen+0xec>)
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003818:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80038a0 <hourAlarmScreen+0xd0>
 800381c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003820:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003824:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003828:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800382c:	edc7 7a00 	vstr	s15, [r7]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	2300      	movs	r3, #0
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2306      	movs	r3, #6
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003840:	481c      	ldr	r0, [pc, #112]	; (80038b4 <hourAlarmScreen+0xe4>)
 8003842:	f002 f821 	bl	8005888 <ILI9341_Draw_Text>
 8003846:	e023      	b.n	8003890 <hourAlarmScreen+0xc0>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003848:	491d      	ldr	r1, [pc, #116]	; (80038c0 <hourAlarmScreen+0xf0>)
 800384a:	481a      	ldr	r0, [pc, #104]	; (80038b4 <hourAlarmScreen+0xe4>)
 800384c:	f008 fd5e 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <hourAlarmScreen+0xe8>)
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b2d9      	uxtb	r1, r3
 8003856:	4b19      	ldr	r3, [pc, #100]	; (80038bc <hourAlarmScreen+0xec>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003862:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80038a0 <hourAlarmScreen+0xd0>
 8003866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800386a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800386e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003872:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003876:	edc7 7a00 	vstr	s15, [r7]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	2300      	movs	r3, #0
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	2306      	movs	r3, #6
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800388a:	480a      	ldr	r0, [pc, #40]	; (80038b4 <hourAlarmScreen+0xe4>)
 800388c:	f001 fffc 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevAlarmHour = alarmHour;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <hourAlarmScreen+0xdc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <hourAlarmScreen+0xd8>)
 8003896:	6013      	str	r3, [r2, #0]
	}
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	33333333 	.word	0x33333333
 80038a4:	3fd33333 	.word	0x3fd33333
 80038a8:	20000034 	.word	0x20000034
 80038ac:	200002d0 	.word	0x200002d0
 80038b0:	0800e720 	.word	0x0800e720
 80038b4:	20000470 	.word	0x20000470
 80038b8:	20000054 	.word	0x20000054
 80038bc:	20000056 	.word	0x20000056
 80038c0:	0800e728 	.word	0x0800e728
 80038c4:	00000000 	.word	0x00000000

080038c8 <minuteAlarmScreen>:

void minuteAlarmScreen(bool status, bool isEdit){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	4603      	mov	r3, r0
 80038d0:	460a      	mov	r2, r1
 80038d2:	71fb      	strb	r3, [r7, #7]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmMinute != alarmMinute || isEdit == true){
 80038d8:	4b33      	ldr	r3, [pc, #204]	; (80039a8 <minuteAlarmScreen+0xe0>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b33      	ldr	r3, [pc, #204]	; (80039ac <minuteAlarmScreen+0xe4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d102      	bne.n	80038ea <minuteAlarmScreen+0x22>
 80038e4:	79bb      	ldrb	r3, [r7, #6]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d056      	beq.n	8003998 <minuteAlarmScreen+0xd0>
		if (status == true){
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d029      	beq.n	8003944 <minuteAlarmScreen+0x7c>

			sprintf(Temp_Buffer_text, "%02d", (int)alarmMinute);
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <minuteAlarmScreen+0xe4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	492e      	ldr	r1, [pc, #184]	; (80039b0 <minuteAlarmScreen+0xe8>)
 80038f8:	482e      	ldr	r0, [pc, #184]	; (80039b4 <minuteAlarmScreen+0xec>)
 80038fa:	f008 fd07 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <minuteAlarmScreen+0xf0>)
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	336e      	adds	r3, #110	; 0x6e
 8003906:	b2d9      	uxtb	r1, r3
 8003908:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <minuteAlarmScreen+0xf4>)
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003914:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80039a0 <minuteAlarmScreen+0xd8>
 8003918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800391c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003920:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003924:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003928:	edc7 7a00 	vstr	s15, [r7]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	2300      	movs	r3, #0
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	2306      	movs	r3, #6
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800393c:	481d      	ldr	r0, [pc, #116]	; (80039b4 <minuteAlarmScreen+0xec>)
 800393e:	f001 ffa3 	bl	8005888 <ILI9341_Draw_Text>
 8003942:	e025      	b.n	8003990 <minuteAlarmScreen+0xc8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003944:	491e      	ldr	r1, [pc, #120]	; (80039c0 <minuteAlarmScreen+0xf8>)
 8003946:	481b      	ldr	r0, [pc, #108]	; (80039b4 <minuteAlarmScreen+0xec>)
 8003948:	f008 fce0 	bl	800c30c <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <minuteAlarmScreen+0xf0>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	336e      	adds	r3, #110	; 0x6e
 8003954:	b2d9      	uxtb	r1, r3
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <minuteAlarmScreen+0xf4>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003962:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80039a0 <minuteAlarmScreen+0xd8>
 8003966:	ee27 7b06 	vmul.f64	d7, d7, d6
 800396a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800396e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003972:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003976:	edc7 7a00 	vstr	s15, [r7]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	2306      	movs	r3, #6
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800398a:	480a      	ldr	r0, [pc, #40]	; (80039b4 <minuteAlarmScreen+0xec>)
 800398c:	f001 ff7c 	bl	8005888 <ILI9341_Draw_Text>
		}
		prevAlarmMinute = alarmMinute;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <minuteAlarmScreen+0xe4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <minuteAlarmScreen+0xe0>)
 8003996:	6013      	str	r3, [r2, #0]
	}
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	33333333 	.word	0x33333333
 80039a4:	3fd33333 	.word	0x3fd33333
 80039a8:	20000030 	.word	0x20000030
 80039ac:	200002cc 	.word	0x200002cc
 80039b0:	0800e720 	.word	0x0800e720
 80039b4:	20000470 	.word	0x20000470
 80039b8:	20000054 	.word	0x20000054
 80039bc:	20000056 	.word	0x20000056
 80039c0:	0800e728 	.word	0x0800e728
 80039c4:	00000000 	.word	0x00000000

080039c8 <colonAlarmScreen>:
void colonAlarmScreen(){
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af02      	add	r7, sp, #8
	sprintf(Temp_Buffer_text, ":");
 80039ce:	4918      	ldr	r1, [pc, #96]	; (8003a30 <colonAlarmScreen+0x68>)
 80039d0:	4818      	ldr	r0, [pc, #96]	; (8003a34 <colonAlarmScreen+0x6c>)
 80039d2:	f008 fc9b 	bl	800c30c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 80, maxHeight * 0.35 +10, WHITE, 4, BLACK);
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <colonAlarmScreen+0x70>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3350      	adds	r3, #80	; 0x50
 80039de:	b2d9      	uxtb	r1, r3
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <colonAlarmScreen+0x74>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80039ec:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003a28 <colonAlarmScreen+0x60>
 80039f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039f4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80039f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a00:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a04:	793b      	ldrb	r3, [r7, #4]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a14:	4807      	ldr	r0, [pc, #28]	; (8003a34 <colonAlarmScreen+0x6c>)
 8003a16:	f001 ff37 	bl	8005888 <ILI9341_Draw_Text>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	f3af 8000 	nop.w
 8003a28:	66666666 	.word	0x66666666
 8003a2c:	3fd66666 	.word	0x3fd66666
 8003a30:	0800e73c 	.word	0x0800e73c
 8003a34:	20000470 	.word	0x20000470
 8003a38:	20000054 	.word	0x20000054
 8003a3c:	20000056 	.word	0x20000056

08003a40 <alarmClockScreen>:

void alarmClockScreen(){
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af02      	add	r7, sp, #8
	if(initialAlarmClockScreen == false){
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <alarmClockScreen+0x90>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	f083 0301 	eor.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d033      	beq.n	8003abc <alarmClockScreen+0x7c>
		resetPrevAlarm();
 8003a54:	f7ff fea6 	bl	80037a4 <resetPrevAlarm>

		//Statics
		sprintf(Temp_Buffer_text, "Alarm");
 8003a58:	491e      	ldr	r1, [pc, #120]	; (8003ad4 <alarmClockScreen+0x94>)
 8003a5a:	481f      	ldr	r0, [pc, #124]	; (8003ad8 <alarmClockScreen+0x98>)
 8003a5c:	f008 fc56 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003a60:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <alarmClockScreen+0x9c>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b2d9      	uxtb	r1, r3
 8003a66:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <alarmClockScreen+0xa0>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a72:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8003ac8 <alarmClockScreen+0x88>
 8003a76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a82:	793b      	ldrb	r3, [r7, #4]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a92:	4811      	ldr	r0, [pc, #68]	; (8003ad8 <alarmClockScreen+0x98>)
 8003a94:	f001 fef8 	bl	8005888 <ILI9341_Draw_Text>

		displayAlarmIcon(alarmIsOn);
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <alarmClockScreen+0xa4>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe f91f 	bl	8001ce0 <displayAlarmIcon>

		colonAlarmScreen();
 8003aa2:	f7ff ff91 	bl	80039c8 <colonAlarmScreen>
		hourAlarmScreen(true,false);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f7ff fe91 	bl	80037d0 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f7ff ff09 	bl	80038c8 <minuteAlarmScreen>

		initialAlarmClockScreen = true;
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <alarmClockScreen+0x90>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
	}
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	f3af 8000 	nop.w
 8003ac8:	9999999a 	.word	0x9999999a
 8003acc:	3fb99999 	.word	0x3fb99999
 8003ad0:	2000031a 	.word	0x2000031a
 8003ad4:	0800e7f8 	.word	0x0800e7f8
 8003ad8:	20000470 	.word	0x20000470
 8003adc:	20000054 	.word	0x20000054
 8003ae0:	20000056 	.word	0x20000056
 8003ae4:	20000060 	.word	0x20000060

08003ae8 <editScreen>:

void editScreen(){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	if(modeEdit == 1){
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <editScreen+0x78>)
 8003aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <editScreen+0x14>
		editYearScreen();
 8003af6:	f7fe febd 	bl	8002874 <editYearScreen>
	}else if (modeEdit == 6){
		editMinuteScreen();
	}else if (modeEdit == 7){
		editSecondScreen();
	}
}
 8003afa:	e02e      	b.n	8003b5a <editScreen+0x72>
	}else if (modeEdit == 2){
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <editScreen+0x78>)
 8003afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d102      	bne.n	8003b0c <editScreen+0x24>
		editMonthScreen();
 8003b06:	f7fe fe93 	bl	8002830 <editMonthScreen>
}
 8003b0a:	e026      	b.n	8003b5a <editScreen+0x72>
	}else if (modeEdit == 3){
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <editScreen+0x78>)
 8003b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d102      	bne.n	8003b1c <editScreen+0x34>
		editDateScreen();
 8003b16:	f7fe fe69 	bl	80027ec <editDateScreen>
}
 8003b1a:	e01e      	b.n	8003b5a <editScreen+0x72>
	}else if (modeEdit == 4){
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <editScreen+0x78>)
 8003b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d102      	bne.n	8003b2c <editScreen+0x44>
		editDayScreen();
 8003b26:	f7fe fe3f 	bl	80027a8 <editDayScreen>
}
 8003b2a:	e016      	b.n	8003b5a <editScreen+0x72>
	}else if (modeEdit == 5){
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <editScreen+0x78>)
 8003b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d102      	bne.n	8003b3c <editScreen+0x54>
		editHourScreen();
 8003b36:	f7fe fdcf 	bl	80026d8 <editHourScreen>
}
 8003b3a:	e00e      	b.n	8003b5a <editScreen+0x72>
	}else if (modeEdit == 6){
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <editScreen+0x78>)
 8003b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d102      	bne.n	8003b4c <editScreen+0x64>
		editMinuteScreen();
 8003b46:	f7fe fdeb 	bl	8002720 <editMinuteScreen>
}
 8003b4a:	e006      	b.n	8003b5a <editScreen+0x72>
	}else if (modeEdit == 7){
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <editScreen+0x78>)
 8003b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b52:	2b07      	cmp	r3, #7
 8003b54:	d101      	bne.n	8003b5a <editScreen+0x72>
		editSecondScreen();
 8003b56:	f7fe fe05 	bl	8002764 <editSecondScreen>
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	2000005a 	.word	0x2000005a

08003b64 <editAlarmHourScreen>:
void editAlarmHourScreen(){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0

	minuteAlarmScreen(true,false);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7ff feac 	bl	80038c8 <minuteAlarmScreen>

	if (halfsecondState == false){ // Hour
 8003b70:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <editAlarmHourScreen+0x30>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <editAlarmHourScreen+0x24>
		hourAlarmScreen(false, true);
 8003b7e:	2101      	movs	r1, #1
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7ff fe25 	bl	80037d0 <hourAlarmScreen>
	}
	else{
		hourAlarmScreen(true, true);
	}
}
 8003b86:	e003      	b.n	8003b90 <editAlarmHourScreen+0x2c>
		hourAlarmScreen(true, true);
 8003b88:	2101      	movs	r1, #1
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f7ff fe20 	bl	80037d0 <hourAlarmScreen>
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000050 	.word	0x20000050

08003b98 <editAlarmMinuteScreen>:

void editAlarmMinuteScreen(){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	hourAlarmScreen(true,false);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7ff fe16 	bl	80037d0 <hourAlarmScreen>

	if (halfsecondState == false){ // Minute
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <editAlarmMinuteScreen+0x30>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <editAlarmMinuteScreen+0x24>
		minuteAlarmScreen(false, true);
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f7ff fe87 	bl	80038c8 <minuteAlarmScreen>
	}
	else{
		minuteAlarmScreen(true, true);
	}
}
 8003bba:	e003      	b.n	8003bc4 <editAlarmMinuteScreen+0x2c>
		minuteAlarmScreen(true, true);
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f7ff fe82 	bl	80038c8 <minuteAlarmScreen>
}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000050 	.word	0x20000050
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <editAlarmScreen>:
void editAlarmScreen(){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af02      	add	r7, sp, #8
	if(initialEditAlarmClockScreen == false){
 8003bd6:	4b38      	ldr	r3, [pc, #224]	; (8003cb8 <editAlarmScreen+0xe8>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	f083 0301 	eor.w	r3, r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d031      	beq.n	8003c48 <editAlarmScreen+0x78>
		resetPrevAlarm();
 8003be4:	f7ff fdde 	bl	80037a4 <resetPrevAlarm>
		displayAlarmIcon(alarmIsOn);
 8003be8:	4b34      	ldr	r3, [pc, #208]	; (8003cbc <editAlarmScreen+0xec>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe f877 	bl	8001ce0 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Alarm");
 8003bf2:	4933      	ldr	r1, [pc, #204]	; (8003cc0 <editAlarmScreen+0xf0>)
 8003bf4:	4833      	ldr	r0, [pc, #204]	; (8003cc4 <editAlarmScreen+0xf4>)
 8003bf6:	f008 fb89 	bl	800c30c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003bfa:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <editAlarmScreen+0xf8>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b2d9      	uxtb	r1, r3
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <editAlarmScreen+0xfc>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c0c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8003cb0 <editAlarmScreen+0xe0>
 8003c10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c18:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c1c:	793b      	ldrb	r3, [r7, #4]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	2300      	movs	r3, #0
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	2302      	movs	r3, #2
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c2c:	4825      	ldr	r0, [pc, #148]	; (8003cc4 <editAlarmScreen+0xf4>)
 8003c2e:	f001 fe2b 	bl	8005888 <ILI9341_Draw_Text>

		hourAlarmScreen(true,false);
 8003c32:	2100      	movs	r1, #0
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7ff fdcb 	bl	80037d0 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f7ff fe43 	bl	80038c8 <minuteAlarmScreen>

		initialEditAlarmClockScreen = true;
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <editAlarmScreen+0xe8>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
	}

	//Algorithm Calculation
	if (alarmMinute >= 60){
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <editAlarmScreen+0x100>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b3b      	cmp	r3, #59	; 0x3b
 8003c4e:	dd03      	ble.n	8003c58 <editAlarmScreen+0x88>
		alarmMinute = 0;
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <editAlarmScreen+0x100>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e006      	b.n	8003c66 <editAlarmScreen+0x96>
	}
	else if(alarmMinute < 0){
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <editAlarmScreen+0x100>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	da02      	bge.n	8003c66 <editAlarmScreen+0x96>
		alarmMinute = 59;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <editAlarmScreen+0x100>)
 8003c62:	223b      	movs	r2, #59	; 0x3b
 8003c64:	601a      	str	r2, [r3, #0]
	}
	if (alarmHour >= 24){
 8003c66:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <editAlarmScreen+0x104>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b17      	cmp	r3, #23
 8003c6c:	dd03      	ble.n	8003c76 <editAlarmScreen+0xa6>
		alarmHour = 0;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <editAlarmScreen+0x104>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e006      	b.n	8003c84 <editAlarmScreen+0xb4>
	}
	else if(alarmHour < 0){
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <editAlarmScreen+0x104>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da02      	bge.n	8003c84 <editAlarmScreen+0xb4>
		alarmHour = 23;
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <editAlarmScreen+0x104>)
 8003c80:	2217      	movs	r2, #23
 8003c82:	601a      	str	r2, [r3, #0]
	}

	if(modeEdit == 1){
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <editAlarmScreen+0x108>)
 8003c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <editAlarmScreen+0xc4>
		editAlarmHourScreen();
 8003c8e:	f7ff ff69 	bl	8003b64 <editAlarmHourScreen>
	}else if (modeEdit == 2){
		editAlarmMinuteScreen();
	}
}
 8003c92:	e006      	b.n	8003ca2 <editAlarmScreen+0xd2>
	}else if (modeEdit == 2){
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <editAlarmScreen+0x108>)
 8003c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d101      	bne.n	8003ca2 <editAlarmScreen+0xd2>
		editAlarmMinuteScreen();
 8003c9e:	f7ff ff7b 	bl	8003b98 <editAlarmMinuteScreen>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	f3af 8000 	nop.w
 8003cb0:	9999999a 	.word	0x9999999a
 8003cb4:	3fb99999 	.word	0x3fb99999
 8003cb8:	2000031b 	.word	0x2000031b
 8003cbc:	20000060 	.word	0x20000060
 8003cc0:	0800e7f8 	.word	0x0800e7f8
 8003cc4:	20000470 	.word	0x20000470
 8003cc8:	20000054 	.word	0x20000054
 8003ccc:	20000056 	.word	0x20000056
 8003cd0:	200002cc 	.word	0x200002cc
 8003cd4:	200002d0 	.word	0x200002d0
 8003cd8:	2000005a 	.word	0x2000005a

08003cdc <tempMonitor>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void tempMonitor(){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af02      	add	r7, sp, #8
	//Temperature
	cmdBuffer[0] = 0x03;
 8003ce2:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <tempMonitor+0x108>)
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <tempMonitor+0x108>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003cee:	4b3d      	ldr	r3, [pc, #244]	; (8003de4 <tempMonitor+0x108>)
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	709a      	strb	r2, [r3, #2]

	//HAL_Delay(5000); //>3000 ms
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003cf4:	23c8      	movs	r3, #200	; 0xc8
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <tempMonitor+0x108>)
 8003cfc:	21b8      	movs	r1, #184	; 0xb8
 8003cfe:	483a      	ldr	r0, [pc, #232]	; (8003de8 <tempMonitor+0x10c>)
 8003d00:	f003 fac2 	bl	8007288 <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003d04:	23c8      	movs	r3, #200	; 0xc8
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2303      	movs	r3, #3
 8003d0a:	4a36      	ldr	r2, [pc, #216]	; (8003de4 <tempMonitor+0x108>)
 8003d0c:	21b8      	movs	r1, #184	; 0xb8
 8003d0e:	4836      	ldr	r0, [pc, #216]	; (8003de8 <tempMonitor+0x10c>)
 8003d10:	f003 faba 	bl	8007288 <HAL_I2C_Master_Transmit>

	HAL_Delay(80); // 50 is too low, 80 is okay
 8003d14:	2050      	movs	r0, #80	; 0x50
 8003d16:	f002 fb0d 	bl	8006334 <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8003d1a:	23c8      	movs	r3, #200	; 0xc8
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2308      	movs	r3, #8
 8003d20:	4a32      	ldr	r2, [pc, #200]	; (8003dec <tempMonitor+0x110>)
 8003d22:	21b8      	movs	r1, #184	; 0xb8
 8003d24:	4830      	ldr	r0, [pc, #192]	; (8003de8 <tempMonitor+0x10c>)
 8003d26:	f003 fba3 	bl	8007470 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 8003d2a:	4b30      	ldr	r3, [pc, #192]	; (8003dec <tempMonitor+0x110>)
 8003d2c:	79db      	ldrb	r3, [r3, #7]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <tempMonitor+0x110>)
 8003d36:	799b      	ldrb	r3, [r3, #6]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8003d40:	2106      	movs	r1, #6
 8003d42:	482a      	ldr	r0, [pc, #168]	; (8003dec <tempMonitor+0x110>)
 8003d44:	f000 fe16 	bl	8004974 <CRC16_2>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d143      	bne.n	8003dda <tempMonitor+0xfe>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <tempMonitor+0x110>)
 8003d54:	791b      	ldrb	r3, [r3, #4]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	4b22      	ldr	r3, [pc, #136]	; (8003dec <tempMonitor+0x110>)
 8003d62:	795b      	ldrb	r3, [r3, #5]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 8003d6a:	88bb      	ldrh	r3, [r7, #4]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d74:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003d78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003d7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <tempMonitor+0x114>)
 8003d82:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 8003d86:	4b19      	ldr	r3, [pc, #100]	; (8003dec <tempMonitor+0x110>)
 8003d88:	791b      	ldrb	r3, [r3, #4]
 8003d8a:	09db      	lsrs	r3, r3, #7
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <tempMonitor+0xc2>
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <tempMonitor+0x114>)
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	eef1 7a67 	vneg.f32	s15, s15
 8003d9c:	e002      	b.n	8003da4 <tempMonitor+0xc8>
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <tempMonitor+0x114>)
 8003da0:	edd3 7a00 	vldr	s15, [r3]
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <tempMonitor+0x114>)
 8003da6:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <tempMonitor+0x110>)
 8003dac:	789b      	ldrb	r3, [r3, #2]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <tempMonitor+0x110>)
 8003db6:	78db      	ldrb	r3, [r3, #3]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	ee07 3a90 	vmov	s15, r3
 8003dc4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003dc8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003dcc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003dd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <tempMonitor+0x118>)
 8003dd6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000430 	.word	0x20000430
 8003de8:	200003e4 	.word	0x200003e4
 8003dec:	20000434 	.word	0x20000434
 8003df0:	20000018 	.word	0x20000018
 8003df4:	2000001c 	.word	0x2000001c

08003df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003e00:	f7fc ffde 	bl	8000dc0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003e04:	f7fd f802 	bl	8000e0c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e08:	f002 fa28 	bl	800625c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e0c:	f000 fd14 	bl	8004838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e10:	f7fc fe08 	bl	8000a24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003e14:	f001 fa24 	bl	8005260 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8003e18:	f000 fe46 	bl	8004aa8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003e1c:	f001 f81a 	bl	8004e54 <MX_TIM1_Init>
  MX_RNG_Init();
 8003e20:	f000 fe0e 	bl	8004a40 <MX_RNG_Init>
  MX_I2C1_Init();
 8003e24:	f7fc ff48 	bl	8000cb8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003e28:	f001 f868 	bl	8004efc <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e2c:	f001 f8b4 	bl	8004f98 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003e30:	f001 f9e6 	bl	8005200 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8003e34:	f001 f9b4 	bl	80051a0 <MX_UART4_Init>
  MX_ADC1_Init();
 8003e38:	f7fc fd62 	bl	8000900 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	//Temp but not has code in here yet
	cmdBuffer[0] = 0x03;
 8003e3c:	4b57      	ldr	r3, [pc, #348]	; (8003f9c <main+0x1a4>)
 8003e3e:	2203      	movs	r2, #3
 8003e40:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <main+0x1a4>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003e48:	4b54      	ldr	r3, [pc, #336]	; (8003f9c <main+0x1a4>)
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	709a      	strb	r2, [r3, #2]

	//initial driver setup to drive ili9341
	ILI9341_Init();
 8003e4e:	f001 fe79 	bl	8005b44 <ILI9341_Init>

	//Interrupt millisecond
	HAL_TIM_Base_Start_IT(&htim1);
 8003e52:	4853      	ldr	r0, [pc, #332]	; (8003fa0 <main+0x1a8>)
 8003e54:	f005 fe84 	bl	8009b60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8003e58:	4852      	ldr	r0, [pc, #328]	; (8003fa4 <main+0x1ac>)
 8003e5a:	f005 fe81 	bl	8009b60 <HAL_TIM_Base_Start_IT>

	//Reset Screen
	setHorizontalScreen(BLACK);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7fd fb06 	bl	8001470 <setHorizontalScreen>

	//Read EEPROM First Time
	readData();
 8003e64:	f7fd fa2a 	bl	80012bc <readData>

	//ADC Input variable Resister(Light)
	HAL_ADC_Start(&hadc1);
 8003e68:	484f      	ldr	r0, [pc, #316]	; (8003fa8 <main+0x1b0>)
 8003e6a:	f002 facb 	bl	8006404 <HAL_ADC_Start>

	// Setup PM Sensor
	uint8_t* respondStart;
	respondStart = wake_sensirion();
 8003e6e:	f7fd f841 	bl	8000ef4 <wake_sensirion>
 8003e72:	60f8      	str	r0, [r7, #12]
	sent_string_to_mcu("STA");
 8003e74:	484d      	ldr	r0, [pc, #308]	; (8003fac <main+0x1b4>)
 8003e76:	f7fd f969 	bl	800114c <sent_string_to_mcu>

		// REAL CODE BEGIN



		calculationClock();
 8003e7a:	f7fd fbbb 	bl	80015f4 <calculationClock>
		checkResetData();
 8003e7e:	f7fd fae7 	bl	8001450 <checkResetData>
		resisterMonitor(); //light screen
 8003e82:	f7ff f991 	bl	80031a8 <resisterMonitor>

		if (prevMode != mode || prevModeEdit != modeEdit){
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <main+0x1b8>)
 8003e88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e8c:	4b49      	ldr	r3, [pc, #292]	; (8003fb4 <main+0x1bc>)
 8003e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d107      	bne.n	8003ea6 <main+0xae>
 8003e96:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <main+0x1c0>)
 8003e98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e9c:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <main+0x1c4>)
 8003e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d008      	beq.n	8003eb8 <main+0xc0>
			prevModeEdit = modeEdit;
 8003ea6:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <main+0x1c4>)
 8003ea8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <main+0x1c0>)
 8003eae:	801a      	strh	r2, [r3, #0]
			resetPrevNum();
 8003eb0:	f7fe f99e 	bl	80021f0 <resetPrevNum>
			resetPrevAlarm();
 8003eb4:	f7ff fc76 	bl	80037a4 <resetPrevAlarm>
		}
		// When Change Mode
		if (prevMode != mode){
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <main+0x1b8>)
 8003eba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ebe:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <main+0x1bc>)
 8003ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d012      	beq.n	8003eee <main+0xf6>
			prevMode = mode;
 8003ec8:	4b3a      	ldr	r3, [pc, #232]	; (8003fb4 <main+0x1bc>)
 8003eca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <main+0x1b8>)
 8003ed0:	801a      	strh	r2, [r3, #0]
			setHorizontalScreen(BLACK);
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fd facc 	bl	8001470 <setHorizontalScreen>
			bottomBarScreen();
 8003ed8:	f7fe fcf2 	bl	80028c0 <bottomBarScreen>

			//For Mode 1 StopWatch
			initialStopWatchScreen = false;
 8003edc:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <main+0x1c8>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
			//For Mode 2 Alarm
			initialAlarmClockScreen = false;
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <main+0x1cc>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
			//For mode 200 Edit Alarm
			initialEditAlarmClockScreen = false;
 8003ee8:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <main+0x1d0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 0){
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <main+0x1bc>)
 8003ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d121      	bne.n	8003f3c <main+0x144>
			if (halfsecond == 1){	// render every 500 ms
 8003ef8:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <main+0x1d4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 8088 	bne.w	8004012 <main+0x21a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8003f02:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <main+0x1d8>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f083 0301 	eor.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <main+0x1d8>)
 8003f1e:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <main+0x1d4>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

				tempMonitor(); // read every 500 ms
 8003f26:	f7ff fed9 	bl	8003cdc <tempMonitor>
				notifyPm(); // read every 500 ms
 8003f2a:	f7ff f833 	bl	8002f94 <notifyPm>

				topBarScreen();
 8003f2e:	f7fe f951 	bl	80021d4 <topBarScreen>
				displayClockScreen();
 8003f32:	f7fe fb9d 	bl	8002670 <displayClockScreen>
				bottomBarScreenUpdate();
 8003f36:	f7fe fe3f 	bl	8002bb8 <bottomBarScreenUpdate>
 8003f3a:	e06a      	b.n	8004012 <main+0x21a>
			}
		}else if(mode == 1){	// No Notify Line at this mode because has delay
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <main+0x1bc>)
 8003f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d102      	bne.n	8003f4c <main+0x154>
			stopWatchScreen();
 8003f46:	f7ff fb43 	bl	80035d0 <stopWatchScreen>
 8003f4a:	e062      	b.n	8004012 <main+0x21a>
		}else if(mode == 2){
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <main+0x1bc>)
 8003f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d102      	bne.n	8003f5c <main+0x164>
			alarmClockScreen();
 8003f56:	f7ff fd73 	bl	8003a40 <alarmClockScreen>
 8003f5a:	e05a      	b.n	8004012 <main+0x21a>
		}else if (mode == 100){ // Adjust modeEdit 1-year, 2-month, 3-date, 4-day, 5-hour, 6-minute, 7-second
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <main+0x1bc>)
 8003f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d136      	bne.n	8003fd4 <main+0x1dc>

			if(halfsecond == 1){ // render every 500 ms
 8003f66:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <main+0x1d4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d151      	bne.n	8004012 <main+0x21a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <main+0x1d8>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f083 0301 	eor.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <main+0x1d8>)
 8003f8a:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <main+0x1d4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 8003f92:	f7fe ffff 	bl	8002f94 <notifyPm>
				editScreen();
 8003f96:	f7ff fda7 	bl	8003ae8 <editScreen>
 8003f9a:	e03a      	b.n	8004012 <main+0x21a>
 8003f9c:	20000430 	.word	0x20000430
 8003fa0:	20000594 	.word	0x20000594
 8003fa4:	200005e0 	.word	0x200005e0
 8003fa8:	2000039c 	.word	0x2000039c
 8003fac:	0800e800 	.word	0x0800e800
 8003fb0:	2000005c 	.word	0x2000005c
 8003fb4:	200002e4 	.word	0x200002e4
 8003fb8:	2000005e 	.word	0x2000005e
 8003fbc:	2000005a 	.word	0x2000005a
 8003fc0:	20000318 	.word	0x20000318
 8003fc4:	2000031a 	.word	0x2000031a
 8003fc8:	2000031b 	.word	0x2000031b
 8003fcc:	200002dc 	.word	0x200002dc
 8003fd0:	20000050 	.word	0x20000050
			}
		}else if (mode == 200){
 8003fd4:	4b80      	ldr	r3, [pc, #512]	; (80041d8 <main+0x3e0>)
 8003fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fda:	2bc8      	cmp	r3, #200	; 0xc8
 8003fdc:	d119      	bne.n	8004012 <main+0x21a>
			if(halfsecond == 1){ // render every 500 ms
 8003fde:	4b7f      	ldr	r3, [pc, #508]	; (80041dc <main+0x3e4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d115      	bne.n	8004012 <main+0x21a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8003fe6:	4b7e      	ldr	r3, [pc, #504]	; (80041e0 <main+0x3e8>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f083 0301 	eor.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b77      	ldr	r3, [pc, #476]	; (80041e0 <main+0x3e8>)
 8004002:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8004004:	4b75      	ldr	r3, [pc, #468]	; (80041dc <main+0x3e4>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 800400a:	f7fe ffc3 	bl	8002f94 <notifyPm>
				editAlarmScreen();
 800400e:	f7ff fddf 	bl	8003bd0 <editAlarmScreen>
			}
		}


		pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	4873      	ldr	r0, [pc, #460]	; (80041e4 <main+0x3ec>)
 8004016:	f003 f85d 	bl	80070d4 <HAL_GPIO_ReadPin>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b70      	ldr	r3, [pc, #448]	; (80041e8 <main+0x3f0>)
 8004028:	701a      	strb	r2, [r3, #0]
		pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 800402a:	2140      	movs	r1, #64	; 0x40
 800402c:	486d      	ldr	r0, [pc, #436]	; (80041e4 <main+0x3ec>)
 800402e:	f003 f851 	bl	80070d4 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b6b      	ldr	r3, [pc, #428]	; (80041ec <main+0x3f4>)
 8004040:	701a      	strb	r2, [r3, #0]
		pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8004042:	2120      	movs	r1, #32
 8004044:	4867      	ldr	r0, [pc, #412]	; (80041e4 <main+0x3ec>)
 8004046:	f003 f845 	bl	80070d4 <HAL_GPIO_ReadPin>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4b66      	ldr	r3, [pc, #408]	; (80041f0 <main+0x3f8>)
 8004058:	701a      	strb	r2, [r3, #0]
		pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 800405a:	2110      	movs	r1, #16
 800405c:	4861      	ldr	r0, [pc, #388]	; (80041e4 <main+0x3ec>)
 800405e:	f003 f839 	bl	80070d4 <HAL_GPIO_ReadPin>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2da      	uxtb	r2, r3
 800406e:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <main+0x3fc>)
 8004070:	701a      	strb	r2, [r3, #0]
//		pressButton2 = 0;
//		pressButton3 = 0;
//		pressButton4 = 0;

		//Buzzer
		if ((pressButton1 == true && isPressButton1 == false) ||
 8004072:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <main+0x3f0>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d006      	beq.n	8004088 <main+0x290>
 800407a:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <main+0x400>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	f083 0301 	eor.w	r3, r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d120      	bne.n	80040ca <main+0x2d2>
			(pressButton2 == true && isPressButton2 == false) ||
 8004088:	4b58      	ldr	r3, [pc, #352]	; (80041ec <main+0x3f4>)
 800408a:	781b      	ldrb	r3, [r3, #0]
		if ((pressButton1 == true && isPressButton1 == false) ||
 800408c:	2b00      	cmp	r3, #0
 800408e:	d006      	beq.n	800409e <main+0x2a6>
			(pressButton2 == true && isPressButton2 == false) ||
 8004090:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <main+0x404>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	f083 0301 	eor.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <main+0x2d2>
			(pressButton3 == true && isPressButton3 == false) ||
 800409e:	4b54      	ldr	r3, [pc, #336]	; (80041f0 <main+0x3f8>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
			(pressButton2 == true && isPressButton2 == false) ||
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d006      	beq.n	80040b4 <main+0x2bc>
			(pressButton3 == true && isPressButton3 == false) ||
 80040a6:	4b56      	ldr	r3, [pc, #344]	; (8004200 <main+0x408>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	f083 0301 	eor.w	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <main+0x2d2>
			(pressButton4 == true && isPressButton4 == false)){
 80040b4:	4b4f      	ldr	r3, [pc, #316]	; (80041f4 <main+0x3fc>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
			(pressButton3 == true && isPressButton3 == false) ||
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <main+0x2d8>
			(pressButton4 == true && isPressButton4 == false)){
 80040bc:	4b51      	ldr	r3, [pc, #324]	; (8004204 <main+0x40c>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	f083 0301 	eor.w	r3, r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <main+0x2d8>
			buzzerSound(70);
 80040ca:	2046      	movs	r0, #70	; 0x46
 80040cc:	f7fe ff48 	bl	8002f60 <buzzerSound>
		}

		//General Mode
		if (pressButton1 == true && isPressButton1 == false && !(mode == 100 || mode == 200)){ // increase mode only once
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <main+0x3f0>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d024      	beq.n	8004122 <main+0x32a>
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <main+0x400>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f083 0301 	eor.w	r3, r3, #1
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01d      	beq.n	8004122 <main+0x32a>
 80040e6:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <main+0x3e0>)
 80040e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ec:	2b64      	cmp	r3, #100	; 0x64
 80040ee:	d018      	beq.n	8004122 <main+0x32a>
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <main+0x3e0>)
 80040f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f6:	2bc8      	cmp	r3, #200	; 0xc8
 80040f8:	d013      	beq.n	8004122 <main+0x32a>
			mode++;
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <main+0x3e0>)
 80040fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004100:	b29b      	uxth	r3, r3
 8004102:	3301      	adds	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	b21a      	sxth	r2, r3
 8004108:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <main+0x3e0>)
 800410a:	801a      	strh	r2, [r3, #0]
			if(mode == 3){
 800410c:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <main+0x3e0>)
 800410e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d102      	bne.n	800411c <main+0x324>
				mode = 0;
 8004116:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <main+0x3e0>)
 8004118:	2200      	movs	r2, #0
 800411a:	801a      	strh	r2, [r3, #0]
			}
			isPressButton1 = true;
 800411c:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <main+0x400>)
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
		}
		//StopWatch Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 1 && isStopWatchRunning != true){ //Reset StopWatch
 8004122:	4b32      	ldr	r3, [pc, #200]	; (80041ec <main+0x3f4>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d017      	beq.n	800415a <main+0x362>
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <main+0x404>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f083 0301 	eor.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <main+0x362>
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <main+0x3e0>)
 800413a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d10b      	bne.n	800415a <main+0x362>
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <main+0x410>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	f083 0301 	eor.w	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <main+0x362>
			isPressButton2 = true;
 8004150:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <main+0x404>)
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
			resetStopWatch();
 8004156:	f7ff f8af 	bl	80032b8 <resetStopWatch>
		}
		if (pressButton3 == true && isPressButton3 == false && mode == 1){ //Running/Stop StopWatch
 800415a:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <main+0x3f8>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01f      	beq.n	80041a2 <main+0x3aa>
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <main+0x408>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	f083 0301 	eor.w	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d018      	beq.n	80041a2 <main+0x3aa>
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <main+0x3e0>)
 8004172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d113      	bne.n	80041a2 <main+0x3aa>
			isPressButton3 = true;
 800417a:	4b21      	ldr	r3, [pc, #132]	; (8004200 <main+0x408>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
			if(isStopWatchRunning == false){ // press button
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <main+0x410>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	f083 0301 	eor.w	r3, r3, #1
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <main+0x3a4>
				millisecondStopWatch = 0;
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <main+0x414>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
				isStopWatchRunning = true;
 8004194:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <main+0x410>)
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e002      	b.n	80041a2 <main+0x3aa>
			}else{
				isStopWatchRunning = false;
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <main+0x410>)
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
			}
		}

		//Adjust Time Mode For Mode 0 and 100
		if (pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <main+0x3f4>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d036      	beq.n	8004218 <main+0x420>
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <main+0x404>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	f083 0301 	eor.w	r3, r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02f      	beq.n	8004218 <main+0x420>
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <main+0x3e0>)
 80041ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d12a      	bne.n	8004218 <main+0x420>
			isPressButton2 = true;
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <main+0x404>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <main+0x418>)
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	4911      	ldr	r1, [pc, #68]	; (8004214 <main+0x41c>)
 80041d0:	e9c1 2300 	strd	r2, r3, [r1]
 80041d4:	e04d      	b.n	8004272 <main+0x47a>
 80041d6:	bf00      	nop
 80041d8:	200002e4 	.word	0x200002e4
 80041dc:	200002dc 	.word	0x200002dc
 80041e0:	20000050 	.word	0x20000050
 80041e4:	40020c00 	.word	0x40020c00
 80041e8:	200002e6 	.word	0x200002e6
 80041ec:	200002e7 	.word	0x200002e7
 80041f0:	200002e8 	.word	0x200002e8
 80041f4:	200002e9 	.word	0x200002e9
 80041f8:	200002ea 	.word	0x200002ea
 80041fc:	200002eb 	.word	0x200002eb
 8004200:	200002ec 	.word	0x200002ec
 8004204:	200002ed 	.word	0x200002ed
 8004208:	20000319 	.word	0x20000319
 800420c:	200002d8 	.word	0x200002d8
 8004210:	200002f8 	.word	0x200002f8
 8004214:	200002f0 	.word	0x200002f0
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 8004218:	4ba8      	ldr	r3, [pc, #672]	; (80044bc <main+0x6c4>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d028      	beq.n	8004272 <main+0x47a>
 8004220:	4ba7      	ldr	r3, [pc, #668]	; (80044c0 <main+0x6c8>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d024      	beq.n	8004272 <main+0x47a>
 8004228:	4ba6      	ldr	r3, [pc, #664]	; (80044c4 <main+0x6cc>)
 800422a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11f      	bne.n	8004272 <main+0x47a>
 8004232:	4ba5      	ldr	r3, [pc, #660]	; (80044c8 <main+0x6d0>)
 8004234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004238:	4ba4      	ldr	r3, [pc, #656]	; (80044cc <main+0x6d4>)
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	1a84      	subs	r4, r0, r2
 8004240:	eb61 0503 	sbc.w	r5, r1, r3
 8004244:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	42ab      	cmp	r3, r5
 800424e:	bf08      	it	eq
 8004250:	42a2      	cmpeq	r2, r4
 8004252:	d20e      	bcs.n	8004272 <main+0x47a>
			buzzerSound(70);
 8004254:	2046      	movs	r0, #70	; 0x46
 8004256:	f7fe fe83 	bl	8002f60 <buzzerSound>
			modeEdit = 1; // Reset to Year First time
 800425a:	4b9d      	ldr	r3, [pc, #628]	; (80044d0 <main+0x6d8>)
 800425c:	2201      	movs	r2, #1
 800425e:	801a      	strh	r2, [r3, #0]
			mode = 100;
 8004260:	4b98      	ldr	r3, [pc, #608]	; (80044c4 <main+0x6cc>)
 8004262:	2264      	movs	r2, #100	; 0x64
 8004264:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004266:	4b98      	ldr	r3, [pc, #608]	; (80044c8 <main+0x6d0>)
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	4997      	ldr	r1, [pc, #604]	; (80044cc <main+0x6d4>)
 800426e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 8004272:	4b92      	ldr	r3, [pc, #584]	; (80044bc <main+0x6c4>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d02c      	beq.n	80042d4 <main+0x4dc>
 800427a:	4b91      	ldr	r3, [pc, #580]	; (80044c0 <main+0x6c8>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	f083 0301 	eor.w	r3, r3, #1
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d025      	beq.n	80042d4 <main+0x4dc>
 8004288:	4b8f      	ldr	r3, [pc, #572]	; (80044c8 <main+0x6d0>)
 800428a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800428e:	4b8f      	ldr	r3, [pc, #572]	; (80044cc <main+0x6d4>)
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	ebb0 0802 	subs.w	r8, r0, r2
 8004298:	eb61 0903 	sbc.w	r9, r1, r3
 800429c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	454b      	cmp	r3, r9
 80042a6:	bf08      	it	eq
 80042a8:	4542      	cmpeq	r2, r8
 80042aa:	d213      	bcs.n	80042d4 <main+0x4dc>
 80042ac:	4b85      	ldr	r3, [pc, #532]	; (80044c4 <main+0x6cc>)
 80042ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d10e      	bne.n	80042d4 <main+0x4dc>
			isPressButton2 = true;
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <main+0x6c8>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Year First time
 80042bc:	4b84      	ldr	r3, [pc, #528]	; (80044d0 <main+0x6d8>)
 80042be:	2201      	movs	r2, #1
 80042c0:	801a      	strh	r2, [r3, #0]
			mode = 0;
 80042c2:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <main+0x6cc>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <main+0x6d0>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	497f      	ldr	r1, [pc, #508]	; (80044cc <main+0x6d4>)
 80042d0:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 80042d4:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <main+0x6dc>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d022      	beq.n	8004322 <main+0x52a>
 80042dc:	4b7e      	ldr	r3, [pc, #504]	; (80044d8 <main+0x6e0>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f083 0301 	eor.w	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01b      	beq.n	8004322 <main+0x52a>
 80042ea:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <main+0x6cc>)
 80042ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f0:	2b64      	cmp	r3, #100	; 0x64
 80042f2:	d116      	bne.n	8004322 <main+0x52a>
			modeEdit++;
 80042f4:	4b76      	ldr	r3, [pc, #472]	; (80044d0 <main+0x6d8>)
 80042f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	b29b      	uxth	r3, r3
 8004300:	b21a      	sxth	r2, r3
 8004302:	4b73      	ldr	r3, [pc, #460]	; (80044d0 <main+0x6d8>)
 8004304:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 8004306:	4b74      	ldr	r3, [pc, #464]	; (80044d8 <main+0x6e0>)
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 8){	 // finish loop edit
 800430c:	4b70      	ldr	r3, [pc, #448]	; (80044d0 <main+0x6d8>)
 800430e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004312:	2b08      	cmp	r3, #8
 8004314:	d105      	bne.n	8004322 <main+0x52a>
				modeEdit = 1; // Reset to Year
 8004316:	4b6e      	ldr	r3, [pc, #440]	; (80044d0 <main+0x6d8>)
 8004318:	2201      	movs	r2, #1
 800431a:	801a      	strh	r2, [r3, #0]
				mode = 0;	  // Back to General Mode
 800431c:	4b69      	ldr	r3, [pc, #420]	; (80044c4 <main+0x6cc>)
 800431e:	2200      	movs	r2, #0
 8004320:	801a      	strh	r2, [r3, #0]
			}
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 8004322:	4b6e      	ldr	r3, [pc, #440]	; (80044dc <main+0x6e4>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d06d      	beq.n	8004406 <main+0x60e>
 800432a:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <main+0x6e8>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	f083 0301 	eor.w	r3, r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d066      	beq.n	8004406 <main+0x60e>
 8004338:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <main+0x6cc>)
 800433a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d161      	bne.n	8004406 <main+0x60e>
			if (modeEdit == 1){
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <main+0x6d8>)
 8004344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d109      	bne.n	8004360 <main+0x568>
				year--;
 800434c:	4b65      	ldr	r3, [pc, #404]	; (80044e4 <main+0x6ec>)
 800434e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	b21a      	sxth	r2, r3
 800435a:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <main+0x6ec>)
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e04a      	b.n	80043f6 <main+0x5fe>
			}else if (modeEdit == 2){
 8004360:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <main+0x6d8>)
 8004362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d109      	bne.n	800437e <main+0x586>
				monthIndex--;
 800436a:	4b5f      	ldr	r3, [pc, #380]	; (80044e8 <main+0x6f0>)
 800436c:	f993 3000 	ldrsb.w	r3, [r3]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	b25a      	sxtb	r2, r3
 8004378:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <main+0x6f0>)
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e03b      	b.n	80043f6 <main+0x5fe>
			}else if (modeEdit == 3){
 800437e:	4b54      	ldr	r3, [pc, #336]	; (80044d0 <main+0x6d8>)
 8004380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d109      	bne.n	800439c <main+0x5a4>
				date--;
 8004388:	4b58      	ldr	r3, [pc, #352]	; (80044ec <main+0x6f4>)
 800438a:	f993 3000 	ldrsb.w	r3, [r3]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	b25a      	sxtb	r2, r3
 8004396:	4b55      	ldr	r3, [pc, #340]	; (80044ec <main+0x6f4>)
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e02c      	b.n	80043f6 <main+0x5fe>
			}else if (modeEdit == 4){
 800439c:	4b4c      	ldr	r3, [pc, #304]	; (80044d0 <main+0x6d8>)
 800439e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d109      	bne.n	80043ba <main+0x5c2>
				dayIndex--;
 80043a6:	4b52      	ldr	r3, [pc, #328]	; (80044f0 <main+0x6f8>)
 80043a8:	f993 3000 	ldrsb.w	r3, [r3]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	b25a      	sxtb	r2, r3
 80043b4:	4b4e      	ldr	r3, [pc, #312]	; (80044f0 <main+0x6f8>)
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e01d      	b.n	80043f6 <main+0x5fe>
			}else if (modeEdit == 5){
 80043ba:	4b45      	ldr	r3, [pc, #276]	; (80044d0 <main+0x6d8>)
 80043bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d105      	bne.n	80043d0 <main+0x5d8>
				hourNum--;
 80043c4:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <main+0x6fc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	4a4a      	ldr	r2, [pc, #296]	; (80044f4 <main+0x6fc>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e012      	b.n	80043f6 <main+0x5fe>
			}else if (modeEdit == 6){
 80043d0:	4b3f      	ldr	r3, [pc, #252]	; (80044d0 <main+0x6d8>)
 80043d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d105      	bne.n	80043e6 <main+0x5ee>
				minuteNum--;
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <main+0x700>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3b01      	subs	r3, #1
 80043e0:	4a45      	ldr	r2, [pc, #276]	; (80044f8 <main+0x700>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e007      	b.n	80043f6 <main+0x5fe>
			}else if (modeEdit == 7){
 80043e6:	4b3a      	ldr	r3, [pc, #232]	; (80044d0 <main+0x6d8>)
 80043e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ec:	2b07      	cmp	r3, #7
 80043ee:	d102      	bne.n	80043f6 <main+0x5fe>
				secondNum = 0;
 80043f0:	4b42      	ldr	r3, [pc, #264]	; (80044fc <main+0x704>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 80043f6:	4b42      	ldr	r3, [pc, #264]	; (8004500 <main+0x708>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 80043fc:	f7fd fef8 	bl	80021f0 <resetPrevNum>
			isPressButton3 = true;
 8004400:	4b37      	ldr	r3, [pc, #220]	; (80044e0 <main+0x6e8>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <main+0x70c>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8099 	beq.w	8004542 <main+0x74a>
 8004410:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <main+0x710>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8091 	beq.w	8004542 <main+0x74a>
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <main+0x6cc>)
 8004422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	f040 808b 	bne.w	8004542 <main+0x74a>
			if (modeEdit == 1){
 800442c:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <main+0x6d8>)
 800442e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d109      	bne.n	800444a <main+0x652>
				year++;
 8004436:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <main+0x6ec>)
 8004438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443c:	b29b      	uxth	r3, r3
 800443e:	3301      	adds	r3, #1
 8004440:	b29b      	uxth	r3, r3
 8004442:	b21a      	sxth	r2, r3
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <main+0x6ec>)
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e073      	b.n	8004532 <main+0x73a>
			}else if (modeEdit == 2){
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <main+0x6d8>)
 800444c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d109      	bne.n	8004468 <main+0x670>
				monthIndex++;
 8004454:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <main+0x6f0>)
 8004456:	f993 3000 	ldrsb.w	r3, [r3]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3301      	adds	r3, #1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	b25a      	sxtb	r2, r3
 8004462:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <main+0x6f0>)
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e064      	b.n	8004532 <main+0x73a>
			}else if (modeEdit == 3){
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <main+0x6d8>)
 800446a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d109      	bne.n	8004486 <main+0x68e>
				date++;
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <main+0x6f4>)
 8004474:	f993 3000 	ldrsb.w	r3, [r3]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3301      	adds	r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	b25a      	sxtb	r2, r3
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <main+0x6f4>)
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e055      	b.n	8004532 <main+0x73a>
			}else if (modeEdit == 4){
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <main+0x6d8>)
 8004488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d109      	bne.n	80044a4 <main+0x6ac>
				dayIndex++;
 8004490:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <main+0x6f8>)
 8004492:	f993 3000 	ldrsb.w	r3, [r3]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3301      	adds	r3, #1
 800449a:	b2db      	uxtb	r3, r3
 800449c:	b25a      	sxtb	r2, r3
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <main+0x6f8>)
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e046      	b.n	8004532 <main+0x73a>
			}else if (modeEdit == 5){
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <main+0x6d8>)
 80044a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d12e      	bne.n	800450c <main+0x714>
				hourNum++;
 80044ae:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <main+0x6fc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <main+0x6fc>)
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e03b      	b.n	8004532 <main+0x73a>
 80044ba:	bf00      	nop
 80044bc:	200002e7 	.word	0x200002e7
 80044c0:	200002eb 	.word	0x200002eb
 80044c4:	200002e4 	.word	0x200002e4
 80044c8:	200002f8 	.word	0x200002f8
 80044cc:	200002f0 	.word	0x200002f0
 80044d0:	2000005a 	.word	0x2000005a
 80044d4:	200002e6 	.word	0x200002e6
 80044d8:	200002ea 	.word	0x200002ea
 80044dc:	200002e8 	.word	0x200002e8
 80044e0:	200002ec 	.word	0x200002ec
 80044e4:	200000b2 	.word	0x200000b2
 80044e8:	200000b1 	.word	0x200000b1
 80044ec:	20000061 	.word	0x20000061
 80044f0:	200000b0 	.word	0x200000b0
 80044f4:	20000040 	.word	0x20000040
 80044f8:	2000003c 	.word	0x2000003c
 80044fc:	20000038 	.word	0x20000038
 8004500:	20000050 	.word	0x20000050
 8004504:	200002e9 	.word	0x200002e9
 8004508:	200002ed 	.word	0x200002ed
			}else if (modeEdit == 6){
 800450c:	4b8e      	ldr	r3, [pc, #568]	; (8004748 <main+0x950>)
 800450e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d105      	bne.n	8004522 <main+0x72a>
				minuteNum++;
 8004516:	4b8d      	ldr	r3, [pc, #564]	; (800474c <main+0x954>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	4a8b      	ldr	r2, [pc, #556]	; (800474c <main+0x954>)
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	e007      	b.n	8004532 <main+0x73a>
			}else if (modeEdit == 7){
 8004522:	4b89      	ldr	r3, [pc, #548]	; (8004748 <main+0x950>)
 8004524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004528:	2b07      	cmp	r3, #7
 800452a:	d102      	bne.n	8004532 <main+0x73a>
				secondNum = 0;
 800452c:	4b88      	ldr	r3, [pc, #544]	; (8004750 <main+0x958>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <main+0x95c>)
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8004538:	f7fd fe5a 	bl	80021f0 <resetPrevNum>
			isPressButton4 = true;
 800453c:	4b86      	ldr	r3, [pc, #536]	; (8004758 <main+0x960>)
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
		}



		//Adjust Alarm Mode For Mode 2 and 200
		if (pressButton2 == true && isPressButton2 == false && mode == 2){ // initial time when pressButton2
 8004542:	4b86      	ldr	r3, [pc, #536]	; (800475c <main+0x964>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d029      	beq.n	800459e <main+0x7a6>
 800454a:	4b85      	ldr	r3, [pc, #532]	; (8004760 <main+0x968>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f083 0301 	eor.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d022      	beq.n	800459e <main+0x7a6>
 8004558:	4b82      	ldr	r3, [pc, #520]	; (8004764 <main+0x96c>)
 800455a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d11d      	bne.n	800459e <main+0x7a6>
			isPressButton2 = true;
 8004562:	4b7f      	ldr	r3, [pc, #508]	; (8004760 <main+0x968>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
			alarmIsOn = !alarmIsOn;
 8004568:	4b7f      	ldr	r3, [pc, #508]	; (8004768 <main+0x970>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f083 0301 	eor.w	r3, r3, #1
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b79      	ldr	r3, [pc, #484]	; (8004768 <main+0x970>)
 8004584:	701a      	strb	r2, [r3, #0]
			displayAlarmIcon(alarmIsOn);
 8004586:	4b78      	ldr	r3, [pc, #480]	; (8004768 <main+0x970>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fba8 	bl	8001ce0 <displayAlarmIcon>
			prevSecondCounter = millisecondHAL;
 8004590:	4b76      	ldr	r3, [pc, #472]	; (800476c <main+0x974>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	4976      	ldr	r1, [pc, #472]	; (8004770 <main+0x978>)
 8004598:	e9c1 2300 	strd	r2, r3, [r1]
 800459c:	e030      	b.n	8004600 <main+0x808>
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 2 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 800459e:	4b6f      	ldr	r3, [pc, #444]	; (800475c <main+0x964>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02c      	beq.n	8004600 <main+0x808>
 80045a6:	4b6e      	ldr	r3, [pc, #440]	; (8004760 <main+0x968>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d028      	beq.n	8004600 <main+0x808>
 80045ae:	4b6d      	ldr	r3, [pc, #436]	; (8004764 <main+0x96c>)
 80045b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d123      	bne.n	8004600 <main+0x808>
 80045b8:	4b6c      	ldr	r3, [pc, #432]	; (800476c <main+0x974>)
 80045ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045be:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <main+0x978>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	ebb0 0a02 	subs.w	sl, r0, r2
 80045c8:	eb61 0b03 	sbc.w	fp, r1, r3
 80045cc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	455b      	cmp	r3, fp
 80045d6:	bf08      	it	eq
 80045d8:	4552      	cmpeq	r2, sl
 80045da:	d211      	bcs.n	8004600 <main+0x808>
			buzzerSound(70);
 80045dc:	2046      	movs	r0, #70	; 0x46
 80045de:	f7fe fcbf 	bl	8002f60 <buzzerSound>
			modeEdit = 1; // Reset to Hour First time
 80045e2:	4b59      	ldr	r3, [pc, #356]	; (8004748 <main+0x950>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	801a      	strh	r2, [r3, #0]
			mode = 200;
 80045e8:	4b5e      	ldr	r3, [pc, #376]	; (8004764 <main+0x96c>)
 80045ea:	22c8      	movs	r2, #200	; 0xc8
 80045ec:	801a      	strh	r2, [r3, #0]
			alarmIsOn = true; // always on when editing this alarm
 80045ee:	4b5e      	ldr	r3, [pc, #376]	; (8004768 <main+0x970>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80045f4:	4b5d      	ldr	r3, [pc, #372]	; (800476c <main+0x974>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	495d      	ldr	r1, [pc, #372]	; (8004770 <main+0x978>)
 80045fc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Alarm Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 200){
 8004600:	4b56      	ldr	r3, [pc, #344]	; (800475c <main+0x964>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02f      	beq.n	8004668 <main+0x870>
 8004608:	4b55      	ldr	r3, [pc, #340]	; (8004760 <main+0x968>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	f083 0301 	eor.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d028      	beq.n	8004668 <main+0x870>
 8004616:	4b55      	ldr	r3, [pc, #340]	; (800476c <main+0x974>)
 8004618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800461c:	4b54      	ldr	r3, [pc, #336]	; (8004770 <main+0x978>)
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	1a86      	subs	r6, r0, r2
 8004624:	603e      	str	r6, [r7, #0]
 8004626:	eb61 0303 	sbc.w	r3, r1, r3
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004638:	428b      	cmp	r3, r1
 800463a:	bf08      	it	eq
 800463c:	4282      	cmpeq	r2, r0
 800463e:	d213      	bcs.n	8004668 <main+0x870>
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <main+0x96c>)
 8004642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004646:	2bc8      	cmp	r3, #200	; 0xc8
 8004648:	d10e      	bne.n	8004668 <main+0x870>
			isPressButton2 = true;
 800464a:	4b45      	ldr	r3, [pc, #276]	; (8004760 <main+0x968>)
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Hour First time
 8004650:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <main+0x950>)
 8004652:	2201      	movs	r2, #1
 8004654:	801a      	strh	r2, [r3, #0]
			mode = 2;
 8004656:	4b43      	ldr	r3, [pc, #268]	; (8004764 <main+0x96c>)
 8004658:	2202      	movs	r2, #2
 800465a:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <main+0x974>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	4943      	ldr	r1, [pc, #268]	; (8004770 <main+0x978>)
 8004664:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 200){ // increase mode only once
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <main+0x97c>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d022      	beq.n	80046b6 <main+0x8be>
 8004670:	4b41      	ldr	r3, [pc, #260]	; (8004778 <main+0x980>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f083 0301 	eor.w	r3, r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01b      	beq.n	80046b6 <main+0x8be>
 800467e:	4b39      	ldr	r3, [pc, #228]	; (8004764 <main+0x96c>)
 8004680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004684:	2bc8      	cmp	r3, #200	; 0xc8
 8004686:	d116      	bne.n	80046b6 <main+0x8be>
			modeEdit++;
 8004688:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <main+0x950>)
 800468a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800468e:	b29b      	uxth	r3, r3
 8004690:	3301      	adds	r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	b21a      	sxth	r2, r3
 8004696:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <main+0x950>)
 8004698:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <main+0x980>)
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 3){	 // finish loop edit
 80046a0:	4b29      	ldr	r3, [pc, #164]	; (8004748 <main+0x950>)
 80046a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d105      	bne.n	80046b6 <main+0x8be>
				modeEdit = 1; // Reset to Hour
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <main+0x950>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	801a      	strh	r2, [r3, #0]
				mode = 2;	  // Back to Alarm Mode
 80046b0:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <main+0x96c>)
 80046b2:	2202      	movs	r2, #2
 80046b4:	801a      	strh	r2, [r3, #0]
			}
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 200){ // increase value
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <main+0x984>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d028      	beq.n	8004710 <main+0x918>
 80046be:	4b30      	ldr	r3, [pc, #192]	; (8004780 <main+0x988>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d021      	beq.n	8004710 <main+0x918>
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <main+0x96c>)
 80046ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d2:	2bc8      	cmp	r3, #200	; 0xc8
 80046d4:	d11c      	bne.n	8004710 <main+0x918>
			if (modeEdit == 1){
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <main+0x950>)
 80046d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <main+0x8f4>
				alarmHour--;
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <main+0x98c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	4a27      	ldr	r2, [pc, #156]	; (8004784 <main+0x98c>)
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e009      	b.n	8004700 <main+0x908>
			}else if (modeEdit == 2){
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <main+0x950>)
 80046ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d104      	bne.n	8004700 <main+0x908>
				alarmMinute--;
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <main+0x990>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a22      	ldr	r2, [pc, #136]	; (8004788 <main+0x990>)
 80046fe:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <main+0x95c>)
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 8004706:	f7ff f84d 	bl	80037a4 <resetPrevAlarm>
			isPressButton3 = true;
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <main+0x988>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 200){ // decrease value
 8004710:	4b1e      	ldr	r3, [pc, #120]	; (800478c <main+0x994>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d04d      	beq.n	80047b4 <main+0x9bc>
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <main+0x960>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f083 0301 	eor.w	r3, r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d046      	beq.n	80047b4 <main+0x9bc>
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <main+0x96c>)
 8004728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800472c:	2bc8      	cmp	r3, #200	; 0xc8
 800472e:	d141      	bne.n	80047b4 <main+0x9bc>
			if (modeEdit == 1){
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <main+0x950>)
 8004732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d12a      	bne.n	8004790 <main+0x998>
				alarmHour++;
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <main+0x98c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	4a10      	ldr	r2, [pc, #64]	; (8004784 <main+0x98c>)
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e02e      	b.n	80047a4 <main+0x9ac>
 8004746:	bf00      	nop
 8004748:	2000005a 	.word	0x2000005a
 800474c:	2000003c 	.word	0x2000003c
 8004750:	20000038 	.word	0x20000038
 8004754:	20000050 	.word	0x20000050
 8004758:	200002ed 	.word	0x200002ed
 800475c:	200002e7 	.word	0x200002e7
 8004760:	200002eb 	.word	0x200002eb
 8004764:	200002e4 	.word	0x200002e4
 8004768:	20000060 	.word	0x20000060
 800476c:	200002f8 	.word	0x200002f8
 8004770:	200002f0 	.word	0x200002f0
 8004774:	200002e6 	.word	0x200002e6
 8004778:	200002ea 	.word	0x200002ea
 800477c:	200002e8 	.word	0x200002e8
 8004780:	200002ec 	.word	0x200002ec
 8004784:	200002d0 	.word	0x200002d0
 8004788:	200002cc 	.word	0x200002cc
 800478c:	200002e9 	.word	0x200002e9
			}else if (modeEdit == 2){
 8004790:	4b1e      	ldr	r3, [pc, #120]	; (800480c <main+0xa14>)
 8004792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d104      	bne.n	80047a4 <main+0x9ac>
				alarmMinute++;
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <main+0xa18>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <main+0xa18>)
 80047a2:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <main+0xa1c>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 80047aa:	f7fe fffb 	bl	80037a4 <resetPrevAlarm>
			isPressButton4 = true;
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <main+0xa20>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
		}


		//Reset isPressButton
		if (pressButton1 == false){
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <main+0xa24>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f083 0301 	eor.w	r3, r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <main+0x9d0>
			isPressButton1 = false;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <main+0xa28>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton2 == false){
 80047c8:	4b16      	ldr	r3, [pc, #88]	; (8004824 <main+0xa2c>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <main+0x9e4>
			isPressButton2 = false;
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <main+0xa30>)
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton3 == false){
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <main+0xa34>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f083 0301 	eor.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <main+0x9f8>
			isPressButton3 = false;
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <main+0xa38>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton4 == false){
 80047f0:	4b10      	ldr	r3, [pc, #64]	; (8004834 <main+0xa3c>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	f083 0301 	eor.w	r3, r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f43f ab3d 	beq.w	8003e7a <main+0x82>
			isPressButton4 = false;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <main+0xa20>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
		calculationClock();
 8004806:	f7ff bb38 	b.w	8003e7a <main+0x82>
 800480a:	bf00      	nop
 800480c:	2000005a 	.word	0x2000005a
 8004810:	200002cc 	.word	0x200002cc
 8004814:	20000050 	.word	0x20000050
 8004818:	200002ed 	.word	0x200002ed
 800481c:	200002e6 	.word	0x200002e6
 8004820:	200002ea 	.word	0x200002ea
 8004824:	200002e7 	.word	0x200002e7
 8004828:	200002eb 	.word	0x200002eb
 800482c:	200002e8 	.word	0x200002e8
 8004830:	200002ec 	.word	0x200002ec
 8004834:	200002e9 	.word	0x200002e9

08004838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b0b8      	sub	sp, #224	; 0xe0
 800483c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800483e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004842:	2234      	movs	r2, #52	; 0x34
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f007 f916 	bl	800ba78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800484c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	2290      	movs	r2, #144	; 0x90
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f007 f907 	bl	800ba78 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800486a:	f003 fc45 	bl	80080f8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <SystemClock_Config+0x130>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <SystemClock_Config+0x130>)
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <SystemClock_Config+0x130>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004886:	4b39      	ldr	r3, [pc, #228]	; (800496c <SystemClock_Config+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a38      	ldr	r2, [pc, #224]	; (800496c <SystemClock_Config+0x134>)
 800488c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <SystemClock_Config+0x134>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800489e:	2301      	movs	r3, #1
 80048a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80048a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80048a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048ac:	2302      	movs	r3, #2
 80048ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80048ba:	2304      	movs	r3, #4
 80048bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 80048c0:	23c8      	movs	r3, #200	; 0xc8
 80048c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048c6:	2302      	movs	r3, #2
 80048c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80048cc:	2309      	movs	r3, #9
 80048ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80048d2:	2302      	movs	r3, #2
 80048d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80048dc:	4618      	mov	r0, r3
 80048de:	f003 fc6b 	bl	80081b8 <HAL_RCC_OscConfig>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80048e8:	f000 f8a6 	bl	8004a38 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80048ec:	f003 fc14 	bl	8008118 <HAL_PWREx_EnableOverDrive>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80048f6:	f000 f89f 	bl	8004a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048fa:	230f      	movs	r3, #15
 80048fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004900:	2302      	movs	r3, #2
 8004902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004906:	2300      	movs	r3, #0
 8004908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800490c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800491c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004920:	2106      	movs	r1, #6
 8004922:	4618      	mov	r0, r3
 8004924:	f003 fef6 	bl	8008714 <HAL_RCC_ClockConfig>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800492e:	f000 f883 	bl	8004a38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8004932:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <SystemClock_Config+0x138>)
 8004934:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004936:	2300      	movs	r3, #0
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800493a:	2300      	movs	r3, #0
 800493c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800493e:	2300      	movs	r3, #0
 8004940:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004942:	2300      	movs	r3, #0
 8004944:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004946:	2300      	movs	r3, #0
 8004948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800494c:	f107 0308 	add.w	r3, r7, #8
 8004950:	4618      	mov	r0, r3
 8004952:	f004 f8e1 	bl	8008b18 <HAL_RCCEx_PeriphCLKConfig>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800495c:	f000 f86c 	bl	8004a38 <Error_Handler>
  }
}
 8004960:	bf00      	nop
 8004962:	37e0      	adds	r7, #224	; 0xe0
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40023800 	.word	0x40023800
 800496c:	40007000 	.word	0x40007000
 8004970:	00204340 	.word	0x00204340

08004974 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8004980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004984:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8004986:	2300      	movs	r3, #0
 8004988:	737b      	strb	r3, [r7, #13]

	while (length--){
 800498a:	e023      	b.n	80049d4 <CRC16_2+0x60>
		crc ^= *ptr++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b29a      	uxth	r2, r3
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	4053      	eors	r3, r2
 800499a:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 800499c:	2300      	movs	r3, #0
 800499e:	737b      	strb	r3, [r7, #13]
 80049a0:	e015      	b.n	80049ce <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 80049a2:	89fb      	ldrh	r3, [r7, #14]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <CRC16_2+0x4e>
				crc >>= 1;
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 80049b2:	89fb      	ldrh	r3, [r7, #14]
 80049b4:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80049b8:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80049bc:	43db      	mvns	r3, r3
 80049be:	81fb      	strh	r3, [r7, #14]
 80049c0:	e002      	b.n	80049c8 <CRC16_2+0x54>
			}
			else
				crc >>= 1;
 80049c2:	89fb      	ldrh	r3, [r7, #14]
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 80049c8:	7b7b      	ldrb	r3, [r7, #13]
 80049ca:	3301      	adds	r3, #1
 80049cc:	737b      	strb	r3, [r7, #13]
 80049ce:	7b7b      	ldrb	r3, [r7, #13]
 80049d0:	2b07      	cmp	r3, #7
 80049d2:	d9e6      	bls.n	80049a2 <CRC16_2+0x2e>
	while (length--){
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	1e5a      	subs	r2, r3, #1
 80049d8:	70fa      	strb	r2, [r7, #3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1d6      	bne.n	800498c <CRC16_2+0x18>
		}
	}
	return crc;
 80049de:	89fb      	ldrh	r3, [r7, #14]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	80fb      	strh	r3, [r7, #6]

	//On Board
	//Blue
	if (GPIO_Pin == GPIO_PIN_13){
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fc:	d110      	bne.n	8004a20 <HAL_GPIO_EXTI_Callback+0x34>
		userResetButton = 1;
 80049fe:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Interrupt pin13 \n\r");
 8004a04:	4909      	ldr	r1, [pc, #36]	; (8004a2c <HAL_GPIO_EXTI_Callback+0x40>)
 8004a06:	480a      	ldr	r0, [pc, #40]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x44>)
 8004a08:	f007 fc80 	bl	800c30c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8004a0c:	4808      	ldr	r0, [pc, #32]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x44>)
 8004a0e:	f7fb fc17 	bl	8000240 <strlen>
 8004a12:	4603      	mov	r3, r0
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	23c8      	movs	r3, #200	; 0xc8
 8004a18:	4905      	ldr	r1, [pc, #20]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x44>)
 8004a1a:	4806      	ldr	r0, [pc, #24]	; (8004a34 <HAL_GPIO_EXTI_Callback+0x48>)
 8004a1c:	f006 fad4 	bl	800afc8 <HAL_UART_Transmit>
	}

}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200002ee 	.word	0x200002ee
 8004a2c:	0800e804 	.word	0x0800e804
 8004a30:	2000043c 	.word	0x2000043c
 8004a34:	2000062c 	.word	0x2000062c

08004a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8004a3c:	e7fe      	b.n	8004a3c <Error_Handler+0x4>
	...

08004a40 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <MX_RNG_Init+0x20>)
 8004a46:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <MX_RNG_Init+0x24>)
 8004a48:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004a4a:	4805      	ldr	r0, [pc, #20]	; (8004a60 <MX_RNG_Init+0x20>)
 8004a4c:	f004 fc8c 	bl	8009368 <HAL_RNG_Init>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8004a56:	f7ff ffef 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200004d4 	.word	0x200004d4
 8004a64:	50060800 	.word	0x50060800

08004a68 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <HAL_RNG_MspInit+0x38>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10b      	bne.n	8004a92 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_RNG_MspInit+0x3c>)
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <HAL_RNG_MspInit+0x3c>)
 8004a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a84:	6353      	str	r3, [r2, #52]	; 0x34
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_RNG_MspInit+0x3c>)
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	50060800 	.word	0x50060800
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004aae:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <MX_SPI5_Init+0x78>)
 8004ab0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ab8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ac0:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004ac2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ac6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ada:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004af6:	2207      	movs	r2, #7
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <MX_SPI5_Init+0x74>)
 8004b08:	f004 fc58 	bl	80093bc <HAL_SPI_Init>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8004b12:	f7ff ff91 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200004e4 	.word	0x200004e4
 8004b20:	40015000 	.word	0x40015000

08004b24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2c:	f107 0314 	add.w	r3, r7, #20
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_SPI_MspInit+0x7c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d128      	bne.n	8004b98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004b46:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <HAL_SPI_MspInit+0x80>)
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <HAL_SPI_MspInit+0x80>)
 8004b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b50:	6453      	str	r3, [r2, #68]	; 0x44
 8004b52:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <HAL_SPI_MspInit+0x80>)
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_SPI_MspInit+0x80>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <HAL_SPI_MspInit+0x80>)
 8004b64:	f043 0320 	orr.w	r3, r3, #32
 8004b68:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_SPI_MspInit+0x80>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004b76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b84:	2303      	movs	r3, #3
 8004b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004b88:	2305      	movs	r3, #5
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b8c:	f107 0314 	add.w	r3, r7, #20
 8004b90:	4619      	mov	r1, r3
 8004b92:	4805      	ldr	r0, [pc, #20]	; (8004ba8 <HAL_SPI_MspInit+0x84>)
 8004b94:	f002 f8f2 	bl	8006d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3728      	adds	r7, #40	; 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40015000 	.word	0x40015000
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40021400 	.word	0x40021400

08004bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <HAL_MspInit+0x44>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <HAL_MspInit+0x44>)
 8004bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_MspInit+0x44>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_MspInit+0x44>)
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <HAL_MspInit+0x44>)
 8004bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_MspInit+0x44>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800

08004bf4 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bf8:	f001 fb7c 	bl	80062f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bfc:	bf00      	nop
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c04:	4807      	ldr	r0, [pc, #28]	; (8004c24 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8004c06:	f005 f9ff 	bl	800a008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004c12:	6013      	str	r3, [r2, #0]
  millisecondStopWatch++;
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004c1c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000594 	.word	0x20000594
 8004c28:	200002d4 	.word	0x200002d4
 8004c2c:	200002d8 	.word	0x200002d8

08004c30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c34:	4803      	ldr	r0, [pc, #12]	; (8004c44 <TIM2_IRQHandler+0x14>)
 8004c36:	f005 f9e7 	bl	800a008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8004c3a:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <TIM2_IRQHandler+0x18>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200005e0 	.word	0x200005e0
 8004c48:	200002dc 	.word	0x200002dc

08004c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c54:	f002 fa70 	bl	8007138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c58:	bf00      	nop
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	return 1;
 8004c60:	2301      	movs	r3, #1
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_kill>:

int _kill(int pid, int sig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c76:	f006 fed5 	bl	800ba24 <__errno>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2216      	movs	r2, #22
 8004c7e:	601a      	str	r2, [r3, #0]
	return -1;
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_exit>:

void _exit (int status)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ffe7 	bl	8004c6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c9e:	e7fe      	b.n	8004c9e <_exit+0x12>

08004ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e00a      	b.n	8004cc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cb2:	f3af 8000 	nop.w
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	60ba      	str	r2, [r7, #8]
 8004cbe:	b2ca      	uxtb	r2, r1
 8004cc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	dbf0      	blt.n	8004cb2 <_read+0x12>
	}

return len;
 8004cd0:	687b      	ldr	r3, [r7, #4]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e009      	b.n	8004d00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	60ba      	str	r2, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dbf1      	blt.n	8004cec <_write+0x12>
	}
	return len;
 8004d08:	687b      	ldr	r3, [r7, #4]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_close>:

int _close(int file)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
	return -1;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <_isatty>:

int _isatty(int file)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
	return 1;
 8004d52:	2301      	movs	r3, #1
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
	return 0;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d84:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <_sbrk+0x5c>)
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <_sbrk+0x60>)
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <_sbrk+0x64>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <_sbrk+0x64>)
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <_sbrk+0x68>)
 8004d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <_sbrk+0x64>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d207      	bcs.n	8004dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dac:	f006 fe3a 	bl	800ba24 <__errno>
 8004db0:	4603      	mov	r3, r0
 8004db2:	220c      	movs	r2, #12
 8004db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	e009      	b.n	8004dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <_sbrk+0x64>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <_sbrk+0x64>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <_sbrk+0x64>)
 8004dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20080000 	.word	0x20080000
 8004ddc:	00000400 	.word	0x00000400
 8004de0:	2000038c 	.word	0x2000038c
 8004de4:	200007d0 	.word	0x200007d0

08004de8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dec:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <SystemInit+0x5c>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <SystemInit+0x5c>)
 8004df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <SystemInit+0x60>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <SystemInit+0x60>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <SystemInit+0x60>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <SystemInit+0x60>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	490d      	ldr	r1, [pc, #52]	; (8004e48 <SystemInit+0x60>)
 8004e14:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <SystemInit+0x64>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <SystemInit+0x60>)
 8004e1c:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <SystemInit+0x68>)
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <SystemInit+0x60>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <SystemInit+0x60>)
 8004e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <SystemInit+0x60>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e32:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <SystemInit+0x5c>)
 8004e34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e38:	609a      	str	r2, [r3, #8]
#endif
}
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000ed00 	.word	0xe000ed00
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	fef6ffff 	.word	0xfef6ffff
 8004e50:	24003010 	.word	0x24003010

08004e54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e5a:	f107 0310 	add.w	r3, r7, #16
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e68:	1d3b      	adds	r3, r7, #4
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	605a      	str	r2, [r3, #4]
 8004e70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <MX_TIM1_Init+0xa4>)
 8004e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004e7a:	22c7      	movs	r2, #199	; 0xc7
 8004e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004e84:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004e86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e92:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e98:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e9e:	4815      	ldr	r0, [pc, #84]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004ea0:	f004 fe06 	bl	8009ab0 <HAL_TIM_Base_Init>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004eaa:	f7ff fdc5 	bl	8004a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004eb4:	f107 0310 	add.w	r3, r7, #16
 8004eb8:	4619      	mov	r1, r3
 8004eba:	480e      	ldr	r0, [pc, #56]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004ebc:	f005 fad4 	bl	800a468 <HAL_TIM_ConfigClockSource>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004ec6:	f7ff fdb7 	bl	8004a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4806      	ldr	r0, [pc, #24]	; (8004ef4 <MX_TIM1_Init+0xa0>)
 8004edc:	f005 ff7a 	bl	800add4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004ee6:	f7ff fda7 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004eea:	bf00      	nop
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000594 	.word	0x20000594
 8004ef8:	40010000 	.word	0x40010000

08004efc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f02:	f107 0310 	add.w	r3, r7, #16
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f10:	1d3b      	adds	r3, r7, #4
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	605a      	str	r2, [r3, #4]
 8004f18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f1a:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8004f22:	4b1c      	ldr	r3, [pc, #112]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8004f30:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f32:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004f36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f38:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f3e:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f44:	4813      	ldr	r0, [pc, #76]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f46:	f004 fdb3 	bl	8009ab0 <HAL_TIM_Base_Init>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004f50:	f7ff fd72 	bl	8004a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f5a:	f107 0310 	add.w	r3, r7, #16
 8004f5e:	4619      	mov	r1, r3
 8004f60:	480c      	ldr	r0, [pc, #48]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f62:	f005 fa81 	bl	800a468 <HAL_TIM_ConfigClockSource>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004f6c:	f7ff fd64 	bl	8004a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f70:	2300      	movs	r3, #0
 8004f72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f78:	1d3b      	adds	r3, r7, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4805      	ldr	r0, [pc, #20]	; (8004f94 <MX_TIM2_Init+0x98>)
 8004f7e:	f005 ff29 	bl	800add4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004f88:	f7ff fd56 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004f8c:	bf00      	nop
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	200005e0 	.word	0x200005e0

08004f98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08e      	sub	sp, #56	; 0x38
 8004f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	605a      	str	r2, [r3, #4]
 8004fa8:	609a      	str	r2, [r3, #8]
 8004faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fac:	f107 031c 	add.w	r3, r7, #28
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fb8:	463b      	mov	r3, r7
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	611a      	str	r2, [r3, #16]
 8004fc6:	615a      	str	r2, [r3, #20]
 8004fc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004fca:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <MX_TIM3_Init+0xe8>)
 8004fcc:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <MX_TIM3_Init+0xec>)
 8004fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <MX_TIM3_Init+0xe8>)
 8004fd2:	22f9      	movs	r2, #249	; 0xf9
 8004fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <MX_TIM3_Init+0xe8>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8004fdc:	4b28      	ldr	r3, [pc, #160]	; (8005080 <MX_TIM3_Init+0xe8>)
 8004fde:	2263      	movs	r2, #99	; 0x63
 8004fe0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <MX_TIM3_Init+0xe8>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <MX_TIM3_Init+0xe8>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004fee:	4824      	ldr	r0, [pc, #144]	; (8005080 <MX_TIM3_Init+0xe8>)
 8004ff0:	f004 fd5e 	bl	8009ab0 <HAL_TIM_Base_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004ffa:	f7ff fd1d 	bl	8004a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005008:	4619      	mov	r1, r3
 800500a:	481d      	ldr	r0, [pc, #116]	; (8005080 <MX_TIM3_Init+0xe8>)
 800500c:	f005 fa2c 	bl	800a468 <HAL_TIM_ConfigClockSource>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005016:	f7ff fd0f 	bl	8004a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800501a:	4819      	ldr	r0, [pc, #100]	; (8005080 <MX_TIM3_Init+0xe8>)
 800501c:	f004 fe18 	bl	8009c50 <HAL_TIM_PWM_Init>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005026:	f7ff fd07 	bl	8004a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005032:	f107 031c 	add.w	r3, r7, #28
 8005036:	4619      	mov	r1, r3
 8005038:	4811      	ldr	r0, [pc, #68]	; (8005080 <MX_TIM3_Init+0xe8>)
 800503a:	f005 fecb 	bl	800add4 <HAL_TIMEx_MasterConfigSynchronization>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005044:	f7ff fcf8 	bl	8004a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005048:	2360      	movs	r3, #96	; 0x60
 800504a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 800504c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005050:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800505a:	463b      	mov	r3, r7
 800505c:	2200      	movs	r2, #0
 800505e:	4619      	mov	r1, r3
 8005060:	4807      	ldr	r0, [pc, #28]	; (8005080 <MX_TIM3_Init+0xe8>)
 8005062:	f005 f8f1 	bl	800a248 <HAL_TIM_PWM_ConfigChannel>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800506c:	f7ff fce4 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005070:	4803      	ldr	r0, [pc, #12]	; (8005080 <MX_TIM3_Init+0xe8>)
 8005072:	f000 f85d 	bl	8005130 <HAL_TIM_MspPostInit>

}
 8005076:	bf00      	nop
 8005078:	3738      	adds	r7, #56	; 0x38
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000548 	.word	0x20000548
 8005084:	40000400 	.word	0x40000400

08005088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a23      	ldr	r2, [pc, #140]	; (8005124 <HAL_TIM_Base_MspInit+0x9c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d114      	bne.n	80050c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800509a:	4b23      	ldr	r3, [pc, #140]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	4a22      	ldr	r2, [pc, #136]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	6453      	str	r3, [r2, #68]	; 0x44
 80050a6:	4b20      	ldr	r3, [pc, #128]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2101      	movs	r1, #1
 80050b6:	2019      	movs	r0, #25
 80050b8:	f001 fe29 	bl	8006d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050bc:	2019      	movs	r0, #25
 80050be:	f001 fe42 	bl	8006d46 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80050c2:	e02a      	b.n	800511a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d114      	bne.n	80050f8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6413      	str	r3, [r2, #64]	; 0x40
 80050da:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80050e6:	2200      	movs	r2, #0
 80050e8:	2102      	movs	r1, #2
 80050ea:	201c      	movs	r0, #28
 80050ec:	f001 fe0f 	bl	8006d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050f0:	201c      	movs	r0, #28
 80050f2:	f001 fe28 	bl	8006d46 <HAL_NVIC_EnableIRQ>
}
 80050f6:	e010      	b.n	800511a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <HAL_TIM_Base_MspInit+0xa4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10b      	bne.n	800511a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a08      	ldr	r2, [pc, #32]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_TIM_Base_MspInit+0xa0>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40023800 	.word	0x40023800
 800512c:	40000400 	.word	0x40000400

08005130 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005138:	f107 030c 	add.w	r3, r7, #12
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a11      	ldr	r2, [pc, #68]	; (8005194 <HAL_TIM_MspPostInit+0x64>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d11b      	bne.n	800518a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005152:	4b11      	ldr	r3, [pc, #68]	; (8005198 <HAL_TIM_MspPostInit+0x68>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4a10      	ldr	r2, [pc, #64]	; (8005198 <HAL_TIM_MspPostInit+0x68>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	6313      	str	r3, [r2, #48]	; 0x30
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <HAL_TIM_MspPostInit+0x68>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800516a:	2340      	movs	r3, #64	; 0x40
 800516c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516e:	2302      	movs	r3, #2
 8005170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800517a:	2302      	movs	r3, #2
 800517c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800517e:	f107 030c 	add.w	r3, r7, #12
 8005182:	4619      	mov	r1, r3
 8005184:	4805      	ldr	r0, [pc, #20]	; (800519c <HAL_TIM_MspPostInit+0x6c>)
 8005186:	f001 fdf9 	bl	8006d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800518a:	bf00      	nop
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40000400 	.word	0x40000400
 8005198:	40023800 	.word	0x40023800
 800519c:	40020000 	.word	0x40020000

080051a0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80051a4:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <MX_UART4_Init+0x58>)
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <MX_UART4_Init+0x5c>)
 80051a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80051aa:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <MX_UART4_Init+0x58>)
 80051ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <MX_UART4_Init+0x58>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <MX_UART4_Init+0x58>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <MX_UART4_Init+0x58>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <MX_UART4_Init+0x58>)
 80051c6:	220c      	movs	r2, #12
 80051c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <MX_UART4_Init+0x58>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <MX_UART4_Init+0x58>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051d6:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <MX_UART4_Init+0x58>)
 80051d8:	2200      	movs	r2, #0
 80051da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <MX_UART4_Init+0x58>)
 80051de:	2200      	movs	r2, #0
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80051e2:	4805      	ldr	r0, [pc, #20]	; (80051f8 <MX_UART4_Init+0x58>)
 80051e4:	f005 fea2 	bl	800af2c <HAL_UART_Init>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80051ee:	f7ff fc23 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80051f2:	bf00      	nop
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000734 	.word	0x20000734
 80051fc:	40004c00 	.word	0x40004c00

08005200 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <MX_USART1_UART_Init+0x58>)
 8005206:	4a15      	ldr	r2, [pc, #84]	; (800525c <MX_USART1_UART_Init+0x5c>)
 8005208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <MX_USART1_UART_Init+0x58>)
 800520c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <MX_USART1_UART_Init+0x58>)
 8005214:	2200      	movs	r2, #0
 8005216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <MX_USART1_UART_Init+0x58>)
 800521a:	2200      	movs	r2, #0
 800521c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <MX_USART1_UART_Init+0x58>)
 8005220:	2200      	movs	r2, #0
 8005222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <MX_USART1_UART_Init+0x58>)
 8005226:	220c      	movs	r2, #12
 8005228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <MX_USART1_UART_Init+0x58>)
 800522c:	2200      	movs	r2, #0
 800522e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005230:	4b09      	ldr	r3, [pc, #36]	; (8005258 <MX_USART1_UART_Init+0x58>)
 8005232:	2200      	movs	r2, #0
 8005234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <MX_USART1_UART_Init+0x58>)
 8005238:	2200      	movs	r2, #0
 800523a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <MX_USART1_UART_Init+0x58>)
 800523e:	2200      	movs	r2, #0
 8005240:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005242:	4805      	ldr	r0, [pc, #20]	; (8005258 <MX_USART1_UART_Init+0x58>)
 8005244:	f005 fe72 	bl	800af2c <HAL_UART_Init>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800524e:	f7ff fbf3 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	200006b0 	.word	0x200006b0
 800525c:	40011000 	.word	0x40011000

08005260 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <MX_USART3_UART_Init+0x5c>)
 8005268:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 800526c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005270:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005272:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 8005274:	2200      	movs	r2, #0
 8005276:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 800527a:	2200      	movs	r2, #0
 800527c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800527e:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 8005280:	2200      	movs	r2, #0
 8005282:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 8005286:	220c      	movs	r2, #12
 8005288:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 800528c:	2200      	movs	r2, #0
 800528e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 8005292:	2200      	movs	r2, #0
 8005294:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 8005298:	2200      	movs	r2, #0
 800529a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 800529e:	2200      	movs	r2, #0
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80052a2:	4805      	ldr	r0, [pc, #20]	; (80052b8 <MX_USART3_UART_Init+0x58>)
 80052a4:	f005 fe42 	bl	800af2c <HAL_UART_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80052ae:	f7ff fbc3 	bl	8004a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	2000062c 	.word	0x2000062c
 80052bc:	40004800 	.word	0x40004800

080052c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	; 0x38
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a4e      	ldr	r2, [pc, #312]	; (8005418 <HAL_UART_MspInit+0x158>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d128      	bne.n	8005334 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80052e2:	4b4e      	ldr	r3, [pc, #312]	; (800541c <HAL_UART_MspInit+0x15c>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a4d      	ldr	r2, [pc, #308]	; (800541c <HAL_UART_MspInit+0x15c>)
 80052e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b4b      	ldr	r3, [pc, #300]	; (800541c <HAL_UART_MspInit+0x15c>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052fa:	4b48      	ldr	r3, [pc, #288]	; (800541c <HAL_UART_MspInit+0x15c>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a47      	ldr	r2, [pc, #284]	; (800541c <HAL_UART_MspInit+0x15c>)
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b45      	ldr	r3, [pc, #276]	; (800541c <HAL_UART_MspInit+0x15c>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005312:	2303      	movs	r3, #3
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005316:	2302      	movs	r3, #2
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531e:	2303      	movs	r3, #3
 8005320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005322:	2308      	movs	r3, #8
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800532a:	4619      	mov	r1, r3
 800532c:	483c      	ldr	r0, [pc, #240]	; (8005420 <HAL_UART_MspInit+0x160>)
 800532e:	f001 fd25 	bl	8006d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005332:	e06c      	b.n	800540e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a3a      	ldr	r2, [pc, #232]	; (8005424 <HAL_UART_MspInit+0x164>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d139      	bne.n	80053b2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <HAL_UART_MspInit+0x15c>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	4a36      	ldr	r2, [pc, #216]	; (800541c <HAL_UART_MspInit+0x15c>)
 8005344:	f043 0310 	orr.w	r3, r3, #16
 8005348:	6453      	str	r3, [r2, #68]	; 0x44
 800534a:	4b34      	ldr	r3, [pc, #208]	; (800541c <HAL_UART_MspInit+0x15c>)
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005356:	4b31      	ldr	r3, [pc, #196]	; (800541c <HAL_UART_MspInit+0x15c>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	4a30      	ldr	r2, [pc, #192]	; (800541c <HAL_UART_MspInit+0x15c>)
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	6313      	str	r3, [r2, #48]	; 0x30
 8005362:	4b2e      	ldr	r3, [pc, #184]	; (800541c <HAL_UART_MspInit+0x15c>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800536e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005374:	2302      	movs	r3, #2
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005378:	2300      	movs	r3, #0
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537c:	2303      	movs	r3, #3
 800537e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005380:	2304      	movs	r3, #4
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005388:	4619      	mov	r1, r3
 800538a:	4827      	ldr	r0, [pc, #156]	; (8005428 <HAL_UART_MspInit+0x168>)
 800538c:	f001 fcf6 	bl	8006d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005390:	2340      	movs	r3, #64	; 0x40
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053a0:	2307      	movs	r3, #7
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a8:	4619      	mov	r1, r3
 80053aa:	481f      	ldr	r0, [pc, #124]	; (8005428 <HAL_UART_MspInit+0x168>)
 80053ac:	f001 fce6 	bl	8006d7c <HAL_GPIO_Init>
}
 80053b0:	e02d      	b.n	800540e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART3)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1d      	ldr	r2, [pc, #116]	; (800542c <HAL_UART_MspInit+0x16c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d128      	bne.n	800540e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053bc:	4b17      	ldr	r3, [pc, #92]	; (800541c <HAL_UART_MspInit+0x15c>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	4a16      	ldr	r2, [pc, #88]	; (800541c <HAL_UART_MspInit+0x15c>)
 80053c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c6:	6413      	str	r3, [r2, #64]	; 0x40
 80053c8:	4b14      	ldr	r3, [pc, #80]	; (800541c <HAL_UART_MspInit+0x15c>)
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <HAL_UART_MspInit+0x15c>)
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	4a10      	ldr	r2, [pc, #64]	; (800541c <HAL_UART_MspInit+0x15c>)
 80053da:	f043 0308 	orr.w	r3, r3, #8
 80053de:	6313      	str	r3, [r2, #48]	; 0x30
 80053e0:	4b0e      	ldr	r3, [pc, #56]	; (800541c <HAL_UART_MspInit+0x15c>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80053ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f2:	2302      	movs	r3, #2
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053fa:	2303      	movs	r3, #3
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053fe:	2307      	movs	r3, #7
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005406:	4619      	mov	r1, r3
 8005408:	4805      	ldr	r0, [pc, #20]	; (8005420 <HAL_UART_MspInit+0x160>)
 800540a:	f001 fcb7 	bl	8006d7c <HAL_GPIO_Init>
}
 800540e:	bf00      	nop
 8005410:	3738      	adds	r7, #56	; 0x38
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40004c00 	.word	0x40004c00
 800541c:	40023800 	.word	0x40023800
 8005420:	40020c00 	.word	0x40020c00
 8005424:	40011000 	.word	0x40011000
 8005428:	40020400 	.word	0x40020400
 800542c:	40004800 	.word	0x40004800

08005430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005468 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005436:	e003      	b.n	8005440 <LoopCopyDataInit>

08005438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800543a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800543c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800543e:	3104      	adds	r1, #4

08005440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005440:	480b      	ldr	r0, [pc, #44]	; (8005470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005448:	d3f6      	bcc.n	8005438 <CopyDataInit>
  ldr  r2, =_sbss
 800544a:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800544c:	e002      	b.n	8005454 <LoopFillZerobss>

0800544e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800544e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005450:	f842 3b04 	str.w	r3, [r2], #4

08005454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005458:	d3f9      	bcc.n	800544e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800545a:	f7ff fcc5 	bl	8004de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800545e:	f006 fae7 	bl	800ba30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005462:	f7fe fcc9 	bl	8003df8 <main>
  bx  lr    
 8005466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005468:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800546c:	0800ee64 	.word	0x0800ee64
  ldr  r0, =_sdata
 8005470:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005474:	200002ac 	.word	0x200002ac
  ldr  r2, =_sbss
 8005478:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 800547c:	200007cc 	.word	0x200007cc

08005480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005480:	e7fe      	b.n	8005480 <ADC_IRQHandler>

08005482 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8005482:	b590      	push	{r4, r7, lr}
 8005484:	b08b      	sub	sp, #44	; 0x2c
 8005486:	af00      	add	r7, sp, #0
 8005488:	4604      	mov	r4, r0
 800548a:	4608      	mov	r0, r1
 800548c:	4611      	mov	r1, r2
 800548e:	461a      	mov	r2, r3
 8005490:	4623      	mov	r3, r4
 8005492:	80fb      	strh	r3, [r7, #6]
 8005494:	4603      	mov	r3, r0
 8005496:	80bb      	strh	r3, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
 800549c:	4613      	mov	r3, r2
 800549e:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80054a0:	887b      	ldrh	r3, [r7, #2]
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80054a8:	887b      	ldrh	r3, [r7, #2]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	f1c3 0301 	rsb	r3, r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80054ba:	e061      	b.n	8005580 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e018      	b.n	80054f8 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	b298      	uxth	r0, r3
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	88bb      	ldrh	r3, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	883a      	ldrh	r2, [r7, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	f000 fd02 	bl	8005ee0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	b298      	uxth	r0, r3
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	88ba      	ldrh	r2, [r7, #4]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	883a      	ldrh	r2, [r7, #0]
 80054ec:	4619      	mov	r1, r3
 80054ee:	f000 fcf7 	bl	8005ee0 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	3301      	adds	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	4413      	add	r3, r2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	429a      	cmp	r2, r3
 8005502:	dde0      	ble.n	80054c6 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e018      	b.n	8005540 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	b298      	uxth	r0, r3
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	b29a      	uxth	r2, r3
 8005516:	88bb      	ldrh	r3, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	883a      	ldrh	r2, [r7, #0]
 800551e:	4619      	mov	r1, r3
 8005520:	f000 fcde 	bl	8005ee0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	b298      	uxth	r0, r3
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	b29b      	uxth	r3, r3
 800552c:	88ba      	ldrh	r2, [r7, #4]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	883a      	ldrh	r2, [r7, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	f000 fcd3 	bl	8005ee0 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	88fa      	ldrh	r2, [r7, #6]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	4413      	add	r3, r2
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	dde0      	ble.n	800550e <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	3301      	adds	r3, #1
 8005550:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	4413      	add	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	3302      	adds	r3, #2
 800555e:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	005a      	lsls	r2, r3, #1
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	4413      	add	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	dd09      	ble.n	8005580 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	3b01      	subs	r3, #1
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3302      	adds	r3, #2
 800557e:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	429a      	cmp	r2, r3
 8005586:	da99      	bge.n	80054bc <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	372c      	adds	r7, #44	; 0x2c
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}

08005592 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8005592:	b590      	push	{r4, r7, lr}
 8005594:	b087      	sub	sp, #28
 8005596:	af00      	add	r7, sp, #0
 8005598:	4604      	mov	r4, r0
 800559a:	4608      	mov	r0, r1
 800559c:	4611      	mov	r1, r2
 800559e:	461a      	mov	r2, r3
 80055a0:	4623      	mov	r3, r4
 80055a2:	80fb      	strh	r3, [r7, #6]
 80055a4:	4603      	mov	r3, r0
 80055a6:	80bb      	strh	r3, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	807b      	strh	r3, [r7, #2]
 80055ac:	4613      	mov	r3, r2
 80055ae:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80055d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80055dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e4:	d501      	bpl.n	80055ea <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 80055e6:	2301      	movs	r3, #1
 80055e8:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 80055f0:	883a      	ldrh	r2, [r7, #0]
 80055f2:	88bb      	ldrh	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055fe:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8005602:	edd7 7a03 	vldr	s15, [r7, #12]
 8005606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	d501      	bpl.n	8005614 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8005610:	2301      	movs	r3, #1
 8005612:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 800561a:	887a      	ldrh	r2, [r7, #2]
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	82fb      	strh	r3, [r7, #22]
 8005622:	e003      	b.n	800562c <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	887b      	ldrh	r3, [r7, #2]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 800562c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800562e:	8afa      	ldrh	r2, [r7, #22]
 8005630:	88b9      	ldrh	r1, [r7, #4]
 8005632:	88f8      	ldrh	r0, [r7, #6]
 8005634:	f000 fd8a 	bl	800614c <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8005638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800563a:	8afa      	ldrh	r2, [r7, #22]
 800563c:	8839      	ldrh	r1, [r7, #0]
 800563e:	88f8      	ldrh	r0, [r7, #6]
 8005640:	f000 fd84 	bl	800614c <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005644:	7cbb      	ldrb	r3, [r7, #18]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 800564a:	883a      	ldrh	r2, [r7, #0]
 800564c:	88bb      	ldrh	r3, [r7, #4]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	82bb      	strh	r3, [r7, #20]
 8005652:	e003      	b.n	800565c <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8005654:	88ba      	ldrh	r2, [r7, #4]
 8005656:	883b      	ldrh	r3, [r7, #0]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 800565c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800565e:	8aba      	ldrh	r2, [r7, #20]
 8005660:	88b9      	ldrh	r1, [r7, #4]
 8005662:	88f8      	ldrh	r0, [r7, #6]
 8005664:	f000 fdb6 	bl	80061d4 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8005668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800566a:	8aba      	ldrh	r2, [r7, #20]
 800566c:	88b9      	ldrh	r1, [r7, #4]
 800566e:	8878      	ldrh	r0, [r7, #2]
 8005670:	f000 fdb0 	bl	80061d4 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8005674:	8afb      	ldrh	r3, [r7, #22]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800567a:	8abb      	ldrh	r3, [r7, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8005680:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005682:	8839      	ldrh	r1, [r7, #0]
 8005684:	887b      	ldrh	r3, [r7, #2]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fc2a 	bl	8005ee0 <ILI9341_Draw_Pixel>
	}
	
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd90      	pop	{r4, r7, pc}

08005694 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af02      	add	r7, sp, #8
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	4623      	mov	r3, r4
 80056a4:	80fb      	strh	r3, [r7, #6]
 80056a6:	4603      	mov	r3, r0
 80056a8:	80bb      	strh	r3, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	807b      	strh	r3, [r7, #2]
 80056ae:	4613      	mov	r3, r2
 80056b0:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80056ce:	887a      	ldrh	r2, [r7, #2]
 80056d0:	88fb      	ldrh	r3, [r7, #6]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	da01      	bge.n	80056e0 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80056dc:	2301      	movs	r3, #1
 80056de:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80056e4:	883a      	ldrh	r2, [r7, #0]
 80056e6:	88bb      	ldrh	r3, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	da01      	bge.n	80056f6 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80056f2:	2301      	movs	r3, #1
 80056f4:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80056f6:	7cfb      	ldrb	r3, [r7, #19]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80056fc:	887a      	ldrh	r2, [r7, #2]
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	823b      	strh	r3, [r7, #16]
 8005708:	e005      	b.n	8005716 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800570a:	88fa      	ldrh	r2, [r7, #6]
 800570c:	887b      	ldrh	r3, [r7, #2]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8005712:	887b      	ldrh	r3, [r7, #2]
 8005714:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005716:	7cbb      	ldrb	r3, [r7, #18]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800571c:	883a      	ldrh	r2, [r7, #0]
 800571e:	88bb      	ldrh	r3, [r7, #4]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8005724:	88bb      	ldrh	r3, [r7, #4]
 8005726:	81fb      	strh	r3, [r7, #14]
 8005728:	e005      	b.n	8005736 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800572a:	88ba      	ldrh	r2, [r7, #4]
 800572c:	883b      	ldrh	r3, [r7, #0]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8005732:	883b      	ldrh	r3, [r7, #0]
 8005734:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8005736:	8abc      	ldrh	r4, [r7, #20]
 8005738:	8afa      	ldrh	r2, [r7, #22]
 800573a:	89f9      	ldrh	r1, [r7, #14]
 800573c:	8a38      	ldrh	r0, [r7, #16]
 800573e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4623      	mov	r3, r4
 8005744:	f000 fca6 	bl	8006094 <ILI9341_Draw_Rectangle>
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af02      	add	r7, sp, #8
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4623      	mov	r3, r4
 8005760:	71fb      	strb	r3, [r7, #7]
 8005762:	4603      	mov	r3, r0
 8005764:	71bb      	strb	r3, [r7, #6]
 8005766:	460b      	mov	r3, r1
 8005768:	717b      	strb	r3, [r7, #5]
 800576a:	4613      	mov	r3, r2
 800576c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b1f      	cmp	r3, #31
 8005776:	d802      	bhi.n	800577e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	71fb      	strb	r3, [r7, #7]
 800577c:	e002      	b.n	8005784 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	3b20      	subs	r3, #32
 8005782:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005784:	2300      	movs	r3, #0
 8005786:	753b      	strb	r3, [r7, #20]
 8005788:	e012      	b.n	80057b0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800578a:	7dfa      	ldrb	r2, [r7, #23]
 800578c:	7d38      	ldrb	r0, [r7, #20]
 800578e:	7d39      	ldrb	r1, [r7, #20]
 8005790:	4c3c      	ldr	r4, [pc, #240]	; (8005884 <ILI9341_Draw_Char+0x134>)
 8005792:	4613      	mov	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	4413      	add	r3, r2
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	4423      	add	r3, r4
 800579c:	4403      	add	r3, r0
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	f107 0318 	add.w	r3, r7, #24
 80057a4:	440b      	add	r3, r1
 80057a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80057aa:	7d3b      	ldrb	r3, [r7, #20]
 80057ac:	3301      	adds	r3, #1
 80057ae:	753b      	strb	r3, [r7, #20]
 80057b0:	7d3b      	ldrb	r3, [r7, #20]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d9e9      	bls.n	800578a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80057b6:	79bb      	ldrb	r3, [r7, #6]
 80057b8:	b298      	uxth	r0, r3
 80057ba:	797b      	ldrb	r3, [r7, #5]
 80057bc:	b299      	uxth	r1, r3
 80057be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057c0:	461a      	mov	r2, r3
 80057c2:	0052      	lsls	r2, r2, #1
 80057c4:	4413      	add	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	b29c      	uxth	r4, r3
 80057d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	4623      	mov	r3, r4
 80057d6:	f000 fc5d 	bl	8006094 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80057da:	2300      	movs	r3, #0
 80057dc:	757b      	strb	r3, [r7, #21]
 80057de:	e048      	b.n	8005872 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80057e0:	2300      	movs	r3, #0
 80057e2:	75bb      	strb	r3, [r7, #22]
 80057e4:	e03f      	b.n	8005866 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 80057e6:	7d7b      	ldrb	r3, [r7, #21]
 80057e8:	f107 0218 	add.w	r2, r7, #24
 80057ec:	4413      	add	r3, r2
 80057ee:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80057f2:	461a      	mov	r2, r3
 80057f4:	7dbb      	ldrb	r3, [r7, #22]
 80057f6:	fa42 f303 	asr.w	r3, r2, r3
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d02e      	beq.n	8005860 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8005802:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005804:	2b01      	cmp	r3, #1
 8005806:	d110      	bne.n	800582a <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8005808:	79bb      	ldrb	r3, [r7, #6]
 800580a:	b29a      	uxth	r2, r3
 800580c:	7d7b      	ldrb	r3, [r7, #21]
 800580e:	b29b      	uxth	r3, r3
 8005810:	4413      	add	r3, r2
 8005812:	b298      	uxth	r0, r3
 8005814:	797b      	ldrb	r3, [r7, #5]
 8005816:	b29a      	uxth	r2, r3
 8005818:	7dbb      	ldrb	r3, [r7, #22]
 800581a:	b29b      	uxth	r3, r3
 800581c:	4413      	add	r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	887a      	ldrh	r2, [r7, #2]
 8005822:	4619      	mov	r1, r3
 8005824:	f000 fb5c 	bl	8005ee0 <ILI9341_Draw_Pixel>
 8005828:	e01a      	b.n	8005860 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800582a:	79bb      	ldrb	r3, [r7, #6]
 800582c:	b29a      	uxth	r2, r3
 800582e:	7d7b      	ldrb	r3, [r7, #21]
 8005830:	b29b      	uxth	r3, r3
 8005832:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005834:	fb11 f303 	smulbb	r3, r1, r3
 8005838:	b29b      	uxth	r3, r3
 800583a:	4413      	add	r3, r2
 800583c:	b298      	uxth	r0, r3
 800583e:	797b      	ldrb	r3, [r7, #5]
 8005840:	b29a      	uxth	r2, r3
 8005842:	7dbb      	ldrb	r3, [r7, #22]
 8005844:	b29b      	uxth	r3, r3
 8005846:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005848:	fb11 f303 	smulbb	r3, r1, r3
 800584c:	b29b      	uxth	r3, r3
 800584e:	4413      	add	r3, r2
 8005850:	b299      	uxth	r1, r3
 8005852:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8005854:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4623      	mov	r3, r4
 800585c:	f000 fc1a 	bl	8006094 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005860:	7dbb      	ldrb	r3, [r7, #22]
 8005862:	3301      	adds	r3, #1
 8005864:	75bb      	strb	r3, [r7, #22]
 8005866:	7dbb      	ldrb	r3, [r7, #22]
 8005868:	2b07      	cmp	r3, #7
 800586a:	d9bc      	bls.n	80057e6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800586c:	7d7b      	ldrb	r3, [r7, #21]
 800586e:	3301      	adds	r3, #1
 8005870:	757b      	strb	r3, [r7, #21]
 8005872:	7d7b      	ldrb	r3, [r7, #21]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d9b3      	bls.n	80057e0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}
 8005882:	bf00      	nop
 8005884:	0800e830 	.word	0x0800e830

08005888 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b085      	sub	sp, #20
 800588c:	af02      	add	r7, sp, #8
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	4608      	mov	r0, r1
 8005892:	4611      	mov	r1, r2
 8005894:	461a      	mov	r2, r3
 8005896:	4603      	mov	r3, r0
 8005898:	70fb      	strb	r3, [r7, #3]
 800589a:	460b      	mov	r3, r1
 800589c:	70bb      	strb	r3, [r7, #2]
 800589e:	4613      	mov	r3, r2
 80058a0:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80058a2:	e017      	b.n	80058d4 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	7818      	ldrb	r0, [r3, #0]
 80058ac:	883c      	ldrh	r4, [r7, #0]
 80058ae:	78ba      	ldrb	r2, [r7, #2]
 80058b0:	78f9      	ldrb	r1, [r7, #3]
 80058b2:	8bbb      	ldrh	r3, [r7, #28]
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	8b3b      	ldrh	r3, [r7, #24]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	4623      	mov	r3, r4
 80058bc:	f7ff ff48 	bl	8005750 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80058c0:	8b3b      	ldrh	r3, [r7, #24]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	0052      	lsls	r2, r2, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	4413      	add	r3, r2
 80058d2:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e3      	bne.n	80058a4 <ILI9341_Draw_Text+0x1c>
    }
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
	...

080058e8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80058ec:	f7ff f8dc 	bl	8004aa8 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80058f0:	f7fb f898 	bl	8000a24 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80058f4:	2200      	movs	r2, #0
 80058f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058fa:	4802      	ldr	r0, [pc, #8]	; (8005904 <ILI9341_SPI_Init+0x1c>)
 80058fc:	f001 fc02 	bl	8007104 <HAL_GPIO_WritePin>
}
 8005900:	bf00      	nop
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40020800 	.word	0x40020800

08005908 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005912:	1df9      	adds	r1, r7, #7
 8005914:	2301      	movs	r3, #1
 8005916:	2201      	movs	r2, #1
 8005918:	4803      	ldr	r0, [pc, #12]	; (8005928 <ILI9341_SPI_Send+0x20>)
 800591a:	f003 fdfa 	bl	8009512 <HAL_SPI_Transmit>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200004e4 	.word	0x200004e4

0800592c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005936:	2200      	movs	r2, #0
 8005938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800593c:	480b      	ldr	r0, [pc, #44]	; (800596c <ILI9341_Write_Command+0x40>)
 800593e:	f001 fbe1 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005942:	2200      	movs	r2, #0
 8005944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005948:	4808      	ldr	r0, [pc, #32]	; (800596c <ILI9341_Write_Command+0x40>)
 800594a:	f001 fbdb 	bl	8007104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ffd9 	bl	8005908 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005956:	2201      	movs	r2, #1
 8005958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800595c:	4803      	ldr	r0, [pc, #12]	; (800596c <ILI9341_Write_Command+0x40>)
 800595e:	f001 fbd1 	bl	8007104 <HAL_GPIO_WritePin>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40020800 	.word	0x40020800

08005970 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800597a:	2201      	movs	r2, #1
 800597c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005980:	480b      	ldr	r0, [pc, #44]	; (80059b0 <ILI9341_Write_Data+0x40>)
 8005982:	f001 fbbf 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005986:	2200      	movs	r2, #0
 8005988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800598c:	4808      	ldr	r0, [pc, #32]	; (80059b0 <ILI9341_Write_Data+0x40>)
 800598e:	f001 fbb9 	bl	8007104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ffb7 	bl	8005908 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800599a:	2201      	movs	r2, #1
 800599c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059a0:	4803      	ldr	r0, [pc, #12]	; (80059b0 <ILI9341_Write_Data+0x40>)
 80059a2:	f001 fbaf 	bl	8007104 <HAL_GPIO_WritePin>
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40020800 	.word	0x40020800

080059b4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	4623      	mov	r3, r4
 80059c4:	80fb      	strh	r3, [r7, #6]
 80059c6:	4603      	mov	r3, r0
 80059c8:	80bb      	strh	r3, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	807b      	strh	r3, [r7, #2]
 80059ce:	4613      	mov	r3, r2
 80059d0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80059d2:	202a      	movs	r0, #42	; 0x2a
 80059d4:	f7ff ffaa 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	b29b      	uxth	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff ffc5 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff ffc0 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80059f0:	887b      	ldrh	r3, [r7, #2]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ffb9 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80059fe:	887b      	ldrh	r3, [r7, #2]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ffb4 	bl	8005970 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8005a08:	202b      	movs	r0, #43	; 0x2b
 8005a0a:	f7ff ff8f 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8005a0e:	88bb      	ldrh	r3, [r7, #4]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff ffaa 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8005a1c:	88bb      	ldrh	r3, [r7, #4]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ffa5 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8005a26:	883b      	ldrh	r3, [r7, #0]
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff ff9e 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8005a34:	883b      	ldrh	r3, [r7, #0]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff99 	bl	8005970 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8005a3e:	202c      	movs	r0, #44	; 0x2c
 8005a40:	f7ff ff74 	bl	800592c <ILI9341_Write_Command>
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd90      	pop	{r4, r7, pc}

08005a4c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005a50:	2201      	movs	r2, #1
 8005a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a56:	480b      	ldr	r0, [pc, #44]	; (8005a84 <ILI9341_Reset+0x38>)
 8005a58:	f001 fb54 	bl	8007104 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005a5c:	20c8      	movs	r0, #200	; 0xc8
 8005a5e:	f000 fc69 	bl	8006334 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005a62:	2200      	movs	r2, #0
 8005a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a68:	4806      	ldr	r0, [pc, #24]	; (8005a84 <ILI9341_Reset+0x38>)
 8005a6a:	f001 fb4b 	bl	8007104 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005a6e:	20c8      	movs	r0, #200	; 0xc8
 8005a70:	f000 fc60 	bl	8006334 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8005a74:	2201      	movs	r2, #1
 8005a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a7a:	4802      	ldr	r0, [pc, #8]	; (8005a84 <ILI9341_Reset+0x38>)
 8005a7c:	f001 fb42 	bl	8007104 <HAL_GPIO_WritePin>
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40020800 	.word	0x40020800

08005a88 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8005a96:	2036      	movs	r0, #54	; 0x36
 8005a98:	f7ff ff48 	bl	800592c <ILI9341_Write_Command>
HAL_Delay(1);
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f000 fc49 	bl	8006334 <HAL_Delay>
	
switch(screen_rotation) 
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d837      	bhi.n	8005b18 <ILI9341_Set_Rotation+0x90>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <ILI9341_Set_Rotation+0x28>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005ad7 	.word	0x08005ad7
 8005ab8:	08005aed 	.word	0x08005aed
 8005abc:	08005b03 	.word	0x08005b03
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8005ac0:	2048      	movs	r0, #72	; 0x48
 8005ac2:	f7ff ff55 	bl	8005970 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8005ac6:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <ILI9341_Set_Rotation+0x9c>)
 8005ac8:	22f0      	movs	r2, #240	; 0xf0
 8005aca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005acc:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <ILI9341_Set_Rotation+0xa0>)
 8005ace:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005ad2:	801a      	strh	r2, [r3, #0]
			break;
 8005ad4:	e021      	b.n	8005b1a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8005ad6:	2028      	movs	r0, #40	; 0x28
 8005ad8:	f7ff ff4a 	bl	8005970 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <ILI9341_Set_Rotation+0x9c>)
 8005ade:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005ae2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005ae4:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <ILI9341_Set_Rotation+0xa0>)
 8005ae6:	22f0      	movs	r2, #240	; 0xf0
 8005ae8:	801a      	strh	r2, [r3, #0]
			break;
 8005aea:	e016      	b.n	8005b1a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8005aec:	2088      	movs	r0, #136	; 0x88
 8005aee:	f7ff ff3f 	bl	8005970 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8005af2:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <ILI9341_Set_Rotation+0x9c>)
 8005af4:	22f0      	movs	r2, #240	; 0xf0
 8005af6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <ILI9341_Set_Rotation+0xa0>)
 8005afa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005afe:	801a      	strh	r2, [r3, #0]
			break;
 8005b00:	e00b      	b.n	8005b1a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8005b02:	20e8      	movs	r0, #232	; 0xe8
 8005b04:	f7ff ff34 	bl	8005970 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <ILI9341_Set_Rotation+0x9c>)
 8005b0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b0e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <ILI9341_Set_Rotation+0xa0>)
 8005b12:	22f0      	movs	r2, #240	; 0xf0
 8005b14:	801a      	strh	r2, [r3, #0]
			break;
 8005b16:	e000      	b.n	8005b1a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8005b18:	bf00      	nop
	}
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	200000d2 	.word	0x200000d2
 8005b28:	200000d0 	.word	0x200000d0

08005b2c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005b30:	2201      	movs	r2, #1
 8005b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b36:	4802      	ldr	r0, [pc, #8]	; (8005b40 <ILI9341_Enable+0x14>)
 8005b38:	f001 fae4 	bl	8007104 <HAL_GPIO_WritePin>
}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40020800 	.word	0x40020800

08005b44 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8005b48:	f7ff fff0 	bl	8005b2c <ILI9341_Enable>
ILI9341_SPI_Init();
 8005b4c:	f7ff fecc 	bl	80058e8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8005b50:	f7ff ff7c 	bl	8005a4c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8005b54:	2001      	movs	r0, #1
 8005b56:	f7ff fee9 	bl	800592c <ILI9341_Write_Command>
HAL_Delay(1000);
 8005b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b5e:	f000 fbe9 	bl	8006334 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8005b62:	20cb      	movs	r0, #203	; 0xcb
 8005b64:	f7ff fee2 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8005b68:	2039      	movs	r0, #57	; 0x39
 8005b6a:	f7ff ff01 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8005b6e:	202c      	movs	r0, #44	; 0x2c
 8005b70:	f7ff fefe 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005b74:	2000      	movs	r0, #0
 8005b76:	f7ff fefb 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8005b7a:	2034      	movs	r0, #52	; 0x34
 8005b7c:	f7ff fef8 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8005b80:	2002      	movs	r0, #2
 8005b82:	f7ff fef5 	bl	8005970 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8005b86:	20cf      	movs	r0, #207	; 0xcf
 8005b88:	f7ff fed0 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f7ff feef 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005b92:	20c1      	movs	r0, #193	; 0xc1
 8005b94:	f7ff feec 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8005b98:	2030      	movs	r0, #48	; 0x30
 8005b9a:	f7ff fee9 	bl	8005970 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8005b9e:	20e8      	movs	r0, #232	; 0xe8
 8005ba0:	f7ff fec4 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8005ba4:	2085      	movs	r0, #133	; 0x85
 8005ba6:	f7ff fee3 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005baa:	2000      	movs	r0, #0
 8005bac:	f7ff fee0 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8005bb0:	2078      	movs	r0, #120	; 0x78
 8005bb2:	f7ff fedd 	bl	8005970 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8005bb6:	20ea      	movs	r0, #234	; 0xea
 8005bb8:	f7ff feb8 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f7ff fed7 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	f7ff fed4 	bl	8005970 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8005bc8:	20ed      	movs	r0, #237	; 0xed
 8005bca:	f7ff feaf 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8005bce:	2064      	movs	r0, #100	; 0x64
 8005bd0:	f7ff fece 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005bd4:	2003      	movs	r0, #3
 8005bd6:	f7ff fecb 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8005bda:	2012      	movs	r0, #18
 8005bdc:	f7ff fec8 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8005be0:	2081      	movs	r0, #129	; 0x81
 8005be2:	f7ff fec5 	bl	8005970 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8005be6:	20f7      	movs	r0, #247	; 0xf7
 8005be8:	f7ff fea0 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8005bec:	2020      	movs	r0, #32
 8005bee:	f7ff febf 	bl	8005970 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8005bf2:	20c0      	movs	r0, #192	; 0xc0
 8005bf4:	f7ff fe9a 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8005bf8:	2023      	movs	r0, #35	; 0x23
 8005bfa:	f7ff feb9 	bl	8005970 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8005bfe:	20c1      	movs	r0, #193	; 0xc1
 8005c00:	f7ff fe94 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8005c04:	2010      	movs	r0, #16
 8005c06:	f7ff feb3 	bl	8005970 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8005c0a:	20c5      	movs	r0, #197	; 0xc5
 8005c0c:	f7ff fe8e 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8005c10:	203e      	movs	r0, #62	; 0x3e
 8005c12:	f7ff fead 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8005c16:	2028      	movs	r0, #40	; 0x28
 8005c18:	f7ff feaa 	bl	8005970 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8005c1c:	20c7      	movs	r0, #199	; 0xc7
 8005c1e:	f7ff fe85 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8005c22:	2086      	movs	r0, #134	; 0x86
 8005c24:	f7ff fea4 	bl	8005970 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8005c28:	2036      	movs	r0, #54	; 0x36
 8005c2a:	f7ff fe7f 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8005c2e:	2048      	movs	r0, #72	; 0x48
 8005c30:	f7ff fe9e 	bl	8005970 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8005c34:	203a      	movs	r0, #58	; 0x3a
 8005c36:	f7ff fe79 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8005c3a:	2055      	movs	r0, #85	; 0x55
 8005c3c:	f7ff fe98 	bl	8005970 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8005c40:	20b1      	movs	r0, #177	; 0xb1
 8005c42:	f7ff fe73 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005c46:	2000      	movs	r0, #0
 8005c48:	f7ff fe92 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8005c4c:	2018      	movs	r0, #24
 8005c4e:	f7ff fe8f 	bl	8005970 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8005c52:	20b6      	movs	r0, #182	; 0xb6
 8005c54:	f7ff fe6a 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8005c58:	2008      	movs	r0, #8
 8005c5a:	f7ff fe89 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8005c5e:	2082      	movs	r0, #130	; 0x82
 8005c60:	f7ff fe86 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8005c64:	2027      	movs	r0, #39	; 0x27
 8005c66:	f7ff fe83 	bl	8005970 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8005c6a:	20f2      	movs	r0, #242	; 0xf2
 8005c6c:	f7ff fe5e 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005c70:	2000      	movs	r0, #0
 8005c72:	f7ff fe7d 	bl	8005970 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8005c76:	2026      	movs	r0, #38	; 0x26
 8005c78:	f7ff fe58 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7ff fe77 	bl	8005970 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8005c82:	20e0      	movs	r0, #224	; 0xe0
 8005c84:	f7ff fe52 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8005c88:	200f      	movs	r0, #15
 8005c8a:	f7ff fe71 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005c8e:	2031      	movs	r0, #49	; 0x31
 8005c90:	f7ff fe6e 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8005c94:	202b      	movs	r0, #43	; 0x2b
 8005c96:	f7ff fe6b 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8005c9a:	200c      	movs	r0, #12
 8005c9c:	f7ff fe68 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005ca0:	200e      	movs	r0, #14
 8005ca2:	f7ff fe65 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8005ca6:	2008      	movs	r0, #8
 8005ca8:	f7ff fe62 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8005cac:	204e      	movs	r0, #78	; 0x4e
 8005cae:	f7ff fe5f 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8005cb2:	20f1      	movs	r0, #241	; 0xf1
 8005cb4:	f7ff fe5c 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8005cb8:	2037      	movs	r0, #55	; 0x37
 8005cba:	f7ff fe59 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8005cbe:	2007      	movs	r0, #7
 8005cc0:	f7ff fe56 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8005cc4:	2010      	movs	r0, #16
 8005cc6:	f7ff fe53 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005cca:	2003      	movs	r0, #3
 8005ccc:	f7ff fe50 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005cd0:	200e      	movs	r0, #14
 8005cd2:	f7ff fe4d 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8005cd6:	2009      	movs	r0, #9
 8005cd8:	f7ff fe4a 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f7ff fe47 	bl	8005970 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8005ce2:	20e1      	movs	r0, #225	; 0xe1
 8005ce4:	f7ff fe22 	bl	800592c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f7ff fe41 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005cee:	200e      	movs	r0, #14
 8005cf0:	f7ff fe3e 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8005cf4:	2014      	movs	r0, #20
 8005cf6:	f7ff fe3b 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005cfa:	2003      	movs	r0, #3
 8005cfc:	f7ff fe38 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8005d00:	2011      	movs	r0, #17
 8005d02:	f7ff fe35 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8005d06:	2007      	movs	r0, #7
 8005d08:	f7ff fe32 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005d0c:	2031      	movs	r0, #49	; 0x31
 8005d0e:	f7ff fe2f 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005d12:	20c1      	movs	r0, #193	; 0xc1
 8005d14:	f7ff fe2c 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8005d18:	2048      	movs	r0, #72	; 0x48
 8005d1a:	f7ff fe29 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8005d1e:	2008      	movs	r0, #8
 8005d20:	f7ff fe26 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005d24:	200f      	movs	r0, #15
 8005d26:	f7ff fe23 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8005d2a:	200c      	movs	r0, #12
 8005d2c:	f7ff fe20 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005d30:	2031      	movs	r0, #49	; 0x31
 8005d32:	f7ff fe1d 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8005d36:	2036      	movs	r0, #54	; 0x36
 8005d38:	f7ff fe1a 	bl	8005970 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005d3c:	200f      	movs	r0, #15
 8005d3e:	f7ff fe17 	bl	8005970 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8005d42:	2011      	movs	r0, #17
 8005d44:	f7ff fdf2 	bl	800592c <ILI9341_Write_Command>
HAL_Delay(120);
 8005d48:	2078      	movs	r0, #120	; 0x78
 8005d4a:	f000 faf3 	bl	8006334 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8005d4e:	2029      	movs	r0, #41	; 0x29
 8005d50:	f7ff fdec 	bl	800592c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005d54:	2000      	movs	r0, #0
 8005d56:	f7ff fe97 	bl	8005a88 <ILI9341_Set_Rotation>
}
 8005d5a:	bf00      	nop
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8005d60:	b5b0      	push	{r4, r5, r7, lr}
 8005d62:	b08c      	sub	sp, #48	; 0x30
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	80fb      	strh	r3, [r7, #6]
 8005d6c:	466b      	mov	r3, sp
 8005d6e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d7c:	d202      	bcs.n	8005d84 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
 8005d82:	e002      	b.n	8005d8a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8005d84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d90:	483e      	ldr	r0, [pc, #248]	; (8005e8c <ILI9341_Draw_Colour_Burst+0x12c>)
 8005d92:	f001 f9b7 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005d96:	2200      	movs	r2, #0
 8005d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d9c:	483b      	ldr	r0, [pc, #236]	; (8005e8c <ILI9341_Draw_Colour_Burst+0x12c>)
 8005d9e:	f001 f9b1 	bl	8007104 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8005dac:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005dae:	4623      	mov	r3, r4
 8005db0:	3b01      	subs	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	4620      	mov	r0, r4
 8005db6:	f04f 0100 	mov.w	r1, #0
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	00cb      	lsls	r3, r1, #3
 8005dc4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005dc8:	00c2      	lsls	r2, r0, #3
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f04f 0100 	mov.w	r1, #0
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	00cb      	lsls	r3, r1, #3
 8005dda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005dde:	00c2      	lsls	r2, r0, #3
 8005de0:	1de3      	adds	r3, r4, #7
 8005de2:	08db      	lsrs	r3, r3, #3
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	ebad 0d03 	sub.w	sp, sp, r3
 8005dea:	466b      	mov	r3, sp
 8005dec:	3300      	adds	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005df0:	2300      	movs	r3, #0
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df4:	e00e      	b.n	8005e14 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005e00:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	3301      	adds	r3, #1
 8005e06:	88fa      	ldrh	r2, [r7, #6]
 8005e08:	b2d1      	uxtb	r1, r2
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	3302      	adds	r3, #2
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3ec      	bcc.n	8005df6 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e30:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e36:	fb01 f202 	mul.w	r2, r1, r2
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e48:	e009      	b.n	8005e5e <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8005e4a:	69b9      	ldr	r1, [r7, #24]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	230a      	movs	r3, #10
 8005e52:	480f      	ldr	r0, [pc, #60]	; (8005e90 <ILI9341_Draw_Colour_Burst+0x130>)
 8005e54:	f003 fb5d 	bl	8009512 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d3f1      	bcc.n	8005e4a <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8005e66:	69b9      	ldr	r1, [r7, #24]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	230a      	movs	r3, #10
 8005e6e:	4808      	ldr	r0, [pc, #32]	; (8005e90 <ILI9341_Draw_Colour_Burst+0x130>)
 8005e70:	f003 fb4f 	bl	8009512 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005e74:	2201      	movs	r2, #1
 8005e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e7a:	4804      	ldr	r0, [pc, #16]	; (8005e8c <ILI9341_Draw_Colour_Burst+0x12c>)
 8005e7c:	f001 f942 	bl	8007104 <HAL_GPIO_WritePin>
 8005e80:	46ad      	mov	sp, r5
}
 8005e82:	bf00      	nop
 8005e84:	3730      	adds	r7, #48	; 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bdb0      	pop	{r4, r5, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40020800 	.word	0x40020800
 8005e90:	200004e4 	.word	0x200004e4

08005e94 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <ILI9341_Fill_Screen+0x44>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <ILI9341_Fill_Screen+0x48>)
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2100      	movs	r1, #0
 8005eac:	2000      	movs	r0, #0
 8005eae:	f7ff fd81 	bl	80059b4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <ILI9341_Fill_Screen+0x44>)
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <ILI9341_Fill_Screen+0x48>)
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	fb03 f302 	mul.w	r3, r3, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff ff48 	bl	8005d60 <ILI9341_Draw_Colour_Burst>
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200000d2 	.word	0x200000d2
 8005edc:	200000d0 	.word	0x200000d0

08005ee0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	80fb      	strh	r3, [r7, #6]
 8005eea:	460b      	mov	r3, r1
 8005eec:	80bb      	strh	r3, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005ef2:	4b64      	ldr	r3, [pc, #400]	; (8006084 <ILI9341_Draw_Pixel+0x1a4>)
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	f080 80be 	bcs.w	800607c <ILI9341_Draw_Pixel+0x19c>
 8005f00:	4b61      	ldr	r3, [pc, #388]	; (8006088 <ILI9341_Draw_Pixel+0x1a8>)
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	88ba      	ldrh	r2, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	f080 80b7 	bcs.w	800607c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f14:	485d      	ldr	r0, [pc, #372]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005f16:	f001 f8f5 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f20:	485a      	ldr	r0, [pc, #360]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005f22:	f001 f8ef 	bl	8007104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8005f26:	202a      	movs	r0, #42	; 0x2a
 8005f28:	f7ff fcee 	bl	8005908 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f32:	4856      	ldr	r0, [pc, #344]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005f34:	f001 f8e6 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f3e:	4853      	ldr	r0, [pc, #332]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005f40:	f001 f8e0 	bl	8007104 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005f44:	2200      	movs	r2, #0
 8005f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f4a:	4850      	ldr	r0, [pc, #320]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005f4c:	f001 f8da 	bl	8007104 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	753b      	strb	r3, [r7, #20]
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	757b      	strb	r3, [r7, #21]
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	3301      	adds	r3, #1
 8005f64:	121b      	asrs	r3, r3, #8
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	75bb      	strb	r3, [r7, #22]
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	3301      	adds	r3, #1
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005f74:	f107 0114 	add.w	r1, r7, #20
 8005f78:	2301      	movs	r3, #1
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	4844      	ldr	r0, [pc, #272]	; (8006090 <ILI9341_Draw_Pixel+0x1b0>)
 8005f7e:	f003 fac8 	bl	8009512 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005f82:	2201      	movs	r2, #1
 8005f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f88:	4840      	ldr	r0, [pc, #256]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005f8a:	f001 f8bb 	bl	8007104 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f94:	483d      	ldr	r0, [pc, #244]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005f96:	f001 f8b5 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fa0:	483a      	ldr	r0, [pc, #232]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005fa2:	f001 f8af 	bl	8007104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8005fa6:	202b      	movs	r0, #43	; 0x2b
 8005fa8:	f7ff fcae 	bl	8005908 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005fac:	2201      	movs	r2, #1
 8005fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fb2:	4836      	ldr	r0, [pc, #216]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005fb4:	f001 f8a6 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fbe:	4833      	ldr	r0, [pc, #204]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005fc0:	f001 f8a0 	bl	8007104 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fca:	4830      	ldr	r0, [pc, #192]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8005fcc:	f001 f89a 	bl	8007104 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8005fd0:	88bb      	ldrh	r3, [r7, #4]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	743b      	strb	r3, [r7, #16]
 8005fda:	88bb      	ldrh	r3, [r7, #4]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	747b      	strb	r3, [r7, #17]
 8005fe0:	88bb      	ldrh	r3, [r7, #4]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	121b      	asrs	r3, r3, #8
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	74bb      	strb	r3, [r7, #18]
 8005fea:	88bb      	ldrh	r3, [r7, #4]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8005ff4:	f107 0110 	add.w	r1, r7, #16
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	4824      	ldr	r0, [pc, #144]	; (8006090 <ILI9341_Draw_Pixel+0x1b0>)
 8005ffe:	f003 fa88 	bl	8009512 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006002:	2201      	movs	r2, #1
 8006004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006008:	4820      	ldr	r0, [pc, #128]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 800600a:	f001 f87b 	bl	8007104 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800600e:	2200      	movs	r2, #0
 8006010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006014:	481d      	ldr	r0, [pc, #116]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8006016:	f001 f875 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800601a:	2200      	movs	r2, #0
 800601c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006020:	481a      	ldr	r0, [pc, #104]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8006022:	f001 f86f 	bl	8007104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8006026:	202c      	movs	r0, #44	; 0x2c
 8006028:	f7ff fc6e 	bl	8005908 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800602c:	2201      	movs	r2, #1
 800602e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006032:	4816      	ldr	r0, [pc, #88]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8006034:	f001 f866 	bl	8007104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006038:	2201      	movs	r2, #1
 800603a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800603e:	4813      	ldr	r0, [pc, #76]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8006040:	f001 f860 	bl	8007104 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006044:	2200      	movs	r2, #0
 8006046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800604a:	4810      	ldr	r0, [pc, #64]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 800604c:	f001 f85a 	bl	8007104 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8006050:	887b      	ldrh	r3, [r7, #2]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	b29b      	uxth	r3, r3
 8006056:	b2db      	uxtb	r3, r3
 8006058:	733b      	strb	r3, [r7, #12]
 800605a:	887b      	ldrh	r3, [r7, #2]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8006060:	f107 010c 	add.w	r1, r7, #12
 8006064:	2301      	movs	r3, #1
 8006066:	2202      	movs	r2, #2
 8006068:	4809      	ldr	r0, [pc, #36]	; (8006090 <ILI9341_Draw_Pixel+0x1b0>)
 800606a:	f003 fa52 	bl	8009512 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800606e:	2201      	movs	r2, #1
 8006070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006074:	4805      	ldr	r0, [pc, #20]	; (800608c <ILI9341_Draw_Pixel+0x1ac>)
 8006076:	f001 f845 	bl	8007104 <HAL_GPIO_WritePin>
 800607a:	e000      	b.n	800607e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800607c:	bf00      	nop
	
}
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200000d2 	.word	0x200000d2
 8006088:	200000d0 	.word	0x200000d0
 800608c:	40020800 	.word	0x40020800
 8006090:	200004e4 	.word	0x200004e4

08006094 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	461a      	mov	r2, r3
 80060a2:	4623      	mov	r3, r4
 80060a4:	80fb      	strh	r3, [r7, #6]
 80060a6:	4603      	mov	r3, r0
 80060a8:	80bb      	strh	r3, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	807b      	strh	r3, [r7, #2]
 80060ae:	4613      	mov	r3, r2
 80060b0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <ILI9341_Draw_Rectangle+0xb0>)
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d23d      	bcs.n	800613a <ILI9341_Draw_Rectangle+0xa6>
 80060be:	4b22      	ldr	r3, [pc, #136]	; (8006148 <ILI9341_Draw_Rectangle+0xb4>)
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	88ba      	ldrh	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d237      	bcs.n	800613a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	887b      	ldrh	r3, [r7, #2]
 80060ce:	4413      	add	r3, r2
 80060d0:	4a1c      	ldr	r2, [pc, #112]	; (8006144 <ILI9341_Draw_Rectangle+0xb0>)
 80060d2:	8812      	ldrh	r2, [r2, #0]
 80060d4:	b292      	uxth	r2, r2
 80060d6:	4293      	cmp	r3, r2
 80060d8:	dd05      	ble.n	80060e6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80060da:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <ILI9341_Draw_Rectangle+0xb0>)
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80060e6:	88ba      	ldrh	r2, [r7, #4]
 80060e8:	883b      	ldrh	r3, [r7, #0]
 80060ea:	4413      	add	r3, r2
 80060ec:	4a16      	ldr	r2, [pc, #88]	; (8006148 <ILI9341_Draw_Rectangle+0xb4>)
 80060ee:	8812      	ldrh	r2, [r2, #0]
 80060f0:	b292      	uxth	r2, r2
 80060f2:	4293      	cmp	r3, r2
 80060f4:	dd05      	ble.n	8006102 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <ILI9341_Draw_Rectangle+0xb4>)
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	887b      	ldrh	r3, [r7, #2]
 8006106:	4413      	add	r3, r2
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29c      	uxth	r4, r3
 800610e:	88ba      	ldrh	r2, [r7, #4]
 8006110:	883b      	ldrh	r3, [r7, #0]
 8006112:	4413      	add	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	88b9      	ldrh	r1, [r7, #4]
 800611c:	88f8      	ldrh	r0, [r7, #6]
 800611e:	4622      	mov	r2, r4
 8006120:	f7ff fc48 	bl	80059b4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8006124:	883b      	ldrh	r3, [r7, #0]
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	461a      	mov	r2, r3
 800612e:	8b3b      	ldrh	r3, [r7, #24]
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fe14 	bl	8005d60 <ILI9341_Draw_Colour_Burst>
 8006138:	e000      	b.n	800613c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800613a:	bf00      	nop
}
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bd90      	pop	{r4, r7, pc}
 8006142:	bf00      	nop
 8006144:	200000d2 	.word	0x200000d2
 8006148:	200000d0 	.word	0x200000d0

0800614c <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 800614c:	b590      	push	{r4, r7, lr}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4623      	mov	r3, r4
 800615c:	80fb      	strh	r3, [r7, #6]
 800615e:	4603      	mov	r3, r0
 8006160:	80bb      	strh	r3, [r7, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	807b      	strh	r3, [r7, #2]
 8006166:	4613      	mov	r3, r2
 8006168:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800616a:	4b18      	ldr	r3, [pc, #96]	; (80061cc <ILI9341_Draw_Horizontal_Line+0x80>)
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	88fa      	ldrh	r2, [r7, #6]
 8006172:	429a      	cmp	r2, r3
 8006174:	d225      	bcs.n	80061c2 <ILI9341_Draw_Horizontal_Line+0x76>
 8006176:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <ILI9341_Draw_Horizontal_Line+0x84>)
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	88ba      	ldrh	r2, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d21f      	bcs.n	80061c2 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	4413      	add	r3, r2
 8006188:	4a10      	ldr	r2, [pc, #64]	; (80061cc <ILI9341_Draw_Horizontal_Line+0x80>)
 800618a:	8812      	ldrh	r2, [r2, #0]
 800618c:	b292      	uxth	r2, r2
 800618e:	4293      	cmp	r3, r2
 8006190:	dd05      	ble.n	800619e <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8006192:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <ILI9341_Draw_Horizontal_Line+0x80>)
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29a      	uxth	r2, r3
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	887b      	ldrh	r3, [r7, #2]
 80061a2:	4413      	add	r3, r2
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	88bb      	ldrh	r3, [r7, #4]
 80061ac:	88b9      	ldrh	r1, [r7, #4]
 80061ae:	88f8      	ldrh	r0, [r7, #6]
 80061b0:	f7ff fc00 	bl	80059b4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80061b4:	887a      	ldrh	r2, [r7, #2]
 80061b6:	883b      	ldrh	r3, [r7, #0]
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fdd0 	bl	8005d60 <ILI9341_Draw_Colour_Burst>
 80061c0:	e000      	b.n	80061c4 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80061c2:	bf00      	nop
}
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd90      	pop	{r4, r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200000d2 	.word	0x200000d2
 80061d0:	200000d0 	.word	0x200000d0

080061d4 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	4604      	mov	r4, r0
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	4623      	mov	r3, r4
 80061e4:	80fb      	strh	r3, [r7, #6]
 80061e6:	4603      	mov	r3, r0
 80061e8:	80bb      	strh	r3, [r7, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	807b      	strh	r3, [r7, #2]
 80061ee:	4613      	mov	r3, r2
 80061f0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <ILI9341_Draw_Vertical_Line+0x80>)
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d225      	bcs.n	800624a <ILI9341_Draw_Vertical_Line+0x76>
 80061fe:	4b16      	ldr	r3, [pc, #88]	; (8006258 <ILI9341_Draw_Vertical_Line+0x84>)
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	88ba      	ldrh	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d21f      	bcs.n	800624a <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800620a:	88ba      	ldrh	r2, [r7, #4]
 800620c:	887b      	ldrh	r3, [r7, #2]
 800620e:	4413      	add	r3, r2
 8006210:	4a11      	ldr	r2, [pc, #68]	; (8006258 <ILI9341_Draw_Vertical_Line+0x84>)
 8006212:	8812      	ldrh	r2, [r2, #0]
 8006214:	b292      	uxth	r2, r2
 8006216:	4293      	cmp	r3, r2
 8006218:	dd05      	ble.n	8006226 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <ILI9341_Draw_Vertical_Line+0x84>)
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29a      	uxth	r2, r3
 8006220:	88bb      	ldrh	r3, [r7, #4]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8006226:	88ba      	ldrh	r2, [r7, #4]
 8006228:	887b      	ldrh	r3, [r7, #2]
 800622a:	4413      	add	r3, r2
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29b      	uxth	r3, r3
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	88b9      	ldrh	r1, [r7, #4]
 8006236:	88f8      	ldrh	r0, [r7, #6]
 8006238:	f7ff fbbc 	bl	80059b4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 800623c:	887a      	ldrh	r2, [r7, #2]
 800623e:	883b      	ldrh	r3, [r7, #0]
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fd8c 	bl	8005d60 <ILI9341_Draw_Colour_Burst>
 8006248:	e000      	b.n	800624c <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800624a:	bf00      	nop
}
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bd90      	pop	{r4, r7, pc}
 8006252:	bf00      	nop
 8006254:	200000d2 	.word	0x200000d2
 8006258:	200000d0 	.word	0x200000d0

0800625c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_Init+0x34>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0a      	ldr	r2, [pc, #40]	; (8006290 <HAL_Init+0x34>)
 8006266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800626a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800626c:	4b08      	ldr	r3, [pc, #32]	; (8006290 <HAL_Init+0x34>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a07      	ldr	r2, [pc, #28]	; (8006290 <HAL_Init+0x34>)
 8006272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006278:	2003      	movs	r0, #3
 800627a:	f000 fd3d 	bl	8006cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800627e:	2000      	movs	r0, #0
 8006280:	f000 f808 	bl	8006294 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006284:	f7fe fc92 	bl	8004bac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40023c00 	.word	0x40023c00

08006294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800629c:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <HAL_InitTick+0x54>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4b12      	ldr	r3, [pc, #72]	; (80062ec <HAL_InitTick+0x58>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fd55 	bl	8006d62 <HAL_SYSTICK_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e00e      	b.n	80062e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b0f      	cmp	r3, #15
 80062c6:	d80a      	bhi.n	80062de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062c8:	2200      	movs	r2, #0
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	f000 fd1d 	bl	8006d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062d4:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <HAL_InitTick+0x5c>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e000      	b.n	80062e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	200000cc 	.word	0x200000cc
 80062ec:	200000d8 	.word	0x200000d8
 80062f0:	200000d4 	.word	0x200000d4

080062f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_IncTick+0x20>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_IncTick+0x24>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4413      	add	r3, r2
 8006304:	4a04      	ldr	r2, [pc, #16]	; (8006318 <HAL_IncTick+0x24>)
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	bf00      	nop
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	200000d8 	.word	0x200000d8
 8006318:	200007b8 	.word	0x200007b8

0800631c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return uwTick;
 8006320:	4b03      	ldr	r3, [pc, #12]	; (8006330 <HAL_GetTick+0x14>)
 8006322:	681b      	ldr	r3, [r3, #0]
}
 8006324:	4618      	mov	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	200007b8 	.word	0x200007b8

08006334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800633c:	f7ff ffee 	bl	800631c <HAL_GetTick>
 8006340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d005      	beq.n	800635a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800634e:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <HAL_Delay+0x44>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800635a:	bf00      	nop
 800635c:	f7ff ffde 	bl	800631c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	429a      	cmp	r2, r3
 800636a:	d8f7      	bhi.n	800635c <HAL_Delay+0x28>
  {
  }
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200000d8 	.word	0x200000d8

0800637c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e031      	b.n	80063f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fa fb02 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d116      	bne.n	80063e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <HAL_ADC_Init+0x84>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	f043 0202 	orr.w	r2, r3, #2
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 faca 	bl	8006964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	f043 0201 	orr.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
 80063e6:	e001      	b.n	80063ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	ffffeefd 	.word	0xffffeefd

08006404 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_ADC_Start+0x1a>
 800641a:	2302      	movs	r3, #2
 800641c:	e0ad      	b.n	800657a <HAL_ADC_Start+0x176>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b01      	cmp	r3, #1
 8006432:	d018      	beq.n	8006466 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006444:	4b50      	ldr	r3, [pc, #320]	; (8006588 <HAL_ADC_Start+0x184>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a50      	ldr	r2, [pc, #320]	; (800658c <HAL_ADC_Start+0x188>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	0c9a      	lsrs	r2, r3, #18
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006458:	e002      	b.n	8006460 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3b01      	subs	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f9      	bne.n	800645a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b01      	cmp	r3, #1
 8006472:	d175      	bne.n	8006560 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006478:	4b45      	ldr	r3, [pc, #276]	; (8006590 <HAL_ADC_Start+0x18c>)
 800647a:	4013      	ands	r3, r2
 800647c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800649a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d106      	bne.n	80064be <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	f023 0206 	bic.w	r2, r3, #6
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44
 80064bc:	e002      	b.n	80064c4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80064d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80064d6:	4b2f      	ldr	r3, [pc, #188]	; (8006594 <HAL_ADC_Start+0x190>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10f      	bne.n	8006502 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d143      	bne.n	8006578 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064fe:	609a      	str	r2, [r3, #8]
 8006500:	e03a      	b.n	8006578 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a24      	ldr	r2, [pc, #144]	; (8006598 <HAL_ADC_Start+0x194>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10e      	bne.n	800652a <HAL_ADC_Start+0x126>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d107      	bne.n	800652a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006528:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <HAL_ADC_Start+0x190>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	d120      	bne.n	8006578 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a18      	ldr	r2, [pc, #96]	; (800659c <HAL_ADC_Start+0x198>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d11b      	bne.n	8006578 <HAL_ADC_Start+0x174>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d114      	bne.n	8006578 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800655c:	609a      	str	r2, [r3, #8]
 800655e:	e00b      	b.n	8006578 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	f043 0210 	orr.w	r2, r3, #16
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006570:	f043 0201 	orr.w	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	200000cc 	.word	0x200000cc
 800658c:	431bde83 	.word	0x431bde83
 8006590:	fffff8fe 	.word	0xfffff8fe
 8006594:	40012300 	.word	0x40012300
 8006598:	40012000 	.word	0x40012000
 800659c:	40012200 	.word	0x40012200

080065a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065bc:	d113      	bne.n	80065e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80065c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065cc:	d10b      	bne.n	80065e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f043 0220 	orr.w	r2, r3, #32
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e063      	b.n	80066ae <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80065e6:	f7ff fe99 	bl	800631c <HAL_GetTick>
 80065ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80065ec:	e021      	b.n	8006632 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d01d      	beq.n	8006632 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_ADC_PollForConversion+0x6c>
 80065fc:	f7ff fe8e 	bl	800631c <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d212      	bcs.n	8006632 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d00b      	beq.n	8006632 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f043 0204 	orr.w	r2, r3, #4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e03d      	b.n	80066ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d1d6      	bne.n	80065ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0212 	mvn.w	r2, #18
 8006648:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d123      	bne.n	80066ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11f      	bne.n	80066ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006684:	2b00      	cmp	r3, #0
 8006686:	d111      	bne.n	80066ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	f043 0201 	orr.w	r2, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x1c>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e12a      	b.n	8006942 <HAL_ADC_ConfigChannel+0x272>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b09      	cmp	r3, #9
 80066fa:	d93a      	bls.n	8006772 <HAL_ADC_ConfigChannel+0xa2>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006704:	d035      	beq.n	8006772 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68d9      	ldr	r1, [r3, #12]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	b29b      	uxth	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	4613      	mov	r3, r2
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	4413      	add	r3, r2
 800671a:	3b1e      	subs	r3, #30
 800671c:	2207      	movs	r2, #7
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43da      	mvns	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	400a      	ands	r2, r1
 800672a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a87      	ldr	r2, [pc, #540]	; (8006950 <HAL_ADC_ConfigChannel+0x280>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d10a      	bne.n	800674c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68d9      	ldr	r1, [r3, #12]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	061a      	lsls	r2, r3, #24
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800674a:	e035      	b.n	80067b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68d9      	ldr	r1, [r3, #12]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	4618      	mov	r0, r3
 800675e:	4603      	mov	r3, r0
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	4403      	add	r3, r0
 8006764:	3b1e      	subs	r3, #30
 8006766:	409a      	lsls	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006770:	e022      	b.n	80067b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6919      	ldr	r1, [r3, #16]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	2207      	movs	r2, #7
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	43da      	mvns	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	400a      	ands	r2, r1
 8006794:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6919      	ldr	r1, [r3, #16]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	4618      	mov	r0, r3
 80067a8:	4603      	mov	r3, r0
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	4403      	add	r3, r0
 80067ae:	409a      	lsls	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b06      	cmp	r3, #6
 80067be:	d824      	bhi.n	800680a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	3b05      	subs	r3, #5
 80067d2:	221f      	movs	r2, #31
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	43da      	mvns	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	400a      	ands	r2, r1
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	4618      	mov	r0, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	3b05      	subs	r3, #5
 80067fc:	fa00 f203 	lsl.w	r2, r0, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	635a      	str	r2, [r3, #52]	; 0x34
 8006808:	e04c      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b0c      	cmp	r3, #12
 8006810:	d824      	bhi.n	800685c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	3b23      	subs	r3, #35	; 0x23
 8006824:	221f      	movs	r2, #31
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	43da      	mvns	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	400a      	ands	r2, r1
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	4618      	mov	r0, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	3b23      	subs	r3, #35	; 0x23
 800684e:	fa00 f203 	lsl.w	r2, r0, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
 800685a:	e023      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	3b41      	subs	r3, #65	; 0x41
 800686e:	221f      	movs	r2, #31
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	43da      	mvns	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	400a      	ands	r2, r1
 800687c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	4618      	mov	r0, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	3b41      	subs	r3, #65	; 0x41
 8006898:	fa00 f203 	lsl.w	r2, r0, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2a      	ldr	r2, [pc, #168]	; (8006954 <HAL_ADC_ConfigChannel+0x284>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10a      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x1f4>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b6:	d105      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80068b8:	4b27      	ldr	r3, [pc, #156]	; (8006958 <HAL_ADC_ConfigChannel+0x288>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4a26      	ldr	r2, [pc, #152]	; (8006958 <HAL_ADC_ConfigChannel+0x288>)
 80068be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80068c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a22      	ldr	r2, [pc, #136]	; (8006954 <HAL_ADC_ConfigChannel+0x284>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d109      	bne.n	80068e2 <HAL_ADC_ConfigChannel+0x212>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b12      	cmp	r3, #18
 80068d4:	d105      	bne.n	80068e2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80068d6:	4b20      	ldr	r3, [pc, #128]	; (8006958 <HAL_ADC_ConfigChannel+0x288>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <HAL_ADC_ConfigChannel+0x288>)
 80068dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <HAL_ADC_ConfigChannel+0x284>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d125      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x268>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <HAL_ADC_ConfigChannel+0x280>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <HAL_ADC_ConfigChannel+0x22e>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b11      	cmp	r3, #17
 80068fc:	d11c      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80068fe:	4b16      	ldr	r3, [pc, #88]	; (8006958 <HAL_ADC_ConfigChannel+0x288>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <HAL_ADC_ConfigChannel+0x288>)
 8006904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006908:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a10      	ldr	r2, [pc, #64]	; (8006950 <HAL_ADC_ConfigChannel+0x280>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d111      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <HAL_ADC_ConfigChannel+0x28c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a11      	ldr	r2, [pc, #68]	; (8006960 <HAL_ADC_ConfigChannel+0x290>)
 800691a:	fba2 2303 	umull	r2, r3, r2, r3
 800691e:	0c9a      	lsrs	r2, r3, #18
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800692a:	e002      	b.n	8006932 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3b01      	subs	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f9      	bne.n	800692c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	10000012 	.word	0x10000012
 8006954:	40012000 	.word	0x40012000
 8006958:	40012300 	.word	0x40012300
 800695c:	200000cc 	.word	0x200000cc
 8006960:	431bde83 	.word	0x431bde83

08006964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800696c:	4b78      	ldr	r3, [pc, #480]	; (8006b50 <ADC_Init+0x1ec>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a77      	ldr	r2, [pc, #476]	; (8006b50 <ADC_Init+0x1ec>)
 8006972:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006976:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006978:	4b75      	ldr	r3, [pc, #468]	; (8006b50 <ADC_Init+0x1ec>)
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4973      	ldr	r1, [pc, #460]	; (8006b50 <ADC_Init+0x1ec>)
 8006982:	4313      	orrs	r3, r2
 8006984:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6859      	ldr	r1, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	021a      	lsls	r2, r3, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80069b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6859      	ldr	r1, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6899      	ldr	r1, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	4a58      	ldr	r2, [pc, #352]	; (8006b54 <ADC_Init+0x1f0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d022      	beq.n	8006a3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6899      	ldr	r1, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6899      	ldr	r1, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	609a      	str	r2, [r3, #8]
 8006a3c:	e00f      	b.n	8006a5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0202 	bic.w	r2, r2, #2
 8006a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6899      	ldr	r1, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	005a      	lsls	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01b      	beq.n	8006ac4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	035a      	lsls	r2, r3, #13
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	605a      	str	r2, [r3, #4]
 8006ac2:	e007      	b.n	8006ad4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	051a      	lsls	r2, r3, #20
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6899      	ldr	r1, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b16:	025a      	lsls	r2, r3, #9
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	029a      	lsls	r2, r3, #10
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40012300 	.word	0x40012300
 8006b54:	0f000001 	.word	0x0f000001

08006b58 <__NVIC_SetPriorityGrouping>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <__NVIC_SetPriorityGrouping+0x40>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b74:	4013      	ands	r3, r2
 8006b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <__NVIC_SetPriorityGrouping+0x44>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b86:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <__NVIC_SetPriorityGrouping+0x40>)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	60d3      	str	r3, [r2, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	e000ed00 	.word	0xe000ed00
 8006b9c:	05fa0000 	.word	0x05fa0000

08006ba0 <__NVIC_GetPriorityGrouping>:
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	0a1b      	lsrs	r3, r3, #8
 8006baa:	f003 0307 	and.w	r3, r3, #7
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	e000ed00 	.word	0xe000ed00

08006bbc <__NVIC_EnableIRQ>:
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	db0b      	blt.n	8006be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	f003 021f 	and.w	r2, r3, #31
 8006bd4:	4907      	ldr	r1, [pc, #28]	; (8006bf4 <__NVIC_EnableIRQ+0x38>)
 8006bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	2001      	movs	r0, #1
 8006bde:	fa00 f202 	lsl.w	r2, r0, r2
 8006be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	e000e100 	.word	0xe000e100

08006bf8 <__NVIC_SetPriority>:
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db0a      	blt.n	8006c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	490c      	ldr	r1, [pc, #48]	; (8006c44 <__NVIC_SetPriority+0x4c>)
 8006c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c16:	0112      	lsls	r2, r2, #4
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c20:	e00a      	b.n	8006c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	4908      	ldr	r1, [pc, #32]	; (8006c48 <__NVIC_SetPriority+0x50>)
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	3b04      	subs	r3, #4
 8006c30:	0112      	lsls	r2, r2, #4
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	440b      	add	r3, r1
 8006c36:	761a      	strb	r2, [r3, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	e000e100 	.word	0xe000e100
 8006c48:	e000ed00 	.word	0xe000ed00

08006c4c <NVIC_EncodePriority>:
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b089      	sub	sp, #36	; 0x24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f1c3 0307 	rsb	r3, r3, #7
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	bf28      	it	cs
 8006c6a:	2304      	movcs	r3, #4
 8006c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	3304      	adds	r3, #4
 8006c72:	2b06      	cmp	r3, #6
 8006c74:	d902      	bls.n	8006c7c <NVIC_EncodePriority+0x30>
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	3b03      	subs	r3, #3
 8006c7a:	e000      	b.n	8006c7e <NVIC_EncodePriority+0x32>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c80:	f04f 32ff 	mov.w	r2, #4294967295
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	43da      	mvns	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	401a      	ands	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c94:	f04f 31ff 	mov.w	r1, #4294967295
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9e:	43d9      	mvns	r1, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca4:	4313      	orrs	r3, r2
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3724      	adds	r7, #36	; 0x24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
	...

08006cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cc4:	d301      	bcc.n	8006cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e00f      	b.n	8006cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cca:	4a0a      	ldr	r2, [pc, #40]	; (8006cf4 <SysTick_Config+0x40>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cd2:	210f      	movs	r1, #15
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	f7ff ff8e 	bl	8006bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <SysTick_Config+0x40>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ce2:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <SysTick_Config+0x40>)
 8006ce4:	2207      	movs	r2, #7
 8006ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	e000e010 	.word	0xe000e010

08006cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff ff29 	bl	8006b58 <__NVIC_SetPriorityGrouping>
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	4603      	mov	r3, r0
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d20:	f7ff ff3e 	bl	8006ba0 <__NVIC_GetPriorityGrouping>
 8006d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	f7ff ff8e 	bl	8006c4c <NVIC_EncodePriority>
 8006d30:	4602      	mov	r2, r0
 8006d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d36:	4611      	mov	r1, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff ff5d 	bl	8006bf8 <__NVIC_SetPriority>
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff ff31 	bl	8006bbc <__NVIC_EnableIRQ>
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff ffa2 	bl	8006cb4 <SysTick_Config>
 8006d70:	4603      	mov	r3, r0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	; 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	e175      	b.n	8007088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4013      	ands	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	f040 8164 	bne.w	8007082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d00b      	beq.n	8006dda <HAL_GPIO_Init+0x5e>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d007      	beq.n	8006dda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dce:	2b11      	cmp	r3, #17
 8006dd0:	d003      	beq.n	8006dda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b12      	cmp	r3, #18
 8006dd8:	d130      	bne.n	8006e3c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	2203      	movs	r2, #3
 8006de6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dea:	43db      	mvns	r3, r3
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	4013      	ands	r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e10:	2201      	movs	r2, #1
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 0201 	and.w	r2, r3, #1
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	2203      	movs	r2, #3
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	4013      	ands	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d003      	beq.n	8006e7c <HAL_GPIO_Init+0x100>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2b12      	cmp	r3, #18
 8006e7a:	d123      	bne.n	8006ec4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	08da      	lsrs	r2, r3, #3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3208      	adds	r2, #8
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	220f      	movs	r2, #15
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	08da      	lsrs	r2, r3, #3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3208      	adds	r2, #8
 8006ebe:	69b9      	ldr	r1, [r7, #24]
 8006ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	2203      	movs	r2, #3
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f003 0203 	and.w	r2, r3, #3
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80be 	beq.w	8007082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f06:	4b66      	ldr	r3, [pc, #408]	; (80070a0 <HAL_GPIO_Init+0x324>)
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	4a65      	ldr	r2, [pc, #404]	; (80070a0 <HAL_GPIO_Init+0x324>)
 8006f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f10:	6453      	str	r3, [r2, #68]	; 0x44
 8006f12:	4b63      	ldr	r3, [pc, #396]	; (80070a0 <HAL_GPIO_Init+0x324>)
 8006f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006f1e:	4a61      	ldr	r2, [pc, #388]	; (80070a4 <HAL_GPIO_Init+0x328>)
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	3302      	adds	r3, #2
 8006f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	220f      	movs	r2, #15
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	43db      	mvns	r3, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a58      	ldr	r2, [pc, #352]	; (80070a8 <HAL_GPIO_Init+0x32c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d037      	beq.n	8006fba <HAL_GPIO_Init+0x23e>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a57      	ldr	r2, [pc, #348]	; (80070ac <HAL_GPIO_Init+0x330>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d031      	beq.n	8006fb6 <HAL_GPIO_Init+0x23a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a56      	ldr	r2, [pc, #344]	; (80070b0 <HAL_GPIO_Init+0x334>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d02b      	beq.n	8006fb2 <HAL_GPIO_Init+0x236>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a55      	ldr	r2, [pc, #340]	; (80070b4 <HAL_GPIO_Init+0x338>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d025      	beq.n	8006fae <HAL_GPIO_Init+0x232>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a54      	ldr	r2, [pc, #336]	; (80070b8 <HAL_GPIO_Init+0x33c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01f      	beq.n	8006faa <HAL_GPIO_Init+0x22e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a53      	ldr	r2, [pc, #332]	; (80070bc <HAL_GPIO_Init+0x340>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d019      	beq.n	8006fa6 <HAL_GPIO_Init+0x22a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a52      	ldr	r2, [pc, #328]	; (80070c0 <HAL_GPIO_Init+0x344>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_GPIO_Init+0x226>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a51      	ldr	r2, [pc, #324]	; (80070c4 <HAL_GPIO_Init+0x348>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00d      	beq.n	8006f9e <HAL_GPIO_Init+0x222>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a50      	ldr	r2, [pc, #320]	; (80070c8 <HAL_GPIO_Init+0x34c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <HAL_GPIO_Init+0x21e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a4f      	ldr	r2, [pc, #316]	; (80070cc <HAL_GPIO_Init+0x350>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d101      	bne.n	8006f96 <HAL_GPIO_Init+0x21a>
 8006f92:	2309      	movs	r3, #9
 8006f94:	e012      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006f96:	230a      	movs	r3, #10
 8006f98:	e010      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	e00e      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006f9e:	2307      	movs	r3, #7
 8006fa0:	e00c      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006fa2:	2306      	movs	r3, #6
 8006fa4:	e00a      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006fa6:	2305      	movs	r3, #5
 8006fa8:	e008      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006faa:	2304      	movs	r3, #4
 8006fac:	e006      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e004      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e002      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <HAL_GPIO_Init+0x240>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f002 0203 	and.w	r2, r2, #3
 8006fc2:	0092      	lsls	r2, r2, #2
 8006fc4:	4093      	lsls	r3, r2
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006fcc:	4935      	ldr	r1, [pc, #212]	; (80070a4 <HAL_GPIO_Init+0x328>)
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	089b      	lsrs	r3, r3, #2
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fda:	4b3d      	ldr	r3, [pc, #244]	; (80070d0 <HAL_GPIO_Init+0x354>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ffe:	4a34      	ldr	r2, [pc, #208]	; (80070d0 <HAL_GPIO_Init+0x354>)
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007004:	4b32      	ldr	r3, [pc, #200]	; (80070d0 <HAL_GPIO_Init+0x354>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	43db      	mvns	r3, r3
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	4013      	ands	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007028:	4a29      	ldr	r2, [pc, #164]	; (80070d0 <HAL_GPIO_Init+0x354>)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800702e:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <HAL_GPIO_Init+0x354>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	43db      	mvns	r3, r3
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4013      	ands	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007052:	4a1f      	ldr	r2, [pc, #124]	; (80070d0 <HAL_GPIO_Init+0x354>)
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007058:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <HAL_GPIO_Init+0x354>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	43db      	mvns	r3, r3
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	4013      	ands	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800707c:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <HAL_GPIO_Init+0x354>)
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3301      	adds	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	f67f ae86 	bls.w	8006d9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	3724      	adds	r7, #36	; 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40023800 	.word	0x40023800
 80070a4:	40013800 	.word	0x40013800
 80070a8:	40020000 	.word	0x40020000
 80070ac:	40020400 	.word	0x40020400
 80070b0:	40020800 	.word	0x40020800
 80070b4:	40020c00 	.word	0x40020c00
 80070b8:	40021000 	.word	0x40021000
 80070bc:	40021400 	.word	0x40021400
 80070c0:	40021800 	.word	0x40021800
 80070c4:	40021c00 	.word	0x40021c00
 80070c8:	40022000 	.word	0x40022000
 80070cc:	40022400 	.word	0x40022400
 80070d0:	40013c00 	.word	0x40013c00

080070d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	887b      	ldrh	r3, [r7, #2]
 80070e6:	4013      	ands	r3, r2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
 80070f0:	e001      	b.n	80070f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	807b      	strh	r3, [r7, #2]
 8007110:	4613      	mov	r3, r2
 8007112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007114:	787b      	ldrb	r3, [r7, #1]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800711a:	887a      	ldrh	r2, [r7, #2]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007120:	e003      	b.n	800712a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007122:	887b      	ldrh	r3, [r7, #2]
 8007124:	041a      	lsls	r2, r3, #16
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	619a      	str	r2, [r3, #24]
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007142:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007144:	695a      	ldr	r2, [r3, #20]
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	4013      	ands	r3, r2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d006      	beq.n	800715c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800714e:	4a05      	ldr	r2, [pc, #20]	; (8007164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007154:	88fb      	ldrh	r3, [r7, #6]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd fc48 	bl	80049ec <HAL_GPIO_EXTI_Callback>
  }
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40013c00 	.word	0x40013c00

08007168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e07f      	b.n	800727a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7f9 fdd2 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	; 0x24
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d107      	bne.n	80071e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	e006      	b.n	80071f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d104      	bne.n	8007202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6859      	ldr	r1, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	4b1d      	ldr	r3, [pc, #116]	; (8007284 <HAL_I2C_Init+0x11c>)
 800720e:	430b      	orrs	r3, r1
 8007210:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007220:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	ea42 0103 	orr.w	r1, r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	69d9      	ldr	r1, [r3, #28]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a1a      	ldr	r2, [r3, #32]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	02008000 	.word	0x02008000

08007288 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	461a      	mov	r2, r3
 8007294:	460b      	mov	r3, r1
 8007296:	817b      	strh	r3, [r7, #10]
 8007298:	4613      	mov	r3, r2
 800729a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	f040 80da 	bne.w	800745e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_I2C_Master_Transmit+0x30>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e0d3      	b.n	8007460 <HAL_I2C_Master_Transmit+0x1d8>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072c0:	f7ff f82c 	bl	800631c <HAL_GetTick>
 80072c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2319      	movs	r3, #25
 80072cc:	2201      	movs	r2, #1
 80072ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fcbc 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e0be      	b.n	8007460 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2221      	movs	r2, #33	; 0x21
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2210      	movs	r2, #16
 80072ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	893a      	ldrh	r2, [r7, #8]
 8007302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730e:	b29b      	uxth	r3, r3
 8007310:	2bff      	cmp	r3, #255	; 0xff
 8007312:	d90e      	bls.n	8007332 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	22ff      	movs	r2, #255	; 0xff
 8007318:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731e:	b2da      	uxtb	r2, r3
 8007320:	8979      	ldrh	r1, [r7, #10]
 8007322:	4b51      	ldr	r3, [pc, #324]	; (8007468 <HAL_I2C_Master_Transmit+0x1e0>)
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fe1e 	bl	8007f6c <I2C_TransferConfig>
 8007330:	e06c      	b.n	800740c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007340:	b2da      	uxtb	r2, r3
 8007342:	8979      	ldrh	r1, [r7, #10]
 8007344:	4b48      	ldr	r3, [pc, #288]	; (8007468 <HAL_I2C_Master_Transmit+0x1e0>)
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fe0d 	bl	8007f6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007352:	e05b      	b.n	800740c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	6a39      	ldr	r1, [r7, #32]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fcb9 	bl	8007cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e07b      	b.n	8007460 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d034      	beq.n	800740c <HAL_I2C_Master_Transmit+0x184>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d130      	bne.n	800740c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	2200      	movs	r2, #0
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 fc4b 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e04d      	b.n	8007460 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d90e      	bls.n	80073ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	22ff      	movs	r2, #255	; 0xff
 80073d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	8979      	ldrh	r1, [r7, #10]
 80073dc:	2300      	movs	r3, #0
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fdc1 	bl	8007f6c <I2C_TransferConfig>
 80073ea:	e00f      	b.n	800740c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	8979      	ldrh	r1, [r7, #10]
 80073fe:	2300      	movs	r3, #0
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fdb0 	bl	8007f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d19e      	bne.n	8007354 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	6a39      	ldr	r1, [r7, #32]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fc98 	bl	8007d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e01a      	b.n	8007460 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2220      	movs	r2, #32
 8007430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <HAL_I2C_Master_Transmit+0x1e4>)
 800743e:	400b      	ands	r3, r1
 8007440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	80002000 	.word	0x80002000
 800746c:	fe00e800 	.word	0xfe00e800

08007470 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	461a      	mov	r2, r3
 800747c:	460b      	mov	r3, r1
 800747e:	817b      	strh	r3, [r7, #10]
 8007480:	4613      	mov	r3, r2
 8007482:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b20      	cmp	r3, #32
 800748e:	f040 80db 	bne.w	8007648 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_I2C_Master_Receive+0x30>
 800749c:	2302      	movs	r3, #2
 800749e:	e0d4      	b.n	800764a <HAL_I2C_Master_Receive+0x1da>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074a8:	f7fe ff38 	bl	800631c <HAL_GetTick>
 80074ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	2319      	movs	r3, #25
 80074b4:	2201      	movs	r2, #1
 80074b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fbc8 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e0bf      	b.n	800764a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2222      	movs	r2, #34	; 0x22
 80074ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2210      	movs	r2, #16
 80074d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	893a      	ldrh	r2, [r7, #8]
 80074ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2bff      	cmp	r3, #255	; 0xff
 80074fa:	d90e      	bls.n	800751a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	22ff      	movs	r2, #255	; 0xff
 8007500:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007506:	b2da      	uxtb	r2, r3
 8007508:	8979      	ldrh	r1, [r7, #10]
 800750a:	4b52      	ldr	r3, [pc, #328]	; (8007654 <HAL_I2C_Master_Receive+0x1e4>)
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fd2a 	bl	8007f6c <I2C_TransferConfig>
 8007518:	e06d      	b.n	80075f6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751e:	b29a      	uxth	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007528:	b2da      	uxtb	r2, r3
 800752a:	8979      	ldrh	r1, [r7, #10]
 800752c:	4b49      	ldr	r3, [pc, #292]	; (8007654 <HAL_I2C_Master_Receive+0x1e4>)
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fd19 	bl	8007f6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800753a:	e05c      	b.n	80075f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	6a39      	ldr	r1, [r7, #32]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fc41 	bl	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e07c      	b.n	800764a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d034      	beq.n	80075f6 <HAL_I2C_Master_Receive+0x186>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d130      	bne.n	80075f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	2200      	movs	r2, #0
 800759c:	2180      	movs	r1, #128	; 0x80
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fb56 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e04d      	b.n	800764a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2bff      	cmp	r3, #255	; 0xff
 80075b6:	d90e      	bls.n	80075d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	22ff      	movs	r2, #255	; 0xff
 80075bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	8979      	ldrh	r1, [r7, #10]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fccc 	bl	8007f6c <I2C_TransferConfig>
 80075d4:	e00f      	b.n	80075f6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	8979      	ldrh	r1, [r7, #10]
 80075e8:	2300      	movs	r3, #0
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fcbb 	bl	8007f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d19d      	bne.n	800753c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	6a39      	ldr	r1, [r7, #32]
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fba3 	bl	8007d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e01a      	b.n	800764a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2220      	movs	r2, #32
 800761a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <HAL_I2C_Master_Receive+0x1e8>)
 8007628:	400b      	ands	r3, r1
 800762a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	e000      	b.n	800764a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
  }
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	80002400 	.word	0x80002400
 8007658:	fe00e800 	.word	0xfe00e800

0800765c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	461a      	mov	r2, r3
 800766a:	4603      	mov	r3, r0
 800766c:	817b      	strh	r3, [r7, #10]
 800766e:	460b      	mov	r3, r1
 8007670:	813b      	strh	r3, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b20      	cmp	r3, #32
 8007680:	f040 80f9 	bne.w	8007876 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_I2C_Mem_Write+0x34>
 800768a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007696:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0ed      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_I2C_Mem_Write+0x4e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e0e6      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076b2:	f7fe fe33 	bl	800631c <HAL_GetTick>
 80076b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2319      	movs	r3, #25
 80076be:	2201      	movs	r2, #1
 80076c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fac3 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0d1      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2221      	movs	r2, #33	; 0x21
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076fc:	88f8      	ldrh	r0, [r7, #6]
 80076fe:	893a      	ldrh	r2, [r7, #8]
 8007700:	8979      	ldrh	r1, [r7, #10]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	4603      	mov	r3, r0
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f9d3 	bl	8007ab8 <I2C_RequestMemoryWrite>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e0a9      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29b      	uxth	r3, r3
 800772a:	2bff      	cmp	r3, #255	; 0xff
 800772c:	d90e      	bls.n	800774c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	22ff      	movs	r2, #255	; 0xff
 8007732:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007738:	b2da      	uxtb	r2, r3
 800773a:	8979      	ldrh	r1, [r7, #10]
 800773c:	2300      	movs	r3, #0
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fc11 	bl	8007f6c <I2C_TransferConfig>
 800774a:	e00f      	b.n	800776c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775a:	b2da      	uxtb	r2, r3
 800775c:	8979      	ldrh	r1, [r7, #10]
 800775e:	2300      	movs	r3, #0
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fc00 	bl	8007f6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 faad 	bl	8007cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e07b      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	781a      	ldrb	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d034      	beq.n	8007824 <HAL_I2C_Mem_Write+0x1c8>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d130      	bne.n	8007824 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	2200      	movs	r2, #0
 80077ca:	2180      	movs	r1, #128	; 0x80
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fa3f 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e04d      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	d90e      	bls.n	8007804 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	22ff      	movs	r2, #255	; 0xff
 80077ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	8979      	ldrh	r1, [r7, #10]
 80077f4:	2300      	movs	r3, #0
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fbb5 	bl	8007f6c <I2C_TransferConfig>
 8007802:	e00f      	b.n	8007824 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007812:	b2da      	uxtb	r2, r3
 8007814:	8979      	ldrh	r1, [r7, #10]
 8007816:	2300      	movs	r3, #0
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fba4 	bl	8007f6c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d19e      	bne.n	800776c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fa8c 	bl	8007d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e01a      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2220      	movs	r2, #32
 8007848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6859      	ldr	r1, [r3, #4]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <HAL_I2C_Mem_Write+0x224>)
 8007856:	400b      	ands	r3, r1
 8007858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	fe00e800 	.word	0xfe00e800

08007884 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4603      	mov	r3, r0
 8007894:	817b      	strh	r3, [r7, #10]
 8007896:	460b      	mov	r3, r1
 8007898:	813b      	strh	r3, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	f040 80fd 	bne.w	8007aa6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_I2C_Mem_Read+0x34>
 80078b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d105      	bne.n	80078c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0f1      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d101      	bne.n	80078d2 <HAL_I2C_Mem_Read+0x4e>
 80078ce:	2302      	movs	r3, #2
 80078d0:	e0ea      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078da:	f7fe fd1f 	bl	800631c <HAL_GetTick>
 80078de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2319      	movs	r3, #25
 80078e6:	2201      	movs	r2, #1
 80078e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f9af 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0d5      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2222      	movs	r2, #34	; 0x22
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2240      	movs	r2, #64	; 0x40
 8007908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a3a      	ldr	r2, [r7, #32]
 8007916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800791c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007924:	88f8      	ldrh	r0, [r7, #6]
 8007926:	893a      	ldrh	r2, [r7, #8]
 8007928:	8979      	ldrh	r1, [r7, #10]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	4603      	mov	r3, r0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f913 	bl	8007b60 <I2C_RequestMemoryRead>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e0ad      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	2bff      	cmp	r3, #255	; 0xff
 8007954:	d90e      	bls.n	8007974 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	22ff      	movs	r2, #255	; 0xff
 800795a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007960:	b2da      	uxtb	r2, r3
 8007962:	8979      	ldrh	r1, [r7, #10]
 8007964:	4b52      	ldr	r3, [pc, #328]	; (8007ab0 <HAL_I2C_Mem_Read+0x22c>)
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fafd 	bl	8007f6c <I2C_TransferConfig>
 8007972:	e00f      	b.n	8007994 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007982:	b2da      	uxtb	r2, r3
 8007984:	8979      	ldrh	r1, [r7, #10]
 8007986:	4b4a      	ldr	r3, [pc, #296]	; (8007ab0 <HAL_I2C_Mem_Read+0x22c>)
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 faec 	bl	8007f6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	2200      	movs	r2, #0
 800799c:	2104      	movs	r1, #4
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f956 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e07c      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d034      	beq.n	8007a54 <HAL_I2C_Mem_Read+0x1d0>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d130      	bne.n	8007a54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	2200      	movs	r2, #0
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f927 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e04d      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2bff      	cmp	r3, #255	; 0xff
 8007a14:	d90e      	bls.n	8007a34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	22ff      	movs	r2, #255	; 0xff
 8007a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	8979      	ldrh	r1, [r7, #10]
 8007a24:	2300      	movs	r3, #0
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fa9d 	bl	8007f6c <I2C_TransferConfig>
 8007a32:	e00f      	b.n	8007a54 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	8979      	ldrh	r1, [r7, #10]
 8007a46:	2300      	movs	r3, #0
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fa8c 	bl	8007f6c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d19a      	bne.n	8007994 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f974 	bl	8007d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e01a      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2220      	movs	r2, #32
 8007a78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6859      	ldr	r1, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <HAL_I2C_Mem_Read+0x230>)
 8007a86:	400b      	ands	r3, r1
 8007a88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	80002400 	.word	0x80002400
 8007ab4:	fe00e800 	.word	0xfe00e800

08007ab8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	817b      	strh	r3, [r7, #10]
 8007aca:	460b      	mov	r3, r1
 8007acc:	813b      	strh	r3, [r7, #8]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	8979      	ldrh	r1, [r7, #10]
 8007ad8:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <I2C_RequestMemoryWrite+0xa4>)
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fa43 	bl	8007f6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	69b9      	ldr	r1, [r7, #24]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 f8f0 	bl	8007cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e02c      	b.n	8007b54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d105      	bne.n	8007b0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28
 8007b0a:	e015      	b.n	8007b38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b0c:	893b      	ldrh	r3, [r7, #8]
 8007b0e:	0a1b      	lsrs	r3, r3, #8
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	69b9      	ldr	r1, [r7, #24]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f8d6 	bl	8007cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e012      	b.n	8007b54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b2e:	893b      	ldrh	r3, [r7, #8]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2180      	movs	r1, #128	; 0x80
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f884 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	80002000 	.word	0x80002000

08007b60 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	4608      	mov	r0, r1
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	4603      	mov	r3, r0
 8007b70:	817b      	strh	r3, [r7, #10]
 8007b72:	460b      	mov	r3, r1
 8007b74:	813b      	strh	r3, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	8979      	ldrh	r1, [r7, #10]
 8007b80:	4b20      	ldr	r3, [pc, #128]	; (8007c04 <I2C_RequestMemoryRead+0xa4>)
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f9f0 	bl	8007f6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	69b9      	ldr	r1, [r7, #24]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f89d 	bl	8007cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e02c      	b.n	8007bfa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d105      	bne.n	8007bb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ba6:	893b      	ldrh	r3, [r7, #8]
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28
 8007bb0:	e015      	b.n	8007bde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bb2:	893b      	ldrh	r3, [r7, #8]
 8007bb4:	0a1b      	lsrs	r3, r3, #8
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	69b9      	ldr	r1, [r7, #24]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f883 	bl	8007cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e012      	b.n	8007bfa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bd4:	893b      	ldrh	r3, [r7, #8]
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2200      	movs	r2, #0
 8007be6:	2140      	movs	r1, #64	; 0x40
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f831 	bl	8007c50 <I2C_WaitOnFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	80002000 	.word	0x80002000

08007c08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d103      	bne.n	8007c26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2200      	movs	r2, #0
 8007c24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d007      	beq.n	8007c44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0201 	orr.w	r2, r2, #1
 8007c42:	619a      	str	r2, [r3, #24]
  }
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c60:	e022      	b.n	8007ca8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d01e      	beq.n	8007ca8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6a:	f7fe fb57 	bl	800631c <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d302      	bcc.n	8007c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d113      	bne.n	8007ca8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c84:	f043 0220 	orr.w	r2, r3, #32
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e00f      	b.n	8007cc8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699a      	ldr	r2, [r3, #24]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d0cd      	beq.n	8007c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cdc:	e02c      	b.n	8007d38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f8dc 	bl	8007ea0 <I2C_IsAcknowledgeFailed>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e02a      	b.n	8007d48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d01e      	beq.n	8007d38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cfa:	f7fe fb0f 	bl	800631c <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d302      	bcc.n	8007d10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d113      	bne.n	8007d38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d14:	f043 0220 	orr.w	r2, r3, #32
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e007      	b.n	8007d48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d1cb      	bne.n	8007cde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d5c:	e028      	b.n	8007db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f89c 	bl	8007ea0 <I2C_IsAcknowledgeFailed>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e026      	b.n	8007dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d72:	f7fe fad3 	bl	800631c <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d302      	bcc.n	8007d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d113      	bne.n	8007db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8c:	f043 0220 	orr.w	r2, r3, #32
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e007      	b.n	8007dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d1cf      	bne.n	8007d5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dd4:	e055      	b.n	8007e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f860 	bl	8007ea0 <I2C_IsAcknowledgeFailed>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e053      	b.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d129      	bne.n	8007e4c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d105      	bne.n	8007e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e03f      	b.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2220      	movs	r2, #32
 8007e18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6859      	ldr	r1, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007e26:	400b      	ands	r3, r1
 8007e28:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e022      	b.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e4c:	f7fe fa66 	bl	800631c <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d302      	bcc.n	8007e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10f      	bne.n	8007e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	f043 0220 	orr.w	r2, r3, #32
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e007      	b.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d1a2      	bne.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	fe00e800 	.word	0xfe00e800

08007ea0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	f003 0310 	and.w	r3, r3, #16
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d151      	bne.n	8007f5e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eba:	e022      	b.n	8007f02 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d01e      	beq.n	8007f02 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec4:	f7fe fa2a 	bl	800631c <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d302      	bcc.n	8007eda <I2C_IsAcknowledgeFailed+0x3a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d113      	bne.n	8007f02 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	f043 0220 	orr.w	r2, r3, #32
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e02e      	b.n	8007f60 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d1d5      	bne.n	8007ebc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2210      	movs	r2, #16
 8007f16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fe71 	bl	8007c08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6859      	ldr	r1, [r3, #4]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <I2C_IsAcknowledgeFailed+0xc8>)
 8007f32:	400b      	ands	r3, r1
 8007f34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3a:	f043 0204 	orr.w	r2, r3, #4
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e000      	b.n	8007f60 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	fe00e800 	.word	0xfe00e800

08007f6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	817b      	strh	r3, [r7, #10]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	0d5b      	lsrs	r3, r3, #21
 8007f88:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <I2C_TransferConfig+0x58>)
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	43db      	mvns	r3, r3
 8007f92:	ea02 0103 	and.w	r1, r2, r3
 8007f96:	897b      	ldrh	r3, [r7, #10]
 8007f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007f9c:	7a7b      	ldrb	r3, [r7, #9]
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	03ff63ff 	.word	0x03ff63ff

08007fc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d138      	bne.n	8008050 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d101      	bne.n	8007fec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e032      	b.n	8008052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2224      	movs	r2, #36	; 0x24
 8007ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0201 	bic.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800801a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6819      	ldr	r1, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	e000      	b.n	8008052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008050:	2302      	movs	r3, #2
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b20      	cmp	r3, #32
 8008072:	d139      	bne.n	80080e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800807e:	2302      	movs	r3, #2
 8008080:	e033      	b.n	80080ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2224      	movs	r2, #36	; 0x24
 800808e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0201 	bic.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0201 	orr.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a04      	ldr	r2, [pc, #16]	; (8008114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008106:	6013      	str	r3, [r2, #0]
}
 8008108:	bf00      	nop
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	40007000 	.word	0x40007000

08008118 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008122:	4b23      	ldr	r3, [pc, #140]	; (80081b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800812c:	6413      	str	r3, [r2, #64]	; 0x40
 800812e:	4b20      	ldr	r3, [pc, #128]	; (80081b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800813a:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008144:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008146:	f7fe f8e9 	bl	800631c <HAL_GetTick>
 800814a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800814c:	e009      	b.n	8008162 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800814e:	f7fe f8e5 	bl	800631c <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800815c:	d901      	bls.n	8008162 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e022      	b.n	80081a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008162:	4b14      	ldr	r3, [pc, #80]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800816a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800816e:	d1ee      	bne.n	800814e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008170:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0f      	ldr	r2, [pc, #60]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800817a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800817c:	f7fe f8ce 	bl	800631c <HAL_GetTick>
 8008180:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008182:	e009      	b.n	8008198 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008184:	f7fe f8ca 	bl	800631c <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008192:	d901      	bls.n	8008198 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e007      	b.n	80081a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a4:	d1ee      	bne.n	8008184 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	40023800 	.word	0x40023800
 80081b4:	40007000 	.word	0x40007000

080081b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e29b      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 8087 	beq.w	80082ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081dc:	4b96      	ldr	r3, [pc, #600]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 030c 	and.w	r3, r3, #12
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d00c      	beq.n	8008202 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081e8:	4b93      	ldr	r3, [pc, #588]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 030c 	and.w	r3, r3, #12
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d112      	bne.n	800821a <HAL_RCC_OscConfig+0x62>
 80081f4:	4b90      	ldr	r3, [pc, #576]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008200:	d10b      	bne.n	800821a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008202:	4b8d      	ldr	r3, [pc, #564]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d06c      	beq.n	80082e8 <HAL_RCC_OscConfig+0x130>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d168      	bne.n	80082e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e275      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008222:	d106      	bne.n	8008232 <HAL_RCC_OscConfig+0x7a>
 8008224:	4b84      	ldr	r3, [pc, #528]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a83      	ldr	r2, [pc, #524]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800822a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	e02e      	b.n	8008290 <HAL_RCC_OscConfig+0xd8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10c      	bne.n	8008254 <HAL_RCC_OscConfig+0x9c>
 800823a:	4b7f      	ldr	r3, [pc, #508]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a7e      	ldr	r2, [pc, #504]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4b7c      	ldr	r3, [pc, #496]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a7b      	ldr	r2, [pc, #492]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800824c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e01d      	b.n	8008290 <HAL_RCC_OscConfig+0xd8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800825c:	d10c      	bne.n	8008278 <HAL_RCC_OscConfig+0xc0>
 800825e:	4b76      	ldr	r3, [pc, #472]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a75      	ldr	r2, [pc, #468]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	4b73      	ldr	r3, [pc, #460]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a72      	ldr	r2, [pc, #456]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	e00b      	b.n	8008290 <HAL_RCC_OscConfig+0xd8>
 8008278:	4b6f      	ldr	r3, [pc, #444]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a6e      	ldr	r2, [pc, #440]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800827e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b6c      	ldr	r3, [pc, #432]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a6b      	ldr	r2, [pc, #428]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800828a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800828e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d013      	beq.n	80082c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008298:	f7fe f840 	bl	800631c <HAL_GetTick>
 800829c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800829e:	e008      	b.n	80082b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082a0:	f7fe f83c 	bl	800631c <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b64      	cmp	r3, #100	; 0x64
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e229      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082b2:	4b61      	ldr	r3, [pc, #388]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f0      	beq.n	80082a0 <HAL_RCC_OscConfig+0xe8>
 80082be:	e014      	b.n	80082ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7fe f82c 	bl	800631c <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c8:	f7fe f828 	bl	800631c <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b64      	cmp	r3, #100	; 0x64
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e215      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082da:	4b57      	ldr	r3, [pc, #348]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1f0      	bne.n	80082c8 <HAL_RCC_OscConfig+0x110>
 80082e6:	e000      	b.n	80082ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d069      	beq.n	80083ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082f6:	4b50      	ldr	r3, [pc, #320]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 030c 	and.w	r3, r3, #12
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008302:	4b4d      	ldr	r3, [pc, #308]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f003 030c 	and.w	r3, r3, #12
 800830a:	2b08      	cmp	r3, #8
 800830c:	d11c      	bne.n	8008348 <HAL_RCC_OscConfig+0x190>
 800830e:	4b4a      	ldr	r3, [pc, #296]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d116      	bne.n	8008348 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800831a:	4b47      	ldr	r3, [pc, #284]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_RCC_OscConfig+0x17a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d001      	beq.n	8008332 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e1e9      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008332:	4b41      	ldr	r3, [pc, #260]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	493d      	ldr	r1, [pc, #244]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008342:	4313      	orrs	r3, r2
 8008344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008346:	e040      	b.n	80083ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d023      	beq.n	8008398 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008350:	4b39      	ldr	r3, [pc, #228]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a38      	ldr	r2, [pc, #224]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835c:	f7fd ffde 	bl	800631c <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008364:	f7fd ffda 	bl	800631c <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e1c7      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008376:	4b30      	ldr	r3, [pc, #192]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008382:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4929      	ldr	r1, [pc, #164]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008392:	4313      	orrs	r3, r2
 8008394:	600b      	str	r3, [r1, #0]
 8008396:	e018      	b.n	80083ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008398:	4b27      	ldr	r3, [pc, #156]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a26      	ldr	r2, [pc, #152]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 800839e:	f023 0301 	bic.w	r3, r3, #1
 80083a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7fd ffba 	bl	800631c <HAL_GetTick>
 80083a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083aa:	e008      	b.n	80083be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083ac:	f7fd ffb6 	bl	800631c <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e1a3      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083be:	4b1e      	ldr	r3, [pc, #120]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1f0      	bne.n	80083ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0308 	and.w	r3, r3, #8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d038      	beq.n	8008448 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d019      	beq.n	8008412 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083de:	4b16      	ldr	r3, [pc, #88]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80083e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e2:	4a15      	ldr	r2, [pc, #84]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 80083e4:	f043 0301 	orr.w	r3, r3, #1
 80083e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ea:	f7fd ff97 	bl	800631c <HAL_GetTick>
 80083ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083f2:	f7fd ff93 	bl	800631c <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e180      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <HAL_RCC_OscConfig+0x23a>
 8008410:	e01a      	b.n	8008448 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008416:	4a08      	ldr	r2, [pc, #32]	; (8008438 <HAL_RCC_OscConfig+0x280>)
 8008418:	f023 0301 	bic.w	r3, r3, #1
 800841c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841e:	f7fd ff7d 	bl	800631c <HAL_GetTick>
 8008422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008424:	e00a      	b.n	800843c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008426:	f7fd ff79 	bl	800631c <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d903      	bls.n	800843c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e166      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
 8008438:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800843c:	4b92      	ldr	r3, [pc, #584]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 800843e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1ee      	bne.n	8008426 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80a4 	beq.w	800859e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008456:	4b8c      	ldr	r3, [pc, #560]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10d      	bne.n	800847e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008462:	4b89      	ldr	r3, [pc, #548]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	4a88      	ldr	r2, [pc, #544]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800846c:	6413      	str	r3, [r2, #64]	; 0x40
 800846e:	4b86      	ldr	r3, [pc, #536]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008476:	60bb      	str	r3, [r7, #8]
 8008478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800847e:	4b83      	ldr	r3, [pc, #524]	; (800868c <HAL_RCC_OscConfig+0x4d4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008486:	2b00      	cmp	r3, #0
 8008488:	d118      	bne.n	80084bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800848a:	4b80      	ldr	r3, [pc, #512]	; (800868c <HAL_RCC_OscConfig+0x4d4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a7f      	ldr	r2, [pc, #508]	; (800868c <HAL_RCC_OscConfig+0x4d4>)
 8008490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008496:	f7fd ff41 	bl	800631c <HAL_GetTick>
 800849a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800849c:	e008      	b.n	80084b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800849e:	f7fd ff3d 	bl	800631c <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b64      	cmp	r3, #100	; 0x64
 80084aa:	d901      	bls.n	80084b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e12a      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084b0:	4b76      	ldr	r3, [pc, #472]	; (800868c <HAL_RCC_OscConfig+0x4d4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0f0      	beq.n	800849e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d106      	bne.n	80084d2 <HAL_RCC_OscConfig+0x31a>
 80084c4:	4b70      	ldr	r3, [pc, #448]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80084c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c8:	4a6f      	ldr	r2, [pc, #444]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	6713      	str	r3, [r2, #112]	; 0x70
 80084d0:	e02d      	b.n	800852e <HAL_RCC_OscConfig+0x376>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10c      	bne.n	80084f4 <HAL_RCC_OscConfig+0x33c>
 80084da:	4b6b      	ldr	r3, [pc, #428]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80084dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084de:	4a6a      	ldr	r2, [pc, #424]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80084e0:	f023 0301 	bic.w	r3, r3, #1
 80084e4:	6713      	str	r3, [r2, #112]	; 0x70
 80084e6:	4b68      	ldr	r3, [pc, #416]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	4a67      	ldr	r2, [pc, #412]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80084ec:	f023 0304 	bic.w	r3, r3, #4
 80084f0:	6713      	str	r3, [r2, #112]	; 0x70
 80084f2:	e01c      	b.n	800852e <HAL_RCC_OscConfig+0x376>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	2b05      	cmp	r3, #5
 80084fa:	d10c      	bne.n	8008516 <HAL_RCC_OscConfig+0x35e>
 80084fc:	4b62      	ldr	r3, [pc, #392]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80084fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008500:	4a61      	ldr	r2, [pc, #388]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008502:	f043 0304 	orr.w	r3, r3, #4
 8008506:	6713      	str	r3, [r2, #112]	; 0x70
 8008508:	4b5f      	ldr	r3, [pc, #380]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 800850a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850c:	4a5e      	ldr	r2, [pc, #376]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	6713      	str	r3, [r2, #112]	; 0x70
 8008514:	e00b      	b.n	800852e <HAL_RCC_OscConfig+0x376>
 8008516:	4b5c      	ldr	r3, [pc, #368]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4a5b      	ldr	r2, [pc, #364]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	6713      	str	r3, [r2, #112]	; 0x70
 8008522:	4b59      	ldr	r3, [pc, #356]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008526:	4a58      	ldr	r2, [pc, #352]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008528:	f023 0304 	bic.w	r3, r3, #4
 800852c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d015      	beq.n	8008562 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008536:	f7fd fef1 	bl	800631c <HAL_GetTick>
 800853a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800853c:	e00a      	b.n	8008554 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800853e:	f7fd feed 	bl	800631c <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	f241 3288 	movw	r2, #5000	; 0x1388
 800854c:	4293      	cmp	r3, r2
 800854e:	d901      	bls.n	8008554 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e0d8      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008554:	4b4c      	ldr	r3, [pc, #304]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0ee      	beq.n	800853e <HAL_RCC_OscConfig+0x386>
 8008560:	e014      	b.n	800858c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008562:	f7fd fedb 	bl	800631c <HAL_GetTick>
 8008566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008568:	e00a      	b.n	8008580 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800856a:	f7fd fed7 	bl	800631c <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	f241 3288 	movw	r2, #5000	; 0x1388
 8008578:	4293      	cmp	r3, r2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e0c2      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008580:	4b41      	ldr	r3, [pc, #260]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ee      	bne.n	800856a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800858c:	7dfb      	ldrb	r3, [r7, #23]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d105      	bne.n	800859e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008592:	4b3d      	ldr	r3, [pc, #244]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	4a3c      	ldr	r2, [pc, #240]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800859c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80ae 	beq.w	8008704 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085a8:	4b37      	ldr	r3, [pc, #220]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 030c 	and.w	r3, r3, #12
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d06d      	beq.n	8008690 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d14b      	bne.n	8008654 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085bc:	4b32      	ldr	r3, [pc, #200]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a31      	ldr	r2, [pc, #196]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80085c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c8:	f7fd fea8 	bl	800631c <HAL_GetTick>
 80085cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085ce:	e008      	b.n	80085e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085d0:	f7fd fea4 	bl	800631c <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e091      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085e2:	4b29      	ldr	r3, [pc, #164]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f0      	bne.n	80085d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69da      	ldr	r2, [r3, #28]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	019b      	lsls	r3, r3, #6
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	085b      	lsrs	r3, r3, #1
 8008606:	3b01      	subs	r3, #1
 8008608:	041b      	lsls	r3, r3, #16
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	061b      	lsls	r3, r3, #24
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008618:	071b      	lsls	r3, r3, #28
 800861a:	491b      	ldr	r1, [pc, #108]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 800861c:	4313      	orrs	r3, r2
 800861e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008620:	4b19      	ldr	r3, [pc, #100]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a18      	ldr	r2, [pc, #96]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800862a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862c:	f7fd fe76 	bl	800631c <HAL_GetTick>
 8008630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008634:	f7fd fe72 	bl	800631c <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e05f      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008646:	4b10      	ldr	r3, [pc, #64]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0f0      	beq.n	8008634 <HAL_RCC_OscConfig+0x47c>
 8008652:	e057      	b.n	8008704 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a0b      	ldr	r2, [pc, #44]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 800865a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800865e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008660:	f7fd fe5c 	bl	800631c <HAL_GetTick>
 8008664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008666:	e008      	b.n	800867a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008668:	f7fd fe58 	bl	800631c <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d901      	bls.n	800867a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e045      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <HAL_RCC_OscConfig+0x4d0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1f0      	bne.n	8008668 <HAL_RCC_OscConfig+0x4b0>
 8008686:	e03d      	b.n	8008704 <HAL_RCC_OscConfig+0x54c>
 8008688:	40023800 	.word	0x40023800
 800868c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008690:	4b1f      	ldr	r3, [pc, #124]	; (8008710 <HAL_RCC_OscConfig+0x558>)
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d030      	beq.n	8008700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d129      	bne.n	8008700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d122      	bne.n	8008700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086c0:	4013      	ands	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d119      	bne.n	8008700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	3b01      	subs	r3, #1
 80086da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086dc:	429a      	cmp	r2, r3
 80086de:	d10f      	bne.n	8008700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d107      	bne.n	8008700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d001      	beq.n	8008704 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40023800 	.word	0x40023800

08008714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e0d0      	b.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800872c:	4b6a      	ldr	r3, [pc, #424]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d910      	bls.n	800875c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800873a:	4b67      	ldr	r3, [pc, #412]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f023 020f 	bic.w	r2, r3, #15
 8008742:	4965      	ldr	r1, [pc, #404]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	4313      	orrs	r3, r2
 8008748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800874a:	4b63      	ldr	r3, [pc, #396]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d001      	beq.n	800875c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e0b8      	b.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d020      	beq.n	80087aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008774:	4b59      	ldr	r3, [pc, #356]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	4a58      	ldr	r2, [pc, #352]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 800877a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800877e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800878c:	4b53      	ldr	r3, [pc, #332]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	4a52      	ldr	r2, [pc, #328]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 8008792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008798:	4b50      	ldr	r3, [pc, #320]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	494d      	ldr	r1, [pc, #308]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d040      	beq.n	8008838 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d107      	bne.n	80087ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087be:	4b47      	ldr	r3, [pc, #284]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d115      	bne.n	80087f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e07f      	b.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d107      	bne.n	80087e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087d6:	4b41      	ldr	r3, [pc, #260]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d109      	bne.n	80087f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e073      	b.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087e6:	4b3d      	ldr	r3, [pc, #244]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e06b      	b.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087f6:	4b39      	ldr	r3, [pc, #228]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f023 0203 	bic.w	r2, r3, #3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	4936      	ldr	r1, [pc, #216]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 8008804:	4313      	orrs	r3, r2
 8008806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008808:	f7fd fd88 	bl	800631c <HAL_GetTick>
 800880c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800880e:	e00a      	b.n	8008826 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008810:	f7fd fd84 	bl	800631c <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	f241 3288 	movw	r2, #5000	; 0x1388
 800881e:	4293      	cmp	r3, r2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e053      	b.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008826:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f003 020c 	and.w	r2, r3, #12
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	429a      	cmp	r2, r3
 8008836:	d1eb      	bne.n	8008810 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008838:	4b27      	ldr	r3, [pc, #156]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	429a      	cmp	r2, r3
 8008844:	d210      	bcs.n	8008868 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008846:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f023 020f 	bic.w	r2, r3, #15
 800884e:	4922      	ldr	r1, [pc, #136]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	4313      	orrs	r3, r2
 8008854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008856:	4b20      	ldr	r3, [pc, #128]	; (80088d8 <HAL_RCC_ClockConfig+0x1c4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 030f 	and.w	r3, r3, #15
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	429a      	cmp	r2, r3
 8008862:	d001      	beq.n	8008868 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e032      	b.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d008      	beq.n	8008886 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008874:	4b19      	ldr	r3, [pc, #100]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	4916      	ldr	r1, [pc, #88]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 8008882:	4313      	orrs	r3, r2
 8008884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	490e      	ldr	r1, [pc, #56]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80088a6:	f000 f821 	bl	80088ec <HAL_RCC_GetSysClockFreq>
 80088aa:	4602      	mov	r2, r0
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <HAL_RCC_ClockConfig+0x1c8>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	091b      	lsrs	r3, r3, #4
 80088b2:	f003 030f 	and.w	r3, r3, #15
 80088b6:	490a      	ldr	r1, [pc, #40]	; (80088e0 <HAL_RCC_ClockConfig+0x1cc>)
 80088b8:	5ccb      	ldrb	r3, [r1, r3]
 80088ba:	fa22 f303 	lsr.w	r3, r2, r3
 80088be:	4a09      	ldr	r2, [pc, #36]	; (80088e4 <HAL_RCC_ClockConfig+0x1d0>)
 80088c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <HAL_RCC_ClockConfig+0x1d4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fd fce4 	bl	8006294 <HAL_InitTick>

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	40023c00 	.word	0x40023c00
 80088dc:	40023800 	.word	0x40023800
 80088e0:	0800e818 	.word	0x0800e818
 80088e4:	200000cc 	.word	0x200000cc
 80088e8:	200000d4 	.word	0x200000d4

080088ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	2300      	movs	r3, #0
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	2300      	movs	r3, #0
 80088fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008904:	4b67      	ldr	r3, [pc, #412]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f003 030c 	and.w	r3, r3, #12
 800890c:	2b08      	cmp	r3, #8
 800890e:	d00d      	beq.n	800892c <HAL_RCC_GetSysClockFreq+0x40>
 8008910:	2b08      	cmp	r3, #8
 8008912:	f200 80bd 	bhi.w	8008a90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <HAL_RCC_GetSysClockFreq+0x34>
 800891a:	2b04      	cmp	r3, #4
 800891c:	d003      	beq.n	8008926 <HAL_RCC_GetSysClockFreq+0x3a>
 800891e:	e0b7      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008920:	4b61      	ldr	r3, [pc, #388]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008922:	60bb      	str	r3, [r7, #8]
      break;
 8008924:	e0b7      	b.n	8008a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008926:	4b61      	ldr	r3, [pc, #388]	; (8008aac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008928:	60bb      	str	r3, [r7, #8]
      break;
 800892a:	e0b4      	b.n	8008a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800892c:	4b5d      	ldr	r3, [pc, #372]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008934:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008936:	4b5b      	ldr	r3, [pc, #364]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d04d      	beq.n	80089de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008942:	4b58      	ldr	r3, [pc, #352]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	099b      	lsrs	r3, r3, #6
 8008948:	461a      	mov	r2, r3
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008952:	f04f 0100 	mov.w	r1, #0
 8008956:	ea02 0800 	and.w	r8, r2, r0
 800895a:	ea03 0901 	and.w	r9, r3, r1
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	014b      	lsls	r3, r1, #5
 800896c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008970:	0142      	lsls	r2, r0, #5
 8008972:	4610      	mov	r0, r2
 8008974:	4619      	mov	r1, r3
 8008976:	ebb0 0008 	subs.w	r0, r0, r8
 800897a:	eb61 0109 	sbc.w	r1, r1, r9
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	018b      	lsls	r3, r1, #6
 8008988:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800898c:	0182      	lsls	r2, r0, #6
 800898e:	1a12      	subs	r2, r2, r0
 8008990:	eb63 0301 	sbc.w	r3, r3, r1
 8008994:	f04f 0000 	mov.w	r0, #0
 8008998:	f04f 0100 	mov.w	r1, #0
 800899c:	00d9      	lsls	r1, r3, #3
 800899e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089a2:	00d0      	lsls	r0, r2, #3
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	eb12 0208 	adds.w	r2, r2, r8
 80089ac:	eb43 0309 	adc.w	r3, r3, r9
 80089b0:	f04f 0000 	mov.w	r0, #0
 80089b4:	f04f 0100 	mov.w	r1, #0
 80089b8:	0259      	lsls	r1, r3, #9
 80089ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80089be:	0250      	lsls	r0, r2, #9
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4610      	mov	r0, r2
 80089c6:	4619      	mov	r1, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	f7f7 fc8e 	bl	80002f0 <__aeabi_uldivmod>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4613      	mov	r3, r2
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	e04a      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089de:	4b31      	ldr	r3, [pc, #196]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	099b      	lsrs	r3, r3, #6
 80089e4:	461a      	mov	r2, r3
 80089e6:	f04f 0300 	mov.w	r3, #0
 80089ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80089ee:	f04f 0100 	mov.w	r1, #0
 80089f2:	ea02 0400 	and.w	r4, r2, r0
 80089f6:	ea03 0501 	and.w	r5, r3, r1
 80089fa:	4620      	mov	r0, r4
 80089fc:	4629      	mov	r1, r5
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	f04f 0300 	mov.w	r3, #0
 8008a06:	014b      	lsls	r3, r1, #5
 8008a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008a0c:	0142      	lsls	r2, r0, #5
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	1b00      	subs	r0, r0, r4
 8008a14:	eb61 0105 	sbc.w	r1, r1, r5
 8008a18:	f04f 0200 	mov.w	r2, #0
 8008a1c:	f04f 0300 	mov.w	r3, #0
 8008a20:	018b      	lsls	r3, r1, #6
 8008a22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008a26:	0182      	lsls	r2, r0, #6
 8008a28:	1a12      	subs	r2, r2, r0
 8008a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8008a2e:	f04f 0000 	mov.w	r0, #0
 8008a32:	f04f 0100 	mov.w	r1, #0
 8008a36:	00d9      	lsls	r1, r3, #3
 8008a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a3c:	00d0      	lsls	r0, r2, #3
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	1912      	adds	r2, r2, r4
 8008a44:	eb45 0303 	adc.w	r3, r5, r3
 8008a48:	f04f 0000 	mov.w	r0, #0
 8008a4c:	f04f 0100 	mov.w	r1, #0
 8008a50:	0299      	lsls	r1, r3, #10
 8008a52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008a56:	0290      	lsls	r0, r2, #10
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4619      	mov	r1, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	f7f7 fc42 	bl	80002f0 <__aeabi_uldivmod>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4613      	mov	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008a74:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	0c1b      	lsrs	r3, r3, #16
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	3301      	adds	r3, #1
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8c:	60bb      	str	r3, [r7, #8]
      break;
 8008a8e:	e002      	b.n	8008a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a90:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008a92:	60bb      	str	r3, [r7, #8]
      break;
 8008a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a96:	68bb      	ldr	r3, [r7, #8]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40023800 	.word	0x40023800
 8008aa8:	00f42400 	.word	0x00f42400
 8008aac:	007a1200 	.word	0x007a1200

08008ab0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ab4:	4b03      	ldr	r3, [pc, #12]	; (8008ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	200000cc 	.word	0x200000cc

08008ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008acc:	f7ff fff0 	bl	8008ab0 <HAL_RCC_GetHCLKFreq>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	0a9b      	lsrs	r3, r3, #10
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	4903      	ldr	r1, [pc, #12]	; (8008aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ade:	5ccb      	ldrb	r3, [r1, r3]
 8008ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40023800 	.word	0x40023800
 8008aec:	0800e828 	.word	0x0800e828

08008af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008af4:	f7ff ffdc 	bl	8008ab0 <HAL_RCC_GetHCLKFreq>
 8008af8:	4602      	mov	r2, r0
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	0b5b      	lsrs	r3, r3, #13
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	4903      	ldr	r1, [pc, #12]	; (8008b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b06:	5ccb      	ldrb	r3, [r1, r3]
 8008b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	40023800 	.word	0x40023800
 8008b14:	0800e828 	.word	0x0800e828

08008b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d012      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b40:	4b69      	ldr	r3, [pc, #420]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	4a68      	ldr	r2, [pc, #416]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b4a:	6093      	str	r3, [r2, #8]
 8008b4c:	4b66      	ldr	r3, [pc, #408]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b54:	4964      	ldr	r1, [pc, #400]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008b62:	2301      	movs	r3, #1
 8008b64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d017      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b72:	4b5d      	ldr	r3, [pc, #372]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b80:	4959      	ldr	r1, [pc, #356]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b90:	d101      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008b92:	2301      	movs	r3, #1
 8008b94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d017      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008bae:	4b4e      	ldr	r3, [pc, #312]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	494a      	ldr	r1, [pc, #296]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bcc:	d101      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008bea:	2301      	movs	r3, #1
 8008bec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 808b 	beq.w	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bfc:	4b3a      	ldr	r3, [pc, #232]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	4a39      	ldr	r2, [pc, #228]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c06:	6413      	str	r3, [r2, #64]	; 0x40
 8008c08:	4b37      	ldr	r3, [pc, #220]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c14:	4b35      	ldr	r3, [pc, #212]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a34      	ldr	r2, [pc, #208]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c20:	f7fd fb7c 	bl	800631c <HAL_GetTick>
 8008c24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c26:	e008      	b.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c28:	f7fd fb78 	bl	800631c <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b64      	cmp	r3, #100	; 0x64
 8008c34:	d901      	bls.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e38f      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c3a:	4b2c      	ldr	r3, [pc, #176]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0f0      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c46:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d035      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d02e      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c64:	4b20      	ldr	r3, [pc, #128]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c6e:	4b1e      	ldr	r3, [pc, #120]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	4a1d      	ldr	r2, [pc, #116]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7e:	4a1a      	ldr	r2, [pc, #104]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008c86:	4a18      	ldr	r2, [pc, #96]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008c8c:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d114      	bne.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c98:	f7fd fb40 	bl	800631c <HAL_GetTick>
 8008c9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c9e:	e00a      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ca0:	f7fd fb3c 	bl	800631c <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e351      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cba:	f003 0302 	and.w	r3, r3, #2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0ee      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cce:	d111      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008cdc:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008cde:	400b      	ands	r3, r1
 8008ce0:	4901      	ldr	r1, [pc, #4]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	608b      	str	r3, [r1, #8]
 8008ce6:	e00b      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008ce8:	40023800 	.word	0x40023800
 8008cec:	40007000 	.word	0x40007000
 8008cf0:	0ffffcff 	.word	0x0ffffcff
 8008cf4:	4bb3      	ldr	r3, [pc, #716]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	4ab2      	ldr	r2, [pc, #712]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008cfe:	6093      	str	r3, [r2, #8]
 8008d00:	4bb0      	ldr	r3, [pc, #704]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d0c:	49ad      	ldr	r1, [pc, #692]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d010      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d1e:	4ba9      	ldr	r3, [pc, #676]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d24:	4aa7      	ldr	r2, [pc, #668]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008d2e:	4ba5      	ldr	r3, [pc, #660]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	49a2      	ldr	r1, [pc, #648]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d4c:	4b9d      	ldr	r3, [pc, #628]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d5a:	499a      	ldr	r1, [pc, #616]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d6e:	4b95      	ldr	r3, [pc, #596]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d7c:	4991      	ldr	r1, [pc, #580]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d90:	4b8c      	ldr	r3, [pc, #560]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d9e:	4989      	ldr	r1, [pc, #548]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008db2:	4b84      	ldr	r3, [pc, #528]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc0:	4980      	ldr	r1, [pc, #512]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008dd4:	4b7b      	ldr	r3, [pc, #492]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dda:	f023 0203 	bic.w	r2, r3, #3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de2:	4978      	ldr	r1, [pc, #480]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008df6:	4b73      	ldr	r3, [pc, #460]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfc:	f023 020c 	bic.w	r2, r3, #12
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e04:	496f      	ldr	r1, [pc, #444]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e18:	4b6a      	ldr	r3, [pc, #424]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e26:	4967      	ldr	r1, [pc, #412]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e3a:	4b62      	ldr	r3, [pc, #392]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e48:	495e      	ldr	r1, [pc, #376]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e5c:	4b59      	ldr	r3, [pc, #356]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e6a:	4956      	ldr	r1, [pc, #344]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008e7e:	4b51      	ldr	r3, [pc, #324]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8c:	494d      	ldr	r1, [pc, #308]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00a      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008ea0:	4b48      	ldr	r3, [pc, #288]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eae:	4945      	ldr	r1, [pc, #276]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008ec2:	4b40      	ldr	r3, [pc, #256]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed0:	493c      	ldr	r1, [pc, #240]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ee4:	4b37      	ldr	r3, [pc, #220]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ef2:	4934      	ldr	r1, [pc, #208]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d011      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f06:	4b2f      	ldr	r3, [pc, #188]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f14:	492b      	ldr	r1, [pc, #172]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f24:	d101      	bne.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008f26:	2301      	movs	r3, #1
 8008f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008f36:	2301      	movs	r3, #1
 8008f38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f46:	4b1f      	ldr	r3, [pc, #124]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f54:	491b      	ldr	r1, [pc, #108]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f68:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f78:	4912      	ldr	r1, [pc, #72]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008f8c:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f9c:	4909      	ldr	r1, [pc, #36]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00f      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008fc2:	bf00      	nop
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	4986      	ldr	r1, [pc, #536]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008fdc:	4b81      	ldr	r3, [pc, #516]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fec:	497d      	ldr	r1, [pc, #500]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d006      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80d6 	beq.w	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009008:	4b76      	ldr	r3, [pc, #472]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a75      	ldr	r2, [pc, #468]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800900e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009014:	f7fd f982 	bl	800631c <HAL_GetTick>
 8009018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800901a:	e008      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800901c:	f7fd f97e 	bl	800631c <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b64      	cmp	r3, #100	; 0x64
 8009028:	d901      	bls.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e195      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800902e:	4b6d      	ldr	r3, [pc, #436]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1f0      	bne.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d021      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904a:	2b00      	cmp	r3, #0
 800904c:	d11d      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009054:	0c1b      	lsrs	r3, r3, #16
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800905c:	4b61      	ldr	r3, [pc, #388]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800905e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009062:	0e1b      	lsrs	r3, r3, #24
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	019a      	lsls	r2, r3, #6
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	431a      	orrs	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	431a      	orrs	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	071b      	lsls	r3, r3, #28
 8009082:	4958      	ldr	r1, [pc, #352]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009084:	4313      	orrs	r3, r2
 8009086:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800909e:	d00a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d02e      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090b4:	d129      	bne.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80090b6:	4b4b      	ldr	r3, [pc, #300]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090bc:	0c1b      	lsrs	r3, r3, #16
 80090be:	f003 0303 	and.w	r3, r3, #3
 80090c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090c4:	4b47      	ldr	r3, [pc, #284]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ca:	0f1b      	lsrs	r3, r3, #28
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	019a      	lsls	r2, r3, #6
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	041b      	lsls	r3, r3, #16
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	061b      	lsls	r3, r3, #24
 80090e4:	431a      	orrs	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	071b      	lsls	r3, r3, #28
 80090ea:	493e      	ldr	r1, [pc, #248]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80090f2:	4b3c      	ldr	r3, [pc, #240]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f8:	f023 021f 	bic.w	r2, r3, #31
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	3b01      	subs	r3, #1
 8009102:	4938      	ldr	r1, [pc, #224]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009104:	4313      	orrs	r3, r2
 8009106:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01d      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009116:	4b33      	ldr	r3, [pc, #204]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800911c:	0e1b      	lsrs	r3, r3, #24
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009124:	4b2f      	ldr	r3, [pc, #188]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800912a:	0f1b      	lsrs	r3, r3, #28
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	019a      	lsls	r2, r3, #6
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	431a      	orrs	r2, r3
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	061b      	lsls	r3, r3, #24
 8009144:	431a      	orrs	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	071b      	lsls	r3, r3, #28
 800914a:	4926      	ldr	r1, [pc, #152]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800914c:	4313      	orrs	r3, r2
 800914e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d011      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	019a      	lsls	r2, r3, #6
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	041b      	lsls	r3, r3, #16
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	061b      	lsls	r3, r3, #24
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	071b      	lsls	r3, r3, #28
 800917a:	491a      	ldr	r1, [pc, #104]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009182:	4b18      	ldr	r3, [pc, #96]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a17      	ldr	r2, [pc, #92]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009188:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800918c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800918e:	f7fd f8c5 	bl	800631c <HAL_GetTick>
 8009192:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009194:	e008      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009196:	f7fd f8c1 	bl	800631c <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b64      	cmp	r3, #100	; 0x64
 80091a2:	d901      	bls.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e0d8      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091a8:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0f0      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	f040 80ce 	bne.w	8009358 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80091bc:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c8:	f7fd f8a8 	bl	800631c <HAL_GetTick>
 80091cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091ce:	e00b      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80091d0:	f7fd f8a4 	bl	800631c <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b64      	cmp	r3, #100	; 0x64
 80091dc:	d904      	bls.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e0bb      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80091e2:	bf00      	nop
 80091e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091e8:	4b5e      	ldr	r3, [pc, #376]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f4:	d0ec      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009212:	2b00      	cmp	r3, #0
 8009214:	d02e      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d12a      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800921e:	4b51      	ldr	r3, [pc, #324]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009224:	0c1b      	lsrs	r3, r3, #16
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800922c:	4b4d      	ldr	r3, [pc, #308]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800922e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009232:	0f1b      	lsrs	r3, r3, #28
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	019a      	lsls	r2, r3, #6
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	061b      	lsls	r3, r3, #24
 800924c:	431a      	orrs	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	071b      	lsls	r3, r3, #28
 8009252:	4944      	ldr	r1, [pc, #272]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009254:	4313      	orrs	r3, r2
 8009256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800925a:	4b42      	ldr	r3, [pc, #264]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800925c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009260:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	3b01      	subs	r3, #1
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	493d      	ldr	r1, [pc, #244]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d022      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009288:	d11d      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800928a:	4b36      	ldr	r3, [pc, #216]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800928c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009290:	0e1b      	lsrs	r3, r3, #24
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009298:	4b32      	ldr	r3, [pc, #200]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800929a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929e:	0f1b      	lsrs	r3, r3, #28
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	019a      	lsls	r2, r3, #6
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	041b      	lsls	r3, r3, #16
 80092b2:	431a      	orrs	r2, r3
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	061b      	lsls	r3, r3, #24
 80092b8:	431a      	orrs	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	071b      	lsls	r3, r3, #28
 80092be:	4929      	ldr	r1, [pc, #164]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d028      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092d2:	4b24      	ldr	r3, [pc, #144]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d8:	0e1b      	lsrs	r3, r3, #24
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80092e0:	4b20      	ldr	r3, [pc, #128]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	019a      	lsls	r2, r3, #6
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	431a      	orrs	r2, r3
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	061b      	lsls	r3, r3, #24
 80092fe:	431a      	orrs	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	071b      	lsls	r3, r3, #28
 8009306:	4917      	ldr	r1, [pc, #92]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009308:	4313      	orrs	r3, r2
 800930a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800930e:	4b15      	ldr	r3, [pc, #84]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	4911      	ldr	r1, [pc, #68]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800931e:	4313      	orrs	r3, r2
 8009320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009324:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a0e      	ldr	r2, [pc, #56]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800932a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800932e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009330:	f7fc fff4 	bl	800631c <HAL_GetTick>
 8009334:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009336:	e008      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009338:	f7fc fff0 	bl	800631c <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b64      	cmp	r3, #100	; 0x64
 8009344:	d901      	bls.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e007      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800934a:	4b06      	ldr	r3, [pc, #24]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009356:	d1ef      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40023800 	.word	0x40023800

08009368 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e01c      	b.n	80093b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	795b      	ldrb	r3, [r3, #5]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d105      	bne.n	8009390 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7fb fb6c 	bl	8004a68 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0204 	orr.w	r2, r2, #4
 80093a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e09d      	b.n	800950a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d108      	bne.n	80093e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093de:	d009      	beq.n	80093f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	61da      	str	r2, [r3, #28]
 80093e6:	e005      	b.n	80093f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d106      	bne.n	8009414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7fb fb88 	bl	8004b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800942a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009434:	d902      	bls.n	800943c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009436:	2300      	movs	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	e002      	b.n	8009442 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800943c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009440:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800944a:	d007      	beq.n	800945c <HAL_SPI_Init+0xa0>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009454:	d002      	beq.n	800945c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949e:	ea42 0103 	orr.w	r1, r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	f003 0204 	and.w	r2, r3, #4
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	431a      	orrs	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80094d8:	ea42 0103 	orr.w	r1, r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69da      	ldr	r2, [r3, #28]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b088      	sub	sp, #32
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_SPI_Transmit+0x22>
 8009530:	2302      	movs	r3, #2
 8009532:	e158      	b.n	80097e6 <HAL_SPI_Transmit+0x2d4>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800953c:	f7fc feee 	bl	800631c <HAL_GetTick>
 8009540:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b01      	cmp	r3, #1
 8009550:	d002      	beq.n	8009558 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009552:	2302      	movs	r3, #2
 8009554:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009556:	e13d      	b.n	80097d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <HAL_SPI_Transmit+0x52>
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009568:	e134      	b.n	80097d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2203      	movs	r2, #3
 800956e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	88fa      	ldrh	r2, [r7, #6]
 8009582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b4:	d10f      	bne.n	80095d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e0:	2b40      	cmp	r3, #64	; 0x40
 80095e2:	d007      	beq.n	80095f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095fc:	d94b      	bls.n	8009696 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <HAL_SPI_Transmit+0xfa>
 8009606:	8afb      	ldrh	r3, [r7, #22]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d13e      	bne.n	800968a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	881a      	ldrh	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	1c9a      	adds	r2, r3, #2
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009626:	b29b      	uxth	r3, r3
 8009628:	3b01      	subs	r3, #1
 800962a:	b29a      	uxth	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009630:	e02b      	b.n	800968a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b02      	cmp	r3, #2
 800963e:	d112      	bne.n	8009666 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	881a      	ldrh	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	1c9a      	adds	r2, r3, #2
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009664:	e011      	b.n	800968a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009666:	f7fc fe59 	bl	800631c <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d803      	bhi.n	800967e <HAL_SPI_Transmit+0x16c>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967c:	d102      	bne.n	8009684 <HAL_SPI_Transmit+0x172>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d102      	bne.n	800968a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009688:	e0a4      	b.n	80097d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800968e:	b29b      	uxth	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1ce      	bne.n	8009632 <HAL_SPI_Transmit+0x120>
 8009694:	e07c      	b.n	8009790 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <HAL_SPI_Transmit+0x192>
 800969e:	8afb      	ldrh	r3, [r7, #22]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d170      	bne.n	8009786 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d912      	bls.n	80096d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	881a      	ldrh	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	1c9a      	adds	r2, r3, #2
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	3b02      	subs	r3, #2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096d2:	e058      	b.n	8009786 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	330c      	adds	r3, #12
 80096de:	7812      	ldrb	r2, [r2, #0]
 80096e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	3b01      	subs	r3, #1
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80096fa:	e044      	b.n	8009786 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b02      	cmp	r3, #2
 8009708:	d12b      	bne.n	8009762 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800970e:	b29b      	uxth	r3, r3
 8009710:	2b01      	cmp	r3, #1
 8009712:	d912      	bls.n	800973a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	881a      	ldrh	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	1c9a      	adds	r2, r3, #2
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800972e:	b29b      	uxth	r3, r3
 8009730:	3b02      	subs	r3, #2
 8009732:	b29a      	uxth	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009738:	e025      	b.n	8009786 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	7812      	ldrb	r2, [r2, #0]
 8009746:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b29a      	uxth	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009760:	e011      	b.n	8009786 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009762:	f7fc fddb 	bl	800631c <HAL_GetTick>
 8009766:	4602      	mov	r2, r0
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	429a      	cmp	r2, r3
 8009770:	d803      	bhi.n	800977a <HAL_SPI_Transmit+0x268>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d102      	bne.n	8009780 <HAL_SPI_Transmit+0x26e>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009784:	e026      	b.n	80097d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800978a:	b29b      	uxth	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1b5      	bne.n	80096fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f945 	bl	8009a24 <SPI_EndRxTxTransaction>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2220      	movs	r2, #32
 80097a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	613b      	str	r3, [r7, #16]
 80097c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	77fb      	strb	r3, [r7, #31]
 80097d0:	e000      	b.n	80097d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80097d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80097e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3720      	adds	r7, #32
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009800:	f7fc fd8c 	bl	800631c <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	1a9b      	subs	r3, r3, r2
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4413      	add	r3, r2
 800980e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009810:	f7fc fd84 	bl	800631c <HAL_GetTick>
 8009814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009816:	4b39      	ldr	r3, [pc, #228]	; (80098fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	015b      	lsls	r3, r3, #5
 800981c:	0d1b      	lsrs	r3, r3, #20
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	fb02 f303 	mul.w	r3, r2, r3
 8009824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009826:	e054      	b.n	80098d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982e:	d050      	beq.n	80098d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009830:	f7fc fd74 	bl	800631c <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	429a      	cmp	r2, r3
 800983e:	d902      	bls.n	8009846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d13d      	bne.n	80098c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800985e:	d111      	bne.n	8009884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009868:	d004      	beq.n	8009874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009872:	d107      	bne.n	8009884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988c:	d10f      	bne.n	80098ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e017      	b.n	80098f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	4013      	ands	r3, r2
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	429a      	cmp	r2, r3
 80098e0:	bf0c      	ite	eq
 80098e2:	2301      	moveq	r3, #1
 80098e4:	2300      	movne	r3, #0
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d19b      	bne.n	8009828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3720      	adds	r7, #32
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	200000cc 	.word	0x200000cc

08009900 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800990e:	f7fc fd05 	bl	800631c <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	1a9b      	subs	r3, r3, r2
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	4413      	add	r3, r2
 800991c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800991e:	f7fc fcfd 	bl	800631c <HAL_GetTick>
 8009922:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009924:	4b3e      	ldr	r3, [pc, #248]	; (8009a20 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	4613      	mov	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	00da      	lsls	r2, r3, #3
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	0d1b      	lsrs	r3, r3, #20
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	fb02 f303 	mul.w	r3, r2, r3
 800993a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800993c:	e062      	b.n	8009a04 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009944:	d109      	bne.n	800995a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d106      	bne.n	800995a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	330c      	adds	r3, #12
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8009958:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009960:	d050      	beq.n	8009a04 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009962:	f7fc fcdb 	bl	800631c <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	429a      	cmp	r2, r3
 8009970:	d902      	bls.n	8009978 <SPI_WaitFifoStateUntilTimeout+0x78>
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d13d      	bne.n	80099f4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009986:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009990:	d111      	bne.n	80099b6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800999a:	d004      	beq.n	80099a6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a4:	d107      	bne.n	80099b6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099be:	d10f      	bne.n	80099e0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e010      	b.n	8009a16 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d194      	bne.n	800993e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3720      	adds	r7, #32
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200000cc 	.word	0x200000cc

08009a24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7ff ff5f 	bl	8009900 <SPI_WaitFifoStateUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d007      	beq.n	8009a58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a4c:	f043 0220 	orr.w	r2, r3, #32
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e027      	b.n	8009aa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2180      	movs	r1, #128	; 0x80
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7ff fec4 	bl	80097f0 <SPI_WaitFlagStateUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d007      	beq.n	8009a7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a72:	f043 0220 	orr.w	r2, r3, #32
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e014      	b.n	8009aa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff ff38 	bl	8009900 <SPI_WaitFifoStateUntilTimeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d007      	beq.n	8009aa6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a9a:	f043 0220 	orr.w	r2, r3, #32
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e000      	b.n	8009aa8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e049      	b.n	8009b56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fb fad6 	bl	8005088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3304      	adds	r3, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	4610      	mov	r0, r2
 8009af0:	f000 fdb2 	bl	800a658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d001      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e054      	b.n	8009c22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0201 	orr.w	r2, r2, #1
 8009b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a26      	ldr	r2, [pc, #152]	; (8009c30 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d022      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x80>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba2:	d01d      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x80>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a22      	ldr	r2, [pc, #136]	; (8009c34 <HAL_TIM_Base_Start_IT+0xd4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d018      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x80>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a21      	ldr	r2, [pc, #132]	; (8009c38 <HAL_TIM_Base_Start_IT+0xd8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d013      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x80>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a1f      	ldr	r2, [pc, #124]	; (8009c3c <HAL_TIM_Base_Start_IT+0xdc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00e      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x80>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a1e      	ldr	r2, [pc, #120]	; (8009c40 <HAL_TIM_Base_Start_IT+0xe0>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d009      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x80>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1c      	ldr	r2, [pc, #112]	; (8009c44 <HAL_TIM_Base_Start_IT+0xe4>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d004      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x80>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a1b      	ldr	r2, [pc, #108]	; (8009c48 <HAL_TIM_Base_Start_IT+0xe8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d115      	bne.n	8009c0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	689a      	ldr	r2, [r3, #8]
 8009be6:	4b19      	ldr	r3, [pc, #100]	; (8009c4c <HAL_TIM_Base_Start_IT+0xec>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b06      	cmp	r3, #6
 8009bf0:	d015      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0xbe>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf8:	d011      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0201 	orr.w	r2, r2, #1
 8009c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c0a:	e008      	b.n	8009c1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0201 	orr.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	e000      	b.n	8009c20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	40010000 	.word	0x40010000
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800
 8009c3c:	40000c00 	.word	0x40000c00
 8009c40:	40010400 	.word	0x40010400
 8009c44:	40014000 	.word	0x40014000
 8009c48:	40001800 	.word	0x40001800
 8009c4c:	00010007 	.word	0x00010007

08009c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e049      	b.n	8009cf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d106      	bne.n	8009c7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f841 	bl	8009cfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	4610      	mov	r0, r2
 8009c90:	f000 fce2 	bl	800a658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d06:	bf00      	nop
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
	...

08009d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d109      	bne.n	8009d38 <HAL_TIM_PWM_Start+0x24>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	bf14      	ite	ne
 8009d30:	2301      	movne	r3, #1
 8009d32:	2300      	moveq	r3, #0
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	e03c      	b.n	8009db2 <HAL_TIM_PWM_Start+0x9e>
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	d109      	bne.n	8009d52 <HAL_TIM_PWM_Start+0x3e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	bf14      	ite	ne
 8009d4a:	2301      	movne	r3, #1
 8009d4c:	2300      	moveq	r3, #0
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	e02f      	b.n	8009db2 <HAL_TIM_PWM_Start+0x9e>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d109      	bne.n	8009d6c <HAL_TIM_PWM_Start+0x58>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	bf14      	ite	ne
 8009d64:	2301      	movne	r3, #1
 8009d66:	2300      	moveq	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	e022      	b.n	8009db2 <HAL_TIM_PWM_Start+0x9e>
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b0c      	cmp	r3, #12
 8009d70:	d109      	bne.n	8009d86 <HAL_TIM_PWM_Start+0x72>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	bf14      	ite	ne
 8009d7e:	2301      	movne	r3, #1
 8009d80:	2300      	moveq	r3, #0
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	e015      	b.n	8009db2 <HAL_TIM_PWM_Start+0x9e>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b10      	cmp	r3, #16
 8009d8a:	d109      	bne.n	8009da0 <HAL_TIM_PWM_Start+0x8c>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	bf14      	ite	ne
 8009d98:	2301      	movne	r3, #1
 8009d9a:	2300      	moveq	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	e008      	b.n	8009db2 <HAL_TIM_PWM_Start+0x9e>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	bf14      	ite	ne
 8009dac:	2301      	movne	r3, #1
 8009dae:	2300      	moveq	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e092      	b.n	8009ee0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d104      	bne.n	8009dca <HAL_TIM_PWM_Start+0xb6>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dc8:	e023      	b.n	8009e12 <HAL_TIM_PWM_Start+0xfe>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	d104      	bne.n	8009dda <HAL_TIM_PWM_Start+0xc6>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dd8:	e01b      	b.n	8009e12 <HAL_TIM_PWM_Start+0xfe>
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d104      	bne.n	8009dea <HAL_TIM_PWM_Start+0xd6>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009de8:	e013      	b.n	8009e12 <HAL_TIM_PWM_Start+0xfe>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b0c      	cmp	r3, #12
 8009dee:	d104      	bne.n	8009dfa <HAL_TIM_PWM_Start+0xe6>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2202      	movs	r2, #2
 8009df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009df8:	e00b      	b.n	8009e12 <HAL_TIM_PWM_Start+0xfe>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d104      	bne.n	8009e0a <HAL_TIM_PWM_Start+0xf6>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e08:	e003      	b.n	8009e12 <HAL_TIM_PWM_Start+0xfe>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2201      	movs	r2, #1
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 ffb4 	bl	800ad88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a30      	ldr	r2, [pc, #192]	; (8009ee8 <HAL_TIM_PWM_Start+0x1d4>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d004      	beq.n	8009e34 <HAL_TIM_PWM_Start+0x120>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a2f      	ldr	r2, [pc, #188]	; (8009eec <HAL_TIM_PWM_Start+0x1d8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d101      	bne.n	8009e38 <HAL_TIM_PWM_Start+0x124>
 8009e34:	2301      	movs	r3, #1
 8009e36:	e000      	b.n	8009e3a <HAL_TIM_PWM_Start+0x126>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a25      	ldr	r2, [pc, #148]	; (8009ee8 <HAL_TIM_PWM_Start+0x1d4>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d022      	beq.n	8009e9e <HAL_TIM_PWM_Start+0x18a>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e60:	d01d      	beq.n	8009e9e <HAL_TIM_PWM_Start+0x18a>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a22      	ldr	r2, [pc, #136]	; (8009ef0 <HAL_TIM_PWM_Start+0x1dc>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d018      	beq.n	8009e9e <HAL_TIM_PWM_Start+0x18a>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a20      	ldr	r2, [pc, #128]	; (8009ef4 <HAL_TIM_PWM_Start+0x1e0>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d013      	beq.n	8009e9e <HAL_TIM_PWM_Start+0x18a>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <HAL_TIM_PWM_Start+0x1e4>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d00e      	beq.n	8009e9e <HAL_TIM_PWM_Start+0x18a>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a19      	ldr	r2, [pc, #100]	; (8009eec <HAL_TIM_PWM_Start+0x1d8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d009      	beq.n	8009e9e <HAL_TIM_PWM_Start+0x18a>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a1b      	ldr	r2, [pc, #108]	; (8009efc <HAL_TIM_PWM_Start+0x1e8>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d004      	beq.n	8009e9e <HAL_TIM_PWM_Start+0x18a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a19      	ldr	r2, [pc, #100]	; (8009f00 <HAL_TIM_PWM_Start+0x1ec>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d115      	bne.n	8009eca <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	4b17      	ldr	r3, [pc, #92]	; (8009f04 <HAL_TIM_PWM_Start+0x1f0>)
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b06      	cmp	r3, #6
 8009eae:	d015      	beq.n	8009edc <HAL_TIM_PWM_Start+0x1c8>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb6:	d011      	beq.n	8009edc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0201 	orr.w	r2, r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec8:	e008      	b.n	8009edc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f042 0201 	orr.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	e000      	b.n	8009ede <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009edc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40010000 	.word	0x40010000
 8009eec:	40010400 	.word	0x40010400
 8009ef0:	40000400 	.word	0x40000400
 8009ef4:	40000800 	.word	0x40000800
 8009ef8:	40000c00 	.word	0x40000c00
 8009efc:	40014000 	.word	0x40014000
 8009f00:	40001800 	.word	0x40001800
 8009f04:	00010007 	.word	0x00010007

08009f08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2200      	movs	r2, #0
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 ff34 	bl	800ad88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a36      	ldr	r2, [pc, #216]	; (800a000 <HAL_TIM_PWM_Stop+0xf8>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d004      	beq.n	8009f34 <HAL_TIM_PWM_Stop+0x2c>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a35      	ldr	r2, [pc, #212]	; (800a004 <HAL_TIM_PWM_Stop+0xfc>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d101      	bne.n	8009f38 <HAL_TIM_PWM_Stop+0x30>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e000      	b.n	8009f3a <HAL_TIM_PWM_Stop+0x32>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d017      	beq.n	8009f6e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6a1a      	ldr	r2, [r3, #32]
 8009f44:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f48:	4013      	ands	r3, r2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10f      	bne.n	8009f6e <HAL_TIM_PWM_Stop+0x66>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6a1a      	ldr	r2, [r3, #32]
 8009f54:	f240 4344 	movw	r3, #1092	; 0x444
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <HAL_TIM_PWM_Stop+0x66>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6a1a      	ldr	r2, [r3, #32]
 8009f74:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f78:	4013      	ands	r3, r2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10f      	bne.n	8009f9e <HAL_TIM_PWM_Stop+0x96>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6a1a      	ldr	r2, [r3, #32]
 8009f84:	f240 4344 	movw	r3, #1092	; 0x444
 8009f88:	4013      	ands	r3, r2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d107      	bne.n	8009f9e <HAL_TIM_PWM_Stop+0x96>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d104      	bne.n	8009fae <HAL_TIM_PWM_Stop+0xa6>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fac:	e023      	b.n	8009ff6 <HAL_TIM_PWM_Stop+0xee>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b04      	cmp	r3, #4
 8009fb2:	d104      	bne.n	8009fbe <HAL_TIM_PWM_Stop+0xb6>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fbc:	e01b      	b.n	8009ff6 <HAL_TIM_PWM_Stop+0xee>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d104      	bne.n	8009fce <HAL_TIM_PWM_Stop+0xc6>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fcc:	e013      	b.n	8009ff6 <HAL_TIM_PWM_Stop+0xee>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b0c      	cmp	r3, #12
 8009fd2:	d104      	bne.n	8009fde <HAL_TIM_PWM_Stop+0xd6>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fdc:	e00b      	b.n	8009ff6 <HAL_TIM_PWM_Stop+0xee>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b10      	cmp	r3, #16
 8009fe2:	d104      	bne.n	8009fee <HAL_TIM_PWM_Stop+0xe6>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fec:	e003      	b.n	8009ff6 <HAL_TIM_PWM_Stop+0xee>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	40010000 	.word	0x40010000
 800a004:	40010400 	.word	0x40010400

0800a008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d122      	bne.n	800a064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d11b      	bne.n	800a064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f06f 0202 	mvn.w	r2, #2
 800a034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fae6 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 800a050:	e005      	b.n	800a05e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fad8 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fae9 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	f003 0304 	and.w	r3, r3, #4
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d122      	bne.n	800a0b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d11b      	bne.n	800a0b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0204 	mvn.w	r2, #4
 800a088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2202      	movs	r2, #2
 800a08e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fabc 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 800a0a4:	e005      	b.n	800a0b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 faae 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fabf 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	f003 0308 	and.w	r3, r3, #8
 800a0c2:	2b08      	cmp	r3, #8
 800a0c4:	d122      	bne.n	800a10c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	f003 0308 	and.w	r3, r3, #8
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d11b      	bne.n	800a10c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f06f 0208 	mvn.w	r2, #8
 800a0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2204      	movs	r2, #4
 800a0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	f003 0303 	and.w	r3, r3, #3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa92 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 800a0f8:	e005      	b.n	800a106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fa84 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fa95 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	f003 0310 	and.w	r3, r3, #16
 800a116:	2b10      	cmp	r3, #16
 800a118:	d122      	bne.n	800a160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b10      	cmp	r3, #16
 800a126:	d11b      	bne.n	800a160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f06f 0210 	mvn.w	r2, #16
 800a130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2208      	movs	r2, #8
 800a136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fa68 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 800a14c:	e005      	b.n	800a15a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa5a 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa6b 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d10e      	bne.n	800a18c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d107      	bne.n	800a18c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0201 	mvn.w	r2, #1
 800a184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fa34 	bl	800a5f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a196:	2b80      	cmp	r3, #128	; 0x80
 800a198:	d10e      	bne.n	800a1b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a4:	2b80      	cmp	r3, #128	; 0x80
 800a1a6:	d107      	bne.n	800a1b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fea6 	bl	800af04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c6:	d10e      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d2:	2b80      	cmp	r3, #128	; 0x80
 800a1d4:	d107      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fe99 	bl	800af18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d10e      	bne.n	800a212 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fe:	2b40      	cmp	r3, #64	; 0x40
 800a200:	d107      	bne.n	800a212 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fa19 	bl	800a644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	f003 0320 	and.w	r3, r3, #32
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	d10e      	bne.n	800a23e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	d107      	bne.n	800a23e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f06f 0220 	mvn.w	r2, #32
 800a236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fe59 	bl	800aef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a25e:	2302      	movs	r3, #2
 800a260:	e0fd      	b.n	800a45e <HAL_TIM_PWM_ConfigChannel+0x216>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b14      	cmp	r3, #20
 800a26e:	f200 80f0 	bhi.w	800a452 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a272:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a453 	.word	0x0800a453
 800a280:	0800a453 	.word	0x0800a453
 800a284:	0800a453 	.word	0x0800a453
 800a288:	0800a30d 	.word	0x0800a30d
 800a28c:	0800a453 	.word	0x0800a453
 800a290:	0800a453 	.word	0x0800a453
 800a294:	0800a453 	.word	0x0800a453
 800a298:	0800a34f 	.word	0x0800a34f
 800a29c:	0800a453 	.word	0x0800a453
 800a2a0:	0800a453 	.word	0x0800a453
 800a2a4:	0800a453 	.word	0x0800a453
 800a2a8:	0800a38f 	.word	0x0800a38f
 800a2ac:	0800a453 	.word	0x0800a453
 800a2b0:	0800a453 	.word	0x0800a453
 800a2b4:	0800a453 	.word	0x0800a453
 800a2b8:	0800a3d1 	.word	0x0800a3d1
 800a2bc:	0800a453 	.word	0x0800a453
 800a2c0:	0800a453 	.word	0x0800a453
 800a2c4:	0800a453 	.word	0x0800a453
 800a2c8:	0800a411 	.word	0x0800a411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 fa60 	bl	800a798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f042 0208 	orr.w	r2, r2, #8
 800a2e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0204 	bic.w	r2, r2, #4
 800a2f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6999      	ldr	r1, [r3, #24]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	691a      	ldr	r2, [r3, #16]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	619a      	str	r2, [r3, #24]
      break;
 800a30a:	e0a3      	b.n	800a454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68b9      	ldr	r1, [r7, #8]
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fab2 	bl	800a87c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	699a      	ldr	r2, [r3, #24]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	699a      	ldr	r2, [r3, #24]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6999      	ldr	r1, [r3, #24]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	021a      	lsls	r2, r3, #8
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	619a      	str	r2, [r3, #24]
      break;
 800a34c:	e082      	b.n	800a454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fb09 	bl	800a96c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69da      	ldr	r2, [r3, #28]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0208 	orr.w	r2, r2, #8
 800a368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0204 	bic.w	r2, r2, #4
 800a378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69d9      	ldr	r1, [r3, #28]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	691a      	ldr	r2, [r3, #16]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	61da      	str	r2, [r3, #28]
      break;
 800a38c:	e062      	b.n	800a454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68b9      	ldr	r1, [r7, #8]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fb5f 	bl	800aa58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	69da      	ldr	r2, [r3, #28]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	69da      	ldr	r2, [r3, #28]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	69d9      	ldr	r1, [r3, #28]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	021a      	lsls	r2, r3, #8
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	61da      	str	r2, [r3, #28]
      break;
 800a3ce:	e041      	b.n	800a454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fb96 	bl	800ab08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0208 	orr.w	r2, r2, #8
 800a3ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0204 	bic.w	r2, r2, #4
 800a3fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	691a      	ldr	r2, [r3, #16]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a40e:	e021      	b.n	800a454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68b9      	ldr	r1, [r7, #8]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fbc8 	bl	800abac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a42a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a43a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	021a      	lsls	r2, r3, #8
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a450:	e000      	b.n	800a454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a452:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop

0800a468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_TIM_ConfigClockSource+0x18>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e0b3      	b.n	800a5e8 <HAL_TIM_ConfigClockSource+0x180>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4b55      	ldr	r3, [pc, #340]	; (800a5f0 <HAL_TIM_ConfigClockSource+0x188>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b8:	d03e      	beq.n	800a538 <HAL_TIM_ConfigClockSource+0xd0>
 800a4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4be:	f200 8087 	bhi.w	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a4c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c6:	f000 8085 	beq.w	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ce:	d87f      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a4d0:	2b70      	cmp	r3, #112	; 0x70
 800a4d2:	d01a      	beq.n	800a50a <HAL_TIM_ConfigClockSource+0xa2>
 800a4d4:	2b70      	cmp	r3, #112	; 0x70
 800a4d6:	d87b      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a4d8:	2b60      	cmp	r3, #96	; 0x60
 800a4da:	d050      	beq.n	800a57e <HAL_TIM_ConfigClockSource+0x116>
 800a4dc:	2b60      	cmp	r3, #96	; 0x60
 800a4de:	d877      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a4e0:	2b50      	cmp	r3, #80	; 0x50
 800a4e2:	d03c      	beq.n	800a55e <HAL_TIM_ConfigClockSource+0xf6>
 800a4e4:	2b50      	cmp	r3, #80	; 0x50
 800a4e6:	d873      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a4e8:	2b40      	cmp	r3, #64	; 0x40
 800a4ea:	d058      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x136>
 800a4ec:	2b40      	cmp	r3, #64	; 0x40
 800a4ee:	d86f      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a4f0:	2b30      	cmp	r3, #48	; 0x30
 800a4f2:	d064      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x156>
 800a4f4:	2b30      	cmp	r3, #48	; 0x30
 800a4f6:	d86b      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a4f8:	2b20      	cmp	r3, #32
 800a4fa:	d060      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x156>
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	d867      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d05c      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x156>
 800a504:	2b10      	cmp	r3, #16
 800a506:	d05a      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a508:	e062      	b.n	800a5d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	6899      	ldr	r1, [r3, #8]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f000 fc15 	bl	800ad48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a52c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	609a      	str	r2, [r3, #8]
      break;
 800a536:	e04e      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	6899      	ldr	r1, [r3, #8]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f000 fbfe 	bl	800ad48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a55a:	609a      	str	r2, [r3, #8]
      break;
 800a55c:	e03b      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	6859      	ldr	r1, [r3, #4]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	461a      	mov	r2, r3
 800a56c:	f000 fb72 	bl	800ac54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2150      	movs	r1, #80	; 0x50
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fbcb 	bl	800ad12 <TIM_ITRx_SetConfig>
      break;
 800a57c:	e02b      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6859      	ldr	r1, [r3, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	461a      	mov	r2, r3
 800a58c:	f000 fb91 	bl	800acb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2160      	movs	r1, #96	; 0x60
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fbbb 	bl	800ad12 <TIM_ITRx_SetConfig>
      break;
 800a59c:	e01b      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6859      	ldr	r1, [r3, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f000 fb52 	bl	800ac54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2140      	movs	r1, #64	; 0x40
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fbab 	bl	800ad12 <TIM_ITRx_SetConfig>
      break;
 800a5bc:	e00b      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	f000 fba2 	bl	800ad12 <TIM_ITRx_SetConfig>
        break;
 800a5ce:	e002      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5d0:	bf00      	nop
 800a5d2:	e000      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	fffeff88 	.word	0xfffeff88

0800a5f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a40      	ldr	r2, [pc, #256]	; (800a76c <TIM_Base_SetConfig+0x114>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d013      	beq.n	800a698 <TIM_Base_SetConfig+0x40>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a676:	d00f      	beq.n	800a698 <TIM_Base_SetConfig+0x40>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a3d      	ldr	r2, [pc, #244]	; (800a770 <TIM_Base_SetConfig+0x118>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d00b      	beq.n	800a698 <TIM_Base_SetConfig+0x40>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a3c      	ldr	r2, [pc, #240]	; (800a774 <TIM_Base_SetConfig+0x11c>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d007      	beq.n	800a698 <TIM_Base_SetConfig+0x40>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a3b      	ldr	r2, [pc, #236]	; (800a778 <TIM_Base_SetConfig+0x120>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d003      	beq.n	800a698 <TIM_Base_SetConfig+0x40>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a3a      	ldr	r2, [pc, #232]	; (800a77c <TIM_Base_SetConfig+0x124>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d108      	bne.n	800a6aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a2f      	ldr	r2, [pc, #188]	; (800a76c <TIM_Base_SetConfig+0x114>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d02b      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b8:	d027      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a2c      	ldr	r2, [pc, #176]	; (800a770 <TIM_Base_SetConfig+0x118>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d023      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a2b      	ldr	r2, [pc, #172]	; (800a774 <TIM_Base_SetConfig+0x11c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d01f      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a2a      	ldr	r2, [pc, #168]	; (800a778 <TIM_Base_SetConfig+0x120>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d01b      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a29      	ldr	r2, [pc, #164]	; (800a77c <TIM_Base_SetConfig+0x124>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d017      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a28      	ldr	r2, [pc, #160]	; (800a780 <TIM_Base_SetConfig+0x128>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d013      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a27      	ldr	r2, [pc, #156]	; (800a784 <TIM_Base_SetConfig+0x12c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d00f      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a26      	ldr	r2, [pc, #152]	; (800a788 <TIM_Base_SetConfig+0x130>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d00b      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a25      	ldr	r2, [pc, #148]	; (800a78c <TIM_Base_SetConfig+0x134>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d007      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a24      	ldr	r2, [pc, #144]	; (800a790 <TIM_Base_SetConfig+0x138>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d003      	beq.n	800a70a <TIM_Base_SetConfig+0xb2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a23      	ldr	r2, [pc, #140]	; (800a794 <TIM_Base_SetConfig+0x13c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d108      	bne.n	800a71c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	4313      	orrs	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a0a      	ldr	r2, [pc, #40]	; (800a76c <TIM_Base_SetConfig+0x114>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d003      	beq.n	800a750 <TIM_Base_SetConfig+0xf8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a0c      	ldr	r2, [pc, #48]	; (800a77c <TIM_Base_SetConfig+0x124>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d103      	bne.n	800a758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	691a      	ldr	r2, [r3, #16]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	615a      	str	r2, [r3, #20]
}
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	40010000 	.word	0x40010000
 800a770:	40000400 	.word	0x40000400
 800a774:	40000800 	.word	0x40000800
 800a778:	40000c00 	.word	0x40000c00
 800a77c:	40010400 	.word	0x40010400
 800a780:	40014000 	.word	0x40014000
 800a784:	40014400 	.word	0x40014400
 800a788:	40014800 	.word	0x40014800
 800a78c:	40001800 	.word	0x40001800
 800a790:	40001c00 	.word	0x40001c00
 800a794:	40002000 	.word	0x40002000

0800a798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	f023 0201 	bic.w	r2, r3, #1
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4b2b      	ldr	r3, [pc, #172]	; (800a870 <TIM_OC1_SetConfig+0xd8>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0303 	bic.w	r3, r3, #3
 800a7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f023 0302 	bic.w	r3, r3, #2
 800a7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a21      	ldr	r2, [pc, #132]	; (800a874 <TIM_OC1_SetConfig+0xdc>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d003      	beq.n	800a7fc <TIM_OC1_SetConfig+0x64>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a20      	ldr	r2, [pc, #128]	; (800a878 <TIM_OC1_SetConfig+0xe0>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d10c      	bne.n	800a816 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	f023 0308 	bic.w	r3, r3, #8
 800a802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f023 0304 	bic.w	r3, r3, #4
 800a814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a16      	ldr	r2, [pc, #88]	; (800a874 <TIM_OC1_SetConfig+0xdc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d003      	beq.n	800a826 <TIM_OC1_SetConfig+0x8e>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a15      	ldr	r2, [pc, #84]	; (800a878 <TIM_OC1_SetConfig+0xe0>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d111      	bne.n	800a84a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a82c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	4313      	orrs	r3, r2
 800a848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	621a      	str	r2, [r3, #32]
}
 800a864:	bf00      	nop
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	fffeff8f 	.word	0xfffeff8f
 800a874:	40010000 	.word	0x40010000
 800a878:	40010400 	.word	0x40010400

0800a87c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f023 0210 	bic.w	r2, r3, #16
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	4b2e      	ldr	r3, [pc, #184]	; (800a960 <TIM_OC2_SetConfig+0xe4>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	021b      	lsls	r3, r3, #8
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f023 0320 	bic.w	r3, r3, #32
 800a8c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a23      	ldr	r2, [pc, #140]	; (800a964 <TIM_OC2_SetConfig+0xe8>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d003      	beq.n	800a8e4 <TIM_OC2_SetConfig+0x68>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a22      	ldr	r2, [pc, #136]	; (800a968 <TIM_OC2_SetConfig+0xec>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d10d      	bne.n	800a900 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a18      	ldr	r2, [pc, #96]	; (800a964 <TIM_OC2_SetConfig+0xe8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d003      	beq.n	800a910 <TIM_OC2_SetConfig+0x94>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a17      	ldr	r2, [pc, #92]	; (800a968 <TIM_OC2_SetConfig+0xec>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d113      	bne.n	800a938 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a91e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	4313      	orrs	r3, r2
 800a92a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4313      	orrs	r3, r2
 800a936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	621a      	str	r2, [r3, #32]
}
 800a952:	bf00      	nop
 800a954:	371c      	adds	r7, #28
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	feff8fff 	.word	0xfeff8fff
 800a964:	40010000 	.word	0x40010000
 800a968:	40010400 	.word	0x40010400

0800a96c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	4b2d      	ldr	r3, [pc, #180]	; (800aa4c <TIM_OC3_SetConfig+0xe0>)
 800a998:	4013      	ands	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	021b      	lsls	r3, r3, #8
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a22      	ldr	r2, [pc, #136]	; (800aa50 <TIM_OC3_SetConfig+0xe4>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d003      	beq.n	800a9d2 <TIM_OC3_SetConfig+0x66>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a21      	ldr	r2, [pc, #132]	; (800aa54 <TIM_OC3_SetConfig+0xe8>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d10d      	bne.n	800a9ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	021b      	lsls	r3, r3, #8
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a17      	ldr	r2, [pc, #92]	; (800aa50 <TIM_OC3_SetConfig+0xe4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d003      	beq.n	800a9fe <TIM_OC3_SetConfig+0x92>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a16      	ldr	r2, [pc, #88]	; (800aa54 <TIM_OC3_SetConfig+0xe8>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d113      	bne.n	800aa26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	011b      	lsls	r3, r3, #4
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	621a      	str	r2, [r3, #32]
}
 800aa40:	bf00      	nop
 800aa42:	371c      	adds	r7, #28
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	fffeff8f 	.word	0xfffeff8f
 800aa50:	40010000 	.word	0x40010000
 800aa54:	40010400 	.word	0x40010400

0800aa58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4b1e      	ldr	r3, [pc, #120]	; (800aafc <TIM_OC4_SetConfig+0xa4>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	021b      	lsls	r3, r3, #8
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aaa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	031b      	lsls	r3, r3, #12
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a13      	ldr	r2, [pc, #76]	; (800ab00 <TIM_OC4_SetConfig+0xa8>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d003      	beq.n	800aac0 <TIM_OC4_SetConfig+0x68>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a12      	ldr	r2, [pc, #72]	; (800ab04 <TIM_OC4_SetConfig+0xac>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d109      	bne.n	800aad4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	019b      	lsls	r3, r3, #6
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	621a      	str	r2, [r3, #32]
}
 800aaee:	bf00      	nop
 800aaf0:	371c      	adds	r7, #28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	feff8fff 	.word	0xfeff8fff
 800ab00:	40010000 	.word	0x40010000
 800ab04:	40010400 	.word	0x40010400

0800ab08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4b1b      	ldr	r3, [pc, #108]	; (800aba0 <TIM_OC5_SetConfig+0x98>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ab48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	041b      	lsls	r3, r3, #16
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a12      	ldr	r2, [pc, #72]	; (800aba4 <TIM_OC5_SetConfig+0x9c>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d003      	beq.n	800ab66 <TIM_OC5_SetConfig+0x5e>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a11      	ldr	r2, [pc, #68]	; (800aba8 <TIM_OC5_SetConfig+0xa0>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d109      	bne.n	800ab7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	021b      	lsls	r3, r3, #8
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	621a      	str	r2, [r3, #32]
}
 800ab94:	bf00      	nop
 800ab96:	371c      	adds	r7, #28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	fffeff8f 	.word	0xfffeff8f
 800aba4:	40010000 	.word	0x40010000
 800aba8:	40010400 	.word	0x40010400

0800abac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <TIM_OC6_SetConfig+0x9c>)
 800abd8:	4013      	ands	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	021b      	lsls	r3, r3, #8
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	051b      	lsls	r3, r3, #20
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a13      	ldr	r2, [pc, #76]	; (800ac4c <TIM_OC6_SetConfig+0xa0>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d003      	beq.n	800ac0c <TIM_OC6_SetConfig+0x60>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a12      	ldr	r2, [pc, #72]	; (800ac50 <TIM_OC6_SetConfig+0xa4>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d109      	bne.n	800ac20 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	029b      	lsls	r3, r3, #10
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	621a      	str	r2, [r3, #32]
}
 800ac3a:	bf00      	nop
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	feff8fff 	.word	0xfeff8fff
 800ac4c:	40010000 	.word	0x40010000
 800ac50:	40010400 	.word	0x40010400

0800ac54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f023 0201 	bic.w	r2, r3, #1
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f023 030a 	bic.w	r3, r3, #10
 800ac90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	621a      	str	r2, [r3, #32]
}
 800aca6:	bf00      	nop
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b087      	sub	sp, #28
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	60b9      	str	r1, [r7, #8]
 800acbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	f023 0210 	bic.w	r2, r3, #16
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	031b      	lsls	r3, r3, #12
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	621a      	str	r2, [r3, #32]
}
 800ad06:	bf00      	nop
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	f043 0307 	orr.w	r3, r3, #7
 800ad34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	609a      	str	r2, [r3, #8]
}
 800ad3c:	bf00      	nop
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	021a      	lsls	r2, r3, #8
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	609a      	str	r2, [r3, #8]
}
 800ad7c:	bf00      	nop
 800ad7e:	371c      	adds	r7, #28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	f003 031f 	and.w	r3, r3, #31
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	fa02 f303 	lsl.w	r3, r2, r3
 800ada0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6a1a      	ldr	r2, [r3, #32]
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	43db      	mvns	r3, r3
 800adaa:	401a      	ands	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6a1a      	ldr	r2, [r3, #32]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	f003 031f 	and.w	r3, r3, #31
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	fa01 f303 	lsl.w	r3, r1, r3
 800adc0:	431a      	orrs	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
}
 800adc6:	bf00      	nop
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d101      	bne.n	800adec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ade8:	2302      	movs	r3, #2
 800adea:	e06d      	b.n	800aec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a30      	ldr	r2, [pc, #192]	; (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d004      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a2f      	ldr	r2, [pc, #188]	; (800aed8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d108      	bne.n	800ae32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a20      	ldr	r2, [pc, #128]	; (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d022      	beq.n	800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5e:	d01d      	beq.n	800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a1d      	ldr	r2, [pc, #116]	; (800aedc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d018      	beq.n	800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a1c      	ldr	r2, [pc, #112]	; (800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d013      	beq.n	800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a1a      	ldr	r2, [pc, #104]	; (800aee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00e      	beq.n	800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d009      	beq.n	800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a16      	ldr	r2, [pc, #88]	; (800aee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d004      	beq.n	800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a15      	ldr	r2, [pc, #84]	; (800aeec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d10c      	bne.n	800aeb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aea2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr
 800aed4:	40010000 	.word	0x40010000
 800aed8:	40010400 	.word	0x40010400
 800aedc:	40000400 	.word	0x40000400
 800aee0:	40000800 	.word	0x40000800
 800aee4:	40000c00 	.word	0x40000c00
 800aee8:	40014000 	.word	0x40014000
 800aeec:	40001800 	.word	0x40001800

0800aef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e040      	b.n	800afc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7fa f9b6 	bl	80052c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2224      	movs	r2, #36	; 0x24
 800af58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 0201 	bic.w	r2, r2, #1
 800af68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f990 	bl	800b290 <UART_SetConfig>
 800af70:	4603      	mov	r3, r0
 800af72:	2b01      	cmp	r3, #1
 800af74:	d101      	bne.n	800af7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e022      	b.n	800afc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fbe6 	bl	800b754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0201 	orr.w	r2, r2, #1
 800afb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fc6d 	bl	800b898 <UART_CheckIdleState>
 800afbe:	4603      	mov	r3, r0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08a      	sub	sp, #40	; 0x28
 800afcc:	af02      	add	r7, sp, #8
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	4613      	mov	r3, r2
 800afd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afdc:	2b20      	cmp	r3, #32
 800afde:	f040 8081 	bne.w	800b0e4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <HAL_UART_Transmit+0x26>
 800afe8:	88fb      	ldrh	r3, [r7, #6]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e079      	b.n	800b0e6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d101      	bne.n	800b000 <HAL_UART_Transmit+0x38>
 800affc:	2302      	movs	r3, #2
 800affe:	e072      	b.n	800b0e6 <HAL_UART_Transmit+0x11e>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2221      	movs	r2, #33	; 0x21
 800b014:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b016:	f7fb f981 	bl	800631c <HAL_GetTick>
 800b01a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	88fa      	ldrh	r2, [r7, #6]
 800b020:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	88fa      	ldrh	r2, [r7, #6]
 800b028:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b034:	d108      	bne.n	800b048 <HAL_UART_Transmit+0x80>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d104      	bne.n	800b048 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	61bb      	str	r3, [r7, #24]
 800b046:	e003      	b.n	800b050 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b058:	e02c      	b.n	800b0b4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2200      	movs	r2, #0
 800b062:	2180      	movs	r1, #128	; 0x80
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 fc60 	bl	800b92a <UART_WaitOnFlagUntilTimeout>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e038      	b.n	800b0e6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10b      	bne.n	800b092 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b088:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	3302      	adds	r3, #2
 800b08e:	61bb      	str	r3, [r7, #24]
 800b090:	e007      	b.n	800b0a2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1cc      	bne.n	800b05a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2140      	movs	r1, #64	; 0x40
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 fc2d 	bl	800b92a <UART_WaitOnFlagUntilTimeout>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e005      	b.n	800b0e6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e000      	b.n	800b0e6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b0e4:	2302      	movs	r3, #2
  }
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3720      	adds	r7, #32
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b08a      	sub	sp, #40	; 0x28
 800b0f2:	af02      	add	r7, sp, #8
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b102:	2b20      	cmp	r3, #32
 800b104:	f040 80be 	bne.w	800b284 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d002      	beq.n	800b114 <HAL_UART_Receive+0x26>
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e0b6      	b.n	800b286 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d101      	bne.n	800b126 <HAL_UART_Receive+0x38>
 800b122:	2302      	movs	r3, #2
 800b124:	e0af      	b.n	800b286 <HAL_UART_Receive+0x198>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2222      	movs	r2, #34	; 0x22
 800b13a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b142:	f7fb f8eb 	bl	800631c <HAL_GetTick>
 800b146:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	88fa      	ldrh	r2, [r7, #6]
 800b14c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	88fa      	ldrh	r2, [r7, #6]
 800b154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b160:	d10e      	bne.n	800b180 <HAL_UART_Receive+0x92>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d105      	bne.n	800b176 <HAL_UART_Receive+0x88>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b174:	e02d      	b.n	800b1d2 <HAL_UART_Receive+0xe4>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	22ff      	movs	r2, #255	; 0xff
 800b17a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b17e:	e028      	b.n	800b1d2 <HAL_UART_Receive+0xe4>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10d      	bne.n	800b1a4 <HAL_UART_Receive+0xb6>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d104      	bne.n	800b19a <HAL_UART_Receive+0xac>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	22ff      	movs	r2, #255	; 0xff
 800b194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b198:	e01b      	b.n	800b1d2 <HAL_UART_Receive+0xe4>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	227f      	movs	r2, #127	; 0x7f
 800b19e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1a2:	e016      	b.n	800b1d2 <HAL_UART_Receive+0xe4>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ac:	d10d      	bne.n	800b1ca <HAL_UART_Receive+0xdc>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d104      	bne.n	800b1c0 <HAL_UART_Receive+0xd2>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	227f      	movs	r2, #127	; 0x7f
 800b1ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1be:	e008      	b.n	800b1d2 <HAL_UART_Receive+0xe4>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	223f      	movs	r2, #63	; 0x3f
 800b1c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1c8:	e003      	b.n	800b1d2 <HAL_UART_Receive+0xe4>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e2:	d108      	bne.n	800b1f6 <HAL_UART_Receive+0x108>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d104      	bne.n	800b1f6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	61bb      	str	r3, [r7, #24]
 800b1f4:	e003      	b.n	800b1fe <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b206:	e032      	b.n	800b26e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2200      	movs	r2, #0
 800b210:	2120      	movs	r1, #32
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f000 fb89 	bl	800b92a <UART_WaitOnFlagUntilTimeout>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e031      	b.n	800b286 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10c      	bne.n	800b242 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	b29a      	uxth	r2, r3
 800b230:	8a7b      	ldrh	r3, [r7, #18]
 800b232:	4013      	ands	r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	3302      	adds	r3, #2
 800b23e:	61bb      	str	r3, [r7, #24]
 800b240:	e00c      	b.n	800b25c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	8a7b      	ldrh	r3, [r7, #18]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	4013      	ands	r3, r2
 800b250:	b2da      	uxtb	r2, r3
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	3301      	adds	r3, #1
 800b25a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b262:	b29b      	uxth	r3, r3
 800b264:	3b01      	subs	r3, #1
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b274:	b29b      	uxth	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1c6      	bne.n	800b208 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2220      	movs	r2, #32
 800b27e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	e000      	b.n	800b286 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800b284:	2302      	movs	r3, #2
  }
}
 800b286:	4618      	mov	r0, r3
 800b288:	3720      	adds	r7, #32
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689a      	ldr	r2, [r3, #8]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	431a      	orrs	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	69db      	ldr	r3, [r3, #28]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	4ba7      	ldr	r3, [pc, #668]	; (800b558 <UART_SetConfig+0x2c8>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	6812      	ldr	r2, [r2, #0]
 800b2c2:	6979      	ldr	r1, [r7, #20]
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a95      	ldr	r2, [pc, #596]	; (800b55c <UART_SetConfig+0x2cc>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d120      	bne.n	800b34e <UART_SetConfig+0xbe>
 800b30c:	4b94      	ldr	r3, [pc, #592]	; (800b560 <UART_SetConfig+0x2d0>)
 800b30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b312:	f003 0303 	and.w	r3, r3, #3
 800b316:	2b03      	cmp	r3, #3
 800b318:	d816      	bhi.n	800b348 <UART_SetConfig+0xb8>
 800b31a:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <UART_SetConfig+0x90>)
 800b31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b320:	0800b331 	.word	0x0800b331
 800b324:	0800b33d 	.word	0x0800b33d
 800b328:	0800b337 	.word	0x0800b337
 800b32c:	0800b343 	.word	0x0800b343
 800b330:	2301      	movs	r3, #1
 800b332:	77fb      	strb	r3, [r7, #31]
 800b334:	e14f      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b336:	2302      	movs	r3, #2
 800b338:	77fb      	strb	r3, [r7, #31]
 800b33a:	e14c      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b33c:	2304      	movs	r3, #4
 800b33e:	77fb      	strb	r3, [r7, #31]
 800b340:	e149      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b342:	2308      	movs	r3, #8
 800b344:	77fb      	strb	r3, [r7, #31]
 800b346:	e146      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b348:	2310      	movs	r3, #16
 800b34a:	77fb      	strb	r3, [r7, #31]
 800b34c:	e143      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a84      	ldr	r2, [pc, #528]	; (800b564 <UART_SetConfig+0x2d4>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d132      	bne.n	800b3be <UART_SetConfig+0x12e>
 800b358:	4b81      	ldr	r3, [pc, #516]	; (800b560 <UART_SetConfig+0x2d0>)
 800b35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b35e:	f003 030c 	and.w	r3, r3, #12
 800b362:	2b0c      	cmp	r3, #12
 800b364:	d828      	bhi.n	800b3b8 <UART_SetConfig+0x128>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <UART_SetConfig+0xdc>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b3a1 	.word	0x0800b3a1
 800b370:	0800b3b9 	.word	0x0800b3b9
 800b374:	0800b3b9 	.word	0x0800b3b9
 800b378:	0800b3b9 	.word	0x0800b3b9
 800b37c:	0800b3ad 	.word	0x0800b3ad
 800b380:	0800b3b9 	.word	0x0800b3b9
 800b384:	0800b3b9 	.word	0x0800b3b9
 800b388:	0800b3b9 	.word	0x0800b3b9
 800b38c:	0800b3a7 	.word	0x0800b3a7
 800b390:	0800b3b9 	.word	0x0800b3b9
 800b394:	0800b3b9 	.word	0x0800b3b9
 800b398:	0800b3b9 	.word	0x0800b3b9
 800b39c:	0800b3b3 	.word	0x0800b3b3
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	77fb      	strb	r3, [r7, #31]
 800b3a4:	e117      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	77fb      	strb	r3, [r7, #31]
 800b3aa:	e114      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3ac:	2304      	movs	r3, #4
 800b3ae:	77fb      	strb	r3, [r7, #31]
 800b3b0:	e111      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3b2:	2308      	movs	r3, #8
 800b3b4:	77fb      	strb	r3, [r7, #31]
 800b3b6:	e10e      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	77fb      	strb	r3, [r7, #31]
 800b3bc:	e10b      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a69      	ldr	r2, [pc, #420]	; (800b568 <UART_SetConfig+0x2d8>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d120      	bne.n	800b40a <UART_SetConfig+0x17a>
 800b3c8:	4b65      	ldr	r3, [pc, #404]	; (800b560 <UART_SetConfig+0x2d0>)
 800b3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3d2:	2b30      	cmp	r3, #48	; 0x30
 800b3d4:	d013      	beq.n	800b3fe <UART_SetConfig+0x16e>
 800b3d6:	2b30      	cmp	r3, #48	; 0x30
 800b3d8:	d814      	bhi.n	800b404 <UART_SetConfig+0x174>
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	d009      	beq.n	800b3f2 <UART_SetConfig+0x162>
 800b3de:	2b20      	cmp	r3, #32
 800b3e0:	d810      	bhi.n	800b404 <UART_SetConfig+0x174>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <UART_SetConfig+0x15c>
 800b3e6:	2b10      	cmp	r3, #16
 800b3e8:	d006      	beq.n	800b3f8 <UART_SetConfig+0x168>
 800b3ea:	e00b      	b.n	800b404 <UART_SetConfig+0x174>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	77fb      	strb	r3, [r7, #31]
 800b3f0:	e0f1      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	77fb      	strb	r3, [r7, #31]
 800b3f6:	e0ee      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	77fb      	strb	r3, [r7, #31]
 800b3fc:	e0eb      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b3fe:	2308      	movs	r3, #8
 800b400:	77fb      	strb	r3, [r7, #31]
 800b402:	e0e8      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b404:	2310      	movs	r3, #16
 800b406:	77fb      	strb	r3, [r7, #31]
 800b408:	e0e5      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a57      	ldr	r2, [pc, #348]	; (800b56c <UART_SetConfig+0x2dc>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d120      	bne.n	800b456 <UART_SetConfig+0x1c6>
 800b414:	4b52      	ldr	r3, [pc, #328]	; (800b560 <UART_SetConfig+0x2d0>)
 800b416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b41e:	2bc0      	cmp	r3, #192	; 0xc0
 800b420:	d013      	beq.n	800b44a <UART_SetConfig+0x1ba>
 800b422:	2bc0      	cmp	r3, #192	; 0xc0
 800b424:	d814      	bhi.n	800b450 <UART_SetConfig+0x1c0>
 800b426:	2b80      	cmp	r3, #128	; 0x80
 800b428:	d009      	beq.n	800b43e <UART_SetConfig+0x1ae>
 800b42a:	2b80      	cmp	r3, #128	; 0x80
 800b42c:	d810      	bhi.n	800b450 <UART_SetConfig+0x1c0>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d002      	beq.n	800b438 <UART_SetConfig+0x1a8>
 800b432:	2b40      	cmp	r3, #64	; 0x40
 800b434:	d006      	beq.n	800b444 <UART_SetConfig+0x1b4>
 800b436:	e00b      	b.n	800b450 <UART_SetConfig+0x1c0>
 800b438:	2300      	movs	r3, #0
 800b43a:	77fb      	strb	r3, [r7, #31]
 800b43c:	e0cb      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b43e:	2302      	movs	r3, #2
 800b440:	77fb      	strb	r3, [r7, #31]
 800b442:	e0c8      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b444:	2304      	movs	r3, #4
 800b446:	77fb      	strb	r3, [r7, #31]
 800b448:	e0c5      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b44a:	2308      	movs	r3, #8
 800b44c:	77fb      	strb	r3, [r7, #31]
 800b44e:	e0c2      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b450:	2310      	movs	r3, #16
 800b452:	77fb      	strb	r3, [r7, #31]
 800b454:	e0bf      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a45      	ldr	r2, [pc, #276]	; (800b570 <UART_SetConfig+0x2e0>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d125      	bne.n	800b4ac <UART_SetConfig+0x21c>
 800b460:	4b3f      	ldr	r3, [pc, #252]	; (800b560 <UART_SetConfig+0x2d0>)
 800b462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b46a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b46e:	d017      	beq.n	800b4a0 <UART_SetConfig+0x210>
 800b470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b474:	d817      	bhi.n	800b4a6 <UART_SetConfig+0x216>
 800b476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b47a:	d00b      	beq.n	800b494 <UART_SetConfig+0x204>
 800b47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b480:	d811      	bhi.n	800b4a6 <UART_SetConfig+0x216>
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <UART_SetConfig+0x1fe>
 800b486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b48a:	d006      	beq.n	800b49a <UART_SetConfig+0x20a>
 800b48c:	e00b      	b.n	800b4a6 <UART_SetConfig+0x216>
 800b48e:	2300      	movs	r3, #0
 800b490:	77fb      	strb	r3, [r7, #31]
 800b492:	e0a0      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b494:	2302      	movs	r3, #2
 800b496:	77fb      	strb	r3, [r7, #31]
 800b498:	e09d      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b49a:	2304      	movs	r3, #4
 800b49c:	77fb      	strb	r3, [r7, #31]
 800b49e:	e09a      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b4a0:	2308      	movs	r3, #8
 800b4a2:	77fb      	strb	r3, [r7, #31]
 800b4a4:	e097      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b4a6:	2310      	movs	r3, #16
 800b4a8:	77fb      	strb	r3, [r7, #31]
 800b4aa:	e094      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a30      	ldr	r2, [pc, #192]	; (800b574 <UART_SetConfig+0x2e4>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d125      	bne.n	800b502 <UART_SetConfig+0x272>
 800b4b6:	4b2a      	ldr	r3, [pc, #168]	; (800b560 <UART_SetConfig+0x2d0>)
 800b4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4c4:	d017      	beq.n	800b4f6 <UART_SetConfig+0x266>
 800b4c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4ca:	d817      	bhi.n	800b4fc <UART_SetConfig+0x26c>
 800b4cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4d0:	d00b      	beq.n	800b4ea <UART_SetConfig+0x25a>
 800b4d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4d6:	d811      	bhi.n	800b4fc <UART_SetConfig+0x26c>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <UART_SetConfig+0x254>
 800b4dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4e0:	d006      	beq.n	800b4f0 <UART_SetConfig+0x260>
 800b4e2:	e00b      	b.n	800b4fc <UART_SetConfig+0x26c>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e075      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	e072      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	77fb      	strb	r3, [r7, #31]
 800b4f4:	e06f      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b4f6:	2308      	movs	r3, #8
 800b4f8:	77fb      	strb	r3, [r7, #31]
 800b4fa:	e06c      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b4fc:	2310      	movs	r3, #16
 800b4fe:	77fb      	strb	r3, [r7, #31]
 800b500:	e069      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a1c      	ldr	r2, [pc, #112]	; (800b578 <UART_SetConfig+0x2e8>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d137      	bne.n	800b57c <UART_SetConfig+0x2ec>
 800b50c:	4b14      	ldr	r3, [pc, #80]	; (800b560 <UART_SetConfig+0x2d0>)
 800b50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b512:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b516:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b51a:	d017      	beq.n	800b54c <UART_SetConfig+0x2bc>
 800b51c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b520:	d817      	bhi.n	800b552 <UART_SetConfig+0x2c2>
 800b522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b526:	d00b      	beq.n	800b540 <UART_SetConfig+0x2b0>
 800b528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b52c:	d811      	bhi.n	800b552 <UART_SetConfig+0x2c2>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <UART_SetConfig+0x2aa>
 800b532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b536:	d006      	beq.n	800b546 <UART_SetConfig+0x2b6>
 800b538:	e00b      	b.n	800b552 <UART_SetConfig+0x2c2>
 800b53a:	2300      	movs	r3, #0
 800b53c:	77fb      	strb	r3, [r7, #31]
 800b53e:	e04a      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b540:	2302      	movs	r3, #2
 800b542:	77fb      	strb	r3, [r7, #31]
 800b544:	e047      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b546:	2304      	movs	r3, #4
 800b548:	77fb      	strb	r3, [r7, #31]
 800b54a:	e044      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b54c:	2308      	movs	r3, #8
 800b54e:	77fb      	strb	r3, [r7, #31]
 800b550:	e041      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b552:	2310      	movs	r3, #16
 800b554:	77fb      	strb	r3, [r7, #31]
 800b556:	e03e      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b558:	efff69f3 	.word	0xefff69f3
 800b55c:	40011000 	.word	0x40011000
 800b560:	40023800 	.word	0x40023800
 800b564:	40004400 	.word	0x40004400
 800b568:	40004800 	.word	0x40004800
 800b56c:	40004c00 	.word	0x40004c00
 800b570:	40005000 	.word	0x40005000
 800b574:	40011400 	.word	0x40011400
 800b578:	40007800 	.word	0x40007800
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a71      	ldr	r2, [pc, #452]	; (800b748 <UART_SetConfig+0x4b8>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d125      	bne.n	800b5d2 <UART_SetConfig+0x342>
 800b586:	4b71      	ldr	r3, [pc, #452]	; (800b74c <UART_SetConfig+0x4bc>)
 800b588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b58c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b590:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b594:	d017      	beq.n	800b5c6 <UART_SetConfig+0x336>
 800b596:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b59a:	d817      	bhi.n	800b5cc <UART_SetConfig+0x33c>
 800b59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5a0:	d00b      	beq.n	800b5ba <UART_SetConfig+0x32a>
 800b5a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5a6:	d811      	bhi.n	800b5cc <UART_SetConfig+0x33c>
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <UART_SetConfig+0x324>
 800b5ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5b0:	d006      	beq.n	800b5c0 <UART_SetConfig+0x330>
 800b5b2:	e00b      	b.n	800b5cc <UART_SetConfig+0x33c>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	77fb      	strb	r3, [r7, #31]
 800b5b8:	e00d      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	77fb      	strb	r3, [r7, #31]
 800b5be:	e00a      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b5c0:	2304      	movs	r3, #4
 800b5c2:	77fb      	strb	r3, [r7, #31]
 800b5c4:	e007      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b5c6:	2308      	movs	r3, #8
 800b5c8:	77fb      	strb	r3, [r7, #31]
 800b5ca:	e004      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b5cc:	2310      	movs	r3, #16
 800b5ce:	77fb      	strb	r3, [r7, #31]
 800b5d0:	e001      	b.n	800b5d6 <UART_SetConfig+0x346>
 800b5d2:	2310      	movs	r3, #16
 800b5d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5de:	d15b      	bne.n	800b698 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b5e0:	7ffb      	ldrb	r3, [r7, #31]
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d827      	bhi.n	800b636 <UART_SetConfig+0x3a6>
 800b5e6:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <UART_SetConfig+0x35c>)
 800b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ec:	0800b611 	.word	0x0800b611
 800b5f0:	0800b619 	.word	0x0800b619
 800b5f4:	0800b621 	.word	0x0800b621
 800b5f8:	0800b637 	.word	0x0800b637
 800b5fc:	0800b627 	.word	0x0800b627
 800b600:	0800b637 	.word	0x0800b637
 800b604:	0800b637 	.word	0x0800b637
 800b608:	0800b637 	.word	0x0800b637
 800b60c:	0800b62f 	.word	0x0800b62f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b610:	f7fd fa5a 	bl	8008ac8 <HAL_RCC_GetPCLK1Freq>
 800b614:	61b8      	str	r0, [r7, #24]
        break;
 800b616:	e013      	b.n	800b640 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b618:	f7fd fa6a 	bl	8008af0 <HAL_RCC_GetPCLK2Freq>
 800b61c:	61b8      	str	r0, [r7, #24]
        break;
 800b61e:	e00f      	b.n	800b640 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b620:	4b4b      	ldr	r3, [pc, #300]	; (800b750 <UART_SetConfig+0x4c0>)
 800b622:	61bb      	str	r3, [r7, #24]
        break;
 800b624:	e00c      	b.n	800b640 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b626:	f7fd f961 	bl	80088ec <HAL_RCC_GetSysClockFreq>
 800b62a:	61b8      	str	r0, [r7, #24]
        break;
 800b62c:	e008      	b.n	800b640 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b62e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b632:	61bb      	str	r3, [r7, #24]
        break;
 800b634:	e004      	b.n	800b640 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	77bb      	strb	r3, [r7, #30]
        break;
 800b63e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d074      	beq.n	800b730 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	005a      	lsls	r2, r3, #1
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	085b      	lsrs	r3, r3, #1
 800b650:	441a      	add	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b0f      	cmp	r3, #15
 800b662:	d916      	bls.n	800b692 <UART_SetConfig+0x402>
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b66a:	d212      	bcs.n	800b692 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	f023 030f 	bic.w	r3, r3, #15
 800b674:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	085b      	lsrs	r3, r3, #1
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	f003 0307 	and.w	r3, r3, #7
 800b680:	b29a      	uxth	r2, r3
 800b682:	89fb      	ldrh	r3, [r7, #14]
 800b684:	4313      	orrs	r3, r2
 800b686:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	89fa      	ldrh	r2, [r7, #14]
 800b68e:	60da      	str	r2, [r3, #12]
 800b690:	e04e      	b.n	800b730 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	77bb      	strb	r3, [r7, #30]
 800b696:	e04b      	b.n	800b730 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b698:	7ffb      	ldrb	r3, [r7, #31]
 800b69a:	2b08      	cmp	r3, #8
 800b69c:	d827      	bhi.n	800b6ee <UART_SetConfig+0x45e>
 800b69e:	a201      	add	r2, pc, #4	; (adr r2, 800b6a4 <UART_SetConfig+0x414>)
 800b6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a4:	0800b6c9 	.word	0x0800b6c9
 800b6a8:	0800b6d1 	.word	0x0800b6d1
 800b6ac:	0800b6d9 	.word	0x0800b6d9
 800b6b0:	0800b6ef 	.word	0x0800b6ef
 800b6b4:	0800b6df 	.word	0x0800b6df
 800b6b8:	0800b6ef 	.word	0x0800b6ef
 800b6bc:	0800b6ef 	.word	0x0800b6ef
 800b6c0:	0800b6ef 	.word	0x0800b6ef
 800b6c4:	0800b6e7 	.word	0x0800b6e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6c8:	f7fd f9fe 	bl	8008ac8 <HAL_RCC_GetPCLK1Freq>
 800b6cc:	61b8      	str	r0, [r7, #24]
        break;
 800b6ce:	e013      	b.n	800b6f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6d0:	f7fd fa0e 	bl	8008af0 <HAL_RCC_GetPCLK2Freq>
 800b6d4:	61b8      	str	r0, [r7, #24]
        break;
 800b6d6:	e00f      	b.n	800b6f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6d8:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <UART_SetConfig+0x4c0>)
 800b6da:	61bb      	str	r3, [r7, #24]
        break;
 800b6dc:	e00c      	b.n	800b6f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6de:	f7fd f905 	bl	80088ec <HAL_RCC_GetSysClockFreq>
 800b6e2:	61b8      	str	r0, [r7, #24]
        break;
 800b6e4:	e008      	b.n	800b6f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ea:	61bb      	str	r3, [r7, #24]
        break;
 800b6ec:	e004      	b.n	800b6f8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	77bb      	strb	r3, [r7, #30]
        break;
 800b6f6:	bf00      	nop
    }

    if (pclk != 0U)
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d018      	beq.n	800b730 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	085a      	lsrs	r2, r3, #1
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	441a      	add	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b710:	b29b      	uxth	r3, r3
 800b712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b0f      	cmp	r3, #15
 800b718:	d908      	bls.n	800b72c <UART_SetConfig+0x49c>
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b720:	d204      	bcs.n	800b72c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	60da      	str	r2, [r3, #12]
 800b72a:	e001      	b.n	800b730 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b73c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	40007c00 	.word	0x40007c00
 800b74c:	40023800 	.word	0x40023800
 800b750:	00f42400 	.word	0x00f42400

0800b754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00a      	beq.n	800b77e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	430a      	orrs	r2, r1
 800b77c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	f003 0302 	and.w	r3, r3, #2
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00a      	beq.n	800b7a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	430a      	orrs	r2, r1
 800b79e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	f003 0304 	and.w	r3, r3, #4
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00a      	beq.n	800b7c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	f003 0308 	and.w	r3, r3, #8
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00a      	beq.n	800b7e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	430a      	orrs	r2, r1
 800b7e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	f003 0310 	and.w	r3, r3, #16
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00a      	beq.n	800b806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	430a      	orrs	r2, r1
 800b804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	f003 0320 	and.w	r3, r3, #32
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00a      	beq.n	800b828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	430a      	orrs	r2, r1
 800b826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b830:	2b00      	cmp	r3, #0
 800b832:	d01a      	beq.n	800b86a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	430a      	orrs	r2, r1
 800b848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b84e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b852:	d10a      	bne.n	800b86a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00a      	beq.n	800b88c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	430a      	orrs	r2, r1
 800b88a:	605a      	str	r2, [r3, #4]
  }
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8a8:	f7fa fd38 	bl	800631c <HAL_GetTick>
 800b8ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0308 	and.w	r3, r3, #8
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	d10e      	bne.n	800b8da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f82d 	bl	800b92a <UART_WaitOnFlagUntilTimeout>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	e023      	b.n	800b922 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	d10e      	bne.n	800b906 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f817 	bl	800b92a <UART_WaitOnFlagUntilTimeout>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e00d      	b.n	800b922 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2220      	movs	r2, #32
 800b910:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	603b      	str	r3, [r7, #0]
 800b936:	4613      	mov	r3, r2
 800b938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b93a:	e05e      	b.n	800b9fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b942:	d05a      	beq.n	800b9fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b944:	f7fa fcea 	bl	800631c <HAL_GetTick>
 800b948:	4602      	mov	r2, r0
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <UART_WaitOnFlagUntilTimeout+0x30>
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d11b      	bne.n	800b992 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b968:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0201 	bic.w	r2, r2, #1
 800b978:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2220      	movs	r2, #32
 800b97e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2220      	movs	r2, #32
 800b984:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	e043      	b.n	800ba1a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0304 	and.w	r3, r3, #4
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d02c      	beq.n	800b9fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ae:	d124      	bne.n	800b9fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 0201 	bic.w	r2, r2, #1
 800b9d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2220      	movs	r2, #32
 800b9ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e00f      	b.n	800ba1a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	4013      	ands	r3, r2
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	bf0c      	ite	eq
 800ba0a:	2301      	moveq	r3, #1
 800ba0c:	2300      	movne	r3, #0
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d091      	beq.n	800b93c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <__errno>:
 800ba24:	4b01      	ldr	r3, [pc, #4]	; (800ba2c <__errno+0x8>)
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	200000dc 	.word	0x200000dc

0800ba30 <__libc_init_array>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	4d0d      	ldr	r5, [pc, #52]	; (800ba68 <__libc_init_array+0x38>)
 800ba34:	4c0d      	ldr	r4, [pc, #52]	; (800ba6c <__libc_init_array+0x3c>)
 800ba36:	1b64      	subs	r4, r4, r5
 800ba38:	10a4      	asrs	r4, r4, #2
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	42a6      	cmp	r6, r4
 800ba3e:	d109      	bne.n	800ba54 <__libc_init_array+0x24>
 800ba40:	4d0b      	ldr	r5, [pc, #44]	; (800ba70 <__libc_init_array+0x40>)
 800ba42:	4c0c      	ldr	r4, [pc, #48]	; (800ba74 <__libc_init_array+0x44>)
 800ba44:	f002 fe24 	bl	800e690 <_init>
 800ba48:	1b64      	subs	r4, r4, r5
 800ba4a:	10a4      	asrs	r4, r4, #2
 800ba4c:	2600      	movs	r6, #0
 800ba4e:	42a6      	cmp	r6, r4
 800ba50:	d105      	bne.n	800ba5e <__libc_init_array+0x2e>
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba58:	4798      	blx	r3
 800ba5a:	3601      	adds	r6, #1
 800ba5c:	e7ee      	b.n	800ba3c <__libc_init_array+0xc>
 800ba5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba62:	4798      	blx	r3
 800ba64:	3601      	adds	r6, #1
 800ba66:	e7f2      	b.n	800ba4e <__libc_init_array+0x1e>
 800ba68:	0800ee5c 	.word	0x0800ee5c
 800ba6c:	0800ee5c 	.word	0x0800ee5c
 800ba70:	0800ee5c 	.word	0x0800ee5c
 800ba74:	0800ee60 	.word	0x0800ee60

0800ba78 <memset>:
 800ba78:	4402      	add	r2, r0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d100      	bne.n	800ba82 <memset+0xa>
 800ba80:	4770      	bx	lr
 800ba82:	f803 1b01 	strb.w	r1, [r3], #1
 800ba86:	e7f9      	b.n	800ba7c <memset+0x4>

0800ba88 <__cvt>:
 800ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8a:	ed2d 8b02 	vpush	{d8}
 800ba8e:	eeb0 8b40 	vmov.f64	d8, d0
 800ba92:	b085      	sub	sp, #20
 800ba94:	4617      	mov	r7, r2
 800ba96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ba98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ba9a:	ee18 2a90 	vmov	r2, s17
 800ba9e:	f025 0520 	bic.w	r5, r5, #32
 800baa2:	2a00      	cmp	r2, #0
 800baa4:	bfb6      	itet	lt
 800baa6:	222d      	movlt	r2, #45	; 0x2d
 800baa8:	2200      	movge	r2, #0
 800baaa:	eeb1 8b40 	vneglt.f64	d8, d0
 800baae:	2d46      	cmp	r5, #70	; 0x46
 800bab0:	460c      	mov	r4, r1
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	d004      	beq.n	800bac0 <__cvt+0x38>
 800bab6:	2d45      	cmp	r5, #69	; 0x45
 800bab8:	d100      	bne.n	800babc <__cvt+0x34>
 800baba:	3401      	adds	r4, #1
 800babc:	2102      	movs	r1, #2
 800babe:	e000      	b.n	800bac2 <__cvt+0x3a>
 800bac0:	2103      	movs	r1, #3
 800bac2:	ab03      	add	r3, sp, #12
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	ab02      	add	r3, sp, #8
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	4622      	mov	r2, r4
 800bacc:	4633      	mov	r3, r6
 800bace:	eeb0 0b48 	vmov.f64	d0, d8
 800bad2:	f000 fcc9 	bl	800c468 <_dtoa_r>
 800bad6:	2d47      	cmp	r5, #71	; 0x47
 800bad8:	d109      	bne.n	800baee <__cvt+0x66>
 800bada:	07fb      	lsls	r3, r7, #31
 800badc:	d407      	bmi.n	800baee <__cvt+0x66>
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bae2:	1a1b      	subs	r3, r3, r0
 800bae4:	6013      	str	r3, [r2, #0]
 800bae6:	b005      	add	sp, #20
 800bae8:	ecbd 8b02 	vpop	{d8}
 800baec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baee:	2d46      	cmp	r5, #70	; 0x46
 800baf0:	eb00 0204 	add.w	r2, r0, r4
 800baf4:	d10c      	bne.n	800bb10 <__cvt+0x88>
 800baf6:	7803      	ldrb	r3, [r0, #0]
 800baf8:	2b30      	cmp	r3, #48	; 0x30
 800bafa:	d107      	bne.n	800bb0c <__cvt+0x84>
 800bafc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb04:	bf1c      	itt	ne
 800bb06:	f1c4 0401 	rsbne	r4, r4, #1
 800bb0a:	6034      	strne	r4, [r6, #0]
 800bb0c:	6833      	ldr	r3, [r6, #0]
 800bb0e:	441a      	add	r2, r3
 800bb10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb18:	bf08      	it	eq
 800bb1a:	9203      	streq	r2, [sp, #12]
 800bb1c:	2130      	movs	r1, #48	; 0x30
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d2dc      	bcs.n	800bade <__cvt+0x56>
 800bb24:	1c5c      	adds	r4, r3, #1
 800bb26:	9403      	str	r4, [sp, #12]
 800bb28:	7019      	strb	r1, [r3, #0]
 800bb2a:	e7f8      	b.n	800bb1e <__cvt+0x96>

0800bb2c <__exponent>:
 800bb2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2900      	cmp	r1, #0
 800bb32:	bfb8      	it	lt
 800bb34:	4249      	neglt	r1, r1
 800bb36:	f803 2b02 	strb.w	r2, [r3], #2
 800bb3a:	bfb4      	ite	lt
 800bb3c:	222d      	movlt	r2, #45	; 0x2d
 800bb3e:	222b      	movge	r2, #43	; 0x2b
 800bb40:	2909      	cmp	r1, #9
 800bb42:	7042      	strb	r2, [r0, #1]
 800bb44:	dd2a      	ble.n	800bb9c <__exponent+0x70>
 800bb46:	f10d 0407 	add.w	r4, sp, #7
 800bb4a:	46a4      	mov	ip, r4
 800bb4c:	270a      	movs	r7, #10
 800bb4e:	46a6      	mov	lr, r4
 800bb50:	460a      	mov	r2, r1
 800bb52:	fb91 f6f7 	sdiv	r6, r1, r7
 800bb56:	fb07 1516 	mls	r5, r7, r6, r1
 800bb5a:	3530      	adds	r5, #48	; 0x30
 800bb5c:	2a63      	cmp	r2, #99	; 0x63
 800bb5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bb66:	4631      	mov	r1, r6
 800bb68:	dcf1      	bgt.n	800bb4e <__exponent+0x22>
 800bb6a:	3130      	adds	r1, #48	; 0x30
 800bb6c:	f1ae 0502 	sub.w	r5, lr, #2
 800bb70:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb74:	1c44      	adds	r4, r0, #1
 800bb76:	4629      	mov	r1, r5
 800bb78:	4561      	cmp	r1, ip
 800bb7a:	d30a      	bcc.n	800bb92 <__exponent+0x66>
 800bb7c:	f10d 0209 	add.w	r2, sp, #9
 800bb80:	eba2 020e 	sub.w	r2, r2, lr
 800bb84:	4565      	cmp	r5, ip
 800bb86:	bf88      	it	hi
 800bb88:	2200      	movhi	r2, #0
 800bb8a:	4413      	add	r3, r2
 800bb8c:	1a18      	subs	r0, r3, r0
 800bb8e:	b003      	add	sp, #12
 800bb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb96:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb9a:	e7ed      	b.n	800bb78 <__exponent+0x4c>
 800bb9c:	2330      	movs	r3, #48	; 0x30
 800bb9e:	3130      	adds	r1, #48	; 0x30
 800bba0:	7083      	strb	r3, [r0, #2]
 800bba2:	70c1      	strb	r1, [r0, #3]
 800bba4:	1d03      	adds	r3, r0, #4
 800bba6:	e7f1      	b.n	800bb8c <__exponent+0x60>

0800bba8 <_printf_float>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	b08b      	sub	sp, #44	; 0x2c
 800bbae:	460c      	mov	r4, r1
 800bbb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	461f      	mov	r7, r3
 800bbb8:	4605      	mov	r5, r0
 800bbba:	f001 f9d7 	bl	800cf6c <_localeconv_r>
 800bbbe:	f8d0 b000 	ldr.w	fp, [r0]
 800bbc2:	4658      	mov	r0, fp
 800bbc4:	f7f4 fb3c 	bl	8000240 <strlen>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	9308      	str	r3, [sp, #32]
 800bbcc:	f8d8 3000 	ldr.w	r3, [r8]
 800bbd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	3307      	adds	r3, #7
 800bbd8:	f023 0307 	bic.w	r3, r3, #7
 800bbdc:	f103 0108 	add.w	r1, r3, #8
 800bbe0:	f8c8 1000 	str.w	r1, [r8]
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800bbee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800be50 <_printf_float+0x2a8>
 800bbf2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800bbf6:	eeb0 6bc0 	vabs.f64	d6, d0
 800bbfa:	eeb4 6b47 	vcmp.f64	d6, d7
 800bbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc02:	dd24      	ble.n	800bc4e <_printf_float+0xa6>
 800bc04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0c:	d502      	bpl.n	800bc14 <_printf_float+0x6c>
 800bc0e:	232d      	movs	r3, #45	; 0x2d
 800bc10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc14:	4b90      	ldr	r3, [pc, #576]	; (800be58 <_printf_float+0x2b0>)
 800bc16:	4891      	ldr	r0, [pc, #580]	; (800be5c <_printf_float+0x2b4>)
 800bc18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bc1c:	bf94      	ite	ls
 800bc1e:	4698      	movls	r8, r3
 800bc20:	4680      	movhi	r8, r0
 800bc22:	2303      	movs	r3, #3
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	f022 0204 	bic.w	r2, r2, #4
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6022      	str	r2, [r4, #0]
 800bc2e:	9304      	str	r3, [sp, #16]
 800bc30:	9700      	str	r7, [sp, #0]
 800bc32:	4633      	mov	r3, r6
 800bc34:	aa09      	add	r2, sp, #36	; 0x24
 800bc36:	4621      	mov	r1, r4
 800bc38:	4628      	mov	r0, r5
 800bc3a:	f000 f9d3 	bl	800bfe4 <_printf_common>
 800bc3e:	3001      	adds	r0, #1
 800bc40:	f040 808a 	bne.w	800bd58 <_printf_float+0x1b0>
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	b00b      	add	sp, #44	; 0x2c
 800bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	eeb4 0b40 	vcmp.f64	d0, d0
 800bc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc56:	d709      	bvc.n	800bc6c <_printf_float+0xc4>
 800bc58:	ee10 3a90 	vmov	r3, s1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bfbc      	itt	lt
 800bc60:	232d      	movlt	r3, #45	; 0x2d
 800bc62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc66:	487e      	ldr	r0, [pc, #504]	; (800be60 <_printf_float+0x2b8>)
 800bc68:	4b7e      	ldr	r3, [pc, #504]	; (800be64 <_printf_float+0x2bc>)
 800bc6a:	e7d5      	b.n	800bc18 <_printf_float+0x70>
 800bc6c:	6863      	ldr	r3, [r4, #4]
 800bc6e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bc72:	9104      	str	r1, [sp, #16]
 800bc74:	1c59      	adds	r1, r3, #1
 800bc76:	d13c      	bne.n	800bcf2 <_printf_float+0x14a>
 800bc78:	2306      	movs	r3, #6
 800bc7a:	6063      	str	r3, [r4, #4]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9303      	str	r3, [sp, #12]
 800bc80:	ab08      	add	r3, sp, #32
 800bc82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bc86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc8a:	ab07      	add	r3, sp, #28
 800bc8c:	6861      	ldr	r1, [r4, #4]
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	6022      	str	r2, [r4, #0]
 800bc92:	f10d 031b 	add.w	r3, sp, #27
 800bc96:	4628      	mov	r0, r5
 800bc98:	f7ff fef6 	bl	800ba88 <__cvt>
 800bc9c:	9b04      	ldr	r3, [sp, #16]
 800bc9e:	9907      	ldr	r1, [sp, #28]
 800bca0:	2b47      	cmp	r3, #71	; 0x47
 800bca2:	4680      	mov	r8, r0
 800bca4:	d108      	bne.n	800bcb8 <_printf_float+0x110>
 800bca6:	1cc8      	adds	r0, r1, #3
 800bca8:	db02      	blt.n	800bcb0 <_printf_float+0x108>
 800bcaa:	6863      	ldr	r3, [r4, #4]
 800bcac:	4299      	cmp	r1, r3
 800bcae:	dd41      	ble.n	800bd34 <_printf_float+0x18c>
 800bcb0:	f1a9 0902 	sub.w	r9, r9, #2
 800bcb4:	fa5f f989 	uxtb.w	r9, r9
 800bcb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bcbc:	d820      	bhi.n	800bd00 <_printf_float+0x158>
 800bcbe:	3901      	subs	r1, #1
 800bcc0:	464a      	mov	r2, r9
 800bcc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bcc6:	9107      	str	r1, [sp, #28]
 800bcc8:	f7ff ff30 	bl	800bb2c <__exponent>
 800bccc:	9a08      	ldr	r2, [sp, #32]
 800bcce:	9004      	str	r0, [sp, #16]
 800bcd0:	1813      	adds	r3, r2, r0
 800bcd2:	2a01      	cmp	r2, #1
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	dc02      	bgt.n	800bcde <_printf_float+0x136>
 800bcd8:	6822      	ldr	r2, [r4, #0]
 800bcda:	07d2      	lsls	r2, r2, #31
 800bcdc:	d501      	bpl.n	800bce2 <_printf_float+0x13a>
 800bcde:	3301      	adds	r3, #1
 800bce0:	6123      	str	r3, [r4, #16]
 800bce2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d0a2      	beq.n	800bc30 <_printf_float+0x88>
 800bcea:	232d      	movs	r3, #45	; 0x2d
 800bcec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf0:	e79e      	b.n	800bc30 <_printf_float+0x88>
 800bcf2:	9904      	ldr	r1, [sp, #16]
 800bcf4:	2947      	cmp	r1, #71	; 0x47
 800bcf6:	d1c1      	bne.n	800bc7c <_printf_float+0xd4>
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1bf      	bne.n	800bc7c <_printf_float+0xd4>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e7bc      	b.n	800bc7a <_printf_float+0xd2>
 800bd00:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bd04:	d118      	bne.n	800bd38 <_printf_float+0x190>
 800bd06:	2900      	cmp	r1, #0
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	dd0b      	ble.n	800bd24 <_printf_float+0x17c>
 800bd0c:	6121      	str	r1, [r4, #16]
 800bd0e:	b913      	cbnz	r3, 800bd16 <_printf_float+0x16e>
 800bd10:	6822      	ldr	r2, [r4, #0]
 800bd12:	07d0      	lsls	r0, r2, #31
 800bd14:	d502      	bpl.n	800bd1c <_printf_float+0x174>
 800bd16:	3301      	adds	r3, #1
 800bd18:	440b      	add	r3, r1
 800bd1a:	6123      	str	r3, [r4, #16]
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	e7de      	b.n	800bce2 <_printf_float+0x13a>
 800bd24:	b913      	cbnz	r3, 800bd2c <_printf_float+0x184>
 800bd26:	6822      	ldr	r2, [r4, #0]
 800bd28:	07d2      	lsls	r2, r2, #31
 800bd2a:	d501      	bpl.n	800bd30 <_printf_float+0x188>
 800bd2c:	3302      	adds	r3, #2
 800bd2e:	e7f4      	b.n	800bd1a <_printf_float+0x172>
 800bd30:	2301      	movs	r3, #1
 800bd32:	e7f2      	b.n	800bd1a <_printf_float+0x172>
 800bd34:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bd38:	9b08      	ldr	r3, [sp, #32]
 800bd3a:	4299      	cmp	r1, r3
 800bd3c:	db05      	blt.n	800bd4a <_printf_float+0x1a2>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	6121      	str	r1, [r4, #16]
 800bd42:	07d8      	lsls	r0, r3, #31
 800bd44:	d5ea      	bpl.n	800bd1c <_printf_float+0x174>
 800bd46:	1c4b      	adds	r3, r1, #1
 800bd48:	e7e7      	b.n	800bd1a <_printf_float+0x172>
 800bd4a:	2900      	cmp	r1, #0
 800bd4c:	bfd4      	ite	le
 800bd4e:	f1c1 0202 	rsble	r2, r1, #2
 800bd52:	2201      	movgt	r2, #1
 800bd54:	4413      	add	r3, r2
 800bd56:	e7e0      	b.n	800bd1a <_printf_float+0x172>
 800bd58:	6823      	ldr	r3, [r4, #0]
 800bd5a:	055a      	lsls	r2, r3, #21
 800bd5c:	d407      	bmi.n	800bd6e <_printf_float+0x1c6>
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	4642      	mov	r2, r8
 800bd62:	4631      	mov	r1, r6
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b8      	blx	r7
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d12a      	bne.n	800bdc2 <_printf_float+0x21a>
 800bd6c:	e76a      	b.n	800bc44 <_printf_float+0x9c>
 800bd6e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bd72:	f240 80e2 	bls.w	800bf3a <_printf_float+0x392>
 800bd76:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bd7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd82:	d133      	bne.n	800bdec <_printf_float+0x244>
 800bd84:	4a38      	ldr	r2, [pc, #224]	; (800be68 <_printf_float+0x2c0>)
 800bd86:	2301      	movs	r3, #1
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b8      	blx	r7
 800bd8e:	3001      	adds	r0, #1
 800bd90:	f43f af58 	beq.w	800bc44 <_printf_float+0x9c>
 800bd94:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	db02      	blt.n	800bda2 <_printf_float+0x1fa>
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	07d8      	lsls	r0, r3, #31
 800bda0:	d50f      	bpl.n	800bdc2 <_printf_float+0x21a>
 800bda2:	4653      	mov	r3, sl
 800bda4:	465a      	mov	r2, fp
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b8      	blx	r7
 800bdac:	3001      	adds	r0, #1
 800bdae:	f43f af49 	beq.w	800bc44 <_printf_float+0x9c>
 800bdb2:	f04f 0800 	mov.w	r8, #0
 800bdb6:	f104 091a 	add.w	r9, r4, #26
 800bdba:	9b08      	ldr	r3, [sp, #32]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	4543      	cmp	r3, r8
 800bdc0:	dc09      	bgt.n	800bdd6 <_printf_float+0x22e>
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	079b      	lsls	r3, r3, #30
 800bdc6:	f100 8108 	bmi.w	800bfda <_printf_float+0x432>
 800bdca:	68e0      	ldr	r0, [r4, #12]
 800bdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdce:	4298      	cmp	r0, r3
 800bdd0:	bfb8      	it	lt
 800bdd2:	4618      	movlt	r0, r3
 800bdd4:	e738      	b.n	800bc48 <_printf_float+0xa0>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	464a      	mov	r2, r9
 800bdda:	4631      	mov	r1, r6
 800bddc:	4628      	mov	r0, r5
 800bdde:	47b8      	blx	r7
 800bde0:	3001      	adds	r0, #1
 800bde2:	f43f af2f 	beq.w	800bc44 <_printf_float+0x9c>
 800bde6:	f108 0801 	add.w	r8, r8, #1
 800bdea:	e7e6      	b.n	800bdba <_printf_float+0x212>
 800bdec:	9b07      	ldr	r3, [sp, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	dc3c      	bgt.n	800be6c <_printf_float+0x2c4>
 800bdf2:	4a1d      	ldr	r2, [pc, #116]	; (800be68 <_printf_float+0x2c0>)
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	f43f af21 	beq.w	800bc44 <_printf_float+0x9c>
 800be02:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800be06:	4313      	orrs	r3, r2
 800be08:	d102      	bne.n	800be10 <_printf_float+0x268>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	07d9      	lsls	r1, r3, #31
 800be0e:	d5d8      	bpl.n	800bdc2 <_printf_float+0x21a>
 800be10:	4653      	mov	r3, sl
 800be12:	465a      	mov	r2, fp
 800be14:	4631      	mov	r1, r6
 800be16:	4628      	mov	r0, r5
 800be18:	47b8      	blx	r7
 800be1a:	3001      	adds	r0, #1
 800be1c:	f43f af12 	beq.w	800bc44 <_printf_float+0x9c>
 800be20:	f04f 0900 	mov.w	r9, #0
 800be24:	f104 0a1a 	add.w	sl, r4, #26
 800be28:	9b07      	ldr	r3, [sp, #28]
 800be2a:	425b      	negs	r3, r3
 800be2c:	454b      	cmp	r3, r9
 800be2e:	dc01      	bgt.n	800be34 <_printf_float+0x28c>
 800be30:	9b08      	ldr	r3, [sp, #32]
 800be32:	e795      	b.n	800bd60 <_printf_float+0x1b8>
 800be34:	2301      	movs	r3, #1
 800be36:	4652      	mov	r2, sl
 800be38:	4631      	mov	r1, r6
 800be3a:	4628      	mov	r0, r5
 800be3c:	47b8      	blx	r7
 800be3e:	3001      	adds	r0, #1
 800be40:	f43f af00 	beq.w	800bc44 <_printf_float+0x9c>
 800be44:	f109 0901 	add.w	r9, r9, #1
 800be48:	e7ee      	b.n	800be28 <_printf_float+0x280>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
 800be50:	ffffffff 	.word	0xffffffff
 800be54:	7fefffff 	.word	0x7fefffff
 800be58:	0800ea74 	.word	0x0800ea74
 800be5c:	0800ea78 	.word	0x0800ea78
 800be60:	0800ea80 	.word	0x0800ea80
 800be64:	0800ea7c 	.word	0x0800ea7c
 800be68:	0800ea84 	.word	0x0800ea84
 800be6c:	9a08      	ldr	r2, [sp, #32]
 800be6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be70:	429a      	cmp	r2, r3
 800be72:	bfa8      	it	ge
 800be74:	461a      	movge	r2, r3
 800be76:	2a00      	cmp	r2, #0
 800be78:	4691      	mov	r9, r2
 800be7a:	dc38      	bgt.n	800beee <_printf_float+0x346>
 800be7c:	2300      	movs	r3, #0
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be84:	f104 021a 	add.w	r2, r4, #26
 800be88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be8a:	9905      	ldr	r1, [sp, #20]
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	eba3 0309 	sub.w	r3, r3, r9
 800be92:	428b      	cmp	r3, r1
 800be94:	dc33      	bgt.n	800befe <_printf_float+0x356>
 800be96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	db3c      	blt.n	800bf18 <_printf_float+0x370>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	07da      	lsls	r2, r3, #31
 800bea2:	d439      	bmi.n	800bf18 <_printf_float+0x370>
 800bea4:	9a08      	ldr	r2, [sp, #32]
 800bea6:	9b04      	ldr	r3, [sp, #16]
 800bea8:	9907      	ldr	r1, [sp, #28]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	eba2 0901 	sub.w	r9, r2, r1
 800beb0:	4599      	cmp	r9, r3
 800beb2:	bfa8      	it	ge
 800beb4:	4699      	movge	r9, r3
 800beb6:	f1b9 0f00 	cmp.w	r9, #0
 800beba:	dc35      	bgt.n	800bf28 <_printf_float+0x380>
 800bebc:	f04f 0800 	mov.w	r8, #0
 800bec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bec4:	f104 0a1a 	add.w	sl, r4, #26
 800bec8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800becc:	1a9b      	subs	r3, r3, r2
 800bece:	eba3 0309 	sub.w	r3, r3, r9
 800bed2:	4543      	cmp	r3, r8
 800bed4:	f77f af75 	ble.w	800bdc2 <_printf_float+0x21a>
 800bed8:	2301      	movs	r3, #1
 800beda:	4652      	mov	r2, sl
 800bedc:	4631      	mov	r1, r6
 800bede:	4628      	mov	r0, r5
 800bee0:	47b8      	blx	r7
 800bee2:	3001      	adds	r0, #1
 800bee4:	f43f aeae 	beq.w	800bc44 <_printf_float+0x9c>
 800bee8:	f108 0801 	add.w	r8, r8, #1
 800beec:	e7ec      	b.n	800bec8 <_printf_float+0x320>
 800beee:	4613      	mov	r3, r2
 800bef0:	4631      	mov	r1, r6
 800bef2:	4642      	mov	r2, r8
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b8      	blx	r7
 800bef8:	3001      	adds	r0, #1
 800befa:	d1bf      	bne.n	800be7c <_printf_float+0x2d4>
 800befc:	e6a2      	b.n	800bc44 <_printf_float+0x9c>
 800befe:	2301      	movs	r3, #1
 800bf00:	4631      	mov	r1, r6
 800bf02:	4628      	mov	r0, r5
 800bf04:	9204      	str	r2, [sp, #16]
 800bf06:	47b8      	blx	r7
 800bf08:	3001      	adds	r0, #1
 800bf0a:	f43f ae9b 	beq.w	800bc44 <_printf_float+0x9c>
 800bf0e:	9b05      	ldr	r3, [sp, #20]
 800bf10:	9a04      	ldr	r2, [sp, #16]
 800bf12:	3301      	adds	r3, #1
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	e7b7      	b.n	800be88 <_printf_float+0x2e0>
 800bf18:	4653      	mov	r3, sl
 800bf1a:	465a      	mov	r2, fp
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4628      	mov	r0, r5
 800bf20:	47b8      	blx	r7
 800bf22:	3001      	adds	r0, #1
 800bf24:	d1be      	bne.n	800bea4 <_printf_float+0x2fc>
 800bf26:	e68d      	b.n	800bc44 <_printf_float+0x9c>
 800bf28:	9a04      	ldr	r2, [sp, #16]
 800bf2a:	464b      	mov	r3, r9
 800bf2c:	4442      	add	r2, r8
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4628      	mov	r0, r5
 800bf32:	47b8      	blx	r7
 800bf34:	3001      	adds	r0, #1
 800bf36:	d1c1      	bne.n	800bebc <_printf_float+0x314>
 800bf38:	e684      	b.n	800bc44 <_printf_float+0x9c>
 800bf3a:	9a08      	ldr	r2, [sp, #32]
 800bf3c:	2a01      	cmp	r2, #1
 800bf3e:	dc01      	bgt.n	800bf44 <_printf_float+0x39c>
 800bf40:	07db      	lsls	r3, r3, #31
 800bf42:	d537      	bpl.n	800bfb4 <_printf_float+0x40c>
 800bf44:	2301      	movs	r3, #1
 800bf46:	4642      	mov	r2, r8
 800bf48:	4631      	mov	r1, r6
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	47b8      	blx	r7
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f43f ae78 	beq.w	800bc44 <_printf_float+0x9c>
 800bf54:	4653      	mov	r3, sl
 800bf56:	465a      	mov	r2, fp
 800bf58:	4631      	mov	r1, r6
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	47b8      	blx	r7
 800bf5e:	3001      	adds	r0, #1
 800bf60:	f43f ae70 	beq.w	800bc44 <_printf_float+0x9c>
 800bf64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bf68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf70:	d01b      	beq.n	800bfaa <_printf_float+0x402>
 800bf72:	9b08      	ldr	r3, [sp, #32]
 800bf74:	f108 0201 	add.w	r2, r8, #1
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	47b8      	blx	r7
 800bf80:	3001      	adds	r0, #1
 800bf82:	d10e      	bne.n	800bfa2 <_printf_float+0x3fa>
 800bf84:	e65e      	b.n	800bc44 <_printf_float+0x9c>
 800bf86:	2301      	movs	r3, #1
 800bf88:	464a      	mov	r2, r9
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	47b8      	blx	r7
 800bf90:	3001      	adds	r0, #1
 800bf92:	f43f ae57 	beq.w	800bc44 <_printf_float+0x9c>
 800bf96:	f108 0801 	add.w	r8, r8, #1
 800bf9a:	9b08      	ldr	r3, [sp, #32]
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	4543      	cmp	r3, r8
 800bfa0:	dcf1      	bgt.n	800bf86 <_printf_float+0x3de>
 800bfa2:	9b04      	ldr	r3, [sp, #16]
 800bfa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bfa8:	e6db      	b.n	800bd62 <_printf_float+0x1ba>
 800bfaa:	f04f 0800 	mov.w	r8, #0
 800bfae:	f104 091a 	add.w	r9, r4, #26
 800bfb2:	e7f2      	b.n	800bf9a <_printf_float+0x3f2>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	4642      	mov	r2, r8
 800bfb8:	e7df      	b.n	800bf7a <_printf_float+0x3d2>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	464a      	mov	r2, r9
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	47b8      	blx	r7
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	f43f ae3d 	beq.w	800bc44 <_printf_float+0x9c>
 800bfca:	f108 0801 	add.w	r8, r8, #1
 800bfce:	68e3      	ldr	r3, [r4, #12]
 800bfd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfd2:	1a5b      	subs	r3, r3, r1
 800bfd4:	4543      	cmp	r3, r8
 800bfd6:	dcf0      	bgt.n	800bfba <_printf_float+0x412>
 800bfd8:	e6f7      	b.n	800bdca <_printf_float+0x222>
 800bfda:	f04f 0800 	mov.w	r8, #0
 800bfde:	f104 0919 	add.w	r9, r4, #25
 800bfe2:	e7f4      	b.n	800bfce <_printf_float+0x426>

0800bfe4 <_printf_common>:
 800bfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe8:	4616      	mov	r6, r2
 800bfea:	4699      	mov	r9, r3
 800bfec:	688a      	ldr	r2, [r1, #8]
 800bfee:	690b      	ldr	r3, [r1, #16]
 800bff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bff4:	4293      	cmp	r3, r2
 800bff6:	bfb8      	it	lt
 800bff8:	4613      	movlt	r3, r2
 800bffa:	6033      	str	r3, [r6, #0]
 800bffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c000:	4607      	mov	r7, r0
 800c002:	460c      	mov	r4, r1
 800c004:	b10a      	cbz	r2, 800c00a <_printf_common+0x26>
 800c006:	3301      	adds	r3, #1
 800c008:	6033      	str	r3, [r6, #0]
 800c00a:	6823      	ldr	r3, [r4, #0]
 800c00c:	0699      	lsls	r1, r3, #26
 800c00e:	bf42      	ittt	mi
 800c010:	6833      	ldrmi	r3, [r6, #0]
 800c012:	3302      	addmi	r3, #2
 800c014:	6033      	strmi	r3, [r6, #0]
 800c016:	6825      	ldr	r5, [r4, #0]
 800c018:	f015 0506 	ands.w	r5, r5, #6
 800c01c:	d106      	bne.n	800c02c <_printf_common+0x48>
 800c01e:	f104 0a19 	add.w	sl, r4, #25
 800c022:	68e3      	ldr	r3, [r4, #12]
 800c024:	6832      	ldr	r2, [r6, #0]
 800c026:	1a9b      	subs	r3, r3, r2
 800c028:	42ab      	cmp	r3, r5
 800c02a:	dc26      	bgt.n	800c07a <_printf_common+0x96>
 800c02c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c030:	1e13      	subs	r3, r2, #0
 800c032:	6822      	ldr	r2, [r4, #0]
 800c034:	bf18      	it	ne
 800c036:	2301      	movne	r3, #1
 800c038:	0692      	lsls	r2, r2, #26
 800c03a:	d42b      	bmi.n	800c094 <_printf_common+0xb0>
 800c03c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c040:	4649      	mov	r1, r9
 800c042:	4638      	mov	r0, r7
 800c044:	47c0      	blx	r8
 800c046:	3001      	adds	r0, #1
 800c048:	d01e      	beq.n	800c088 <_printf_common+0xa4>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	68e5      	ldr	r5, [r4, #12]
 800c04e:	6832      	ldr	r2, [r6, #0]
 800c050:	f003 0306 	and.w	r3, r3, #6
 800c054:	2b04      	cmp	r3, #4
 800c056:	bf08      	it	eq
 800c058:	1aad      	subeq	r5, r5, r2
 800c05a:	68a3      	ldr	r3, [r4, #8]
 800c05c:	6922      	ldr	r2, [r4, #16]
 800c05e:	bf0c      	ite	eq
 800c060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c064:	2500      	movne	r5, #0
 800c066:	4293      	cmp	r3, r2
 800c068:	bfc4      	itt	gt
 800c06a:	1a9b      	subgt	r3, r3, r2
 800c06c:	18ed      	addgt	r5, r5, r3
 800c06e:	2600      	movs	r6, #0
 800c070:	341a      	adds	r4, #26
 800c072:	42b5      	cmp	r5, r6
 800c074:	d11a      	bne.n	800c0ac <_printf_common+0xc8>
 800c076:	2000      	movs	r0, #0
 800c078:	e008      	b.n	800c08c <_printf_common+0xa8>
 800c07a:	2301      	movs	r3, #1
 800c07c:	4652      	mov	r2, sl
 800c07e:	4649      	mov	r1, r9
 800c080:	4638      	mov	r0, r7
 800c082:	47c0      	blx	r8
 800c084:	3001      	adds	r0, #1
 800c086:	d103      	bne.n	800c090 <_printf_common+0xac>
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c090:	3501      	adds	r5, #1
 800c092:	e7c6      	b.n	800c022 <_printf_common+0x3e>
 800c094:	18e1      	adds	r1, r4, r3
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	2030      	movs	r0, #48	; 0x30
 800c09a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c09e:	4422      	add	r2, r4
 800c0a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	e7c7      	b.n	800c03c <_printf_common+0x58>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	47c0      	blx	r8
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	d0e6      	beq.n	800c088 <_printf_common+0xa4>
 800c0ba:	3601      	adds	r6, #1
 800c0bc:	e7d9      	b.n	800c072 <_printf_common+0x8e>
	...

0800c0c0 <_printf_i>:
 800c0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	4691      	mov	r9, r2
 800c0c8:	7e27      	ldrb	r7, [r4, #24]
 800c0ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c0cc:	2f78      	cmp	r7, #120	; 0x78
 800c0ce:	4680      	mov	r8, r0
 800c0d0:	469a      	mov	sl, r3
 800c0d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0d6:	d807      	bhi.n	800c0e8 <_printf_i+0x28>
 800c0d8:	2f62      	cmp	r7, #98	; 0x62
 800c0da:	d80a      	bhi.n	800c0f2 <_printf_i+0x32>
 800c0dc:	2f00      	cmp	r7, #0
 800c0de:	f000 80d8 	beq.w	800c292 <_printf_i+0x1d2>
 800c0e2:	2f58      	cmp	r7, #88	; 0x58
 800c0e4:	f000 80a3 	beq.w	800c22e <_printf_i+0x16e>
 800c0e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c0ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0f0:	e03a      	b.n	800c168 <_printf_i+0xa8>
 800c0f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0f6:	2b15      	cmp	r3, #21
 800c0f8:	d8f6      	bhi.n	800c0e8 <_printf_i+0x28>
 800c0fa:	a001      	add	r0, pc, #4	; (adr r0, 800c100 <_printf_i+0x40>)
 800c0fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c100:	0800c159 	.word	0x0800c159
 800c104:	0800c16d 	.word	0x0800c16d
 800c108:	0800c0e9 	.word	0x0800c0e9
 800c10c:	0800c0e9 	.word	0x0800c0e9
 800c110:	0800c0e9 	.word	0x0800c0e9
 800c114:	0800c0e9 	.word	0x0800c0e9
 800c118:	0800c16d 	.word	0x0800c16d
 800c11c:	0800c0e9 	.word	0x0800c0e9
 800c120:	0800c0e9 	.word	0x0800c0e9
 800c124:	0800c0e9 	.word	0x0800c0e9
 800c128:	0800c0e9 	.word	0x0800c0e9
 800c12c:	0800c279 	.word	0x0800c279
 800c130:	0800c19d 	.word	0x0800c19d
 800c134:	0800c25b 	.word	0x0800c25b
 800c138:	0800c0e9 	.word	0x0800c0e9
 800c13c:	0800c0e9 	.word	0x0800c0e9
 800c140:	0800c29b 	.word	0x0800c29b
 800c144:	0800c0e9 	.word	0x0800c0e9
 800c148:	0800c19d 	.word	0x0800c19d
 800c14c:	0800c0e9 	.word	0x0800c0e9
 800c150:	0800c0e9 	.word	0x0800c0e9
 800c154:	0800c263 	.word	0x0800c263
 800c158:	680b      	ldr	r3, [r1, #0]
 800c15a:	1d1a      	adds	r2, r3, #4
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	600a      	str	r2, [r1, #0]
 800c160:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c168:	2301      	movs	r3, #1
 800c16a:	e0a3      	b.n	800c2b4 <_printf_i+0x1f4>
 800c16c:	6825      	ldr	r5, [r4, #0]
 800c16e:	6808      	ldr	r0, [r1, #0]
 800c170:	062e      	lsls	r6, r5, #24
 800c172:	f100 0304 	add.w	r3, r0, #4
 800c176:	d50a      	bpl.n	800c18e <_printf_i+0xce>
 800c178:	6805      	ldr	r5, [r0, #0]
 800c17a:	600b      	str	r3, [r1, #0]
 800c17c:	2d00      	cmp	r5, #0
 800c17e:	da03      	bge.n	800c188 <_printf_i+0xc8>
 800c180:	232d      	movs	r3, #45	; 0x2d
 800c182:	426d      	negs	r5, r5
 800c184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c188:	485e      	ldr	r0, [pc, #376]	; (800c304 <_printf_i+0x244>)
 800c18a:	230a      	movs	r3, #10
 800c18c:	e019      	b.n	800c1c2 <_printf_i+0x102>
 800c18e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c192:	6805      	ldr	r5, [r0, #0]
 800c194:	600b      	str	r3, [r1, #0]
 800c196:	bf18      	it	ne
 800c198:	b22d      	sxthne	r5, r5
 800c19a:	e7ef      	b.n	800c17c <_printf_i+0xbc>
 800c19c:	680b      	ldr	r3, [r1, #0]
 800c19e:	6825      	ldr	r5, [r4, #0]
 800c1a0:	1d18      	adds	r0, r3, #4
 800c1a2:	6008      	str	r0, [r1, #0]
 800c1a4:	0628      	lsls	r0, r5, #24
 800c1a6:	d501      	bpl.n	800c1ac <_printf_i+0xec>
 800c1a8:	681d      	ldr	r5, [r3, #0]
 800c1aa:	e002      	b.n	800c1b2 <_printf_i+0xf2>
 800c1ac:	0669      	lsls	r1, r5, #25
 800c1ae:	d5fb      	bpl.n	800c1a8 <_printf_i+0xe8>
 800c1b0:	881d      	ldrh	r5, [r3, #0]
 800c1b2:	4854      	ldr	r0, [pc, #336]	; (800c304 <_printf_i+0x244>)
 800c1b4:	2f6f      	cmp	r7, #111	; 0x6f
 800c1b6:	bf0c      	ite	eq
 800c1b8:	2308      	moveq	r3, #8
 800c1ba:	230a      	movne	r3, #10
 800c1bc:	2100      	movs	r1, #0
 800c1be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1c2:	6866      	ldr	r6, [r4, #4]
 800c1c4:	60a6      	str	r6, [r4, #8]
 800c1c6:	2e00      	cmp	r6, #0
 800c1c8:	bfa2      	ittt	ge
 800c1ca:	6821      	ldrge	r1, [r4, #0]
 800c1cc:	f021 0104 	bicge.w	r1, r1, #4
 800c1d0:	6021      	strge	r1, [r4, #0]
 800c1d2:	b90d      	cbnz	r5, 800c1d8 <_printf_i+0x118>
 800c1d4:	2e00      	cmp	r6, #0
 800c1d6:	d04d      	beq.n	800c274 <_printf_i+0x1b4>
 800c1d8:	4616      	mov	r6, r2
 800c1da:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1de:	fb03 5711 	mls	r7, r3, r1, r5
 800c1e2:	5dc7      	ldrb	r7, [r0, r7]
 800c1e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1e8:	462f      	mov	r7, r5
 800c1ea:	42bb      	cmp	r3, r7
 800c1ec:	460d      	mov	r5, r1
 800c1ee:	d9f4      	bls.n	800c1da <_printf_i+0x11a>
 800c1f0:	2b08      	cmp	r3, #8
 800c1f2:	d10b      	bne.n	800c20c <_printf_i+0x14c>
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	07df      	lsls	r7, r3, #31
 800c1f8:	d508      	bpl.n	800c20c <_printf_i+0x14c>
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	6861      	ldr	r1, [r4, #4]
 800c1fe:	4299      	cmp	r1, r3
 800c200:	bfde      	ittt	le
 800c202:	2330      	movle	r3, #48	; 0x30
 800c204:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c208:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c20c:	1b92      	subs	r2, r2, r6
 800c20e:	6122      	str	r2, [r4, #16]
 800c210:	f8cd a000 	str.w	sl, [sp]
 800c214:	464b      	mov	r3, r9
 800c216:	aa03      	add	r2, sp, #12
 800c218:	4621      	mov	r1, r4
 800c21a:	4640      	mov	r0, r8
 800c21c:	f7ff fee2 	bl	800bfe4 <_printf_common>
 800c220:	3001      	adds	r0, #1
 800c222:	d14c      	bne.n	800c2be <_printf_i+0x1fe>
 800c224:	f04f 30ff 	mov.w	r0, #4294967295
 800c228:	b004      	add	sp, #16
 800c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22e:	4835      	ldr	r0, [pc, #212]	; (800c304 <_printf_i+0x244>)
 800c230:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c234:	6823      	ldr	r3, [r4, #0]
 800c236:	680e      	ldr	r6, [r1, #0]
 800c238:	061f      	lsls	r7, r3, #24
 800c23a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c23e:	600e      	str	r6, [r1, #0]
 800c240:	d514      	bpl.n	800c26c <_printf_i+0x1ac>
 800c242:	07d9      	lsls	r1, r3, #31
 800c244:	bf44      	itt	mi
 800c246:	f043 0320 	orrmi.w	r3, r3, #32
 800c24a:	6023      	strmi	r3, [r4, #0]
 800c24c:	b91d      	cbnz	r5, 800c256 <_printf_i+0x196>
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	f023 0320 	bic.w	r3, r3, #32
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	2310      	movs	r3, #16
 800c258:	e7b0      	b.n	800c1bc <_printf_i+0xfc>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	f043 0320 	orr.w	r3, r3, #32
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	2378      	movs	r3, #120	; 0x78
 800c264:	4828      	ldr	r0, [pc, #160]	; (800c308 <_printf_i+0x248>)
 800c266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c26a:	e7e3      	b.n	800c234 <_printf_i+0x174>
 800c26c:	065e      	lsls	r6, r3, #25
 800c26e:	bf48      	it	mi
 800c270:	b2ad      	uxthmi	r5, r5
 800c272:	e7e6      	b.n	800c242 <_printf_i+0x182>
 800c274:	4616      	mov	r6, r2
 800c276:	e7bb      	b.n	800c1f0 <_printf_i+0x130>
 800c278:	680b      	ldr	r3, [r1, #0]
 800c27a:	6826      	ldr	r6, [r4, #0]
 800c27c:	6960      	ldr	r0, [r4, #20]
 800c27e:	1d1d      	adds	r5, r3, #4
 800c280:	600d      	str	r5, [r1, #0]
 800c282:	0635      	lsls	r5, r6, #24
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	d501      	bpl.n	800c28c <_printf_i+0x1cc>
 800c288:	6018      	str	r0, [r3, #0]
 800c28a:	e002      	b.n	800c292 <_printf_i+0x1d2>
 800c28c:	0671      	lsls	r1, r6, #25
 800c28e:	d5fb      	bpl.n	800c288 <_printf_i+0x1c8>
 800c290:	8018      	strh	r0, [r3, #0]
 800c292:	2300      	movs	r3, #0
 800c294:	6123      	str	r3, [r4, #16]
 800c296:	4616      	mov	r6, r2
 800c298:	e7ba      	b.n	800c210 <_printf_i+0x150>
 800c29a:	680b      	ldr	r3, [r1, #0]
 800c29c:	1d1a      	adds	r2, r3, #4
 800c29e:	600a      	str	r2, [r1, #0]
 800c2a0:	681e      	ldr	r6, [r3, #0]
 800c2a2:	6862      	ldr	r2, [r4, #4]
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7f3 ffd2 	bl	8000250 <memchr>
 800c2ac:	b108      	cbz	r0, 800c2b2 <_printf_i+0x1f2>
 800c2ae:	1b80      	subs	r0, r0, r6
 800c2b0:	6060      	str	r0, [r4, #4]
 800c2b2:	6863      	ldr	r3, [r4, #4]
 800c2b4:	6123      	str	r3, [r4, #16]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2bc:	e7a8      	b.n	800c210 <_printf_i+0x150>
 800c2be:	6923      	ldr	r3, [r4, #16]
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	47d0      	blx	sl
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d0ab      	beq.n	800c224 <_printf_i+0x164>
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	079b      	lsls	r3, r3, #30
 800c2d0:	d413      	bmi.n	800c2fa <_printf_i+0x23a>
 800c2d2:	68e0      	ldr	r0, [r4, #12]
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	4298      	cmp	r0, r3
 800c2d8:	bfb8      	it	lt
 800c2da:	4618      	movlt	r0, r3
 800c2dc:	e7a4      	b.n	800c228 <_printf_i+0x168>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4632      	mov	r2, r6
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	47d0      	blx	sl
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d09b      	beq.n	800c224 <_printf_i+0x164>
 800c2ec:	3501      	adds	r5, #1
 800c2ee:	68e3      	ldr	r3, [r4, #12]
 800c2f0:	9903      	ldr	r1, [sp, #12]
 800c2f2:	1a5b      	subs	r3, r3, r1
 800c2f4:	42ab      	cmp	r3, r5
 800c2f6:	dcf2      	bgt.n	800c2de <_printf_i+0x21e>
 800c2f8:	e7eb      	b.n	800c2d2 <_printf_i+0x212>
 800c2fa:	2500      	movs	r5, #0
 800c2fc:	f104 0619 	add.w	r6, r4, #25
 800c300:	e7f5      	b.n	800c2ee <_printf_i+0x22e>
 800c302:	bf00      	nop
 800c304:	0800ea86 	.word	0x0800ea86
 800c308:	0800ea97 	.word	0x0800ea97

0800c30c <siprintf>:
 800c30c:	b40e      	push	{r1, r2, r3}
 800c30e:	b500      	push	{lr}
 800c310:	b09c      	sub	sp, #112	; 0x70
 800c312:	ab1d      	add	r3, sp, #116	; 0x74
 800c314:	9002      	str	r0, [sp, #8]
 800c316:	9006      	str	r0, [sp, #24]
 800c318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c31c:	4809      	ldr	r0, [pc, #36]	; (800c344 <siprintf+0x38>)
 800c31e:	9107      	str	r1, [sp, #28]
 800c320:	9104      	str	r1, [sp, #16]
 800c322:	4909      	ldr	r1, [pc, #36]	; (800c348 <siprintf+0x3c>)
 800c324:	f853 2b04 	ldr.w	r2, [r3], #4
 800c328:	9105      	str	r1, [sp, #20]
 800c32a:	6800      	ldr	r0, [r0, #0]
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	a902      	add	r1, sp, #8
 800c330:	f001 faca 	bl	800d8c8 <_svfiprintf_r>
 800c334:	9b02      	ldr	r3, [sp, #8]
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]
 800c33a:	b01c      	add	sp, #112	; 0x70
 800c33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c340:	b003      	add	sp, #12
 800c342:	4770      	bx	lr
 800c344:	200000dc 	.word	0x200000dc
 800c348:	ffff0208 	.word	0xffff0208

0800c34c <quorem>:
 800c34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	6903      	ldr	r3, [r0, #16]
 800c352:	690c      	ldr	r4, [r1, #16]
 800c354:	42a3      	cmp	r3, r4
 800c356:	4607      	mov	r7, r0
 800c358:	f2c0 8081 	blt.w	800c45e <quorem+0x112>
 800c35c:	3c01      	subs	r4, #1
 800c35e:	f101 0814 	add.w	r8, r1, #20
 800c362:	f100 0514 	add.w	r5, r0, #20
 800c366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c36a:	9301      	str	r3, [sp, #4]
 800c36c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c374:	3301      	adds	r3, #1
 800c376:	429a      	cmp	r2, r3
 800c378:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c37c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c380:	fbb2 f6f3 	udiv	r6, r2, r3
 800c384:	d331      	bcc.n	800c3ea <quorem+0x9e>
 800c386:	f04f 0e00 	mov.w	lr, #0
 800c38a:	4640      	mov	r0, r8
 800c38c:	46ac      	mov	ip, r5
 800c38e:	46f2      	mov	sl, lr
 800c390:	f850 2b04 	ldr.w	r2, [r0], #4
 800c394:	b293      	uxth	r3, r2
 800c396:	fb06 e303 	mla	r3, r6, r3, lr
 800c39a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	ebaa 0303 	sub.w	r3, sl, r3
 800c3a4:	0c12      	lsrs	r2, r2, #16
 800c3a6:	f8dc a000 	ldr.w	sl, [ip]
 800c3aa:	fb06 e202 	mla	r2, r6, r2, lr
 800c3ae:	fa13 f38a 	uxtah	r3, r3, sl
 800c3b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3b6:	fa1f fa82 	uxth.w	sl, r2
 800c3ba:	f8dc 2000 	ldr.w	r2, [ip]
 800c3be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c3c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3cc:	4581      	cmp	r9, r0
 800c3ce:	f84c 3b04 	str.w	r3, [ip], #4
 800c3d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3d6:	d2db      	bcs.n	800c390 <quorem+0x44>
 800c3d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c3dc:	b92b      	cbnz	r3, 800c3ea <quorem+0x9e>
 800c3de:	9b01      	ldr	r3, [sp, #4]
 800c3e0:	3b04      	subs	r3, #4
 800c3e2:	429d      	cmp	r5, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	d32e      	bcc.n	800c446 <quorem+0xfa>
 800c3e8:	613c      	str	r4, [r7, #16]
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f001 f856 	bl	800d49c <__mcmp>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	db24      	blt.n	800c43e <quorem+0xf2>
 800c3f4:	3601      	adds	r6, #1
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f04f 0c00 	mov.w	ip, #0
 800c3fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c400:	f8d0 e000 	ldr.w	lr, [r0]
 800c404:	b293      	uxth	r3, r2
 800c406:	ebac 0303 	sub.w	r3, ip, r3
 800c40a:	0c12      	lsrs	r2, r2, #16
 800c40c:	fa13 f38e 	uxtah	r3, r3, lr
 800c410:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c418:	b29b      	uxth	r3, r3
 800c41a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c41e:	45c1      	cmp	r9, r8
 800c420:	f840 3b04 	str.w	r3, [r0], #4
 800c424:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c428:	d2e8      	bcs.n	800c3fc <quorem+0xb0>
 800c42a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c42e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c432:	b922      	cbnz	r2, 800c43e <quorem+0xf2>
 800c434:	3b04      	subs	r3, #4
 800c436:	429d      	cmp	r5, r3
 800c438:	461a      	mov	r2, r3
 800c43a:	d30a      	bcc.n	800c452 <quorem+0x106>
 800c43c:	613c      	str	r4, [r7, #16]
 800c43e:	4630      	mov	r0, r6
 800c440:	b003      	add	sp, #12
 800c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c446:	6812      	ldr	r2, [r2, #0]
 800c448:	3b04      	subs	r3, #4
 800c44a:	2a00      	cmp	r2, #0
 800c44c:	d1cc      	bne.n	800c3e8 <quorem+0x9c>
 800c44e:	3c01      	subs	r4, #1
 800c450:	e7c7      	b.n	800c3e2 <quorem+0x96>
 800c452:	6812      	ldr	r2, [r2, #0]
 800c454:	3b04      	subs	r3, #4
 800c456:	2a00      	cmp	r2, #0
 800c458:	d1f0      	bne.n	800c43c <quorem+0xf0>
 800c45a:	3c01      	subs	r4, #1
 800c45c:	e7eb      	b.n	800c436 <quorem+0xea>
 800c45e:	2000      	movs	r0, #0
 800c460:	e7ee      	b.n	800c440 <quorem+0xf4>
 800c462:	0000      	movs	r0, r0
 800c464:	0000      	movs	r0, r0
	...

0800c468 <_dtoa_r>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	ec59 8b10 	vmov	r8, r9, d0
 800c470:	b095      	sub	sp, #84	; 0x54
 800c472:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c474:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c476:	9107      	str	r1, [sp, #28]
 800c478:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c47c:	4606      	mov	r6, r0
 800c47e:	9209      	str	r2, [sp, #36]	; 0x24
 800c480:	9310      	str	r3, [sp, #64]	; 0x40
 800c482:	b975      	cbnz	r5, 800c4a2 <_dtoa_r+0x3a>
 800c484:	2010      	movs	r0, #16
 800c486:	f000 fd75 	bl	800cf74 <malloc>
 800c48a:	4602      	mov	r2, r0
 800c48c:	6270      	str	r0, [r6, #36]	; 0x24
 800c48e:	b920      	cbnz	r0, 800c49a <_dtoa_r+0x32>
 800c490:	4bab      	ldr	r3, [pc, #684]	; (800c740 <_dtoa_r+0x2d8>)
 800c492:	21ea      	movs	r1, #234	; 0xea
 800c494:	48ab      	ldr	r0, [pc, #684]	; (800c744 <_dtoa_r+0x2dc>)
 800c496:	f001 fb27 	bl	800dae8 <__assert_func>
 800c49a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c49e:	6005      	str	r5, [r0, #0]
 800c4a0:	60c5      	str	r5, [r0, #12]
 800c4a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c4a4:	6819      	ldr	r1, [r3, #0]
 800c4a6:	b151      	cbz	r1, 800c4be <_dtoa_r+0x56>
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	604a      	str	r2, [r1, #4]
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	4093      	lsls	r3, r2
 800c4b0:	608b      	str	r3, [r1, #8]
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f000 fdb4 	bl	800d020 <_Bfree>
 800c4b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	f1b9 0300 	subs.w	r3, r9, #0
 800c4c2:	bfbb      	ittet	lt
 800c4c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c4c8:	9303      	strlt	r3, [sp, #12]
 800c4ca:	2300      	movge	r3, #0
 800c4cc:	2201      	movlt	r2, #1
 800c4ce:	bfac      	ite	ge
 800c4d0:	6023      	strge	r3, [r4, #0]
 800c4d2:	6022      	strlt	r2, [r4, #0]
 800c4d4:	4b9c      	ldr	r3, [pc, #624]	; (800c748 <_dtoa_r+0x2e0>)
 800c4d6:	9c03      	ldr	r4, [sp, #12]
 800c4d8:	43a3      	bics	r3, r4
 800c4da:	d11a      	bne.n	800c512 <_dtoa_r+0xaa>
 800c4dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4de:	f242 730f 	movw	r3, #9999	; 0x270f
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c4e8:	ea53 0308 	orrs.w	r3, r3, r8
 800c4ec:	f000 8512 	beq.w	800cf14 <_dtoa_r+0xaac>
 800c4f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c4f2:	b953      	cbnz	r3, 800c50a <_dtoa_r+0xa2>
 800c4f4:	4b95      	ldr	r3, [pc, #596]	; (800c74c <_dtoa_r+0x2e4>)
 800c4f6:	e01f      	b.n	800c538 <_dtoa_r+0xd0>
 800c4f8:	4b95      	ldr	r3, [pc, #596]	; (800c750 <_dtoa_r+0x2e8>)
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	3308      	adds	r3, #8
 800c4fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c500:	6013      	str	r3, [r2, #0]
 800c502:	9800      	ldr	r0, [sp, #0]
 800c504:	b015      	add	sp, #84	; 0x54
 800c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50a:	4b90      	ldr	r3, [pc, #576]	; (800c74c <_dtoa_r+0x2e4>)
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	3303      	adds	r3, #3
 800c510:	e7f5      	b.n	800c4fe <_dtoa_r+0x96>
 800c512:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c516:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c522:	d10b      	bne.n	800c53c <_dtoa_r+0xd4>
 800c524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c526:	2301      	movs	r3, #1
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 84ee 	beq.w	800cf0e <_dtoa_r+0xaa6>
 800c532:	4888      	ldr	r0, [pc, #544]	; (800c754 <_dtoa_r+0x2ec>)
 800c534:	6018      	str	r0, [r3, #0]
 800c536:	1e43      	subs	r3, r0, #1
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	e7e2      	b.n	800c502 <_dtoa_r+0x9a>
 800c53c:	a913      	add	r1, sp, #76	; 0x4c
 800c53e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c542:	aa12      	add	r2, sp, #72	; 0x48
 800c544:	4630      	mov	r0, r6
 800c546:	f001 f84d 	bl	800d5e4 <__d2b>
 800c54a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c54e:	4605      	mov	r5, r0
 800c550:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c552:	2900      	cmp	r1, #0
 800c554:	d047      	beq.n	800c5e6 <_dtoa_r+0x17e>
 800c556:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c558:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c55c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c560:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c564:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c568:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c56c:	2400      	movs	r4, #0
 800c56e:	ec43 2b16 	vmov	d6, r2, r3
 800c572:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c576:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800c728 <_dtoa_r+0x2c0>
 800c57a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c57e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800c730 <_dtoa_r+0x2c8>
 800c582:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c586:	eeb0 7b46 	vmov.f64	d7, d6
 800c58a:	ee06 1a90 	vmov	s13, r1
 800c58e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800c592:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c738 <_dtoa_r+0x2d0>
 800c596:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c59a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c59e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a6:	ee16 ba90 	vmov	fp, s13
 800c5aa:	9411      	str	r4, [sp, #68]	; 0x44
 800c5ac:	d508      	bpl.n	800c5c0 <_dtoa_r+0x158>
 800c5ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c5b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800c5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ba:	bf18      	it	ne
 800c5bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c5c0:	f1bb 0f16 	cmp.w	fp, #22
 800c5c4:	d832      	bhi.n	800c62c <_dtoa_r+0x1c4>
 800c5c6:	4b64      	ldr	r3, [pc, #400]	; (800c758 <_dtoa_r+0x2f0>)
 800c5c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5cc:	ed93 7b00 	vldr	d7, [r3]
 800c5d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c5d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5dc:	d501      	bpl.n	800c5e2 <_dtoa_r+0x17a>
 800c5de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e023      	b.n	800c62e <_dtoa_r+0x1c6>
 800c5e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5e8:	4401      	add	r1, r0
 800c5ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c5ee:	2b20      	cmp	r3, #32
 800c5f0:	bfc3      	ittte	gt
 800c5f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5f6:	fa04 f303 	lslgt.w	r3, r4, r3
 800c5fa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c5fe:	f1c3 0320 	rsble	r3, r3, #32
 800c602:	bfc6      	itte	gt
 800c604:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c608:	ea43 0308 	orrgt.w	r3, r3, r8
 800c60c:	fa08 f303 	lslle.w	r3, r8, r3
 800c610:	ee07 3a90 	vmov	s15, r3
 800c614:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c618:	3901      	subs	r1, #1
 800c61a:	ed8d 7b00 	vstr	d7, [sp]
 800c61e:	9c01      	ldr	r4, [sp, #4]
 800c620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c624:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c628:	2401      	movs	r4, #1
 800c62a:	e7a0      	b.n	800c56e <_dtoa_r+0x106>
 800c62c:	2301      	movs	r3, #1
 800c62e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c630:	1a43      	subs	r3, r0, r1
 800c632:	1e5a      	subs	r2, r3, #1
 800c634:	bf45      	ittet	mi
 800c636:	f1c3 0301 	rsbmi	r3, r3, #1
 800c63a:	9305      	strmi	r3, [sp, #20]
 800c63c:	2300      	movpl	r3, #0
 800c63e:	2300      	movmi	r3, #0
 800c640:	9206      	str	r2, [sp, #24]
 800c642:	bf54      	ite	pl
 800c644:	9305      	strpl	r3, [sp, #20]
 800c646:	9306      	strmi	r3, [sp, #24]
 800c648:	f1bb 0f00 	cmp.w	fp, #0
 800c64c:	db18      	blt.n	800c680 <_dtoa_r+0x218>
 800c64e:	9b06      	ldr	r3, [sp, #24]
 800c650:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800c654:	445b      	add	r3, fp
 800c656:	9306      	str	r3, [sp, #24]
 800c658:	2300      	movs	r3, #0
 800c65a:	9a07      	ldr	r2, [sp, #28]
 800c65c:	2a09      	cmp	r2, #9
 800c65e:	d849      	bhi.n	800c6f4 <_dtoa_r+0x28c>
 800c660:	2a05      	cmp	r2, #5
 800c662:	bfc4      	itt	gt
 800c664:	3a04      	subgt	r2, #4
 800c666:	9207      	strgt	r2, [sp, #28]
 800c668:	9a07      	ldr	r2, [sp, #28]
 800c66a:	f1a2 0202 	sub.w	r2, r2, #2
 800c66e:	bfcc      	ite	gt
 800c670:	2400      	movgt	r4, #0
 800c672:	2401      	movle	r4, #1
 800c674:	2a03      	cmp	r2, #3
 800c676:	d848      	bhi.n	800c70a <_dtoa_r+0x2a2>
 800c678:	e8df f002 	tbb	[pc, r2]
 800c67c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c680:	9b05      	ldr	r3, [sp, #20]
 800c682:	2200      	movs	r2, #0
 800c684:	eba3 030b 	sub.w	r3, r3, fp
 800c688:	9305      	str	r3, [sp, #20]
 800c68a:	920e      	str	r2, [sp, #56]	; 0x38
 800c68c:	f1cb 0300 	rsb	r3, fp, #0
 800c690:	e7e3      	b.n	800c65a <_dtoa_r+0x1f2>
 800c692:	2200      	movs	r2, #0
 800c694:	9208      	str	r2, [sp, #32]
 800c696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c698:	2a00      	cmp	r2, #0
 800c69a:	dc39      	bgt.n	800c710 <_dtoa_r+0x2a8>
 800c69c:	f04f 0a01 	mov.w	sl, #1
 800c6a0:	46d1      	mov	r9, sl
 800c6a2:	4652      	mov	r2, sl
 800c6a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c6a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	6079      	str	r1, [r7, #4]
 800c6ae:	2004      	movs	r0, #4
 800c6b0:	f100 0c14 	add.w	ip, r0, #20
 800c6b4:	4594      	cmp	ip, r2
 800c6b6:	6879      	ldr	r1, [r7, #4]
 800c6b8:	d92f      	bls.n	800c71a <_dtoa_r+0x2b2>
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	930c      	str	r3, [sp, #48]	; 0x30
 800c6be:	f000 fc6f 	bl	800cfa0 <_Balloc>
 800c6c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6c4:	9000      	str	r0, [sp, #0]
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d149      	bne.n	800c760 <_dtoa_r+0x2f8>
 800c6cc:	4b23      	ldr	r3, [pc, #140]	; (800c75c <_dtoa_r+0x2f4>)
 800c6ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c6d2:	e6df      	b.n	800c494 <_dtoa_r+0x2c>
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	e7dd      	b.n	800c694 <_dtoa_r+0x22c>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	9208      	str	r2, [sp, #32]
 800c6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6de:	eb0b 0a02 	add.w	sl, fp, r2
 800c6e2:	f10a 0901 	add.w	r9, sl, #1
 800c6e6:	464a      	mov	r2, r9
 800c6e8:	2a01      	cmp	r2, #1
 800c6ea:	bfb8      	it	lt
 800c6ec:	2201      	movlt	r2, #1
 800c6ee:	e7db      	b.n	800c6a8 <_dtoa_r+0x240>
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	e7f2      	b.n	800c6da <_dtoa_r+0x272>
 800c6f4:	2401      	movs	r4, #1
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800c700:	2100      	movs	r1, #0
 800c702:	46d1      	mov	r9, sl
 800c704:	2212      	movs	r2, #18
 800c706:	9109      	str	r1, [sp, #36]	; 0x24
 800c708:	e7ce      	b.n	800c6a8 <_dtoa_r+0x240>
 800c70a:	2201      	movs	r2, #1
 800c70c:	9208      	str	r2, [sp, #32]
 800c70e:	e7f5      	b.n	800c6fc <_dtoa_r+0x294>
 800c710:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800c714:	46d1      	mov	r9, sl
 800c716:	4652      	mov	r2, sl
 800c718:	e7c6      	b.n	800c6a8 <_dtoa_r+0x240>
 800c71a:	3101      	adds	r1, #1
 800c71c:	6079      	str	r1, [r7, #4]
 800c71e:	0040      	lsls	r0, r0, #1
 800c720:	e7c6      	b.n	800c6b0 <_dtoa_r+0x248>
 800c722:	bf00      	nop
 800c724:	f3af 8000 	nop.w
 800c728:	636f4361 	.word	0x636f4361
 800c72c:	3fd287a7 	.word	0x3fd287a7
 800c730:	8b60c8b3 	.word	0x8b60c8b3
 800c734:	3fc68a28 	.word	0x3fc68a28
 800c738:	509f79fb 	.word	0x509f79fb
 800c73c:	3fd34413 	.word	0x3fd34413
 800c740:	0800eab5 	.word	0x0800eab5
 800c744:	0800eacc 	.word	0x0800eacc
 800c748:	7ff00000 	.word	0x7ff00000
 800c74c:	0800eab1 	.word	0x0800eab1
 800c750:	0800eaa8 	.word	0x0800eaa8
 800c754:	0800ea85 	.word	0x0800ea85
 800c758:	0800ebc8 	.word	0x0800ebc8
 800c75c:	0800eb2b 	.word	0x0800eb2b
 800c760:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c762:	9900      	ldr	r1, [sp, #0]
 800c764:	6011      	str	r1, [r2, #0]
 800c766:	f1b9 0f0e 	cmp.w	r9, #14
 800c76a:	d872      	bhi.n	800c852 <_dtoa_r+0x3ea>
 800c76c:	2c00      	cmp	r4, #0
 800c76e:	d070      	beq.n	800c852 <_dtoa_r+0x3ea>
 800c770:	f1bb 0f00 	cmp.w	fp, #0
 800c774:	f340 80a6 	ble.w	800c8c4 <_dtoa_r+0x45c>
 800c778:	49ca      	ldr	r1, [pc, #808]	; (800caa4 <_dtoa_r+0x63c>)
 800c77a:	f00b 020f 	and.w	r2, fp, #15
 800c77e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c782:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c786:	ed92 7b00 	vldr	d7, [r2]
 800c78a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c78e:	f000 808d 	beq.w	800c8ac <_dtoa_r+0x444>
 800c792:	4ac5      	ldr	r2, [pc, #788]	; (800caa8 <_dtoa_r+0x640>)
 800c794:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c798:	ed92 6b08 	vldr	d6, [r2, #32]
 800c79c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800c7a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c7a4:	f001 010f 	and.w	r1, r1, #15
 800c7a8:	2203      	movs	r2, #3
 800c7aa:	48bf      	ldr	r0, [pc, #764]	; (800caa8 <_dtoa_r+0x640>)
 800c7ac:	2900      	cmp	r1, #0
 800c7ae:	d17f      	bne.n	800c8b0 <_dtoa_r+0x448>
 800c7b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c7b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c7b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	f000 80b2 	beq.w	800c928 <_dtoa_r+0x4c0>
 800c7c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c7c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d4:	f140 80a8 	bpl.w	800c928 <_dtoa_r+0x4c0>
 800c7d8:	f1b9 0f00 	cmp.w	r9, #0
 800c7dc:	f000 80a4 	beq.w	800c928 <_dtoa_r+0x4c0>
 800c7e0:	f1ba 0f00 	cmp.w	sl, #0
 800c7e4:	dd31      	ble.n	800c84a <_dtoa_r+0x3e2>
 800c7e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c7ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7f6:	3201      	adds	r2, #1
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c7fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c802:	ee07 2a90 	vmov	s15, r2
 800c806:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c80a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c80e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c812:	9c03      	ldr	r4, [sp, #12]
 800c814:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c818:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c81c:	2800      	cmp	r0, #0
 800c81e:	f040 8086 	bne.w	800c92e <_dtoa_r+0x4c6>
 800c822:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c826:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c82a:	ec42 1b17 	vmov	d7, r1, r2
 800c82e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c836:	f300 8272 	bgt.w	800cd1e <_dtoa_r+0x8b6>
 800c83a:	eeb1 7b47 	vneg.f64	d7, d7
 800c83e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c846:	f100 8267 	bmi.w	800cd18 <_dtoa_r+0x8b0>
 800c84a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800c84e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c852:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c854:	2a00      	cmp	r2, #0
 800c856:	f2c0 8129 	blt.w	800caac <_dtoa_r+0x644>
 800c85a:	f1bb 0f0e 	cmp.w	fp, #14
 800c85e:	f300 8125 	bgt.w	800caac <_dtoa_r+0x644>
 800c862:	4b90      	ldr	r3, [pc, #576]	; (800caa4 <_dtoa_r+0x63c>)
 800c864:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c868:	ed93 6b00 	vldr	d6, [r3]
 800c86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f280 80c3 	bge.w	800c9fa <_dtoa_r+0x592>
 800c874:	f1b9 0f00 	cmp.w	r9, #0
 800c878:	f300 80bf 	bgt.w	800c9fa <_dtoa_r+0x592>
 800c87c:	f040 824c 	bne.w	800cd18 <_dtoa_r+0x8b0>
 800c880:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c884:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c88c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c894:	464c      	mov	r4, r9
 800c896:	464f      	mov	r7, r9
 800c898:	f280 8222 	bge.w	800cce0 <_dtoa_r+0x878>
 800c89c:	f8dd 8000 	ldr.w	r8, [sp]
 800c8a0:	2331      	movs	r3, #49	; 0x31
 800c8a2:	f808 3b01 	strb.w	r3, [r8], #1
 800c8a6:	f10b 0b01 	add.w	fp, fp, #1
 800c8aa:	e21e      	b.n	800ccea <_dtoa_r+0x882>
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	e77c      	b.n	800c7aa <_dtoa_r+0x342>
 800c8b0:	07cc      	lsls	r4, r1, #31
 800c8b2:	d504      	bpl.n	800c8be <_dtoa_r+0x456>
 800c8b4:	ed90 6b00 	vldr	d6, [r0]
 800c8b8:	3201      	adds	r2, #1
 800c8ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8be:	1049      	asrs	r1, r1, #1
 800c8c0:	3008      	adds	r0, #8
 800c8c2:	e773      	b.n	800c7ac <_dtoa_r+0x344>
 800c8c4:	d02e      	beq.n	800c924 <_dtoa_r+0x4bc>
 800c8c6:	f1cb 0100 	rsb	r1, fp, #0
 800c8ca:	4a76      	ldr	r2, [pc, #472]	; (800caa4 <_dtoa_r+0x63c>)
 800c8cc:	f001 000f 	and.w	r0, r1, #15
 800c8d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c8d4:	ed92 7b00 	vldr	d7, [r2]
 800c8d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c8dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c8e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c8e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800c8e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c8ec:	486e      	ldr	r0, [pc, #440]	; (800caa8 <_dtoa_r+0x640>)
 800c8ee:	1109      	asrs	r1, r1, #4
 800c8f0:	2400      	movs	r4, #0
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	b939      	cbnz	r1, 800c906 <_dtoa_r+0x49e>
 800c8f6:	2c00      	cmp	r4, #0
 800c8f8:	f43f af60 	beq.w	800c7bc <_dtoa_r+0x354>
 800c8fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c904:	e75a      	b.n	800c7bc <_dtoa_r+0x354>
 800c906:	07cf      	lsls	r7, r1, #31
 800c908:	d509      	bpl.n	800c91e <_dtoa_r+0x4b6>
 800c90a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c90e:	ed90 7b00 	vldr	d7, [r0]
 800c912:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c916:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c91a:	3201      	adds	r2, #1
 800c91c:	2401      	movs	r4, #1
 800c91e:	1049      	asrs	r1, r1, #1
 800c920:	3008      	adds	r0, #8
 800c922:	e7e7      	b.n	800c8f4 <_dtoa_r+0x48c>
 800c924:	2202      	movs	r2, #2
 800c926:	e749      	b.n	800c7bc <_dtoa_r+0x354>
 800c928:	465f      	mov	r7, fp
 800c92a:	4648      	mov	r0, r9
 800c92c:	e765      	b.n	800c7fa <_dtoa_r+0x392>
 800c92e:	ec42 1b17 	vmov	d7, r1, r2
 800c932:	4a5c      	ldr	r2, [pc, #368]	; (800caa4 <_dtoa_r+0x63c>)
 800c934:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c938:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c93c:	9a00      	ldr	r2, [sp, #0]
 800c93e:	1814      	adds	r4, r2, r0
 800c940:	9a08      	ldr	r2, [sp, #32]
 800c942:	b352      	cbz	r2, 800c99a <_dtoa_r+0x532>
 800c944:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c948:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c94c:	f8dd 8000 	ldr.w	r8, [sp]
 800c950:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c954:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c958:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c95c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c960:	ee14 2a90 	vmov	r2, s9
 800c964:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c968:	3230      	adds	r2, #48	; 0x30
 800c96a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c96e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c976:	f808 2b01 	strb.w	r2, [r8], #1
 800c97a:	d439      	bmi.n	800c9f0 <_dtoa_r+0x588>
 800c97c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c980:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c988:	d472      	bmi.n	800ca70 <_dtoa_r+0x608>
 800c98a:	45a0      	cmp	r8, r4
 800c98c:	f43f af5d 	beq.w	800c84a <_dtoa_r+0x3e2>
 800c990:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c994:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c998:	e7e0      	b.n	800c95c <_dtoa_r+0x4f4>
 800c99a:	f8dd 8000 	ldr.w	r8, [sp]
 800c99e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c9a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c9ac:	ee14 2a90 	vmov	r2, s9
 800c9b0:	3230      	adds	r2, #48	; 0x30
 800c9b2:	f808 2b01 	strb.w	r2, [r8], #1
 800c9b6:	45a0      	cmp	r8, r4
 800c9b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c9bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c9c0:	d118      	bne.n	800c9f4 <_dtoa_r+0x58c>
 800c9c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c9c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c9ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9d2:	dc4d      	bgt.n	800ca70 <_dtoa_r+0x608>
 800c9d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c9d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e0:	f57f af33 	bpl.w	800c84a <_dtoa_r+0x3e2>
 800c9e4:	4688      	mov	r8, r1
 800c9e6:	3901      	subs	r1, #1
 800c9e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c9ec:	2b30      	cmp	r3, #48	; 0x30
 800c9ee:	d0f9      	beq.n	800c9e4 <_dtoa_r+0x57c>
 800c9f0:	46bb      	mov	fp, r7
 800c9f2:	e02a      	b.n	800ca4a <_dtoa_r+0x5e2>
 800c9f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c9f8:	e7d6      	b.n	800c9a8 <_dtoa_r+0x540>
 800c9fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ca02:	f8dd 8000 	ldr.w	r8, [sp]
 800ca06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ca0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ca0e:	ee15 3a10 	vmov	r3, s10
 800ca12:	3330      	adds	r3, #48	; 0x30
 800ca14:	f808 3b01 	strb.w	r3, [r8], #1
 800ca18:	9b00      	ldr	r3, [sp, #0]
 800ca1a:	eba8 0303 	sub.w	r3, r8, r3
 800ca1e:	4599      	cmp	r9, r3
 800ca20:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ca24:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ca28:	d133      	bne.n	800ca92 <_dtoa_r+0x62a>
 800ca2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ca2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca36:	dc1a      	bgt.n	800ca6e <_dtoa_r+0x606>
 800ca38:	eeb4 7b46 	vcmp.f64	d7, d6
 800ca3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca40:	d103      	bne.n	800ca4a <_dtoa_r+0x5e2>
 800ca42:	ee15 3a10 	vmov	r3, s10
 800ca46:	07d9      	lsls	r1, r3, #31
 800ca48:	d411      	bmi.n	800ca6e <_dtoa_r+0x606>
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f000 fae7 	bl	800d020 <_Bfree>
 800ca52:	2300      	movs	r3, #0
 800ca54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca56:	f888 3000 	strb.w	r3, [r8]
 800ca5a:	f10b 0301 	add.w	r3, fp, #1
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f43f ad4d 	beq.w	800c502 <_dtoa_r+0x9a>
 800ca68:	f8c3 8000 	str.w	r8, [r3]
 800ca6c:	e549      	b.n	800c502 <_dtoa_r+0x9a>
 800ca6e:	465f      	mov	r7, fp
 800ca70:	4643      	mov	r3, r8
 800ca72:	4698      	mov	r8, r3
 800ca74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca78:	2a39      	cmp	r2, #57	; 0x39
 800ca7a:	d106      	bne.n	800ca8a <_dtoa_r+0x622>
 800ca7c:	9a00      	ldr	r2, [sp, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d1f7      	bne.n	800ca72 <_dtoa_r+0x60a>
 800ca82:	9900      	ldr	r1, [sp, #0]
 800ca84:	2230      	movs	r2, #48	; 0x30
 800ca86:	3701      	adds	r7, #1
 800ca88:	700a      	strb	r2, [r1, #0]
 800ca8a:	781a      	ldrb	r2, [r3, #0]
 800ca8c:	3201      	adds	r2, #1
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	e7ae      	b.n	800c9f0 <_dtoa_r+0x588>
 800ca92:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ca96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9e:	d1b2      	bne.n	800ca06 <_dtoa_r+0x59e>
 800caa0:	e7d3      	b.n	800ca4a <_dtoa_r+0x5e2>
 800caa2:	bf00      	nop
 800caa4:	0800ebc8 	.word	0x0800ebc8
 800caa8:	0800eba0 	.word	0x0800eba0
 800caac:	9908      	ldr	r1, [sp, #32]
 800caae:	2900      	cmp	r1, #0
 800cab0:	f000 80d1 	beq.w	800cc56 <_dtoa_r+0x7ee>
 800cab4:	9907      	ldr	r1, [sp, #28]
 800cab6:	2901      	cmp	r1, #1
 800cab8:	f300 80b4 	bgt.w	800cc24 <_dtoa_r+0x7bc>
 800cabc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cabe:	2900      	cmp	r1, #0
 800cac0:	f000 80ac 	beq.w	800cc1c <_dtoa_r+0x7b4>
 800cac4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cac8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cacc:	461c      	mov	r4, r3
 800cace:	930a      	str	r3, [sp, #40]	; 0x28
 800cad0:	9b05      	ldr	r3, [sp, #20]
 800cad2:	4413      	add	r3, r2
 800cad4:	9305      	str	r3, [sp, #20]
 800cad6:	9b06      	ldr	r3, [sp, #24]
 800cad8:	2101      	movs	r1, #1
 800cada:	4413      	add	r3, r2
 800cadc:	4630      	mov	r0, r6
 800cade:	9306      	str	r3, [sp, #24]
 800cae0:	f000 fb5a 	bl	800d198 <__i2b>
 800cae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae6:	4607      	mov	r7, r0
 800cae8:	f1b8 0f00 	cmp.w	r8, #0
 800caec:	dd0d      	ble.n	800cb0a <_dtoa_r+0x6a2>
 800caee:	9a06      	ldr	r2, [sp, #24]
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	dd0a      	ble.n	800cb0a <_dtoa_r+0x6a2>
 800caf4:	4542      	cmp	r2, r8
 800caf6:	9905      	ldr	r1, [sp, #20]
 800caf8:	bfa8      	it	ge
 800cafa:	4642      	movge	r2, r8
 800cafc:	1a89      	subs	r1, r1, r2
 800cafe:	9105      	str	r1, [sp, #20]
 800cb00:	9906      	ldr	r1, [sp, #24]
 800cb02:	eba8 0802 	sub.w	r8, r8, r2
 800cb06:	1a8a      	subs	r2, r1, r2
 800cb08:	9206      	str	r2, [sp, #24]
 800cb0a:	b303      	cbz	r3, 800cb4e <_dtoa_r+0x6e6>
 800cb0c:	9a08      	ldr	r2, [sp, #32]
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	f000 80a6 	beq.w	800cc60 <_dtoa_r+0x7f8>
 800cb14:	2c00      	cmp	r4, #0
 800cb16:	dd13      	ble.n	800cb40 <_dtoa_r+0x6d8>
 800cb18:	4639      	mov	r1, r7
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	930c      	str	r3, [sp, #48]	; 0x30
 800cb20:	f000 fbf6 	bl	800d310 <__pow5mult>
 800cb24:	462a      	mov	r2, r5
 800cb26:	4601      	mov	r1, r0
 800cb28:	4607      	mov	r7, r0
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f000 fb4a 	bl	800d1c4 <__multiply>
 800cb30:	4629      	mov	r1, r5
 800cb32:	900a      	str	r0, [sp, #40]	; 0x28
 800cb34:	4630      	mov	r0, r6
 800cb36:	f000 fa73 	bl	800d020 <_Bfree>
 800cb3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb3e:	4615      	mov	r5, r2
 800cb40:	1b1a      	subs	r2, r3, r4
 800cb42:	d004      	beq.n	800cb4e <_dtoa_r+0x6e6>
 800cb44:	4629      	mov	r1, r5
 800cb46:	4630      	mov	r0, r6
 800cb48:	f000 fbe2 	bl	800d310 <__pow5mult>
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	2101      	movs	r1, #1
 800cb50:	4630      	mov	r0, r6
 800cb52:	f000 fb21 	bl	800d198 <__i2b>
 800cb56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	f340 8082 	ble.w	800cc64 <_dtoa_r+0x7fc>
 800cb60:	461a      	mov	r2, r3
 800cb62:	4601      	mov	r1, r0
 800cb64:	4630      	mov	r0, r6
 800cb66:	f000 fbd3 	bl	800d310 <__pow5mult>
 800cb6a:	9b07      	ldr	r3, [sp, #28]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	4604      	mov	r4, r0
 800cb70:	dd7b      	ble.n	800cc6a <_dtoa_r+0x802>
 800cb72:	2300      	movs	r3, #0
 800cb74:	930a      	str	r3, [sp, #40]	; 0x28
 800cb76:	6922      	ldr	r2, [r4, #16]
 800cb78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cb7c:	6910      	ldr	r0, [r2, #16]
 800cb7e:	f000 fabb 	bl	800d0f8 <__hi0bits>
 800cb82:	f1c0 0020 	rsb	r0, r0, #32
 800cb86:	9b06      	ldr	r3, [sp, #24]
 800cb88:	4418      	add	r0, r3
 800cb8a:	f010 001f 	ands.w	r0, r0, #31
 800cb8e:	f000 808d 	beq.w	800ccac <_dtoa_r+0x844>
 800cb92:	f1c0 0220 	rsb	r2, r0, #32
 800cb96:	2a04      	cmp	r2, #4
 800cb98:	f340 8086 	ble.w	800cca8 <_dtoa_r+0x840>
 800cb9c:	f1c0 001c 	rsb	r0, r0, #28
 800cba0:	9b05      	ldr	r3, [sp, #20]
 800cba2:	4403      	add	r3, r0
 800cba4:	9305      	str	r3, [sp, #20]
 800cba6:	9b06      	ldr	r3, [sp, #24]
 800cba8:	4403      	add	r3, r0
 800cbaa:	4480      	add	r8, r0
 800cbac:	9306      	str	r3, [sp, #24]
 800cbae:	9b05      	ldr	r3, [sp, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	dd05      	ble.n	800cbc0 <_dtoa_r+0x758>
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f000 fc03 	bl	800d3c4 <__lshift>
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	dd05      	ble.n	800cbd2 <_dtoa_r+0x76a>
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f000 fbfa 	bl	800d3c4 <__lshift>
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d06b      	beq.n	800ccb0 <_dtoa_r+0x848>
 800cbd8:	4621      	mov	r1, r4
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f000 fc5e 	bl	800d49c <__mcmp>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	da65      	bge.n	800ccb0 <_dtoa_r+0x848>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	220a      	movs	r2, #10
 800cbea:	4630      	mov	r0, r6
 800cbec:	f000 fa3a 	bl	800d064 <__multadd>
 800cbf0:	9b08      	ldr	r3, [sp, #32]
 800cbf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 8192 	beq.w	800cf22 <_dtoa_r+0xaba>
 800cbfe:	4639      	mov	r1, r7
 800cc00:	2300      	movs	r3, #0
 800cc02:	220a      	movs	r2, #10
 800cc04:	4630      	mov	r0, r6
 800cc06:	f000 fa2d 	bl	800d064 <__multadd>
 800cc0a:	f1ba 0f00 	cmp.w	sl, #0
 800cc0e:	4607      	mov	r7, r0
 800cc10:	f300 808e 	bgt.w	800cd30 <_dtoa_r+0x8c8>
 800cc14:	9b07      	ldr	r3, [sp, #28]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	dc51      	bgt.n	800ccbe <_dtoa_r+0x856>
 800cc1a:	e089      	b.n	800cd30 <_dtoa_r+0x8c8>
 800cc1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cc22:	e751      	b.n	800cac8 <_dtoa_r+0x660>
 800cc24:	f109 34ff 	add.w	r4, r9, #4294967295
 800cc28:	42a3      	cmp	r3, r4
 800cc2a:	bfbf      	itttt	lt
 800cc2c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800cc2e:	1ae3      	sublt	r3, r4, r3
 800cc30:	18d2      	addlt	r2, r2, r3
 800cc32:	4613      	movlt	r3, r2
 800cc34:	bfb7      	itett	lt
 800cc36:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cc38:	1b1c      	subge	r4, r3, r4
 800cc3a:	4623      	movlt	r3, r4
 800cc3c:	2400      	movlt	r4, #0
 800cc3e:	f1b9 0f00 	cmp.w	r9, #0
 800cc42:	bfb5      	itete	lt
 800cc44:	9a05      	ldrlt	r2, [sp, #20]
 800cc46:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800cc4a:	eba2 0809 	sublt.w	r8, r2, r9
 800cc4e:	464a      	movge	r2, r9
 800cc50:	bfb8      	it	lt
 800cc52:	2200      	movlt	r2, #0
 800cc54:	e73b      	b.n	800cace <_dtoa_r+0x666>
 800cc56:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cc5a:	9f08      	ldr	r7, [sp, #32]
 800cc5c:	461c      	mov	r4, r3
 800cc5e:	e743      	b.n	800cae8 <_dtoa_r+0x680>
 800cc60:	461a      	mov	r2, r3
 800cc62:	e76f      	b.n	800cb44 <_dtoa_r+0x6dc>
 800cc64:	9b07      	ldr	r3, [sp, #28]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	dc18      	bgt.n	800cc9c <_dtoa_r+0x834>
 800cc6a:	9b02      	ldr	r3, [sp, #8]
 800cc6c:	b9b3      	cbnz	r3, 800cc9c <_dtoa_r+0x834>
 800cc6e:	9b03      	ldr	r3, [sp, #12]
 800cc70:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cc74:	b9a2      	cbnz	r2, 800cca0 <_dtoa_r+0x838>
 800cc76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cc7a:	0d12      	lsrs	r2, r2, #20
 800cc7c:	0512      	lsls	r2, r2, #20
 800cc7e:	b18a      	cbz	r2, 800cca4 <_dtoa_r+0x83c>
 800cc80:	9b05      	ldr	r3, [sp, #20]
 800cc82:	3301      	adds	r3, #1
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	9b06      	ldr	r3, [sp, #24]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	9306      	str	r3, [sp, #24]
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f47f af6f 	bne.w	800cb76 <_dtoa_r+0x70e>
 800cc98:	2001      	movs	r0, #1
 800cc9a:	e774      	b.n	800cb86 <_dtoa_r+0x71e>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	e7f6      	b.n	800cc8e <_dtoa_r+0x826>
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	e7f4      	b.n	800cc8e <_dtoa_r+0x826>
 800cca4:	920a      	str	r2, [sp, #40]	; 0x28
 800cca6:	e7f3      	b.n	800cc90 <_dtoa_r+0x828>
 800cca8:	d081      	beq.n	800cbae <_dtoa_r+0x746>
 800ccaa:	4610      	mov	r0, r2
 800ccac:	301c      	adds	r0, #28
 800ccae:	e777      	b.n	800cba0 <_dtoa_r+0x738>
 800ccb0:	f1b9 0f00 	cmp.w	r9, #0
 800ccb4:	dc37      	bgt.n	800cd26 <_dtoa_r+0x8be>
 800ccb6:	9b07      	ldr	r3, [sp, #28]
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	dd34      	ble.n	800cd26 <_dtoa_r+0x8be>
 800ccbc:	46ca      	mov	sl, r9
 800ccbe:	f1ba 0f00 	cmp.w	sl, #0
 800ccc2:	d10d      	bne.n	800cce0 <_dtoa_r+0x878>
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	4653      	mov	r3, sl
 800ccc8:	2205      	movs	r2, #5
 800ccca:	4630      	mov	r0, r6
 800cccc:	f000 f9ca 	bl	800d064 <__multadd>
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 fbe1 	bl	800d49c <__mcmp>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f73f adde 	bgt.w	800c89c <_dtoa_r+0x434>
 800cce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce2:	f8dd 8000 	ldr.w	r8, [sp]
 800cce6:	ea6f 0b03 	mvn.w	fp, r3
 800ccea:	f04f 0900 	mov.w	r9, #0
 800ccee:	4621      	mov	r1, r4
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f000 f995 	bl	800d020 <_Bfree>
 800ccf6:	2f00      	cmp	r7, #0
 800ccf8:	f43f aea7 	beq.w	800ca4a <_dtoa_r+0x5e2>
 800ccfc:	f1b9 0f00 	cmp.w	r9, #0
 800cd00:	d005      	beq.n	800cd0e <_dtoa_r+0x8a6>
 800cd02:	45b9      	cmp	r9, r7
 800cd04:	d003      	beq.n	800cd0e <_dtoa_r+0x8a6>
 800cd06:	4649      	mov	r1, r9
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f000 f989 	bl	800d020 <_Bfree>
 800cd0e:	4639      	mov	r1, r7
 800cd10:	4630      	mov	r0, r6
 800cd12:	f000 f985 	bl	800d020 <_Bfree>
 800cd16:	e698      	b.n	800ca4a <_dtoa_r+0x5e2>
 800cd18:	2400      	movs	r4, #0
 800cd1a:	4627      	mov	r7, r4
 800cd1c:	e7e0      	b.n	800cce0 <_dtoa_r+0x878>
 800cd1e:	46bb      	mov	fp, r7
 800cd20:	4604      	mov	r4, r0
 800cd22:	4607      	mov	r7, r0
 800cd24:	e5ba      	b.n	800c89c <_dtoa_r+0x434>
 800cd26:	9b08      	ldr	r3, [sp, #32]
 800cd28:	46ca      	mov	sl, r9
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 8100 	beq.w	800cf30 <_dtoa_r+0xac8>
 800cd30:	f1b8 0f00 	cmp.w	r8, #0
 800cd34:	dd05      	ble.n	800cd42 <_dtoa_r+0x8da>
 800cd36:	4639      	mov	r1, r7
 800cd38:	4642      	mov	r2, r8
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f000 fb42 	bl	800d3c4 <__lshift>
 800cd40:	4607      	mov	r7, r0
 800cd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d05d      	beq.n	800ce04 <_dtoa_r+0x99c>
 800cd48:	6879      	ldr	r1, [r7, #4]
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f000 f928 	bl	800cfa0 <_Balloc>
 800cd50:	4680      	mov	r8, r0
 800cd52:	b928      	cbnz	r0, 800cd60 <_dtoa_r+0x8f8>
 800cd54:	4b82      	ldr	r3, [pc, #520]	; (800cf60 <_dtoa_r+0xaf8>)
 800cd56:	4602      	mov	r2, r0
 800cd58:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd5c:	f7ff bb9a 	b.w	800c494 <_dtoa_r+0x2c>
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	3202      	adds	r2, #2
 800cd64:	0092      	lsls	r2, r2, #2
 800cd66:	f107 010c 	add.w	r1, r7, #12
 800cd6a:	300c      	adds	r0, #12
 800cd6c:	f000 f90a 	bl	800cf84 <memcpy>
 800cd70:	2201      	movs	r2, #1
 800cd72:	4641      	mov	r1, r8
 800cd74:	4630      	mov	r0, r6
 800cd76:	f000 fb25 	bl	800d3c4 <__lshift>
 800cd7a:	9b00      	ldr	r3, [sp, #0]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	9305      	str	r3, [sp, #20]
 800cd80:	9b00      	ldr	r3, [sp, #0]
 800cd82:	4453      	add	r3, sl
 800cd84:	9309      	str	r3, [sp, #36]	; 0x24
 800cd86:	9b02      	ldr	r3, [sp, #8]
 800cd88:	f003 0301 	and.w	r3, r3, #1
 800cd8c:	46b9      	mov	r9, r7
 800cd8e:	9308      	str	r3, [sp, #32]
 800cd90:	4607      	mov	r7, r0
 800cd92:	9b05      	ldr	r3, [sp, #20]
 800cd94:	4621      	mov	r1, r4
 800cd96:	3b01      	subs	r3, #1
 800cd98:	4628      	mov	r0, r5
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	f7ff fad6 	bl	800c34c <quorem>
 800cda0:	4603      	mov	r3, r0
 800cda2:	3330      	adds	r3, #48	; 0x30
 800cda4:	9006      	str	r0, [sp, #24]
 800cda6:	4649      	mov	r1, r9
 800cda8:	4628      	mov	r0, r5
 800cdaa:	930a      	str	r3, [sp, #40]	; 0x28
 800cdac:	f000 fb76 	bl	800d49c <__mcmp>
 800cdb0:	463a      	mov	r2, r7
 800cdb2:	4682      	mov	sl, r0
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f000 fb8c 	bl	800d4d4 <__mdiff>
 800cdbc:	68c2      	ldr	r2, [r0, #12]
 800cdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc0:	4680      	mov	r8, r0
 800cdc2:	bb0a      	cbnz	r2, 800ce08 <_dtoa_r+0x9a0>
 800cdc4:	4601      	mov	r1, r0
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 fb68 	bl	800d49c <__mcmp>
 800cdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdce:	4602      	mov	r2, r0
 800cdd0:	4641      	mov	r1, r8
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	920e      	str	r2, [sp, #56]	; 0x38
 800cdd6:	930a      	str	r3, [sp, #40]	; 0x28
 800cdd8:	f000 f922 	bl	800d020 <_Bfree>
 800cddc:	9b07      	ldr	r3, [sp, #28]
 800cdde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cde0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cde4:	ea43 0102 	orr.w	r1, r3, r2
 800cde8:	9b08      	ldr	r3, [sp, #32]
 800cdea:	430b      	orrs	r3, r1
 800cdec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdee:	d10d      	bne.n	800ce0c <_dtoa_r+0x9a4>
 800cdf0:	2b39      	cmp	r3, #57	; 0x39
 800cdf2:	d029      	beq.n	800ce48 <_dtoa_r+0x9e0>
 800cdf4:	f1ba 0f00 	cmp.w	sl, #0
 800cdf8:	dd01      	ble.n	800cdfe <_dtoa_r+0x996>
 800cdfa:	9b06      	ldr	r3, [sp, #24]
 800cdfc:	3331      	adds	r3, #49	; 0x31
 800cdfe:	9a02      	ldr	r2, [sp, #8]
 800ce00:	7013      	strb	r3, [r2, #0]
 800ce02:	e774      	b.n	800ccee <_dtoa_r+0x886>
 800ce04:	4638      	mov	r0, r7
 800ce06:	e7b8      	b.n	800cd7a <_dtoa_r+0x912>
 800ce08:	2201      	movs	r2, #1
 800ce0a:	e7e1      	b.n	800cdd0 <_dtoa_r+0x968>
 800ce0c:	f1ba 0f00 	cmp.w	sl, #0
 800ce10:	db06      	blt.n	800ce20 <_dtoa_r+0x9b8>
 800ce12:	9907      	ldr	r1, [sp, #28]
 800ce14:	ea41 0a0a 	orr.w	sl, r1, sl
 800ce18:	9908      	ldr	r1, [sp, #32]
 800ce1a:	ea5a 0101 	orrs.w	r1, sl, r1
 800ce1e:	d120      	bne.n	800ce62 <_dtoa_r+0x9fa>
 800ce20:	2a00      	cmp	r2, #0
 800ce22:	ddec      	ble.n	800cdfe <_dtoa_r+0x996>
 800ce24:	4629      	mov	r1, r5
 800ce26:	2201      	movs	r2, #1
 800ce28:	4630      	mov	r0, r6
 800ce2a:	9305      	str	r3, [sp, #20]
 800ce2c:	f000 faca 	bl	800d3c4 <__lshift>
 800ce30:	4621      	mov	r1, r4
 800ce32:	4605      	mov	r5, r0
 800ce34:	f000 fb32 	bl	800d49c <__mcmp>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	9b05      	ldr	r3, [sp, #20]
 800ce3c:	dc02      	bgt.n	800ce44 <_dtoa_r+0x9dc>
 800ce3e:	d1de      	bne.n	800cdfe <_dtoa_r+0x996>
 800ce40:	07da      	lsls	r2, r3, #31
 800ce42:	d5dc      	bpl.n	800cdfe <_dtoa_r+0x996>
 800ce44:	2b39      	cmp	r3, #57	; 0x39
 800ce46:	d1d8      	bne.n	800cdfa <_dtoa_r+0x992>
 800ce48:	9a02      	ldr	r2, [sp, #8]
 800ce4a:	2339      	movs	r3, #57	; 0x39
 800ce4c:	7013      	strb	r3, [r2, #0]
 800ce4e:	4643      	mov	r3, r8
 800ce50:	4698      	mov	r8, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ce58:	2a39      	cmp	r2, #57	; 0x39
 800ce5a:	d051      	beq.n	800cf00 <_dtoa_r+0xa98>
 800ce5c:	3201      	adds	r2, #1
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	e745      	b.n	800ccee <_dtoa_r+0x886>
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	dd03      	ble.n	800ce6e <_dtoa_r+0xa06>
 800ce66:	2b39      	cmp	r3, #57	; 0x39
 800ce68:	d0ee      	beq.n	800ce48 <_dtoa_r+0x9e0>
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	e7c7      	b.n	800cdfe <_dtoa_r+0x996>
 800ce6e:	9a05      	ldr	r2, [sp, #20]
 800ce70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce72:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce76:	428a      	cmp	r2, r1
 800ce78:	d02b      	beq.n	800ced2 <_dtoa_r+0xa6a>
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	220a      	movs	r2, #10
 800ce80:	4630      	mov	r0, r6
 800ce82:	f000 f8ef 	bl	800d064 <__multadd>
 800ce86:	45b9      	cmp	r9, r7
 800ce88:	4605      	mov	r5, r0
 800ce8a:	f04f 0300 	mov.w	r3, #0
 800ce8e:	f04f 020a 	mov.w	r2, #10
 800ce92:	4649      	mov	r1, r9
 800ce94:	4630      	mov	r0, r6
 800ce96:	d107      	bne.n	800cea8 <_dtoa_r+0xa40>
 800ce98:	f000 f8e4 	bl	800d064 <__multadd>
 800ce9c:	4681      	mov	r9, r0
 800ce9e:	4607      	mov	r7, r0
 800cea0:	9b05      	ldr	r3, [sp, #20]
 800cea2:	3301      	adds	r3, #1
 800cea4:	9305      	str	r3, [sp, #20]
 800cea6:	e774      	b.n	800cd92 <_dtoa_r+0x92a>
 800cea8:	f000 f8dc 	bl	800d064 <__multadd>
 800ceac:	4639      	mov	r1, r7
 800ceae:	4681      	mov	r9, r0
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	220a      	movs	r2, #10
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f000 f8d5 	bl	800d064 <__multadd>
 800ceba:	4607      	mov	r7, r0
 800cebc:	e7f0      	b.n	800cea0 <_dtoa_r+0xa38>
 800cebe:	f1ba 0f00 	cmp.w	sl, #0
 800cec2:	9a00      	ldr	r2, [sp, #0]
 800cec4:	bfcc      	ite	gt
 800cec6:	46d0      	movgt	r8, sl
 800cec8:	f04f 0801 	movle.w	r8, #1
 800cecc:	4490      	add	r8, r2
 800cece:	f04f 0900 	mov.w	r9, #0
 800ced2:	4629      	mov	r1, r5
 800ced4:	2201      	movs	r2, #1
 800ced6:	4630      	mov	r0, r6
 800ced8:	9302      	str	r3, [sp, #8]
 800ceda:	f000 fa73 	bl	800d3c4 <__lshift>
 800cede:	4621      	mov	r1, r4
 800cee0:	4605      	mov	r5, r0
 800cee2:	f000 fadb 	bl	800d49c <__mcmp>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	dcb1      	bgt.n	800ce4e <_dtoa_r+0x9e6>
 800ceea:	d102      	bne.n	800cef2 <_dtoa_r+0xa8a>
 800ceec:	9b02      	ldr	r3, [sp, #8]
 800ceee:	07db      	lsls	r3, r3, #31
 800cef0:	d4ad      	bmi.n	800ce4e <_dtoa_r+0x9e6>
 800cef2:	4643      	mov	r3, r8
 800cef4:	4698      	mov	r8, r3
 800cef6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cefa:	2a30      	cmp	r2, #48	; 0x30
 800cefc:	d0fa      	beq.n	800cef4 <_dtoa_r+0xa8c>
 800cefe:	e6f6      	b.n	800ccee <_dtoa_r+0x886>
 800cf00:	9a00      	ldr	r2, [sp, #0]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d1a4      	bne.n	800ce50 <_dtoa_r+0x9e8>
 800cf06:	f10b 0b01 	add.w	fp, fp, #1
 800cf0a:	2331      	movs	r3, #49	; 0x31
 800cf0c:	e778      	b.n	800ce00 <_dtoa_r+0x998>
 800cf0e:	4b15      	ldr	r3, [pc, #84]	; (800cf64 <_dtoa_r+0xafc>)
 800cf10:	f7ff bb12 	b.w	800c538 <_dtoa_r+0xd0>
 800cf14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f47f aaee 	bne.w	800c4f8 <_dtoa_r+0x90>
 800cf1c:	4b12      	ldr	r3, [pc, #72]	; (800cf68 <_dtoa_r+0xb00>)
 800cf1e:	f7ff bb0b 	b.w	800c538 <_dtoa_r+0xd0>
 800cf22:	f1ba 0f00 	cmp.w	sl, #0
 800cf26:	dc03      	bgt.n	800cf30 <_dtoa_r+0xac8>
 800cf28:	9b07      	ldr	r3, [sp, #28]
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	f73f aec7 	bgt.w	800ccbe <_dtoa_r+0x856>
 800cf30:	f8dd 8000 	ldr.w	r8, [sp]
 800cf34:	4621      	mov	r1, r4
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7ff fa08 	bl	800c34c <quorem>
 800cf3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf40:	f808 3b01 	strb.w	r3, [r8], #1
 800cf44:	9a00      	ldr	r2, [sp, #0]
 800cf46:	eba8 0202 	sub.w	r2, r8, r2
 800cf4a:	4592      	cmp	sl, r2
 800cf4c:	ddb7      	ble.n	800cebe <_dtoa_r+0xa56>
 800cf4e:	4629      	mov	r1, r5
 800cf50:	2300      	movs	r3, #0
 800cf52:	220a      	movs	r2, #10
 800cf54:	4630      	mov	r0, r6
 800cf56:	f000 f885 	bl	800d064 <__multadd>
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	e7ea      	b.n	800cf34 <_dtoa_r+0xacc>
 800cf5e:	bf00      	nop
 800cf60:	0800eb2b 	.word	0x0800eb2b
 800cf64:	0800ea84 	.word	0x0800ea84
 800cf68:	0800eaa8 	.word	0x0800eaa8

0800cf6c <_localeconv_r>:
 800cf6c:	4800      	ldr	r0, [pc, #0]	; (800cf70 <_localeconv_r+0x4>)
 800cf6e:	4770      	bx	lr
 800cf70:	20000230 	.word	0x20000230

0800cf74 <malloc>:
 800cf74:	4b02      	ldr	r3, [pc, #8]	; (800cf80 <malloc+0xc>)
 800cf76:	4601      	mov	r1, r0
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	f000 bbef 	b.w	800d75c <_malloc_r>
 800cf7e:	bf00      	nop
 800cf80:	200000dc 	.word	0x200000dc

0800cf84 <memcpy>:
 800cf84:	440a      	add	r2, r1
 800cf86:	4291      	cmp	r1, r2
 800cf88:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf8c:	d100      	bne.n	800cf90 <memcpy+0xc>
 800cf8e:	4770      	bx	lr
 800cf90:	b510      	push	{r4, lr}
 800cf92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf9a:	4291      	cmp	r1, r2
 800cf9c:	d1f9      	bne.n	800cf92 <memcpy+0xe>
 800cf9e:	bd10      	pop	{r4, pc}

0800cfa0 <_Balloc>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	460d      	mov	r5, r1
 800cfa8:	b976      	cbnz	r6, 800cfc8 <_Balloc+0x28>
 800cfaa:	2010      	movs	r0, #16
 800cfac:	f7ff ffe2 	bl	800cf74 <malloc>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	6260      	str	r0, [r4, #36]	; 0x24
 800cfb4:	b920      	cbnz	r0, 800cfc0 <_Balloc+0x20>
 800cfb6:	4b18      	ldr	r3, [pc, #96]	; (800d018 <_Balloc+0x78>)
 800cfb8:	4818      	ldr	r0, [pc, #96]	; (800d01c <_Balloc+0x7c>)
 800cfba:	2166      	movs	r1, #102	; 0x66
 800cfbc:	f000 fd94 	bl	800dae8 <__assert_func>
 800cfc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfc4:	6006      	str	r6, [r0, #0]
 800cfc6:	60c6      	str	r6, [r0, #12]
 800cfc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cfca:	68f3      	ldr	r3, [r6, #12]
 800cfcc:	b183      	cbz	r3, 800cff0 <_Balloc+0x50>
 800cfce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfd6:	b9b8      	cbnz	r0, 800d008 <_Balloc+0x68>
 800cfd8:	2101      	movs	r1, #1
 800cfda:	fa01 f605 	lsl.w	r6, r1, r5
 800cfde:	1d72      	adds	r2, r6, #5
 800cfe0:	0092      	lsls	r2, r2, #2
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f000 fb5a 	bl	800d69c <_calloc_r>
 800cfe8:	b160      	cbz	r0, 800d004 <_Balloc+0x64>
 800cfea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfee:	e00e      	b.n	800d00e <_Balloc+0x6e>
 800cff0:	2221      	movs	r2, #33	; 0x21
 800cff2:	2104      	movs	r1, #4
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 fb51 	bl	800d69c <_calloc_r>
 800cffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cffc:	60f0      	str	r0, [r6, #12]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e4      	bne.n	800cfce <_Balloc+0x2e>
 800d004:	2000      	movs	r0, #0
 800d006:	bd70      	pop	{r4, r5, r6, pc}
 800d008:	6802      	ldr	r2, [r0, #0]
 800d00a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d00e:	2300      	movs	r3, #0
 800d010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d014:	e7f7      	b.n	800d006 <_Balloc+0x66>
 800d016:	bf00      	nop
 800d018:	0800eab5 	.word	0x0800eab5
 800d01c:	0800eb3c 	.word	0x0800eb3c

0800d020 <_Bfree>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d024:	4605      	mov	r5, r0
 800d026:	460c      	mov	r4, r1
 800d028:	b976      	cbnz	r6, 800d048 <_Bfree+0x28>
 800d02a:	2010      	movs	r0, #16
 800d02c:	f7ff ffa2 	bl	800cf74 <malloc>
 800d030:	4602      	mov	r2, r0
 800d032:	6268      	str	r0, [r5, #36]	; 0x24
 800d034:	b920      	cbnz	r0, 800d040 <_Bfree+0x20>
 800d036:	4b09      	ldr	r3, [pc, #36]	; (800d05c <_Bfree+0x3c>)
 800d038:	4809      	ldr	r0, [pc, #36]	; (800d060 <_Bfree+0x40>)
 800d03a:	218a      	movs	r1, #138	; 0x8a
 800d03c:	f000 fd54 	bl	800dae8 <__assert_func>
 800d040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d044:	6006      	str	r6, [r0, #0]
 800d046:	60c6      	str	r6, [r0, #12]
 800d048:	b13c      	cbz	r4, 800d05a <_Bfree+0x3a>
 800d04a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d04c:	6862      	ldr	r2, [r4, #4]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d054:	6021      	str	r1, [r4, #0]
 800d056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	0800eab5 	.word	0x0800eab5
 800d060:	0800eb3c 	.word	0x0800eb3c

0800d064 <__multadd>:
 800d064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d068:	690e      	ldr	r6, [r1, #16]
 800d06a:	4607      	mov	r7, r0
 800d06c:	4698      	mov	r8, r3
 800d06e:	460c      	mov	r4, r1
 800d070:	f101 0014 	add.w	r0, r1, #20
 800d074:	2300      	movs	r3, #0
 800d076:	6805      	ldr	r5, [r0, #0]
 800d078:	b2a9      	uxth	r1, r5
 800d07a:	fb02 8101 	mla	r1, r2, r1, r8
 800d07e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d082:	0c2d      	lsrs	r5, r5, #16
 800d084:	fb02 c505 	mla	r5, r2, r5, ip
 800d088:	b289      	uxth	r1, r1
 800d08a:	3301      	adds	r3, #1
 800d08c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d090:	429e      	cmp	r6, r3
 800d092:	f840 1b04 	str.w	r1, [r0], #4
 800d096:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d09a:	dcec      	bgt.n	800d076 <__multadd+0x12>
 800d09c:	f1b8 0f00 	cmp.w	r8, #0
 800d0a0:	d022      	beq.n	800d0e8 <__multadd+0x84>
 800d0a2:	68a3      	ldr	r3, [r4, #8]
 800d0a4:	42b3      	cmp	r3, r6
 800d0a6:	dc19      	bgt.n	800d0dc <__multadd+0x78>
 800d0a8:	6861      	ldr	r1, [r4, #4]
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	3101      	adds	r1, #1
 800d0ae:	f7ff ff77 	bl	800cfa0 <_Balloc>
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	b928      	cbnz	r0, 800d0c2 <__multadd+0x5e>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <__multadd+0x8c>)
 800d0ba:	480e      	ldr	r0, [pc, #56]	; (800d0f4 <__multadd+0x90>)
 800d0bc:	21b5      	movs	r1, #181	; 0xb5
 800d0be:	f000 fd13 	bl	800dae8 <__assert_func>
 800d0c2:	6922      	ldr	r2, [r4, #16]
 800d0c4:	3202      	adds	r2, #2
 800d0c6:	f104 010c 	add.w	r1, r4, #12
 800d0ca:	0092      	lsls	r2, r2, #2
 800d0cc:	300c      	adds	r0, #12
 800d0ce:	f7ff ff59 	bl	800cf84 <memcpy>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4638      	mov	r0, r7
 800d0d6:	f7ff ffa3 	bl	800d020 <_Bfree>
 800d0da:	462c      	mov	r4, r5
 800d0dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d0e0:	3601      	adds	r6, #1
 800d0e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800d0e6:	6126      	str	r6, [r4, #16]
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ee:	bf00      	nop
 800d0f0:	0800eb2b 	.word	0x0800eb2b
 800d0f4:	0800eb3c 	.word	0x0800eb3c

0800d0f8 <__hi0bits>:
 800d0f8:	0c03      	lsrs	r3, r0, #16
 800d0fa:	041b      	lsls	r3, r3, #16
 800d0fc:	b9d3      	cbnz	r3, 800d134 <__hi0bits+0x3c>
 800d0fe:	0400      	lsls	r0, r0, #16
 800d100:	2310      	movs	r3, #16
 800d102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d106:	bf04      	itt	eq
 800d108:	0200      	lsleq	r0, r0, #8
 800d10a:	3308      	addeq	r3, #8
 800d10c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d110:	bf04      	itt	eq
 800d112:	0100      	lsleq	r0, r0, #4
 800d114:	3304      	addeq	r3, #4
 800d116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d11a:	bf04      	itt	eq
 800d11c:	0080      	lsleq	r0, r0, #2
 800d11e:	3302      	addeq	r3, #2
 800d120:	2800      	cmp	r0, #0
 800d122:	db05      	blt.n	800d130 <__hi0bits+0x38>
 800d124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d128:	f103 0301 	add.w	r3, r3, #1
 800d12c:	bf08      	it	eq
 800d12e:	2320      	moveq	r3, #32
 800d130:	4618      	mov	r0, r3
 800d132:	4770      	bx	lr
 800d134:	2300      	movs	r3, #0
 800d136:	e7e4      	b.n	800d102 <__hi0bits+0xa>

0800d138 <__lo0bits>:
 800d138:	6803      	ldr	r3, [r0, #0]
 800d13a:	f013 0207 	ands.w	r2, r3, #7
 800d13e:	4601      	mov	r1, r0
 800d140:	d00b      	beq.n	800d15a <__lo0bits+0x22>
 800d142:	07da      	lsls	r2, r3, #31
 800d144:	d424      	bmi.n	800d190 <__lo0bits+0x58>
 800d146:	0798      	lsls	r0, r3, #30
 800d148:	bf49      	itett	mi
 800d14a:	085b      	lsrmi	r3, r3, #1
 800d14c:	089b      	lsrpl	r3, r3, #2
 800d14e:	2001      	movmi	r0, #1
 800d150:	600b      	strmi	r3, [r1, #0]
 800d152:	bf5c      	itt	pl
 800d154:	600b      	strpl	r3, [r1, #0]
 800d156:	2002      	movpl	r0, #2
 800d158:	4770      	bx	lr
 800d15a:	b298      	uxth	r0, r3
 800d15c:	b9b0      	cbnz	r0, 800d18c <__lo0bits+0x54>
 800d15e:	0c1b      	lsrs	r3, r3, #16
 800d160:	2010      	movs	r0, #16
 800d162:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d166:	bf04      	itt	eq
 800d168:	0a1b      	lsreq	r3, r3, #8
 800d16a:	3008      	addeq	r0, #8
 800d16c:	071a      	lsls	r2, r3, #28
 800d16e:	bf04      	itt	eq
 800d170:	091b      	lsreq	r3, r3, #4
 800d172:	3004      	addeq	r0, #4
 800d174:	079a      	lsls	r2, r3, #30
 800d176:	bf04      	itt	eq
 800d178:	089b      	lsreq	r3, r3, #2
 800d17a:	3002      	addeq	r0, #2
 800d17c:	07da      	lsls	r2, r3, #31
 800d17e:	d403      	bmi.n	800d188 <__lo0bits+0x50>
 800d180:	085b      	lsrs	r3, r3, #1
 800d182:	f100 0001 	add.w	r0, r0, #1
 800d186:	d005      	beq.n	800d194 <__lo0bits+0x5c>
 800d188:	600b      	str	r3, [r1, #0]
 800d18a:	4770      	bx	lr
 800d18c:	4610      	mov	r0, r2
 800d18e:	e7e8      	b.n	800d162 <__lo0bits+0x2a>
 800d190:	2000      	movs	r0, #0
 800d192:	4770      	bx	lr
 800d194:	2020      	movs	r0, #32
 800d196:	4770      	bx	lr

0800d198 <__i2b>:
 800d198:	b510      	push	{r4, lr}
 800d19a:	460c      	mov	r4, r1
 800d19c:	2101      	movs	r1, #1
 800d19e:	f7ff feff 	bl	800cfa0 <_Balloc>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	b928      	cbnz	r0, 800d1b2 <__i2b+0x1a>
 800d1a6:	4b05      	ldr	r3, [pc, #20]	; (800d1bc <__i2b+0x24>)
 800d1a8:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <__i2b+0x28>)
 800d1aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1ae:	f000 fc9b 	bl	800dae8 <__assert_func>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	6144      	str	r4, [r0, #20]
 800d1b6:	6103      	str	r3, [r0, #16]
 800d1b8:	bd10      	pop	{r4, pc}
 800d1ba:	bf00      	nop
 800d1bc:	0800eb2b 	.word	0x0800eb2b
 800d1c0:	0800eb3c 	.word	0x0800eb3c

0800d1c4 <__multiply>:
 800d1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	690a      	ldr	r2, [r1, #16]
 800d1cc:	6923      	ldr	r3, [r4, #16]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	bfb8      	it	lt
 800d1d2:	460b      	movlt	r3, r1
 800d1d4:	460d      	mov	r5, r1
 800d1d6:	bfbc      	itt	lt
 800d1d8:	4625      	movlt	r5, r4
 800d1da:	461c      	movlt	r4, r3
 800d1dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d1e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d1e4:	68ab      	ldr	r3, [r5, #8]
 800d1e6:	6869      	ldr	r1, [r5, #4]
 800d1e8:	eb0a 0709 	add.w	r7, sl, r9
 800d1ec:	42bb      	cmp	r3, r7
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	bfb8      	it	lt
 800d1f2:	3101      	addlt	r1, #1
 800d1f4:	f7ff fed4 	bl	800cfa0 <_Balloc>
 800d1f8:	b930      	cbnz	r0, 800d208 <__multiply+0x44>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	4b42      	ldr	r3, [pc, #264]	; (800d308 <__multiply+0x144>)
 800d1fe:	4843      	ldr	r0, [pc, #268]	; (800d30c <__multiply+0x148>)
 800d200:	f240 115d 	movw	r1, #349	; 0x15d
 800d204:	f000 fc70 	bl	800dae8 <__assert_func>
 800d208:	f100 0614 	add.w	r6, r0, #20
 800d20c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d210:	4633      	mov	r3, r6
 800d212:	2200      	movs	r2, #0
 800d214:	4543      	cmp	r3, r8
 800d216:	d31e      	bcc.n	800d256 <__multiply+0x92>
 800d218:	f105 0c14 	add.w	ip, r5, #20
 800d21c:	f104 0314 	add.w	r3, r4, #20
 800d220:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d224:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d228:	9202      	str	r2, [sp, #8]
 800d22a:	ebac 0205 	sub.w	r2, ip, r5
 800d22e:	3a15      	subs	r2, #21
 800d230:	f022 0203 	bic.w	r2, r2, #3
 800d234:	3204      	adds	r2, #4
 800d236:	f105 0115 	add.w	r1, r5, #21
 800d23a:	458c      	cmp	ip, r1
 800d23c:	bf38      	it	cc
 800d23e:	2204      	movcc	r2, #4
 800d240:	9201      	str	r2, [sp, #4]
 800d242:	9a02      	ldr	r2, [sp, #8]
 800d244:	9303      	str	r3, [sp, #12]
 800d246:	429a      	cmp	r2, r3
 800d248:	d808      	bhi.n	800d25c <__multiply+0x98>
 800d24a:	2f00      	cmp	r7, #0
 800d24c:	dc55      	bgt.n	800d2fa <__multiply+0x136>
 800d24e:	6107      	str	r7, [r0, #16]
 800d250:	b005      	add	sp, #20
 800d252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d256:	f843 2b04 	str.w	r2, [r3], #4
 800d25a:	e7db      	b.n	800d214 <__multiply+0x50>
 800d25c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d260:	f1ba 0f00 	cmp.w	sl, #0
 800d264:	d020      	beq.n	800d2a8 <__multiply+0xe4>
 800d266:	f105 0e14 	add.w	lr, r5, #20
 800d26a:	46b1      	mov	r9, r6
 800d26c:	2200      	movs	r2, #0
 800d26e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d272:	f8d9 b000 	ldr.w	fp, [r9]
 800d276:	b2a1      	uxth	r1, r4
 800d278:	fa1f fb8b 	uxth.w	fp, fp
 800d27c:	fb0a b101 	mla	r1, sl, r1, fp
 800d280:	4411      	add	r1, r2
 800d282:	f8d9 2000 	ldr.w	r2, [r9]
 800d286:	0c24      	lsrs	r4, r4, #16
 800d288:	0c12      	lsrs	r2, r2, #16
 800d28a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d28e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d292:	b289      	uxth	r1, r1
 800d294:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d298:	45f4      	cmp	ip, lr
 800d29a:	f849 1b04 	str.w	r1, [r9], #4
 800d29e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d2a2:	d8e4      	bhi.n	800d26e <__multiply+0xaa>
 800d2a4:	9901      	ldr	r1, [sp, #4]
 800d2a6:	5072      	str	r2, [r6, r1]
 800d2a8:	9a03      	ldr	r2, [sp, #12]
 800d2aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2ae:	3304      	adds	r3, #4
 800d2b0:	f1b9 0f00 	cmp.w	r9, #0
 800d2b4:	d01f      	beq.n	800d2f6 <__multiply+0x132>
 800d2b6:	6834      	ldr	r4, [r6, #0]
 800d2b8:	f105 0114 	add.w	r1, r5, #20
 800d2bc:	46b6      	mov	lr, r6
 800d2be:	f04f 0a00 	mov.w	sl, #0
 800d2c2:	880a      	ldrh	r2, [r1, #0]
 800d2c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d2c8:	fb09 b202 	mla	r2, r9, r2, fp
 800d2cc:	4492      	add	sl, r2
 800d2ce:	b2a4      	uxth	r4, r4
 800d2d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d2d4:	f84e 4b04 	str.w	r4, [lr], #4
 800d2d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800d2dc:	f8be 2000 	ldrh.w	r2, [lr]
 800d2e0:	0c24      	lsrs	r4, r4, #16
 800d2e2:	fb09 2404 	mla	r4, r9, r4, r2
 800d2e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d2ea:	458c      	cmp	ip, r1
 800d2ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d2f0:	d8e7      	bhi.n	800d2c2 <__multiply+0xfe>
 800d2f2:	9a01      	ldr	r2, [sp, #4]
 800d2f4:	50b4      	str	r4, [r6, r2]
 800d2f6:	3604      	adds	r6, #4
 800d2f8:	e7a3      	b.n	800d242 <__multiply+0x7e>
 800d2fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1a5      	bne.n	800d24e <__multiply+0x8a>
 800d302:	3f01      	subs	r7, #1
 800d304:	e7a1      	b.n	800d24a <__multiply+0x86>
 800d306:	bf00      	nop
 800d308:	0800eb2b 	.word	0x0800eb2b
 800d30c:	0800eb3c 	.word	0x0800eb3c

0800d310 <__pow5mult>:
 800d310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d314:	4615      	mov	r5, r2
 800d316:	f012 0203 	ands.w	r2, r2, #3
 800d31a:	4606      	mov	r6, r0
 800d31c:	460f      	mov	r7, r1
 800d31e:	d007      	beq.n	800d330 <__pow5mult+0x20>
 800d320:	4c25      	ldr	r4, [pc, #148]	; (800d3b8 <__pow5mult+0xa8>)
 800d322:	3a01      	subs	r2, #1
 800d324:	2300      	movs	r3, #0
 800d326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d32a:	f7ff fe9b 	bl	800d064 <__multadd>
 800d32e:	4607      	mov	r7, r0
 800d330:	10ad      	asrs	r5, r5, #2
 800d332:	d03d      	beq.n	800d3b0 <__pow5mult+0xa0>
 800d334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d336:	b97c      	cbnz	r4, 800d358 <__pow5mult+0x48>
 800d338:	2010      	movs	r0, #16
 800d33a:	f7ff fe1b 	bl	800cf74 <malloc>
 800d33e:	4602      	mov	r2, r0
 800d340:	6270      	str	r0, [r6, #36]	; 0x24
 800d342:	b928      	cbnz	r0, 800d350 <__pow5mult+0x40>
 800d344:	4b1d      	ldr	r3, [pc, #116]	; (800d3bc <__pow5mult+0xac>)
 800d346:	481e      	ldr	r0, [pc, #120]	; (800d3c0 <__pow5mult+0xb0>)
 800d348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d34c:	f000 fbcc 	bl	800dae8 <__assert_func>
 800d350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d354:	6004      	str	r4, [r0, #0]
 800d356:	60c4      	str	r4, [r0, #12]
 800d358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d35c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d360:	b94c      	cbnz	r4, 800d376 <__pow5mult+0x66>
 800d362:	f240 2171 	movw	r1, #625	; 0x271
 800d366:	4630      	mov	r0, r6
 800d368:	f7ff ff16 	bl	800d198 <__i2b>
 800d36c:	2300      	movs	r3, #0
 800d36e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d372:	4604      	mov	r4, r0
 800d374:	6003      	str	r3, [r0, #0]
 800d376:	f04f 0900 	mov.w	r9, #0
 800d37a:	07eb      	lsls	r3, r5, #31
 800d37c:	d50a      	bpl.n	800d394 <__pow5mult+0x84>
 800d37e:	4639      	mov	r1, r7
 800d380:	4622      	mov	r2, r4
 800d382:	4630      	mov	r0, r6
 800d384:	f7ff ff1e 	bl	800d1c4 <__multiply>
 800d388:	4639      	mov	r1, r7
 800d38a:	4680      	mov	r8, r0
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7ff fe47 	bl	800d020 <_Bfree>
 800d392:	4647      	mov	r7, r8
 800d394:	106d      	asrs	r5, r5, #1
 800d396:	d00b      	beq.n	800d3b0 <__pow5mult+0xa0>
 800d398:	6820      	ldr	r0, [r4, #0]
 800d39a:	b938      	cbnz	r0, 800d3ac <__pow5mult+0x9c>
 800d39c:	4622      	mov	r2, r4
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f7ff ff0f 	bl	800d1c4 <__multiply>
 800d3a6:	6020      	str	r0, [r4, #0]
 800d3a8:	f8c0 9000 	str.w	r9, [r0]
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	e7e4      	b.n	800d37a <__pow5mult+0x6a>
 800d3b0:	4638      	mov	r0, r7
 800d3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3b6:	bf00      	nop
 800d3b8:	0800ec90 	.word	0x0800ec90
 800d3bc:	0800eab5 	.word	0x0800eab5
 800d3c0:	0800eb3c 	.word	0x0800eb3c

0800d3c4 <__lshift>:
 800d3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	6849      	ldr	r1, [r1, #4]
 800d3cc:	6923      	ldr	r3, [r4, #16]
 800d3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	4607      	mov	r7, r0
 800d3d6:	4691      	mov	r9, r2
 800d3d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3dc:	f108 0601 	add.w	r6, r8, #1
 800d3e0:	42b3      	cmp	r3, r6
 800d3e2:	db0b      	blt.n	800d3fc <__lshift+0x38>
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	f7ff fddb 	bl	800cfa0 <_Balloc>
 800d3ea:	4605      	mov	r5, r0
 800d3ec:	b948      	cbnz	r0, 800d402 <__lshift+0x3e>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	4b28      	ldr	r3, [pc, #160]	; (800d494 <__lshift+0xd0>)
 800d3f2:	4829      	ldr	r0, [pc, #164]	; (800d498 <__lshift+0xd4>)
 800d3f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d3f8:	f000 fb76 	bl	800dae8 <__assert_func>
 800d3fc:	3101      	adds	r1, #1
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	e7ee      	b.n	800d3e0 <__lshift+0x1c>
 800d402:	2300      	movs	r3, #0
 800d404:	f100 0114 	add.w	r1, r0, #20
 800d408:	f100 0210 	add.w	r2, r0, #16
 800d40c:	4618      	mov	r0, r3
 800d40e:	4553      	cmp	r3, sl
 800d410:	db33      	blt.n	800d47a <__lshift+0xb6>
 800d412:	6920      	ldr	r0, [r4, #16]
 800d414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d418:	f104 0314 	add.w	r3, r4, #20
 800d41c:	f019 091f 	ands.w	r9, r9, #31
 800d420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d428:	d02b      	beq.n	800d482 <__lshift+0xbe>
 800d42a:	f1c9 0e20 	rsb	lr, r9, #32
 800d42e:	468a      	mov	sl, r1
 800d430:	2200      	movs	r2, #0
 800d432:	6818      	ldr	r0, [r3, #0]
 800d434:	fa00 f009 	lsl.w	r0, r0, r9
 800d438:	4302      	orrs	r2, r0
 800d43a:	f84a 2b04 	str.w	r2, [sl], #4
 800d43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d442:	459c      	cmp	ip, r3
 800d444:	fa22 f20e 	lsr.w	r2, r2, lr
 800d448:	d8f3      	bhi.n	800d432 <__lshift+0x6e>
 800d44a:	ebac 0304 	sub.w	r3, ip, r4
 800d44e:	3b15      	subs	r3, #21
 800d450:	f023 0303 	bic.w	r3, r3, #3
 800d454:	3304      	adds	r3, #4
 800d456:	f104 0015 	add.w	r0, r4, #21
 800d45a:	4584      	cmp	ip, r0
 800d45c:	bf38      	it	cc
 800d45e:	2304      	movcc	r3, #4
 800d460:	50ca      	str	r2, [r1, r3]
 800d462:	b10a      	cbz	r2, 800d468 <__lshift+0xa4>
 800d464:	f108 0602 	add.w	r6, r8, #2
 800d468:	3e01      	subs	r6, #1
 800d46a:	4638      	mov	r0, r7
 800d46c:	612e      	str	r6, [r5, #16]
 800d46e:	4621      	mov	r1, r4
 800d470:	f7ff fdd6 	bl	800d020 <_Bfree>
 800d474:	4628      	mov	r0, r5
 800d476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d47e:	3301      	adds	r3, #1
 800d480:	e7c5      	b.n	800d40e <__lshift+0x4a>
 800d482:	3904      	subs	r1, #4
 800d484:	f853 2b04 	ldr.w	r2, [r3], #4
 800d488:	f841 2f04 	str.w	r2, [r1, #4]!
 800d48c:	459c      	cmp	ip, r3
 800d48e:	d8f9      	bhi.n	800d484 <__lshift+0xc0>
 800d490:	e7ea      	b.n	800d468 <__lshift+0xa4>
 800d492:	bf00      	nop
 800d494:	0800eb2b 	.word	0x0800eb2b
 800d498:	0800eb3c 	.word	0x0800eb3c

0800d49c <__mcmp>:
 800d49c:	b530      	push	{r4, r5, lr}
 800d49e:	6902      	ldr	r2, [r0, #16]
 800d4a0:	690c      	ldr	r4, [r1, #16]
 800d4a2:	1b12      	subs	r2, r2, r4
 800d4a4:	d10e      	bne.n	800d4c4 <__mcmp+0x28>
 800d4a6:	f100 0314 	add.w	r3, r0, #20
 800d4aa:	3114      	adds	r1, #20
 800d4ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4bc:	42a5      	cmp	r5, r4
 800d4be:	d003      	beq.n	800d4c8 <__mcmp+0x2c>
 800d4c0:	d305      	bcc.n	800d4ce <__mcmp+0x32>
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	4610      	mov	r0, r2
 800d4c6:	bd30      	pop	{r4, r5, pc}
 800d4c8:	4283      	cmp	r3, r0
 800d4ca:	d3f3      	bcc.n	800d4b4 <__mcmp+0x18>
 800d4cc:	e7fa      	b.n	800d4c4 <__mcmp+0x28>
 800d4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d2:	e7f7      	b.n	800d4c4 <__mcmp+0x28>

0800d4d4 <__mdiff>:
 800d4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	460c      	mov	r4, r1
 800d4da:	4606      	mov	r6, r0
 800d4dc:	4611      	mov	r1, r2
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4617      	mov	r7, r2
 800d4e2:	f7ff ffdb 	bl	800d49c <__mcmp>
 800d4e6:	1e05      	subs	r5, r0, #0
 800d4e8:	d110      	bne.n	800d50c <__mdiff+0x38>
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f7ff fd57 	bl	800cfa0 <_Balloc>
 800d4f2:	b930      	cbnz	r0, 800d502 <__mdiff+0x2e>
 800d4f4:	4b39      	ldr	r3, [pc, #228]	; (800d5dc <__mdiff+0x108>)
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	f240 2132 	movw	r1, #562	; 0x232
 800d4fc:	4838      	ldr	r0, [pc, #224]	; (800d5e0 <__mdiff+0x10c>)
 800d4fe:	f000 faf3 	bl	800dae8 <__assert_func>
 800d502:	2301      	movs	r3, #1
 800d504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50c:	bfa4      	itt	ge
 800d50e:	463b      	movge	r3, r7
 800d510:	4627      	movge	r7, r4
 800d512:	4630      	mov	r0, r6
 800d514:	6879      	ldr	r1, [r7, #4]
 800d516:	bfa6      	itte	ge
 800d518:	461c      	movge	r4, r3
 800d51a:	2500      	movge	r5, #0
 800d51c:	2501      	movlt	r5, #1
 800d51e:	f7ff fd3f 	bl	800cfa0 <_Balloc>
 800d522:	b920      	cbnz	r0, 800d52e <__mdiff+0x5a>
 800d524:	4b2d      	ldr	r3, [pc, #180]	; (800d5dc <__mdiff+0x108>)
 800d526:	4602      	mov	r2, r0
 800d528:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d52c:	e7e6      	b.n	800d4fc <__mdiff+0x28>
 800d52e:	693e      	ldr	r6, [r7, #16]
 800d530:	60c5      	str	r5, [r0, #12]
 800d532:	6925      	ldr	r5, [r4, #16]
 800d534:	f107 0114 	add.w	r1, r7, #20
 800d538:	f104 0914 	add.w	r9, r4, #20
 800d53c:	f100 0e14 	add.w	lr, r0, #20
 800d540:	f107 0210 	add.w	r2, r7, #16
 800d544:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d548:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d54c:	46f2      	mov	sl, lr
 800d54e:	2700      	movs	r7, #0
 800d550:	f859 3b04 	ldr.w	r3, [r9], #4
 800d554:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d558:	fa1f f883 	uxth.w	r8, r3
 800d55c:	fa17 f78b 	uxtah	r7, r7, fp
 800d560:	0c1b      	lsrs	r3, r3, #16
 800d562:	eba7 0808 	sub.w	r8, r7, r8
 800d566:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d56a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d56e:	fa1f f888 	uxth.w	r8, r8
 800d572:	141f      	asrs	r7, r3, #16
 800d574:	454d      	cmp	r5, r9
 800d576:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d57a:	f84a 3b04 	str.w	r3, [sl], #4
 800d57e:	d8e7      	bhi.n	800d550 <__mdiff+0x7c>
 800d580:	1b2b      	subs	r3, r5, r4
 800d582:	3b15      	subs	r3, #21
 800d584:	f023 0303 	bic.w	r3, r3, #3
 800d588:	3304      	adds	r3, #4
 800d58a:	3415      	adds	r4, #21
 800d58c:	42a5      	cmp	r5, r4
 800d58e:	bf38      	it	cc
 800d590:	2304      	movcc	r3, #4
 800d592:	4419      	add	r1, r3
 800d594:	4473      	add	r3, lr
 800d596:	469e      	mov	lr, r3
 800d598:	460d      	mov	r5, r1
 800d59a:	4565      	cmp	r5, ip
 800d59c:	d30e      	bcc.n	800d5bc <__mdiff+0xe8>
 800d59e:	f10c 0203 	add.w	r2, ip, #3
 800d5a2:	1a52      	subs	r2, r2, r1
 800d5a4:	f022 0203 	bic.w	r2, r2, #3
 800d5a8:	3903      	subs	r1, #3
 800d5aa:	458c      	cmp	ip, r1
 800d5ac:	bf38      	it	cc
 800d5ae:	2200      	movcc	r2, #0
 800d5b0:	441a      	add	r2, r3
 800d5b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5b6:	b17b      	cbz	r3, 800d5d8 <__mdiff+0x104>
 800d5b8:	6106      	str	r6, [r0, #16]
 800d5ba:	e7a5      	b.n	800d508 <__mdiff+0x34>
 800d5bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800d5c0:	fa17 f488 	uxtah	r4, r7, r8
 800d5c4:	1422      	asrs	r2, r4, #16
 800d5c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d5ca:	b2a4      	uxth	r4, r4
 800d5cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d5d0:	f84e 4b04 	str.w	r4, [lr], #4
 800d5d4:	1417      	asrs	r7, r2, #16
 800d5d6:	e7e0      	b.n	800d59a <__mdiff+0xc6>
 800d5d8:	3e01      	subs	r6, #1
 800d5da:	e7ea      	b.n	800d5b2 <__mdiff+0xde>
 800d5dc:	0800eb2b 	.word	0x0800eb2b
 800d5e0:	0800eb3c 	.word	0x0800eb3c

0800d5e4 <__d2b>:
 800d5e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	4689      	mov	r9, r1
 800d5ea:	2101      	movs	r1, #1
 800d5ec:	ec57 6b10 	vmov	r6, r7, d0
 800d5f0:	4690      	mov	r8, r2
 800d5f2:	f7ff fcd5 	bl	800cfa0 <_Balloc>
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	b930      	cbnz	r0, 800d608 <__d2b+0x24>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	4b25      	ldr	r3, [pc, #148]	; (800d694 <__d2b+0xb0>)
 800d5fe:	4826      	ldr	r0, [pc, #152]	; (800d698 <__d2b+0xb4>)
 800d600:	f240 310a 	movw	r1, #778	; 0x30a
 800d604:	f000 fa70 	bl	800dae8 <__assert_func>
 800d608:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d60c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d610:	bb35      	cbnz	r5, 800d660 <__d2b+0x7c>
 800d612:	2e00      	cmp	r6, #0
 800d614:	9301      	str	r3, [sp, #4]
 800d616:	d028      	beq.n	800d66a <__d2b+0x86>
 800d618:	4668      	mov	r0, sp
 800d61a:	9600      	str	r6, [sp, #0]
 800d61c:	f7ff fd8c 	bl	800d138 <__lo0bits>
 800d620:	9900      	ldr	r1, [sp, #0]
 800d622:	b300      	cbz	r0, 800d666 <__d2b+0x82>
 800d624:	9a01      	ldr	r2, [sp, #4]
 800d626:	f1c0 0320 	rsb	r3, r0, #32
 800d62a:	fa02 f303 	lsl.w	r3, r2, r3
 800d62e:	430b      	orrs	r3, r1
 800d630:	40c2      	lsrs	r2, r0
 800d632:	6163      	str	r3, [r4, #20]
 800d634:	9201      	str	r2, [sp, #4]
 800d636:	9b01      	ldr	r3, [sp, #4]
 800d638:	61a3      	str	r3, [r4, #24]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	bf14      	ite	ne
 800d63e:	2202      	movne	r2, #2
 800d640:	2201      	moveq	r2, #1
 800d642:	6122      	str	r2, [r4, #16]
 800d644:	b1d5      	cbz	r5, 800d67c <__d2b+0x98>
 800d646:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d64a:	4405      	add	r5, r0
 800d64c:	f8c9 5000 	str.w	r5, [r9]
 800d650:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d654:	f8c8 0000 	str.w	r0, [r8]
 800d658:	4620      	mov	r0, r4
 800d65a:	b003      	add	sp, #12
 800d65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d664:	e7d5      	b.n	800d612 <__d2b+0x2e>
 800d666:	6161      	str	r1, [r4, #20]
 800d668:	e7e5      	b.n	800d636 <__d2b+0x52>
 800d66a:	a801      	add	r0, sp, #4
 800d66c:	f7ff fd64 	bl	800d138 <__lo0bits>
 800d670:	9b01      	ldr	r3, [sp, #4]
 800d672:	6163      	str	r3, [r4, #20]
 800d674:	2201      	movs	r2, #1
 800d676:	6122      	str	r2, [r4, #16]
 800d678:	3020      	adds	r0, #32
 800d67a:	e7e3      	b.n	800d644 <__d2b+0x60>
 800d67c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d680:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d684:	f8c9 0000 	str.w	r0, [r9]
 800d688:	6918      	ldr	r0, [r3, #16]
 800d68a:	f7ff fd35 	bl	800d0f8 <__hi0bits>
 800d68e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d692:	e7df      	b.n	800d654 <__d2b+0x70>
 800d694:	0800eb2b 	.word	0x0800eb2b
 800d698:	0800eb3c 	.word	0x0800eb3c

0800d69c <_calloc_r>:
 800d69c:	b513      	push	{r0, r1, r4, lr}
 800d69e:	434a      	muls	r2, r1
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	9201      	str	r2, [sp, #4]
 800d6a4:	f000 f85a 	bl	800d75c <_malloc_r>
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	b118      	cbz	r0, 800d6b4 <_calloc_r+0x18>
 800d6ac:	9a01      	ldr	r2, [sp, #4]
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	f7fe f9e2 	bl	800ba78 <memset>
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	b002      	add	sp, #8
 800d6b8:	bd10      	pop	{r4, pc}
	...

0800d6bc <_free_r>:
 800d6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6be:	2900      	cmp	r1, #0
 800d6c0:	d048      	beq.n	800d754 <_free_r+0x98>
 800d6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c6:	9001      	str	r0, [sp, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f1a1 0404 	sub.w	r4, r1, #4
 800d6ce:	bfb8      	it	lt
 800d6d0:	18e4      	addlt	r4, r4, r3
 800d6d2:	f000 fa65 	bl	800dba0 <__malloc_lock>
 800d6d6:	4a20      	ldr	r2, [pc, #128]	; (800d758 <_free_r+0x9c>)
 800d6d8:	9801      	ldr	r0, [sp, #4]
 800d6da:	6813      	ldr	r3, [r2, #0]
 800d6dc:	4615      	mov	r5, r2
 800d6de:	b933      	cbnz	r3, 800d6ee <_free_r+0x32>
 800d6e0:	6063      	str	r3, [r4, #4]
 800d6e2:	6014      	str	r4, [r2, #0]
 800d6e4:	b003      	add	sp, #12
 800d6e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6ea:	f000 ba5f 	b.w	800dbac <__malloc_unlock>
 800d6ee:	42a3      	cmp	r3, r4
 800d6f0:	d90b      	bls.n	800d70a <_free_r+0x4e>
 800d6f2:	6821      	ldr	r1, [r4, #0]
 800d6f4:	1862      	adds	r2, r4, r1
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	bf04      	itt	eq
 800d6fa:	681a      	ldreq	r2, [r3, #0]
 800d6fc:	685b      	ldreq	r3, [r3, #4]
 800d6fe:	6063      	str	r3, [r4, #4]
 800d700:	bf04      	itt	eq
 800d702:	1852      	addeq	r2, r2, r1
 800d704:	6022      	streq	r2, [r4, #0]
 800d706:	602c      	str	r4, [r5, #0]
 800d708:	e7ec      	b.n	800d6e4 <_free_r+0x28>
 800d70a:	461a      	mov	r2, r3
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	b10b      	cbz	r3, 800d714 <_free_r+0x58>
 800d710:	42a3      	cmp	r3, r4
 800d712:	d9fa      	bls.n	800d70a <_free_r+0x4e>
 800d714:	6811      	ldr	r1, [r2, #0]
 800d716:	1855      	adds	r5, r2, r1
 800d718:	42a5      	cmp	r5, r4
 800d71a:	d10b      	bne.n	800d734 <_free_r+0x78>
 800d71c:	6824      	ldr	r4, [r4, #0]
 800d71e:	4421      	add	r1, r4
 800d720:	1854      	adds	r4, r2, r1
 800d722:	42a3      	cmp	r3, r4
 800d724:	6011      	str	r1, [r2, #0]
 800d726:	d1dd      	bne.n	800d6e4 <_free_r+0x28>
 800d728:	681c      	ldr	r4, [r3, #0]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	6053      	str	r3, [r2, #4]
 800d72e:	4421      	add	r1, r4
 800d730:	6011      	str	r1, [r2, #0]
 800d732:	e7d7      	b.n	800d6e4 <_free_r+0x28>
 800d734:	d902      	bls.n	800d73c <_free_r+0x80>
 800d736:	230c      	movs	r3, #12
 800d738:	6003      	str	r3, [r0, #0]
 800d73a:	e7d3      	b.n	800d6e4 <_free_r+0x28>
 800d73c:	6825      	ldr	r5, [r4, #0]
 800d73e:	1961      	adds	r1, r4, r5
 800d740:	428b      	cmp	r3, r1
 800d742:	bf04      	itt	eq
 800d744:	6819      	ldreq	r1, [r3, #0]
 800d746:	685b      	ldreq	r3, [r3, #4]
 800d748:	6063      	str	r3, [r4, #4]
 800d74a:	bf04      	itt	eq
 800d74c:	1949      	addeq	r1, r1, r5
 800d74e:	6021      	streq	r1, [r4, #0]
 800d750:	6054      	str	r4, [r2, #4]
 800d752:	e7c7      	b.n	800d6e4 <_free_r+0x28>
 800d754:	b003      	add	sp, #12
 800d756:	bd30      	pop	{r4, r5, pc}
 800d758:	20000390 	.word	0x20000390

0800d75c <_malloc_r>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	1ccd      	adds	r5, r1, #3
 800d760:	f025 0503 	bic.w	r5, r5, #3
 800d764:	3508      	adds	r5, #8
 800d766:	2d0c      	cmp	r5, #12
 800d768:	bf38      	it	cc
 800d76a:	250c      	movcc	r5, #12
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	4606      	mov	r6, r0
 800d770:	db01      	blt.n	800d776 <_malloc_r+0x1a>
 800d772:	42a9      	cmp	r1, r5
 800d774:	d903      	bls.n	800d77e <_malloc_r+0x22>
 800d776:	230c      	movs	r3, #12
 800d778:	6033      	str	r3, [r6, #0]
 800d77a:	2000      	movs	r0, #0
 800d77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d77e:	f000 fa0f 	bl	800dba0 <__malloc_lock>
 800d782:	4921      	ldr	r1, [pc, #132]	; (800d808 <_malloc_r+0xac>)
 800d784:	680a      	ldr	r2, [r1, #0]
 800d786:	4614      	mov	r4, r2
 800d788:	b99c      	cbnz	r4, 800d7b2 <_malloc_r+0x56>
 800d78a:	4f20      	ldr	r7, [pc, #128]	; (800d80c <_malloc_r+0xb0>)
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	b923      	cbnz	r3, 800d79a <_malloc_r+0x3e>
 800d790:	4621      	mov	r1, r4
 800d792:	4630      	mov	r0, r6
 800d794:	f000 f998 	bl	800dac8 <_sbrk_r>
 800d798:	6038      	str	r0, [r7, #0]
 800d79a:	4629      	mov	r1, r5
 800d79c:	4630      	mov	r0, r6
 800d79e:	f000 f993 	bl	800dac8 <_sbrk_r>
 800d7a2:	1c43      	adds	r3, r0, #1
 800d7a4:	d123      	bne.n	800d7ee <_malloc_r+0x92>
 800d7a6:	230c      	movs	r3, #12
 800d7a8:	6033      	str	r3, [r6, #0]
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f000 f9fe 	bl	800dbac <__malloc_unlock>
 800d7b0:	e7e3      	b.n	800d77a <_malloc_r+0x1e>
 800d7b2:	6823      	ldr	r3, [r4, #0]
 800d7b4:	1b5b      	subs	r3, r3, r5
 800d7b6:	d417      	bmi.n	800d7e8 <_malloc_r+0x8c>
 800d7b8:	2b0b      	cmp	r3, #11
 800d7ba:	d903      	bls.n	800d7c4 <_malloc_r+0x68>
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	441c      	add	r4, r3
 800d7c0:	6025      	str	r5, [r4, #0]
 800d7c2:	e004      	b.n	800d7ce <_malloc_r+0x72>
 800d7c4:	6863      	ldr	r3, [r4, #4]
 800d7c6:	42a2      	cmp	r2, r4
 800d7c8:	bf0c      	ite	eq
 800d7ca:	600b      	streq	r3, [r1, #0]
 800d7cc:	6053      	strne	r3, [r2, #4]
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f000 f9ec 	bl	800dbac <__malloc_unlock>
 800d7d4:	f104 000b 	add.w	r0, r4, #11
 800d7d8:	1d23      	adds	r3, r4, #4
 800d7da:	f020 0007 	bic.w	r0, r0, #7
 800d7de:	1ac2      	subs	r2, r0, r3
 800d7e0:	d0cc      	beq.n	800d77c <_malloc_r+0x20>
 800d7e2:	1a1b      	subs	r3, r3, r0
 800d7e4:	50a3      	str	r3, [r4, r2]
 800d7e6:	e7c9      	b.n	800d77c <_malloc_r+0x20>
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	6864      	ldr	r4, [r4, #4]
 800d7ec:	e7cc      	b.n	800d788 <_malloc_r+0x2c>
 800d7ee:	1cc4      	adds	r4, r0, #3
 800d7f0:	f024 0403 	bic.w	r4, r4, #3
 800d7f4:	42a0      	cmp	r0, r4
 800d7f6:	d0e3      	beq.n	800d7c0 <_malloc_r+0x64>
 800d7f8:	1a21      	subs	r1, r4, r0
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f000 f964 	bl	800dac8 <_sbrk_r>
 800d800:	3001      	adds	r0, #1
 800d802:	d1dd      	bne.n	800d7c0 <_malloc_r+0x64>
 800d804:	e7cf      	b.n	800d7a6 <_malloc_r+0x4a>
 800d806:	bf00      	nop
 800d808:	20000390 	.word	0x20000390
 800d80c:	20000394 	.word	0x20000394

0800d810 <__ssputs_r>:
 800d810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d814:	688e      	ldr	r6, [r1, #8]
 800d816:	429e      	cmp	r6, r3
 800d818:	4682      	mov	sl, r0
 800d81a:	460c      	mov	r4, r1
 800d81c:	4690      	mov	r8, r2
 800d81e:	461f      	mov	r7, r3
 800d820:	d838      	bhi.n	800d894 <__ssputs_r+0x84>
 800d822:	898a      	ldrh	r2, [r1, #12]
 800d824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d828:	d032      	beq.n	800d890 <__ssputs_r+0x80>
 800d82a:	6825      	ldr	r5, [r4, #0]
 800d82c:	6909      	ldr	r1, [r1, #16]
 800d82e:	eba5 0901 	sub.w	r9, r5, r1
 800d832:	6965      	ldr	r5, [r4, #20]
 800d834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d83c:	3301      	adds	r3, #1
 800d83e:	444b      	add	r3, r9
 800d840:	106d      	asrs	r5, r5, #1
 800d842:	429d      	cmp	r5, r3
 800d844:	bf38      	it	cc
 800d846:	461d      	movcc	r5, r3
 800d848:	0553      	lsls	r3, r2, #21
 800d84a:	d531      	bpl.n	800d8b0 <__ssputs_r+0xa0>
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7ff ff85 	bl	800d75c <_malloc_r>
 800d852:	4606      	mov	r6, r0
 800d854:	b950      	cbnz	r0, 800d86c <__ssputs_r+0x5c>
 800d856:	230c      	movs	r3, #12
 800d858:	f8ca 3000 	str.w	r3, [sl]
 800d85c:	89a3      	ldrh	r3, [r4, #12]
 800d85e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d862:	81a3      	strh	r3, [r4, #12]
 800d864:	f04f 30ff 	mov.w	r0, #4294967295
 800d868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86c:	6921      	ldr	r1, [r4, #16]
 800d86e:	464a      	mov	r2, r9
 800d870:	f7ff fb88 	bl	800cf84 <memcpy>
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d87e:	81a3      	strh	r3, [r4, #12]
 800d880:	6126      	str	r6, [r4, #16]
 800d882:	6165      	str	r5, [r4, #20]
 800d884:	444e      	add	r6, r9
 800d886:	eba5 0509 	sub.w	r5, r5, r9
 800d88a:	6026      	str	r6, [r4, #0]
 800d88c:	60a5      	str	r5, [r4, #8]
 800d88e:	463e      	mov	r6, r7
 800d890:	42be      	cmp	r6, r7
 800d892:	d900      	bls.n	800d896 <__ssputs_r+0x86>
 800d894:	463e      	mov	r6, r7
 800d896:	4632      	mov	r2, r6
 800d898:	6820      	ldr	r0, [r4, #0]
 800d89a:	4641      	mov	r1, r8
 800d89c:	f000 f966 	bl	800db6c <memmove>
 800d8a0:	68a3      	ldr	r3, [r4, #8]
 800d8a2:	6822      	ldr	r2, [r4, #0]
 800d8a4:	1b9b      	subs	r3, r3, r6
 800d8a6:	4432      	add	r2, r6
 800d8a8:	60a3      	str	r3, [r4, #8]
 800d8aa:	6022      	str	r2, [r4, #0]
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	e7db      	b.n	800d868 <__ssputs_r+0x58>
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	f000 f981 	bl	800dbb8 <_realloc_r>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d1e1      	bne.n	800d880 <__ssputs_r+0x70>
 800d8bc:	6921      	ldr	r1, [r4, #16]
 800d8be:	4650      	mov	r0, sl
 800d8c0:	f7ff fefc 	bl	800d6bc <_free_r>
 800d8c4:	e7c7      	b.n	800d856 <__ssputs_r+0x46>
	...

0800d8c8 <_svfiprintf_r>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	4698      	mov	r8, r3
 800d8ce:	898b      	ldrh	r3, [r1, #12]
 800d8d0:	061b      	lsls	r3, r3, #24
 800d8d2:	b09d      	sub	sp, #116	; 0x74
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	4614      	mov	r4, r2
 800d8da:	d50e      	bpl.n	800d8fa <_svfiprintf_r+0x32>
 800d8dc:	690b      	ldr	r3, [r1, #16]
 800d8de:	b963      	cbnz	r3, 800d8fa <_svfiprintf_r+0x32>
 800d8e0:	2140      	movs	r1, #64	; 0x40
 800d8e2:	f7ff ff3b 	bl	800d75c <_malloc_r>
 800d8e6:	6028      	str	r0, [r5, #0]
 800d8e8:	6128      	str	r0, [r5, #16]
 800d8ea:	b920      	cbnz	r0, 800d8f6 <_svfiprintf_r+0x2e>
 800d8ec:	230c      	movs	r3, #12
 800d8ee:	603b      	str	r3, [r7, #0]
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	e0d1      	b.n	800da9a <_svfiprintf_r+0x1d2>
 800d8f6:	2340      	movs	r3, #64	; 0x40
 800d8f8:	616b      	str	r3, [r5, #20]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fe:	2320      	movs	r3, #32
 800d900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d904:	f8cd 800c 	str.w	r8, [sp, #12]
 800d908:	2330      	movs	r3, #48	; 0x30
 800d90a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dab4 <_svfiprintf_r+0x1ec>
 800d90e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d912:	f04f 0901 	mov.w	r9, #1
 800d916:	4623      	mov	r3, r4
 800d918:	469a      	mov	sl, r3
 800d91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d91e:	b10a      	cbz	r2, 800d924 <_svfiprintf_r+0x5c>
 800d920:	2a25      	cmp	r2, #37	; 0x25
 800d922:	d1f9      	bne.n	800d918 <_svfiprintf_r+0x50>
 800d924:	ebba 0b04 	subs.w	fp, sl, r4
 800d928:	d00b      	beq.n	800d942 <_svfiprintf_r+0x7a>
 800d92a:	465b      	mov	r3, fp
 800d92c:	4622      	mov	r2, r4
 800d92e:	4629      	mov	r1, r5
 800d930:	4638      	mov	r0, r7
 800d932:	f7ff ff6d 	bl	800d810 <__ssputs_r>
 800d936:	3001      	adds	r0, #1
 800d938:	f000 80aa 	beq.w	800da90 <_svfiprintf_r+0x1c8>
 800d93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d93e:	445a      	add	r2, fp
 800d940:	9209      	str	r2, [sp, #36]	; 0x24
 800d942:	f89a 3000 	ldrb.w	r3, [sl]
 800d946:	2b00      	cmp	r3, #0
 800d948:	f000 80a2 	beq.w	800da90 <_svfiprintf_r+0x1c8>
 800d94c:	2300      	movs	r3, #0
 800d94e:	f04f 32ff 	mov.w	r2, #4294967295
 800d952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d956:	f10a 0a01 	add.w	sl, sl, #1
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	9307      	str	r3, [sp, #28]
 800d95e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d962:	931a      	str	r3, [sp, #104]	; 0x68
 800d964:	4654      	mov	r4, sl
 800d966:	2205      	movs	r2, #5
 800d968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d96c:	4851      	ldr	r0, [pc, #324]	; (800dab4 <_svfiprintf_r+0x1ec>)
 800d96e:	f7f2 fc6f 	bl	8000250 <memchr>
 800d972:	9a04      	ldr	r2, [sp, #16]
 800d974:	b9d8      	cbnz	r0, 800d9ae <_svfiprintf_r+0xe6>
 800d976:	06d0      	lsls	r0, r2, #27
 800d978:	bf44      	itt	mi
 800d97a:	2320      	movmi	r3, #32
 800d97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d980:	0711      	lsls	r1, r2, #28
 800d982:	bf44      	itt	mi
 800d984:	232b      	movmi	r3, #43	; 0x2b
 800d986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d98a:	f89a 3000 	ldrb.w	r3, [sl]
 800d98e:	2b2a      	cmp	r3, #42	; 0x2a
 800d990:	d015      	beq.n	800d9be <_svfiprintf_r+0xf6>
 800d992:	9a07      	ldr	r2, [sp, #28]
 800d994:	4654      	mov	r4, sl
 800d996:	2000      	movs	r0, #0
 800d998:	f04f 0c0a 	mov.w	ip, #10
 800d99c:	4621      	mov	r1, r4
 800d99e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a2:	3b30      	subs	r3, #48	; 0x30
 800d9a4:	2b09      	cmp	r3, #9
 800d9a6:	d94e      	bls.n	800da46 <_svfiprintf_r+0x17e>
 800d9a8:	b1b0      	cbz	r0, 800d9d8 <_svfiprintf_r+0x110>
 800d9aa:	9207      	str	r2, [sp, #28]
 800d9ac:	e014      	b.n	800d9d8 <_svfiprintf_r+0x110>
 800d9ae:	eba0 0308 	sub.w	r3, r0, r8
 800d9b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	9304      	str	r3, [sp, #16]
 800d9ba:	46a2      	mov	sl, r4
 800d9bc:	e7d2      	b.n	800d964 <_svfiprintf_r+0x9c>
 800d9be:	9b03      	ldr	r3, [sp, #12]
 800d9c0:	1d19      	adds	r1, r3, #4
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	9103      	str	r1, [sp, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	bfbb      	ittet	lt
 800d9ca:	425b      	neglt	r3, r3
 800d9cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d9d0:	9307      	strge	r3, [sp, #28]
 800d9d2:	9307      	strlt	r3, [sp, #28]
 800d9d4:	bfb8      	it	lt
 800d9d6:	9204      	strlt	r2, [sp, #16]
 800d9d8:	7823      	ldrb	r3, [r4, #0]
 800d9da:	2b2e      	cmp	r3, #46	; 0x2e
 800d9dc:	d10c      	bne.n	800d9f8 <_svfiprintf_r+0x130>
 800d9de:	7863      	ldrb	r3, [r4, #1]
 800d9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e2:	d135      	bne.n	800da50 <_svfiprintf_r+0x188>
 800d9e4:	9b03      	ldr	r3, [sp, #12]
 800d9e6:	1d1a      	adds	r2, r3, #4
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	9203      	str	r2, [sp, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	bfb8      	it	lt
 800d9f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9f4:	3402      	adds	r4, #2
 800d9f6:	9305      	str	r3, [sp, #20]
 800d9f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dac4 <_svfiprintf_r+0x1fc>
 800d9fc:	7821      	ldrb	r1, [r4, #0]
 800d9fe:	2203      	movs	r2, #3
 800da00:	4650      	mov	r0, sl
 800da02:	f7f2 fc25 	bl	8000250 <memchr>
 800da06:	b140      	cbz	r0, 800da1a <_svfiprintf_r+0x152>
 800da08:	2340      	movs	r3, #64	; 0x40
 800da0a:	eba0 000a 	sub.w	r0, r0, sl
 800da0e:	fa03 f000 	lsl.w	r0, r3, r0
 800da12:	9b04      	ldr	r3, [sp, #16]
 800da14:	4303      	orrs	r3, r0
 800da16:	3401      	adds	r4, #1
 800da18:	9304      	str	r3, [sp, #16]
 800da1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1e:	4826      	ldr	r0, [pc, #152]	; (800dab8 <_svfiprintf_r+0x1f0>)
 800da20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da24:	2206      	movs	r2, #6
 800da26:	f7f2 fc13 	bl	8000250 <memchr>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d038      	beq.n	800daa0 <_svfiprintf_r+0x1d8>
 800da2e:	4b23      	ldr	r3, [pc, #140]	; (800dabc <_svfiprintf_r+0x1f4>)
 800da30:	bb1b      	cbnz	r3, 800da7a <_svfiprintf_r+0x1b2>
 800da32:	9b03      	ldr	r3, [sp, #12]
 800da34:	3307      	adds	r3, #7
 800da36:	f023 0307 	bic.w	r3, r3, #7
 800da3a:	3308      	adds	r3, #8
 800da3c:	9303      	str	r3, [sp, #12]
 800da3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da40:	4433      	add	r3, r6
 800da42:	9309      	str	r3, [sp, #36]	; 0x24
 800da44:	e767      	b.n	800d916 <_svfiprintf_r+0x4e>
 800da46:	fb0c 3202 	mla	r2, ip, r2, r3
 800da4a:	460c      	mov	r4, r1
 800da4c:	2001      	movs	r0, #1
 800da4e:	e7a5      	b.n	800d99c <_svfiprintf_r+0xd4>
 800da50:	2300      	movs	r3, #0
 800da52:	3401      	adds	r4, #1
 800da54:	9305      	str	r3, [sp, #20]
 800da56:	4619      	mov	r1, r3
 800da58:	f04f 0c0a 	mov.w	ip, #10
 800da5c:	4620      	mov	r0, r4
 800da5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da62:	3a30      	subs	r2, #48	; 0x30
 800da64:	2a09      	cmp	r2, #9
 800da66:	d903      	bls.n	800da70 <_svfiprintf_r+0x1a8>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0c5      	beq.n	800d9f8 <_svfiprintf_r+0x130>
 800da6c:	9105      	str	r1, [sp, #20]
 800da6e:	e7c3      	b.n	800d9f8 <_svfiprintf_r+0x130>
 800da70:	fb0c 2101 	mla	r1, ip, r1, r2
 800da74:	4604      	mov	r4, r0
 800da76:	2301      	movs	r3, #1
 800da78:	e7f0      	b.n	800da5c <_svfiprintf_r+0x194>
 800da7a:	ab03      	add	r3, sp, #12
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	462a      	mov	r2, r5
 800da80:	4b0f      	ldr	r3, [pc, #60]	; (800dac0 <_svfiprintf_r+0x1f8>)
 800da82:	a904      	add	r1, sp, #16
 800da84:	4638      	mov	r0, r7
 800da86:	f7fe f88f 	bl	800bba8 <_printf_float>
 800da8a:	1c42      	adds	r2, r0, #1
 800da8c:	4606      	mov	r6, r0
 800da8e:	d1d6      	bne.n	800da3e <_svfiprintf_r+0x176>
 800da90:	89ab      	ldrh	r3, [r5, #12]
 800da92:	065b      	lsls	r3, r3, #25
 800da94:	f53f af2c 	bmi.w	800d8f0 <_svfiprintf_r+0x28>
 800da98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da9a:	b01d      	add	sp, #116	; 0x74
 800da9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa0:	ab03      	add	r3, sp, #12
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	462a      	mov	r2, r5
 800daa6:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <_svfiprintf_r+0x1f8>)
 800daa8:	a904      	add	r1, sp, #16
 800daaa:	4638      	mov	r0, r7
 800daac:	f7fe fb08 	bl	800c0c0 <_printf_i>
 800dab0:	e7eb      	b.n	800da8a <_svfiprintf_r+0x1c2>
 800dab2:	bf00      	nop
 800dab4:	0800ec9c 	.word	0x0800ec9c
 800dab8:	0800eca6 	.word	0x0800eca6
 800dabc:	0800bba9 	.word	0x0800bba9
 800dac0:	0800d811 	.word	0x0800d811
 800dac4:	0800eca2 	.word	0x0800eca2

0800dac8 <_sbrk_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d06      	ldr	r5, [pc, #24]	; (800dae4 <_sbrk_r+0x1c>)
 800dacc:	2300      	movs	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	602b      	str	r3, [r5, #0]
 800dad4:	f7f7 f952 	bl	8004d7c <_sbrk>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d102      	bne.n	800dae2 <_sbrk_r+0x1a>
 800dadc:	682b      	ldr	r3, [r5, #0]
 800dade:	b103      	cbz	r3, 800dae2 <_sbrk_r+0x1a>
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	200007bc 	.word	0x200007bc

0800dae8 <__assert_func>:
 800dae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daea:	4614      	mov	r4, r2
 800daec:	461a      	mov	r2, r3
 800daee:	4b09      	ldr	r3, [pc, #36]	; (800db14 <__assert_func+0x2c>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4605      	mov	r5, r0
 800daf4:	68d8      	ldr	r0, [r3, #12]
 800daf6:	b14c      	cbz	r4, 800db0c <__assert_func+0x24>
 800daf8:	4b07      	ldr	r3, [pc, #28]	; (800db18 <__assert_func+0x30>)
 800dafa:	9100      	str	r1, [sp, #0]
 800dafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db00:	4906      	ldr	r1, [pc, #24]	; (800db1c <__assert_func+0x34>)
 800db02:	462b      	mov	r3, r5
 800db04:	f000 f80e 	bl	800db24 <fiprintf>
 800db08:	f000 faa4 	bl	800e054 <abort>
 800db0c:	4b04      	ldr	r3, [pc, #16]	; (800db20 <__assert_func+0x38>)
 800db0e:	461c      	mov	r4, r3
 800db10:	e7f3      	b.n	800dafa <__assert_func+0x12>
 800db12:	bf00      	nop
 800db14:	200000dc 	.word	0x200000dc
 800db18:	0800ecad 	.word	0x0800ecad
 800db1c:	0800ecba 	.word	0x0800ecba
 800db20:	0800ece8 	.word	0x0800ece8

0800db24 <fiprintf>:
 800db24:	b40e      	push	{r1, r2, r3}
 800db26:	b503      	push	{r0, r1, lr}
 800db28:	4601      	mov	r1, r0
 800db2a:	ab03      	add	r3, sp, #12
 800db2c:	4805      	ldr	r0, [pc, #20]	; (800db44 <fiprintf+0x20>)
 800db2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db32:	6800      	ldr	r0, [r0, #0]
 800db34:	9301      	str	r3, [sp, #4]
 800db36:	f000 f88f 	bl	800dc58 <_vfiprintf_r>
 800db3a:	b002      	add	sp, #8
 800db3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db40:	b003      	add	sp, #12
 800db42:	4770      	bx	lr
 800db44:	200000dc 	.word	0x200000dc

0800db48 <__ascii_mbtowc>:
 800db48:	b082      	sub	sp, #8
 800db4a:	b901      	cbnz	r1, 800db4e <__ascii_mbtowc+0x6>
 800db4c:	a901      	add	r1, sp, #4
 800db4e:	b142      	cbz	r2, 800db62 <__ascii_mbtowc+0x1a>
 800db50:	b14b      	cbz	r3, 800db66 <__ascii_mbtowc+0x1e>
 800db52:	7813      	ldrb	r3, [r2, #0]
 800db54:	600b      	str	r3, [r1, #0]
 800db56:	7812      	ldrb	r2, [r2, #0]
 800db58:	1e10      	subs	r0, r2, #0
 800db5a:	bf18      	it	ne
 800db5c:	2001      	movne	r0, #1
 800db5e:	b002      	add	sp, #8
 800db60:	4770      	bx	lr
 800db62:	4610      	mov	r0, r2
 800db64:	e7fb      	b.n	800db5e <__ascii_mbtowc+0x16>
 800db66:	f06f 0001 	mvn.w	r0, #1
 800db6a:	e7f8      	b.n	800db5e <__ascii_mbtowc+0x16>

0800db6c <memmove>:
 800db6c:	4288      	cmp	r0, r1
 800db6e:	b510      	push	{r4, lr}
 800db70:	eb01 0402 	add.w	r4, r1, r2
 800db74:	d902      	bls.n	800db7c <memmove+0x10>
 800db76:	4284      	cmp	r4, r0
 800db78:	4623      	mov	r3, r4
 800db7a:	d807      	bhi.n	800db8c <memmove+0x20>
 800db7c:	1e43      	subs	r3, r0, #1
 800db7e:	42a1      	cmp	r1, r4
 800db80:	d008      	beq.n	800db94 <memmove+0x28>
 800db82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db8a:	e7f8      	b.n	800db7e <memmove+0x12>
 800db8c:	4402      	add	r2, r0
 800db8e:	4601      	mov	r1, r0
 800db90:	428a      	cmp	r2, r1
 800db92:	d100      	bne.n	800db96 <memmove+0x2a>
 800db94:	bd10      	pop	{r4, pc}
 800db96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db9e:	e7f7      	b.n	800db90 <memmove+0x24>

0800dba0 <__malloc_lock>:
 800dba0:	4801      	ldr	r0, [pc, #4]	; (800dba8 <__malloc_lock+0x8>)
 800dba2:	f000 bc17 	b.w	800e3d4 <__retarget_lock_acquire_recursive>
 800dba6:	bf00      	nop
 800dba8:	200007c4 	.word	0x200007c4

0800dbac <__malloc_unlock>:
 800dbac:	4801      	ldr	r0, [pc, #4]	; (800dbb4 <__malloc_unlock+0x8>)
 800dbae:	f000 bc12 	b.w	800e3d6 <__retarget_lock_release_recursive>
 800dbb2:	bf00      	nop
 800dbb4:	200007c4 	.word	0x200007c4

0800dbb8 <_realloc_r>:
 800dbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbba:	4607      	mov	r7, r0
 800dbbc:	4614      	mov	r4, r2
 800dbbe:	460e      	mov	r6, r1
 800dbc0:	b921      	cbnz	r1, 800dbcc <_realloc_r+0x14>
 800dbc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	f7ff bdc8 	b.w	800d75c <_malloc_r>
 800dbcc:	b922      	cbnz	r2, 800dbd8 <_realloc_r+0x20>
 800dbce:	f7ff fd75 	bl	800d6bc <_free_r>
 800dbd2:	4625      	mov	r5, r4
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbd8:	f000 fc62 	bl	800e4a0 <_malloc_usable_size_r>
 800dbdc:	42a0      	cmp	r0, r4
 800dbde:	d20f      	bcs.n	800dc00 <_realloc_r+0x48>
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	f7ff fdba 	bl	800d75c <_malloc_r>
 800dbe8:	4605      	mov	r5, r0
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d0f2      	beq.n	800dbd4 <_realloc_r+0x1c>
 800dbee:	4631      	mov	r1, r6
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	f7ff f9c7 	bl	800cf84 <memcpy>
 800dbf6:	4631      	mov	r1, r6
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	f7ff fd5f 	bl	800d6bc <_free_r>
 800dbfe:	e7e9      	b.n	800dbd4 <_realloc_r+0x1c>
 800dc00:	4635      	mov	r5, r6
 800dc02:	e7e7      	b.n	800dbd4 <_realloc_r+0x1c>

0800dc04 <__sfputc_r>:
 800dc04:	6893      	ldr	r3, [r2, #8]
 800dc06:	3b01      	subs	r3, #1
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	b410      	push	{r4}
 800dc0c:	6093      	str	r3, [r2, #8]
 800dc0e:	da08      	bge.n	800dc22 <__sfputc_r+0x1e>
 800dc10:	6994      	ldr	r4, [r2, #24]
 800dc12:	42a3      	cmp	r3, r4
 800dc14:	db01      	blt.n	800dc1a <__sfputc_r+0x16>
 800dc16:	290a      	cmp	r1, #10
 800dc18:	d103      	bne.n	800dc22 <__sfputc_r+0x1e>
 800dc1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc1e:	f000 b94b 	b.w	800deb8 <__swbuf_r>
 800dc22:	6813      	ldr	r3, [r2, #0]
 800dc24:	1c58      	adds	r0, r3, #1
 800dc26:	6010      	str	r0, [r2, #0]
 800dc28:	7019      	strb	r1, [r3, #0]
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <__sfputs_r>:
 800dc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc34:	4606      	mov	r6, r0
 800dc36:	460f      	mov	r7, r1
 800dc38:	4614      	mov	r4, r2
 800dc3a:	18d5      	adds	r5, r2, r3
 800dc3c:	42ac      	cmp	r4, r5
 800dc3e:	d101      	bne.n	800dc44 <__sfputs_r+0x12>
 800dc40:	2000      	movs	r0, #0
 800dc42:	e007      	b.n	800dc54 <__sfputs_r+0x22>
 800dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc48:	463a      	mov	r2, r7
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f7ff ffda 	bl	800dc04 <__sfputc_r>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d1f3      	bne.n	800dc3c <__sfputs_r+0xa>
 800dc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc58 <_vfiprintf_r>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	460d      	mov	r5, r1
 800dc5e:	b09d      	sub	sp, #116	; 0x74
 800dc60:	4614      	mov	r4, r2
 800dc62:	4698      	mov	r8, r3
 800dc64:	4606      	mov	r6, r0
 800dc66:	b118      	cbz	r0, 800dc70 <_vfiprintf_r+0x18>
 800dc68:	6983      	ldr	r3, [r0, #24]
 800dc6a:	b90b      	cbnz	r3, 800dc70 <_vfiprintf_r+0x18>
 800dc6c:	f000 fb14 	bl	800e298 <__sinit>
 800dc70:	4b89      	ldr	r3, [pc, #548]	; (800de98 <_vfiprintf_r+0x240>)
 800dc72:	429d      	cmp	r5, r3
 800dc74:	d11b      	bne.n	800dcae <_vfiprintf_r+0x56>
 800dc76:	6875      	ldr	r5, [r6, #4]
 800dc78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc7a:	07d9      	lsls	r1, r3, #31
 800dc7c:	d405      	bmi.n	800dc8a <_vfiprintf_r+0x32>
 800dc7e:	89ab      	ldrh	r3, [r5, #12]
 800dc80:	059a      	lsls	r2, r3, #22
 800dc82:	d402      	bmi.n	800dc8a <_vfiprintf_r+0x32>
 800dc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc86:	f000 fba5 	bl	800e3d4 <__retarget_lock_acquire_recursive>
 800dc8a:	89ab      	ldrh	r3, [r5, #12]
 800dc8c:	071b      	lsls	r3, r3, #28
 800dc8e:	d501      	bpl.n	800dc94 <_vfiprintf_r+0x3c>
 800dc90:	692b      	ldr	r3, [r5, #16]
 800dc92:	b9eb      	cbnz	r3, 800dcd0 <_vfiprintf_r+0x78>
 800dc94:	4629      	mov	r1, r5
 800dc96:	4630      	mov	r0, r6
 800dc98:	f000 f96e 	bl	800df78 <__swsetup_r>
 800dc9c:	b1c0      	cbz	r0, 800dcd0 <_vfiprintf_r+0x78>
 800dc9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dca0:	07dc      	lsls	r4, r3, #31
 800dca2:	d50e      	bpl.n	800dcc2 <_vfiprintf_r+0x6a>
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295
 800dca8:	b01d      	add	sp, #116	; 0x74
 800dcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcae:	4b7b      	ldr	r3, [pc, #492]	; (800de9c <_vfiprintf_r+0x244>)
 800dcb0:	429d      	cmp	r5, r3
 800dcb2:	d101      	bne.n	800dcb8 <_vfiprintf_r+0x60>
 800dcb4:	68b5      	ldr	r5, [r6, #8]
 800dcb6:	e7df      	b.n	800dc78 <_vfiprintf_r+0x20>
 800dcb8:	4b79      	ldr	r3, [pc, #484]	; (800dea0 <_vfiprintf_r+0x248>)
 800dcba:	429d      	cmp	r5, r3
 800dcbc:	bf08      	it	eq
 800dcbe:	68f5      	ldreq	r5, [r6, #12]
 800dcc0:	e7da      	b.n	800dc78 <_vfiprintf_r+0x20>
 800dcc2:	89ab      	ldrh	r3, [r5, #12]
 800dcc4:	0598      	lsls	r0, r3, #22
 800dcc6:	d4ed      	bmi.n	800dca4 <_vfiprintf_r+0x4c>
 800dcc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcca:	f000 fb84 	bl	800e3d6 <__retarget_lock_release_recursive>
 800dcce:	e7e9      	b.n	800dca4 <_vfiprintf_r+0x4c>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd4:	2320      	movs	r3, #32
 800dcd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcda:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcde:	2330      	movs	r3, #48	; 0x30
 800dce0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dea4 <_vfiprintf_r+0x24c>
 800dce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dce8:	f04f 0901 	mov.w	r9, #1
 800dcec:	4623      	mov	r3, r4
 800dcee:	469a      	mov	sl, r3
 800dcf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf4:	b10a      	cbz	r2, 800dcfa <_vfiprintf_r+0xa2>
 800dcf6:	2a25      	cmp	r2, #37	; 0x25
 800dcf8:	d1f9      	bne.n	800dcee <_vfiprintf_r+0x96>
 800dcfa:	ebba 0b04 	subs.w	fp, sl, r4
 800dcfe:	d00b      	beq.n	800dd18 <_vfiprintf_r+0xc0>
 800dd00:	465b      	mov	r3, fp
 800dd02:	4622      	mov	r2, r4
 800dd04:	4629      	mov	r1, r5
 800dd06:	4630      	mov	r0, r6
 800dd08:	f7ff ff93 	bl	800dc32 <__sfputs_r>
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	f000 80aa 	beq.w	800de66 <_vfiprintf_r+0x20e>
 800dd12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd14:	445a      	add	r2, fp
 800dd16:	9209      	str	r2, [sp, #36]	; 0x24
 800dd18:	f89a 3000 	ldrb.w	r3, [sl]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f000 80a2 	beq.w	800de66 <_vfiprintf_r+0x20e>
 800dd22:	2300      	movs	r3, #0
 800dd24:	f04f 32ff 	mov.w	r2, #4294967295
 800dd28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd2c:	f10a 0a01 	add.w	sl, sl, #1
 800dd30:	9304      	str	r3, [sp, #16]
 800dd32:	9307      	str	r3, [sp, #28]
 800dd34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd38:	931a      	str	r3, [sp, #104]	; 0x68
 800dd3a:	4654      	mov	r4, sl
 800dd3c:	2205      	movs	r2, #5
 800dd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd42:	4858      	ldr	r0, [pc, #352]	; (800dea4 <_vfiprintf_r+0x24c>)
 800dd44:	f7f2 fa84 	bl	8000250 <memchr>
 800dd48:	9a04      	ldr	r2, [sp, #16]
 800dd4a:	b9d8      	cbnz	r0, 800dd84 <_vfiprintf_r+0x12c>
 800dd4c:	06d1      	lsls	r1, r2, #27
 800dd4e:	bf44      	itt	mi
 800dd50:	2320      	movmi	r3, #32
 800dd52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd56:	0713      	lsls	r3, r2, #28
 800dd58:	bf44      	itt	mi
 800dd5a:	232b      	movmi	r3, #43	; 0x2b
 800dd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd60:	f89a 3000 	ldrb.w	r3, [sl]
 800dd64:	2b2a      	cmp	r3, #42	; 0x2a
 800dd66:	d015      	beq.n	800dd94 <_vfiprintf_r+0x13c>
 800dd68:	9a07      	ldr	r2, [sp, #28]
 800dd6a:	4654      	mov	r4, sl
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	f04f 0c0a 	mov.w	ip, #10
 800dd72:	4621      	mov	r1, r4
 800dd74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd78:	3b30      	subs	r3, #48	; 0x30
 800dd7a:	2b09      	cmp	r3, #9
 800dd7c:	d94e      	bls.n	800de1c <_vfiprintf_r+0x1c4>
 800dd7e:	b1b0      	cbz	r0, 800ddae <_vfiprintf_r+0x156>
 800dd80:	9207      	str	r2, [sp, #28]
 800dd82:	e014      	b.n	800ddae <_vfiprintf_r+0x156>
 800dd84:	eba0 0308 	sub.w	r3, r0, r8
 800dd88:	fa09 f303 	lsl.w	r3, r9, r3
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	9304      	str	r3, [sp, #16]
 800dd90:	46a2      	mov	sl, r4
 800dd92:	e7d2      	b.n	800dd3a <_vfiprintf_r+0xe2>
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	1d19      	adds	r1, r3, #4
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	9103      	str	r1, [sp, #12]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfbb      	ittet	lt
 800dda0:	425b      	neglt	r3, r3
 800dda2:	f042 0202 	orrlt.w	r2, r2, #2
 800dda6:	9307      	strge	r3, [sp, #28]
 800dda8:	9307      	strlt	r3, [sp, #28]
 800ddaa:	bfb8      	it	lt
 800ddac:	9204      	strlt	r2, [sp, #16]
 800ddae:	7823      	ldrb	r3, [r4, #0]
 800ddb0:	2b2e      	cmp	r3, #46	; 0x2e
 800ddb2:	d10c      	bne.n	800ddce <_vfiprintf_r+0x176>
 800ddb4:	7863      	ldrb	r3, [r4, #1]
 800ddb6:	2b2a      	cmp	r3, #42	; 0x2a
 800ddb8:	d135      	bne.n	800de26 <_vfiprintf_r+0x1ce>
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	1d1a      	adds	r2, r3, #4
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	9203      	str	r2, [sp, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	bfb8      	it	lt
 800ddc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddca:	3402      	adds	r4, #2
 800ddcc:	9305      	str	r3, [sp, #20]
 800ddce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800deb4 <_vfiprintf_r+0x25c>
 800ddd2:	7821      	ldrb	r1, [r4, #0]
 800ddd4:	2203      	movs	r2, #3
 800ddd6:	4650      	mov	r0, sl
 800ddd8:	f7f2 fa3a 	bl	8000250 <memchr>
 800dddc:	b140      	cbz	r0, 800ddf0 <_vfiprintf_r+0x198>
 800ddde:	2340      	movs	r3, #64	; 0x40
 800dde0:	eba0 000a 	sub.w	r0, r0, sl
 800dde4:	fa03 f000 	lsl.w	r0, r3, r0
 800dde8:	9b04      	ldr	r3, [sp, #16]
 800ddea:	4303      	orrs	r3, r0
 800ddec:	3401      	adds	r4, #1
 800ddee:	9304      	str	r3, [sp, #16]
 800ddf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf4:	482c      	ldr	r0, [pc, #176]	; (800dea8 <_vfiprintf_r+0x250>)
 800ddf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddfa:	2206      	movs	r2, #6
 800ddfc:	f7f2 fa28 	bl	8000250 <memchr>
 800de00:	2800      	cmp	r0, #0
 800de02:	d03f      	beq.n	800de84 <_vfiprintf_r+0x22c>
 800de04:	4b29      	ldr	r3, [pc, #164]	; (800deac <_vfiprintf_r+0x254>)
 800de06:	bb1b      	cbnz	r3, 800de50 <_vfiprintf_r+0x1f8>
 800de08:	9b03      	ldr	r3, [sp, #12]
 800de0a:	3307      	adds	r3, #7
 800de0c:	f023 0307 	bic.w	r3, r3, #7
 800de10:	3308      	adds	r3, #8
 800de12:	9303      	str	r3, [sp, #12]
 800de14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de16:	443b      	add	r3, r7
 800de18:	9309      	str	r3, [sp, #36]	; 0x24
 800de1a:	e767      	b.n	800dcec <_vfiprintf_r+0x94>
 800de1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800de20:	460c      	mov	r4, r1
 800de22:	2001      	movs	r0, #1
 800de24:	e7a5      	b.n	800dd72 <_vfiprintf_r+0x11a>
 800de26:	2300      	movs	r3, #0
 800de28:	3401      	adds	r4, #1
 800de2a:	9305      	str	r3, [sp, #20]
 800de2c:	4619      	mov	r1, r3
 800de2e:	f04f 0c0a 	mov.w	ip, #10
 800de32:	4620      	mov	r0, r4
 800de34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de38:	3a30      	subs	r2, #48	; 0x30
 800de3a:	2a09      	cmp	r2, #9
 800de3c:	d903      	bls.n	800de46 <_vfiprintf_r+0x1ee>
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d0c5      	beq.n	800ddce <_vfiprintf_r+0x176>
 800de42:	9105      	str	r1, [sp, #20]
 800de44:	e7c3      	b.n	800ddce <_vfiprintf_r+0x176>
 800de46:	fb0c 2101 	mla	r1, ip, r1, r2
 800de4a:	4604      	mov	r4, r0
 800de4c:	2301      	movs	r3, #1
 800de4e:	e7f0      	b.n	800de32 <_vfiprintf_r+0x1da>
 800de50:	ab03      	add	r3, sp, #12
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	462a      	mov	r2, r5
 800de56:	4b16      	ldr	r3, [pc, #88]	; (800deb0 <_vfiprintf_r+0x258>)
 800de58:	a904      	add	r1, sp, #16
 800de5a:	4630      	mov	r0, r6
 800de5c:	f7fd fea4 	bl	800bba8 <_printf_float>
 800de60:	4607      	mov	r7, r0
 800de62:	1c78      	adds	r0, r7, #1
 800de64:	d1d6      	bne.n	800de14 <_vfiprintf_r+0x1bc>
 800de66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de68:	07d9      	lsls	r1, r3, #31
 800de6a:	d405      	bmi.n	800de78 <_vfiprintf_r+0x220>
 800de6c:	89ab      	ldrh	r3, [r5, #12]
 800de6e:	059a      	lsls	r2, r3, #22
 800de70:	d402      	bmi.n	800de78 <_vfiprintf_r+0x220>
 800de72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de74:	f000 faaf 	bl	800e3d6 <__retarget_lock_release_recursive>
 800de78:	89ab      	ldrh	r3, [r5, #12]
 800de7a:	065b      	lsls	r3, r3, #25
 800de7c:	f53f af12 	bmi.w	800dca4 <_vfiprintf_r+0x4c>
 800de80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de82:	e711      	b.n	800dca8 <_vfiprintf_r+0x50>
 800de84:	ab03      	add	r3, sp, #12
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	462a      	mov	r2, r5
 800de8a:	4b09      	ldr	r3, [pc, #36]	; (800deb0 <_vfiprintf_r+0x258>)
 800de8c:	a904      	add	r1, sp, #16
 800de8e:	4630      	mov	r0, r6
 800de90:	f7fe f916 	bl	800c0c0 <_printf_i>
 800de94:	e7e4      	b.n	800de60 <_vfiprintf_r+0x208>
 800de96:	bf00      	nop
 800de98:	0800ee14 	.word	0x0800ee14
 800de9c:	0800ee34 	.word	0x0800ee34
 800dea0:	0800edf4 	.word	0x0800edf4
 800dea4:	0800ec9c 	.word	0x0800ec9c
 800dea8:	0800eca6 	.word	0x0800eca6
 800deac:	0800bba9 	.word	0x0800bba9
 800deb0:	0800dc33 	.word	0x0800dc33
 800deb4:	0800eca2 	.word	0x0800eca2

0800deb8 <__swbuf_r>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	460e      	mov	r6, r1
 800debc:	4614      	mov	r4, r2
 800debe:	4605      	mov	r5, r0
 800dec0:	b118      	cbz	r0, 800deca <__swbuf_r+0x12>
 800dec2:	6983      	ldr	r3, [r0, #24]
 800dec4:	b90b      	cbnz	r3, 800deca <__swbuf_r+0x12>
 800dec6:	f000 f9e7 	bl	800e298 <__sinit>
 800deca:	4b21      	ldr	r3, [pc, #132]	; (800df50 <__swbuf_r+0x98>)
 800decc:	429c      	cmp	r4, r3
 800dece:	d12b      	bne.n	800df28 <__swbuf_r+0x70>
 800ded0:	686c      	ldr	r4, [r5, #4]
 800ded2:	69a3      	ldr	r3, [r4, #24]
 800ded4:	60a3      	str	r3, [r4, #8]
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	071a      	lsls	r2, r3, #28
 800deda:	d52f      	bpl.n	800df3c <__swbuf_r+0x84>
 800dedc:	6923      	ldr	r3, [r4, #16]
 800dede:	b36b      	cbz	r3, 800df3c <__swbuf_r+0x84>
 800dee0:	6923      	ldr	r3, [r4, #16]
 800dee2:	6820      	ldr	r0, [r4, #0]
 800dee4:	1ac0      	subs	r0, r0, r3
 800dee6:	6963      	ldr	r3, [r4, #20]
 800dee8:	b2f6      	uxtb	r6, r6
 800deea:	4283      	cmp	r3, r0
 800deec:	4637      	mov	r7, r6
 800deee:	dc04      	bgt.n	800defa <__swbuf_r+0x42>
 800def0:	4621      	mov	r1, r4
 800def2:	4628      	mov	r0, r5
 800def4:	f000 f93c 	bl	800e170 <_fflush_r>
 800def8:	bb30      	cbnz	r0, 800df48 <__swbuf_r+0x90>
 800defa:	68a3      	ldr	r3, [r4, #8]
 800defc:	3b01      	subs	r3, #1
 800defe:	60a3      	str	r3, [r4, #8]
 800df00:	6823      	ldr	r3, [r4, #0]
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	6022      	str	r2, [r4, #0]
 800df06:	701e      	strb	r6, [r3, #0]
 800df08:	6963      	ldr	r3, [r4, #20]
 800df0a:	3001      	adds	r0, #1
 800df0c:	4283      	cmp	r3, r0
 800df0e:	d004      	beq.n	800df1a <__swbuf_r+0x62>
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	07db      	lsls	r3, r3, #31
 800df14:	d506      	bpl.n	800df24 <__swbuf_r+0x6c>
 800df16:	2e0a      	cmp	r6, #10
 800df18:	d104      	bne.n	800df24 <__swbuf_r+0x6c>
 800df1a:	4621      	mov	r1, r4
 800df1c:	4628      	mov	r0, r5
 800df1e:	f000 f927 	bl	800e170 <_fflush_r>
 800df22:	b988      	cbnz	r0, 800df48 <__swbuf_r+0x90>
 800df24:	4638      	mov	r0, r7
 800df26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <__swbuf_r+0x9c>)
 800df2a:	429c      	cmp	r4, r3
 800df2c:	d101      	bne.n	800df32 <__swbuf_r+0x7a>
 800df2e:	68ac      	ldr	r4, [r5, #8]
 800df30:	e7cf      	b.n	800ded2 <__swbuf_r+0x1a>
 800df32:	4b09      	ldr	r3, [pc, #36]	; (800df58 <__swbuf_r+0xa0>)
 800df34:	429c      	cmp	r4, r3
 800df36:	bf08      	it	eq
 800df38:	68ec      	ldreq	r4, [r5, #12]
 800df3a:	e7ca      	b.n	800ded2 <__swbuf_r+0x1a>
 800df3c:	4621      	mov	r1, r4
 800df3e:	4628      	mov	r0, r5
 800df40:	f000 f81a 	bl	800df78 <__swsetup_r>
 800df44:	2800      	cmp	r0, #0
 800df46:	d0cb      	beq.n	800dee0 <__swbuf_r+0x28>
 800df48:	f04f 37ff 	mov.w	r7, #4294967295
 800df4c:	e7ea      	b.n	800df24 <__swbuf_r+0x6c>
 800df4e:	bf00      	nop
 800df50:	0800ee14 	.word	0x0800ee14
 800df54:	0800ee34 	.word	0x0800ee34
 800df58:	0800edf4 	.word	0x0800edf4

0800df5c <__ascii_wctomb>:
 800df5c:	b149      	cbz	r1, 800df72 <__ascii_wctomb+0x16>
 800df5e:	2aff      	cmp	r2, #255	; 0xff
 800df60:	bf85      	ittet	hi
 800df62:	238a      	movhi	r3, #138	; 0x8a
 800df64:	6003      	strhi	r3, [r0, #0]
 800df66:	700a      	strbls	r2, [r1, #0]
 800df68:	f04f 30ff 	movhi.w	r0, #4294967295
 800df6c:	bf98      	it	ls
 800df6e:	2001      	movls	r0, #1
 800df70:	4770      	bx	lr
 800df72:	4608      	mov	r0, r1
 800df74:	4770      	bx	lr
	...

0800df78 <__swsetup_r>:
 800df78:	4b32      	ldr	r3, [pc, #200]	; (800e044 <__swsetup_r+0xcc>)
 800df7a:	b570      	push	{r4, r5, r6, lr}
 800df7c:	681d      	ldr	r5, [r3, #0]
 800df7e:	4606      	mov	r6, r0
 800df80:	460c      	mov	r4, r1
 800df82:	b125      	cbz	r5, 800df8e <__swsetup_r+0x16>
 800df84:	69ab      	ldr	r3, [r5, #24]
 800df86:	b913      	cbnz	r3, 800df8e <__swsetup_r+0x16>
 800df88:	4628      	mov	r0, r5
 800df8a:	f000 f985 	bl	800e298 <__sinit>
 800df8e:	4b2e      	ldr	r3, [pc, #184]	; (800e048 <__swsetup_r+0xd0>)
 800df90:	429c      	cmp	r4, r3
 800df92:	d10f      	bne.n	800dfb4 <__swsetup_r+0x3c>
 800df94:	686c      	ldr	r4, [r5, #4]
 800df96:	89a3      	ldrh	r3, [r4, #12]
 800df98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df9c:	0719      	lsls	r1, r3, #28
 800df9e:	d42c      	bmi.n	800dffa <__swsetup_r+0x82>
 800dfa0:	06dd      	lsls	r5, r3, #27
 800dfa2:	d411      	bmi.n	800dfc8 <__swsetup_r+0x50>
 800dfa4:	2309      	movs	r3, #9
 800dfa6:	6033      	str	r3, [r6, #0]
 800dfa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfac:	81a3      	strh	r3, [r4, #12]
 800dfae:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb2:	e03e      	b.n	800e032 <__swsetup_r+0xba>
 800dfb4:	4b25      	ldr	r3, [pc, #148]	; (800e04c <__swsetup_r+0xd4>)
 800dfb6:	429c      	cmp	r4, r3
 800dfb8:	d101      	bne.n	800dfbe <__swsetup_r+0x46>
 800dfba:	68ac      	ldr	r4, [r5, #8]
 800dfbc:	e7eb      	b.n	800df96 <__swsetup_r+0x1e>
 800dfbe:	4b24      	ldr	r3, [pc, #144]	; (800e050 <__swsetup_r+0xd8>)
 800dfc0:	429c      	cmp	r4, r3
 800dfc2:	bf08      	it	eq
 800dfc4:	68ec      	ldreq	r4, [r5, #12]
 800dfc6:	e7e6      	b.n	800df96 <__swsetup_r+0x1e>
 800dfc8:	0758      	lsls	r0, r3, #29
 800dfca:	d512      	bpl.n	800dff2 <__swsetup_r+0x7a>
 800dfcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfce:	b141      	cbz	r1, 800dfe2 <__swsetup_r+0x6a>
 800dfd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfd4:	4299      	cmp	r1, r3
 800dfd6:	d002      	beq.n	800dfde <__swsetup_r+0x66>
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f7ff fb6f 	bl	800d6bc <_free_r>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	6363      	str	r3, [r4, #52]	; 0x34
 800dfe2:	89a3      	ldrh	r3, [r4, #12]
 800dfe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	2300      	movs	r3, #0
 800dfec:	6063      	str	r3, [r4, #4]
 800dfee:	6923      	ldr	r3, [r4, #16]
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	f043 0308 	orr.w	r3, r3, #8
 800dff8:	81a3      	strh	r3, [r4, #12]
 800dffa:	6923      	ldr	r3, [r4, #16]
 800dffc:	b94b      	cbnz	r3, 800e012 <__swsetup_r+0x9a>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e008:	d003      	beq.n	800e012 <__swsetup_r+0x9a>
 800e00a:	4621      	mov	r1, r4
 800e00c:	4630      	mov	r0, r6
 800e00e:	f000 fa07 	bl	800e420 <__smakebuf_r>
 800e012:	89a0      	ldrh	r0, [r4, #12]
 800e014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e018:	f010 0301 	ands.w	r3, r0, #1
 800e01c:	d00a      	beq.n	800e034 <__swsetup_r+0xbc>
 800e01e:	2300      	movs	r3, #0
 800e020:	60a3      	str	r3, [r4, #8]
 800e022:	6963      	ldr	r3, [r4, #20]
 800e024:	425b      	negs	r3, r3
 800e026:	61a3      	str	r3, [r4, #24]
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	b943      	cbnz	r3, 800e03e <__swsetup_r+0xc6>
 800e02c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e030:	d1ba      	bne.n	800dfa8 <__swsetup_r+0x30>
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	0781      	lsls	r1, r0, #30
 800e036:	bf58      	it	pl
 800e038:	6963      	ldrpl	r3, [r4, #20]
 800e03a:	60a3      	str	r3, [r4, #8]
 800e03c:	e7f4      	b.n	800e028 <__swsetup_r+0xb0>
 800e03e:	2000      	movs	r0, #0
 800e040:	e7f7      	b.n	800e032 <__swsetup_r+0xba>
 800e042:	bf00      	nop
 800e044:	200000dc 	.word	0x200000dc
 800e048:	0800ee14 	.word	0x0800ee14
 800e04c:	0800ee34 	.word	0x0800ee34
 800e050:	0800edf4 	.word	0x0800edf4

0800e054 <abort>:
 800e054:	b508      	push	{r3, lr}
 800e056:	2006      	movs	r0, #6
 800e058:	f000 fa52 	bl	800e500 <raise>
 800e05c:	2001      	movs	r0, #1
 800e05e:	f7f6 fe15 	bl	8004c8c <_exit>
	...

0800e064 <__sflush_r>:
 800e064:	898a      	ldrh	r2, [r1, #12]
 800e066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06a:	4605      	mov	r5, r0
 800e06c:	0710      	lsls	r0, r2, #28
 800e06e:	460c      	mov	r4, r1
 800e070:	d458      	bmi.n	800e124 <__sflush_r+0xc0>
 800e072:	684b      	ldr	r3, [r1, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	dc05      	bgt.n	800e084 <__sflush_r+0x20>
 800e078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	dc02      	bgt.n	800e084 <__sflush_r+0x20>
 800e07e:	2000      	movs	r0, #0
 800e080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e086:	2e00      	cmp	r6, #0
 800e088:	d0f9      	beq.n	800e07e <__sflush_r+0x1a>
 800e08a:	2300      	movs	r3, #0
 800e08c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e090:	682f      	ldr	r7, [r5, #0]
 800e092:	602b      	str	r3, [r5, #0]
 800e094:	d032      	beq.n	800e0fc <__sflush_r+0x98>
 800e096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	075a      	lsls	r2, r3, #29
 800e09c:	d505      	bpl.n	800e0aa <__sflush_r+0x46>
 800e09e:	6863      	ldr	r3, [r4, #4]
 800e0a0:	1ac0      	subs	r0, r0, r3
 800e0a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0a4:	b10b      	cbz	r3, 800e0aa <__sflush_r+0x46>
 800e0a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0a8:	1ac0      	subs	r0, r0, r3
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0b0:	6a21      	ldr	r1, [r4, #32]
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	47b0      	blx	r6
 800e0b6:	1c43      	adds	r3, r0, #1
 800e0b8:	89a3      	ldrh	r3, [r4, #12]
 800e0ba:	d106      	bne.n	800e0ca <__sflush_r+0x66>
 800e0bc:	6829      	ldr	r1, [r5, #0]
 800e0be:	291d      	cmp	r1, #29
 800e0c0:	d82c      	bhi.n	800e11c <__sflush_r+0xb8>
 800e0c2:	4a2a      	ldr	r2, [pc, #168]	; (800e16c <__sflush_r+0x108>)
 800e0c4:	40ca      	lsrs	r2, r1
 800e0c6:	07d6      	lsls	r6, r2, #31
 800e0c8:	d528      	bpl.n	800e11c <__sflush_r+0xb8>
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	6062      	str	r2, [r4, #4]
 800e0ce:	04d9      	lsls	r1, r3, #19
 800e0d0:	6922      	ldr	r2, [r4, #16]
 800e0d2:	6022      	str	r2, [r4, #0]
 800e0d4:	d504      	bpl.n	800e0e0 <__sflush_r+0x7c>
 800e0d6:	1c42      	adds	r2, r0, #1
 800e0d8:	d101      	bne.n	800e0de <__sflush_r+0x7a>
 800e0da:	682b      	ldr	r3, [r5, #0]
 800e0dc:	b903      	cbnz	r3, 800e0e0 <__sflush_r+0x7c>
 800e0de:	6560      	str	r0, [r4, #84]	; 0x54
 800e0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0e2:	602f      	str	r7, [r5, #0]
 800e0e4:	2900      	cmp	r1, #0
 800e0e6:	d0ca      	beq.n	800e07e <__sflush_r+0x1a>
 800e0e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0ec:	4299      	cmp	r1, r3
 800e0ee:	d002      	beq.n	800e0f6 <__sflush_r+0x92>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f7ff fae3 	bl	800d6bc <_free_r>
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	6360      	str	r0, [r4, #52]	; 0x34
 800e0fa:	e7c1      	b.n	800e080 <__sflush_r+0x1c>
 800e0fc:	6a21      	ldr	r1, [r4, #32]
 800e0fe:	2301      	movs	r3, #1
 800e100:	4628      	mov	r0, r5
 800e102:	47b0      	blx	r6
 800e104:	1c41      	adds	r1, r0, #1
 800e106:	d1c7      	bne.n	800e098 <__sflush_r+0x34>
 800e108:	682b      	ldr	r3, [r5, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0c4      	beq.n	800e098 <__sflush_r+0x34>
 800e10e:	2b1d      	cmp	r3, #29
 800e110:	d001      	beq.n	800e116 <__sflush_r+0xb2>
 800e112:	2b16      	cmp	r3, #22
 800e114:	d101      	bne.n	800e11a <__sflush_r+0xb6>
 800e116:	602f      	str	r7, [r5, #0]
 800e118:	e7b1      	b.n	800e07e <__sflush_r+0x1a>
 800e11a:	89a3      	ldrh	r3, [r4, #12]
 800e11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e120:	81a3      	strh	r3, [r4, #12]
 800e122:	e7ad      	b.n	800e080 <__sflush_r+0x1c>
 800e124:	690f      	ldr	r7, [r1, #16]
 800e126:	2f00      	cmp	r7, #0
 800e128:	d0a9      	beq.n	800e07e <__sflush_r+0x1a>
 800e12a:	0793      	lsls	r3, r2, #30
 800e12c:	680e      	ldr	r6, [r1, #0]
 800e12e:	bf08      	it	eq
 800e130:	694b      	ldreq	r3, [r1, #20]
 800e132:	600f      	str	r7, [r1, #0]
 800e134:	bf18      	it	ne
 800e136:	2300      	movne	r3, #0
 800e138:	eba6 0807 	sub.w	r8, r6, r7
 800e13c:	608b      	str	r3, [r1, #8]
 800e13e:	f1b8 0f00 	cmp.w	r8, #0
 800e142:	dd9c      	ble.n	800e07e <__sflush_r+0x1a>
 800e144:	6a21      	ldr	r1, [r4, #32]
 800e146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e148:	4643      	mov	r3, r8
 800e14a:	463a      	mov	r2, r7
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b0      	blx	r6
 800e150:	2800      	cmp	r0, #0
 800e152:	dc06      	bgt.n	800e162 <__sflush_r+0xfe>
 800e154:	89a3      	ldrh	r3, [r4, #12]
 800e156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e15a:	81a3      	strh	r3, [r4, #12]
 800e15c:	f04f 30ff 	mov.w	r0, #4294967295
 800e160:	e78e      	b.n	800e080 <__sflush_r+0x1c>
 800e162:	4407      	add	r7, r0
 800e164:	eba8 0800 	sub.w	r8, r8, r0
 800e168:	e7e9      	b.n	800e13e <__sflush_r+0xda>
 800e16a:	bf00      	nop
 800e16c:	20400001 	.word	0x20400001

0800e170 <_fflush_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	690b      	ldr	r3, [r1, #16]
 800e174:	4605      	mov	r5, r0
 800e176:	460c      	mov	r4, r1
 800e178:	b913      	cbnz	r3, 800e180 <_fflush_r+0x10>
 800e17a:	2500      	movs	r5, #0
 800e17c:	4628      	mov	r0, r5
 800e17e:	bd38      	pop	{r3, r4, r5, pc}
 800e180:	b118      	cbz	r0, 800e18a <_fflush_r+0x1a>
 800e182:	6983      	ldr	r3, [r0, #24]
 800e184:	b90b      	cbnz	r3, 800e18a <_fflush_r+0x1a>
 800e186:	f000 f887 	bl	800e298 <__sinit>
 800e18a:	4b14      	ldr	r3, [pc, #80]	; (800e1dc <_fflush_r+0x6c>)
 800e18c:	429c      	cmp	r4, r3
 800e18e:	d11b      	bne.n	800e1c8 <_fflush_r+0x58>
 800e190:	686c      	ldr	r4, [r5, #4]
 800e192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0ef      	beq.n	800e17a <_fflush_r+0xa>
 800e19a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e19c:	07d0      	lsls	r0, r2, #31
 800e19e:	d404      	bmi.n	800e1aa <_fflush_r+0x3a>
 800e1a0:	0599      	lsls	r1, r3, #22
 800e1a2:	d402      	bmi.n	800e1aa <_fflush_r+0x3a>
 800e1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1a6:	f000 f915 	bl	800e3d4 <__retarget_lock_acquire_recursive>
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	f7ff ff59 	bl	800e064 <__sflush_r>
 800e1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1b4:	07da      	lsls	r2, r3, #31
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	d4e0      	bmi.n	800e17c <_fflush_r+0xc>
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	059b      	lsls	r3, r3, #22
 800e1be:	d4dd      	bmi.n	800e17c <_fflush_r+0xc>
 800e1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1c2:	f000 f908 	bl	800e3d6 <__retarget_lock_release_recursive>
 800e1c6:	e7d9      	b.n	800e17c <_fflush_r+0xc>
 800e1c8:	4b05      	ldr	r3, [pc, #20]	; (800e1e0 <_fflush_r+0x70>)
 800e1ca:	429c      	cmp	r4, r3
 800e1cc:	d101      	bne.n	800e1d2 <_fflush_r+0x62>
 800e1ce:	68ac      	ldr	r4, [r5, #8]
 800e1d0:	e7df      	b.n	800e192 <_fflush_r+0x22>
 800e1d2:	4b04      	ldr	r3, [pc, #16]	; (800e1e4 <_fflush_r+0x74>)
 800e1d4:	429c      	cmp	r4, r3
 800e1d6:	bf08      	it	eq
 800e1d8:	68ec      	ldreq	r4, [r5, #12]
 800e1da:	e7da      	b.n	800e192 <_fflush_r+0x22>
 800e1dc:	0800ee14 	.word	0x0800ee14
 800e1e0:	0800ee34 	.word	0x0800ee34
 800e1e4:	0800edf4 	.word	0x0800edf4

0800e1e8 <std>:
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	b510      	push	{r4, lr}
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800e1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1f6:	6083      	str	r3, [r0, #8]
 800e1f8:	8181      	strh	r1, [r0, #12]
 800e1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800e1fc:	81c2      	strh	r2, [r0, #14]
 800e1fe:	6183      	str	r3, [r0, #24]
 800e200:	4619      	mov	r1, r3
 800e202:	2208      	movs	r2, #8
 800e204:	305c      	adds	r0, #92	; 0x5c
 800e206:	f7fd fc37 	bl	800ba78 <memset>
 800e20a:	4b05      	ldr	r3, [pc, #20]	; (800e220 <std+0x38>)
 800e20c:	6263      	str	r3, [r4, #36]	; 0x24
 800e20e:	4b05      	ldr	r3, [pc, #20]	; (800e224 <std+0x3c>)
 800e210:	62a3      	str	r3, [r4, #40]	; 0x28
 800e212:	4b05      	ldr	r3, [pc, #20]	; (800e228 <std+0x40>)
 800e214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e216:	4b05      	ldr	r3, [pc, #20]	; (800e22c <std+0x44>)
 800e218:	6224      	str	r4, [r4, #32]
 800e21a:	6323      	str	r3, [r4, #48]	; 0x30
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	bf00      	nop
 800e220:	0800e539 	.word	0x0800e539
 800e224:	0800e55b 	.word	0x0800e55b
 800e228:	0800e593 	.word	0x0800e593
 800e22c:	0800e5b7 	.word	0x0800e5b7

0800e230 <_cleanup_r>:
 800e230:	4901      	ldr	r1, [pc, #4]	; (800e238 <_cleanup_r+0x8>)
 800e232:	f000 b8af 	b.w	800e394 <_fwalk_reent>
 800e236:	bf00      	nop
 800e238:	0800e171 	.word	0x0800e171

0800e23c <__sfmoreglue>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	1e4a      	subs	r2, r1, #1
 800e240:	2568      	movs	r5, #104	; 0x68
 800e242:	4355      	muls	r5, r2
 800e244:	460e      	mov	r6, r1
 800e246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e24a:	f7ff fa87 	bl	800d75c <_malloc_r>
 800e24e:	4604      	mov	r4, r0
 800e250:	b140      	cbz	r0, 800e264 <__sfmoreglue+0x28>
 800e252:	2100      	movs	r1, #0
 800e254:	e9c0 1600 	strd	r1, r6, [r0]
 800e258:	300c      	adds	r0, #12
 800e25a:	60a0      	str	r0, [r4, #8]
 800e25c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e260:	f7fd fc0a 	bl	800ba78 <memset>
 800e264:	4620      	mov	r0, r4
 800e266:	bd70      	pop	{r4, r5, r6, pc}

0800e268 <__sfp_lock_acquire>:
 800e268:	4801      	ldr	r0, [pc, #4]	; (800e270 <__sfp_lock_acquire+0x8>)
 800e26a:	f000 b8b3 	b.w	800e3d4 <__retarget_lock_acquire_recursive>
 800e26e:	bf00      	nop
 800e270:	200007c8 	.word	0x200007c8

0800e274 <__sfp_lock_release>:
 800e274:	4801      	ldr	r0, [pc, #4]	; (800e27c <__sfp_lock_release+0x8>)
 800e276:	f000 b8ae 	b.w	800e3d6 <__retarget_lock_release_recursive>
 800e27a:	bf00      	nop
 800e27c:	200007c8 	.word	0x200007c8

0800e280 <__sinit_lock_acquire>:
 800e280:	4801      	ldr	r0, [pc, #4]	; (800e288 <__sinit_lock_acquire+0x8>)
 800e282:	f000 b8a7 	b.w	800e3d4 <__retarget_lock_acquire_recursive>
 800e286:	bf00      	nop
 800e288:	200007c3 	.word	0x200007c3

0800e28c <__sinit_lock_release>:
 800e28c:	4801      	ldr	r0, [pc, #4]	; (800e294 <__sinit_lock_release+0x8>)
 800e28e:	f000 b8a2 	b.w	800e3d6 <__retarget_lock_release_recursive>
 800e292:	bf00      	nop
 800e294:	200007c3 	.word	0x200007c3

0800e298 <__sinit>:
 800e298:	b510      	push	{r4, lr}
 800e29a:	4604      	mov	r4, r0
 800e29c:	f7ff fff0 	bl	800e280 <__sinit_lock_acquire>
 800e2a0:	69a3      	ldr	r3, [r4, #24]
 800e2a2:	b11b      	cbz	r3, 800e2ac <__sinit+0x14>
 800e2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a8:	f7ff bff0 	b.w	800e28c <__sinit_lock_release>
 800e2ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2b0:	6523      	str	r3, [r4, #80]	; 0x50
 800e2b2:	4b13      	ldr	r3, [pc, #76]	; (800e300 <__sinit+0x68>)
 800e2b4:	4a13      	ldr	r2, [pc, #76]	; (800e304 <__sinit+0x6c>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2ba:	42a3      	cmp	r3, r4
 800e2bc:	bf04      	itt	eq
 800e2be:	2301      	moveq	r3, #1
 800e2c0:	61a3      	streq	r3, [r4, #24]
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 f820 	bl	800e308 <__sfp>
 800e2c8:	6060      	str	r0, [r4, #4]
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 f81c 	bl	800e308 <__sfp>
 800e2d0:	60a0      	str	r0, [r4, #8]
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 f818 	bl	800e308 <__sfp>
 800e2d8:	2200      	movs	r2, #0
 800e2da:	60e0      	str	r0, [r4, #12]
 800e2dc:	2104      	movs	r1, #4
 800e2de:	6860      	ldr	r0, [r4, #4]
 800e2e0:	f7ff ff82 	bl	800e1e8 <std>
 800e2e4:	68a0      	ldr	r0, [r4, #8]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	2109      	movs	r1, #9
 800e2ea:	f7ff ff7d 	bl	800e1e8 <std>
 800e2ee:	68e0      	ldr	r0, [r4, #12]
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	2112      	movs	r1, #18
 800e2f4:	f7ff ff78 	bl	800e1e8 <std>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	61a3      	str	r3, [r4, #24]
 800e2fc:	e7d2      	b.n	800e2a4 <__sinit+0xc>
 800e2fe:	bf00      	nop
 800e300:	0800ea70 	.word	0x0800ea70
 800e304:	0800e231 	.word	0x0800e231

0800e308 <__sfp>:
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30a:	4607      	mov	r7, r0
 800e30c:	f7ff ffac 	bl	800e268 <__sfp_lock_acquire>
 800e310:	4b1e      	ldr	r3, [pc, #120]	; (800e38c <__sfp+0x84>)
 800e312:	681e      	ldr	r6, [r3, #0]
 800e314:	69b3      	ldr	r3, [r6, #24]
 800e316:	b913      	cbnz	r3, 800e31e <__sfp+0x16>
 800e318:	4630      	mov	r0, r6
 800e31a:	f7ff ffbd 	bl	800e298 <__sinit>
 800e31e:	3648      	adds	r6, #72	; 0x48
 800e320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e324:	3b01      	subs	r3, #1
 800e326:	d503      	bpl.n	800e330 <__sfp+0x28>
 800e328:	6833      	ldr	r3, [r6, #0]
 800e32a:	b30b      	cbz	r3, 800e370 <__sfp+0x68>
 800e32c:	6836      	ldr	r6, [r6, #0]
 800e32e:	e7f7      	b.n	800e320 <__sfp+0x18>
 800e330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e334:	b9d5      	cbnz	r5, 800e36c <__sfp+0x64>
 800e336:	4b16      	ldr	r3, [pc, #88]	; (800e390 <__sfp+0x88>)
 800e338:	60e3      	str	r3, [r4, #12]
 800e33a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e33e:	6665      	str	r5, [r4, #100]	; 0x64
 800e340:	f000 f847 	bl	800e3d2 <__retarget_lock_init_recursive>
 800e344:	f7ff ff96 	bl	800e274 <__sfp_lock_release>
 800e348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e34c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e350:	6025      	str	r5, [r4, #0]
 800e352:	61a5      	str	r5, [r4, #24]
 800e354:	2208      	movs	r2, #8
 800e356:	4629      	mov	r1, r5
 800e358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e35c:	f7fd fb8c 	bl	800ba78 <memset>
 800e360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e368:	4620      	mov	r0, r4
 800e36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e36c:	3468      	adds	r4, #104	; 0x68
 800e36e:	e7d9      	b.n	800e324 <__sfp+0x1c>
 800e370:	2104      	movs	r1, #4
 800e372:	4638      	mov	r0, r7
 800e374:	f7ff ff62 	bl	800e23c <__sfmoreglue>
 800e378:	4604      	mov	r4, r0
 800e37a:	6030      	str	r0, [r6, #0]
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d1d5      	bne.n	800e32c <__sfp+0x24>
 800e380:	f7ff ff78 	bl	800e274 <__sfp_lock_release>
 800e384:	230c      	movs	r3, #12
 800e386:	603b      	str	r3, [r7, #0]
 800e388:	e7ee      	b.n	800e368 <__sfp+0x60>
 800e38a:	bf00      	nop
 800e38c:	0800ea70 	.word	0x0800ea70
 800e390:	ffff0001 	.word	0xffff0001

0800e394 <_fwalk_reent>:
 800e394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e398:	4606      	mov	r6, r0
 800e39a:	4688      	mov	r8, r1
 800e39c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3a0:	2700      	movs	r7, #0
 800e3a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3a6:	f1b9 0901 	subs.w	r9, r9, #1
 800e3aa:	d505      	bpl.n	800e3b8 <_fwalk_reent+0x24>
 800e3ac:	6824      	ldr	r4, [r4, #0]
 800e3ae:	2c00      	cmp	r4, #0
 800e3b0:	d1f7      	bne.n	800e3a2 <_fwalk_reent+0xe>
 800e3b2:	4638      	mov	r0, r7
 800e3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3b8:	89ab      	ldrh	r3, [r5, #12]
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d907      	bls.n	800e3ce <_fwalk_reent+0x3a>
 800e3be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	d003      	beq.n	800e3ce <_fwalk_reent+0x3a>
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	47c0      	blx	r8
 800e3cc:	4307      	orrs	r7, r0
 800e3ce:	3568      	adds	r5, #104	; 0x68
 800e3d0:	e7e9      	b.n	800e3a6 <_fwalk_reent+0x12>

0800e3d2 <__retarget_lock_init_recursive>:
 800e3d2:	4770      	bx	lr

0800e3d4 <__retarget_lock_acquire_recursive>:
 800e3d4:	4770      	bx	lr

0800e3d6 <__retarget_lock_release_recursive>:
 800e3d6:	4770      	bx	lr

0800e3d8 <__swhatbuf_r>:
 800e3d8:	b570      	push	{r4, r5, r6, lr}
 800e3da:	460e      	mov	r6, r1
 800e3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e0:	2900      	cmp	r1, #0
 800e3e2:	b096      	sub	sp, #88	; 0x58
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	461d      	mov	r5, r3
 800e3e8:	da07      	bge.n	800e3fa <__swhatbuf_r+0x22>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	602b      	str	r3, [r5, #0]
 800e3ee:	89b3      	ldrh	r3, [r6, #12]
 800e3f0:	061a      	lsls	r2, r3, #24
 800e3f2:	d410      	bmi.n	800e416 <__swhatbuf_r+0x3e>
 800e3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3f8:	e00e      	b.n	800e418 <__swhatbuf_r+0x40>
 800e3fa:	466a      	mov	r2, sp
 800e3fc:	f000 f902 	bl	800e604 <_fstat_r>
 800e400:	2800      	cmp	r0, #0
 800e402:	dbf2      	blt.n	800e3ea <__swhatbuf_r+0x12>
 800e404:	9a01      	ldr	r2, [sp, #4]
 800e406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e40a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e40e:	425a      	negs	r2, r3
 800e410:	415a      	adcs	r2, r3
 800e412:	602a      	str	r2, [r5, #0]
 800e414:	e7ee      	b.n	800e3f4 <__swhatbuf_r+0x1c>
 800e416:	2340      	movs	r3, #64	; 0x40
 800e418:	2000      	movs	r0, #0
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	b016      	add	sp, #88	; 0x58
 800e41e:	bd70      	pop	{r4, r5, r6, pc}

0800e420 <__smakebuf_r>:
 800e420:	898b      	ldrh	r3, [r1, #12]
 800e422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e424:	079d      	lsls	r5, r3, #30
 800e426:	4606      	mov	r6, r0
 800e428:	460c      	mov	r4, r1
 800e42a:	d507      	bpl.n	800e43c <__smakebuf_r+0x1c>
 800e42c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e430:	6023      	str	r3, [r4, #0]
 800e432:	6123      	str	r3, [r4, #16]
 800e434:	2301      	movs	r3, #1
 800e436:	6163      	str	r3, [r4, #20]
 800e438:	b002      	add	sp, #8
 800e43a:	bd70      	pop	{r4, r5, r6, pc}
 800e43c:	ab01      	add	r3, sp, #4
 800e43e:	466a      	mov	r2, sp
 800e440:	f7ff ffca 	bl	800e3d8 <__swhatbuf_r>
 800e444:	9900      	ldr	r1, [sp, #0]
 800e446:	4605      	mov	r5, r0
 800e448:	4630      	mov	r0, r6
 800e44a:	f7ff f987 	bl	800d75c <_malloc_r>
 800e44e:	b948      	cbnz	r0, 800e464 <__smakebuf_r+0x44>
 800e450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e454:	059a      	lsls	r2, r3, #22
 800e456:	d4ef      	bmi.n	800e438 <__smakebuf_r+0x18>
 800e458:	f023 0303 	bic.w	r3, r3, #3
 800e45c:	f043 0302 	orr.w	r3, r3, #2
 800e460:	81a3      	strh	r3, [r4, #12]
 800e462:	e7e3      	b.n	800e42c <__smakebuf_r+0xc>
 800e464:	4b0d      	ldr	r3, [pc, #52]	; (800e49c <__smakebuf_r+0x7c>)
 800e466:	62b3      	str	r3, [r6, #40]	; 0x28
 800e468:	89a3      	ldrh	r3, [r4, #12]
 800e46a:	6020      	str	r0, [r4, #0]
 800e46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e470:	81a3      	strh	r3, [r4, #12]
 800e472:	9b00      	ldr	r3, [sp, #0]
 800e474:	6163      	str	r3, [r4, #20]
 800e476:	9b01      	ldr	r3, [sp, #4]
 800e478:	6120      	str	r0, [r4, #16]
 800e47a:	b15b      	cbz	r3, 800e494 <__smakebuf_r+0x74>
 800e47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e480:	4630      	mov	r0, r6
 800e482:	f000 f8d1 	bl	800e628 <_isatty_r>
 800e486:	b128      	cbz	r0, 800e494 <__smakebuf_r+0x74>
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	f023 0303 	bic.w	r3, r3, #3
 800e48e:	f043 0301 	orr.w	r3, r3, #1
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	89a0      	ldrh	r0, [r4, #12]
 800e496:	4305      	orrs	r5, r0
 800e498:	81a5      	strh	r5, [r4, #12]
 800e49a:	e7cd      	b.n	800e438 <__smakebuf_r+0x18>
 800e49c:	0800e231 	.word	0x0800e231

0800e4a0 <_malloc_usable_size_r>:
 800e4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a4:	1f18      	subs	r0, r3, #4
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	bfbc      	itt	lt
 800e4aa:	580b      	ldrlt	r3, [r1, r0]
 800e4ac:	18c0      	addlt	r0, r0, r3
 800e4ae:	4770      	bx	lr

0800e4b0 <_raise_r>:
 800e4b0:	291f      	cmp	r1, #31
 800e4b2:	b538      	push	{r3, r4, r5, lr}
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	460d      	mov	r5, r1
 800e4b8:	d904      	bls.n	800e4c4 <_raise_r+0x14>
 800e4ba:	2316      	movs	r3, #22
 800e4bc:	6003      	str	r3, [r0, #0]
 800e4be:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
 800e4c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4c6:	b112      	cbz	r2, 800e4ce <_raise_r+0x1e>
 800e4c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4cc:	b94b      	cbnz	r3, 800e4e2 <_raise_r+0x32>
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f000 f830 	bl	800e534 <_getpid_r>
 800e4d4:	462a      	mov	r2, r5
 800e4d6:	4601      	mov	r1, r0
 800e4d8:	4620      	mov	r0, r4
 800e4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4de:	f000 b817 	b.w	800e510 <_kill_r>
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d00a      	beq.n	800e4fc <_raise_r+0x4c>
 800e4e6:	1c59      	adds	r1, r3, #1
 800e4e8:	d103      	bne.n	800e4f2 <_raise_r+0x42>
 800e4ea:	2316      	movs	r3, #22
 800e4ec:	6003      	str	r3, [r0, #0]
 800e4ee:	2001      	movs	r0, #1
 800e4f0:	e7e7      	b.n	800e4c2 <_raise_r+0x12>
 800e4f2:	2400      	movs	r4, #0
 800e4f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	4798      	blx	r3
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	e7e0      	b.n	800e4c2 <_raise_r+0x12>

0800e500 <raise>:
 800e500:	4b02      	ldr	r3, [pc, #8]	; (800e50c <raise+0xc>)
 800e502:	4601      	mov	r1, r0
 800e504:	6818      	ldr	r0, [r3, #0]
 800e506:	f7ff bfd3 	b.w	800e4b0 <_raise_r>
 800e50a:	bf00      	nop
 800e50c:	200000dc 	.word	0x200000dc

0800e510 <_kill_r>:
 800e510:	b538      	push	{r3, r4, r5, lr}
 800e512:	4d07      	ldr	r5, [pc, #28]	; (800e530 <_kill_r+0x20>)
 800e514:	2300      	movs	r3, #0
 800e516:	4604      	mov	r4, r0
 800e518:	4608      	mov	r0, r1
 800e51a:	4611      	mov	r1, r2
 800e51c:	602b      	str	r3, [r5, #0]
 800e51e:	f7f6 fba5 	bl	8004c6c <_kill>
 800e522:	1c43      	adds	r3, r0, #1
 800e524:	d102      	bne.n	800e52c <_kill_r+0x1c>
 800e526:	682b      	ldr	r3, [r5, #0]
 800e528:	b103      	cbz	r3, 800e52c <_kill_r+0x1c>
 800e52a:	6023      	str	r3, [r4, #0]
 800e52c:	bd38      	pop	{r3, r4, r5, pc}
 800e52e:	bf00      	nop
 800e530:	200007bc 	.word	0x200007bc

0800e534 <_getpid_r>:
 800e534:	f7f6 bb92 	b.w	8004c5c <_getpid>

0800e538 <__sread>:
 800e538:	b510      	push	{r4, lr}
 800e53a:	460c      	mov	r4, r1
 800e53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e540:	f000 f894 	bl	800e66c <_read_r>
 800e544:	2800      	cmp	r0, #0
 800e546:	bfab      	itete	ge
 800e548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e54a:	89a3      	ldrhlt	r3, [r4, #12]
 800e54c:	181b      	addge	r3, r3, r0
 800e54e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e552:	bfac      	ite	ge
 800e554:	6563      	strge	r3, [r4, #84]	; 0x54
 800e556:	81a3      	strhlt	r3, [r4, #12]
 800e558:	bd10      	pop	{r4, pc}

0800e55a <__swrite>:
 800e55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e55e:	461f      	mov	r7, r3
 800e560:	898b      	ldrh	r3, [r1, #12]
 800e562:	05db      	lsls	r3, r3, #23
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	4616      	mov	r6, r2
 800e56a:	d505      	bpl.n	800e578 <__swrite+0x1e>
 800e56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e570:	2302      	movs	r3, #2
 800e572:	2200      	movs	r2, #0
 800e574:	f000 f868 	bl	800e648 <_lseek_r>
 800e578:	89a3      	ldrh	r3, [r4, #12]
 800e57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e57e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e582:	81a3      	strh	r3, [r4, #12]
 800e584:	4632      	mov	r2, r6
 800e586:	463b      	mov	r3, r7
 800e588:	4628      	mov	r0, r5
 800e58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e58e:	f000 b817 	b.w	800e5c0 <_write_r>

0800e592 <__sseek>:
 800e592:	b510      	push	{r4, lr}
 800e594:	460c      	mov	r4, r1
 800e596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e59a:	f000 f855 	bl	800e648 <_lseek_r>
 800e59e:	1c43      	adds	r3, r0, #1
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	bf15      	itete	ne
 800e5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5ae:	81a3      	strheq	r3, [r4, #12]
 800e5b0:	bf18      	it	ne
 800e5b2:	81a3      	strhne	r3, [r4, #12]
 800e5b4:	bd10      	pop	{r4, pc}

0800e5b6 <__sclose>:
 800e5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5ba:	f000 b813 	b.w	800e5e4 <_close_r>
	...

0800e5c0 <_write_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	4d07      	ldr	r5, [pc, #28]	; (800e5e0 <_write_r+0x20>)
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	4608      	mov	r0, r1
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	602a      	str	r2, [r5, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f7f6 fb83 	bl	8004cda <_write>
 800e5d4:	1c43      	adds	r3, r0, #1
 800e5d6:	d102      	bne.n	800e5de <_write_r+0x1e>
 800e5d8:	682b      	ldr	r3, [r5, #0]
 800e5da:	b103      	cbz	r3, 800e5de <_write_r+0x1e>
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	bd38      	pop	{r3, r4, r5, pc}
 800e5e0:	200007bc 	.word	0x200007bc

0800e5e4 <_close_r>:
 800e5e4:	b538      	push	{r3, r4, r5, lr}
 800e5e6:	4d06      	ldr	r5, [pc, #24]	; (800e600 <_close_r+0x1c>)
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	4608      	mov	r0, r1
 800e5ee:	602b      	str	r3, [r5, #0]
 800e5f0:	f7f6 fb8f 	bl	8004d12 <_close>
 800e5f4:	1c43      	adds	r3, r0, #1
 800e5f6:	d102      	bne.n	800e5fe <_close_r+0x1a>
 800e5f8:	682b      	ldr	r3, [r5, #0]
 800e5fa:	b103      	cbz	r3, 800e5fe <_close_r+0x1a>
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	bd38      	pop	{r3, r4, r5, pc}
 800e600:	200007bc 	.word	0x200007bc

0800e604 <_fstat_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	4d07      	ldr	r5, [pc, #28]	; (800e624 <_fstat_r+0x20>)
 800e608:	2300      	movs	r3, #0
 800e60a:	4604      	mov	r4, r0
 800e60c:	4608      	mov	r0, r1
 800e60e:	4611      	mov	r1, r2
 800e610:	602b      	str	r3, [r5, #0]
 800e612:	f7f6 fb8a 	bl	8004d2a <_fstat>
 800e616:	1c43      	adds	r3, r0, #1
 800e618:	d102      	bne.n	800e620 <_fstat_r+0x1c>
 800e61a:	682b      	ldr	r3, [r5, #0]
 800e61c:	b103      	cbz	r3, 800e620 <_fstat_r+0x1c>
 800e61e:	6023      	str	r3, [r4, #0]
 800e620:	bd38      	pop	{r3, r4, r5, pc}
 800e622:	bf00      	nop
 800e624:	200007bc 	.word	0x200007bc

0800e628 <_isatty_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4d06      	ldr	r5, [pc, #24]	; (800e644 <_isatty_r+0x1c>)
 800e62c:	2300      	movs	r3, #0
 800e62e:	4604      	mov	r4, r0
 800e630:	4608      	mov	r0, r1
 800e632:	602b      	str	r3, [r5, #0]
 800e634:	f7f6 fb89 	bl	8004d4a <_isatty>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d102      	bne.n	800e642 <_isatty_r+0x1a>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	b103      	cbz	r3, 800e642 <_isatty_r+0x1a>
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	200007bc 	.word	0x200007bc

0800e648 <_lseek_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4d07      	ldr	r5, [pc, #28]	; (800e668 <_lseek_r+0x20>)
 800e64c:	4604      	mov	r4, r0
 800e64e:	4608      	mov	r0, r1
 800e650:	4611      	mov	r1, r2
 800e652:	2200      	movs	r2, #0
 800e654:	602a      	str	r2, [r5, #0]
 800e656:	461a      	mov	r2, r3
 800e658:	f7f6 fb82 	bl	8004d60 <_lseek>
 800e65c:	1c43      	adds	r3, r0, #1
 800e65e:	d102      	bne.n	800e666 <_lseek_r+0x1e>
 800e660:	682b      	ldr	r3, [r5, #0]
 800e662:	b103      	cbz	r3, 800e666 <_lseek_r+0x1e>
 800e664:	6023      	str	r3, [r4, #0]
 800e666:	bd38      	pop	{r3, r4, r5, pc}
 800e668:	200007bc 	.word	0x200007bc

0800e66c <_read_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d07      	ldr	r5, [pc, #28]	; (800e68c <_read_r+0x20>)
 800e670:	4604      	mov	r4, r0
 800e672:	4608      	mov	r0, r1
 800e674:	4611      	mov	r1, r2
 800e676:	2200      	movs	r2, #0
 800e678:	602a      	str	r2, [r5, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	f7f6 fb10 	bl	8004ca0 <_read>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d102      	bne.n	800e68a <_read_r+0x1e>
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	b103      	cbz	r3, 800e68a <_read_r+0x1e>
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	200007bc 	.word	0x200007bc

0800e690 <_init>:
 800e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e692:	bf00      	nop
 800e694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e696:	bc08      	pop	{r3}
 800e698:	469e      	mov	lr, r3
 800e69a:	4770      	bx	lr

0800e69c <_fini>:
 800e69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69e:	bf00      	nop
 800e6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6a2:	bc08      	pop	{r3}
 800e6a4:	469e      	mov	lr, r3
 800e6a6:	4770      	bx	lr

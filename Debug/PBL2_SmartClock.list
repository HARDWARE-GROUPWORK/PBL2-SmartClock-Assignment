
PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800b9d0  0800b9d0  0001b9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0bc  0800c0bc  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c4  0800c0c4  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800c0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000278  0800c344  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800c344  00020674  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf40  00000000  00000000  000202a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c56  00000000  00000000  0003c1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0003fe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  000414c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b55c  00000000  00000000  000429a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb90  00000000  00000000  0006df04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101ba8  00000000  00000000  00089a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b63c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cdc  00000000  00000000  0018b690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000278 	.word	0x20000278
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b9b8 	.word	0x0800b9b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000027c 	.word	0x2000027c
 800023c:	0800b9b8 	.word	0x0800b9b8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f004 f9d7 	bl	8004a58 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f003 fe0b 	bl	80042e0 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000310 	.word	0x20000310

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000030c 	.word	0x2000030c

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f004 fa07 	bl	8004c80 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000310 	.word	0x20000310

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fa66 	bl	8008d9c <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f004 f8b5 	bl	8004a58 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f003 fcf6 	bl	80042e0 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000310 	.word	0x20000310

08000900 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	4b97      	ldr	r3, [pc, #604]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a96      	ldr	r2, [pc, #600]	; (8000b74 <MX_GPIO_Init+0x274>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b94      	ldr	r3, [pc, #592]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b91      	ldr	r3, [pc, #580]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a90      	ldr	r2, [pc, #576]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b8e      	ldr	r3, [pc, #568]	; (8000b74 <MX_GPIO_Init+0x274>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b8b      	ldr	r3, [pc, #556]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a8a      	ldr	r2, [pc, #552]	; (8000b74 <MX_GPIO_Init+0x274>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b88      	ldr	r3, [pc, #544]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b85      	ldr	r3, [pc, #532]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a84      	ldr	r2, [pc, #528]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b82      	ldr	r3, [pc, #520]	; (8000b74 <MX_GPIO_Init+0x274>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b7f      	ldr	r3, [pc, #508]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a7e      	ldr	r2, [pc, #504]	; (8000b74 <MX_GPIO_Init+0x274>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b7c      	ldr	r3, [pc, #496]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b79      	ldr	r3, [pc, #484]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a78      	ldr	r2, [pc, #480]	; (8000b74 <MX_GPIO_Init+0x274>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b76      	ldr	r3, [pc, #472]	; (8000b74 <MX_GPIO_Init+0x274>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b73      	ldr	r3, [pc, #460]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a72      	ldr	r2, [pc, #456]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b6d      	ldr	r3, [pc, #436]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a6c      	ldr	r2, [pc, #432]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b6a      	ldr	r3, [pc, #424]	; (8000b74 <MX_GPIO_Init+0x274>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2168      	movs	r1, #104	; 0x68
 80009da:	4867      	ldr	r0, [pc, #412]	; (8000b78 <MX_GPIO_Init+0x278>)
 80009dc:	f003 ff7a 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009e6:	4865      	ldr	r0, [pc, #404]	; (8000b7c <MX_GPIO_Init+0x27c>)
 80009e8:	f003 ff74 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4863      	ldr	r0, [pc, #396]	; (8000b80 <MX_GPIO_Init+0x280>)
 80009f2:	f003 ff6f 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009fc:	4861      	ldr	r0, [pc, #388]	; (8000b84 <MX_GPIO_Init+0x284>)
 80009fe:	f003 ff69 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000a02:	2314      	movs	r3, #20
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4858      	ldr	r0, [pc, #352]	; (8000b78 <MX_GPIO_Init+0x278>)
 8000a16:	f003 fd99 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000a1a:	2368      	movs	r3, #104	; 0x68
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4851      	ldr	r0, [pc, #324]	; (8000b78 <MX_GPIO_Init+0x278>)
 8000a32:	f003 fd8b 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3c:	4b52      	ldr	r3, [pc, #328]	; (8000b88 <MX_GPIO_Init+0x288>)
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	484e      	ldr	r0, [pc, #312]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000a4c:	f003 fd7e 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a50:	2332      	movs	r3, #50	; 0x32
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a60:	230b      	movs	r3, #11
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4846      	ldr	r0, [pc, #280]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000a6c:	f003 fd6e 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a70:	2386      	movs	r3, #134	; 0x86
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a80:	230b      	movs	r3, #11
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4840      	ldr	r0, [pc, #256]	; (8000b8c <MX_GPIO_Init+0x28c>)
 8000a8c:	f003 fd5e 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa2:	230b      	movs	r3, #11
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4833      	ldr	r0, [pc, #204]	; (8000b7c <MX_GPIO_Init+0x27c>)
 8000aae:	f003 fd4d 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ab2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482c      	ldr	r0, [pc, #176]	; (8000b7c <MX_GPIO_Init+0x27c>)
 8000acc:	f003 fd3e 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4826      	ldr	r0, [pc, #152]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000ae8:	f003 fd30 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000b00:	f003 fd24 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000b04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4819      	ldr	r0, [pc, #100]	; (8000b84 <MX_GPIO_Init+0x284>)
 8000b1e:	f003 fd15 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b22:	23f0      	movs	r3, #240	; 0xf0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4816      	ldr	r0, [pc, #88]	; (8000b90 <MX_GPIO_Init+0x290>)
 8000b36:	f003 fd09 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <MX_GPIO_Init+0x280>)
 8000b58:	f003 fcf8 	bl	800454c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2103      	movs	r1, #3
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f003 fcbc 	bl	80044de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b66:	2028      	movs	r0, #40	; 0x28
 8000b68:	f003 fcd5 	bl	8004516 <HAL_NVIC_EnableIRQ>

}
 8000b6c:	bf00      	nop
 8000b6e:	3738      	adds	r7, #56	; 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40020800 	.word	0x40020800
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <MX_I2C1_Init+0x7c>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bd0:	f003 feb2 	bl	8004938 <HAL_I2C_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bda:	f002 f8fb 	bl	8002dd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000be2:	f004 fb83 	bl	80052ec <HAL_I2CEx_ConfigAnalogFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f002 f8f2 	bl	8002dd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bf4:	f004 fbc5 	bl	8005382 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f002 f8e9 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000310 	.word	0x20000310
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	00c0eaff 	.word	0x00c0eaff

08000c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x7c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d128      	bne.n	8000c88 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c60:	2304      	movs	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480b      	ldr	r0, [pc, #44]	; (8000c98 <HAL_I2C_MspInit+0x84>)
 8000c6c:	f003 fc6e 	bl	800454c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca0:	f3bf 8f4f 	dsb	sy
}
 8000ca4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ca6:	f3bf 8f6f 	isb	sy
}
 8000caa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb4:	f3bf 8f4f 	dsb	sy
}
 8000cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
}
 8000cbe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <SCB_EnableICache+0x48>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ccc:	f3bf 8f4f 	dsb	sy
}
 8000cd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cd2:	f3bf 8f6f 	isb	sy
}
 8000cd6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf6:	f3bf 8f4f 	dsb	sy
}
 8000cfa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d02:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0b5b      	lsrs	r3, r3, #13
 8000d08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d0c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d16:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	015a      	lsls	r2, r3, #5
 8000d1c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d20:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d26:	4911      	ldr	r1, [pc, #68]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	60ba      	str	r2, [r7, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1ef      	bne.n	8000d18 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	60fa      	str	r2, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1e5      	bne.n	8000d0e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d42:	f3bf 8f4f 	dsb	sy
}
 8000d46:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <SCB_EnableDCache+0x84>)
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d54:	f3bf 8f4f 	dsb	sy
}
 8000d58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d5a:	f3bf 8f6f 	isb	sy
}
 8000d5e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <sensirion_bytes_to_float>:
	HAL_UART_Transmit(&huart3, (uint8_t *)data, pre_define_data_size, 1000);
}

// For convert concatenate hex to float ieee754
float sensirion_bytes_to_float(const uint32_t bytes)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32_value;
		float float32;
	} tmp;

	tmp.u32_value = bytes;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60fb      	str	r3, [r7, #12]
	return tmp.float32;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	ee07 3a90 	vmov	s15, r3
}
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <wake_sensirion>:

// Wake up SPS30 by sent start frame
uint8_t *wake_sensirion()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent start frame");

	static uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e007      	b.n	8000dac <wake_sensirion+0x1c>
	{
		data[i] = 0x00;
 8000d9c:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <wake_sensirion+0x70>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3301      	adds	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b45      	cmp	r3, #69	; 0x45
 8000db0:	d9f4      	bls.n	8000d9c <wake_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000db2:	bf00      	nop
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <wake_sensirion+0x74>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dbe:	2b40      	cmp	r3, #64	; 0x40
 8000dc0:	d1f8      	bne.n	8000db4 <wake_sensirion+0x24>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	220a      	movs	r2, #10
 8000dc8:	490f      	ldr	r1, [pc, #60]	; (8000e08 <wake_sensirion+0x78>)
 8000dca:	480e      	ldr	r0, [pc, #56]	; (8000e04 <wake_sensirion+0x74>)
 8000dcc:	f007 fa8e 	bl	80082ec <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000dd0:	bf00      	nop
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <wake_sensirion+0x74>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ddc:	2b40      	cmp	r3, #64	; 0x40
 8000dde:	d1f8      	bne.n	8000dd2 <wake_sensirion+0x42>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de4:	2246      	movs	r2, #70	; 0x46
 8000de6:	4906      	ldr	r1, [pc, #24]	; (8000e00 <wake_sensirion+0x70>)
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <wake_sensirion+0x74>)
 8000dea:	f007 fb12 	bl	8008412 <HAL_UART_Receive>
	HAL_Delay(1000);
 8000dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df2:	f003 fa75 	bl	80042e0 <HAL_Delay>
	return data;
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <wake_sensirion+0x70>)
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200002b8 	.word	0x200002b8
 8000e04:	200005dc 	.word	0x200005dc
 8000e08:	20000000 	.word	0x20000000

08000e0c <read_sensirion>:

// Read from SPS30 by sent read frame
uint8_t *read_sensirion()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0b2      	sub	sp, #200	; 0xc8
 8000e10:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent read frame");

	uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000e18:	e00b      	b.n	8000e32 <read_sensirion+0x26>
	{
		data[i] = 0x00;
 8000e1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e22:	4413      	add	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000e32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e36:	2b45      	cmp	r3, #69	; 0x45
 8000e38:	d9ef      	bls.n	8000e1a <read_sensirion+0xe>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e3a:	bf00      	nop
 8000e3c:	4b6d      	ldr	r3, [pc, #436]	; (8000ff4 <read_sensirion+0x1e8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e46:	2b40      	cmp	r3, #64	; 0x40
 8000e48:	d1f8      	bne.n	8000e3c <read_sensirion+0x30>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4969      	ldr	r1, [pc, #420]	; (8000ff8 <read_sensirion+0x1ec>)
 8000e52:	4868      	ldr	r0, [pc, #416]	; (8000ff4 <read_sensirion+0x1e8>)
 8000e54:	f007 fa4a 	bl	80082ec <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000e58:	bf00      	nop
 8000e5a:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <read_sensirion+0x1e8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	2b40      	cmp	r3, #64	; 0x40
 8000e66:	d1f8      	bne.n	8000e5a <read_sensirion+0x4e>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000e68:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	2246      	movs	r2, #70	; 0x46
 8000e72:	4860      	ldr	r0, [pc, #384]	; (8000ff4 <read_sensirion+0x1e8>)
 8000e74:	f007 facd 	bl	8008412 <HAL_UART_Receive>

	// Check for start frame
	if (data[0] == 0x7E && data[1] == 0x00)
 8000e78:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000e7c:	2b7e      	cmp	r3, #126	; 0x7e
 8000e7e:	f040 80b0 	bne.w	8000fe2 <read_sensirion+0x1d6>
 8000e82:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f040 80ab 	bne.w	8000fe2 <read_sensirion+0x1d6>
	{
		// Header frame
		uint8_t command = data[2];
 8000e8c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000e90:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
		uint8_t errorcode = data[3];
 8000e94:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000e98:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
		uint8_t length = data[4];
 8000e9c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000ea0:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
		uint8_t state = data[5];
 8000ea4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000ea8:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8

		uint8_t checksum;
		// Find checksum frame by start from the back of the array
		for (uint8_t i = sizeof(data); i > 0; i--)
 8000eac:	2346      	movs	r3, #70	; 0x46
 8000eae:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8000eb2:	e017      	b.n	8000ee4 <read_sensirion+0xd8>
		{
			if (data[i] == 0x7E)
 8000eb4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000eb8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000ec2:	2b7e      	cmp	r3, #126	; 0x7e
 8000ec4:	d109      	bne.n	8000eda <read_sensirion+0xce>
			{
				data[i - 1] = checksum;
 8000ec6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8000ed6:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (uint8_t i = sizeof(data); i > 0; i--)
 8000eda:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8000ee4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e3      	bne.n	8000eb4 <read_sensirion+0xa8>
		}

		uint32_t concatenateHex[10];
		float actualValue[10];
		// Concatenate HEX(2,2,2,2) into HEX(8) and convert concatenate hex to float ieee754
		for (int i = 0; i < 10; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000ef2:	e06c      	b.n	8000fce <read_sensirion+0x1c2>
		{
			// 40 HEX(2) into 10 Groups
			// Skip first 5 bits (header)
			concatenateHex[i] = ((data[4 * i + 5]) << 24) + ((data[(4 * i) + 1 + 5]) << 16) + ((data[(4 * i) + 2 + 5]) << 8) + (data[(4 * i) + 3 + 5]);
 8000ef4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	3305      	adds	r3, #5
 8000efc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000f00:	4413      	add	r3, r2
 8000f02:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f06:	061a      	lsls	r2, r3, #24
 8000f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	3306      	adds	r3, #6
 8000f10:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000f14:	440b      	add	r3, r1
 8000f16:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f1a:	041b      	lsls	r3, r3, #16
 8000f1c:	441a      	add	r2, r3
 8000f1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	3307      	adds	r3, #7
 8000f26:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	4413      	add	r3, r2
 8000f34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f38:	3202      	adds	r2, #2
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000f40:	440a      	add	r2, r1
 8000f42:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8000f46:	4413      	add	r3, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000f54:	440b      	add	r3, r1
 8000f56:	f843 2cc8 	str.w	r2, [r3, #-200]

			// Convert sensirion bytes to float
			actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 8000f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000f64:	4413      	add	r3, r2
 8000f66:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff00 	bl	8000d70 <sensirion_bytes_to_float>
 8000f70:	eef0 7a40 	vmov.f32	s15, s0
 8000f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000f7e:	4413      	add	r3, r2
 8000f80:	3ba0      	subs	r3, #160	; 0xa0
 8000f82:	edc3 7a00 	vstr	s15, [r3]

			// ! For debug only
			char stringBuffer[30];
			sprintf(stringBuffer, "%.4f\r\n", actualValue[i]);
 8000f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000f90:	4413      	add	r3, r2
 8000f92:	3ba0      	subs	r3, #160	; 0xa0
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000fa0:	ec53 2b17 	vmov	r2, r3, d7
 8000fa4:	4915      	ldr	r1, [pc, #84]	; (8000ffc <read_sensirion+0x1f0>)
 8000fa6:	f008 fb45 	bl	8009634 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000faa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff f946 	bl	8000240 <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000fbc:	23c8      	movs	r3, #200	; 0xc8
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <read_sensirion+0x1f4>)
 8000fc0:	f007 f994 	bl	80082ec <HAL_UART_Transmit>
		for (int i = 0; i < 10; i++)
 8000fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fd2:	2b09      	cmp	r3, #9
 8000fd4:	dd8e      	ble.n	8000ef4 <read_sensirion+0xe8>
		}
		HAL_Delay(1000);
 8000fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fda:	f003 f981 	bl	80042e0 <HAL_Delay>
		return actualValue;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e004      	b.n	8000fec <read_sensirion+0x1e0>
	}
	else
	{
		HAL_Delay(1000);
 8000fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe6:	f003 f97b 	bl	80042e0 <HAL_Delay>
		return NULL;
 8000fea:	2300      	movs	r3, #0
	}
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	37c8      	adds	r7, #200	; 0xc8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200005dc 	.word	0x200005dc
 8000ff8:	2000000c 	.word	0x2000000c
 8000ffc:	0800b9d8 	.word	0x0800b9d8
 8001000:	20000558 	.word	0x20000558

08001004 <saveData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Save EEPROM
void saveData(){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	//Clock
	EEPROM_Write_NUM (1, 0, hourNum);
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <saveData+0xb8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	2100      	movs	r1, #0
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff fbaa 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (2, 0, minuteNum);
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <saveData+0xbc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	2100      	movs	r1, #0
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff fb9e 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (3, 0, secondNum);
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <saveData+0xc0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	eeb0 0a67 	vmov.f32	s0, s15
 8001048:	2100      	movs	r1, #0
 800104a:	2003      	movs	r0, #3
 800104c:	f7ff fb92 	bl	8000774 <EEPROM_Write_NUM>

	//Date
	EEPROM_Write_NUM (4, 0, dayIndex);
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <saveData+0xc4>)
 8001052:	f993 3000 	ldrsb.w	r3, [r3]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	2100      	movs	r1, #0
 8001064:	2004      	movs	r0, #4
 8001066:	f7ff fb85 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (5, 0, date);
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <saveData+0xc8>)
 800106c:	f993 3000 	ldrsb.w	r3, [r3]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	2100      	movs	r1, #0
 800107e:	2005      	movs	r0, #5
 8001080:	f7ff fb78 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (6, 0, monthIndex);
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <saveData+0xcc>)
 8001086:	f993 3000 	ldrsb.w	r3, [r3]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	2100      	movs	r1, #0
 8001098:	2006      	movs	r0, #6
 800109a:	f7ff fb6b 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (7, 0, year);
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <saveData+0xd0>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ac:	eeb0 0a67 	vmov.f32	s0, s15
 80010b0:	2100      	movs	r1, #0
 80010b2:	2007      	movs	r0, #7
 80010b4:	f7ff fb5e 	bl	8000774 <EEPROM_Write_NUM>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000001c 	.word	0x2000001c
 80010c0:	20000018 	.word	0x20000018
 80010c4:	20000014 	.word	0x20000014
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	2000003c 	.word	0x2000003c
 80010d0:	2000008d 	.word	0x2000008d
 80010d4:	2000008e 	.word	0x2000008e

080010d8 <readData>:
// Read EEPROM
void readData(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	//Clock
	hourNum = EEPROM_Read_NUM (1, 0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fb63 	bl	80007ac <EEPROM_Read_NUM>
 80010e6:	eef0 7a40 	vmov.f32	s15, s0
 80010ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ee:	ee17 2a90 	vmov	r2, s15
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <readData+0xc4>)
 80010f4:	601a      	str	r2, [r3, #0]
	minuteNum = EEPROM_Read_NUM (2, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff fb57 	bl	80007ac <EEPROM_Read_NUM>
 80010fe:	eef0 7a40 	vmov.f32	s15, s0
 8001102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001106:	ee17 2a90 	vmov	r2, s15
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <readData+0xc8>)
 800110c:	601a      	str	r2, [r3, #0]
	secondNum = EEPROM_Read_NUM (3, 0);
 800110e:	2100      	movs	r1, #0
 8001110:	2003      	movs	r0, #3
 8001112:	f7ff fb4b 	bl	80007ac <EEPROM_Read_NUM>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111e:	ee17 2a90 	vmov	r2, s15
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <readData+0xcc>)
 8001124:	601a      	str	r2, [r3, #0]

	//Date
	dayIndex = EEPROM_Read_NUM (4, 0);
 8001126:	2100      	movs	r1, #0
 8001128:	2004      	movs	r0, #4
 800112a:	f7ff fb3f 	bl	80007ac <EEPROM_Read_NUM>
 800112e:	eef0 7a40 	vmov.f32	s15, s0
 8001132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001136:	edc7 7a01 	vstr	s15, [r7, #4]
 800113a:	793b      	ldrb	r3, [r7, #4]
 800113c:	b25a      	sxtb	r2, r3
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <readData+0xd0>)
 8001140:	701a      	strb	r2, [r3, #0]
	date = EEPROM_Read_NUM (5, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	2005      	movs	r0, #5
 8001146:	f7ff fb31 	bl	80007ac <EEPROM_Read_NUM>
 800114a:	eef0 7a40 	vmov.f32	s15, s0
 800114e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
 8001156:	793b      	ldrb	r3, [r7, #4]
 8001158:	b25a      	sxtb	r2, r3
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <readData+0xd4>)
 800115c:	701a      	strb	r2, [r3, #0]
	monthIndex = EEPROM_Read_NUM (6, 0);
 800115e:	2100      	movs	r1, #0
 8001160:	2006      	movs	r0, #6
 8001162:	f7ff fb23 	bl	80007ac <EEPROM_Read_NUM>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
 800116a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001172:	793b      	ldrb	r3, [r7, #4]
 8001174:	b25a      	sxtb	r2, r3
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <readData+0xd8>)
 8001178:	701a      	strb	r2, [r3, #0]
	year = EEPROM_Read_NUM (7, 0);
 800117a:	2100      	movs	r1, #0
 800117c:	2007      	movs	r0, #7
 800117e:	f7ff fb15 	bl	80007ac <EEPROM_Read_NUM>
 8001182:	eef0 7a40 	vmov.f32	s15, s0
 8001186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118a:	ee17 3a90 	vmov	r3, s15
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <readData+0xdc>)
 8001192:	801a      	strh	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000001c 	.word	0x2000001c
 80011a0:	20000018 	.word	0x20000018
 80011a4:	20000014 	.word	0x20000014
 80011a8:	2000008c 	.word	0x2000008c
 80011ac:	2000003c 	.word	0x2000003c
 80011b0:	2000008d 	.word	0x2000008d
 80011b4:	2000008e 	.word	0x2000008e

080011b8 <eraseAllData>:

// Erase EERPOM
void eraseAllData(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	e007      	b.n	80011d4 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fb6d 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011da:	dbf3      	blt.n	80011c4 <eraseAllData+0xc>
	}
	year = 2021;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <eraseAllData+0x54>)
 80011de:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80011e2:	801a      	strh	r2, [r3, #0]
	EEPROM_Write_NUM (7, 0, year); // override year
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <eraseAllData+0x54>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	2100      	movs	r1, #0
 80011f8:	2007      	movs	r0, #7
 80011fa:	f7ff fabb 	bl	8000774 <EEPROM_Write_NUM>
	readData(); // Read from Clean EEPROM
 80011fe:	f7ff ff6b 	bl	80010d8 <readData>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000008e 	.word	0x2000008e

08001210 <checkResetData>:

void checkResetData(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	if(userResetButton == 1){
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <checkResetData+0x1c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <checkResetData+0x16>
		eraseAllData();
 800121c:	f7ff ffcc 	bl	80011b8 <eraseAllData>
		userResetButton = 0;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <checkResetData+0x1c>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
	}
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002a6 	.word	0x200002a6

08001230 <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fe87 	bl	8003f50 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001242:	2001      	movs	r0, #1
 8001244:	f002 fc7e 	bl	8003b44 <ILI9341_Set_Rotation>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <check31Days>:

bool check31Days(){
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	if(monthIndex == 0 || monthIndex == 2 || monthIndex == 4 || monthIndex == 6 || monthIndex == 7 || monthIndex == 9 || monthIndex == 11){
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <check31Days+0x5c>)
 8001256:	f993 3000 	ldrsb.w	r3, [r3]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d01d      	beq.n	800129a <check31Days+0x4a>
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <check31Days+0x5c>)
 8001260:	f993 3000 	ldrsb.w	r3, [r3]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d018      	beq.n	800129a <check31Days+0x4a>
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <check31Days+0x5c>)
 800126a:	f993 3000 	ldrsb.w	r3, [r3]
 800126e:	2b04      	cmp	r3, #4
 8001270:	d013      	beq.n	800129a <check31Days+0x4a>
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <check31Days+0x5c>)
 8001274:	f993 3000 	ldrsb.w	r3, [r3]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d00e      	beq.n	800129a <check31Days+0x4a>
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <check31Days+0x5c>)
 800127e:	f993 3000 	ldrsb.w	r3, [r3]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d009      	beq.n	800129a <check31Days+0x4a>
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <check31Days+0x5c>)
 8001288:	f993 3000 	ldrsb.w	r3, [r3]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d004      	beq.n	800129a <check31Days+0x4a>
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <check31Days+0x5c>)
 8001292:	f993 3000 	ldrsb.w	r3, [r3]
 8001296:	2b0b      	cmp	r3, #11
 8001298:	d101      	bne.n	800129e <check31Days+0x4e>
		return true;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <check31Days+0x50>
	}else{
		return false;
 800129e:	2300      	movs	r3, #0
	}
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2000008d 	.word	0x2000008d

080012b0 <setDayOneIncrementMonth>:
void setDayOneIncrementMonth(uint8_t num){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	if(date > num){
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <setDayOneIncrementMonth+0x48>)
 80012bc:	f993 3000 	ldrsb.w	r3, [r3]
 80012c0:	461a      	mov	r2, r3
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dd10      	ble.n	80012ea <setDayOneIncrementMonth+0x3a>
		date = 1;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <setDayOneIncrementMonth+0x48>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
		if(mode != 100){
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <setDayOneIncrementMonth+0x4c>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	2b64      	cmp	r3, #100	; 0x64
 80012d6:	d008      	beq.n	80012ea <setDayOneIncrementMonth+0x3a>
			monthIndex++;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <setDayOneIncrementMonth+0x50>)
 80012da:	f993 3000 	ldrsb.w	r3, [r3]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <setDayOneIncrementMonth+0x50>)
 80012e8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000003c 	.word	0x2000003c
 80012fc:	2000029c 	.word	0x2000029c
 8001300:	2000008d 	.word	0x2000008d

08001304 <setDayX>:
void setDayX(uint8_t num){
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	date = num;
 800130e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <setDayX+0x20>)
 8001314:	701a      	strb	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	2000003c 	.word	0x2000003c

08001328 <calculationClock>:

//Calculation
void calculationClock(uint32_t ms){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

	millisecondHAL = HAL_GetTick();
 8001330:	f002 ffca 	bl	80042c8 <HAL_GetTick>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	498b      	ldr	r1, [pc, #556]	; (800156c <calculationClock+0x244>)
 800133e:	e9c1 2300 	strd	r2, r3, [r1]

	//Normal Clock
	if (millisecond >= 1000){
 8001342:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <calculationClock+0x248>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800134a:	d307      	bcc.n	800135c <calculationClock+0x34>
		millisecond = 0;
 800134c:	4b88      	ldr	r3, [pc, #544]	; (8001570 <calculationClock+0x248>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
		secondNum++;
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <calculationClock+0x24c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a86      	ldr	r2, [pc, #536]	; (8001574 <calculationClock+0x24c>)
 800135a:	6013      	str	r3, [r2, #0]
	}
	if (secondNum >= 60){
 800135c:	4b85      	ldr	r3, [pc, #532]	; (8001574 <calculationClock+0x24c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b3b      	cmp	r3, #59	; 0x3b
 8001362:	dd0c      	ble.n	800137e <calculationClock+0x56>
		secondNum = 0;
 8001364:	4b83      	ldr	r3, [pc, #524]	; (8001574 <calculationClock+0x24c>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800136a:	4b83      	ldr	r3, [pc, #524]	; (8001578 <calculationClock+0x250>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	2b64      	cmp	r3, #100	; 0x64
 8001372:	d004      	beq.n	800137e <calculationClock+0x56>
			minuteNum++;
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <calculationClock+0x254>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a80      	ldr	r2, [pc, #512]	; (800157c <calculationClock+0x254>)
 800137c:	6013      	str	r3, [r2, #0]
		}
	}
	if (minuteNum >= 60){
 800137e:	4b7f      	ldr	r3, [pc, #508]	; (800157c <calculationClock+0x254>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b3b      	cmp	r3, #59	; 0x3b
 8001384:	dd0c      	ble.n	80013a0 <calculationClock+0x78>
		minuteNum = 0;
 8001386:	4b7d      	ldr	r3, [pc, #500]	; (800157c <calculationClock+0x254>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800138c:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <calculationClock+0x250>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d004      	beq.n	80013a0 <calculationClock+0x78>
			hourNum++;
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <calculationClock+0x258>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a78      	ldr	r2, [pc, #480]	; (8001580 <calculationClock+0x258>)
 800139e:	6013      	str	r3, [r2, #0]
		}
	}
	if (hourNum >= 24){
 80013a0:	4b77      	ldr	r3, [pc, #476]	; (8001580 <calculationClock+0x258>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b17      	cmp	r3, #23
 80013a6:	dd19      	ble.n	80013dc <calculationClock+0xb4>
		hourNum = 0;
 80013a8:	4b75      	ldr	r3, [pc, #468]	; (8001580 <calculationClock+0x258>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <calculationClock+0x250>)
 80013b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d011      	beq.n	80013dc <calculationClock+0xb4>
			dayIndex++;
 80013b8:	4b72      	ldr	r3, [pc, #456]	; (8001584 <calculationClock+0x25c>)
 80013ba:	f993 3000 	ldrsb.w	r3, [r3]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	4b6f      	ldr	r3, [pc, #444]	; (8001584 <calculationClock+0x25c>)
 80013c8:	701a      	strb	r2, [r3, #0]
			date++;
 80013ca:	4b6f      	ldr	r3, [pc, #444]	; (8001588 <calculationClock+0x260>)
 80013cc:	f993 3000 	ldrsb.w	r3, [r3]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	b25a      	sxtb	r2, r3
 80013d8:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <calculationClock+0x260>)
 80013da:	701a      	strb	r2, [r3, #0]
		}
	}
	//Normal Date
	if (dayIndex >= 7){
 80013dc:	4b69      	ldr	r3, [pc, #420]	; (8001584 <calculationClock+0x25c>)
 80013de:	f993 3000 	ldrsb.w	r3, [r3]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	dd02      	ble.n	80013ec <calculationClock+0xc4>
		dayIndex = 0;
 80013e6:	4b67      	ldr	r3, [pc, #412]	; (8001584 <calculationClock+0x25c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
	}
	if (year % 4 == 0){ //check for FEB 29 days
 80013ec:	4b67      	ldr	r3, [pc, #412]	; (800158c <calculationClock+0x264>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d115      	bne.n	800142a <calculationClock+0x102>
		if(monthIndex == 1){
 80013fe:	4b64      	ldr	r3, [pc, #400]	; (8001590 <calculationClock+0x268>)
 8001400:	f993 3000 	ldrsb.w	r3, [r3]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d103      	bne.n	8001410 <calculationClock+0xe8>
			setDayOneIncrementMonth(29); // 29 days
 8001408:	201d      	movs	r0, #29
 800140a:	f7ff ff51 	bl	80012b0 <setDayOneIncrementMonth>
 800140e:	e021      	b.n	8001454 <calculationClock+0x12c>
		}else if(check31Days() == true){
 8001410:	f7ff ff1e 	bl	8001250 <check31Days>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <calculationClock+0xfa>
			setDayOneIncrementMonth(31); // 31 days
 800141a:	201f      	movs	r0, #31
 800141c:	f7ff ff48 	bl	80012b0 <setDayOneIncrementMonth>
 8001420:	e018      	b.n	8001454 <calculationClock+0x12c>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 8001422:	201e      	movs	r0, #30
 8001424:	f7ff ff44 	bl	80012b0 <setDayOneIncrementMonth>
 8001428:	e014      	b.n	8001454 <calculationClock+0x12c>
		}
	}else{
		if(monthIndex == 1){
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <calculationClock+0x268>)
 800142c:	f993 3000 	ldrsb.w	r3, [r3]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d103      	bne.n	800143c <calculationClock+0x114>
			setDayOneIncrementMonth(28); // 28 days
 8001434:	201c      	movs	r0, #28
 8001436:	f7ff ff3b 	bl	80012b0 <setDayOneIncrementMonth>
 800143a:	e00b      	b.n	8001454 <calculationClock+0x12c>
		}else if(check31Days() == true){
 800143c:	f7ff ff08 	bl	8001250 <check31Days>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <calculationClock+0x126>
			setDayOneIncrementMonth(31); // 31 days
 8001446:	201f      	movs	r0, #31
 8001448:	f7ff ff32 	bl	80012b0 <setDayOneIncrementMonth>
 800144c:	e002      	b.n	8001454 <calculationClock+0x12c>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 800144e:	201e      	movs	r0, #30
 8001450:	f7ff ff2e 	bl	80012b0 <setDayOneIncrementMonth>
		}
	}
	if (monthIndex >= 12){
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <calculationClock+0x268>)
 8001456:	f993 3000 	ldrsb.w	r3, [r3]
 800145a:	2b0b      	cmp	r3, #11
 800145c:	dd10      	ble.n	8001480 <calculationClock+0x158>
		monthIndex = 0;
 800145e:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <calculationClock+0x268>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
		if (mode != 100){
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <calculationClock+0x250>)
 8001466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d008      	beq.n	8001480 <calculationClock+0x158>
			year++;
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <calculationClock+0x264>)
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	b29b      	uxth	r3, r3
 8001476:	3301      	adds	r3, #1
 8001478:	b29b      	uxth	r3, r3
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <calculationClock+0x264>)
 800147e:	801a      	strh	r2, [r3, #0]
		}
	}
	if (year >= 10000){
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <calculationClock+0x264>)
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	f242 720f 	movw	r2, #9999	; 0x270f
 800148a:	4293      	cmp	r3, r2
 800148c:	dd02      	ble.n	8001494 <calculationClock+0x16c>
		year = 1;
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <calculationClock+0x264>)
 8001490:	2201      	movs	r2, #1
 8001492:	801a      	strh	r2, [r3, #0]
	}

	//check for editMode
	if(mode == 100){
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <calculationClock+0x250>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d15f      	bne.n	800155e <calculationClock+0x236>
		if (minuteNum < 0){
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <calculationClock+0x254>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da02      	bge.n	80014ac <calculationClock+0x184>
			minuteNum = 59;
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <calculationClock+0x254>)
 80014a8:	223b      	movs	r2, #59	; 0x3b
 80014aa:	601a      	str	r2, [r3, #0]
		}
		if (hourNum < 0){
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <calculationClock+0x258>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da02      	bge.n	80014ba <calculationClock+0x192>
			hourNum = 23;
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <calculationClock+0x258>)
 80014b6:	2217      	movs	r2, #23
 80014b8:	601a      	str	r2, [r3, #0]
		}
		if (dayIndex < 0){
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <calculationClock+0x25c>)
 80014bc:	f993 3000 	ldrsb.w	r3, [r3]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da02      	bge.n	80014ca <calculationClock+0x1a2>
			dayIndex = 6;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <calculationClock+0x25c>)
 80014c6:	2206      	movs	r2, #6
 80014c8:	701a      	strb	r2, [r3, #0]
		}
		if (date < 1){
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <calculationClock+0x260>)
 80014cc:	f993 3000 	ldrsb.w	r3, [r3]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dc33      	bgt.n	800153c <calculationClock+0x214>
			if (year % 4 == 0){ //check for FEB 29 days
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <calculationClock+0x264>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d115      	bne.n	8001512 <calculationClock+0x1ea>
				if(monthIndex == 1){
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <calculationClock+0x268>)
 80014e8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d103      	bne.n	80014f8 <calculationClock+0x1d0>
					setDayX(29); // 29 days
 80014f0:	201d      	movs	r0, #29
 80014f2:	f7ff ff07 	bl	8001304 <setDayX>
 80014f6:	e021      	b.n	800153c <calculationClock+0x214>
				}else if(check31Days() == true){
 80014f8:	f7ff feaa 	bl	8001250 <check31Days>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <calculationClock+0x1e2>
					setDayX(31); // 31 days
 8001502:	201f      	movs	r0, #31
 8001504:	f7ff fefe 	bl	8001304 <setDayX>
 8001508:	e018      	b.n	800153c <calculationClock+0x214>
				}else{
					setDayX(30); // 30 days
 800150a:	201e      	movs	r0, #30
 800150c:	f7ff fefa 	bl	8001304 <setDayX>
 8001510:	e014      	b.n	800153c <calculationClock+0x214>
				}
			}else{
				if(monthIndex == 1){
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <calculationClock+0x268>)
 8001514:	f993 3000 	ldrsb.w	r3, [r3]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d103      	bne.n	8001524 <calculationClock+0x1fc>
					setDayX(28); // 28 days
 800151c:	201c      	movs	r0, #28
 800151e:	f7ff fef1 	bl	8001304 <setDayX>
 8001522:	e00b      	b.n	800153c <calculationClock+0x214>
				}else if(check31Days() == true){
 8001524:	f7ff fe94 	bl	8001250 <check31Days>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <calculationClock+0x20e>
					setDayX(31); // 31 days
 800152e:	201f      	movs	r0, #31
 8001530:	f7ff fee8 	bl	8001304 <setDayX>
 8001534:	e002      	b.n	800153c <calculationClock+0x214>
				}else{
					setDayX(30); // 30 days
 8001536:	201e      	movs	r0, #30
 8001538:	f7ff fee4 	bl	8001304 <setDayX>
				}
			}
		}
		if (monthIndex < 0){
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <calculationClock+0x268>)
 800153e:	f993 3000 	ldrsb.w	r3, [r3]
 8001542:	2b00      	cmp	r3, #0
 8001544:	da02      	bge.n	800154c <calculationClock+0x224>
			monthIndex = 11;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <calculationClock+0x268>)
 8001548:	220b      	movs	r2, #11
 800154a:	701a      	strb	r2, [r3, #0]
		}
		if (year < 1){
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <calculationClock+0x264>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dc03      	bgt.n	800155e <calculationClock+0x236>
			year = 9999;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <calculationClock+0x264>)
 8001558:	f242 720f 	movw	r2, #9999	; 0x270f
 800155c:	801a      	strh	r2, [r3, #0]
		}
	}

	saveData();
 800155e:	f7ff fd51 	bl	8001004 <saveData>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002b0 	.word	0x200002b0
 8001570:	20000294 	.word	0x20000294
 8001574:	20000014 	.word	0x20000014
 8001578:	2000029c 	.word	0x2000029c
 800157c:	20000018 	.word	0x20000018
 8001580:	2000001c 	.word	0x2000001c
 8001584:	2000008c 	.word	0x2000008c
 8001588:	2000003c 	.word	0x2000003c
 800158c:	2000008e 	.word	0x2000008e
 8001590:	2000008d 	.word	0x2000008d
 8001594:	00000000 	.word	0x00000000

08001598 <dayScreen>:
//	}
//}


//Date Clock Atomic
void dayScreen(bool status, bool isEdit){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af02      	add	r7, sp, #8
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	4613      	mov	r3, r2
 80015a6:	71bb      	strb	r3, [r7, #6]

	if (prevDayIndex != dayIndex || isEdit == true){
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <dayScreen+0x128>)
 80015aa:	f993 2000 	ldrsb.w	r2, [r3]
 80015ae:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <dayScreen+0x12c>)
 80015b0:	f993 3000 	ldrsb.w	r3, [r3]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d102      	bne.n	80015be <dayScreen+0x26>
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d072      	beq.n	80016a4 <dayScreen+0x10c>
		if (status == true){
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d039      	beq.n	8001638 <dayScreen+0xa0>
			sprintf(Temp_Buffer_text, "%s", dayText[dayIndex]);
 80015c4:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <dayScreen+0x12c>)
 80015c6:	f993 3000 	ldrsb.w	r3, [r3]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <dayScreen+0x130>)
 80015ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d2:	461a      	mov	r2, r3
 80015d4:	493d      	ldr	r1, [pc, #244]	; (80016cc <dayScreen+0x134>)
 80015d6:	483e      	ldr	r0, [pc, #248]	; (80016d0 <dayScreen+0x138>)
 80015d8:	f008 f82c 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <dayScreen+0x13c>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015e8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80016b0 <dayScreen+0x118>
 80015ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015f0:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80016b8 <dayScreen+0x120>
 80015f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015fc:	edc7 7a00 	vstr	s15, [r7]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2d9      	uxtb	r1, r3
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <dayScreen+0x140>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001610:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80016b0 <dayScreen+0x118>
 8001614:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001618:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800161c:	edc7 7a00 	vstr	s15, [r7]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	2302      	movs	r3, #2
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001630:	4827      	ldr	r0, [pc, #156]	; (80016d0 <dayScreen+0x138>)
 8001632:	f002 f987 	bl	8003944 <ILI9341_Draw_Text>
 8001636:	e030      	b.n	800169a <dayScreen+0x102>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001638:	4928      	ldr	r1, [pc, #160]	; (80016dc <dayScreen+0x144>)
 800163a:	4825      	ldr	r0, [pc, #148]	; (80016d0 <dayScreen+0x138>)
 800163c:	f007 fffa 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <dayScreen+0x13c>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800164c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80016b0 <dayScreen+0x118>
 8001650:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001654:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80016b8 <dayScreen+0x120>
 8001658:	ee37 7b06 	vadd.f64	d7, d7, d6
 800165c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001660:	edc7 7a00 	vstr	s15, [r7]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2d9      	uxtb	r1, r3
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <dayScreen+0x140>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001674:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80016b0 <dayScreen+0x118>
 8001678:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001680:	edc7 7a00 	vstr	s15, [r7]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2302      	movs	r3, #2
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001694:	480e      	ldr	r0, [pc, #56]	; (80016d0 <dayScreen+0x138>)
 8001696:	f002 f955 	bl	8003944 <ILI9341_Draw_Text>
		}
		prevDayIndex = dayIndex;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <dayScreen+0x12c>)
 800169c:	f993 2000 	ldrsb.w	r2, [r3]
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <dayScreen+0x128>)
 80016a2:	701a      	strb	r2, [r3, #0]
	}
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	9999999a 	.word	0x9999999a
 80016b4:	3fb99999 	.word	0x3fb99999
	...
 80016c0:	20000091 	.word	0x20000091
 80016c4:	2000008c 	.word	0x2000008c
 80016c8:	20000040 	.word	0x20000040
 80016cc:	0800ba2c 	.word	0x0800ba2c
 80016d0:	2000039c 	.word	0x2000039c
 80016d4:	2000002e 	.word	0x2000002e
 80016d8:	20000032 	.word	0x20000032
 80016dc:	0800ba30 	.word	0x0800ba30

080016e0 <dateScreen>:
void dateScreen(bool status, bool isEdit){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71bb      	strb	r3, [r7, #6]
	if (prevDate != date || isEdit == true){
 80016f0:	4b49      	ldr	r3, [pc, #292]	; (8001818 <dateScreen+0x138>)
 80016f2:	f993 2000 	ldrsb.w	r2, [r3]
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <dateScreen+0x13c>)
 80016f8:	f993 3000 	ldrsb.w	r3, [r3]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d102      	bne.n	8001706 <dateScreen+0x26>
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d07e      	beq.n	8001804 <dateScreen+0x124>
		if (status == true){
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d03d      	beq.n	8001788 <dateScreen+0xa8>
			sprintf(Temp_Buffer_text, "%02d", (int)date);
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <dateScreen+0x13c>)
 800170e:	f993 3000 	ldrsb.w	r3, [r3]
 8001712:	461a      	mov	r2, r3
 8001714:	4942      	ldr	r1, [pc, #264]	; (8001820 <dateScreen+0x140>)
 8001716:	4843      	ldr	r0, [pc, #268]	; (8001824 <dateScreen+0x144>)
 8001718:	f007 ff8c 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*1+8, maxHeight * 0.1, WHITE, 2, BLACK);
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <dateScreen+0x148>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001728:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001810 <dateScreen+0x130>
 800172c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001730:	4b3e      	ldr	r3, [pc, #248]	; (800182c <dateScreen+0x14c>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800173c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001740:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8001744:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001748:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800174c:	edc7 7a00 	vstr	s15, [r7]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2d9      	uxtb	r1, r3
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <dateScreen+0x150>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001760:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001810 <dateScreen+0x130>
 8001764:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800176c:	edc7 7a00 	vstr	s15, [r7]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	2300      	movs	r3, #0
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2302      	movs	r3, #2
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001780:	4828      	ldr	r0, [pc, #160]	; (8001824 <dateScreen+0x144>)
 8001782:	f002 f8df 	bl	8003944 <ILI9341_Draw_Text>
 8001786:	e038      	b.n	80017fa <dateScreen+0x11a>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001788:	492a      	ldr	r1, [pc, #168]	; (8001834 <dateScreen+0x154>)
 800178a:	4826      	ldr	r0, [pc, #152]	; (8001824 <dateScreen+0x144>)
 800178c:	f007 ff52 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*1+8, maxHeight * 0.1, WHITE, 2, BLACK);
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <dateScreen+0x148>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800179c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001810 <dateScreen+0x130>
 80017a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <dateScreen+0x14c>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017b4:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80017b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017c0:	edc7 7a00 	vstr	s15, [r7]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2d9      	uxtb	r1, r3
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <dateScreen+0x150>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017d4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001810 <dateScreen+0x130>
 80017d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017e0:	edc7 7a00 	vstr	s15, [r7]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	2300      	movs	r3, #0
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2302      	movs	r3, #2
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <dateScreen+0x144>)
 80017f6:	f002 f8a5 	bl	8003944 <ILI9341_Draw_Text>
		}
		prevDate = date;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <dateScreen+0x13c>)
 80017fc:	f993 2000 	ldrsb.w	r2, [r3]
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <dateScreen+0x138>)
 8001802:	701a      	strb	r2, [r3, #0]
	}
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	f3af 8000 	nop.w
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fb99999 	.word	0x3fb99999
 8001818:	20000090 	.word	0x20000090
 800181c:	2000003c 	.word	0x2000003c
 8001820:	0800ba34 	.word	0x0800ba34
 8001824:	2000039c 	.word	0x2000039c
 8001828:	2000002e 	.word	0x2000002e
 800182c:	20000034 	.word	0x20000034
 8001830:	20000032 	.word	0x20000032
 8001834:	0800ba3c 	.word	0x0800ba3c

08001838 <monthScreen>:
void monthScreen(bool status, bool isEdit){
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af02      	add	r7, sp, #8
 800183e:	4603      	mov	r3, r0
 8001840:	460a      	mov	r2, r1
 8001842:	71fb      	strb	r3, [r7, #7]
 8001844:	4613      	mov	r3, r2
 8001846:	71bb      	strb	r3, [r7, #6]
	if (prevMonthIndex != monthIndex || isEdit == true){
 8001848:	4b47      	ldr	r3, [pc, #284]	; (8001968 <monthScreen+0x130>)
 800184a:	f993 2000 	ldrsb.w	r2, [r3]
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <monthScreen+0x134>)
 8001850:	f993 3000 	ldrsb.w	r3, [r3]
 8001854:	429a      	cmp	r2, r3
 8001856:	d102      	bne.n	800185e <monthScreen+0x26>
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d07c      	beq.n	8001958 <monthScreen+0x120>
		if (status == true){
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d03e      	beq.n	80018e2 <monthScreen+0xaa>
			sprintf(Temp_Buffer_text, "%s", monthText[monthIndex]);
 8001864:	4b41      	ldr	r3, [pc, #260]	; (800196c <monthScreen+0x134>)
 8001866:	f993 3000 	ldrsb.w	r3, [r3]
 800186a:	461a      	mov	r2, r3
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <monthScreen+0x138>)
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	461a      	mov	r2, r3
 8001874:	493f      	ldr	r1, [pc, #252]	; (8001974 <monthScreen+0x13c>)
 8001876:	4840      	ldr	r0, [pc, #256]	; (8001978 <monthScreen+0x140>)
 8001878:	f007 fedc 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*2, maxHeight * 0.1, WHITE, 2, BLACK);
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <monthScreen+0x144>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001888:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001960 <monthScreen+0x128>
 800188c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001890:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <monthScreen+0x148>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800189e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018a6:	edc7 7a00 	vstr	s15, [r7]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <monthScreen+0x14c>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018ba:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001960 <monthScreen+0x128>
 80018be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018c6:	edc7 7a00 	vstr	s15, [r7]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2302      	movs	r3, #2
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018da:	4827      	ldr	r0, [pc, #156]	; (8001978 <monthScreen+0x140>)
 80018dc:	f002 f832 	bl	8003944 <ILI9341_Draw_Text>
 80018e0:	e035      	b.n	800194e <monthScreen+0x116>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 80018e2:	4929      	ldr	r1, [pc, #164]	; (8001988 <monthScreen+0x150>)
 80018e4:	4824      	ldr	r0, [pc, #144]	; (8001978 <monthScreen+0x140>)
 80018e6:	f007 fea5 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*2, maxHeight * 0.1, WHITE, 2, BLACK);
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <monthScreen+0x144>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001960 <monthScreen+0x128>
 80018fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <monthScreen+0x148>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800190c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001910:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001914:	edc7 7a00 	vstr	s15, [r7]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2d9      	uxtb	r1, r3
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <monthScreen+0x14c>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001928:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001960 <monthScreen+0x128>
 800192c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001930:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001934:	edc7 7a00 	vstr	s15, [r7]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <monthScreen+0x140>)
 800194a:	f001 fffb 	bl	8003944 <ILI9341_Draw_Text>
		}
		prevMonthIndex = monthIndex;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <monthScreen+0x134>)
 8001950:	f993 2000 	ldrsb.w	r2, [r3]
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <monthScreen+0x130>)
 8001956:	701a      	strb	r2, [r3, #0]
	}
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	9999999a 	.word	0x9999999a
 8001964:	3fb99999 	.word	0x3fb99999
 8001968:	20000092 	.word	0x20000092
 800196c:	2000008d 	.word	0x2000008d
 8001970:	2000005c 	.word	0x2000005c
 8001974:	0800ba2c 	.word	0x0800ba2c
 8001978:	2000039c 	.word	0x2000039c
 800197c:	2000002e 	.word	0x2000002e
 8001980:	20000034 	.word	0x20000034
 8001984:	20000032 	.word	0x20000032
 8001988:	0800ba30 	.word	0x0800ba30
 800198c:	00000000 	.word	0x00000000

08001990 <yearScreen>:
void yearScreen(bool status, bool isEdit){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
 8001996:	4603      	mov	r3, r0
 8001998:	460a      	mov	r2, r1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	4613      	mov	r3, r2
 800199e:	71bb      	strb	r3, [r7, #6]
	if (prevYear != year || isEdit == true){
 80019a0:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <yearScreen+0x148>)
 80019a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <yearScreen+0x14c>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d103      	bne.n	80019b8 <yearScreen+0x28>
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8087 	beq.w	8001ac6 <yearScreen+0x136>
		if (status == true){
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d041      	beq.n	8001a42 <yearScreen+0xb2>
			sprintf(Temp_Buffer_text, "%04d", (int)year);
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <yearScreen+0x14c>)
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4946      	ldr	r1, [pc, #280]	; (8001ae0 <yearScreen+0x150>)
 80019c8:	4846      	ldr	r0, [pc, #280]	; (8001ae4 <yearScreen+0x154>)
 80019ca:	f007 fe33 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*3+8, maxHeight * 0.1, WHITE, 2, BLACK);
 80019ce:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <yearScreen+0x158>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019da:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001ad0 <yearScreen+0x140>
 80019de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019e2:	4b42      	ldr	r3, [pc, #264]	; (8001aec <yearScreen+0x15c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019fa:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80019fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a06:	edc7 7a00 	vstr	s15, [r7]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2d9      	uxtb	r1, r3
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <yearScreen+0x160>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a1a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001ad0 <yearScreen+0x140>
 8001a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a26:	edc7 7a00 	vstr	s15, [r7]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	2302      	movs	r3, #2
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3a:	482a      	ldr	r0, [pc, #168]	; (8001ae4 <yearScreen+0x154>)
 8001a3c:	f001 ff82 	bl	8003944 <ILI9341_Draw_Text>
 8001a40:	e03c      	b.n	8001abc <yearScreen+0x12c>
		}
		else{
			sprintf(Temp_Buffer_text, "    ");
 8001a42:	492c      	ldr	r1, [pc, #176]	; (8001af4 <yearScreen+0x164>)
 8001a44:	4827      	ldr	r0, [pc, #156]	; (8001ae4 <yearScreen+0x154>)
 8001a46:	f007 fdf5 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.1 + offsetWidthDate*3+8, maxHeight * 0.1, WHITE, 2, BLACK);
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <yearScreen+0x158>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a56:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001ad0 <yearScreen+0x140>
 8001a5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <yearScreen+0x15c>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a76:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8001a7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a82:	edc7 7a00 	vstr	s15, [r7]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2d9      	uxtb	r1, r3
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <yearScreen+0x160>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a96:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001ad0 <yearScreen+0x140>
 8001a9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001aa2:	edc7 7a00 	vstr	s15, [r7]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab6:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <yearScreen+0x154>)
 8001ab8:	f001 ff44 	bl	8003944 <ILI9341_Draw_Text>
		}
		prevYear = year;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <yearScreen+0x14c>)
 8001abe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <yearScreen+0x148>)
 8001ac4:	801a      	strh	r2, [r3, #0]
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	9999999a 	.word	0x9999999a
 8001ad4:	3fb99999 	.word	0x3fb99999
 8001ad8:	20000094 	.word	0x20000094
 8001adc:	2000008e 	.word	0x2000008e
 8001ae0:	0800ba40 	.word	0x0800ba40
 8001ae4:	2000039c 	.word	0x2000039c
 8001ae8:	2000002e 	.word	0x2000002e
 8001aec:	20000034 	.word	0x20000034
 8001af0:	20000032 	.word	0x20000032
 8001af4:	0800ba48 	.word	0x0800ba48

08001af8 <displayDateScreen>:

//Display Date Clock Screen
void displayDateScreen(){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8001afc:	2100      	movs	r1, #0
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fd4a 	bl	8001598 <dayScreen>
	dateScreen(true, false);
 8001b04:	2100      	movs	r1, #0
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff fdea 	bl	80016e0 <dateScreen>
	monthScreen(true, false);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff fe92 	bl	8001838 <monthScreen>
	yearScreen(true, false);
 8001b14:	2100      	movs	r1, #0
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff ff3a 	bl	8001990 <yearScreen>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <topBarScreen>:

//Top Screen
void topBarScreen(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8

	displayDateScreen();
 8001b26:	f7ff ffe7 	bl	8001af8 <displayDateScreen>

	sprintf(Temp_Buffer_text, "ON");
 8001b2a:	4923      	ldr	r1, [pc, #140]	; (8001bb8 <topBarScreen+0x98>)
 8001b2c:	4823      	ldr	r0, [pc, #140]	; (8001bbc <topBarScreen+0x9c>)
 8001b2e:	f007 fd81 	bl	8009634 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.9 + offsetWidth - 5, maxHeight * 0.1, BLACK, 2, RED);
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <topBarScreen+0xa0>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b3e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001ba8 <topBarScreen+0x88>
 8001b42:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <topBarScreen+0xa4>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b56:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8001b5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b62:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b66:	793b      	ldrb	r3, [r7, #4]
 8001b68:	b2d9      	uxtb	r1, r3
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <topBarScreen+0xa8>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b76:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001bb0 <topBarScreen+0x90>
 8001b7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b82:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b86:	793b      	ldrb	r3, [r7, #4]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	2302      	movs	r3, #2
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	4809      	ldr	r0, [pc, #36]	; (8001bbc <topBarScreen+0x9c>)
 8001b98:	f001 fed4 	bl	8003944 <ILI9341_Draw_Text>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	cccccccd 	.word	0xcccccccd
 8001bac:	3feccccc 	.word	0x3feccccc
 8001bb0:	9999999a 	.word	0x9999999a
 8001bb4:	3fb99999 	.word	0x3fb99999
 8001bb8:	0800ba50 	.word	0x0800ba50
 8001bbc:	2000039c 	.word	0x2000039c
 8001bc0:	2000002e 	.word	0x2000002e
 8001bc4:	20000030 	.word	0x20000030
 8001bc8:	20000032 	.word	0x20000032

08001bcc <resetPrevNum>:

//Reset Prev Values
void resetPrevNum(){
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <resetPrevNum+0x40>)
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <resetPrevNum+0x44>)
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <resetPrevNum+0x48>)
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295
 8001be6:	601a      	str	r2, [r3, #0]

	prevDayIndex = -1;
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <resetPrevNum+0x4c>)
 8001bea:	22ff      	movs	r2, #255	; 0xff
 8001bec:	701a      	strb	r2, [r3, #0]
	prevDate = -1;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <resetPrevNum+0x50>)
 8001bf0:	22ff      	movs	r2, #255	; 0xff
 8001bf2:	701a      	strb	r2, [r3, #0]
	prevMonthIndex = -1;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <resetPrevNum+0x54>)
 8001bf6:	22ff      	movs	r2, #255	; 0xff
 8001bf8:	701a      	strb	r2, [r3, #0]
	prevYear = -1;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <resetPrevNum+0x58>)
 8001bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c00:	801a      	strh	r2, [r3, #0]

}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000020 	.word	0x20000020
 8001c10:	20000024 	.word	0x20000024
 8001c14:	20000028 	.word	0x20000028
 8001c18:	20000091 	.word	0x20000091
 8001c1c:	20000090 	.word	0x20000090
 8001c20:	20000092 	.word	0x20000092
 8001c24:	20000094 	.word	0x20000094

08001c28 <hourScreen>:

//Clock Screen Atomic
void hourScreen(bool status, bool isEdit){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
	if (prevHourNum != hourNum || isEdit == true){
 8001c38:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <hourScreen+0xd0>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <hourScreen+0xd4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d102      	bne.n	8001c4a <hourScreen+0x22>
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d04e      	beq.n	8001ce8 <hourScreen+0xc0>
		if (status == true){
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d025      	beq.n	8001c9c <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <hourScreen+0xd4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	492a      	ldr	r1, [pc, #168]	; (8001d00 <hourScreen+0xd8>)
 8001c58:	482a      	ldr	r0, [pc, #168]	; (8001d04 <hourScreen+0xdc>)
 8001c5a:	f007 fceb 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <hourScreen+0xe0>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3b05      	subs	r3, #5
 8001c66:	b2d9      	uxtb	r1, r3
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <hourScreen+0xe4>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c74:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001cf0 <hourScreen+0xc8>
 8001c78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c80:	edc7 7a00 	vstr	s15, [r7]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2306      	movs	r3, #6
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c94:	481b      	ldr	r0, [pc, #108]	; (8001d04 <hourScreen+0xdc>)
 8001c96:	f001 fe55 	bl	8003944 <ILI9341_Draw_Text>
 8001c9a:	e021      	b.n	8001ce0 <hourScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001c9c:	491c      	ldr	r1, [pc, #112]	; (8001d10 <hourScreen+0xe8>)
 8001c9e:	4819      	ldr	r0, [pc, #100]	; (8001d04 <hourScreen+0xdc>)
 8001ca0:	f007 fcc8 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <hourScreen+0xe0>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3b05      	subs	r3, #5
 8001cac:	b2d9      	uxtb	r1, r3
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <hourScreen+0xe4>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cba:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001cf0 <hourScreen+0xc8>
 8001cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cc6:	edc7 7a00 	vstr	s15, [r7]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cda:	480a      	ldr	r0, [pc, #40]	; (8001d04 <hourScreen+0xdc>)
 8001cdc:	f001 fe32 	bl	8003944 <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <hourScreen+0xd4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <hourScreen+0xd0>)
 8001ce6:	6013      	str	r3, [r2, #0]
	}
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	33333333 	.word	0x33333333
 8001cf4:	3fd33333 	.word	0x3fd33333
 8001cf8:	20000028 	.word	0x20000028
 8001cfc:	2000001c 	.word	0x2000001c
 8001d00:	0800ba34 	.word	0x0800ba34
 8001d04:	2000039c 	.word	0x2000039c
 8001d08:	20000030 	.word	0x20000030
 8001d0c:	20000032 	.word	0x20000032
 8001d10:	0800ba3c 	.word	0x0800ba3c
 8001d14:	00000000 	.word	0x00000000

08001d18 <colonScreen>:

void colonScreen(bool status){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
	if (status == true){
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d022      	beq.n	8001d6e <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8001d28:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <colonScreen+0xb0>)
 8001d2a:	4828      	ldr	r0, [pc, #160]	; (8001dcc <colonScreen+0xb4>)
 8001d2c:	f007 fc82 	bl	8009634 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 75, maxHeight * 0.35, WHITE, 4, BLACK);
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <colonScreen+0xb8>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	334b      	adds	r3, #75	; 0x4b
 8001d38:	b2d9      	uxtb	r1, r3
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <colonScreen+0xbc>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d46:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001dc0 <colonScreen+0xa8>
 8001d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d52:	edc7 7a00 	vstr	s15, [r7]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	2304      	movs	r3, #4
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <colonScreen+0xb4>)
 8001d68:	f001 fdec 	bl	8003944 <ILI9341_Draw_Text>
	}
	else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 75, maxHeight * 0.35, WHITE, 4, BLACK);
	}
}
 8001d6c:	e021      	b.n	8001db2 <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 8001d6e:	491a      	ldr	r1, [pc, #104]	; (8001dd8 <colonScreen+0xc0>)
 8001d70:	4816      	ldr	r0, [pc, #88]	; (8001dcc <colonScreen+0xb4>)
 8001d72:	f007 fc5f 	bl	8009634 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 75, maxHeight * 0.35, WHITE, 4, BLACK);
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <colonScreen+0xb8>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	334b      	adds	r3, #75	; 0x4b
 8001d7e:	b2d9      	uxtb	r1, r3
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <colonScreen+0xbc>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d8c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001dc0 <colonScreen+0xa8>
 8001d90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d98:	edc7 7a00 	vstr	s15, [r7]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2304      	movs	r3, #4
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <colonScreen+0xb4>)
 8001dae:	f001 fdc9 	bl	8003944 <ILI9341_Draw_Text>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	66666666 	.word	0x66666666
 8001dc4:	3fd66666 	.word	0x3fd66666
 8001dc8:	0800ba54 	.word	0x0800ba54
 8001dcc:	2000039c 	.word	0x2000039c
 8001dd0:	20000030 	.word	0x20000030
 8001dd4:	20000032 	.word	0x20000032
 8001dd8:	0800ba58 	.word	0x0800ba58
 8001ddc:	00000000 	.word	0x00000000

08001de0 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	4603      	mov	r3, r0
 8001de8:	460a      	mov	r2, r1
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	4613      	mov	r3, r2
 8001dee:	71bb      	strb	r3, [r7, #6]
	if (prevMinuteNum != minuteNum || isEdit == true){
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <minuteScreen+0xd0>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <minuteScreen+0xd4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d102      	bne.n	8001e02 <minuteScreen+0x22>
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d04e      	beq.n	8001ea0 <minuteScreen+0xc0>
		if (status == true){
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d025      	beq.n	8001e54 <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <minuteScreen+0xd4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	492a      	ldr	r1, [pc, #168]	; (8001eb8 <minuteScreen+0xd8>)
 8001e10:	482a      	ldr	r0, [pc, #168]	; (8001ebc <minuteScreen+0xdc>)
 8001e12:	f007 fc0f 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 100, maxHeight * 0.3, WHITE, 6, BLACK);
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <minuteScreen+0xe0>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	3364      	adds	r3, #100	; 0x64
 8001e1e:	b2d9      	uxtb	r1, r3
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <minuteScreen+0xe4>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e2c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001ea8 <minuteScreen+0xc8>
 8001e30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e38:	edc7 7a00 	vstr	s15, [r7]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2306      	movs	r3, #6
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4c:	481b      	ldr	r0, [pc, #108]	; (8001ebc <minuteScreen+0xdc>)
 8001e4e:	f001 fd79 	bl	8003944 <ILI9341_Draw_Text>
 8001e52:	e021      	b.n	8001e98 <minuteScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001e54:	491c      	ldr	r1, [pc, #112]	; (8001ec8 <minuteScreen+0xe8>)
 8001e56:	4819      	ldr	r0, [pc, #100]	; (8001ebc <minuteScreen+0xdc>)
 8001e58:	f007 fbec 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 100, maxHeight * 0.3, WHITE, 6, BLACK);
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <minuteScreen+0xe0>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3364      	adds	r3, #100	; 0x64
 8001e64:	b2d9      	uxtb	r1, r3
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <minuteScreen+0xe4>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e72:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001ea8 <minuteScreen+0xc8>
 8001e76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e7e:	edc7 7a00 	vstr	s15, [r7]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	2300      	movs	r3, #0
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <minuteScreen+0xdc>)
 8001e94:	f001 fd56 	bl	8003944 <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <minuteScreen+0xd4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <minuteScreen+0xd0>)
 8001e9e:	6013      	str	r3, [r2, #0]
	}
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	33333333 	.word	0x33333333
 8001eac:	3fd33333 	.word	0x3fd33333
 8001eb0:	20000024 	.word	0x20000024
 8001eb4:	20000018 	.word	0x20000018
 8001eb8:	0800ba34 	.word	0x0800ba34
 8001ebc:	2000039c 	.word	0x2000039c
 8001ec0:	20000030 	.word	0x20000030
 8001ec4:	20000032 	.word	0x20000032
 8001ec8:	0800ba3c 	.word	0x0800ba3c
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
	if (prevSecondNum != secondNum || isEdit == true){
 8001ee0:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <secondScreen+0x128>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <secondScreen+0x12c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d102      	bne.n	8001ef2 <secondScreen+0x22>
 8001eec:	79bb      	ldrb	r3, [r7, #6]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d074      	beq.n	8001fdc <secondScreen+0x10c>
		if (status == true){
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d038      	beq.n	8001f6a <secondScreen+0x9a>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <secondScreen+0x12c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4940      	ldr	r1, [pc, #256]	; (8002000 <secondScreen+0x130>)
 8001f00:	4840      	ldr	r0, [pc, #256]	; (8002004 <secondScreen+0x134>)
 8001f02:	f007 fb97 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth, maxHeight * 0.42, WHITE, 2, BLACK);
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <secondScreen+0x138>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f12:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001fe8 <secondScreen+0x118>
 8001f16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f1a:	4b3c      	ldr	r3, [pc, #240]	; (800200c <secondScreen+0x13c>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f2e:	edc7 7a00 	vstr	s15, [r7]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2d9      	uxtb	r1, r3
 8001f36:	4b36      	ldr	r3, [pc, #216]	; (8002010 <secondScreen+0x140>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f42:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001ff0 <secondScreen+0x120>
 8001f46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f4e:	edc7 7a00 	vstr	s15, [r7]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f62:	4828      	ldr	r0, [pc, #160]	; (8002004 <secondScreen+0x134>)
 8001f64:	f001 fcee 	bl	8003944 <ILI9341_Draw_Text>
 8001f68:	e034      	b.n	8001fd4 <secondScreen+0x104>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001f6a:	492a      	ldr	r1, [pc, #168]	; (8002014 <secondScreen+0x144>)
 8001f6c:	4825      	ldr	r0, [pc, #148]	; (8002004 <secondScreen+0x134>)
 8001f6e:	f007 fb61 	bl	8009634 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth, maxHeight * 0.42, WHITE, 2, BLACK);
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <secondScreen+0x138>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f7e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001fe8 <secondScreen+0x118>
 8001f82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <secondScreen+0x13c>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f9a:	edc7 7a00 	vstr	s15, [r7]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2d9      	uxtb	r1, r3
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <secondScreen+0x140>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fae:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001ff0 <secondScreen+0x120>
 8001fb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fba:	edc7 7a00 	vstr	s15, [r7]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <secondScreen+0x134>)
 8001fd0:	f001 fcb8 	bl	8003944 <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <secondScreen+0x12c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <secondScreen+0x128>)
 8001fda:	6013      	str	r3, [r2, #0]
	}
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	cccccccd 	.word	0xcccccccd
 8001fec:	3feccccc 	.word	0x3feccccc
 8001ff0:	ae147ae1 	.word	0xae147ae1
 8001ff4:	3fdae147 	.word	0x3fdae147
 8001ff8:	20000020 	.word	0x20000020
 8001ffc:	20000014 	.word	0x20000014
 8002000:	0800ba34 	.word	0x0800ba34
 8002004:	2000039c 	.word	0x2000039c
 8002008:	2000002e 	.word	0x2000002e
 800200c:	20000030 	.word	0x20000030
 8002010:	20000032 	.word	0x20000032
 8002014:	0800ba3c 	.word	0x0800ba3c

08002018 <displayClockScreen>:

//Display Clock Screen
void displayClockScreen(){
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

	if (halfsecondState == false){ // colon behaviour
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <displayClockScreen+0x3c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f083 0301 	eor.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <displayClockScreen+0x1a>
		colonScreen(true);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff fe74 	bl	8001d18 <colonScreen>
 8002030:	e002      	b.n	8002038 <displayClockScreen+0x20>
	}
	else{
		colonScreen(false);
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff fe70 	bl	8001d18 <colonScreen>
	}

	secondScreen(true, false);
 8002038:	2100      	movs	r1, #0
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff ff48 	bl	8001ed0 <secondScreen>
	minuteScreen(true, false);
 8002040:	2100      	movs	r1, #0
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff fecc 	bl	8001de0 <minuteScreen>
	hourScreen(true, false);
 8002048:	2100      	movs	r1, #0
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff fdec 	bl	8001c28 <hourScreen>
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000002c 	.word	0x2000002c

08002058 <staticClockScreen>:

void staticClockScreen(){
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	colonScreen(true);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff fe5b 	bl	8001d18 <colonScreen>
	hourScreen(true, false);
 8002062:	2100      	movs	r1, #0
 8002064:	2001      	movs	r0, #1
 8002066:	f7ff fddf 	bl	8001c28 <hourScreen>
	minuteScreen(true, false);
 800206a:	2100      	movs	r1, #0
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff feb7 	bl	8001de0 <minuteScreen>
	secondScreen(true, false);
 8002072:	2100      	movs	r1, #0
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff ff2b 	bl	8001ed0 <secondScreen>
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <editHourScreen>:

//Edit Clock Screen
void editHourScreen()
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	displayDateScreen(); // Init first
 8002084:	f7ff fd38 	bl	8001af8 <displayDateScreen>
	colonScreen(true);
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff fe45 	bl	8001d18 <colonScreen>
	minuteScreen(true, false);
 800208e:	2100      	movs	r1, #0
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff fea5 	bl	8001de0 <minuteScreen>
	secondScreen(true, false);
 8002096:	2100      	movs	r1, #0
 8002098:	2001      	movs	r0, #1
 800209a:	f7ff ff19 	bl	8001ed0 <secondScreen>

	if (halfsecondState == false){ // hour
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <editHourScreen+0x44>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <editHourScreen+0x36>
		hourScreen(false, true);
 80020ac:	2101      	movs	r1, #1
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff fdba 	bl	8001c28 <hourScreen>
	}
	else{
		hourScreen(true, true);
	}
}
 80020b4:	e003      	b.n	80020be <editHourScreen+0x3e>
		hourScreen(true, true);
 80020b6:	2101      	movs	r1, #1
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff fdb5 	bl	8001c28 <hourScreen>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000002c 	.word	0x2000002c

080020c8 <editMinuteScreen>:
void editMinuteScreen(){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

	colonScreen(true);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff fe23 	bl	8001d18 <colonScreen>
	hourScreen(true, false);
 80020d2:	2100      	movs	r1, #0
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff fda7 	bl	8001c28 <hourScreen>
	secondScreen(true, false);
 80020da:	2100      	movs	r1, #0
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff fef7 	bl	8001ed0 <secondScreen>

	if (halfsecondState == false){ //minute
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <editMinuteScreen+0x40>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <editMinuteScreen+0x32>
		minuteScreen(false, true);
 80020f0:	2101      	movs	r1, #1
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff fe74 	bl	8001de0 <minuteScreen>
	}
	else{
		minuteScreen(true, true);
	}
}
 80020f8:	e003      	b.n	8002102 <editMinuteScreen+0x3a>
		minuteScreen(true, true);
 80020fa:	2101      	movs	r1, #1
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff fe6f 	bl	8001de0 <minuteScreen>
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000002c 	.word	0x2000002c

0800210c <editSecondScreen>:
void editSecondScreen(){
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002110:	2001      	movs	r0, #1
 8002112:	f7ff fe01 	bl	8001d18 <colonScreen>
	hourScreen(true, false);
 8002116:	2100      	movs	r1, #0
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff fd85 	bl	8001c28 <hourScreen>
	minuteScreen(true, false);
 800211e:	2100      	movs	r1, #0
 8002120:	2001      	movs	r0, #1
 8002122:	f7ff fe5d 	bl	8001de0 <minuteScreen>

	if (halfsecondState == false){ //second
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <editSecondScreen+0x40>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <editSecondScreen+0x32>
		secondScreen(false, true);
 8002134:	2101      	movs	r1, #1
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff feca 	bl	8001ed0 <secondScreen>
	}
	else{
		secondScreen(true, true);
	}
}
 800213c:	e003      	b.n	8002146 <editSecondScreen+0x3a>
		secondScreen(true, true);
 800213e:	2101      	movs	r1, #1
 8002140:	2001      	movs	r0, #1
 8002142:	f7ff fec5 	bl	8001ed0 <secondScreen>
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000002c 	.word	0x2000002c

08002150 <editDayScreen>:

//Edit Date Clock Screen
void editDayScreen()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	dateScreen(true, false);
 8002154:	2100      	movs	r1, #0
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff fac2 	bl	80016e0 <dateScreen>
	monthScreen(true, false);
 800215c:	2100      	movs	r1, #0
 800215e:	2001      	movs	r0, #1
 8002160:	f7ff fb6a 	bl	8001838 <monthScreen>
	yearScreen(true, false);
 8002164:	2100      	movs	r1, #0
 8002166:	2001      	movs	r0, #1
 8002168:	f7ff fc12 	bl	8001990 <yearScreen>

	if (halfsecondState == false){ // day
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <editDayScreen+0x40>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f083 0301 	eor.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <editDayScreen+0x34>
		dayScreen(false, true);
 800217a:	2101      	movs	r1, #1
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff fa0b 	bl	8001598 <dayScreen>
	}
	else{
		dayScreen(true, true);
	}
}
 8002182:	e003      	b.n	800218c <editDayScreen+0x3c>
		dayScreen(true, true);
 8002184:	2101      	movs	r1, #1
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff fa06 	bl	8001598 <dayScreen>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000002c 	.word	0x2000002c

08002194 <editDateScreen>:
void editDateScreen()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8002198:	2100      	movs	r1, #0
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff f9fc 	bl	8001598 <dayScreen>
	monthScreen(true, false);
 80021a0:	2100      	movs	r1, #0
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fb48 	bl	8001838 <monthScreen>
	yearScreen(true, false);
 80021a8:	2100      	movs	r1, #0
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fbf0 	bl	8001990 <yearScreen>

	if (halfsecondState == false){ // date
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <editDateScreen+0x40>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <editDateScreen+0x34>
		dateScreen(false, true);
 80021be:	2101      	movs	r1, #1
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff fa8d 	bl	80016e0 <dateScreen>
	}
	else{
		dateScreen(true, true);
	}
}
 80021c6:	e003      	b.n	80021d0 <editDateScreen+0x3c>
		dateScreen(true, true);
 80021c8:	2101      	movs	r1, #1
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7ff fa88 	bl	80016e0 <dateScreen>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000002c 	.word	0x2000002c

080021d8 <editMonthScreen>:
void editMonthScreen()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 80021dc:	2100      	movs	r1, #0
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff f9da 	bl	8001598 <dayScreen>
	dateScreen(true, false);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2001      	movs	r0, #1
 80021e8:	f7ff fa7a 	bl	80016e0 <dateScreen>
	yearScreen(true, false);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fbce 	bl	8001990 <yearScreen>

	if (halfsecondState == false){ // month
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <editMonthScreen+0x40>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <editMonthScreen+0x34>
		monthScreen(false, true);
 8002202:	2101      	movs	r1, #1
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fb17 	bl	8001838 <monthScreen>
	}
	else{
		monthScreen(true, true);
	}
}
 800220a:	e003      	b.n	8002214 <editMonthScreen+0x3c>
		monthScreen(true, true);
 800220c:	2101      	movs	r1, #1
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff fb12 	bl	8001838 <monthScreen>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000002c 	.word	0x2000002c

0800221c <editYearScreen>:
void editYearScreen()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	staticClockScreen(); // init Clock first in editing mode
 8002220:	f7ff ff1a 	bl	8002058 <staticClockScreen>
	dayScreen(true, false);
 8002224:	2100      	movs	r1, #0
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff f9b6 	bl	8001598 <dayScreen>
	dateScreen(true, false);
 800222c:	2100      	movs	r1, #0
 800222e:	2001      	movs	r0, #1
 8002230:	f7ff fa56 	bl	80016e0 <dateScreen>
	monthScreen(true, false);
 8002234:	2100      	movs	r1, #0
 8002236:	2001      	movs	r0, #1
 8002238:	f7ff fafe 	bl	8001838 <monthScreen>

	if (halfsecondState == false){ // day
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <editYearScreen+0x44>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <editYearScreen+0x38>
		yearScreen(false, true);
 800224a:	2101      	movs	r1, #1
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff fb9f 	bl	8001990 <yearScreen>
	}
	else{
		yearScreen(true, true);
	}
}
 8002252:	e003      	b.n	800225c <editYearScreen+0x40>
		yearScreen(true, true);
 8002254:	2101      	movs	r1, #1
 8002256:	2001      	movs	r0, #1
 8002258:	f7ff fb9a 	bl	8001990 <yearScreen>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000002c 	.word	0x2000002c
 8002264:	00000000 	.word	0x00000000

08002268 <bottomBarScreen>:

//Bottom Screen
void bottomBarScreen(){
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b087      	sub	sp, #28
 800226c:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 800226e:	2302      	movs	r3, #2
 8002270:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomHeight = maxHeight * 0.87;
 8002272:	4bb3      	ldr	r3, [pc, #716]	; (8002540 <bottomBarScreen+0x2d8>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800227e:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002528 <bottomBarScreen+0x2c0>
 8002282:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002286:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800228a:	edc7 7a01 	vstr	s15, [r7, #4]
 800228e:	793b      	ldrb	r3, [r7, #4]
 8002290:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 8002292:	2333      	movs	r3, #51	; 0x33
 8002294:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth * 0.25 + 51;
 8002296:	4bab      	ldr	r3, [pc, #684]	; (8002544 <bottomBarScreen+0x2dc>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022a2:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80022a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022aa:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002530 <bottomBarScreen+0x2c8>
 80022ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80022ba:	793b      	ldrb	r3, [r7, #4]
 80022bc:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth * 0.50 + 51;
 80022be:	4ba1      	ldr	r3, [pc, #644]	; (8002544 <bottomBarScreen+0x2dc>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022ca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80022ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022d2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002530 <bottomBarScreen+0x2c8>
 80022d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022de:	edc7 7a01 	vstr	s15, [r7, #4]
 80022e2:	793b      	ldrb	r3, [r7, #4]
 80022e4:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 80022e6:	4b97      	ldr	r3, [pc, #604]	; (8002544 <bottomBarScreen+0x2dc>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022f2:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 80022f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022fa:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002530 <bottomBarScreen+0x2c8>
 80022fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002302:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002306:	edc7 7a01 	vstr	s15, [r7, #4]
 800230a:	793b      	ldrb	r3, [r7, #4]
 800230c:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 800230e:	2337      	movs	r3, #55	; 0x37
 8002310:	727b      	strb	r3, [r7, #9]

	//Rectangle Background Color
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1 + bottomWidth, maxHeight, RED);
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	b298      	uxth	r0, r3
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	b299      	uxth	r1, r3
 800231a:	7b7b      	ldrb	r3, [r7, #13]
 800231c:	b29a      	uxth	r2, r3
 800231e:	7a7b      	ldrb	r3, [r7, #9]
 8002320:	b29b      	uxth	r3, r3
 8002322:	4413      	add	r3, r2
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b86      	ldr	r3, [pc, #536]	; (8002540 <bottomBarScreen+0x2d8>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800232e:	9400      	str	r4, [sp, #0]
 8002330:	f001 fa0d 	bl	800374e <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2 + bottomWidth, maxHeight, YELLOW);
 8002334:	7b3b      	ldrb	r3, [r7, #12]
 8002336:	b298      	uxth	r0, r3
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	b299      	uxth	r1, r3
 800233c:	7b3b      	ldrb	r3, [r7, #12]
 800233e:	b29a      	uxth	r2, r3
 8002340:	7a7b      	ldrb	r3, [r7, #9]
 8002342:	b29b      	uxth	r3, r3
 8002344:	4413      	add	r3, r2
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b7d      	ldr	r3, [pc, #500]	; (8002540 <bottomBarScreen+0x2d8>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8002350:	9400      	str	r4, [sp, #0]
 8002352:	f001 f9fc 	bl	800374e <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3 + bottomWidth, maxHeight, CYAN);
 8002356:	7afb      	ldrb	r3, [r7, #11]
 8002358:	b298      	uxth	r0, r3
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	b299      	uxth	r1, r3
 800235e:	7afb      	ldrb	r3, [r7, #11]
 8002360:	b29a      	uxth	r2, r3
 8002362:	7a7b      	ldrb	r3, [r7, #9]
 8002364:	b29b      	uxth	r3, r3
 8002366:	4413      	add	r3, r2
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b75      	ldr	r3, [pc, #468]	; (8002540 <bottomBarScreen+0x2d8>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8002372:	9400      	str	r4, [sp, #0]
 8002374:	f001 f9eb 	bl	800374e <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4 + bottomWidth, maxHeight, GREEN);
 8002378:	7abb      	ldrb	r3, [r7, #10]
 800237a:	b298      	uxth	r0, r3
 800237c:	7bbb      	ldrb	r3, [r7, #14]
 800237e:	b299      	uxth	r1, r3
 8002380:	7abb      	ldrb	r3, [r7, #10]
 8002382:	b29a      	uxth	r2, r3
 8002384:	7a7b      	ldrb	r3, [r7, #9]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <bottomBarScreen+0x2d8>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8002394:	9400      	str	r4, [sp, #0]
 8002396:	f001 f9da 	bl	800374e <ILI9341_Draw_Filled_Rectangle_Coord>

	//Text Layout
	sprintf(Temp_Buffer_text, "MOD");
 800239a:	496b      	ldr	r1, [pc, #428]	; (8002548 <bottomBarScreen+0x2e0>)
 800239c:	486b      	ldr	r0, [pc, #428]	; (800254c <bottomBarScreen+0x2e4>)
 800239e:	f007 f949 	bl	8009634 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.9, BLACK, size, RED);
 80023a2:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <bottomBarScreen+0x2e8>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	b2d9      	uxtb	r1, r3
 80023a8:	4b65      	ldr	r3, [pc, #404]	; (8002540 <bottomBarScreen+0x2d8>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023b4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002538 <bottomBarScreen+0x2d0>
 80023b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80023c4:	793b      	ldrb	r3, [r7, #4]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80023d0:	9001      	str	r0, [sp, #4]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2300      	movs	r3, #0
 80023d6:	485d      	ldr	r0, [pc, #372]	; (800254c <bottomBarScreen+0x2e4>)
 80023d8:	f001 fab4 	bl	8003944 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "ADJ");
 80023dc:	495d      	ldr	r1, [pc, #372]	; (8002554 <bottomBarScreen+0x2ec>)
 80023de:	485b      	ldr	r0, [pc, #364]	; (800254c <bottomBarScreen+0x2e4>)
 80023e0:	f007 f928 	bl	8009634 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.25 + offsetWidth, maxHeight * 0.9, BLACK, size, YELLOW);
 80023e4:	4b57      	ldr	r3, [pc, #348]	; (8002544 <bottomBarScreen+0x2dc>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023f0:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80023f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <bottomBarScreen+0x2e8>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002404:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800240c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002410:	793b      	ldrb	r3, [r7, #4]
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <bottomBarScreen+0x2d8>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002420:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002538 <bottomBarScreen+0x2d0>
 8002424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800242c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002430:	793b      	ldrb	r3, [r7, #4]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800243c:	9001      	str	r0, [sp, #4]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	4842      	ldr	r0, [pc, #264]	; (800254c <bottomBarScreen+0x2e4>)
 8002444:	f001 fa7e 	bl	8003944 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "FWD");
 8002448:	4943      	ldr	r1, [pc, #268]	; (8002558 <bottomBarScreen+0x2f0>)
 800244a:	4840      	ldr	r0, [pc, #256]	; (800254c <bottomBarScreen+0x2e4>)
 800244c:	f007 f8f2 	bl	8009634 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.5 + offsetWidth, maxHeight * 0.9, BLACK, size, CYAN);
 8002450:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <bottomBarScreen+0x2dc>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800245c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002460:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002464:	4b3a      	ldr	r3, [pc, #232]	; (8002550 <bottomBarScreen+0x2e8>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	ee07 3a90 	vmov	s15, r3
 800246c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002470:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002474:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002478:	edc7 7a01 	vstr	s15, [r7, #4]
 800247c:	793b      	ldrb	r3, [r7, #4]
 800247e:	b2d9      	uxtb	r1, r3
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <bottomBarScreen+0x2d8>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800248c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002538 <bottomBarScreen+0x2d0>
 8002490:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002494:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002498:	edc7 7a01 	vstr	s15, [r7, #4]
 800249c:	793b      	ldrb	r3, [r7, #4]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80024a8:	9001      	str	r0, [sp, #4]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2300      	movs	r3, #0
 80024ae:	4827      	ldr	r0, [pc, #156]	; (800254c <bottomBarScreen+0x2e4>)
 80024b0:	f001 fa48 	bl	8003944 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "BWD");
 80024b4:	4929      	ldr	r1, [pc, #164]	; (800255c <bottomBarScreen+0x2f4>)
 80024b6:	4825      	ldr	r0, [pc, #148]	; (800254c <bottomBarScreen+0x2e4>)
 80024b8:	f007 f8bc 	bl	8009634 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.75 + offsetWidth, maxHeight * 0.9, BLACK, size, GREEN);
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <bottomBarScreen+0x2dc>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024c8:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 80024cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <bottomBarScreen+0x2e8>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80024e8:	793b      	ldrb	r3, [r7, #4]
 80024ea:	b2d9      	uxtb	r1, r3
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <bottomBarScreen+0x2d8>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024f8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002538 <bottomBarScreen+0x2d0>
 80024fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002500:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002504:	edc7 7a01 	vstr	s15, [r7, #4]
 8002508:	793b      	ldrb	r3, [r7, #4]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002514:	9001      	str	r0, [sp, #4]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2300      	movs	r3, #0
 800251a:	480c      	ldr	r0, [pc, #48]	; (800254c <bottomBarScreen+0x2e4>)
 800251c:	f001 fa12 	bl	8003944 <ILI9341_Draw_Text>
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	3d70a3d7 	.word	0x3d70a3d7
 800252c:	3febd70a 	.word	0x3febd70a
 8002530:	00000000 	.word	0x00000000
 8002534:	40498000 	.word	0x40498000
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	3feccccc 	.word	0x3feccccc
 8002540:	20000032 	.word	0x20000032
 8002544:	2000002e 	.word	0x2000002e
 8002548:	0800ba5c 	.word	0x0800ba5c
 800254c:	2000039c 	.word	0x2000039c
 8002550:	20000030 	.word	0x20000030
 8002554:	0800ba60 	.word	0x0800ba60
 8002558:	0800ba64 	.word	0x0800ba64
 800255c:	0800ba68 	.word	0x0800ba68

08002560 <buzzerSound>:

//Buzzer Sound
void buzzerSound(){
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = (1000 - 1) * 0.5;
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <buzzerSound+0x28>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f240 12f3 	movw	r2, #499	; 0x1f3
 800256c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800256e:	2100      	movs	r1, #0
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <buzzerSound+0x28>)
 8002572:	f004 fd61 	bl	8007038 <HAL_TIM_PWM_Start>
	HAL_Delay(70);
 8002576:	2046      	movs	r0, #70	; 0x46
 8002578:	f001 feb2 	bl	80042e0 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800257c:	2100      	movs	r1, #0
 800257e:	4802      	ldr	r0, [pc, #8]	; (8002588 <buzzerSound+0x28>)
 8002580:	f004 fe54 	bl	800722c <HAL_TIM_PWM_Stop>
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000474 	.word	0x20000474

0800258c <assignmentTwo>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void assignmentTwo(){
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0

	calculationClock(millisecond);
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <assignmentTwo+0xf4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fec7 	bl	8001328 <calculationClock>
	checkResetData();
 800259a:	f7fe fe39 	bl	8001210 <checkResetData>

	if (prevMode != mode || prevModeEdit != modeEdit){
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <assignmentTwo+0xf8>)
 80025a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <assignmentTwo+0xfc>)
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d107      	bne.n	80025be <assignmentTwo+0x32>
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <assignmentTwo+0x100>)
 80025b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <assignmentTwo+0x104>)
 80025b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d006      	beq.n	80025cc <assignmentTwo+0x40>
		prevModeEdit = modeEdit;
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <assignmentTwo+0x104>)
 80025c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <assignmentTwo+0x100>)
 80025c6:	801a      	strh	r2, [r3, #0]
		resetPrevNum();
 80025c8:	f7ff fb00 	bl	8001bcc <resetPrevNum>
	}
	if (prevMode != mode){
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <assignmentTwo+0xf8>)
 80025ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <assignmentTwo+0xfc>)
 80025d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d009      	beq.n	80025f0 <assignmentTwo+0x64>
		prevMode = mode;
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <assignmentTwo+0xfc>)
 80025de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <assignmentTwo+0xf8>)
 80025e4:	801a      	strh	r2, [r3, #0]
		setHorizontalScreen(BLACK);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe fe22 	bl	8001230 <setHorizontalScreen>
		bottomBarScreen();
 80025ec:	f7ff fe3c 	bl	8002268 <bottomBarScreen>
	}
	if (mode == 0){
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <assignmentTwo+0xfc>)
 80025f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d104      	bne.n	8002604 <assignmentTwo+0x78>
		topBarScreen();
 80025fa:	f7ff fa91 	bl	8001b20 <topBarScreen>
		displayClockScreen();
 80025fe:	f7ff fd0b 	bl	8002018 <displayClockScreen>
	}

	//Test huart1 UART PB6 TX - PB15 RX
	//	sprintf(Temp_Buffer_text, "AA");
	//	HAL_UART_Transmit(&huart1, (uint8_t*) Temp_Buffer_text, strlen(Temp_Buffer_text), 1000);
}
 8002602:	e03b      	b.n	800267c <assignmentTwo+0xf0>
	else if (mode == 100){ // Adjust modeEdit 1-year, 2-month, 3-date, 4-day, 5-hour, 6-minute, 7-second
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <assignmentTwo+0xfc>)
 8002606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d136      	bne.n	800267c <assignmentTwo+0xf0>
		if(modeEdit == 1){
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <assignmentTwo+0x104>)
 8002610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <assignmentTwo+0x92>
			editYearScreen();
 8002618:	f7ff fe00 	bl	800221c <editYearScreen>
}
 800261c:	e02e      	b.n	800267c <assignmentTwo+0xf0>
		else if (modeEdit == 2){
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <assignmentTwo+0x104>)
 8002620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d102      	bne.n	800262e <assignmentTwo+0xa2>
			editMonthScreen();
 8002628:	f7ff fdd6 	bl	80021d8 <editMonthScreen>
}
 800262c:	e026      	b.n	800267c <assignmentTwo+0xf0>
		else if (modeEdit == 3){
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <assignmentTwo+0x104>)
 8002630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d102      	bne.n	800263e <assignmentTwo+0xb2>
			editDateScreen();
 8002638:	f7ff fdac 	bl	8002194 <editDateScreen>
}
 800263c:	e01e      	b.n	800267c <assignmentTwo+0xf0>
		else if (modeEdit == 4){
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <assignmentTwo+0x104>)
 8002640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d102      	bne.n	800264e <assignmentTwo+0xc2>
			editDayScreen();
 8002648:	f7ff fd82 	bl	8002150 <editDayScreen>
}
 800264c:	e016      	b.n	800267c <assignmentTwo+0xf0>
		else if (modeEdit == 5){
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <assignmentTwo+0x104>)
 8002650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d102      	bne.n	800265e <assignmentTwo+0xd2>
			editHourScreen();
 8002658:	f7ff fd12 	bl	8002080 <editHourScreen>
}
 800265c:	e00e      	b.n	800267c <assignmentTwo+0xf0>
		else if (modeEdit == 6){
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <assignmentTwo+0x104>)
 8002660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d102      	bne.n	800266e <assignmentTwo+0xe2>
			editMinuteScreen();
 8002668:	f7ff fd2e 	bl	80020c8 <editMinuteScreen>
}
 800266c:	e006      	b.n	800267c <assignmentTwo+0xf0>
		else if (modeEdit == 7){
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <assignmentTwo+0x104>)
 8002670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002674:	2b07      	cmp	r3, #7
 8002676:	d101      	bne.n	800267c <assignmentTwo+0xf0>
			editSecondScreen();
 8002678:	f7ff fd48 	bl	800210c <editSecondScreen>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000294 	.word	0x20000294
 8002684:	20000038 	.word	0x20000038
 8002688:	2000029c 	.word	0x2000029c
 800268c:	2000003a 	.word	0x2000003a
 8002690:	20000036 	.word	0x20000036

08002694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800269c:	f7fe fafe 	bl	8000c9c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80026a0:	f7fe fb22 	bl	8000ce8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026a4:	f001 fdb0 	bl	8004208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026a8:	f000 fad2 	bl	8002c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ac:	f7fe f928 	bl	8000900 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80026b0:	f000 ff6c 	bl	800358c <MX_USART3_UART_Init>
  MX_SPI5_Init();
 80026b4:	f000 fbc6 	bl	8002e44 <MX_SPI5_Init>
  MX_TIM1_Init();
 80026b8:	f000 fd92 	bl	80031e0 <MX_TIM1_Init>
  MX_RNG_Init();
 80026bc:	f000 fb8e 	bl	8002ddc <MX_RNG_Init>
  MX_I2C1_Init();
 80026c0:	f7fe fa68 	bl	8000b94 <MX_I2C1_Init>
  MX_TIM2_Init();
 80026c4:	f000 fde0 	bl	8003288 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026c8:	f000 fe2c 	bl	8003324 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80026cc:	f000 ff2e 	bl	800352c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	//Temp but not has code in here yet
	cmdBuffer[0] = 0x03;
 80026d0:	4b63      	ldr	r3, [pc, #396]	; (8002860 <main+0x1cc>)
 80026d2:	2203      	movs	r2, #3
 80026d4:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 80026d6:	4b62      	ldr	r3, [pc, #392]	; (8002860 <main+0x1cc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 80026dc:	4b60      	ldr	r3, [pc, #384]	; (8002860 <main+0x1cc>)
 80026de:	2204      	movs	r2, #4
 80026e0:	709a      	strb	r2, [r3, #2]

	//initial driver setup to drive ili9341
	ILI9341_Init();
 80026e2:	f001 fa8d 	bl	8003c00 <ILI9341_Init>

	//Interrupt millisecond
	HAL_TIM_Base_Start_IT(&htim1);
 80026e6:	485f      	ldr	r0, [pc, #380]	; (8002864 <main+0x1d0>)
 80026e8:	f004 fbcc 	bl	8006e84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80026ec:	485e      	ldr	r0, [pc, #376]	; (8002868 <main+0x1d4>)
 80026ee:	f004 fbc9 	bl	8006e84 <HAL_TIM_Base_Start_IT>

	//Reset Screen
	setHorizontalScreen(BLACK);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe fd9c 	bl	8001230 <setHorizontalScreen>

	//Read EEPROM First Time
	readData();
 80026f8:	f7fe fcee 	bl	80010d8 <readData>

	// Setup PM Sensor
	uint8_t* respondStart;
	respondStart = wake_sensirion();
 80026fc:	f7fe fb48 	bl	8000d90 <wake_sensirion>
 8002700:	6078      	str	r0, [r7, #4]
	//print_whole_data_array(respondStart);

	uint8_t* respondRead;
	respondRead = read_sensirion();
 8002702:	f7fe fb83 	bl	8000e0c <read_sensirion>
 8002706:	6038      	str	r0, [r7, #0]

		//	  char stringBuffer[30];
		//	  sprintf(stringBuffer, "%d\r\n" , millisecond);
		//	  HAL_UART_Transmit(&huart3, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);

		if (halfsecond == 1){	// interupt every 500 ms
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <main+0x1d8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d113      	bne.n	8002738 <main+0xa4>
			halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <main+0x1dc>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f083 0301 	eor.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b51      	ldr	r3, [pc, #324]	; (8002870 <main+0x1dc>)
 800272c:	701a      	strb	r2, [r3, #0]
			//displayClock(millisecond);
			halfsecond = 0;
 800272e:	4b4f      	ldr	r3, [pc, #316]	; (800286c <main+0x1d8>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
			assignmentTwo();
 8002734:	f7ff ff2a 	bl	800258c <assignmentTwo>
		}

		pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	484e      	ldr	r0, [pc, #312]	; (8002874 <main+0x1e0>)
 800273c:	f002 f8b2 	bl	80048a4 <HAL_GPIO_ReadPin>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <main+0x1e4>)
 800274e:	701a      	strb	r2, [r3, #0]
		pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 8002750:	2140      	movs	r1, #64	; 0x40
 8002752:	4848      	ldr	r0, [pc, #288]	; (8002874 <main+0x1e0>)
 8002754:	f002 f8a6 	bl	80048a4 <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b45      	ldr	r3, [pc, #276]	; (800287c <main+0x1e8>)
 8002766:	701a      	strb	r2, [r3, #0]
		pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8002768:	2120      	movs	r1, #32
 800276a:	4842      	ldr	r0, [pc, #264]	; (8002874 <main+0x1e0>)
 800276c:	f002 f89a 	bl	80048a4 <HAL_GPIO_ReadPin>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4b40      	ldr	r3, [pc, #256]	; (8002880 <main+0x1ec>)
 800277e:	701a      	strb	r2, [r3, #0]
		pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 8002780:	2110      	movs	r1, #16
 8002782:	483c      	ldr	r0, [pc, #240]	; (8002874 <main+0x1e0>)
 8002784:	f002 f88e 	bl	80048a4 <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <main+0x1f0>)
 8002796:	701a      	strb	r2, [r3, #0]
//		pressButton3 = 0;
//		pressButton4 = 0;


		//Buzzer
		if ((pressButton1 == true && isPressButton1 == false) ||
 8002798:	4b37      	ldr	r3, [pc, #220]	; (8002878 <main+0x1e4>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <main+0x11a>
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <main+0x1f4>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	f083 0301 	eor.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d120      	bne.n	80027f0 <main+0x15c>
			(pressButton2 == true && isPressButton2 == false) ||
 80027ae:	4b33      	ldr	r3, [pc, #204]	; (800287c <main+0x1e8>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
		if ((pressButton1 == true && isPressButton1 == false) ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <main+0x130>
			(pressButton2 == true && isPressButton2 == false) ||
 80027b6:	4b35      	ldr	r3, [pc, #212]	; (800288c <main+0x1f8>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f083 0301 	eor.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d115      	bne.n	80027f0 <main+0x15c>
			(pressButton3 == true && isPressButton3 == false) ||
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <main+0x1ec>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
			(pressButton2 == true && isPressButton2 == false) ||
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <main+0x146>
			(pressButton3 == true && isPressButton3 == false) ||
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <main+0x1fc>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <main+0x15c>
			(pressButton4 == true && isPressButton4 == false)){
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <main+0x1f0>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
			(pressButton3 == true && isPressButton3 == false) ||
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <main+0x160>
			(pressButton4 == true && isPressButton4 == false)){
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <main+0x200>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <main+0x160>
			buzzerSound();
 80027f0:	f7ff feb6 	bl	8002560 <buzzerSound>
		}

		//General Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 0){ // increase mode only once
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <main+0x1e4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d017      	beq.n	800282c <main+0x198>
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <main+0x1f4>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d010      	beq.n	800282c <main+0x198>
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <main+0x204>)
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <main+0x198>
			mode++;
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <main+0x204>)
 8002816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800281a:	b29b      	uxth	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	b21a      	sxth	r2, r3
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <main+0x204>)
 8002824:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <main+0x1f4>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
		}

		//Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <main+0x1e8>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d037      	beq.n	80028a4 <main+0x210>
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <main+0x1f8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d030      	beq.n	80028a4 <main+0x210>
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <main+0x204>)
 8002844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d12b      	bne.n	80028a4 <main+0x210>
			isPressButton2 = true;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <main+0x1f8>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <main+0x208>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	4911      	ldr	r1, [pc, #68]	; (80028a0 <main+0x20c>)
 800285a:	e9c1 2300 	strd	r2, r3, [r1]
 800285e:	e04d      	b.n	80028fc <main+0x268>
 8002860:	2000035c 	.word	0x2000035c
 8002864:	200004c0 	.word	0x200004c0
 8002868:	2000050c 	.word	0x2000050c
 800286c:	20000298 	.word	0x20000298
 8002870:	2000002c 	.word	0x2000002c
 8002874:	40020c00 	.word	0x40020c00
 8002878:	2000029e 	.word	0x2000029e
 800287c:	2000029f 	.word	0x2000029f
 8002880:	200002a0 	.word	0x200002a0
 8002884:	200002a1 	.word	0x200002a1
 8002888:	200002a2 	.word	0x200002a2
 800288c:	200002a3 	.word	0x200002a3
 8002890:	200002a4 	.word	0x200002a4
 8002894:	200002a5 	.word	0x200002a5
 8002898:	2000029c 	.word	0x2000029c
 800289c:	200002b0 	.word	0x200002b0
 80028a0:	200002a8 	.word	0x200002a8
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 80028a4:	4ba7      	ldr	r3, [pc, #668]	; (8002b44 <main+0x4b0>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d027      	beq.n	80028fc <main+0x268>
 80028ac:	4ba6      	ldr	r3, [pc, #664]	; (8002b48 <main+0x4b4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d023      	beq.n	80028fc <main+0x268>
 80028b4:	4ba5      	ldr	r3, [pc, #660]	; (8002b4c <main+0x4b8>)
 80028b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11e      	bne.n	80028fc <main+0x268>
 80028be:	4ba4      	ldr	r3, [pc, #656]	; (8002b50 <main+0x4bc>)
 80028c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c4:	4ba3      	ldr	r3, [pc, #652]	; (8002b54 <main+0x4c0>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	1a84      	subs	r4, r0, r2
 80028cc:	eb61 0503 	sbc.w	r5, r1, r3
 80028d0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	42ab      	cmp	r3, r5
 80028da:	bf08      	it	eq
 80028dc:	42a2      	cmpeq	r2, r4
 80028de:	d20d      	bcs.n	80028fc <main+0x268>
			buzzerSound();
 80028e0:	f7ff fe3e 	bl	8002560 <buzzerSound>
			modeEdit = 1; // Reset to Year First time
 80028e4:	4b9c      	ldr	r3, [pc, #624]	; (8002b58 <main+0x4c4>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	801a      	strh	r2, [r3, #0]
			mode = 100;
 80028ea:	4b98      	ldr	r3, [pc, #608]	; (8002b4c <main+0x4b8>)
 80028ec:	2264      	movs	r2, #100	; 0x64
 80028ee:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80028f0:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <main+0x4bc>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	4997      	ldr	r1, [pc, #604]	; (8002b54 <main+0x4c0>)
 80028f8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Exit Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 80028fc:	4b91      	ldr	r3, [pc, #580]	; (8002b44 <main+0x4b0>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d02c      	beq.n	800295e <main+0x2ca>
 8002904:	4b90      	ldr	r3, [pc, #576]	; (8002b48 <main+0x4b4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f083 0301 	eor.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d025      	beq.n	800295e <main+0x2ca>
 8002912:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <main+0x4bc>)
 8002914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002918:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <main+0x4c0>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	ebb0 0802 	subs.w	r8, r0, r2
 8002922:	eb61 0903 	sbc.w	r9, r1, r3
 8002926:	f240 32e7 	movw	r2, #999	; 0x3e7
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	454b      	cmp	r3, r9
 8002930:	bf08      	it	eq
 8002932:	4542      	cmpeq	r2, r8
 8002934:	d213      	bcs.n	800295e <main+0x2ca>
 8002936:	4b85      	ldr	r3, [pc, #532]	; (8002b4c <main+0x4b8>)
 8002938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	d10e      	bne.n	800295e <main+0x2ca>
			isPressButton2 = true;
 8002940:	4b81      	ldr	r3, [pc, #516]	; (8002b48 <main+0x4b4>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Year First time
 8002946:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <main+0x4c4>)
 8002948:	2201      	movs	r2, #1
 800294a:	801a      	strh	r2, [r3, #0]
			mode = 0;
 800294c:	4b7f      	ldr	r3, [pc, #508]	; (8002b4c <main+0x4b8>)
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8002952:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <main+0x4bc>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	497e      	ldr	r1, [pc, #504]	; (8002b54 <main+0x4c0>)
 800295a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 800295e:	4b7f      	ldr	r3, [pc, #508]	; (8002b5c <main+0x4c8>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d022      	beq.n	80029ac <main+0x318>
 8002966:	4b7e      	ldr	r3, [pc, #504]	; (8002b60 <main+0x4cc>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <main+0x318>
 8002974:	4b75      	ldr	r3, [pc, #468]	; (8002b4c <main+0x4b8>)
 8002976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d116      	bne.n	80029ac <main+0x318>
			modeEdit++;
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <main+0x4c4>)
 8002980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002984:	b29b      	uxth	r3, r3
 8002986:	3301      	adds	r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	b21a      	sxth	r2, r3
 800298c:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <main+0x4c4>)
 800298e:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 8002990:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <main+0x4cc>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 8){	 // finish loop edit
 8002996:	4b70      	ldr	r3, [pc, #448]	; (8002b58 <main+0x4c4>)
 8002998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d105      	bne.n	80029ac <main+0x318>
				modeEdit = 1; // Reset to Year
 80029a0:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <main+0x4c4>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	801a      	strh	r2, [r3, #0]
				mode = 0;	  // Back to General Mode
 80029a6:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <main+0x4b8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	801a      	strh	r2, [r3, #0]
			}
		}

		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 80029ac:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <main+0x4d0>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d06d      	beq.n	8002a90 <main+0x3fc>
 80029b4:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <main+0x4d4>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d066      	beq.n	8002a90 <main+0x3fc>
 80029c2:	4b62      	ldr	r3, [pc, #392]	; (8002b4c <main+0x4b8>)
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d161      	bne.n	8002a90 <main+0x3fc>
			if (modeEdit == 1){
 80029cc:	4b62      	ldr	r3, [pc, #392]	; (8002b58 <main+0x4c4>)
 80029ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d109      	bne.n	80029ea <main+0x356>
				year--;
 80029d6:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <main+0x4d8>)
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b21a      	sxth	r2, r3
 80029e4:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <main+0x4d8>)
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e04a      	b.n	8002a80 <main+0x3ec>
			}
			else if (modeEdit == 2){
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <main+0x4c4>)
 80029ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d109      	bne.n	8002a08 <main+0x374>
				monthIndex--;
 80029f4:	4b5e      	ldr	r3, [pc, #376]	; (8002b70 <main+0x4dc>)
 80029f6:	f993 3000 	ldrsb.w	r3, [r3]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	b25a      	sxtb	r2, r3
 8002a02:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <main+0x4dc>)
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e03b      	b.n	8002a80 <main+0x3ec>
			}
			else if (modeEdit == 3){
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <main+0x4c4>)
 8002a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d109      	bne.n	8002a26 <main+0x392>
				date--;
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <main+0x4e0>)
 8002a14:	f993 3000 	ldrsb.w	r3, [r3]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	b25a      	sxtb	r2, r3
 8002a20:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <main+0x4e0>)
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e02c      	b.n	8002a80 <main+0x3ec>
			}
			else if (modeEdit == 4){
 8002a26:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <main+0x4c4>)
 8002a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d109      	bne.n	8002a44 <main+0x3b0>
				dayIndex--;
 8002a30:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <main+0x4e4>)
 8002a32:	f993 3000 	ldrsb.w	r3, [r3]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	b25a      	sxtb	r2, r3
 8002a3e:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <main+0x4e4>)
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e01d      	b.n	8002a80 <main+0x3ec>
			}
			else if (modeEdit == 5){
 8002a44:	4b44      	ldr	r3, [pc, #272]	; (8002b58 <main+0x4c4>)
 8002a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d105      	bne.n	8002a5a <main+0x3c6>
				hourNum--;
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <main+0x4e8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <main+0x4e8>)
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e012      	b.n	8002a80 <main+0x3ec>
			}
			else if (modeEdit == 6){
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <main+0x4c4>)
 8002a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d105      	bne.n	8002a70 <main+0x3dc>
				minuteNum--;
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <main+0x4ec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	4a45      	ldr	r2, [pc, #276]	; (8002b80 <main+0x4ec>)
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e007      	b.n	8002a80 <main+0x3ec>
			}
			else if (modeEdit == 7){
 8002a70:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <main+0x4c4>)
 8002a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	d102      	bne.n	8002a80 <main+0x3ec>
				secondNum = 0;
 8002a7a:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <main+0x4f0>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8002a80:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <main+0x4f4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8002a86:	f7ff f8a1 	bl	8001bcc <resetPrevNum>
			isPressButton3 = true;
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <main+0x4d4>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
		}

		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 8002a90:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <main+0x4f8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8098 	beq.w	8002bca <main+0x536>
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <main+0x4fc>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8090 	beq.w	8002bca <main+0x536>
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <main+0x4b8>)
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	f040 808a 	bne.w	8002bca <main+0x536>
			if (modeEdit == 1){
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <main+0x4c4>)
 8002ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d109      	bne.n	8002ad4 <main+0x440>
				year++;
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <main+0x4d8>)
 8002ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <main+0x4d8>)
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	e072      	b.n	8002bba <main+0x526>
			}
			else if (modeEdit == 2){
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <main+0x4c4>)
 8002ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d109      	bne.n	8002af2 <main+0x45e>
				monthIndex++;
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <main+0x4dc>)
 8002ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	b25a      	sxtb	r2, r3
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <main+0x4dc>)
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e063      	b.n	8002bba <main+0x526>
			}
			else if (modeEdit == 3){
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <main+0x4c4>)
 8002af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d109      	bne.n	8002b10 <main+0x47c>
				date++;
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <main+0x4e0>)
 8002afe:	f993 3000 	ldrsb.w	r3, [r3]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	b25a      	sxtb	r2, r3
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <main+0x4e0>)
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e054      	b.n	8002bba <main+0x526>
			}
			else if (modeEdit == 4){
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <main+0x4c4>)
 8002b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d109      	bne.n	8002b2e <main+0x49a>
				dayIndex++;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <main+0x4e4>)
 8002b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	b25a      	sxtb	r2, r3
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <main+0x4e4>)
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e045      	b.n	8002bba <main+0x526>
			}
			else if (modeEdit == 5){
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <main+0x4c4>)
 8002b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d12d      	bne.n	8002b94 <main+0x500>
				hourNum++;
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <main+0x4e8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <main+0x4e8>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e03a      	b.n	8002bba <main+0x526>
 8002b44:	2000029f 	.word	0x2000029f
 8002b48:	200002a3 	.word	0x200002a3
 8002b4c:	2000029c 	.word	0x2000029c
 8002b50:	200002b0 	.word	0x200002b0
 8002b54:	200002a8 	.word	0x200002a8
 8002b58:	20000036 	.word	0x20000036
 8002b5c:	2000029e 	.word	0x2000029e
 8002b60:	200002a2 	.word	0x200002a2
 8002b64:	200002a0 	.word	0x200002a0
 8002b68:	200002a4 	.word	0x200002a4
 8002b6c:	2000008e 	.word	0x2000008e
 8002b70:	2000008d 	.word	0x2000008d
 8002b74:	2000003c 	.word	0x2000003c
 8002b78:	2000008c 	.word	0x2000008c
 8002b7c:	2000001c 	.word	0x2000001c
 8002b80:	20000018 	.word	0x20000018
 8002b84:	20000014 	.word	0x20000014
 8002b88:	2000002c 	.word	0x2000002c
 8002b8c:	200002a1 	.word	0x200002a1
 8002b90:	200002a5 	.word	0x200002a5
			}
			else if (modeEdit == 6){
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <main+0x58c>)
 8002b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d105      	bne.n	8002baa <main+0x516>
				minuteNum++;
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <main+0x590>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <main+0x590>)
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e007      	b.n	8002bba <main+0x526>
			}
			else if (modeEdit == 7){
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <main+0x58c>)
 8002bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d102      	bne.n	8002bba <main+0x526>
				secondNum = 0;
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <main+0x594>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <main+0x598>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8002bc0:	f7ff f804 	bl	8001bcc <resetPrevNum>
			isPressButton4 = true;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <main+0x59c>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
		}

		//Reset isPressButton
		if (pressButton1 == false){
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <main+0x5a0>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <main+0x54a>
			isPressButton1 = false;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <main+0x5a4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton2 == false){
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <main+0x5a8>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <main+0x55e>
			isPressButton2 = false;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <main+0x5ac>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton3 == false){
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <main+0x5b0>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <main+0x572>
			isPressButton3 = false;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <main+0x5b4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton4 == false){
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <main+0x5b8>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f43f ad79 	beq.w	8002708 <main+0x74>
			isPressButton4 = false;
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <main+0x59c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
		if (halfsecond == 1){	// interupt every 500 ms
 8002c1c:	e574      	b.n	8002708 <main+0x74>
 8002c1e:	bf00      	nop
 8002c20:	20000036 	.word	0x20000036
 8002c24:	20000018 	.word	0x20000018
 8002c28:	20000014 	.word	0x20000014
 8002c2c:	2000002c 	.word	0x2000002c
 8002c30:	200002a5 	.word	0x200002a5
 8002c34:	2000029e 	.word	0x2000029e
 8002c38:	200002a2 	.word	0x200002a2
 8002c3c:	2000029f 	.word	0x2000029f
 8002c40:	200002a3 	.word	0x200002a3
 8002c44:	200002a0 	.word	0x200002a0
 8002c48:	200002a4 	.word	0x200002a4
 8002c4c:	200002a1 	.word	0x200002a1

08002c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b0b8      	sub	sp, #224	; 0xe0
 8002c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c5a:	2234      	movs	r2, #52	; 0x34
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 f89c 	bl	8008d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	2290      	movs	r2, #144	; 0x90
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f006 f88d 	bl	8008d9c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c82:	f002 fbcb 	bl	800541c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <SystemClock_Config+0x12c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a3c      	ldr	r2, [pc, #240]	; (8002d7c <SystemClock_Config+0x12c>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <SystemClock_Config+0x12c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <SystemClock_Config+0x130>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a37      	ldr	r2, [pc, #220]	; (8002d80 <SystemClock_Config+0x130>)
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <SystemClock_Config+0x130>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002cbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002cd8:	23c8      	movs	r3, #200	; 0xc8
 8002cda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002ce4:	2309      	movs	r3, #9
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002cea:	2302      	movs	r3, #2
 8002cec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f002 fbf1 	bl	80054dc <HAL_RCC_OscConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002d00:	f000 f868 	bl	8002dd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d04:	f002 fb9a 	bl	800543c <HAL_PWREx_EnableOverDrive>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d0e:	f000 f861 	bl	8002dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d12:	230f      	movs	r3, #15
 8002d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002d34:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d38:	2106      	movs	r1, #6
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 fe7c 	bl	8005a38 <HAL_RCC_ClockConfig>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8002d46:	f000 f845 	bl	8002dd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <SystemClock_Config+0x134>)
 8002d4c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d52:	2300      	movs	r3, #0
 8002d54:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f869 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8002d70:	f000 f830 	bl	8002dd4 <Error_Handler>
  }
}
 8002d74:	bf00      	nop
 8002d76:	37e0      	adds	r7, #224	; 0xe0
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000
 8002d84:	00204140 	.word	0x00204140

08002d88 <HAL_GPIO_EXTI_Callback>:
		}
	}
	return crc;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]

	//On Board
	//Blue
	if (GPIO_Pin == GPIO_PIN_13){
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d98:	d110      	bne.n	8002dbc <HAL_GPIO_EXTI_Callback+0x34>
		userResetButton = 1;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Interrupt pin13 \n\r");
 8002da0:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0x40>)
 8002da2:	480a      	ldr	r0, [pc, #40]	; (8002dcc <HAL_GPIO_EXTI_Callback+0x44>)
 8002da4:	f006 fc46 	bl	8009634 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8002da8:	4808      	ldr	r0, [pc, #32]	; (8002dcc <HAL_GPIO_EXTI_Callback+0x44>)
 8002daa:	f7fd fa49 	bl	8000240 <strlen>
 8002dae:	4603      	mov	r3, r0
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	23c8      	movs	r3, #200	; 0xc8
 8002db4:	4905      	ldr	r1, [pc, #20]	; (8002dcc <HAL_GPIO_EXTI_Callback+0x44>)
 8002db6:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <HAL_GPIO_EXTI_Callback+0x48>)
 8002db8:	f005 fa98 	bl	80082ec <HAL_UART_Transmit>
	}

}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200002a6 	.word	0x200002a6
 8002dc8:	0800ba6c 	.word	0x0800ba6c
 8002dcc:	20000368 	.word	0x20000368
 8002dd0:	20000558 	.word	0x20000558

08002dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <Error_Handler+0x4>
	...

08002ddc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_RNG_Init+0x20>)
 8002de2:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <MX_RNG_Init+0x24>)
 8002de4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_RNG_Init+0x20>)
 8002de8:	f003 fc50 	bl	800668c <HAL_RNG_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002df2:	f7ff ffef 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000400 	.word	0x20000400
 8002e00:	50060800 	.word	0x50060800

08002e04 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_RNG_MspInit+0x38>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10b      	bne.n	8002e2e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RNG_MspInit+0x3c>)
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RNG_MspInit+0x3c>)
 8002e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e20:	6353      	str	r3, [r2, #52]	; 0x34
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RNG_MspInit+0x3c>)
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	50060800 	.word	0x50060800
 8002e40:	40023800 	.word	0x40023800

08002e44 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <MX_SPI5_Init+0x78>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e54:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e62:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e76:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e92:	2207      	movs	r2, #7
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_SPI5_Init+0x74>)
 8002ea4:	f003 fc1c 	bl	80066e0 <HAL_SPI_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002eae:	f7ff ff91 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000410 	.word	0x20000410
 8002ebc:	40015000 	.word	0x40015000

08002ec0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_SPI_MspInit+0x7c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d128      	bne.n	8002f34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <HAL_SPI_MspInit+0x80>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_SPI_MspInit+0x80>)
 8002ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_SPI_MspInit+0x80>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_SPI_MspInit+0x80>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_SPI_MspInit+0x80>)
 8002f00:	f043 0320 	orr.w	r3, r3, #32
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_SPI_MspInit+0x80>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002f12:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002f24:	2305      	movs	r3, #5
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <HAL_SPI_MspInit+0x84>)
 8002f30:	f001 fb0c 	bl	800454c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002f34:	bf00      	nop
 8002f36:	3728      	adds	r7, #40	; 0x28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40015000 	.word	0x40015000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40021400 	.word	0x40021400

08002f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_MspInit+0x44>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <HAL_MspInit+0x44>)
 8002f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <HAL_MspInit+0x44>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_MspInit+0x44>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <HAL_MspInit+0x44>)
 8002f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_MspInit+0x44>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f94:	f001 f984 	bl	80042a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002fa2:	f004 f9c3 	bl	800732c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8002fa6:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a02      	ldr	r2, [pc, #8]	; (8002fb8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8002fae:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200004c0 	.word	0x200004c0
 8002fb8:	20000294 	.word	0x20000294

08002fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <TIM2_IRQHandler+0x14>)
 8002fc2:	f004 f9b3 	bl	800732c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8002fc6:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <TIM2_IRQHandler+0x18>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	2000050c 	.word	0x2000050c
 8002fd4:	20000298 	.word	0x20000298

08002fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fe0:	f001 fc92 	bl	8004908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
	return 1;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_kill>:

int _kill(int pid, int sig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003002:	f005 fea1 	bl	8008d48 <__errno>
 8003006:	4603      	mov	r3, r0
 8003008:	2216      	movs	r2, #22
 800300a:	601a      	str	r2, [r3, #0]
	return -1;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_exit>:

void _exit (int status)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ffe7 	bl	8002ff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800302a:	e7fe      	b.n	800302a <_exit+0x12>

0800302c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e00a      	b.n	8003054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800303e:	f3af 8000 	nop.w
 8003042:	4601      	mov	r1, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	b2ca      	uxtb	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3301      	adds	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	dbf0      	blt.n	800303e <_read+0x12>
	}

return len;
 800305c:	687b      	ldr	r3, [r7, #4]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e009      	b.n	800308c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	60ba      	str	r2, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	dbf1      	blt.n	8003078 <_write+0x12>
	}
	return len;
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_close>:

int _close(int file)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	return -1;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c6:	605a      	str	r2, [r3, #4]
	return 0;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_isatty>:

int _isatty(int file)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
	return 1;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	return 0;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f005 fe06 	bl	8008d48 <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20080000 	.word	0x20080000
 8003168:	00000400 	.word	0x00000400
 800316c:	20000300 	.word	0x20000300
 8003170:	20000678 	.word	0x20000678

08003174 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <SystemInit+0x5c>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <SystemInit+0x5c>)
 8003180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <SystemInit+0x60>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <SystemInit+0x60>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <SystemInit+0x60>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <SystemInit+0x60>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	490d      	ldr	r1, [pc, #52]	; (80031d4 <SystemInit+0x60>)
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <SystemInit+0x64>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <SystemInit+0x60>)
 80031a8:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <SystemInit+0x68>)
 80031aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <SystemInit+0x60>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <SystemInit+0x60>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <SystemInit+0x60>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <SystemInit+0x5c>)
 80031c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031c4:	609a      	str	r2, [r3, #8]
#endif
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00
 80031d4:	40023800 	.word	0x40023800
 80031d8:	fef6ffff 	.word	0xfef6ffff
 80031dc:	24003010 	.word	0x24003010

080031e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031e6:	f107 0310 	add.w	r3, r7, #16
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <MX_TIM1_Init+0xa0>)
 8003200:	4a20      	ldr	r2, [pc, #128]	; (8003284 <MX_TIM1_Init+0xa4>)
 8003202:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <MX_TIM1_Init+0xa0>)
 8003206:	22c7      	movs	r2, #199	; 0xc7
 8003208:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <MX_TIM1_Init+0xa0>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <MX_TIM1_Init+0xa0>)
 8003212:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003216:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <MX_TIM1_Init+0xa0>)
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <MX_TIM1_Init+0xa0>)
 8003220:	2200      	movs	r2, #0
 8003222:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <MX_TIM1_Init+0xa0>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800322a:	4815      	ldr	r0, [pc, #84]	; (8003280 <MX_TIM1_Init+0xa0>)
 800322c:	f003 fdd2 	bl	8006dd4 <HAL_TIM_Base_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003236:	f7ff fdcd 	bl	8002dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800323a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003240:	f107 0310 	add.w	r3, r7, #16
 8003244:	4619      	mov	r1, r3
 8003246:	480e      	ldr	r0, [pc, #56]	; (8003280 <MX_TIM1_Init+0xa0>)
 8003248:	f004 faa0 	bl	800778c <HAL_TIM_ConfigClockSource>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003252:	f7ff fdbf 	bl	8002dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4806      	ldr	r0, [pc, #24]	; (8003280 <MX_TIM1_Init+0xa0>)
 8003268:	f004 ff46 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003272:	f7ff fdaf 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003276:	bf00      	nop
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200004c0 	.word	0x200004c0
 8003284:	40010000 	.word	0x40010000

08003288 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <MX_TIM2_Init+0x98>)
 80032a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <MX_TIM2_Init+0x98>)
 80032b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <MX_TIM2_Init+0x98>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <MX_TIM2_Init+0x98>)
 80032be:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80032c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <MX_TIM2_Init+0x98>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <MX_TIM2_Init+0x98>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032d0:	4813      	ldr	r0, [pc, #76]	; (8003320 <MX_TIM2_Init+0x98>)
 80032d2:	f003 fd7f 	bl	8006dd4 <HAL_TIM_Base_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80032dc:	f7ff fd7a 	bl	8002dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032e6:	f107 0310 	add.w	r3, r7, #16
 80032ea:	4619      	mov	r1, r3
 80032ec:	480c      	ldr	r0, [pc, #48]	; (8003320 <MX_TIM2_Init+0x98>)
 80032ee:	f004 fa4d 	bl	800778c <HAL_TIM_ConfigClockSource>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80032f8:	f7ff fd6c 	bl	8002dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4805      	ldr	r0, [pc, #20]	; (8003320 <MX_TIM2_Init+0x98>)
 800330a:	f004 fef5 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003314:	f7ff fd5e 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003318:	bf00      	nop
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	2000050c 	.word	0x2000050c

08003324 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003344:	463b      	mov	r3, r7
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	615a      	str	r2, [r3, #20]
 8003354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <MX_TIM3_Init+0xe8>)
 8003358:	4a2d      	ldr	r2, [pc, #180]	; (8003410 <MX_TIM3_Init+0xec>)
 800335a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <MX_TIM3_Init+0xe8>)
 800335e:	22f9      	movs	r2, #249	; 0xf9
 8003360:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003362:	4b2a      	ldr	r3, [pc, #168]	; (800340c <MX_TIM3_Init+0xe8>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <MX_TIM3_Init+0xe8>)
 800336a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800336e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003370:	4b26      	ldr	r3, [pc, #152]	; (800340c <MX_TIM3_Init+0xe8>)
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003376:	4b25      	ldr	r3, [pc, #148]	; (800340c <MX_TIM3_Init+0xe8>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800337c:	4823      	ldr	r0, [pc, #140]	; (800340c <MX_TIM3_Init+0xe8>)
 800337e:	f003 fd29 	bl	8006dd4 <HAL_TIM_Base_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003388:	f7ff fd24 	bl	8002dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003396:	4619      	mov	r1, r3
 8003398:	481c      	ldr	r0, [pc, #112]	; (800340c <MX_TIM3_Init+0xe8>)
 800339a:	f004 f9f7 	bl	800778c <HAL_TIM_ConfigClockSource>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80033a4:	f7ff fd16 	bl	8002dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033a8:	4818      	ldr	r0, [pc, #96]	; (800340c <MX_TIM3_Init+0xe8>)
 80033aa:	f003 fde3 	bl	8006f74 <HAL_TIM_PWM_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80033b4:	f7ff fd0e 	bl	8002dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033c0:	f107 031c 	add.w	r3, r7, #28
 80033c4:	4619      	mov	r1, r3
 80033c6:	4811      	ldr	r0, [pc, #68]	; (800340c <MX_TIM3_Init+0xe8>)
 80033c8:	f004 fe96 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80033d2:	f7ff fcff 	bl	8002dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033d6:	2360      	movs	r3, #96	; 0x60
 80033d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 80033da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80033de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033e8:	463b      	mov	r3, r7
 80033ea:	2200      	movs	r2, #0
 80033ec:	4619      	mov	r1, r3
 80033ee:	4807      	ldr	r0, [pc, #28]	; (800340c <MX_TIM3_Init+0xe8>)
 80033f0:	f004 f8bc 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80033fa:	f7ff fceb 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033fe:	4803      	ldr	r0, [pc, #12]	; (800340c <MX_TIM3_Init+0xe8>)
 8003400:	f000 f85c 	bl	80034bc <HAL_TIM_MspPostInit>

}
 8003404:	bf00      	nop
 8003406:	3738      	adds	r7, #56	; 0x38
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000474 	.word	0x20000474
 8003410:	40000400 	.word	0x40000400

08003414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d114      	bne.n	8003450 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6453      	str	r3, [r2, #68]	; 0x44
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	2101      	movs	r1, #1
 8003442:	2019      	movs	r0, #25
 8003444:	f001 f84b 	bl	80044de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003448:	2019      	movs	r0, #25
 800344a:	f001 f864 	bl	8004516 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800344e:	e02a      	b.n	80034a6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d114      	bne.n	8003484 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2102      	movs	r1, #2
 8003476:	201c      	movs	r0, #28
 8003478:	f001 f831 	bl	80044de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800347c:	201c      	movs	r0, #28
 800347e:	f001 f84a 	bl	8004516 <HAL_NVIC_EnableIRQ>
}
 8003482:	e010      	b.n	80034a6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_TIM_Base_MspInit+0xa4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10b      	bne.n	80034a6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_TIM_Base_MspInit+0xa0>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40000400 	.word	0x40000400

080034bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a11      	ldr	r2, [pc, #68]	; (8003520 <HAL_TIM_MspPostInit+0x64>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d11b      	bne.n	8003516 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_TIM_MspPostInit+0x68>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_TIM_MspPostInit+0x68>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_TIM_MspPostInit+0x68>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034f6:	2340      	movs	r3, #64	; 0x40
 80034f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003506:	2302      	movs	r3, #2
 8003508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	4619      	mov	r1, r3
 8003510:	4805      	ldr	r0, [pc, #20]	; (8003528 <HAL_TIM_MspPostInit+0x6c>)
 8003512:	f001 f81b 	bl	800454c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003516:	bf00      	nop
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40000400 	.word	0x40000400
 8003524:	40023800 	.word	0x40023800
 8003528:	40020000 	.word	0x40020000

0800352c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <MX_USART1_UART_Init+0x5c>)
 8003534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800353c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <MX_USART1_UART_Init+0x58>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003552:	220c      	movs	r2, #12
 8003554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <MX_USART1_UART_Init+0x58>)
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <MX_USART1_UART_Init+0x58>)
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <MX_USART1_UART_Init+0x58>)
 8003570:	f004 fe6e 	bl	8008250 <HAL_UART_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800357a:	f7ff fc2b 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200005dc 	.word	0x200005dc
 8003588:	40011000 	.word	0x40011000

0800358c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <MX_USART3_UART_Init+0x5c>)
 8003594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 8003598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800359c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035b2:	220c      	movs	r2, #12
 80035b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035ce:	4805      	ldr	r0, [pc, #20]	; (80035e4 <MX_USART3_UART_Init+0x58>)
 80035d0:	f004 fe3e 	bl	8008250 <HAL_UART_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80035da:	f7ff fbfb 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000558 	.word	0x20000558
 80035e8:	40004800 	.word	0x40004800

080035ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08c      	sub	sp, #48	; 0x30
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 031c 	add.w	r3, r7, #28
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a37      	ldr	r2, [pc, #220]	; (80036e8 <HAL_UART_MspInit+0xfc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d139      	bne.n	8003682 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_UART_MspInit+0x100>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	4a36      	ldr	r2, [pc, #216]	; (80036ec <HAL_UART_MspInit+0x100>)
 8003614:	f043 0310 	orr.w	r3, r3, #16
 8003618:	6453      	str	r3, [r2, #68]	; 0x44
 800361a:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_UART_MspInit+0x100>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_UART_MspInit+0x100>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a30      	ldr	r2, [pc, #192]	; (80036ec <HAL_UART_MspInit+0x100>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <HAL_UART_MspInit+0x100>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003650:	2304      	movs	r3, #4
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003654:	f107 031c 	add.w	r3, r7, #28
 8003658:	4619      	mov	r1, r3
 800365a:	4825      	ldr	r0, [pc, #148]	; (80036f0 <HAL_UART_MspInit+0x104>)
 800365c:	f000 ff76 	bl	800454c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003660:	2340      	movs	r3, #64	; 0x40
 8003662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003670:	2307      	movs	r3, #7
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003674:	f107 031c 	add.w	r3, r7, #28
 8003678:	4619      	mov	r1, r3
 800367a:	481d      	ldr	r0, [pc, #116]	; (80036f0 <HAL_UART_MspInit+0x104>)
 800367c:	f000 ff66 	bl	800454c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003680:	e02d      	b.n	80036de <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_UART_MspInit+0x108>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d128      	bne.n	80036de <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800368c:	4b17      	ldr	r3, [pc, #92]	; (80036ec <HAL_UART_MspInit+0x100>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	4a16      	ldr	r2, [pc, #88]	; (80036ec <HAL_UART_MspInit+0x100>)
 8003692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003696:	6413      	str	r3, [r2, #64]	; 0x40
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_UART_MspInit+0x100>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_UART_MspInit+0x100>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <HAL_UART_MspInit+0x100>)
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	6313      	str	r3, [r2, #48]	; 0x30
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_UART_MspInit+0x100>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80036bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ca:	2303      	movs	r3, #3
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036ce:	2307      	movs	r3, #7
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	4619      	mov	r1, r3
 80036d8:	4807      	ldr	r0, [pc, #28]	; (80036f8 <HAL_UART_MspInit+0x10c>)
 80036da:	f000 ff37 	bl	800454c <HAL_GPIO_Init>
}
 80036de:	bf00      	nop
 80036e0:	3730      	adds	r7, #48	; 0x30
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020400 	.word	0x40020400
 80036f4:	40004800 	.word	0x40004800
 80036f8:	40020c00 	.word	0x40020c00

080036fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003734 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003700:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003702:	e003      	b.n	800370c <LoopCopyDataInit>

08003704 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003706:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003708:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800370a:	3104      	adds	r1, #4

0800370c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800370c:	480b      	ldr	r0, [pc, #44]	; (800373c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003710:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003712:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003714:	d3f6      	bcc.n	8003704 <CopyDataInit>
  ldr  r2, =_sbss
 8003716:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003718:	e002      	b.n	8003720 <LoopFillZerobss>

0800371a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800371a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800371c:	f842 3b04 	str.w	r3, [r2], #4

08003720 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003722:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003724:	d3f9      	bcc.n	800371a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003726:	f7ff fd25 	bl	8003174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800372a:	f005 fb13 	bl	8008d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372e:	f7fe ffb1 	bl	8002694 <main>
  bx  lr    
 8003732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003734:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003738:	0800c0cc 	.word	0x0800c0cc
  ldr  r0, =_sdata
 800373c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003740:	20000278 	.word	0x20000278
  ldr  r2, =_sbss
 8003744:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 8003748:	20000674 	.word	0x20000674

0800374c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800374c:	e7fe      	b.n	800374c <ADC_IRQHandler>

0800374e <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800374e:	b590      	push	{r4, r7, lr}
 8003750:	b089      	sub	sp, #36	; 0x24
 8003752:	af02      	add	r7, sp, #8
 8003754:	4604      	mov	r4, r0
 8003756:	4608      	mov	r0, r1
 8003758:	4611      	mov	r1, r2
 800375a:	461a      	mov	r2, r3
 800375c:	4623      	mov	r3, r4
 800375e:	80fb      	strh	r3, [r7, #6]
 8003760:	4603      	mov	r3, r0
 8003762:	80bb      	strh	r3, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	da01      	bge.n	800379a <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8003796:	2301      	movs	r3, #1
 8003798:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 800379e:	883a      	ldrh	r2, [r7, #0]
 80037a0:	88bb      	ldrh	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da01      	bge.n	80037b0 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80037ac:	2301      	movs	r3, #1
 80037ae:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	823b      	strh	r3, [r7, #16]
 80037c2:	e005      	b.n	80037d0 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80037d0:	7cbb      	ldrb	r3, [r7, #18]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80037d6:	883a      	ldrh	r2, [r7, #0]
 80037d8:	88bb      	ldrh	r3, [r7, #4]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80037de:	88bb      	ldrh	r3, [r7, #4]
 80037e0:	81fb      	strh	r3, [r7, #14]
 80037e2:	e005      	b.n	80037f0 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80037e4:	88ba      	ldrh	r2, [r7, #4]
 80037e6:	883b      	ldrh	r3, [r7, #0]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80037ec:	883b      	ldrh	r3, [r7, #0]
 80037ee:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80037f0:	8abc      	ldrh	r4, [r7, #20]
 80037f2:	8afa      	ldrh	r2, [r7, #22]
 80037f4:	89f9      	ldrh	r1, [r7, #14]
 80037f6:	8a38      	ldrh	r0, [r7, #16]
 80037f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4623      	mov	r3, r4
 80037fe:	f000 fca7 	bl	8004150 <ILI9341_Draw_Rectangle>
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}
	...

0800380c <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af02      	add	r7, sp, #8
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4623      	mov	r3, r4
 800381c:	71fb      	strb	r3, [r7, #7]
 800381e:	4603      	mov	r3, r0
 8003820:	71bb      	strb	r3, [r7, #6]
 8003822:	460b      	mov	r3, r1
 8003824:	717b      	strb	r3, [r7, #5]
 8003826:	4613      	mov	r3, r2
 8003828:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b1f      	cmp	r3, #31
 8003832:	d802      	bhi.n	800383a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	71fb      	strb	r3, [r7, #7]
 8003838:	e002      	b.n	8003840 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	3b20      	subs	r3, #32
 800383e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8003840:	2300      	movs	r3, #0
 8003842:	753b      	strb	r3, [r7, #20]
 8003844:	e012      	b.n	800386c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8003846:	7dfa      	ldrb	r2, [r7, #23]
 8003848:	7d38      	ldrb	r0, [r7, #20]
 800384a:	7d39      	ldrb	r1, [r7, #20]
 800384c:	4c3c      	ldr	r4, [pc, #240]	; (8003940 <ILI9341_Draw_Char+0x134>)
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4423      	add	r3, r4
 8003858:	4403      	add	r3, r0
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	f107 0318 	add.w	r3, r7, #24
 8003860:	440b      	add	r3, r1
 8003862:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8003866:	7d3b      	ldrb	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	753b      	strb	r3, [r7, #20]
 800386c:	7d3b      	ldrb	r3, [r7, #20]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d9e9      	bls.n	8003846 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8003872:	79bb      	ldrb	r3, [r7, #6]
 8003874:	b298      	uxth	r0, r3
 8003876:	797b      	ldrb	r3, [r7, #5]
 8003878:	b299      	uxth	r1, r3
 800387a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800387c:	461a      	mov	r2, r3
 800387e:	0052      	lsls	r2, r2, #1
 8003880:	4413      	add	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	b29c      	uxth	r4, r3
 800388c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4623      	mov	r3, r4
 8003892:	f000 fc5d 	bl	8004150 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8003896:	2300      	movs	r3, #0
 8003898:	757b      	strb	r3, [r7, #21]
 800389a:	e048      	b.n	800392e <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800389c:	2300      	movs	r3, #0
 800389e:	75bb      	strb	r3, [r7, #22]
 80038a0:	e03f      	b.n	8003922 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 80038a2:	7d7b      	ldrb	r3, [r7, #21]
 80038a4:	f107 0218 	add.w	r2, r7, #24
 80038a8:	4413      	add	r3, r2
 80038aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	7dbb      	ldrb	r3, [r7, #22]
 80038b2:	fa42 f303 	asr.w	r3, r2, r3
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02e      	beq.n	800391c <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 80038be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d110      	bne.n	80038e6 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80038c4:	79bb      	ldrb	r3, [r7, #6]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	7d7b      	ldrb	r3, [r7, #21]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	b298      	uxth	r0, r3
 80038d0:	797b      	ldrb	r3, [r7, #5]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	7dbb      	ldrb	r3, [r7, #22]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4413      	add	r3, r2
 80038da:	b29b      	uxth	r3, r3
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	4619      	mov	r1, r3
 80038e0:	f000 fb5c 	bl	8003f9c <ILI9341_Draw_Pixel>
 80038e4:	e01a      	b.n	800391c <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80038e6:	79bb      	ldrb	r3, [r7, #6]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	7d7b      	ldrb	r3, [r7, #21]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80038f0:	fb11 f303 	smulbb	r3, r1, r3
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	b298      	uxth	r0, r3
 80038fa:	797b      	ldrb	r3, [r7, #5]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	7dbb      	ldrb	r3, [r7, #22]
 8003900:	b29b      	uxth	r3, r3
 8003902:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003904:	fb11 f303 	smulbb	r3, r1, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	4413      	add	r3, r2
 800390c:	b299      	uxth	r1, r3
 800390e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8003910:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4623      	mov	r3, r4
 8003918:	f000 fc1a 	bl	8004150 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800391c:	7dbb      	ldrb	r3, [r7, #22]
 800391e:	3301      	adds	r3, #1
 8003920:	75bb      	strb	r3, [r7, #22]
 8003922:	7dbb      	ldrb	r3, [r7, #22]
 8003924:	2b07      	cmp	r3, #7
 8003926:	d9bc      	bls.n	80038a2 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8003928:	7d7b      	ldrb	r3, [r7, #21]
 800392a:	3301      	adds	r3, #1
 800392c:	757b      	strb	r3, [r7, #21]
 800392e:	7d7b      	ldrb	r3, [r7, #21]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d9b3      	bls.n	800389c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	bf00      	nop
 8003940:	0800ba98 	.word	0x0800ba98

08003944 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b085      	sub	sp, #20
 8003948:	af02      	add	r7, sp, #8
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	70fb      	strb	r3, [r7, #3]
 8003956:	460b      	mov	r3, r1
 8003958:	70bb      	strb	r3, [r7, #2]
 800395a:	4613      	mov	r3, r2
 800395c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800395e:	e017      	b.n	8003990 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	7818      	ldrb	r0, [r3, #0]
 8003968:	883c      	ldrh	r4, [r7, #0]
 800396a:	78ba      	ldrb	r2, [r7, #2]
 800396c:	78f9      	ldrb	r1, [r7, #3]
 800396e:	8bbb      	ldrh	r3, [r7, #28]
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	8b3b      	ldrh	r3, [r7, #24]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4623      	mov	r3, r4
 8003978:	f7ff ff48 	bl	800380c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800397c:	8b3b      	ldrh	r3, [r7, #24]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	0052      	lsls	r2, r2, #1
 8003984:	4413      	add	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	b2da      	uxtb	r2, r3
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	4413      	add	r3, r2
 800398e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e3      	bne.n	8003960 <ILI9341_Draw_Text+0x1c>
    }
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd90      	pop	{r4, r7, pc}
	...

080039a4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80039a8:	f7ff fa4c 	bl	8002e44 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80039ac:	f7fc ffa8 	bl	8000900 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80039b0:	2200      	movs	r2, #0
 80039b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039b6:	4802      	ldr	r0, [pc, #8]	; (80039c0 <ILI9341_SPI_Init+0x1c>)
 80039b8:	f000 ff8c 	bl	80048d4 <HAL_GPIO_WritePin>
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40020800 	.word	0x40020800

080039c4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80039ce:	1df9      	adds	r1, r7, #7
 80039d0:	2301      	movs	r3, #1
 80039d2:	2201      	movs	r2, #1
 80039d4:	4803      	ldr	r0, [pc, #12]	; (80039e4 <ILI9341_SPI_Send+0x20>)
 80039d6:	f002 ff2e 	bl	8006836 <HAL_SPI_Transmit>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000410 	.word	0x20000410

080039e8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80039f2:	2200      	movs	r2, #0
 80039f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f8:	480b      	ldr	r0, [pc, #44]	; (8003a28 <ILI9341_Write_Command+0x40>)
 80039fa:	f000 ff6b 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80039fe:	2200      	movs	r2, #0
 8003a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a04:	4808      	ldr	r0, [pc, #32]	; (8003a28 <ILI9341_Write_Command+0x40>)
 8003a06:	f000 ff65 	bl	80048d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ffd9 	bl	80039c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003a12:	2201      	movs	r2, #1
 8003a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a18:	4803      	ldr	r0, [pc, #12]	; (8003a28 <ILI9341_Write_Command+0x40>)
 8003a1a:	f000 ff5b 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40020800 	.word	0x40020800

08003a2c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003a36:	2201      	movs	r2, #1
 8003a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a3c:	480b      	ldr	r0, [pc, #44]	; (8003a6c <ILI9341_Write_Data+0x40>)
 8003a3e:	f000 ff49 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003a42:	2200      	movs	r2, #0
 8003a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a48:	4808      	ldr	r0, [pc, #32]	; (8003a6c <ILI9341_Write_Data+0x40>)
 8003a4a:	f000 ff43 	bl	80048d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ffb7 	bl	80039c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003a56:	2201      	movs	r2, #1
 8003a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a5c:	4803      	ldr	r0, [pc, #12]	; (8003a6c <ILI9341_Write_Data+0x40>)
 8003a5e:	f000 ff39 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40020800 	.word	0x40020800

08003a70 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4604      	mov	r4, r0
 8003a78:	4608      	mov	r0, r1
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4623      	mov	r3, r4
 8003a80:	80fb      	strh	r3, [r7, #6]
 8003a82:	4603      	mov	r3, r0
 8003a84:	80bb      	strh	r3, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	807b      	strh	r3, [r7, #2]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8003a8e:	202a      	movs	r0, #42	; 0x2a
 8003a90:	f7ff ffaa 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ffc5 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ffc0 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ffb9 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ffb4 	bl	8003a2c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8003ac4:	202b      	movs	r0, #43	; 0x2b
 8003ac6:	f7ff ff8f 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8003aca:	88bb      	ldrh	r3, [r7, #4]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ffaa 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8003ad8:	88bb      	ldrh	r3, [r7, #4]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ffa5 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8003ae2:	883b      	ldrh	r3, [r7, #0]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff9e 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8003af0:	883b      	ldrh	r3, [r7, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff99 	bl	8003a2c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8003afa:	202c      	movs	r0, #44	; 0x2c
 8003afc:	f7ff ff74 	bl	80039e8 <ILI9341_Write_Command>
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd90      	pop	{r4, r7, pc}

08003b08 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b12:	480b      	ldr	r0, [pc, #44]	; (8003b40 <ILI9341_Reset+0x38>)
 8003b14:	f000 fede 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8003b18:	20c8      	movs	r0, #200	; 0xc8
 8003b1a:	f000 fbe1 	bl	80042e0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b24:	4806      	ldr	r0, [pc, #24]	; (8003b40 <ILI9341_Reset+0x38>)
 8003b26:	f000 fed5 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8003b2a:	20c8      	movs	r0, #200	; 0xc8
 8003b2c:	f000 fbd8 	bl	80042e0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8003b30:	2201      	movs	r2, #1
 8003b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b36:	4802      	ldr	r0, [pc, #8]	; (8003b40 <ILI9341_Reset+0x38>)
 8003b38:	f000 fecc 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40020800 	.word	0x40020800

08003b44 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8003b52:	2036      	movs	r0, #54	; 0x36
 8003b54:	f7ff ff48 	bl	80039e8 <ILI9341_Write_Command>
HAL_Delay(1);
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f000 fbc1 	bl	80042e0 <HAL_Delay>
	
switch(screen_rotation) 
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d837      	bhi.n	8003bd4 <ILI9341_Set_Rotation+0x90>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <ILI9341_Set_Rotation+0x28>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b93 	.word	0x08003b93
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003bbf 	.word	0x08003bbf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8003b7c:	2048      	movs	r0, #72	; 0x48
 8003b7e:	f7ff ff55 	bl	8003a2c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8003b82:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <ILI9341_Set_Rotation+0x9c>)
 8003b84:	22f0      	movs	r2, #240	; 0xf0
 8003b86:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <ILI9341_Set_Rotation+0xa0>)
 8003b8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b8e:	801a      	strh	r2, [r3, #0]
			break;
 8003b90:	e021      	b.n	8003bd6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8003b92:	2028      	movs	r0, #40	; 0x28
 8003b94:	f7ff ff4a 	bl	8003a2c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <ILI9341_Set_Rotation+0x9c>)
 8003b9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b9e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <ILI9341_Set_Rotation+0xa0>)
 8003ba2:	22f0      	movs	r2, #240	; 0xf0
 8003ba4:	801a      	strh	r2, [r3, #0]
			break;
 8003ba6:	e016      	b.n	8003bd6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8003ba8:	2088      	movs	r0, #136	; 0x88
 8003baa:	f7ff ff3f 	bl	8003a2c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <ILI9341_Set_Rotation+0x9c>)
 8003bb0:	22f0      	movs	r2, #240	; 0xf0
 8003bb2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <ILI9341_Set_Rotation+0xa0>)
 8003bb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bba:	801a      	strh	r2, [r3, #0]
			break;
 8003bbc:	e00b      	b.n	8003bd6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8003bbe:	20e8      	movs	r0, #232	; 0xe8
 8003bc0:	f7ff ff34 	bl	8003a2c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <ILI9341_Set_Rotation+0x9c>)
 8003bc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <ILI9341_Set_Rotation+0xa0>)
 8003bce:	22f0      	movs	r2, #240	; 0xf0
 8003bd0:	801a      	strh	r2, [r3, #0]
			break;
 8003bd2:	e000      	b.n	8003bd6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8003bd4:	bf00      	nop
	}
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000009e 	.word	0x2000009e
 8003be4:	2000009c 	.word	0x2000009c

08003be8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003bec:	2201      	movs	r2, #1
 8003bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bf2:	4802      	ldr	r0, [pc, #8]	; (8003bfc <ILI9341_Enable+0x14>)
 8003bf4:	f000 fe6e 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40020800 	.word	0x40020800

08003c00 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8003c04:	f7ff fff0 	bl	8003be8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8003c08:	f7ff fecc 	bl	80039a4 <ILI9341_SPI_Init>
ILI9341_Reset();
 8003c0c:	f7ff ff7c 	bl	8003b08 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8003c10:	2001      	movs	r0, #1
 8003c12:	f7ff fee9 	bl	80039e8 <ILI9341_Write_Command>
HAL_Delay(1000);
 8003c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c1a:	f000 fb61 	bl	80042e0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8003c1e:	20cb      	movs	r0, #203	; 0xcb
 8003c20:	f7ff fee2 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8003c24:	2039      	movs	r0, #57	; 0x39
 8003c26:	f7ff ff01 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8003c2a:	202c      	movs	r0, #44	; 0x2c
 8003c2c:	f7ff fefe 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003c30:	2000      	movs	r0, #0
 8003c32:	f7ff fefb 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8003c36:	2034      	movs	r0, #52	; 0x34
 8003c38:	f7ff fef8 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8003c3c:	2002      	movs	r0, #2
 8003c3e:	f7ff fef5 	bl	8003a2c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8003c42:	20cf      	movs	r0, #207	; 0xcf
 8003c44:	f7ff fed0 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003c48:	2000      	movs	r0, #0
 8003c4a:	f7ff feef 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003c4e:	20c1      	movs	r0, #193	; 0xc1
 8003c50:	f7ff feec 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8003c54:	2030      	movs	r0, #48	; 0x30
 8003c56:	f7ff fee9 	bl	8003a2c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8003c5a:	20e8      	movs	r0, #232	; 0xe8
 8003c5c:	f7ff fec4 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8003c60:	2085      	movs	r0, #133	; 0x85
 8003c62:	f7ff fee3 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7ff fee0 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8003c6c:	2078      	movs	r0, #120	; 0x78
 8003c6e:	f7ff fedd 	bl	8003a2c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8003c72:	20ea      	movs	r0, #234	; 0xea
 8003c74:	f7ff feb8 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f7ff fed7 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f7ff fed4 	bl	8003a2c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8003c84:	20ed      	movs	r0, #237	; 0xed
 8003c86:	f7ff feaf 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8003c8a:	2064      	movs	r0, #100	; 0x64
 8003c8c:	f7ff fece 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003c90:	2003      	movs	r0, #3
 8003c92:	f7ff fecb 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8003c96:	2012      	movs	r0, #18
 8003c98:	f7ff fec8 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8003c9c:	2081      	movs	r0, #129	; 0x81
 8003c9e:	f7ff fec5 	bl	8003a2c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8003ca2:	20f7      	movs	r0, #247	; 0xf7
 8003ca4:	f7ff fea0 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8003ca8:	2020      	movs	r0, #32
 8003caa:	f7ff febf 	bl	8003a2c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8003cae:	20c0      	movs	r0, #192	; 0xc0
 8003cb0:	f7ff fe9a 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8003cb4:	2023      	movs	r0, #35	; 0x23
 8003cb6:	f7ff feb9 	bl	8003a2c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8003cba:	20c1      	movs	r0, #193	; 0xc1
 8003cbc:	f7ff fe94 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8003cc0:	2010      	movs	r0, #16
 8003cc2:	f7ff feb3 	bl	8003a2c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8003cc6:	20c5      	movs	r0, #197	; 0xc5
 8003cc8:	f7ff fe8e 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8003ccc:	203e      	movs	r0, #62	; 0x3e
 8003cce:	f7ff fead 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8003cd2:	2028      	movs	r0, #40	; 0x28
 8003cd4:	f7ff feaa 	bl	8003a2c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8003cd8:	20c7      	movs	r0, #199	; 0xc7
 8003cda:	f7ff fe85 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8003cde:	2086      	movs	r0, #134	; 0x86
 8003ce0:	f7ff fea4 	bl	8003a2c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8003ce4:	2036      	movs	r0, #54	; 0x36
 8003ce6:	f7ff fe7f 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8003cea:	2048      	movs	r0, #72	; 0x48
 8003cec:	f7ff fe9e 	bl	8003a2c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8003cf0:	203a      	movs	r0, #58	; 0x3a
 8003cf2:	f7ff fe79 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8003cf6:	2055      	movs	r0, #85	; 0x55
 8003cf8:	f7ff fe98 	bl	8003a2c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8003cfc:	20b1      	movs	r0, #177	; 0xb1
 8003cfe:	f7ff fe73 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003d02:	2000      	movs	r0, #0
 8003d04:	f7ff fe92 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8003d08:	2018      	movs	r0, #24
 8003d0a:	f7ff fe8f 	bl	8003a2c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8003d0e:	20b6      	movs	r0, #182	; 0xb6
 8003d10:	f7ff fe6a 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8003d14:	2008      	movs	r0, #8
 8003d16:	f7ff fe89 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8003d1a:	2082      	movs	r0, #130	; 0x82
 8003d1c:	f7ff fe86 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8003d20:	2027      	movs	r0, #39	; 0x27
 8003d22:	f7ff fe83 	bl	8003a2c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8003d26:	20f2      	movs	r0, #242	; 0xf2
 8003d28:	f7ff fe5e 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f7ff fe7d 	bl	8003a2c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8003d32:	2026      	movs	r0, #38	; 0x26
 8003d34:	f7ff fe58 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7ff fe77 	bl	8003a2c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8003d3e:	20e0      	movs	r0, #224	; 0xe0
 8003d40:	f7ff fe52 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8003d44:	200f      	movs	r0, #15
 8003d46:	f7ff fe71 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003d4a:	2031      	movs	r0, #49	; 0x31
 8003d4c:	f7ff fe6e 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8003d50:	202b      	movs	r0, #43	; 0x2b
 8003d52:	f7ff fe6b 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8003d56:	200c      	movs	r0, #12
 8003d58:	f7ff fe68 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003d5c:	200e      	movs	r0, #14
 8003d5e:	f7ff fe65 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003d62:	2008      	movs	r0, #8
 8003d64:	f7ff fe62 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8003d68:	204e      	movs	r0, #78	; 0x4e
 8003d6a:	f7ff fe5f 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8003d6e:	20f1      	movs	r0, #241	; 0xf1
 8003d70:	f7ff fe5c 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8003d74:	2037      	movs	r0, #55	; 0x37
 8003d76:	f7ff fe59 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003d7a:	2007      	movs	r0, #7
 8003d7c:	f7ff fe56 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8003d80:	2010      	movs	r0, #16
 8003d82:	f7ff fe53 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003d86:	2003      	movs	r0, #3
 8003d88:	f7ff fe50 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003d8c:	200e      	movs	r0, #14
 8003d8e:	f7ff fe4d 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8003d92:	2009      	movs	r0, #9
 8003d94:	f7ff fe4a 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f7ff fe47 	bl	8003a2c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8003d9e:	20e1      	movs	r0, #225	; 0xe1
 8003da0:	f7ff fe22 	bl	80039e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003da4:	2000      	movs	r0, #0
 8003da6:	f7ff fe41 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003daa:	200e      	movs	r0, #14
 8003dac:	f7ff fe3e 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8003db0:	2014      	movs	r0, #20
 8003db2:	f7ff fe3b 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003db6:	2003      	movs	r0, #3
 8003db8:	f7ff fe38 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8003dbc:	2011      	movs	r0, #17
 8003dbe:	f7ff fe35 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003dc2:	2007      	movs	r0, #7
 8003dc4:	f7ff fe32 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003dc8:	2031      	movs	r0, #49	; 0x31
 8003dca:	f7ff fe2f 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003dce:	20c1      	movs	r0, #193	; 0xc1
 8003dd0:	f7ff fe2c 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8003dd4:	2048      	movs	r0, #72	; 0x48
 8003dd6:	f7ff fe29 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003dda:	2008      	movs	r0, #8
 8003ddc:	f7ff fe26 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003de0:	200f      	movs	r0, #15
 8003de2:	f7ff fe23 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8003de6:	200c      	movs	r0, #12
 8003de8:	f7ff fe20 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003dec:	2031      	movs	r0, #49	; 0x31
 8003dee:	f7ff fe1d 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8003df2:	2036      	movs	r0, #54	; 0x36
 8003df4:	f7ff fe1a 	bl	8003a2c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003df8:	200f      	movs	r0, #15
 8003dfa:	f7ff fe17 	bl	8003a2c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8003dfe:	2011      	movs	r0, #17
 8003e00:	f7ff fdf2 	bl	80039e8 <ILI9341_Write_Command>
HAL_Delay(120);
 8003e04:	2078      	movs	r0, #120	; 0x78
 8003e06:	f000 fa6b 	bl	80042e0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8003e0a:	2029      	movs	r0, #41	; 0x29
 8003e0c:	f7ff fdec 	bl	80039e8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7ff fe97 	bl	8003b44 <ILI9341_Set_Rotation>
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003e1c:	b5b0      	push	{r4, r5, r7, lr}
 8003e1e:	b08c      	sub	sp, #48	; 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	80fb      	strh	r3, [r7, #6]
 8003e28:	466b      	mov	r3, sp
 8003e2a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e38:	d202      	bcs.n	8003e40 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e002      	b.n	8003e46 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8003e40:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003e46:	2201      	movs	r2, #1
 8003e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e4c:	483e      	ldr	r0, [pc, #248]	; (8003f48 <ILI9341_Draw_Colour_Burst+0x12c>)
 8003e4e:	f000 fd41 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003e52:	2200      	movs	r2, #0
 8003e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e58:	483b      	ldr	r0, [pc, #236]	; (8003f48 <ILI9341_Draw_Colour_Burst+0x12c>)
 8003e5a:	f000 fd3b 	bl	80048d4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8003e68:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	4620      	mov	r0, r4
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	00cb      	lsls	r3, r1, #3
 8003e80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003e84:	00c2      	lsls	r2, r0, #3
 8003e86:	4620      	mov	r0, r4
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	00cb      	lsls	r3, r1, #3
 8003e96:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003e9a:	00c2      	lsls	r2, r0, #3
 8003e9c:	1de3      	adds	r3, r4, #7
 8003e9e:	08db      	lsrs	r3, r3, #3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	ebad 0d03 	sub.w	sp, sp, r3
 8003ea6:	466b      	mov	r3, sp
 8003ea8:	3300      	adds	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003eac:	2300      	movs	r3, #0
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb0:	e00e      	b.n	8003ed0 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003ebc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	b2d1      	uxtb	r1, r2
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	3302      	adds	r3, #2
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3ec      	bcc.n	8003eb2 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef2:	fb01 f202 	mul.w	r2, r1, r2
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d010      	beq.n	8003f22 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f04:	e009      	b.n	8003f1a <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	230a      	movs	r3, #10
 8003f0e:	480f      	ldr	r0, [pc, #60]	; (8003f4c <ILI9341_Draw_Colour_Burst+0x130>)
 8003f10:	f002 fc91 	bl	8006836 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	3301      	adds	r3, #1
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d3f1      	bcc.n	8003f06 <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	230a      	movs	r3, #10
 8003f2a:	4808      	ldr	r0, [pc, #32]	; (8003f4c <ILI9341_Draw_Colour_Burst+0x130>)
 8003f2c:	f002 fc83 	bl	8006836 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003f30:	2201      	movs	r2, #1
 8003f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f36:	4804      	ldr	r0, [pc, #16]	; (8003f48 <ILI9341_Draw_Colour_Burst+0x12c>)
 8003f38:	f000 fccc 	bl	80048d4 <HAL_GPIO_WritePin>
 8003f3c:	46ad      	mov	sp, r5
}
 8003f3e:	bf00      	nop
 8003f40:	3730      	adds	r7, #48	; 0x30
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bdb0      	pop	{r4, r5, r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40020800 	.word	0x40020800
 8003f4c:	20000410 	.word	0x20000410

08003f50 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <ILI9341_Fill_Screen+0x44>)
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <ILI9341_Fill_Screen+0x48>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2100      	movs	r1, #0
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7ff fd81 	bl	8003a70 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <ILI9341_Fill_Screen+0x44>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <ILI9341_Fill_Screen+0x48>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	fb03 f302 	mul.w	r3, r3, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff ff48 	bl	8003e1c <ILI9341_Draw_Colour_Burst>
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	2000009e 	.word	0x2000009e
 8003f98:	2000009c 	.word	0x2000009c

08003f9c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	80bb      	strh	r3, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003fae:	4b64      	ldr	r3, [pc, #400]	; (8004140 <ILI9341_Draw_Pixel+0x1a4>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	f080 80be 	bcs.w	8004138 <ILI9341_Draw_Pixel+0x19c>
 8003fbc:	4b61      	ldr	r3, [pc, #388]	; (8004144 <ILI9341_Draw_Pixel+0x1a8>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	88ba      	ldrh	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f080 80b7 	bcs.w	8004138 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fd0:	485d      	ldr	r0, [pc, #372]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8003fd2:	f000 fc7f 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fdc:	485a      	ldr	r0, [pc, #360]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8003fde:	f000 fc79 	bl	80048d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8003fe2:	202a      	movs	r0, #42	; 0x2a
 8003fe4:	f7ff fcee 	bl	80039c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fee:	4856      	ldr	r0, [pc, #344]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8003ff0:	f000 fc70 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ffa:	4853      	ldr	r0, [pc, #332]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8003ffc:	f000 fc6a 	bl	80048d4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004000:	2200      	movs	r2, #0
 8004002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004006:	4850      	ldr	r0, [pc, #320]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8004008:	f000 fc64 	bl	80048d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29b      	uxth	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	753b      	strb	r3, [r7, #20]
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	757b      	strb	r3, [r7, #21]
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	3301      	adds	r3, #1
 8004020:	121b      	asrs	r3, r3, #8
 8004022:	b2db      	uxtb	r3, r3
 8004024:	75bb      	strb	r3, [r7, #22]
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3301      	adds	r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8004030:	f107 0114 	add.w	r1, r7, #20
 8004034:	2301      	movs	r3, #1
 8004036:	2204      	movs	r2, #4
 8004038:	4844      	ldr	r0, [pc, #272]	; (800414c <ILI9341_Draw_Pixel+0x1b0>)
 800403a:	f002 fbfc 	bl	8006836 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800403e:	2201      	movs	r2, #1
 8004040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004044:	4840      	ldr	r0, [pc, #256]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8004046:	f000 fc45 	bl	80048d4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800404a:	2200      	movs	r2, #0
 800404c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004050:	483d      	ldr	r0, [pc, #244]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8004052:	f000 fc3f 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004056:	2200      	movs	r2, #0
 8004058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800405c:	483a      	ldr	r0, [pc, #232]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 800405e:	f000 fc39 	bl	80048d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8004062:	202b      	movs	r0, #43	; 0x2b
 8004064:	f7ff fcae 	bl	80039c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8004068:	2201      	movs	r2, #1
 800406a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800406e:	4836      	ldr	r0, [pc, #216]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8004070:	f000 fc30 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8004074:	2201      	movs	r2, #1
 8004076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800407a:	4833      	ldr	r0, [pc, #204]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 800407c:	f000 fc2a 	bl	80048d4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004086:	4830      	ldr	r0, [pc, #192]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8004088:	f000 fc24 	bl	80048d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800408c:	88bb      	ldrh	r3, [r7, #4]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	b29b      	uxth	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	743b      	strb	r3, [r7, #16]
 8004096:	88bb      	ldrh	r3, [r7, #4]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	747b      	strb	r3, [r7, #17]
 800409c:	88bb      	ldrh	r3, [r7, #4]
 800409e:	3301      	adds	r3, #1
 80040a0:	121b      	asrs	r3, r3, #8
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	74bb      	strb	r3, [r7, #18]
 80040a6:	88bb      	ldrh	r3, [r7, #4]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80040b0:	f107 0110 	add.w	r1, r7, #16
 80040b4:	2301      	movs	r3, #1
 80040b6:	2204      	movs	r2, #4
 80040b8:	4824      	ldr	r0, [pc, #144]	; (800414c <ILI9341_Draw_Pixel+0x1b0>)
 80040ba:	f002 fbbc 	bl	8006836 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80040be:	2201      	movs	r2, #1
 80040c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c4:	4820      	ldr	r0, [pc, #128]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 80040c6:	f000 fc05 	bl	80048d4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80040ca:	2200      	movs	r2, #0
 80040cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040d0:	481d      	ldr	r0, [pc, #116]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 80040d2:	f000 fbff 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80040d6:	2200      	movs	r2, #0
 80040d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040dc:	481a      	ldr	r0, [pc, #104]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 80040de:	f000 fbf9 	bl	80048d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80040e2:	202c      	movs	r0, #44	; 0x2c
 80040e4:	f7ff fc6e 	bl	80039c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80040e8:	2201      	movs	r2, #1
 80040ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ee:	4816      	ldr	r0, [pc, #88]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 80040f0:	f000 fbf0 	bl	80048d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80040f4:	2201      	movs	r2, #1
 80040f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040fa:	4813      	ldr	r0, [pc, #76]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 80040fc:	f000 fbea 	bl	80048d4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004100:	2200      	movs	r2, #0
 8004102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004106:	4810      	ldr	r0, [pc, #64]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8004108:	f000 fbe4 	bl	80048d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800410c:	887b      	ldrh	r3, [r7, #2]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	b29b      	uxth	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	733b      	strb	r3, [r7, #12]
 8004116:	887b      	ldrh	r3, [r7, #2]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800411c:	f107 010c 	add.w	r1, r7, #12
 8004120:	2301      	movs	r3, #1
 8004122:	2202      	movs	r2, #2
 8004124:	4809      	ldr	r0, [pc, #36]	; (800414c <ILI9341_Draw_Pixel+0x1b0>)
 8004126:	f002 fb86 	bl	8006836 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800412a:	2201      	movs	r2, #1
 800412c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004130:	4805      	ldr	r0, [pc, #20]	; (8004148 <ILI9341_Draw_Pixel+0x1ac>)
 8004132:	f000 fbcf 	bl	80048d4 <HAL_GPIO_WritePin>
 8004136:	e000      	b.n	800413a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004138:	bf00      	nop
	
}
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000009e 	.word	0x2000009e
 8004144:	2000009c 	.word	0x2000009c
 8004148:	40020800 	.word	0x40020800
 800414c:	20000410 	.word	0x20000410

08004150 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4623      	mov	r3, r4
 8004160:	80fb      	strh	r3, [r7, #6]
 8004162:	4603      	mov	r3, r0
 8004164:	80bb      	strh	r3, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	807b      	strh	r3, [r7, #2]
 800416a:	4613      	mov	r3, r2
 800416c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <ILI9341_Draw_Rectangle+0xb0>)
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	429a      	cmp	r2, r3
 8004178:	d23d      	bcs.n	80041f6 <ILI9341_Draw_Rectangle+0xa6>
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <ILI9341_Draw_Rectangle+0xb4>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	88ba      	ldrh	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d237      	bcs.n	80041f6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	887b      	ldrh	r3, [r7, #2]
 800418a:	4413      	add	r3, r2
 800418c:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <ILI9341_Draw_Rectangle+0xb0>)
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	b292      	uxth	r2, r2
 8004192:	4293      	cmp	r3, r2
 8004194:	dd05      	ble.n	80041a2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <ILI9341_Draw_Rectangle+0xb0>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29a      	uxth	r2, r3
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80041a2:	88ba      	ldrh	r2, [r7, #4]
 80041a4:	883b      	ldrh	r3, [r7, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <ILI9341_Draw_Rectangle+0xb4>)
 80041aa:	8812      	ldrh	r2, [r2, #0]
 80041ac:	b292      	uxth	r2, r2
 80041ae:	4293      	cmp	r3, r2
 80041b0:	dd05      	ble.n	80041be <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <ILI9341_Draw_Rectangle+0xb4>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	88bb      	ldrh	r3, [r7, #4]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	4413      	add	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29c      	uxth	r4, r3
 80041ca:	88ba      	ldrh	r2, [r7, #4]
 80041cc:	883b      	ldrh	r3, [r7, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	88b9      	ldrh	r1, [r7, #4]
 80041d8:	88f8      	ldrh	r0, [r7, #6]
 80041da:	4622      	mov	r2, r4
 80041dc:	f7ff fc48 	bl	8003a70 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80041e0:	883b      	ldrh	r3, [r7, #0]
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	8b3b      	ldrh	r3, [r7, #24]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fe14 	bl	8003e1c <ILI9341_Draw_Colour_Burst>
 80041f4:	e000      	b.n	80041f8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80041f6:	bf00      	nop
}
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd90      	pop	{r4, r7, pc}
 80041fe:	bf00      	nop
 8004200:	2000009e 	.word	0x2000009e
 8004204:	2000009c 	.word	0x2000009c

08004208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_Init+0x34>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_Init+0x34>)
 8004212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004216:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_Init+0x34>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_Init+0x34>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004224:	2003      	movs	r0, #3
 8004226:	f000 f94f 	bl	80044c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800422a:	2000      	movs	r0, #0
 800422c:	f000 f808 	bl	8004240 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004230:	f7fe fe8a 	bl	8002f48 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00

08004240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004248:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_InitTick+0x54>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_InitTick+0x58>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004256:	fbb3 f3f1 	udiv	r3, r3, r1
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f967 	bl	8004532 <HAL_SYSTICK_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e00e      	b.n	800428c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b0f      	cmp	r3, #15
 8004272:	d80a      	bhi.n	800428a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004274:	2200      	movs	r2, #0
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	f000 f92f 	bl	80044de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004280:	4a06      	ldr	r2, [pc, #24]	; (800429c <HAL_InitTick+0x5c>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000098 	.word	0x20000098
 8004298:	200000a4 	.word	0x200000a4
 800429c:	200000a0 	.word	0x200000a0

080042a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_IncTick+0x20>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_IncTick+0x24>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <HAL_IncTick+0x24>)
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200000a4 	.word	0x200000a4
 80042c4:	20000660 	.word	0x20000660

080042c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return uwTick;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_GetTick+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000660 	.word	0x20000660

080042e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042e8:	f7ff ffee 	bl	80042c8 <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d005      	beq.n	8004306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_Delay+0x44>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004306:	bf00      	nop
 8004308:	f7ff ffde 	bl	80042c8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d8f7      	bhi.n	8004308 <HAL_Delay+0x28>
  {
  }
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200000a4 	.word	0x200000a4

08004328 <__NVIC_SetPriorityGrouping>:
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <__NVIC_SetPriorityGrouping+0x40>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004344:	4013      	ands	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <__NVIC_SetPriorityGrouping+0x44>)
 8004352:	4313      	orrs	r3, r2
 8004354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004356:	4a04      	ldr	r2, [pc, #16]	; (8004368 <__NVIC_SetPriorityGrouping+0x40>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	60d3      	str	r3, [r2, #12]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000ed00 	.word	0xe000ed00
 800436c:	05fa0000 	.word	0x05fa0000

08004370 <__NVIC_GetPriorityGrouping>:
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <__NVIC_GetPriorityGrouping+0x18>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 0307 	and.w	r3, r3, #7
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <__NVIC_EnableIRQ>:
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	db0b      	blt.n	80043b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	f003 021f 	and.w	r2, r3, #31
 80043a4:	4907      	ldr	r1, [pc, #28]	; (80043c4 <__NVIC_EnableIRQ+0x38>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2001      	movs	r0, #1
 80043ae:	fa00 f202 	lsl.w	r2, r0, r2
 80043b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	e000e100 	.word	0xe000e100

080043c8 <__NVIC_SetPriority>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	6039      	str	r1, [r7, #0]
 80043d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	db0a      	blt.n	80043f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	490c      	ldr	r1, [pc, #48]	; (8004414 <__NVIC_SetPriority+0x4c>)
 80043e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e6:	0112      	lsls	r2, r2, #4
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	440b      	add	r3, r1
 80043ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043f0:	e00a      	b.n	8004408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4908      	ldr	r1, [pc, #32]	; (8004418 <__NVIC_SetPriority+0x50>)
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	3b04      	subs	r3, #4
 8004400:	0112      	lsls	r2, r2, #4
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	440b      	add	r3, r1
 8004406:	761a      	strb	r2, [r3, #24]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000e100 	.word	0xe000e100
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <NVIC_EncodePriority>:
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f1c3 0307 	rsb	r3, r3, #7
 8004436:	2b04      	cmp	r3, #4
 8004438:	bf28      	it	cs
 800443a:	2304      	movcs	r3, #4
 800443c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3304      	adds	r3, #4
 8004442:	2b06      	cmp	r3, #6
 8004444:	d902      	bls.n	800444c <NVIC_EncodePriority+0x30>
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3b03      	subs	r3, #3
 800444a:	e000      	b.n	800444e <NVIC_EncodePriority+0x32>
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004450:	f04f 32ff 	mov.w	r2, #4294967295
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	401a      	ands	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004464:	f04f 31ff 	mov.w	r1, #4294967295
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	43d9      	mvns	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004474:	4313      	orrs	r3, r2
}
 8004476:	4618      	mov	r0, r3
 8004478:	3724      	adds	r7, #36	; 0x24
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004494:	d301      	bcc.n	800449a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004496:	2301      	movs	r3, #1
 8004498:	e00f      	b.n	80044ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <SysTick_Config+0x40>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044a2:	210f      	movs	r1, #15
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	f7ff ff8e 	bl	80043c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <SysTick_Config+0x40>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <SysTick_Config+0x40>)
 80044b4:	2207      	movs	r2, #7
 80044b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	e000e010 	.word	0xe000e010

080044c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff29 	bl	8004328 <__NVIC_SetPriorityGrouping>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044f0:	f7ff ff3e 	bl	8004370 <__NVIC_GetPriorityGrouping>
 80044f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f7ff ff8e 	bl	800441c <NVIC_EncodePriority>
 8004500:	4602      	mov	r2, r0
 8004502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff5d 	bl	80043c8 <__NVIC_SetPriority>
}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff31 	bl	800438c <__NVIC_EnableIRQ>
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ffa2 	bl	8004484 <SysTick_Config>
 8004540:	4603      	mov	r3, r0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e175      	b.n	8004858 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800456c:	2201      	movs	r2, #1
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	429a      	cmp	r2, r3
 8004586:	f040 8164 	bne.w	8004852 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d00b      	beq.n	80045aa <HAL_GPIO_Init+0x5e>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d007      	beq.n	80045aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800459e:	2b11      	cmp	r3, #17
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b12      	cmp	r3, #18
 80045a8:	d130      	bne.n	800460c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e0:	2201      	movs	r2, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 0201 	and.w	r2, r3, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x100>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b12      	cmp	r3, #18
 800464a:	d123      	bne.n	8004694 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	08da      	lsrs	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3208      	adds	r2, #8
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	220f      	movs	r2, #15
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	08da      	lsrs	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3208      	adds	r2, #8
 800468e:	69b9      	ldr	r1, [r7, #24]
 8004690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 0203 	and.w	r2, r3, #3
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80be 	beq.w	8004852 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d6:	4b66      	ldr	r3, [pc, #408]	; (8004870 <HAL_GPIO_Init+0x324>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	4a65      	ldr	r2, [pc, #404]	; (8004870 <HAL_GPIO_Init+0x324>)
 80046dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e0:	6453      	str	r3, [r2, #68]	; 0x44
 80046e2:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_GPIO_Init+0x324>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80046ee:	4a61      	ldr	r2, [pc, #388]	; (8004874 <HAL_GPIO_Init+0x328>)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	3302      	adds	r3, #2
 80046f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	220f      	movs	r2, #15
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a58      	ldr	r2, [pc, #352]	; (8004878 <HAL_GPIO_Init+0x32c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d037      	beq.n	800478a <HAL_GPIO_Init+0x23e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a57      	ldr	r2, [pc, #348]	; (800487c <HAL_GPIO_Init+0x330>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d031      	beq.n	8004786 <HAL_GPIO_Init+0x23a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a56      	ldr	r2, [pc, #344]	; (8004880 <HAL_GPIO_Init+0x334>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02b      	beq.n	8004782 <HAL_GPIO_Init+0x236>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a55      	ldr	r2, [pc, #340]	; (8004884 <HAL_GPIO_Init+0x338>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d025      	beq.n	800477e <HAL_GPIO_Init+0x232>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a54      	ldr	r2, [pc, #336]	; (8004888 <HAL_GPIO_Init+0x33c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01f      	beq.n	800477a <HAL_GPIO_Init+0x22e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a53      	ldr	r2, [pc, #332]	; (800488c <HAL_GPIO_Init+0x340>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d019      	beq.n	8004776 <HAL_GPIO_Init+0x22a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a52      	ldr	r2, [pc, #328]	; (8004890 <HAL_GPIO_Init+0x344>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <HAL_GPIO_Init+0x226>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a51      	ldr	r2, [pc, #324]	; (8004894 <HAL_GPIO_Init+0x348>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00d      	beq.n	800476e <HAL_GPIO_Init+0x222>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a50      	ldr	r2, [pc, #320]	; (8004898 <HAL_GPIO_Init+0x34c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <HAL_GPIO_Init+0x21e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4f      	ldr	r2, [pc, #316]	; (800489c <HAL_GPIO_Init+0x350>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_GPIO_Init+0x21a>
 8004762:	2309      	movs	r3, #9
 8004764:	e012      	b.n	800478c <HAL_GPIO_Init+0x240>
 8004766:	230a      	movs	r3, #10
 8004768:	e010      	b.n	800478c <HAL_GPIO_Init+0x240>
 800476a:	2308      	movs	r3, #8
 800476c:	e00e      	b.n	800478c <HAL_GPIO_Init+0x240>
 800476e:	2307      	movs	r3, #7
 8004770:	e00c      	b.n	800478c <HAL_GPIO_Init+0x240>
 8004772:	2306      	movs	r3, #6
 8004774:	e00a      	b.n	800478c <HAL_GPIO_Init+0x240>
 8004776:	2305      	movs	r3, #5
 8004778:	e008      	b.n	800478c <HAL_GPIO_Init+0x240>
 800477a:	2304      	movs	r3, #4
 800477c:	e006      	b.n	800478c <HAL_GPIO_Init+0x240>
 800477e:	2303      	movs	r3, #3
 8004780:	e004      	b.n	800478c <HAL_GPIO_Init+0x240>
 8004782:	2302      	movs	r3, #2
 8004784:	e002      	b.n	800478c <HAL_GPIO_Init+0x240>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_GPIO_Init+0x240>
 800478a:	2300      	movs	r3, #0
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	f002 0203 	and.w	r2, r2, #3
 8004792:	0092      	lsls	r2, r2, #2
 8004794:	4093      	lsls	r3, r2
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800479c:	4935      	ldr	r1, [pc, #212]	; (8004874 <HAL_GPIO_Init+0x328>)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	3302      	adds	r3, #2
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047aa:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <HAL_GPIO_Init+0x354>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ce:	4a34      	ldr	r2, [pc, #208]	; (80048a0 <HAL_GPIO_Init+0x354>)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <HAL_GPIO_Init+0x354>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047f8:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <HAL_GPIO_Init+0x354>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fe:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_GPIO_Init+0x354>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	43db      	mvns	r3, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4013      	ands	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004822:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_GPIO_Init+0x354>)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_GPIO_Init+0x354>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <HAL_GPIO_Init+0x354>)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b0f      	cmp	r3, #15
 800485c:	f67f ae86 	bls.w	800456c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3724      	adds	r7, #36	; 0x24
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800
 8004874:	40013800 	.word	0x40013800
 8004878:	40020000 	.word	0x40020000
 800487c:	40020400 	.word	0x40020400
 8004880:	40020800 	.word	0x40020800
 8004884:	40020c00 	.word	0x40020c00
 8004888:	40021000 	.word	0x40021000
 800488c:	40021400 	.word	0x40021400
 8004890:	40021800 	.word	0x40021800
 8004894:	40021c00 	.word	0x40021c00
 8004898:	40022000 	.word	0x40022000
 800489c:	40022400 	.word	0x40022400
 80048a0:	40013c00 	.word	0x40013c00

080048a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
 80048c0:	e001      	b.n	80048c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
 80048e0:	4613      	mov	r3, r2
 80048e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048e4:	787b      	ldrb	r3, [r7, #1]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ea:	887a      	ldrh	r2, [r7, #2]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048f0:	e003      	b.n	80048fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048f2:	887b      	ldrh	r3, [r7, #2]
 80048f4:	041a      	lsls	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	619a      	str	r2, [r3, #24]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800491e:	4a05      	ldr	r2, [pc, #20]	; (8004934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fa2e 	bl	8002d88 <HAL_GPIO_EXTI_Callback>
  }
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40013c00 	.word	0x40013c00

08004938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e07f      	b.n	8004a4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc f958 	bl	8000c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2224      	movs	r2, #36	; 0x24
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004988:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004998:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d107      	bne.n	80049b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	e006      	b.n	80049c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d104      	bne.n	80049d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_I2C_Init+0x11c>)
 80049de:	430b      	orrs	r3, r1
 80049e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	ea42 0103 	orr.w	r1, r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	021a      	lsls	r2, r3, #8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69d9      	ldr	r1, [r3, #28]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	02008000 	.word	0x02008000

08004a58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	f040 80f9 	bne.w	8004c72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x34>
 8004a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0ed      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2C_Mem_Write+0x4e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0e6      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aae:	f7ff fc0b 	bl	80042c8 <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2319      	movs	r3, #25
 8004aba:	2201      	movs	r2, #1
 8004abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fac3 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0d1      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2221      	movs	r2, #33	; 0x21
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004af8:	88f8      	ldrh	r0, [r7, #6]
 8004afa:	893a      	ldrh	r2, [r7, #8]
 8004afc:	8979      	ldrh	r1, [r7, #10]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4603      	mov	r3, r0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f9d3 	bl	8004eb4 <I2C_RequestMemoryWrite>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0a9      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2bff      	cmp	r3, #255	; 0xff
 8004b28:	d90e      	bls.n	8004b48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	8979      	ldrh	r1, [r7, #10]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fba5 	bl	8005290 <I2C_TransferConfig>
 8004b46:	e00f      	b.n	8004b68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	8979      	ldrh	r1, [r7, #10]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fb94 	bl	8005290 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 faad 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e07b      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d034      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d130      	bne.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa3f 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e04d      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2bff      	cmp	r3, #255	; 0xff
 8004be0:	d90e      	bls.n	8004c00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	8979      	ldrh	r1, [r7, #10]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fb49 	bl	8005290 <I2C_TransferConfig>
 8004bfe:	e00f      	b.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	8979      	ldrh	r1, [r7, #10]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fb38 	bl	8005290 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d19e      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fa8c 	bl	800514c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e01a      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2220      	movs	r2, #32
 8004c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_I2C_Mem_Write+0x224>)
 8004c52:	400b      	ands	r3, r1
 8004c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
  }
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	fe00e800 	.word	0xfe00e800

08004c80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	f040 80fd 	bne.w	8004ea2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0x34>
 8004cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0f1      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_I2C_Mem_Read+0x4e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0ea      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cd6:	f7ff faf7 	bl	80042c8 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2319      	movs	r3, #25
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f9af 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0d5      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2222      	movs	r2, #34	; 0x22
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2240      	movs	r2, #64	; 0x40
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d20:	88f8      	ldrh	r0, [r7, #6]
 8004d22:	893a      	ldrh	r2, [r7, #8]
 8004d24:	8979      	ldrh	r1, [r7, #10]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4603      	mov	r3, r0
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f913 	bl	8004f5c <I2C_RequestMemoryRead>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0ad      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2bff      	cmp	r3, #255	; 0xff
 8004d50:	d90e      	bls.n	8004d70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	22ff      	movs	r2, #255	; 0xff
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	4b52      	ldr	r3, [pc, #328]	; (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fa91 	bl	8005290 <I2C_TransferConfig>
 8004d6e:	e00f      	b.n	8004d90 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	8979      	ldrh	r1, [r7, #10]
 8004d82:	4b4a      	ldr	r3, [pc, #296]	; (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fa80 	bl	8005290 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2200      	movs	r2, #0
 8004d98:	2104      	movs	r1, #4
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f956 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07c      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d034      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d130      	bne.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f927 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04d      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	d90e      	bls.n	8004e30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	8979      	ldrh	r1, [r7, #10]
 8004e20:	2300      	movs	r3, #0
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fa31 	bl	8005290 <I2C_TransferConfig>
 8004e2e:	e00f      	b.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	8979      	ldrh	r1, [r7, #10]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fa20 	bl	8005290 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d19a      	bne.n	8004d90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f974 	bl	800514c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e01a      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2220      	movs	r2, #32
 8004e74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6859      	ldr	r1, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_I2C_Mem_Read+0x230>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	80002400 	.word	0x80002400
 8004eb0:	fe00e800 	.word	0xfe00e800

08004eb4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	817b      	strh	r3, [r7, #10]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	813b      	strh	r3, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	8979      	ldrh	r1, [r7, #10]
 8004ed4:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <I2C_RequestMemoryWrite+0xa4>)
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f9d7 	bl	8005290 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8f0 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e02c      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
 8004f06:	e015      	b.n	8004f34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f08:	893b      	ldrh	r3, [r7, #8]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	69b9      	ldr	r1, [r7, #24]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8d6 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e012      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f884 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	80002000 	.word	0x80002000

08004f5c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	813b      	strh	r3, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	8979      	ldrh	r1, [r7, #10]
 8004f7c:	4b20      	ldr	r3, [pc, #128]	; (8005000 <I2C_RequestMemoryRead+0xa4>)
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f984 	bl	8005290 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	69b9      	ldr	r1, [r7, #24]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f89d 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e02c      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa2:	893b      	ldrh	r3, [r7, #8]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
 8004fac:	e015      	b.n	8004fda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fae:	893b      	ldrh	r3, [r7, #8]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	69b9      	ldr	r1, [r7, #24]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f883 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e012      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd0:	893b      	ldrh	r3, [r7, #8]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f831 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	80002000 	.word	0x80002000

08005004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d103      	bne.n	8005022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d007      	beq.n	8005040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	619a      	str	r2, [r3, #24]
  }
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800505c:	e022      	b.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d01e      	beq.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005066:	f7ff f92f 	bl	80042c8 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d113      	bne.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e00f      	b.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d0cd      	beq.n	800505e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050d8:	e02c      	b.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f870 	bl	80051c4 <I2C_IsAcknowledgeFailed>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e02a      	b.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d01e      	beq.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7ff f8e7 	bl	80042c8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d113      	bne.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e007      	b.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d1cb      	bne.n	80050da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005158:	e028      	b.n	80051ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f830 	bl	80051c4 <I2C_IsAcknowledgeFailed>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e026      	b.n	80051bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7ff f8ab 	bl	80042c8 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d113      	bne.n	80051ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e007      	b.n	80051bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d1cf      	bne.n	800515a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d151      	bne.n	8005282 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051de:	e022      	b.n	8005226 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d01e      	beq.n	8005226 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e8:	f7ff f86e 	bl	80042c8 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <I2C_IsAcknowledgeFailed+0x3a>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d113      	bne.n	8005226 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f043 0220 	orr.w	r2, r3, #32
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e02e      	b.n	8005284 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b20      	cmp	r3, #32
 8005232:	d1d5      	bne.n	80051e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2210      	movs	r2, #16
 800523a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2220      	movs	r2, #32
 8005242:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff fedd 	bl	8005004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b0d      	ldr	r3, [pc, #52]	; (800528c <I2C_IsAcknowledgeFailed+0xc8>)
 8005256:	400b      	ands	r3, r1
 8005258:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	f043 0204 	orr.w	r2, r3, #4
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	fe00e800 	.word	0xfe00e800

08005290 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	817b      	strh	r3, [r7, #10]
 800529e:	4613      	mov	r3, r2
 80052a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	0d5b      	lsrs	r3, r3, #21
 80052ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <I2C_TransferConfig+0x58>)
 80052b2:	430b      	orrs	r3, r1
 80052b4:	43db      	mvns	r3, r3
 80052b6:	ea02 0103 	and.w	r1, r2, r3
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052c0:	7a7b      	ldrb	r3, [r7, #9]
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	03ff63ff 	.word	0x03ff63ff

080052ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d138      	bne.n	8005374 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800530c:	2302      	movs	r3, #2
 800530e:	e032      	b.n	8005376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2224      	movs	r2, #36	; 0x24
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800533e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b20      	cmp	r3, #32
 8005396:	d139      	bne.n	800540c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e033      	b.n	800540e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2224      	movs	r2, #36	; 0x24
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542a:	6013      	str	r3, [r2, #0]
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40007000 	.word	0x40007000

0800543c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005446:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800544c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005450:	6413      	str	r3, [r2, #64]	; 0x40
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800545e:	4b1e      	ldr	r3, [pc, #120]	; (80054d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005468:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800546a:	f7fe ff2d 	bl	80042c8 <HAL_GetTick>
 800546e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005470:	e009      	b.n	8005486 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005472:	f7fe ff29 	bl	80042c8 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005480:	d901      	bls.n	8005486 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e022      	b.n	80054cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005492:	d1ee      	bne.n	8005472 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005494:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0f      	ldr	r2, [pc, #60]	; (80054d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800549a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a0:	f7fe ff12 	bl	80042c8 <HAL_GetTick>
 80054a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054a6:	e009      	b.n	80054bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054a8:	f7fe ff0e 	bl	80042c8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b6:	d901      	bls.n	80054bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e007      	b.n	80054cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c8:	d1ee      	bne.n	80054a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40007000 	.word	0x40007000

080054dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80054e4:	2300      	movs	r3, #0
 80054e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e29b      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8087 	beq.w	800560e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005500:	4b96      	ldr	r3, [pc, #600]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b04      	cmp	r3, #4
 800550a:	d00c      	beq.n	8005526 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550c:	4b93      	ldr	r3, [pc, #588]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 030c 	and.w	r3, r3, #12
 8005514:	2b08      	cmp	r3, #8
 8005516:	d112      	bne.n	800553e <HAL_RCC_OscConfig+0x62>
 8005518:	4b90      	ldr	r3, [pc, #576]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005524:	d10b      	bne.n	800553e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005526:	4b8d      	ldr	r3, [pc, #564]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d06c      	beq.n	800560c <HAL_RCC_OscConfig+0x130>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d168      	bne.n	800560c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e275      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005546:	d106      	bne.n	8005556 <HAL_RCC_OscConfig+0x7a>
 8005548:	4b84      	ldr	r3, [pc, #528]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a83      	ldr	r2, [pc, #524]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800554e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	e02e      	b.n	80055b4 <HAL_RCC_OscConfig+0xd8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0x9c>
 800555e:	4b7f      	ldr	r3, [pc, #508]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a7e      	ldr	r2, [pc, #504]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b7c      	ldr	r3, [pc, #496]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a7b      	ldr	r2, [pc, #492]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e01d      	b.n	80055b4 <HAL_RCC_OscConfig+0xd8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0xc0>
 8005582:	4b76      	ldr	r3, [pc, #472]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a75      	ldr	r2, [pc, #468]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4b73      	ldr	r3, [pc, #460]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a72      	ldr	r2, [pc, #456]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0xd8>
 800559c:	4b6f      	ldr	r3, [pc, #444]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6e      	ldr	r2, [pc, #440]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b6c      	ldr	r3, [pc, #432]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a6b      	ldr	r2, [pc, #428]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80055ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fe fe84 	bl	80042c8 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fe fe80 	bl	80042c8 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e229      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	4b61      	ldr	r3, [pc, #388]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0xe8>
 80055e2:	e014      	b.n	800560e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fe fe70 	bl	80042c8 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ec:	f7fe fe6c 	bl	80042c8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e215      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	4b57      	ldr	r3, [pc, #348]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x110>
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d069      	beq.n	80056ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800561a:	4b50      	ldr	r3, [pc, #320]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005626:	4b4d      	ldr	r3, [pc, #308]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b08      	cmp	r3, #8
 8005630:	d11c      	bne.n	800566c <HAL_RCC_OscConfig+0x190>
 8005632:	4b4a      	ldr	r3, [pc, #296]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d116      	bne.n	800566c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563e:	4b47      	ldr	r3, [pc, #284]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_RCC_OscConfig+0x17a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d001      	beq.n	8005656 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e1e9      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	4b41      	ldr	r3, [pc, #260]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	493d      	ldr	r1, [pc, #244]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005666:	4313      	orrs	r3, r2
 8005668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	e040      	b.n	80056ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d023      	beq.n	80056bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005674:	4b39      	ldr	r3, [pc, #228]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a38      	ldr	r2, [pc, #224]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fe fe22 	bl	80042c8 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005688:	f7fe fe1e 	bl	80042c8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e1c7      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569a:	4b30      	ldr	r3, [pc, #192]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a6:	4b2d      	ldr	r3, [pc, #180]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4929      	ldr	r1, [pc, #164]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]
 80056ba:	e018      	b.n	80056ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056bc:	4b27      	ldr	r3, [pc, #156]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a26      	ldr	r2, [pc, #152]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fe fdfe 	bl	80042c8 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d0:	f7fe fdfa 	bl	80042c8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e1a3      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <HAL_RCC_OscConfig+0x280>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d038      	beq.n	800576c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d019      	beq.n	8005736 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005702:	4b16      	ldr	r3, [pc, #88]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005706:	4a15      	ldr	r2, [pc, #84]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570e:	f7fe fddb 	bl	80042c8 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005716:	f7fe fdd7 	bl	80042c8 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e180      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800572a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCC_OscConfig+0x23a>
 8005734:	e01a      	b.n	800576c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCC_OscConfig+0x280>)
 8005738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573a:	4a08      	ldr	r2, [pc, #32]	; (800575c <HAL_RCC_OscConfig+0x280>)
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005742:	f7fe fdc1 	bl	80042c8 <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574a:	f7fe fdbd 	bl	80042c8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d903      	bls.n	8005760 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e166      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
 800575c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005760:	4b92      	ldr	r3, [pc, #584]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ee      	bne.n	800574a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80a4 	beq.w	80058c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577a:	4b8c      	ldr	r3, [pc, #560]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005786:	4b89      	ldr	r3, [pc, #548]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	4a88      	ldr	r2, [pc, #544]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800578c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005790:	6413      	str	r3, [r2, #64]	; 0x40
 8005792:	4b86      	ldr	r3, [pc, #536]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800579e:	2301      	movs	r3, #1
 80057a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a2:	4b83      	ldr	r3, [pc, #524]	; (80059b0 <HAL_RCC_OscConfig+0x4d4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d118      	bne.n	80057e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80057ae:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <HAL_RCC_OscConfig+0x4d4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a7f      	ldr	r2, [pc, #508]	; (80059b0 <HAL_RCC_OscConfig+0x4d4>)
 80057b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ba:	f7fe fd85 	bl	80042c8 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c2:	f7fe fd81 	bl	80042c8 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b64      	cmp	r3, #100	; 0x64
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e12a      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d4:	4b76      	ldr	r3, [pc, #472]	; (80059b0 <HAL_RCC_OscConfig+0x4d4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0f0      	beq.n	80057c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d106      	bne.n	80057f6 <HAL_RCC_OscConfig+0x31a>
 80057e8:	4b70      	ldr	r3, [pc, #448]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a6f      	ldr	r2, [pc, #444]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
 80057f4:	e02d      	b.n	8005852 <HAL_RCC_OscConfig+0x376>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x33c>
 80057fe:	4b6b      	ldr	r3, [pc, #428]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	4a6a      	ldr	r2, [pc, #424]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	6713      	str	r3, [r2, #112]	; 0x70
 800580a:	4b68      	ldr	r3, [pc, #416]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a67      	ldr	r2, [pc, #412]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005810:	f023 0304 	bic.w	r3, r3, #4
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	e01c      	b.n	8005852 <HAL_RCC_OscConfig+0x376>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b05      	cmp	r3, #5
 800581e:	d10c      	bne.n	800583a <HAL_RCC_OscConfig+0x35e>
 8005820:	4b62      	ldr	r3, [pc, #392]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	4a61      	ldr	r2, [pc, #388]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	6713      	str	r3, [r2, #112]	; 0x70
 800582c:	4b5f      	ldr	r3, [pc, #380]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	4a5e      	ldr	r2, [pc, #376]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6713      	str	r3, [r2, #112]	; 0x70
 8005838:	e00b      	b.n	8005852 <HAL_RCC_OscConfig+0x376>
 800583a:	4b5c      	ldr	r3, [pc, #368]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a5b      	ldr	r2, [pc, #364]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	4b59      	ldr	r3, [pc, #356]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	4a58      	ldr	r2, [pc, #352]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800584c:	f023 0304 	bic.w	r3, r3, #4
 8005850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d015      	beq.n	8005886 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fe fd35 	bl	80042c8 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fe fd31 	bl	80042c8 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e0d8      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005878:	4b4c      	ldr	r3, [pc, #304]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ee      	beq.n	8005862 <HAL_RCC_OscConfig+0x386>
 8005884:	e014      	b.n	80058b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fe fd1f 	bl	80042c8 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fe fd1b 	bl	80042c8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e0c2      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a4:	4b41      	ldr	r3, [pc, #260]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ee      	bne.n	800588e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d105      	bne.n	80058c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b6:	4b3d      	ldr	r3, [pc, #244]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	4a3c      	ldr	r2, [pc, #240]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80058bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 80ae 	beq.w	8005a28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058cc:	4b37      	ldr	r3, [pc, #220]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d06d      	beq.n	80059b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d14b      	bne.n	8005978 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e0:	4b32      	ldr	r3, [pc, #200]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a31      	ldr	r2, [pc, #196]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80058e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7fe fcec 	bl	80042c8 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fe fce8 	bl	80042c8 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e091      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	4b29      	ldr	r3, [pc, #164]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	019b      	lsls	r3, r3, #6
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	3b01      	subs	r3, #1
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	071b      	lsls	r3, r3, #28
 800593e:	491b      	ldr	r1, [pc, #108]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800594a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800594e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fe fcba 	bl	80042c8 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005958:	f7fe fcb6 	bl	80042c8 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e05f      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b10      	ldr	r3, [pc, #64]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x47c>
 8005976:	e057      	b.n	8005a28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a0b      	ldr	r2, [pc, #44]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 800597e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fe fca0 	bl	80042c8 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598c:	f7fe fc9c 	bl	80042c8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e045      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599e:	4b03      	ldr	r3, [pc, #12]	; (80059ac <HAL_RCC_OscConfig+0x4d0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x4b0>
 80059aa:	e03d      	b.n	8005a28 <HAL_RCC_OscConfig+0x54c>
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059b4:	4b1f      	ldr	r3, [pc, #124]	; (8005a34 <HAL_RCC_OscConfig+0x558>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d030      	beq.n	8005a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d129      	bne.n	8005a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d122      	bne.n	8005a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059e4:	4013      	ands	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d119      	bne.n	8005a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	3b01      	subs	r3, #1
 80059fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d10f      	bne.n	8005a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d107      	bne.n	8005a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40023800 	.word	0x40023800

08005a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0d0      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a50:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d910      	bls.n	8005a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5e:	4b67      	ldr	r3, [pc, #412]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f023 020f 	bic.w	r2, r3, #15
 8005a66:	4965      	ldr	r1, [pc, #404]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6e:	4b63      	ldr	r3, [pc, #396]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0b8      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a98:	4b59      	ldr	r3, [pc, #356]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4a58      	ldr	r2, [pc, #352]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab0:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4a52      	ldr	r2, [pc, #328]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005abc:	4b50      	ldr	r3, [pc, #320]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	494d      	ldr	r1, [pc, #308]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d040      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d107      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae2:	4b47      	ldr	r3, [pc, #284]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d115      	bne.n	8005b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e07f      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d107      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e073      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0a:	4b3d      	ldr	r3, [pc, #244]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e06b      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f023 0203 	bic.w	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4936      	ldr	r1, [pc, #216]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fe fbcc 	bl	80042c8 <HAL_GetTick>
 8005b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b34:	f7fe fbc8 	bl	80042c8 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e053      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4a:	4b2d      	ldr	r3, [pc, #180]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 020c 	and.w	r2, r3, #12
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d1eb      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b27      	ldr	r3, [pc, #156]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d210      	bcs.n	8005b8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 020f 	bic.w	r2, r3, #15
 8005b72:	4922      	ldr	r1, [pc, #136]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7a:	4b20      	ldr	r3, [pc, #128]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d001      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e032      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b98:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4916      	ldr	r1, [pc, #88]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	490e      	ldr	r1, [pc, #56]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bca:	f000 f821 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	490a      	ldr	r1, [pc, #40]	; (8005c04 <HAL_RCC_ClockConfig+0x1cc>)
 8005bdc:	5ccb      	ldrb	r3, [r1, r3]
 8005bde:	fa22 f303 	lsr.w	r3, r2, r3
 8005be2:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <HAL_RCC_ClockConfig+0x1d0>)
 8005be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <HAL_RCC_ClockConfig+0x1d4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fb28 	bl	8004240 <HAL_InitTick>

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40023c00 	.word	0x40023c00
 8005c00:	40023800 	.word	0x40023800
 8005c04:	0800ba80 	.word	0x0800ba80
 8005c08:	20000098 	.word	0x20000098
 8005c0c:	200000a0 	.word	0x200000a0

08005c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	607b      	str	r3, [r7, #4]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	2300      	movs	r3, #0
 8005c22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c28:	4b67      	ldr	r3, [pc, #412]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d00d      	beq.n	8005c50 <HAL_RCC_GetSysClockFreq+0x40>
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	f200 80bd 	bhi.w	8005db4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x34>
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c42:	e0b7      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c44:	4b61      	ldr	r3, [pc, #388]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c46:	60bb      	str	r3, [r7, #8]
      break;
 8005c48:	e0b7      	b.n	8005dba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c4a:	4b61      	ldr	r3, [pc, #388]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c4c:	60bb      	str	r3, [r7, #8]
      break;
 8005c4e:	e0b4      	b.n	8005dba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c50:	4b5d      	ldr	r3, [pc, #372]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c58:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04d      	beq.n	8005d02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c66:	4b58      	ldr	r3, [pc, #352]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	099b      	lsrs	r3, r3, #6
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	ea02 0800 	and.w	r8, r2, r0
 8005c7e:	ea03 0901 	and.w	r9, r3, r1
 8005c82:	4640      	mov	r0, r8
 8005c84:	4649      	mov	r1, r9
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	014b      	lsls	r3, r1, #5
 8005c90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c94:	0142      	lsls	r2, r0, #5
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	ebb0 0008 	subs.w	r0, r0, r8
 8005c9e:	eb61 0109 	sbc.w	r1, r1, r9
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	018b      	lsls	r3, r1, #6
 8005cac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cb0:	0182      	lsls	r2, r0, #6
 8005cb2:	1a12      	subs	r2, r2, r0
 8005cb4:	eb63 0301 	sbc.w	r3, r3, r1
 8005cb8:	f04f 0000 	mov.w	r0, #0
 8005cbc:	f04f 0100 	mov.w	r1, #0
 8005cc0:	00d9      	lsls	r1, r3, #3
 8005cc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cc6:	00d0      	lsls	r0, r2, #3
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	eb12 0208 	adds.w	r2, r2, r8
 8005cd0:	eb43 0309 	adc.w	r3, r3, r9
 8005cd4:	f04f 0000 	mov.w	r0, #0
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	0259      	lsls	r1, r3, #9
 8005cde:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ce2:	0250      	lsls	r0, r2, #9
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	f7fa fafc 	bl	80002f0 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e04a      	b.n	8005d98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d12:	f04f 0100 	mov.w	r1, #0
 8005d16:	ea02 0400 	and.w	r4, r2, r0
 8005d1a:	ea03 0501 	and.w	r5, r3, r1
 8005d1e:	4620      	mov	r0, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	014b      	lsls	r3, r1, #5
 8005d2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d30:	0142      	lsls	r2, r0, #5
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	1b00      	subs	r0, r0, r4
 8005d38:	eb61 0105 	sbc.w	r1, r1, r5
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	018b      	lsls	r3, r1, #6
 8005d46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d4a:	0182      	lsls	r2, r0, #6
 8005d4c:	1a12      	subs	r2, r2, r0
 8005d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f04f 0100 	mov.w	r1, #0
 8005d5a:	00d9      	lsls	r1, r3, #3
 8005d5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d60:	00d0      	lsls	r0, r2, #3
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	1912      	adds	r2, r2, r4
 8005d68:	eb45 0303 	adc.w	r3, r5, r3
 8005d6c:	f04f 0000 	mov.w	r0, #0
 8005d70:	f04f 0100 	mov.w	r1, #0
 8005d74:	0299      	lsls	r1, r3, #10
 8005d76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d7a:	0290      	lsls	r0, r2, #10
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4610      	mov	r0, r2
 8005d82:	4619      	mov	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	f7fa fab0 	bl	80002f0 <__aeabi_uldivmod>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4613      	mov	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	3301      	adds	r3, #1
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	60bb      	str	r3, [r7, #8]
      break;
 8005db2:	e002      	b.n	8005dba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005db6:	60bb      	str	r3, [r7, #8]
      break;
 8005db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dba:	68bb      	ldr	r3, [r7, #8]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	00f42400 	.word	0x00f42400
 8005dd0:	007a1200 	.word	0x007a1200

08005dd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd8:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dda:	681b      	ldr	r3, [r3, #0]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000098 	.word	0x20000098

08005dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005df0:	f7ff fff0 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	0a9b      	lsrs	r3, r3, #10
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4903      	ldr	r1, [pc, #12]	; (8005e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	0800ba90 	.word	0x0800ba90

08005e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e18:	f7ff ffdc 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	0b5b      	lsrs	r3, r3, #13
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	4903      	ldr	r1, [pc, #12]	; (8005e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e2a:	5ccb      	ldrb	r3, [r1, r3]
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40023800 	.word	0x40023800
 8005e38:	0800ba90 	.word	0x0800ba90

08005e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d012      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e64:	4b69      	ldr	r3, [pc, #420]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a68      	ldr	r2, [pc, #416]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e6e:	6093      	str	r3, [r2, #8]
 8005e70:	4b66      	ldr	r3, [pc, #408]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e78:	4964      	ldr	r1, [pc, #400]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d017      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e96:	4b5d      	ldr	r3, [pc, #372]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea4:	4959      	ldr	r1, [pc, #356]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb4:	d101      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d017      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ed2:	4b4e      	ldr	r3, [pc, #312]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	494a      	ldr	r1, [pc, #296]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005efe:	2301      	movs	r3, #1
 8005f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 808b 	beq.w	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f20:	4b3a      	ldr	r3, [pc, #232]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	4a39      	ldr	r2, [pc, #228]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2c:	4b37      	ldr	r3, [pc, #220]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f38:	4b35      	ldr	r3, [pc, #212]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a34      	ldr	r2, [pc, #208]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f44:	f7fe f9c0 	bl	80042c8 <HAL_GetTick>
 8005f48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4c:	f7fe f9bc 	bl	80042c8 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b64      	cmp	r3, #100	; 0x64
 8005f58:	d901      	bls.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e38f      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0f0      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f6a:	4b28      	ldr	r3, [pc, #160]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d035      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d02e      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f88:	4b20      	ldr	r3, [pc, #128]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f92:	4b1e      	ldr	r3, [pc, #120]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f96:	4a1d      	ldr	r2, [pc, #116]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	4a1a      	ldr	r2, [pc, #104]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fb0:	4b16      	ldr	r3, [pc, #88]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d114      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fe f984 	bl	80042c8 <HAL_GetTick>
 8005fc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fe f980 	bl	80042c8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e351      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0ee      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d111      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006002:	400b      	ands	r3, r1
 8006004:	4901      	ldr	r1, [pc, #4]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006006:	4313      	orrs	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
 800600a:	e00b      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800600c:	40023800 	.word	0x40023800
 8006010:	40007000 	.word	0x40007000
 8006014:	0ffffcff 	.word	0x0ffffcff
 8006018:	4bb3      	ldr	r3, [pc, #716]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4ab2      	ldr	r2, [pc, #712]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800601e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006022:	6093      	str	r3, [r2, #8]
 8006024:	4bb0      	ldr	r3, [pc, #704]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006030:	49ad      	ldr	r1, [pc, #692]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006032:	4313      	orrs	r3, r2
 8006034:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	d010      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006042:	4ba9      	ldr	r3, [pc, #676]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006048:	4aa7      	ldr	r2, [pc, #668]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800604a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006052:	4ba5      	ldr	r3, [pc, #660]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006054:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	49a2      	ldr	r1, [pc, #648]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006070:	4b9d      	ldr	r3, [pc, #628]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800607e:	499a      	ldr	r1, [pc, #616]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006092:	4b95      	ldr	r3, [pc, #596]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060a0:	4991      	ldr	r1, [pc, #580]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060b4:	4b8c      	ldr	r3, [pc, #560]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c2:	4989      	ldr	r1, [pc, #548]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060d6:	4b84      	ldr	r3, [pc, #528]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	4980      	ldr	r1, [pc, #512]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060f8:	4b7b      	ldr	r3, [pc, #492]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	f023 0203 	bic.w	r2, r3, #3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006106:	4978      	ldr	r1, [pc, #480]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800611a:	4b73      	ldr	r3, [pc, #460]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800611c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006120:	f023 020c 	bic.w	r2, r3, #12
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006128:	496f      	ldr	r1, [pc, #444]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800613c:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800613e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006142:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	4967      	ldr	r1, [pc, #412]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800615e:	4b62      	ldr	r3, [pc, #392]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006164:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	495e      	ldr	r1, [pc, #376]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006180:	4b59      	ldr	r3, [pc, #356]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	4956      	ldr	r1, [pc, #344]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061a2:	4b51      	ldr	r3, [pc, #324]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b0:	494d      	ldr	r1, [pc, #308]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80061c4:	4b48      	ldr	r3, [pc, #288]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d2:	4945      	ldr	r1, [pc, #276]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80061e6:	4b40      	ldr	r3, [pc, #256]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f4:	493c      	ldr	r1, [pc, #240]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006208:	4b37      	ldr	r3, [pc, #220]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006216:	4934      	ldr	r1, [pc, #208]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d011      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800622a:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006230:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006238:	492b      	ldr	r1, [pc, #172]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006248:	d101      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800625a:	2301      	movs	r3, #1
 800625c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006278:	491b      	ldr	r1, [pc, #108]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800628c:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006292:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629c:	4912      	ldr	r1, [pc, #72]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80062b0:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c0:	4909      	ldr	r1, [pc, #36]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00f      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	e002      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80062e6:	bf00      	nop
 80062e8:	40023800 	.word	0x40023800
 80062ec:	4986      	ldr	r1, [pc, #536]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006300:	4b81      	ldr	r3, [pc, #516]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006306:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006310:	497d      	ldr	r1, [pc, #500]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d006      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80d6 	beq.w	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800632c:	4b76      	ldr	r3, [pc, #472]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a75      	ldr	r2, [pc, #468]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006338:	f7fd ffc6 	bl	80042c8 <HAL_GetTick>
 800633c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006340:	f7fd ffc2 	bl	80042c8 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b64      	cmp	r3, #100	; 0x64
 800634c:	d901      	bls.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e195      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006352:	4b6d      	ldr	r3, [pc, #436]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d021      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	2b00      	cmp	r3, #0
 8006370:	d11d      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006372:	4b65      	ldr	r3, [pc, #404]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006380:	4b61      	ldr	r3, [pc, #388]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006386:	0e1b      	lsrs	r3, r3, #24
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	019a      	lsls	r2, r3, #6
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	061b      	lsls	r3, r3, #24
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	071b      	lsls	r3, r3, #28
 80063a6:	4958      	ldr	r1, [pc, #352]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d02e      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d8:	d129      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063da:	4b4b      	ldr	r3, [pc, #300]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063e8:	4b47      	ldr	r3, [pc, #284]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ee:	0f1b      	lsrs	r3, r3, #28
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	019a      	lsls	r2, r3, #6
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	061b      	lsls	r3, r3, #24
 8006408:	431a      	orrs	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	071b      	lsls	r3, r3, #28
 800640e:	493e      	ldr	r1, [pc, #248]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006416:	4b3c      	ldr	r3, [pc, #240]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800641c:	f023 021f 	bic.w	r2, r3, #31
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	3b01      	subs	r3, #1
 8006426:	4938      	ldr	r1, [pc, #224]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01d      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800643a:	4b33      	ldr	r3, [pc, #204]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006440:	0e1b      	lsrs	r3, r3, #24
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006448:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644e:	0f1b      	lsrs	r3, r3, #28
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	019a      	lsls	r2, r3, #6
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	041b      	lsls	r3, r3, #16
 8006462:	431a      	orrs	r2, r3
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	061b      	lsls	r3, r3, #24
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	071b      	lsls	r3, r3, #28
 800646e:	4926      	ldr	r1, [pc, #152]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d011      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	019a      	lsls	r2, r3, #6
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	041b      	lsls	r3, r3, #16
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	061b      	lsls	r3, r3, #24
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	071b      	lsls	r3, r3, #28
 800649e:	491a      	ldr	r1, [pc, #104]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064a6:	4b18      	ldr	r3, [pc, #96]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b2:	f7fd ff09 	bl	80042c8 <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064ba:	f7fd ff05 	bl	80042c8 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b64      	cmp	r3, #100	; 0x64
 80064c6:	d901      	bls.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0d8      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064cc:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	f040 80ce 	bne.w	800667c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064e0:	4b09      	ldr	r3, [pc, #36]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a08      	ldr	r2, [pc, #32]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ec:	f7fd feec 	bl	80042c8 <HAL_GetTick>
 80064f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064f2:	e00b      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064f4:	f7fd fee8 	bl	80042c8 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	; 0x64
 8006500:	d904      	bls.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e0bb      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800650c:	4b5e      	ldr	r3, [pc, #376]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006518:	d0ec      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006536:	2b00      	cmp	r3, #0
 8006538:	d02e      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d12a      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006542:	4b51      	ldr	r3, [pc, #324]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	0c1b      	lsrs	r3, r3, #16
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006550:	4b4d      	ldr	r3, [pc, #308]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006556:	0f1b      	lsrs	r3, r3, #28
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	019a      	lsls	r2, r3, #6
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	4944      	ldr	r1, [pc, #272]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800657e:	4b42      	ldr	r3, [pc, #264]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	3b01      	subs	r3, #1
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	493d      	ldr	r1, [pc, #244]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d022      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ac:	d11d      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065ae:	4b36      	ldr	r3, [pc, #216]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	0f1b      	lsrs	r3, r3, #28
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	019a      	lsls	r2, r3, #6
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	431a      	orrs	r2, r3
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	061b      	lsls	r3, r3, #24
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	071b      	lsls	r3, r3, #28
 80065e2:	4929      	ldr	r1, [pc, #164]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d028      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fc:	0e1b      	lsrs	r3, r3, #24
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006604:	4b20      	ldr	r3, [pc, #128]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	019a      	lsls	r2, r3, #6
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	431a      	orrs	r2, r3
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	061b      	lsls	r3, r3, #24
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	071b      	lsls	r3, r3, #28
 800662a:	4917      	ldr	r1, [pc, #92]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4911      	ldr	r1, [pc, #68]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a0e      	ldr	r2, [pc, #56]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800664e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006654:	f7fd fe38 	bl	80042c8 <HAL_GetTick>
 8006658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800665a:	e008      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800665c:	f7fd fe34 	bl	80042c8 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b64      	cmp	r3, #100	; 0x64
 8006668:	d901      	bls.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e007      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800666e:	4b06      	ldr	r3, [pc, #24]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667a:	d1ef      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40023800 	.word	0x40023800

0800668c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e01c      	b.n	80066d8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	795b      	ldrb	r3, [r3, #5]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fc fba8 	bl	8002e04 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0204 	orr.w	r2, r2, #4
 80066c8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e09d      	b.n	800682e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006702:	d009      	beq.n	8006718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
 800670a:	e005      	b.n	8006718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fc fbc4 	bl	8002ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006758:	d902      	bls.n	8006760 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e002      	b.n	8006766 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006764:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800676e:	d007      	beq.n	8006780 <HAL_SPI_Init+0xa0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	ea42 0103 	orr.w	r1, r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	f003 0204 	and.w	r2, r3, #4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067fc:	ea42 0103 	orr.w	r1, r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800681c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b088      	sub	sp, #32
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4613      	mov	r3, r2
 8006844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_SPI_Transmit+0x22>
 8006854:	2302      	movs	r3, #2
 8006856:	e158      	b.n	8006b0a <HAL_SPI_Transmit+0x2d4>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006860:	f7fd fd32 	bl	80042c8 <HAL_GetTick>
 8006864:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006866:	88fb      	ldrh	r3, [r7, #6]
 8006868:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b01      	cmp	r3, #1
 8006874:	d002      	beq.n	800687c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006876:	2302      	movs	r3, #2
 8006878:	77fb      	strb	r3, [r7, #31]
    goto error;
 800687a:	e13d      	b.n	8006af8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <HAL_SPI_Transmit+0x52>
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800688c:	e134      	b.n	8006af8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2203      	movs	r2, #3
 8006892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	88fa      	ldrh	r2, [r7, #6]
 80068a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d8:	d10f      	bne.n	80068fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d007      	beq.n	8006918 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006920:	d94b      	bls.n	80069ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_SPI_Transmit+0xfa>
 800692a:	8afb      	ldrh	r3, [r7, #22]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d13e      	bne.n	80069ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	881a      	ldrh	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006954:	e02b      	b.n	80069ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d112      	bne.n	800698a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	881a      	ldrh	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	1c9a      	adds	r2, r3, #2
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006988:	e011      	b.n	80069ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800698a:	f7fd fc9d 	bl	80042c8 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d803      	bhi.n	80069a2 <HAL_SPI_Transmit+0x16c>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d102      	bne.n	80069a8 <HAL_SPI_Transmit+0x172>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069ac:	e0a4      	b.n	8006af8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1ce      	bne.n	8006956 <HAL_SPI_Transmit+0x120>
 80069b8:	e07c      	b.n	8006ab4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_SPI_Transmit+0x192>
 80069c2:	8afb      	ldrh	r3, [r7, #22]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d170      	bne.n	8006aaa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d912      	bls.n	80069f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	881a      	ldrh	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	1c9a      	adds	r2, r3, #2
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b02      	subs	r3, #2
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069f6:	e058      	b.n	8006aaa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a1e:	e044      	b.n	8006aaa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d12b      	bne.n	8006a86 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d912      	bls.n	8006a5e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b02      	subs	r3, #2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5c:	e025      	b.n	8006aaa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a84:	e011      	b.n	8006aaa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a86:	f7fd fc1f 	bl	80042c8 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d803      	bhi.n	8006a9e <HAL_SPI_Transmit+0x268>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9c:	d102      	bne.n	8006aa4 <HAL_SPI_Transmit+0x26e>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aa8:	e026      	b.n	8006af8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1b5      	bne.n	8006a20 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f945 	bl	8006d48 <SPI_EndRxTxTransaction>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	77fb      	strb	r3, [r7, #31]
 8006af4:	e000      	b.n	8006af8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b24:	f7fd fbd0 	bl	80042c8 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b34:	f7fd fbc8 	bl	80042c8 <HAL_GetTick>
 8006b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b3a:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	015b      	lsls	r3, r3, #5
 8006b40:	0d1b      	lsrs	r3, r3, #20
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	fb02 f303 	mul.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b4a:	e054      	b.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d050      	beq.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b54:	f7fd fbb8 	bl	80042c8 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d902      	bls.n	8006b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d13d      	bne.n	8006be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b82:	d111      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b8c:	d004      	beq.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b96:	d107      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb0:	d10f      	bne.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e017      	b.n	8006c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	bf0c      	ite	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	2300      	movne	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d19b      	bne.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000098 	.word	0x20000098

08006c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c32:	f7fd fb49 	bl	80042c8 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	4413      	add	r3, r2
 8006c40:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c42:	f7fd fb41 	bl	80042c8 <HAL_GetTick>
 8006c46:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c48:	4b3e      	ldr	r3, [pc, #248]	; (8006d44 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	00da      	lsls	r2, r3, #3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	0d1b      	lsrs	r3, r3, #20
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c60:	e062      	b.n	8006d28 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c68:	d109      	bne.n	8006c7e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d106      	bne.n	8006c7e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006c7c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d050      	beq.n	8006d28 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c86:	f7fd fb1f 	bl	80042c8 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d902      	bls.n	8006c9c <SPI_WaitFifoStateUntilTimeout+0x78>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d13d      	bne.n	8006d18 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006caa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cb4:	d111      	bne.n	8006cda <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cbe:	d004      	beq.n	8006cca <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc8:	d107      	bne.n	8006cda <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	d10f      	bne.n	8006d04 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e010      	b.n	8006d3a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d194      	bne.n	8006c62 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000098 	.word	0x20000098

08006d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff ff5f 	bl	8006c24 <SPI_WaitFifoStateUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d70:	f043 0220 	orr.w	r2, r3, #32
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e027      	b.n	8006dcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fec4 	bl	8006b14 <SPI_WaitFlagStateUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e014      	b.n	8006dcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7ff ff38 	bl	8006c24 <SPI_WaitFifoStateUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e000      	b.n	8006dcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e049      	b.n	8006e7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fc fb0a 	bl	8003414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f000 fdb2 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d001      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e054      	b.n	8006f46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a26      	ldr	r2, [pc, #152]	; (8006f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d022      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x80>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec6:	d01d      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x80>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a22      	ldr	r2, [pc, #136]	; (8006f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d018      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x80>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a21      	ldr	r2, [pc, #132]	; (8006f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x80>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00e      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x80>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1e      	ldr	r2, [pc, #120]	; (8006f64 <HAL_TIM_Base_Start_IT+0xe0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d009      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x80>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	; (8006f68 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x80>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1b      	ldr	r2, [pc, #108]	; (8006f6c <HAL_TIM_Base_Start_IT+0xe8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d115      	bne.n	8006f30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <HAL_TIM_Base_Start_IT+0xec>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b06      	cmp	r3, #6
 8006f14:	d015      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0xbe>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1c:	d011      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0201 	orr.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2e:	e008      	b.n	8006f42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e000      	b.n	8006f44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40001800 	.word	0x40001800
 8006f70:	00010007 	.word	0x00010007

08006f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e049      	b.n	800701a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f841 	bl	8007022 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f000 fce2 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d109      	bne.n	800705c <HAL_TIM_PWM_Start+0x24>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	bf14      	ite	ne
 8007054:	2301      	movne	r3, #1
 8007056:	2300      	moveq	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	e03c      	b.n	80070d6 <HAL_TIM_PWM_Start+0x9e>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b04      	cmp	r3, #4
 8007060:	d109      	bne.n	8007076 <HAL_TIM_PWM_Start+0x3e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	e02f      	b.n	80070d6 <HAL_TIM_PWM_Start+0x9e>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b08      	cmp	r3, #8
 800707a:	d109      	bne.n	8007090 <HAL_TIM_PWM_Start+0x58>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	bf14      	ite	ne
 8007088:	2301      	movne	r3, #1
 800708a:	2300      	moveq	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	e022      	b.n	80070d6 <HAL_TIM_PWM_Start+0x9e>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b0c      	cmp	r3, #12
 8007094:	d109      	bne.n	80070aa <HAL_TIM_PWM_Start+0x72>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b01      	cmp	r3, #1
 80070a0:	bf14      	ite	ne
 80070a2:	2301      	movne	r3, #1
 80070a4:	2300      	moveq	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	e015      	b.n	80070d6 <HAL_TIM_PWM_Start+0x9e>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b10      	cmp	r3, #16
 80070ae:	d109      	bne.n	80070c4 <HAL_TIM_PWM_Start+0x8c>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	e008      	b.n	80070d6 <HAL_TIM_PWM_Start+0x9e>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	bf14      	ite	ne
 80070d0:	2301      	movne	r3, #1
 80070d2:	2300      	moveq	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e092      	b.n	8007204 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_PWM_Start+0xb6>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ec:	e023      	b.n	8007136 <HAL_TIM_PWM_Start+0xfe>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d104      	bne.n	80070fe <HAL_TIM_PWM_Start+0xc6>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070fc:	e01b      	b.n	8007136 <HAL_TIM_PWM_Start+0xfe>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b08      	cmp	r3, #8
 8007102:	d104      	bne.n	800710e <HAL_TIM_PWM_Start+0xd6>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800710c:	e013      	b.n	8007136 <HAL_TIM_PWM_Start+0xfe>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b0c      	cmp	r3, #12
 8007112:	d104      	bne.n	800711e <HAL_TIM_PWM_Start+0xe6>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800711c:	e00b      	b.n	8007136 <HAL_TIM_PWM_Start+0xfe>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b10      	cmp	r3, #16
 8007122:	d104      	bne.n	800712e <HAL_TIM_PWM_Start+0xf6>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800712c:	e003      	b.n	8007136 <HAL_TIM_PWM_Start+0xfe>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2201      	movs	r2, #1
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 ffb4 	bl	80080ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <HAL_TIM_PWM_Start+0x1d4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_TIM_PWM_Start+0x120>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <HAL_TIM_PWM_Start+0x1d8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d101      	bne.n	800715c <HAL_TIM_PWM_Start+0x124>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <HAL_TIM_PWM_Start+0x126>
 800715c:	2300      	movs	r3, #0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a25      	ldr	r2, [pc, #148]	; (800720c <HAL_TIM_PWM_Start+0x1d4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d022      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x18a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007184:	d01d      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x18a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a22      	ldr	r2, [pc, #136]	; (8007214 <HAL_TIM_PWM_Start+0x1dc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d018      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x18a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a20      	ldr	r2, [pc, #128]	; (8007218 <HAL_TIM_PWM_Start+0x1e0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d013      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x18a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1f      	ldr	r2, [pc, #124]	; (800721c <HAL_TIM_PWM_Start+0x1e4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00e      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x18a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a19      	ldr	r2, [pc, #100]	; (8007210 <HAL_TIM_PWM_Start+0x1d8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x18a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1b      	ldr	r2, [pc, #108]	; (8007220 <HAL_TIM_PWM_Start+0x1e8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x18a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a19      	ldr	r2, [pc, #100]	; (8007224 <HAL_TIM_PWM_Start+0x1ec>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d115      	bne.n	80071ee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	4b17      	ldr	r3, [pc, #92]	; (8007228 <HAL_TIM_PWM_Start+0x1f0>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b06      	cmp	r3, #6
 80071d2:	d015      	beq.n	8007200 <HAL_TIM_PWM_Start+0x1c8>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071da:	d011      	beq.n	8007200 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ec:	e008      	b.n	8007200 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e000      	b.n	8007202 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007200:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40014000 	.word	0x40014000
 8007224:	40001800 	.word	0x40001800
 8007228:	00010007 	.word	0x00010007

0800722c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2200      	movs	r2, #0
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 ff34 	bl	80080ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a36      	ldr	r2, [pc, #216]	; (8007324 <HAL_TIM_PWM_Stop+0xf8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_TIM_PWM_Stop+0x2c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a35      	ldr	r2, [pc, #212]	; (8007328 <HAL_TIM_PWM_Stop+0xfc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d101      	bne.n	800725c <HAL_TIM_PWM_Stop+0x30>
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <HAL_TIM_PWM_Stop+0x32>
 800725c:	2300      	movs	r3, #0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d017      	beq.n	8007292 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	f241 1311 	movw	r3, #4369	; 0x1111
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10f      	bne.n	8007292 <HAL_TIM_PWM_Stop+0x66>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a1a      	ldr	r2, [r3, #32]
 8007278:	f240 4344 	movw	r3, #1092	; 0x444
 800727c:	4013      	ands	r3, r2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <HAL_TIM_PWM_Stop+0x66>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	f241 1311 	movw	r3, #4369	; 0x1111
 800729c:	4013      	ands	r3, r2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10f      	bne.n	80072c2 <HAL_TIM_PWM_Stop+0x96>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6a1a      	ldr	r2, [r3, #32]
 80072a8:	f240 4344 	movw	r3, #1092	; 0x444
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <HAL_TIM_PWM_Stop+0x96>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_PWM_Stop+0xa6>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	e023      	b.n	800731a <HAL_TIM_PWM_Stop+0xee>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_PWM_Stop+0xb6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e0:	e01b      	b.n	800731a <HAL_TIM_PWM_Stop+0xee>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_PWM_Stop+0xc6>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f0:	e013      	b.n	800731a <HAL_TIM_PWM_Stop+0xee>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Stop+0xd6>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007300:	e00b      	b.n	800731a <HAL_TIM_PWM_Stop+0xee>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b10      	cmp	r3, #16
 8007306:	d104      	bne.n	8007312 <HAL_TIM_PWM_Stop+0xe6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007310:	e003      	b.n	800731a <HAL_TIM_PWM_Stop+0xee>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40010000 	.word	0x40010000
 8007328:	40010400 	.word	0x40010400

0800732c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b02      	cmp	r3, #2
 8007340:	d122      	bne.n	8007388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d11b      	bne.n	8007388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0202 	mvn.w	r2, #2
 8007358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fae6 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 8007374:	e005      	b.n	8007382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fad8 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fae9 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b04      	cmp	r3, #4
 8007394:	d122      	bne.n	80073dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d11b      	bne.n	80073dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f06f 0204 	mvn.w	r2, #4
 80073ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2202      	movs	r2, #2
 80073b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fabc 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 80073c8:	e005      	b.n	80073d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 faae 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fabf 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d122      	bne.n	8007430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d11b      	bne.n	8007430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0208 	mvn.w	r2, #8
 8007400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2204      	movs	r2, #4
 8007406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa92 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 800741c:	e005      	b.n	800742a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa84 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa95 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b10      	cmp	r3, #16
 800743c:	d122      	bne.n	8007484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b10      	cmp	r3, #16
 800744a:	d11b      	bne.n	8007484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0210 	mvn.w	r2, #16
 8007454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2208      	movs	r2, #8
 800745a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa68 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fa5a 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fa6b 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b01      	cmp	r3, #1
 8007490:	d10e      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b01      	cmp	r3, #1
 800749e:	d107      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0201 	mvn.w	r2, #1
 80074a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa34 	bl	8007918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ba:	2b80      	cmp	r3, #128	; 0x80
 80074bc:	d10e      	bne.n	80074dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b80      	cmp	r3, #128	; 0x80
 80074ca:	d107      	bne.n	80074dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fea6 	bl	8008228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ea:	d10e      	bne.n	800750a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f6:	2b80      	cmp	r3, #128	; 0x80
 80074f8:	d107      	bne.n	800750a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fe99 	bl	800823c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d10e      	bne.n	8007536 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d107      	bne.n	8007536 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa19 	bl	8007968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b20      	cmp	r3, #32
 8007542:	d10e      	bne.n	8007562 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b20      	cmp	r3, #32
 8007550:	d107      	bne.n	8007562 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f06f 0220 	mvn.w	r2, #32
 800755a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fe59 	bl	8008214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007582:	2302      	movs	r3, #2
 8007584:	e0fd      	b.n	8007782 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b14      	cmp	r3, #20
 8007592:	f200 80f0 	bhi.w	8007776 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075f1 	.word	0x080075f1
 80075a0:	08007777 	.word	0x08007777
 80075a4:	08007777 	.word	0x08007777
 80075a8:	08007777 	.word	0x08007777
 80075ac:	08007631 	.word	0x08007631
 80075b0:	08007777 	.word	0x08007777
 80075b4:	08007777 	.word	0x08007777
 80075b8:	08007777 	.word	0x08007777
 80075bc:	08007673 	.word	0x08007673
 80075c0:	08007777 	.word	0x08007777
 80075c4:	08007777 	.word	0x08007777
 80075c8:	08007777 	.word	0x08007777
 80075cc:	080076b3 	.word	0x080076b3
 80075d0:	08007777 	.word	0x08007777
 80075d4:	08007777 	.word	0x08007777
 80075d8:	08007777 	.word	0x08007777
 80075dc:	080076f5 	.word	0x080076f5
 80075e0:	08007777 	.word	0x08007777
 80075e4:	08007777 	.word	0x08007777
 80075e8:	08007777 	.word	0x08007777
 80075ec:	08007735 	.word	0x08007735
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fa60 	bl	8007abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0208 	orr.w	r2, r2, #8
 800760a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0204 	bic.w	r2, r2, #4
 800761a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6999      	ldr	r1, [r3, #24]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691a      	ldr	r2, [r3, #16]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	619a      	str	r2, [r3, #24]
      break;
 800762e:	e0a3      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fab2 	bl	8007ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800764a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800765a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6999      	ldr	r1, [r3, #24]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	021a      	lsls	r2, r3, #8
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	619a      	str	r2, [r3, #24]
      break;
 8007670:	e082      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fb09 	bl	8007c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69da      	ldr	r2, [r3, #28]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0208 	orr.w	r2, r2, #8
 800768c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0204 	bic.w	r2, r2, #4
 800769c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69d9      	ldr	r1, [r3, #28]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	61da      	str	r2, [r3, #28]
      break;
 80076b0:	e062      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fb5f 	bl	8007d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69d9      	ldr	r1, [r3, #28]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	021a      	lsls	r2, r3, #8
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	61da      	str	r2, [r3, #28]
      break;
 80076f2:	e041      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fb96 	bl	8007e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0208 	orr.w	r2, r2, #8
 800770e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0204 	bic.w	r2, r2, #4
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	691a      	ldr	r2, [r3, #16]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007732:	e021      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fbc8 	bl	8007ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800774e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	021a      	lsls	r2, r3, #8
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007774:	e000      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007776:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop

0800778c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_TIM_ConfigClockSource+0x18>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e0b3      	b.n	800790c <HAL_TIM_ConfigClockSource+0x180>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4b55      	ldr	r3, [pc, #340]	; (8007914 <HAL_TIM_ConfigClockSource+0x188>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077dc:	d03e      	beq.n	800785c <HAL_TIM_ConfigClockSource+0xd0>
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e2:	f200 8087 	bhi.w	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	f000 8085 	beq.w	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 80077ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f2:	d87f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 80077f4:	2b70      	cmp	r3, #112	; 0x70
 80077f6:	d01a      	beq.n	800782e <HAL_TIM_ConfigClockSource+0xa2>
 80077f8:	2b70      	cmp	r3, #112	; 0x70
 80077fa:	d87b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 80077fc:	2b60      	cmp	r3, #96	; 0x60
 80077fe:	d050      	beq.n	80078a2 <HAL_TIM_ConfigClockSource+0x116>
 8007800:	2b60      	cmp	r3, #96	; 0x60
 8007802:	d877      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 8007804:	2b50      	cmp	r3, #80	; 0x50
 8007806:	d03c      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0xf6>
 8007808:	2b50      	cmp	r3, #80	; 0x50
 800780a:	d873      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d058      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x136>
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d86f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 8007814:	2b30      	cmp	r3, #48	; 0x30
 8007816:	d064      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
 8007818:	2b30      	cmp	r3, #48	; 0x30
 800781a:	d86b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 800781c:	2b20      	cmp	r3, #32
 800781e:	d060      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
 8007820:	2b20      	cmp	r3, #32
 8007822:	d867      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d05c      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
 8007828:	2b10      	cmp	r3, #16
 800782a:	d05a      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800782c:	e062      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6899      	ldr	r1, [r3, #8]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f000 fc15 	bl	800806c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007850:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	609a      	str	r2, [r3, #8]
      break;
 800785a:	e04e      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	6899      	ldr	r1, [r3, #8]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f000 fbfe 	bl	800806c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800787e:	609a      	str	r2, [r3, #8]
      break;
 8007880:	e03b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	461a      	mov	r2, r3
 8007890:	f000 fb72 	bl	8007f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2150      	movs	r1, #80	; 0x50
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fbcb 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 80078a0:	e02b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f000 fb91 	bl	8007fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2160      	movs	r1, #96	; 0x60
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fbbb 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 80078c0:	e01b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6859      	ldr	r1, [r3, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f000 fb52 	bl	8007f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2140      	movs	r1, #64	; 0x40
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fbab 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 80078e0:	e00b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f000 fba2 	bl	8008036 <TIM_ITRx_SetConfig>
        break;
 80078f2:	e002      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	fffeff88 	.word	0xfffeff88

08007918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a40      	ldr	r2, [pc, #256]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <TIM_Base_SetConfig+0x118>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3c      	ldr	r2, [pc, #240]	; (8007a98 <TIM_Base_SetConfig+0x11c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a3b      	ldr	r2, [pc, #236]	; (8007a9c <TIM_Base_SetConfig+0x120>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3a      	ldr	r2, [pc, #232]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2f      	ldr	r2, [pc, #188]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079dc:	d027      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <TIM_Base_SetConfig+0x118>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d023      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2b      	ldr	r2, [pc, #172]	; (8007a98 <TIM_Base_SetConfig+0x11c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2a      	ldr	r2, [pc, #168]	; (8007a9c <TIM_Base_SetConfig+0x120>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d017      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a28      	ldr	r2, [pc, #160]	; (8007aa4 <TIM_Base_SetConfig+0x128>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <TIM_Base_SetConfig+0x12c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a26      	ldr	r2, [pc, #152]	; (8007aac <TIM_Base_SetConfig+0x130>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <TIM_Base_SetConfig+0x134>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a24      	ldr	r2, [pc, #144]	; (8007ab4 <TIM_Base_SetConfig+0x138>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <TIM_Base_SetConfig+0x13c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a0a      	ldr	r2, [pc, #40]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_Base_SetConfig+0xf8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a0c      	ldr	r2, [pc, #48]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d103      	bne.n	8007a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	615a      	str	r2, [r3, #20]
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00
 8007aa0:	40010400 	.word	0x40010400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	40014800 	.word	0x40014800
 8007ab0:	40001800 	.word	0x40001800
 8007ab4:	40001c00 	.word	0x40001c00
 8007ab8:	40002000 	.word	0x40002000

08007abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0201 	bic.w	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <TIM_OC1_SetConfig+0xd8>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 0302 	bic.w	r3, r3, #2
 8007b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <TIM_OC1_SetConfig+0xdc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC1_SetConfig+0x64>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <TIM_OC1_SetConfig+0xe0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10c      	bne.n	8007b3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0308 	bic.w	r3, r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 0304 	bic.w	r3, r3, #4
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <TIM_OC1_SetConfig+0xdc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_OC1_SetConfig+0x8e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <TIM_OC1_SetConfig+0xe0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d111      	bne.n	8007b6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	fffeff8f 	.word	0xfffeff8f
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40010400 	.word	0x40010400

08007ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f023 0210 	bic.w	r2, r3, #16
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4b2e      	ldr	r3, [pc, #184]	; (8007c84 <TIM_OC2_SetConfig+0xe4>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0320 	bic.w	r3, r3, #32
 8007bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a23      	ldr	r2, [pc, #140]	; (8007c88 <TIM_OC2_SetConfig+0xe8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_OC2_SetConfig+0x68>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <TIM_OC2_SetConfig+0xec>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d10d      	bne.n	8007c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <TIM_OC2_SetConfig+0xe8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_OC2_SetConfig+0x94>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <TIM_OC2_SetConfig+0xec>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d113      	bne.n	8007c5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	feff8fff 	.word	0xfeff8fff
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40010400 	.word	0x40010400

08007c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4b2d      	ldr	r3, [pc, #180]	; (8007d70 <TIM_OC3_SetConfig+0xe0>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	021b      	lsls	r3, r3, #8
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a22      	ldr	r2, [pc, #136]	; (8007d74 <TIM_OC3_SetConfig+0xe4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_OC3_SetConfig+0x66>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <TIM_OC3_SetConfig+0xe8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d10d      	bne.n	8007d12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <TIM_OC3_SetConfig+0xe4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d003      	beq.n	8007d22 <TIM_OC3_SetConfig+0x92>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <TIM_OC3_SetConfig+0xe8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d113      	bne.n	8007d4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	621a      	str	r2, [r3, #32]
}
 8007d64:	bf00      	nop
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	fffeff8f 	.word	0xfffeff8f
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40010400 	.word	0x40010400

08007d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4b1e      	ldr	r3, [pc, #120]	; (8007e20 <TIM_OC4_SetConfig+0xa4>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	031b      	lsls	r3, r3, #12
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <TIM_OC4_SetConfig+0xa8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_OC4_SetConfig+0x68>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a12      	ldr	r2, [pc, #72]	; (8007e28 <TIM_OC4_SetConfig+0xac>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d109      	bne.n	8007df8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	019b      	lsls	r3, r3, #6
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	621a      	str	r2, [r3, #32]
}
 8007e12:	bf00      	nop
 8007e14:	371c      	adds	r7, #28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	feff8fff 	.word	0xfeff8fff
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40010400 	.word	0x40010400

08007e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <TIM_OC5_SetConfig+0x98>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	041b      	lsls	r3, r3, #16
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a12      	ldr	r2, [pc, #72]	; (8007ec8 <TIM_OC5_SetConfig+0x9c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC5_SetConfig+0x5e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <TIM_OC5_SetConfig+0xa0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d109      	bne.n	8007e9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	621a      	str	r2, [r3, #32]
}
 8007eb8:	bf00      	nop
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	fffeff8f 	.word	0xfffeff8f
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40010400 	.word	0x40010400

08007ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4b1c      	ldr	r3, [pc, #112]	; (8007f6c <TIM_OC6_SetConfig+0x9c>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	051b      	lsls	r3, r3, #20
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a13      	ldr	r2, [pc, #76]	; (8007f70 <TIM_OC6_SetConfig+0xa0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d003      	beq.n	8007f30 <TIM_OC6_SetConfig+0x60>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <TIM_OC6_SetConfig+0xa4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d109      	bne.n	8007f44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	feff8fff 	.word	0xfeff8fff
 8007f70:	40010000 	.word	0x40010000
 8007f74:	40010400 	.word	0x40010400

08007f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0201 	bic.w	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 030a 	bic.w	r3, r3, #10
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b087      	sub	sp, #28
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0210 	bic.w	r2, r3, #16
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	f043 0307 	orr.w	r3, r3, #7
 8008058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	609a      	str	r2, [r3, #8]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	431a      	orrs	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4313      	orrs	r3, r2
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2201      	movs	r2, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	401a      	ands	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e06d      	b.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a30      	ldr	r2, [pc, #192]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2f      	ldr	r2, [pc, #188]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d108      	bne.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800814a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d022      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d01d      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1d      	ldr	r2, [pc, #116]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d018      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1a      	ldr	r2, [pc, #104]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00e      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a15      	ldr	r2, [pc, #84]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d009      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a16      	ldr	r2, [pc, #88]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a15      	ldr	r2, [pc, #84]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10c      	bne.n	80081da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40010400 	.word	0x40010400
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40014000 	.word	0x40014000
 8008210:	40001800 	.word	0x40001800

08008214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e040      	b.n	80082e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fb f9ba 	bl	80035ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2224      	movs	r2, #36	; 0x24
 800827c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0201 	bic.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f990 	bl	80085b4 <UART_SetConfig>
 8008294:	4603      	mov	r3, r0
 8008296:	2b01      	cmp	r3, #1
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e022      	b.n	80082e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fbe6 	bl	8008a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0201 	orr.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fc6d 	bl	8008bbc <UART_CheckIdleState>
 80082e2:	4603      	mov	r3, r0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	; 0x28
 80082f0:	af02      	add	r7, sp, #8
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008300:	2b20      	cmp	r3, #32
 8008302:	f040 8081 	bne.w	8008408 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <HAL_UART_Transmit+0x26>
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e079      	b.n	800840a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_UART_Transmit+0x38>
 8008320:	2302      	movs	r3, #2
 8008322:	e072      	b.n	800840a <HAL_UART_Transmit+0x11e>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2221      	movs	r2, #33	; 0x21
 8008338:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800833a:	f7fb ffc5 	bl	80042c8 <HAL_GetTick>
 800833e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008358:	d108      	bne.n	800836c <HAL_UART_Transmit+0x80>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	e003      	b.n	8008374 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800837c:	e02c      	b.n	80083d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	2180      	movs	r1, #128	; 0x80
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fc60 	bl	8008c4e <UART_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e038      	b.n	800840a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	3302      	adds	r3, #2
 80083b2:	61bb      	str	r3, [r7, #24]
 80083b4:	e007      	b.n	80083c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1cc      	bne.n	800837e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2140      	movs	r1, #64	; 0x40
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fc2d 	bl	8008c4e <UART_WaitOnFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e005      	b.n	800840a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008408:	2302      	movs	r3, #2
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b08a      	sub	sp, #40	; 0x28
 8008416:	af02      	add	r7, sp, #8
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008426:	2b20      	cmp	r3, #32
 8008428:	f040 80be 	bne.w	80085a8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <HAL_UART_Receive+0x26>
 8008432:	88fb      	ldrh	r3, [r7, #6]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e0b6      	b.n	80085aa <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_UART_Receive+0x38>
 8008446:	2302      	movs	r3, #2
 8008448:	e0af      	b.n	80085aa <HAL_UART_Receive+0x198>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2222      	movs	r2, #34	; 0x22
 800845e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008466:	f7fb ff2f 	bl	80042c8 <HAL_GetTick>
 800846a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008484:	d10e      	bne.n	80084a4 <HAL_UART_Receive+0x92>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d105      	bne.n	800849a <HAL_UART_Receive+0x88>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008498:	e02d      	b.n	80084f6 <HAL_UART_Receive+0xe4>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	22ff      	movs	r2, #255	; 0xff
 800849e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084a2:	e028      	b.n	80084f6 <HAL_UART_Receive+0xe4>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10d      	bne.n	80084c8 <HAL_UART_Receive+0xb6>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d104      	bne.n	80084be <HAL_UART_Receive+0xac>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	22ff      	movs	r2, #255	; 0xff
 80084b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084bc:	e01b      	b.n	80084f6 <HAL_UART_Receive+0xe4>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	227f      	movs	r2, #127	; 0x7f
 80084c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084c6:	e016      	b.n	80084f6 <HAL_UART_Receive+0xe4>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084d0:	d10d      	bne.n	80084ee <HAL_UART_Receive+0xdc>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d104      	bne.n	80084e4 <HAL_UART_Receive+0xd2>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	227f      	movs	r2, #127	; 0x7f
 80084de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084e2:	e008      	b.n	80084f6 <HAL_UART_Receive+0xe4>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	223f      	movs	r2, #63	; 0x3f
 80084e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084ec:	e003      	b.n	80084f6 <HAL_UART_Receive+0xe4>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008506:	d108      	bne.n	800851a <HAL_UART_Receive+0x108>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	e003      	b.n	8008522 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800852a:	e032      	b.n	8008592 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2200      	movs	r2, #0
 8008534:	2120      	movs	r1, #32
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fb89 	bl	8008c4e <UART_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e031      	b.n	80085aa <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10c      	bne.n	8008566 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	b29a      	uxth	r2, r3
 8008554:	8a7b      	ldrh	r3, [r7, #18]
 8008556:	4013      	ands	r3, r2
 8008558:	b29a      	uxth	r2, r3
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	3302      	adds	r3, #2
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	e00c      	b.n	8008580 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	b2da      	uxtb	r2, r3
 800856e:	8a7b      	ldrh	r3, [r7, #18]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	4013      	ands	r3, r2
 8008574:	b2da      	uxtb	r2, r3
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	3301      	adds	r3, #1
 800857e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1c6      	bne.n	800852c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e000      	b.n	80085aa <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80085a8:	2302      	movs	r3, #2
  }
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3720      	adds	r7, #32
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	431a      	orrs	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4ba7      	ldr	r3, [pc, #668]	; (800887c <UART_SetConfig+0x2c8>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6812      	ldr	r2, [r2, #0]
 80085e6:	6979      	ldr	r1, [r7, #20]
 80085e8:	430b      	orrs	r3, r1
 80085ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	430a      	orrs	r2, r1
 8008624:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a95      	ldr	r2, [pc, #596]	; (8008880 <UART_SetConfig+0x2cc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d120      	bne.n	8008672 <UART_SetConfig+0xbe>
 8008630:	4b94      	ldr	r3, [pc, #592]	; (8008884 <UART_SetConfig+0x2d0>)
 8008632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	2b03      	cmp	r3, #3
 800863c:	d816      	bhi.n	800866c <UART_SetConfig+0xb8>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <UART_SetConfig+0x90>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008655 	.word	0x08008655
 8008648:	08008661 	.word	0x08008661
 800864c:	0800865b 	.word	0x0800865b
 8008650:	08008667 	.word	0x08008667
 8008654:	2301      	movs	r3, #1
 8008656:	77fb      	strb	r3, [r7, #31]
 8008658:	e14f      	b.n	80088fa <UART_SetConfig+0x346>
 800865a:	2302      	movs	r3, #2
 800865c:	77fb      	strb	r3, [r7, #31]
 800865e:	e14c      	b.n	80088fa <UART_SetConfig+0x346>
 8008660:	2304      	movs	r3, #4
 8008662:	77fb      	strb	r3, [r7, #31]
 8008664:	e149      	b.n	80088fa <UART_SetConfig+0x346>
 8008666:	2308      	movs	r3, #8
 8008668:	77fb      	strb	r3, [r7, #31]
 800866a:	e146      	b.n	80088fa <UART_SetConfig+0x346>
 800866c:	2310      	movs	r3, #16
 800866e:	77fb      	strb	r3, [r7, #31]
 8008670:	e143      	b.n	80088fa <UART_SetConfig+0x346>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a84      	ldr	r2, [pc, #528]	; (8008888 <UART_SetConfig+0x2d4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d132      	bne.n	80086e2 <UART_SetConfig+0x12e>
 800867c:	4b81      	ldr	r3, [pc, #516]	; (8008884 <UART_SetConfig+0x2d0>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	f003 030c 	and.w	r3, r3, #12
 8008686:	2b0c      	cmp	r3, #12
 8008688:	d828      	bhi.n	80086dc <UART_SetConfig+0x128>
 800868a:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <UART_SetConfig+0xdc>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086c5 	.word	0x080086c5
 8008694:	080086dd 	.word	0x080086dd
 8008698:	080086dd 	.word	0x080086dd
 800869c:	080086dd 	.word	0x080086dd
 80086a0:	080086d1 	.word	0x080086d1
 80086a4:	080086dd 	.word	0x080086dd
 80086a8:	080086dd 	.word	0x080086dd
 80086ac:	080086dd 	.word	0x080086dd
 80086b0:	080086cb 	.word	0x080086cb
 80086b4:	080086dd 	.word	0x080086dd
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	080086d7 	.word	0x080086d7
 80086c4:	2300      	movs	r3, #0
 80086c6:	77fb      	strb	r3, [r7, #31]
 80086c8:	e117      	b.n	80088fa <UART_SetConfig+0x346>
 80086ca:	2302      	movs	r3, #2
 80086cc:	77fb      	strb	r3, [r7, #31]
 80086ce:	e114      	b.n	80088fa <UART_SetConfig+0x346>
 80086d0:	2304      	movs	r3, #4
 80086d2:	77fb      	strb	r3, [r7, #31]
 80086d4:	e111      	b.n	80088fa <UART_SetConfig+0x346>
 80086d6:	2308      	movs	r3, #8
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e10e      	b.n	80088fa <UART_SetConfig+0x346>
 80086dc:	2310      	movs	r3, #16
 80086de:	77fb      	strb	r3, [r7, #31]
 80086e0:	e10b      	b.n	80088fa <UART_SetConfig+0x346>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a69      	ldr	r2, [pc, #420]	; (800888c <UART_SetConfig+0x2d8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d120      	bne.n	800872e <UART_SetConfig+0x17a>
 80086ec:	4b65      	ldr	r3, [pc, #404]	; (8008884 <UART_SetConfig+0x2d0>)
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086f6:	2b30      	cmp	r3, #48	; 0x30
 80086f8:	d013      	beq.n	8008722 <UART_SetConfig+0x16e>
 80086fa:	2b30      	cmp	r3, #48	; 0x30
 80086fc:	d814      	bhi.n	8008728 <UART_SetConfig+0x174>
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d009      	beq.n	8008716 <UART_SetConfig+0x162>
 8008702:	2b20      	cmp	r3, #32
 8008704:	d810      	bhi.n	8008728 <UART_SetConfig+0x174>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <UART_SetConfig+0x15c>
 800870a:	2b10      	cmp	r3, #16
 800870c:	d006      	beq.n	800871c <UART_SetConfig+0x168>
 800870e:	e00b      	b.n	8008728 <UART_SetConfig+0x174>
 8008710:	2300      	movs	r3, #0
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e0f1      	b.n	80088fa <UART_SetConfig+0x346>
 8008716:	2302      	movs	r3, #2
 8008718:	77fb      	strb	r3, [r7, #31]
 800871a:	e0ee      	b.n	80088fa <UART_SetConfig+0x346>
 800871c:	2304      	movs	r3, #4
 800871e:	77fb      	strb	r3, [r7, #31]
 8008720:	e0eb      	b.n	80088fa <UART_SetConfig+0x346>
 8008722:	2308      	movs	r3, #8
 8008724:	77fb      	strb	r3, [r7, #31]
 8008726:	e0e8      	b.n	80088fa <UART_SetConfig+0x346>
 8008728:	2310      	movs	r3, #16
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e0e5      	b.n	80088fa <UART_SetConfig+0x346>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a57      	ldr	r2, [pc, #348]	; (8008890 <UART_SetConfig+0x2dc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d120      	bne.n	800877a <UART_SetConfig+0x1c6>
 8008738:	4b52      	ldr	r3, [pc, #328]	; (8008884 <UART_SetConfig+0x2d0>)
 800873a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008742:	2bc0      	cmp	r3, #192	; 0xc0
 8008744:	d013      	beq.n	800876e <UART_SetConfig+0x1ba>
 8008746:	2bc0      	cmp	r3, #192	; 0xc0
 8008748:	d814      	bhi.n	8008774 <UART_SetConfig+0x1c0>
 800874a:	2b80      	cmp	r3, #128	; 0x80
 800874c:	d009      	beq.n	8008762 <UART_SetConfig+0x1ae>
 800874e:	2b80      	cmp	r3, #128	; 0x80
 8008750:	d810      	bhi.n	8008774 <UART_SetConfig+0x1c0>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <UART_SetConfig+0x1a8>
 8008756:	2b40      	cmp	r3, #64	; 0x40
 8008758:	d006      	beq.n	8008768 <UART_SetConfig+0x1b4>
 800875a:	e00b      	b.n	8008774 <UART_SetConfig+0x1c0>
 800875c:	2300      	movs	r3, #0
 800875e:	77fb      	strb	r3, [r7, #31]
 8008760:	e0cb      	b.n	80088fa <UART_SetConfig+0x346>
 8008762:	2302      	movs	r3, #2
 8008764:	77fb      	strb	r3, [r7, #31]
 8008766:	e0c8      	b.n	80088fa <UART_SetConfig+0x346>
 8008768:	2304      	movs	r3, #4
 800876a:	77fb      	strb	r3, [r7, #31]
 800876c:	e0c5      	b.n	80088fa <UART_SetConfig+0x346>
 800876e:	2308      	movs	r3, #8
 8008770:	77fb      	strb	r3, [r7, #31]
 8008772:	e0c2      	b.n	80088fa <UART_SetConfig+0x346>
 8008774:	2310      	movs	r3, #16
 8008776:	77fb      	strb	r3, [r7, #31]
 8008778:	e0bf      	b.n	80088fa <UART_SetConfig+0x346>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a45      	ldr	r2, [pc, #276]	; (8008894 <UART_SetConfig+0x2e0>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d125      	bne.n	80087d0 <UART_SetConfig+0x21c>
 8008784:	4b3f      	ldr	r3, [pc, #252]	; (8008884 <UART_SetConfig+0x2d0>)
 8008786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800878e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008792:	d017      	beq.n	80087c4 <UART_SetConfig+0x210>
 8008794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008798:	d817      	bhi.n	80087ca <UART_SetConfig+0x216>
 800879a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879e:	d00b      	beq.n	80087b8 <UART_SetConfig+0x204>
 80087a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a4:	d811      	bhi.n	80087ca <UART_SetConfig+0x216>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <UART_SetConfig+0x1fe>
 80087aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ae:	d006      	beq.n	80087be <UART_SetConfig+0x20a>
 80087b0:	e00b      	b.n	80087ca <UART_SetConfig+0x216>
 80087b2:	2300      	movs	r3, #0
 80087b4:	77fb      	strb	r3, [r7, #31]
 80087b6:	e0a0      	b.n	80088fa <UART_SetConfig+0x346>
 80087b8:	2302      	movs	r3, #2
 80087ba:	77fb      	strb	r3, [r7, #31]
 80087bc:	e09d      	b.n	80088fa <UART_SetConfig+0x346>
 80087be:	2304      	movs	r3, #4
 80087c0:	77fb      	strb	r3, [r7, #31]
 80087c2:	e09a      	b.n	80088fa <UART_SetConfig+0x346>
 80087c4:	2308      	movs	r3, #8
 80087c6:	77fb      	strb	r3, [r7, #31]
 80087c8:	e097      	b.n	80088fa <UART_SetConfig+0x346>
 80087ca:	2310      	movs	r3, #16
 80087cc:	77fb      	strb	r3, [r7, #31]
 80087ce:	e094      	b.n	80088fa <UART_SetConfig+0x346>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a30      	ldr	r2, [pc, #192]	; (8008898 <UART_SetConfig+0x2e4>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d125      	bne.n	8008826 <UART_SetConfig+0x272>
 80087da:	4b2a      	ldr	r3, [pc, #168]	; (8008884 <UART_SetConfig+0x2d0>)
 80087dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087e8:	d017      	beq.n	800881a <UART_SetConfig+0x266>
 80087ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ee:	d817      	bhi.n	8008820 <UART_SetConfig+0x26c>
 80087f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f4:	d00b      	beq.n	800880e <UART_SetConfig+0x25a>
 80087f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087fa:	d811      	bhi.n	8008820 <UART_SetConfig+0x26c>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <UART_SetConfig+0x254>
 8008800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008804:	d006      	beq.n	8008814 <UART_SetConfig+0x260>
 8008806:	e00b      	b.n	8008820 <UART_SetConfig+0x26c>
 8008808:	2301      	movs	r3, #1
 800880a:	77fb      	strb	r3, [r7, #31]
 800880c:	e075      	b.n	80088fa <UART_SetConfig+0x346>
 800880e:	2302      	movs	r3, #2
 8008810:	77fb      	strb	r3, [r7, #31]
 8008812:	e072      	b.n	80088fa <UART_SetConfig+0x346>
 8008814:	2304      	movs	r3, #4
 8008816:	77fb      	strb	r3, [r7, #31]
 8008818:	e06f      	b.n	80088fa <UART_SetConfig+0x346>
 800881a:	2308      	movs	r3, #8
 800881c:	77fb      	strb	r3, [r7, #31]
 800881e:	e06c      	b.n	80088fa <UART_SetConfig+0x346>
 8008820:	2310      	movs	r3, #16
 8008822:	77fb      	strb	r3, [r7, #31]
 8008824:	e069      	b.n	80088fa <UART_SetConfig+0x346>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1c      	ldr	r2, [pc, #112]	; (800889c <UART_SetConfig+0x2e8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d137      	bne.n	80088a0 <UART_SetConfig+0x2ec>
 8008830:	4b14      	ldr	r3, [pc, #80]	; (8008884 <UART_SetConfig+0x2d0>)
 8008832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008836:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800883a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800883e:	d017      	beq.n	8008870 <UART_SetConfig+0x2bc>
 8008840:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008844:	d817      	bhi.n	8008876 <UART_SetConfig+0x2c2>
 8008846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800884a:	d00b      	beq.n	8008864 <UART_SetConfig+0x2b0>
 800884c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008850:	d811      	bhi.n	8008876 <UART_SetConfig+0x2c2>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <UART_SetConfig+0x2aa>
 8008856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885a:	d006      	beq.n	800886a <UART_SetConfig+0x2b6>
 800885c:	e00b      	b.n	8008876 <UART_SetConfig+0x2c2>
 800885e:	2300      	movs	r3, #0
 8008860:	77fb      	strb	r3, [r7, #31]
 8008862:	e04a      	b.n	80088fa <UART_SetConfig+0x346>
 8008864:	2302      	movs	r3, #2
 8008866:	77fb      	strb	r3, [r7, #31]
 8008868:	e047      	b.n	80088fa <UART_SetConfig+0x346>
 800886a:	2304      	movs	r3, #4
 800886c:	77fb      	strb	r3, [r7, #31]
 800886e:	e044      	b.n	80088fa <UART_SetConfig+0x346>
 8008870:	2308      	movs	r3, #8
 8008872:	77fb      	strb	r3, [r7, #31]
 8008874:	e041      	b.n	80088fa <UART_SetConfig+0x346>
 8008876:	2310      	movs	r3, #16
 8008878:	77fb      	strb	r3, [r7, #31]
 800887a:	e03e      	b.n	80088fa <UART_SetConfig+0x346>
 800887c:	efff69f3 	.word	0xefff69f3
 8008880:	40011000 	.word	0x40011000
 8008884:	40023800 	.word	0x40023800
 8008888:	40004400 	.word	0x40004400
 800888c:	40004800 	.word	0x40004800
 8008890:	40004c00 	.word	0x40004c00
 8008894:	40005000 	.word	0x40005000
 8008898:	40011400 	.word	0x40011400
 800889c:	40007800 	.word	0x40007800
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a71      	ldr	r2, [pc, #452]	; (8008a6c <UART_SetConfig+0x4b8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d125      	bne.n	80088f6 <UART_SetConfig+0x342>
 80088aa:	4b71      	ldr	r3, [pc, #452]	; (8008a70 <UART_SetConfig+0x4bc>)
 80088ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80088b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80088b8:	d017      	beq.n	80088ea <UART_SetConfig+0x336>
 80088ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80088be:	d817      	bhi.n	80088f0 <UART_SetConfig+0x33c>
 80088c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088c4:	d00b      	beq.n	80088de <UART_SetConfig+0x32a>
 80088c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ca:	d811      	bhi.n	80088f0 <UART_SetConfig+0x33c>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <UART_SetConfig+0x324>
 80088d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088d4:	d006      	beq.n	80088e4 <UART_SetConfig+0x330>
 80088d6:	e00b      	b.n	80088f0 <UART_SetConfig+0x33c>
 80088d8:	2300      	movs	r3, #0
 80088da:	77fb      	strb	r3, [r7, #31]
 80088dc:	e00d      	b.n	80088fa <UART_SetConfig+0x346>
 80088de:	2302      	movs	r3, #2
 80088e0:	77fb      	strb	r3, [r7, #31]
 80088e2:	e00a      	b.n	80088fa <UART_SetConfig+0x346>
 80088e4:	2304      	movs	r3, #4
 80088e6:	77fb      	strb	r3, [r7, #31]
 80088e8:	e007      	b.n	80088fa <UART_SetConfig+0x346>
 80088ea:	2308      	movs	r3, #8
 80088ec:	77fb      	strb	r3, [r7, #31]
 80088ee:	e004      	b.n	80088fa <UART_SetConfig+0x346>
 80088f0:	2310      	movs	r3, #16
 80088f2:	77fb      	strb	r3, [r7, #31]
 80088f4:	e001      	b.n	80088fa <UART_SetConfig+0x346>
 80088f6:	2310      	movs	r3, #16
 80088f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008902:	d15b      	bne.n	80089bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008904:	7ffb      	ldrb	r3, [r7, #31]
 8008906:	2b08      	cmp	r3, #8
 8008908:	d827      	bhi.n	800895a <UART_SetConfig+0x3a6>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <UART_SetConfig+0x35c>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008935 	.word	0x08008935
 8008914:	0800893d 	.word	0x0800893d
 8008918:	08008945 	.word	0x08008945
 800891c:	0800895b 	.word	0x0800895b
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800895b 	.word	0x0800895b
 8008928:	0800895b 	.word	0x0800895b
 800892c:	0800895b 	.word	0x0800895b
 8008930:	08008953 	.word	0x08008953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008934:	f7fd fa5a 	bl	8005dec <HAL_RCC_GetPCLK1Freq>
 8008938:	61b8      	str	r0, [r7, #24]
        break;
 800893a:	e013      	b.n	8008964 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800893c:	f7fd fa6a 	bl	8005e14 <HAL_RCC_GetPCLK2Freq>
 8008940:	61b8      	str	r0, [r7, #24]
        break;
 8008942:	e00f      	b.n	8008964 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008944:	4b4b      	ldr	r3, [pc, #300]	; (8008a74 <UART_SetConfig+0x4c0>)
 8008946:	61bb      	str	r3, [r7, #24]
        break;
 8008948:	e00c      	b.n	8008964 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800894a:	f7fd f961 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 800894e:	61b8      	str	r0, [r7, #24]
        break;
 8008950:	e008      	b.n	8008964 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008956:	61bb      	str	r3, [r7, #24]
        break;
 8008958:	e004      	b.n	8008964 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	77bb      	strb	r3, [r7, #30]
        break;
 8008962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d074      	beq.n	8008a54 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	005a      	lsls	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	085b      	lsrs	r3, r3, #1
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	fbb2 f3f3 	udiv	r3, r2, r3
 800897e:	b29b      	uxth	r3, r3
 8008980:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b0f      	cmp	r3, #15
 8008986:	d916      	bls.n	80089b6 <UART_SetConfig+0x402>
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898e:	d212      	bcs.n	80089b6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f023 030f 	bic.w	r3, r3, #15
 8008998:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	89fb      	ldrh	r3, [r7, #14]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	89fa      	ldrh	r2, [r7, #14]
 80089b2:	60da      	str	r2, [r3, #12]
 80089b4:	e04e      	b.n	8008a54 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	77bb      	strb	r3, [r7, #30]
 80089ba:	e04b      	b.n	8008a54 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089bc:	7ffb      	ldrb	r3, [r7, #31]
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d827      	bhi.n	8008a12 <UART_SetConfig+0x45e>
 80089c2:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0x414>)
 80089c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	08008a13 	.word	0x08008a13
 80089d8:	08008a03 	.word	0x08008a03
 80089dc:	08008a13 	.word	0x08008a13
 80089e0:	08008a13 	.word	0x08008a13
 80089e4:	08008a13 	.word	0x08008a13
 80089e8:	08008a0b 	.word	0x08008a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ec:	f7fd f9fe 	bl	8005dec <HAL_RCC_GetPCLK1Freq>
 80089f0:	61b8      	str	r0, [r7, #24]
        break;
 80089f2:	e013      	b.n	8008a1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fd fa0e 	bl	8005e14 <HAL_RCC_GetPCLK2Freq>
 80089f8:	61b8      	str	r0, [r7, #24]
        break;
 80089fa:	e00f      	b.n	8008a1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089fc:	4b1d      	ldr	r3, [pc, #116]	; (8008a74 <UART_SetConfig+0x4c0>)
 80089fe:	61bb      	str	r3, [r7, #24]
        break;
 8008a00:	e00c      	b.n	8008a1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a02:	f7fd f905 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8008a06:	61b8      	str	r0, [r7, #24]
        break;
 8008a08:	e008      	b.n	8008a1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0e:	61bb      	str	r3, [r7, #24]
        break;
 8008a10:	e004      	b.n	8008a1c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	77bb      	strb	r3, [r7, #30]
        break;
 8008a1a:	bf00      	nop
    }

    if (pclk != 0U)
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d018      	beq.n	8008a54 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	085a      	lsrs	r2, r3, #1
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	441a      	add	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	d908      	bls.n	8008a50 <UART_SetConfig+0x49c>
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a44:	d204      	bcs.n	8008a50 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	60da      	str	r2, [r3, #12]
 8008a4e:	e001      	b.n	8008a54 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008a60:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3720      	adds	r7, #32
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40007c00 	.word	0x40007c00
 8008a70:	40023800 	.word	0x40023800
 8008a74:	00f42400 	.word	0x00f42400

08008a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00a      	beq.n	8008aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01a      	beq.n	8008b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b76:	d10a      	bne.n	8008b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	605a      	str	r2, [r3, #4]
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bcc:	f7fb fb7c 	bl	80042c8 <HAL_GetTick>
 8008bd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d10e      	bne.n	8008bfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f82d 	bl	8008c4e <UART_WaitOnFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e023      	b.n	8008c46 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d10e      	bne.n	8008c2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f817 	bl	8008c4e <UART_WaitOnFlagUntilTimeout>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e00d      	b.n	8008c46 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c5e:	e05e      	b.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c66:	d05a      	beq.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c68:	f7fb fb2e 	bl	80042c8 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d302      	bcc.n	8008c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d11b      	bne.n	8008cb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0201 	bic.w	r2, r2, #1
 8008c9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e043      	b.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d02c      	beq.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cd2:	d124      	bne.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008cec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 0201 	bic.w	r2, r2, #1
 8008cfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2220      	movs	r2, #32
 8008d02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2220      	movs	r2, #32
 8008d08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e00f      	b.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69da      	ldr	r2, [r3, #28]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	4013      	ands	r3, r2
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	bf0c      	ite	eq
 8008d2e:	2301      	moveq	r3, #1
 8008d30:	2300      	movne	r3, #0
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d091      	beq.n	8008c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <__errno>:
 8008d48:	4b01      	ldr	r3, [pc, #4]	; (8008d50 <__errno+0x8>)
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	200000a8 	.word	0x200000a8

08008d54 <__libc_init_array>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4d0d      	ldr	r5, [pc, #52]	; (8008d8c <__libc_init_array+0x38>)
 8008d58:	4c0d      	ldr	r4, [pc, #52]	; (8008d90 <__libc_init_array+0x3c>)
 8008d5a:	1b64      	subs	r4, r4, r5
 8008d5c:	10a4      	asrs	r4, r4, #2
 8008d5e:	2600      	movs	r6, #0
 8008d60:	42a6      	cmp	r6, r4
 8008d62:	d109      	bne.n	8008d78 <__libc_init_array+0x24>
 8008d64:	4d0b      	ldr	r5, [pc, #44]	; (8008d94 <__libc_init_array+0x40>)
 8008d66:	4c0c      	ldr	r4, [pc, #48]	; (8008d98 <__libc_init_array+0x44>)
 8008d68:	f002 fe26 	bl	800b9b8 <_init>
 8008d6c:	1b64      	subs	r4, r4, r5
 8008d6e:	10a4      	asrs	r4, r4, #2
 8008d70:	2600      	movs	r6, #0
 8008d72:	42a6      	cmp	r6, r4
 8008d74:	d105      	bne.n	8008d82 <__libc_init_array+0x2e>
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7c:	4798      	blx	r3
 8008d7e:	3601      	adds	r6, #1
 8008d80:	e7ee      	b.n	8008d60 <__libc_init_array+0xc>
 8008d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d86:	4798      	blx	r3
 8008d88:	3601      	adds	r6, #1
 8008d8a:	e7f2      	b.n	8008d72 <__libc_init_array+0x1e>
 8008d8c:	0800c0c4 	.word	0x0800c0c4
 8008d90:	0800c0c4 	.word	0x0800c0c4
 8008d94:	0800c0c4 	.word	0x0800c0c4
 8008d98:	0800c0c8 	.word	0x0800c0c8

08008d9c <memset>:
 8008d9c:	4402      	add	r2, r0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d100      	bne.n	8008da6 <memset+0xa>
 8008da4:	4770      	bx	lr
 8008da6:	f803 1b01 	strb.w	r1, [r3], #1
 8008daa:	e7f9      	b.n	8008da0 <memset+0x4>

08008dac <__cvt>:
 8008dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dae:	ed2d 8b02 	vpush	{d8}
 8008db2:	eeb0 8b40 	vmov.f64	d8, d0
 8008db6:	b085      	sub	sp, #20
 8008db8:	4617      	mov	r7, r2
 8008dba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008dbc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008dbe:	ee18 2a90 	vmov	r2, s17
 8008dc2:	f025 0520 	bic.w	r5, r5, #32
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	bfb6      	itet	lt
 8008dca:	222d      	movlt	r2, #45	; 0x2d
 8008dcc:	2200      	movge	r2, #0
 8008dce:	eeb1 8b40 	vneglt.f64	d8, d0
 8008dd2:	2d46      	cmp	r5, #70	; 0x46
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	d004      	beq.n	8008de4 <__cvt+0x38>
 8008dda:	2d45      	cmp	r5, #69	; 0x45
 8008ddc:	d100      	bne.n	8008de0 <__cvt+0x34>
 8008dde:	3401      	adds	r4, #1
 8008de0:	2102      	movs	r1, #2
 8008de2:	e000      	b.n	8008de6 <__cvt+0x3a>
 8008de4:	2103      	movs	r1, #3
 8008de6:	ab03      	add	r3, sp, #12
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	ab02      	add	r3, sp, #8
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4622      	mov	r2, r4
 8008df0:	4633      	mov	r3, r6
 8008df2:	eeb0 0b48 	vmov.f64	d0, d8
 8008df6:	f000 fccb 	bl	8009790 <_dtoa_r>
 8008dfa:	2d47      	cmp	r5, #71	; 0x47
 8008dfc:	d109      	bne.n	8008e12 <__cvt+0x66>
 8008dfe:	07fb      	lsls	r3, r7, #31
 8008e00:	d407      	bmi.n	8008e12 <__cvt+0x66>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e06:	1a1b      	subs	r3, r3, r0
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	b005      	add	sp, #20
 8008e0c:	ecbd 8b02 	vpop	{d8}
 8008e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e12:	2d46      	cmp	r5, #70	; 0x46
 8008e14:	eb00 0204 	add.w	r2, r0, r4
 8008e18:	d10c      	bne.n	8008e34 <__cvt+0x88>
 8008e1a:	7803      	ldrb	r3, [r0, #0]
 8008e1c:	2b30      	cmp	r3, #48	; 0x30
 8008e1e:	d107      	bne.n	8008e30 <__cvt+0x84>
 8008e20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e28:	bf1c      	itt	ne
 8008e2a:	f1c4 0401 	rsbne	r4, r4, #1
 8008e2e:	6034      	strne	r4, [r6, #0]
 8008e30:	6833      	ldr	r3, [r6, #0]
 8008e32:	441a      	add	r2, r3
 8008e34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	bf08      	it	eq
 8008e3e:	9203      	streq	r2, [sp, #12]
 8008e40:	2130      	movs	r1, #48	; 0x30
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d2dc      	bcs.n	8008e02 <__cvt+0x56>
 8008e48:	1c5c      	adds	r4, r3, #1
 8008e4a:	9403      	str	r4, [sp, #12]
 8008e4c:	7019      	strb	r1, [r3, #0]
 8008e4e:	e7f8      	b.n	8008e42 <__cvt+0x96>

08008e50 <__exponent>:
 8008e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e52:	4603      	mov	r3, r0
 8008e54:	2900      	cmp	r1, #0
 8008e56:	bfb8      	it	lt
 8008e58:	4249      	neglt	r1, r1
 8008e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8008e5e:	bfb4      	ite	lt
 8008e60:	222d      	movlt	r2, #45	; 0x2d
 8008e62:	222b      	movge	r2, #43	; 0x2b
 8008e64:	2909      	cmp	r1, #9
 8008e66:	7042      	strb	r2, [r0, #1]
 8008e68:	dd2a      	ble.n	8008ec0 <__exponent+0x70>
 8008e6a:	f10d 0407 	add.w	r4, sp, #7
 8008e6e:	46a4      	mov	ip, r4
 8008e70:	270a      	movs	r7, #10
 8008e72:	46a6      	mov	lr, r4
 8008e74:	460a      	mov	r2, r1
 8008e76:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e7a:	fb07 1516 	mls	r5, r7, r6, r1
 8008e7e:	3530      	adds	r5, #48	; 0x30
 8008e80:	2a63      	cmp	r2, #99	; 0x63
 8008e82:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	dcf1      	bgt.n	8008e72 <__exponent+0x22>
 8008e8e:	3130      	adds	r1, #48	; 0x30
 8008e90:	f1ae 0502 	sub.w	r5, lr, #2
 8008e94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e98:	1c44      	adds	r4, r0, #1
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4561      	cmp	r1, ip
 8008e9e:	d30a      	bcc.n	8008eb6 <__exponent+0x66>
 8008ea0:	f10d 0209 	add.w	r2, sp, #9
 8008ea4:	eba2 020e 	sub.w	r2, r2, lr
 8008ea8:	4565      	cmp	r5, ip
 8008eaa:	bf88      	it	hi
 8008eac:	2200      	movhi	r2, #0
 8008eae:	4413      	add	r3, r2
 8008eb0:	1a18      	subs	r0, r3, r0
 8008eb2:	b003      	add	sp, #12
 8008eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ebe:	e7ed      	b.n	8008e9c <__exponent+0x4c>
 8008ec0:	2330      	movs	r3, #48	; 0x30
 8008ec2:	3130      	adds	r1, #48	; 0x30
 8008ec4:	7083      	strb	r3, [r0, #2]
 8008ec6:	70c1      	strb	r1, [r0, #3]
 8008ec8:	1d03      	adds	r3, r0, #4
 8008eca:	e7f1      	b.n	8008eb0 <__exponent+0x60>
 8008ecc:	0000      	movs	r0, r0
	...

08008ed0 <_printf_float>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	b08b      	sub	sp, #44	; 0x2c
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008edc:	4616      	mov	r6, r2
 8008ede:	461f      	mov	r7, r3
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	f001 f9d7 	bl	800a294 <_localeconv_r>
 8008ee6:	f8d0 b000 	ldr.w	fp, [r0]
 8008eea:	4658      	mov	r0, fp
 8008eec:	f7f7 f9a8 	bl	8000240 <strlen>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9308      	str	r3, [sp, #32]
 8008ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ef8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	3307      	adds	r3, #7
 8008f00:	f023 0307 	bic.w	r3, r3, #7
 8008f04:	f103 0108 	add.w	r1, r3, #8
 8008f08:	f8c8 1000 	str.w	r1, [r8]
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f12:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008f16:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009178 <_printf_float+0x2a8>
 8008f1a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008f1e:	eeb0 6bc0 	vabs.f64	d6, d0
 8008f22:	eeb4 6b47 	vcmp.f64	d6, d7
 8008f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2a:	dd24      	ble.n	8008f76 <_printf_float+0xa6>
 8008f2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f34:	d502      	bpl.n	8008f3c <_printf_float+0x6c>
 8008f36:	232d      	movs	r3, #45	; 0x2d
 8008f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f3c:	4b90      	ldr	r3, [pc, #576]	; (8009180 <_printf_float+0x2b0>)
 8008f3e:	4891      	ldr	r0, [pc, #580]	; (8009184 <_printf_float+0x2b4>)
 8008f40:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f44:	bf94      	ite	ls
 8008f46:	4698      	movls	r8, r3
 8008f48:	4680      	movhi	r8, r0
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	f022 0204 	bic.w	r2, r2, #4
 8008f52:	2300      	movs	r3, #0
 8008f54:	6022      	str	r2, [r4, #0]
 8008f56:	9304      	str	r3, [sp, #16]
 8008f58:	9700      	str	r7, [sp, #0]
 8008f5a:	4633      	mov	r3, r6
 8008f5c:	aa09      	add	r2, sp, #36	; 0x24
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 f9d3 	bl	800930c <_printf_common>
 8008f66:	3001      	adds	r0, #1
 8008f68:	f040 808a 	bne.w	8009080 <_printf_float+0x1b0>
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	b00b      	add	sp, #44	; 0x2c
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	eeb4 0b40 	vcmp.f64	d0, d0
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7e:	d709      	bvc.n	8008f94 <_printf_float+0xc4>
 8008f80:	ee10 3a90 	vmov	r3, s1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfbc      	itt	lt
 8008f88:	232d      	movlt	r3, #45	; 0x2d
 8008f8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f8e:	487e      	ldr	r0, [pc, #504]	; (8009188 <_printf_float+0x2b8>)
 8008f90:	4b7e      	ldr	r3, [pc, #504]	; (800918c <_printf_float+0x2bc>)
 8008f92:	e7d5      	b.n	8008f40 <_printf_float+0x70>
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f9a:	9104      	str	r1, [sp, #16]
 8008f9c:	1c59      	adds	r1, r3, #1
 8008f9e:	d13c      	bne.n	800901a <_printf_float+0x14a>
 8008fa0:	2306      	movs	r3, #6
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9303      	str	r3, [sp, #12]
 8008fa8:	ab08      	add	r3, sp, #32
 8008faa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008fae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fb2:	ab07      	add	r3, sp, #28
 8008fb4:	6861      	ldr	r1, [r4, #4]
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	6022      	str	r2, [r4, #0]
 8008fba:	f10d 031b 	add.w	r3, sp, #27
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7ff fef4 	bl	8008dac <__cvt>
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	9907      	ldr	r1, [sp, #28]
 8008fc8:	2b47      	cmp	r3, #71	; 0x47
 8008fca:	4680      	mov	r8, r0
 8008fcc:	d108      	bne.n	8008fe0 <_printf_float+0x110>
 8008fce:	1cc8      	adds	r0, r1, #3
 8008fd0:	db02      	blt.n	8008fd8 <_printf_float+0x108>
 8008fd2:	6863      	ldr	r3, [r4, #4]
 8008fd4:	4299      	cmp	r1, r3
 8008fd6:	dd41      	ble.n	800905c <_printf_float+0x18c>
 8008fd8:	f1a9 0902 	sub.w	r9, r9, #2
 8008fdc:	fa5f f989 	uxtb.w	r9, r9
 8008fe0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fe4:	d820      	bhi.n	8009028 <_printf_float+0x158>
 8008fe6:	3901      	subs	r1, #1
 8008fe8:	464a      	mov	r2, r9
 8008fea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fee:	9107      	str	r1, [sp, #28]
 8008ff0:	f7ff ff2e 	bl	8008e50 <__exponent>
 8008ff4:	9a08      	ldr	r2, [sp, #32]
 8008ff6:	9004      	str	r0, [sp, #16]
 8008ff8:	1813      	adds	r3, r2, r0
 8008ffa:	2a01      	cmp	r2, #1
 8008ffc:	6123      	str	r3, [r4, #16]
 8008ffe:	dc02      	bgt.n	8009006 <_printf_float+0x136>
 8009000:	6822      	ldr	r2, [r4, #0]
 8009002:	07d2      	lsls	r2, r2, #31
 8009004:	d501      	bpl.n	800900a <_printf_float+0x13a>
 8009006:	3301      	adds	r3, #1
 8009008:	6123      	str	r3, [r4, #16]
 800900a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0a2      	beq.n	8008f58 <_printf_float+0x88>
 8009012:	232d      	movs	r3, #45	; 0x2d
 8009014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009018:	e79e      	b.n	8008f58 <_printf_float+0x88>
 800901a:	9904      	ldr	r1, [sp, #16]
 800901c:	2947      	cmp	r1, #71	; 0x47
 800901e:	d1c1      	bne.n	8008fa4 <_printf_float+0xd4>
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1bf      	bne.n	8008fa4 <_printf_float+0xd4>
 8009024:	2301      	movs	r3, #1
 8009026:	e7bc      	b.n	8008fa2 <_printf_float+0xd2>
 8009028:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800902c:	d118      	bne.n	8009060 <_printf_float+0x190>
 800902e:	2900      	cmp	r1, #0
 8009030:	6863      	ldr	r3, [r4, #4]
 8009032:	dd0b      	ble.n	800904c <_printf_float+0x17c>
 8009034:	6121      	str	r1, [r4, #16]
 8009036:	b913      	cbnz	r3, 800903e <_printf_float+0x16e>
 8009038:	6822      	ldr	r2, [r4, #0]
 800903a:	07d0      	lsls	r0, r2, #31
 800903c:	d502      	bpl.n	8009044 <_printf_float+0x174>
 800903e:	3301      	adds	r3, #1
 8009040:	440b      	add	r3, r1
 8009042:	6123      	str	r3, [r4, #16]
 8009044:	2300      	movs	r3, #0
 8009046:	65a1      	str	r1, [r4, #88]	; 0x58
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	e7de      	b.n	800900a <_printf_float+0x13a>
 800904c:	b913      	cbnz	r3, 8009054 <_printf_float+0x184>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	07d2      	lsls	r2, r2, #31
 8009052:	d501      	bpl.n	8009058 <_printf_float+0x188>
 8009054:	3302      	adds	r3, #2
 8009056:	e7f4      	b.n	8009042 <_printf_float+0x172>
 8009058:	2301      	movs	r3, #1
 800905a:	e7f2      	b.n	8009042 <_printf_float+0x172>
 800905c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	4299      	cmp	r1, r3
 8009064:	db05      	blt.n	8009072 <_printf_float+0x1a2>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	6121      	str	r1, [r4, #16]
 800906a:	07d8      	lsls	r0, r3, #31
 800906c:	d5ea      	bpl.n	8009044 <_printf_float+0x174>
 800906e:	1c4b      	adds	r3, r1, #1
 8009070:	e7e7      	b.n	8009042 <_printf_float+0x172>
 8009072:	2900      	cmp	r1, #0
 8009074:	bfd4      	ite	le
 8009076:	f1c1 0202 	rsble	r2, r1, #2
 800907a:	2201      	movgt	r2, #1
 800907c:	4413      	add	r3, r2
 800907e:	e7e0      	b.n	8009042 <_printf_float+0x172>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	055a      	lsls	r2, r3, #21
 8009084:	d407      	bmi.n	8009096 <_printf_float+0x1c6>
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	4642      	mov	r2, r8
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	47b8      	blx	r7
 8009090:	3001      	adds	r0, #1
 8009092:	d12a      	bne.n	80090ea <_printf_float+0x21a>
 8009094:	e76a      	b.n	8008f6c <_printf_float+0x9c>
 8009096:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800909a:	f240 80e2 	bls.w	8009262 <_printf_float+0x392>
 800909e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80090a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090aa:	d133      	bne.n	8009114 <_printf_float+0x244>
 80090ac:	4a38      	ldr	r2, [pc, #224]	; (8009190 <_printf_float+0x2c0>)
 80090ae:	2301      	movs	r3, #1
 80090b0:	4631      	mov	r1, r6
 80090b2:	4628      	mov	r0, r5
 80090b4:	47b8      	blx	r7
 80090b6:	3001      	adds	r0, #1
 80090b8:	f43f af58 	beq.w	8008f6c <_printf_float+0x9c>
 80090bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	db02      	blt.n	80090ca <_printf_float+0x1fa>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	07d8      	lsls	r0, r3, #31
 80090c8:	d50f      	bpl.n	80090ea <_printf_float+0x21a>
 80090ca:	4653      	mov	r3, sl
 80090cc:	465a      	mov	r2, fp
 80090ce:	4631      	mov	r1, r6
 80090d0:	4628      	mov	r0, r5
 80090d2:	47b8      	blx	r7
 80090d4:	3001      	adds	r0, #1
 80090d6:	f43f af49 	beq.w	8008f6c <_printf_float+0x9c>
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	f104 091a 	add.w	r9, r4, #26
 80090e2:	9b08      	ldr	r3, [sp, #32]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	4543      	cmp	r3, r8
 80090e8:	dc09      	bgt.n	80090fe <_printf_float+0x22e>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	079b      	lsls	r3, r3, #30
 80090ee:	f100 8108 	bmi.w	8009302 <_printf_float+0x432>
 80090f2:	68e0      	ldr	r0, [r4, #12]
 80090f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f6:	4298      	cmp	r0, r3
 80090f8:	bfb8      	it	lt
 80090fa:	4618      	movlt	r0, r3
 80090fc:	e738      	b.n	8008f70 <_printf_float+0xa0>
 80090fe:	2301      	movs	r3, #1
 8009100:	464a      	mov	r2, r9
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	f43f af2f 	beq.w	8008f6c <_printf_float+0x9c>
 800910e:	f108 0801 	add.w	r8, r8, #1
 8009112:	e7e6      	b.n	80090e2 <_printf_float+0x212>
 8009114:	9b07      	ldr	r3, [sp, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	dc3c      	bgt.n	8009194 <_printf_float+0x2c4>
 800911a:	4a1d      	ldr	r2, [pc, #116]	; (8009190 <_printf_float+0x2c0>)
 800911c:	2301      	movs	r3, #1
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	f43f af21 	beq.w	8008f6c <_printf_float+0x9c>
 800912a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800912e:	4313      	orrs	r3, r2
 8009130:	d102      	bne.n	8009138 <_printf_float+0x268>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	07d9      	lsls	r1, r3, #31
 8009136:	d5d8      	bpl.n	80090ea <_printf_float+0x21a>
 8009138:	4653      	mov	r3, sl
 800913a:	465a      	mov	r2, fp
 800913c:	4631      	mov	r1, r6
 800913e:	4628      	mov	r0, r5
 8009140:	47b8      	blx	r7
 8009142:	3001      	adds	r0, #1
 8009144:	f43f af12 	beq.w	8008f6c <_printf_float+0x9c>
 8009148:	f04f 0900 	mov.w	r9, #0
 800914c:	f104 0a1a 	add.w	sl, r4, #26
 8009150:	9b07      	ldr	r3, [sp, #28]
 8009152:	425b      	negs	r3, r3
 8009154:	454b      	cmp	r3, r9
 8009156:	dc01      	bgt.n	800915c <_printf_float+0x28c>
 8009158:	9b08      	ldr	r3, [sp, #32]
 800915a:	e795      	b.n	8009088 <_printf_float+0x1b8>
 800915c:	2301      	movs	r3, #1
 800915e:	4652      	mov	r2, sl
 8009160:	4631      	mov	r1, r6
 8009162:	4628      	mov	r0, r5
 8009164:	47b8      	blx	r7
 8009166:	3001      	adds	r0, #1
 8009168:	f43f af00 	beq.w	8008f6c <_printf_float+0x9c>
 800916c:	f109 0901 	add.w	r9, r9, #1
 8009170:	e7ee      	b.n	8009150 <_printf_float+0x280>
 8009172:	bf00      	nop
 8009174:	f3af 8000 	nop.w
 8009178:	ffffffff 	.word	0xffffffff
 800917c:	7fefffff 	.word	0x7fefffff
 8009180:	0800bcdc 	.word	0x0800bcdc
 8009184:	0800bce0 	.word	0x0800bce0
 8009188:	0800bce8 	.word	0x0800bce8
 800918c:	0800bce4 	.word	0x0800bce4
 8009190:	0800bcec 	.word	0x0800bcec
 8009194:	9a08      	ldr	r2, [sp, #32]
 8009196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009198:	429a      	cmp	r2, r3
 800919a:	bfa8      	it	ge
 800919c:	461a      	movge	r2, r3
 800919e:	2a00      	cmp	r2, #0
 80091a0:	4691      	mov	r9, r2
 80091a2:	dc38      	bgt.n	8009216 <_printf_float+0x346>
 80091a4:	2300      	movs	r3, #0
 80091a6:	9305      	str	r3, [sp, #20]
 80091a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ac:	f104 021a 	add.w	r2, r4, #26
 80091b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091b2:	9905      	ldr	r1, [sp, #20]
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	eba3 0309 	sub.w	r3, r3, r9
 80091ba:	428b      	cmp	r3, r1
 80091bc:	dc33      	bgt.n	8009226 <_printf_float+0x356>
 80091be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	db3c      	blt.n	8009240 <_printf_float+0x370>
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	07da      	lsls	r2, r3, #31
 80091ca:	d439      	bmi.n	8009240 <_printf_float+0x370>
 80091cc:	9a08      	ldr	r2, [sp, #32]
 80091ce:	9b04      	ldr	r3, [sp, #16]
 80091d0:	9907      	ldr	r1, [sp, #28]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	eba2 0901 	sub.w	r9, r2, r1
 80091d8:	4599      	cmp	r9, r3
 80091da:	bfa8      	it	ge
 80091dc:	4699      	movge	r9, r3
 80091de:	f1b9 0f00 	cmp.w	r9, #0
 80091e2:	dc35      	bgt.n	8009250 <_printf_float+0x380>
 80091e4:	f04f 0800 	mov.w	r8, #0
 80091e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ec:	f104 0a1a 	add.w	sl, r4, #26
 80091f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	eba3 0309 	sub.w	r3, r3, r9
 80091fa:	4543      	cmp	r3, r8
 80091fc:	f77f af75 	ble.w	80090ea <_printf_float+0x21a>
 8009200:	2301      	movs	r3, #1
 8009202:	4652      	mov	r2, sl
 8009204:	4631      	mov	r1, r6
 8009206:	4628      	mov	r0, r5
 8009208:	47b8      	blx	r7
 800920a:	3001      	adds	r0, #1
 800920c:	f43f aeae 	beq.w	8008f6c <_printf_float+0x9c>
 8009210:	f108 0801 	add.w	r8, r8, #1
 8009214:	e7ec      	b.n	80091f0 <_printf_float+0x320>
 8009216:	4613      	mov	r3, r2
 8009218:	4631      	mov	r1, r6
 800921a:	4642      	mov	r2, r8
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	d1bf      	bne.n	80091a4 <_printf_float+0x2d4>
 8009224:	e6a2      	b.n	8008f6c <_printf_float+0x9c>
 8009226:	2301      	movs	r3, #1
 8009228:	4631      	mov	r1, r6
 800922a:	4628      	mov	r0, r5
 800922c:	9204      	str	r2, [sp, #16]
 800922e:	47b8      	blx	r7
 8009230:	3001      	adds	r0, #1
 8009232:	f43f ae9b 	beq.w	8008f6c <_printf_float+0x9c>
 8009236:	9b05      	ldr	r3, [sp, #20]
 8009238:	9a04      	ldr	r2, [sp, #16]
 800923a:	3301      	adds	r3, #1
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	e7b7      	b.n	80091b0 <_printf_float+0x2e0>
 8009240:	4653      	mov	r3, sl
 8009242:	465a      	mov	r2, fp
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	d1be      	bne.n	80091cc <_printf_float+0x2fc>
 800924e:	e68d      	b.n	8008f6c <_printf_float+0x9c>
 8009250:	9a04      	ldr	r2, [sp, #16]
 8009252:	464b      	mov	r3, r9
 8009254:	4442      	add	r2, r8
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	47b8      	blx	r7
 800925c:	3001      	adds	r0, #1
 800925e:	d1c1      	bne.n	80091e4 <_printf_float+0x314>
 8009260:	e684      	b.n	8008f6c <_printf_float+0x9c>
 8009262:	9a08      	ldr	r2, [sp, #32]
 8009264:	2a01      	cmp	r2, #1
 8009266:	dc01      	bgt.n	800926c <_printf_float+0x39c>
 8009268:	07db      	lsls	r3, r3, #31
 800926a:	d537      	bpl.n	80092dc <_printf_float+0x40c>
 800926c:	2301      	movs	r3, #1
 800926e:	4642      	mov	r2, r8
 8009270:	4631      	mov	r1, r6
 8009272:	4628      	mov	r0, r5
 8009274:	47b8      	blx	r7
 8009276:	3001      	adds	r0, #1
 8009278:	f43f ae78 	beq.w	8008f6c <_printf_float+0x9c>
 800927c:	4653      	mov	r3, sl
 800927e:	465a      	mov	r2, fp
 8009280:	4631      	mov	r1, r6
 8009282:	4628      	mov	r0, r5
 8009284:	47b8      	blx	r7
 8009286:	3001      	adds	r0, #1
 8009288:	f43f ae70 	beq.w	8008f6c <_printf_float+0x9c>
 800928c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009290:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009298:	d01b      	beq.n	80092d2 <_printf_float+0x402>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	f108 0201 	add.w	r2, r8, #1
 80092a0:	3b01      	subs	r3, #1
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	d10e      	bne.n	80092ca <_printf_float+0x3fa>
 80092ac:	e65e      	b.n	8008f6c <_printf_float+0x9c>
 80092ae:	2301      	movs	r3, #1
 80092b0:	464a      	mov	r2, r9
 80092b2:	4631      	mov	r1, r6
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b8      	blx	r7
 80092b8:	3001      	adds	r0, #1
 80092ba:	f43f ae57 	beq.w	8008f6c <_printf_float+0x9c>
 80092be:	f108 0801 	add.w	r8, r8, #1
 80092c2:	9b08      	ldr	r3, [sp, #32]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	4543      	cmp	r3, r8
 80092c8:	dcf1      	bgt.n	80092ae <_printf_float+0x3de>
 80092ca:	9b04      	ldr	r3, [sp, #16]
 80092cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092d0:	e6db      	b.n	800908a <_printf_float+0x1ba>
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	f104 091a 	add.w	r9, r4, #26
 80092da:	e7f2      	b.n	80092c2 <_printf_float+0x3f2>
 80092dc:	2301      	movs	r3, #1
 80092de:	4642      	mov	r2, r8
 80092e0:	e7df      	b.n	80092a2 <_printf_float+0x3d2>
 80092e2:	2301      	movs	r3, #1
 80092e4:	464a      	mov	r2, r9
 80092e6:	4631      	mov	r1, r6
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b8      	blx	r7
 80092ec:	3001      	adds	r0, #1
 80092ee:	f43f ae3d 	beq.w	8008f6c <_printf_float+0x9c>
 80092f2:	f108 0801 	add.w	r8, r8, #1
 80092f6:	68e3      	ldr	r3, [r4, #12]
 80092f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092fa:	1a5b      	subs	r3, r3, r1
 80092fc:	4543      	cmp	r3, r8
 80092fe:	dcf0      	bgt.n	80092e2 <_printf_float+0x412>
 8009300:	e6f7      	b.n	80090f2 <_printf_float+0x222>
 8009302:	f04f 0800 	mov.w	r8, #0
 8009306:	f104 0919 	add.w	r9, r4, #25
 800930a:	e7f4      	b.n	80092f6 <_printf_float+0x426>

0800930c <_printf_common>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	4616      	mov	r6, r2
 8009312:	4699      	mov	r9, r3
 8009314:	688a      	ldr	r2, [r1, #8]
 8009316:	690b      	ldr	r3, [r1, #16]
 8009318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800931c:	4293      	cmp	r3, r2
 800931e:	bfb8      	it	lt
 8009320:	4613      	movlt	r3, r2
 8009322:	6033      	str	r3, [r6, #0]
 8009324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009328:	4607      	mov	r7, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b10a      	cbz	r2, 8009332 <_printf_common+0x26>
 800932e:	3301      	adds	r3, #1
 8009330:	6033      	str	r3, [r6, #0]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	0699      	lsls	r1, r3, #26
 8009336:	bf42      	ittt	mi
 8009338:	6833      	ldrmi	r3, [r6, #0]
 800933a:	3302      	addmi	r3, #2
 800933c:	6033      	strmi	r3, [r6, #0]
 800933e:	6825      	ldr	r5, [r4, #0]
 8009340:	f015 0506 	ands.w	r5, r5, #6
 8009344:	d106      	bne.n	8009354 <_printf_common+0x48>
 8009346:	f104 0a19 	add.w	sl, r4, #25
 800934a:	68e3      	ldr	r3, [r4, #12]
 800934c:	6832      	ldr	r2, [r6, #0]
 800934e:	1a9b      	subs	r3, r3, r2
 8009350:	42ab      	cmp	r3, r5
 8009352:	dc26      	bgt.n	80093a2 <_printf_common+0x96>
 8009354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009358:	1e13      	subs	r3, r2, #0
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	bf18      	it	ne
 800935e:	2301      	movne	r3, #1
 8009360:	0692      	lsls	r2, r2, #26
 8009362:	d42b      	bmi.n	80093bc <_printf_common+0xb0>
 8009364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009368:	4649      	mov	r1, r9
 800936a:	4638      	mov	r0, r7
 800936c:	47c0      	blx	r8
 800936e:	3001      	adds	r0, #1
 8009370:	d01e      	beq.n	80093b0 <_printf_common+0xa4>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	68e5      	ldr	r5, [r4, #12]
 8009376:	6832      	ldr	r2, [r6, #0]
 8009378:	f003 0306 	and.w	r3, r3, #6
 800937c:	2b04      	cmp	r3, #4
 800937e:	bf08      	it	eq
 8009380:	1aad      	subeq	r5, r5, r2
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	6922      	ldr	r2, [r4, #16]
 8009386:	bf0c      	ite	eq
 8009388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800938c:	2500      	movne	r5, #0
 800938e:	4293      	cmp	r3, r2
 8009390:	bfc4      	itt	gt
 8009392:	1a9b      	subgt	r3, r3, r2
 8009394:	18ed      	addgt	r5, r5, r3
 8009396:	2600      	movs	r6, #0
 8009398:	341a      	adds	r4, #26
 800939a:	42b5      	cmp	r5, r6
 800939c:	d11a      	bne.n	80093d4 <_printf_common+0xc8>
 800939e:	2000      	movs	r0, #0
 80093a0:	e008      	b.n	80093b4 <_printf_common+0xa8>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4652      	mov	r2, sl
 80093a6:	4649      	mov	r1, r9
 80093a8:	4638      	mov	r0, r7
 80093aa:	47c0      	blx	r8
 80093ac:	3001      	adds	r0, #1
 80093ae:	d103      	bne.n	80093b8 <_printf_common+0xac>
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b8:	3501      	adds	r5, #1
 80093ba:	e7c6      	b.n	800934a <_printf_common+0x3e>
 80093bc:	18e1      	adds	r1, r4, r3
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	2030      	movs	r0, #48	; 0x30
 80093c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093c6:	4422      	add	r2, r4
 80093c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093d0:	3302      	adds	r3, #2
 80093d2:	e7c7      	b.n	8009364 <_printf_common+0x58>
 80093d4:	2301      	movs	r3, #1
 80093d6:	4622      	mov	r2, r4
 80093d8:	4649      	mov	r1, r9
 80093da:	4638      	mov	r0, r7
 80093dc:	47c0      	blx	r8
 80093de:	3001      	adds	r0, #1
 80093e0:	d0e6      	beq.n	80093b0 <_printf_common+0xa4>
 80093e2:	3601      	adds	r6, #1
 80093e4:	e7d9      	b.n	800939a <_printf_common+0x8e>
	...

080093e8 <_printf_i>:
 80093e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093ec:	460c      	mov	r4, r1
 80093ee:	4691      	mov	r9, r2
 80093f0:	7e27      	ldrb	r7, [r4, #24]
 80093f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093f4:	2f78      	cmp	r7, #120	; 0x78
 80093f6:	4680      	mov	r8, r0
 80093f8:	469a      	mov	sl, r3
 80093fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093fe:	d807      	bhi.n	8009410 <_printf_i+0x28>
 8009400:	2f62      	cmp	r7, #98	; 0x62
 8009402:	d80a      	bhi.n	800941a <_printf_i+0x32>
 8009404:	2f00      	cmp	r7, #0
 8009406:	f000 80d8 	beq.w	80095ba <_printf_i+0x1d2>
 800940a:	2f58      	cmp	r7, #88	; 0x58
 800940c:	f000 80a3 	beq.w	8009556 <_printf_i+0x16e>
 8009410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009418:	e03a      	b.n	8009490 <_printf_i+0xa8>
 800941a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800941e:	2b15      	cmp	r3, #21
 8009420:	d8f6      	bhi.n	8009410 <_printf_i+0x28>
 8009422:	a001      	add	r0, pc, #4	; (adr r0, 8009428 <_printf_i+0x40>)
 8009424:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009428:	08009481 	.word	0x08009481
 800942c:	08009495 	.word	0x08009495
 8009430:	08009411 	.word	0x08009411
 8009434:	08009411 	.word	0x08009411
 8009438:	08009411 	.word	0x08009411
 800943c:	08009411 	.word	0x08009411
 8009440:	08009495 	.word	0x08009495
 8009444:	08009411 	.word	0x08009411
 8009448:	08009411 	.word	0x08009411
 800944c:	08009411 	.word	0x08009411
 8009450:	08009411 	.word	0x08009411
 8009454:	080095a1 	.word	0x080095a1
 8009458:	080094c5 	.word	0x080094c5
 800945c:	08009583 	.word	0x08009583
 8009460:	08009411 	.word	0x08009411
 8009464:	08009411 	.word	0x08009411
 8009468:	080095c3 	.word	0x080095c3
 800946c:	08009411 	.word	0x08009411
 8009470:	080094c5 	.word	0x080094c5
 8009474:	08009411 	.word	0x08009411
 8009478:	08009411 	.word	0x08009411
 800947c:	0800958b 	.word	0x0800958b
 8009480:	680b      	ldr	r3, [r1, #0]
 8009482:	1d1a      	adds	r2, r3, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	600a      	str	r2, [r1, #0]
 8009488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800948c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009490:	2301      	movs	r3, #1
 8009492:	e0a3      	b.n	80095dc <_printf_i+0x1f4>
 8009494:	6825      	ldr	r5, [r4, #0]
 8009496:	6808      	ldr	r0, [r1, #0]
 8009498:	062e      	lsls	r6, r5, #24
 800949a:	f100 0304 	add.w	r3, r0, #4
 800949e:	d50a      	bpl.n	80094b6 <_printf_i+0xce>
 80094a0:	6805      	ldr	r5, [r0, #0]
 80094a2:	600b      	str	r3, [r1, #0]
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	da03      	bge.n	80094b0 <_printf_i+0xc8>
 80094a8:	232d      	movs	r3, #45	; 0x2d
 80094aa:	426d      	negs	r5, r5
 80094ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b0:	485e      	ldr	r0, [pc, #376]	; (800962c <_printf_i+0x244>)
 80094b2:	230a      	movs	r3, #10
 80094b4:	e019      	b.n	80094ea <_printf_i+0x102>
 80094b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094ba:	6805      	ldr	r5, [r0, #0]
 80094bc:	600b      	str	r3, [r1, #0]
 80094be:	bf18      	it	ne
 80094c0:	b22d      	sxthne	r5, r5
 80094c2:	e7ef      	b.n	80094a4 <_printf_i+0xbc>
 80094c4:	680b      	ldr	r3, [r1, #0]
 80094c6:	6825      	ldr	r5, [r4, #0]
 80094c8:	1d18      	adds	r0, r3, #4
 80094ca:	6008      	str	r0, [r1, #0]
 80094cc:	0628      	lsls	r0, r5, #24
 80094ce:	d501      	bpl.n	80094d4 <_printf_i+0xec>
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	e002      	b.n	80094da <_printf_i+0xf2>
 80094d4:	0669      	lsls	r1, r5, #25
 80094d6:	d5fb      	bpl.n	80094d0 <_printf_i+0xe8>
 80094d8:	881d      	ldrh	r5, [r3, #0]
 80094da:	4854      	ldr	r0, [pc, #336]	; (800962c <_printf_i+0x244>)
 80094dc:	2f6f      	cmp	r7, #111	; 0x6f
 80094de:	bf0c      	ite	eq
 80094e0:	2308      	moveq	r3, #8
 80094e2:	230a      	movne	r3, #10
 80094e4:	2100      	movs	r1, #0
 80094e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094ea:	6866      	ldr	r6, [r4, #4]
 80094ec:	60a6      	str	r6, [r4, #8]
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	bfa2      	ittt	ge
 80094f2:	6821      	ldrge	r1, [r4, #0]
 80094f4:	f021 0104 	bicge.w	r1, r1, #4
 80094f8:	6021      	strge	r1, [r4, #0]
 80094fa:	b90d      	cbnz	r5, 8009500 <_printf_i+0x118>
 80094fc:	2e00      	cmp	r6, #0
 80094fe:	d04d      	beq.n	800959c <_printf_i+0x1b4>
 8009500:	4616      	mov	r6, r2
 8009502:	fbb5 f1f3 	udiv	r1, r5, r3
 8009506:	fb03 5711 	mls	r7, r3, r1, r5
 800950a:	5dc7      	ldrb	r7, [r0, r7]
 800950c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009510:	462f      	mov	r7, r5
 8009512:	42bb      	cmp	r3, r7
 8009514:	460d      	mov	r5, r1
 8009516:	d9f4      	bls.n	8009502 <_printf_i+0x11a>
 8009518:	2b08      	cmp	r3, #8
 800951a:	d10b      	bne.n	8009534 <_printf_i+0x14c>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	07df      	lsls	r7, r3, #31
 8009520:	d508      	bpl.n	8009534 <_printf_i+0x14c>
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	6861      	ldr	r1, [r4, #4]
 8009526:	4299      	cmp	r1, r3
 8009528:	bfde      	ittt	le
 800952a:	2330      	movle	r3, #48	; 0x30
 800952c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009530:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009534:	1b92      	subs	r2, r2, r6
 8009536:	6122      	str	r2, [r4, #16]
 8009538:	f8cd a000 	str.w	sl, [sp]
 800953c:	464b      	mov	r3, r9
 800953e:	aa03      	add	r2, sp, #12
 8009540:	4621      	mov	r1, r4
 8009542:	4640      	mov	r0, r8
 8009544:	f7ff fee2 	bl	800930c <_printf_common>
 8009548:	3001      	adds	r0, #1
 800954a:	d14c      	bne.n	80095e6 <_printf_i+0x1fe>
 800954c:	f04f 30ff 	mov.w	r0, #4294967295
 8009550:	b004      	add	sp, #16
 8009552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009556:	4835      	ldr	r0, [pc, #212]	; (800962c <_printf_i+0x244>)
 8009558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	680e      	ldr	r6, [r1, #0]
 8009560:	061f      	lsls	r7, r3, #24
 8009562:	f856 5b04 	ldr.w	r5, [r6], #4
 8009566:	600e      	str	r6, [r1, #0]
 8009568:	d514      	bpl.n	8009594 <_printf_i+0x1ac>
 800956a:	07d9      	lsls	r1, r3, #31
 800956c:	bf44      	itt	mi
 800956e:	f043 0320 	orrmi.w	r3, r3, #32
 8009572:	6023      	strmi	r3, [r4, #0]
 8009574:	b91d      	cbnz	r5, 800957e <_printf_i+0x196>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	f023 0320 	bic.w	r3, r3, #32
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	2310      	movs	r3, #16
 8009580:	e7b0      	b.n	80094e4 <_printf_i+0xfc>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	f043 0320 	orr.w	r3, r3, #32
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	2378      	movs	r3, #120	; 0x78
 800958c:	4828      	ldr	r0, [pc, #160]	; (8009630 <_printf_i+0x248>)
 800958e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009592:	e7e3      	b.n	800955c <_printf_i+0x174>
 8009594:	065e      	lsls	r6, r3, #25
 8009596:	bf48      	it	mi
 8009598:	b2ad      	uxthmi	r5, r5
 800959a:	e7e6      	b.n	800956a <_printf_i+0x182>
 800959c:	4616      	mov	r6, r2
 800959e:	e7bb      	b.n	8009518 <_printf_i+0x130>
 80095a0:	680b      	ldr	r3, [r1, #0]
 80095a2:	6826      	ldr	r6, [r4, #0]
 80095a4:	6960      	ldr	r0, [r4, #20]
 80095a6:	1d1d      	adds	r5, r3, #4
 80095a8:	600d      	str	r5, [r1, #0]
 80095aa:	0635      	lsls	r5, r6, #24
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	d501      	bpl.n	80095b4 <_printf_i+0x1cc>
 80095b0:	6018      	str	r0, [r3, #0]
 80095b2:	e002      	b.n	80095ba <_printf_i+0x1d2>
 80095b4:	0671      	lsls	r1, r6, #25
 80095b6:	d5fb      	bpl.n	80095b0 <_printf_i+0x1c8>
 80095b8:	8018      	strh	r0, [r3, #0]
 80095ba:	2300      	movs	r3, #0
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	4616      	mov	r6, r2
 80095c0:	e7ba      	b.n	8009538 <_printf_i+0x150>
 80095c2:	680b      	ldr	r3, [r1, #0]
 80095c4:	1d1a      	adds	r2, r3, #4
 80095c6:	600a      	str	r2, [r1, #0]
 80095c8:	681e      	ldr	r6, [r3, #0]
 80095ca:	6862      	ldr	r2, [r4, #4]
 80095cc:	2100      	movs	r1, #0
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7f6 fe3e 	bl	8000250 <memchr>
 80095d4:	b108      	cbz	r0, 80095da <_printf_i+0x1f2>
 80095d6:	1b80      	subs	r0, r0, r6
 80095d8:	6060      	str	r0, [r4, #4]
 80095da:	6863      	ldr	r3, [r4, #4]
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	2300      	movs	r3, #0
 80095e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e4:	e7a8      	b.n	8009538 <_printf_i+0x150>
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	4632      	mov	r2, r6
 80095ea:	4649      	mov	r1, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	47d0      	blx	sl
 80095f0:	3001      	adds	r0, #1
 80095f2:	d0ab      	beq.n	800954c <_printf_i+0x164>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	079b      	lsls	r3, r3, #30
 80095f8:	d413      	bmi.n	8009622 <_printf_i+0x23a>
 80095fa:	68e0      	ldr	r0, [r4, #12]
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	4298      	cmp	r0, r3
 8009600:	bfb8      	it	lt
 8009602:	4618      	movlt	r0, r3
 8009604:	e7a4      	b.n	8009550 <_printf_i+0x168>
 8009606:	2301      	movs	r3, #1
 8009608:	4632      	mov	r2, r6
 800960a:	4649      	mov	r1, r9
 800960c:	4640      	mov	r0, r8
 800960e:	47d0      	blx	sl
 8009610:	3001      	adds	r0, #1
 8009612:	d09b      	beq.n	800954c <_printf_i+0x164>
 8009614:	3501      	adds	r5, #1
 8009616:	68e3      	ldr	r3, [r4, #12]
 8009618:	9903      	ldr	r1, [sp, #12]
 800961a:	1a5b      	subs	r3, r3, r1
 800961c:	42ab      	cmp	r3, r5
 800961e:	dcf2      	bgt.n	8009606 <_printf_i+0x21e>
 8009620:	e7eb      	b.n	80095fa <_printf_i+0x212>
 8009622:	2500      	movs	r5, #0
 8009624:	f104 0619 	add.w	r6, r4, #25
 8009628:	e7f5      	b.n	8009616 <_printf_i+0x22e>
 800962a:	bf00      	nop
 800962c:	0800bcee 	.word	0x0800bcee
 8009630:	0800bcff 	.word	0x0800bcff

08009634 <siprintf>:
 8009634:	b40e      	push	{r1, r2, r3}
 8009636:	b500      	push	{lr}
 8009638:	b09c      	sub	sp, #112	; 0x70
 800963a:	ab1d      	add	r3, sp, #116	; 0x74
 800963c:	9002      	str	r0, [sp, #8]
 800963e:	9006      	str	r0, [sp, #24]
 8009640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009644:	4809      	ldr	r0, [pc, #36]	; (800966c <siprintf+0x38>)
 8009646:	9107      	str	r1, [sp, #28]
 8009648:	9104      	str	r1, [sp, #16]
 800964a:	4909      	ldr	r1, [pc, #36]	; (8009670 <siprintf+0x3c>)
 800964c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009650:	9105      	str	r1, [sp, #20]
 8009652:	6800      	ldr	r0, [r0, #0]
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	a902      	add	r1, sp, #8
 8009658:	f001 faca 	bl	800abf0 <_svfiprintf_r>
 800965c:	9b02      	ldr	r3, [sp, #8]
 800965e:	2200      	movs	r2, #0
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	b01c      	add	sp, #112	; 0x70
 8009664:	f85d eb04 	ldr.w	lr, [sp], #4
 8009668:	b003      	add	sp, #12
 800966a:	4770      	bx	lr
 800966c:	200000a8 	.word	0x200000a8
 8009670:	ffff0208 	.word	0xffff0208

08009674 <quorem>:
 8009674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	6903      	ldr	r3, [r0, #16]
 800967a:	690c      	ldr	r4, [r1, #16]
 800967c:	42a3      	cmp	r3, r4
 800967e:	4607      	mov	r7, r0
 8009680:	f2c0 8081 	blt.w	8009786 <quorem+0x112>
 8009684:	3c01      	subs	r4, #1
 8009686:	f101 0814 	add.w	r8, r1, #20
 800968a:	f100 0514 	add.w	r5, r0, #20
 800968e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800969c:	3301      	adds	r3, #1
 800969e:	429a      	cmp	r2, r3
 80096a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096ac:	d331      	bcc.n	8009712 <quorem+0x9e>
 80096ae:	f04f 0e00 	mov.w	lr, #0
 80096b2:	4640      	mov	r0, r8
 80096b4:	46ac      	mov	ip, r5
 80096b6:	46f2      	mov	sl, lr
 80096b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80096bc:	b293      	uxth	r3, r2
 80096be:	fb06 e303 	mla	r3, r6, r3, lr
 80096c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	ebaa 0303 	sub.w	r3, sl, r3
 80096cc:	0c12      	lsrs	r2, r2, #16
 80096ce:	f8dc a000 	ldr.w	sl, [ip]
 80096d2:	fb06 e202 	mla	r2, r6, r2, lr
 80096d6:	fa13 f38a 	uxtah	r3, r3, sl
 80096da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096de:	fa1f fa82 	uxth.w	sl, r2
 80096e2:	f8dc 2000 	ldr.w	r2, [ip]
 80096e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80096ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096f4:	4581      	cmp	r9, r0
 80096f6:	f84c 3b04 	str.w	r3, [ip], #4
 80096fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096fe:	d2db      	bcs.n	80096b8 <quorem+0x44>
 8009700:	f855 300b 	ldr.w	r3, [r5, fp]
 8009704:	b92b      	cbnz	r3, 8009712 <quorem+0x9e>
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	3b04      	subs	r3, #4
 800970a:	429d      	cmp	r5, r3
 800970c:	461a      	mov	r2, r3
 800970e:	d32e      	bcc.n	800976e <quorem+0xfa>
 8009710:	613c      	str	r4, [r7, #16]
 8009712:	4638      	mov	r0, r7
 8009714:	f001 f856 	bl	800a7c4 <__mcmp>
 8009718:	2800      	cmp	r0, #0
 800971a:	db24      	blt.n	8009766 <quorem+0xf2>
 800971c:	3601      	adds	r6, #1
 800971e:	4628      	mov	r0, r5
 8009720:	f04f 0c00 	mov.w	ip, #0
 8009724:	f858 2b04 	ldr.w	r2, [r8], #4
 8009728:	f8d0 e000 	ldr.w	lr, [r0]
 800972c:	b293      	uxth	r3, r2
 800972e:	ebac 0303 	sub.w	r3, ip, r3
 8009732:	0c12      	lsrs	r2, r2, #16
 8009734:	fa13 f38e 	uxtah	r3, r3, lr
 8009738:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800973c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009740:	b29b      	uxth	r3, r3
 8009742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009746:	45c1      	cmp	r9, r8
 8009748:	f840 3b04 	str.w	r3, [r0], #4
 800974c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009750:	d2e8      	bcs.n	8009724 <quorem+0xb0>
 8009752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800975a:	b922      	cbnz	r2, 8009766 <quorem+0xf2>
 800975c:	3b04      	subs	r3, #4
 800975e:	429d      	cmp	r5, r3
 8009760:	461a      	mov	r2, r3
 8009762:	d30a      	bcc.n	800977a <quorem+0x106>
 8009764:	613c      	str	r4, [r7, #16]
 8009766:	4630      	mov	r0, r6
 8009768:	b003      	add	sp, #12
 800976a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976e:	6812      	ldr	r2, [r2, #0]
 8009770:	3b04      	subs	r3, #4
 8009772:	2a00      	cmp	r2, #0
 8009774:	d1cc      	bne.n	8009710 <quorem+0x9c>
 8009776:	3c01      	subs	r4, #1
 8009778:	e7c7      	b.n	800970a <quorem+0x96>
 800977a:	6812      	ldr	r2, [r2, #0]
 800977c:	3b04      	subs	r3, #4
 800977e:	2a00      	cmp	r2, #0
 8009780:	d1f0      	bne.n	8009764 <quorem+0xf0>
 8009782:	3c01      	subs	r4, #1
 8009784:	e7eb      	b.n	800975e <quorem+0xea>
 8009786:	2000      	movs	r0, #0
 8009788:	e7ee      	b.n	8009768 <quorem+0xf4>
 800978a:	0000      	movs	r0, r0
 800978c:	0000      	movs	r0, r0
	...

08009790 <_dtoa_r>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	ec59 8b10 	vmov	r8, r9, d0
 8009798:	b095      	sub	sp, #84	; 0x54
 800979a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800979c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800979e:	9107      	str	r1, [sp, #28]
 80097a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80097a4:	4606      	mov	r6, r0
 80097a6:	9209      	str	r2, [sp, #36]	; 0x24
 80097a8:	9310      	str	r3, [sp, #64]	; 0x40
 80097aa:	b975      	cbnz	r5, 80097ca <_dtoa_r+0x3a>
 80097ac:	2010      	movs	r0, #16
 80097ae:	f000 fd75 	bl	800a29c <malloc>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6270      	str	r0, [r6, #36]	; 0x24
 80097b6:	b920      	cbnz	r0, 80097c2 <_dtoa_r+0x32>
 80097b8:	4bab      	ldr	r3, [pc, #684]	; (8009a68 <_dtoa_r+0x2d8>)
 80097ba:	21ea      	movs	r1, #234	; 0xea
 80097bc:	48ab      	ldr	r0, [pc, #684]	; (8009a6c <_dtoa_r+0x2dc>)
 80097be:	f001 fb27 	bl	800ae10 <__assert_func>
 80097c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097c6:	6005      	str	r5, [r0, #0]
 80097c8:	60c5      	str	r5, [r0, #12]
 80097ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097cc:	6819      	ldr	r1, [r3, #0]
 80097ce:	b151      	cbz	r1, 80097e6 <_dtoa_r+0x56>
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	604a      	str	r2, [r1, #4]
 80097d4:	2301      	movs	r3, #1
 80097d6:	4093      	lsls	r3, r2
 80097d8:	608b      	str	r3, [r1, #8]
 80097da:	4630      	mov	r0, r6
 80097dc:	f000 fdb4 	bl	800a348 <_Bfree>
 80097e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	f1b9 0300 	subs.w	r3, r9, #0
 80097ea:	bfbb      	ittet	lt
 80097ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097f0:	9303      	strlt	r3, [sp, #12]
 80097f2:	2300      	movge	r3, #0
 80097f4:	2201      	movlt	r2, #1
 80097f6:	bfac      	ite	ge
 80097f8:	6023      	strge	r3, [r4, #0]
 80097fa:	6022      	strlt	r2, [r4, #0]
 80097fc:	4b9c      	ldr	r3, [pc, #624]	; (8009a70 <_dtoa_r+0x2e0>)
 80097fe:	9c03      	ldr	r4, [sp, #12]
 8009800:	43a3      	bics	r3, r4
 8009802:	d11a      	bne.n	800983a <_dtoa_r+0xaa>
 8009804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009806:	f242 730f 	movw	r3, #9999	; 0x270f
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009810:	ea53 0308 	orrs.w	r3, r3, r8
 8009814:	f000 8512 	beq.w	800a23c <_dtoa_r+0xaac>
 8009818:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800981a:	b953      	cbnz	r3, 8009832 <_dtoa_r+0xa2>
 800981c:	4b95      	ldr	r3, [pc, #596]	; (8009a74 <_dtoa_r+0x2e4>)
 800981e:	e01f      	b.n	8009860 <_dtoa_r+0xd0>
 8009820:	4b95      	ldr	r3, [pc, #596]	; (8009a78 <_dtoa_r+0x2e8>)
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	9800      	ldr	r0, [sp, #0]
 800982c:	b015      	add	sp, #84	; 0x54
 800982e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009832:	4b90      	ldr	r3, [pc, #576]	; (8009a74 <_dtoa_r+0x2e4>)
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	3303      	adds	r3, #3
 8009838:	e7f5      	b.n	8009826 <_dtoa_r+0x96>
 800983a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800983e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800984a:	d10b      	bne.n	8009864 <_dtoa_r+0xd4>
 800984c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800984e:	2301      	movs	r3, #1
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 84ee 	beq.w	800a236 <_dtoa_r+0xaa6>
 800985a:	4888      	ldr	r0, [pc, #544]	; (8009a7c <_dtoa_r+0x2ec>)
 800985c:	6018      	str	r0, [r3, #0]
 800985e:	1e43      	subs	r3, r0, #1
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	e7e2      	b.n	800982a <_dtoa_r+0x9a>
 8009864:	a913      	add	r1, sp, #76	; 0x4c
 8009866:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800986a:	aa12      	add	r2, sp, #72	; 0x48
 800986c:	4630      	mov	r0, r6
 800986e:	f001 f84d 	bl	800a90c <__d2b>
 8009872:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009876:	4605      	mov	r5, r0
 8009878:	9812      	ldr	r0, [sp, #72]	; 0x48
 800987a:	2900      	cmp	r1, #0
 800987c:	d047      	beq.n	800990e <_dtoa_r+0x17e>
 800987e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009880:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009888:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800988c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009890:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009894:	2400      	movs	r4, #0
 8009896:	ec43 2b16 	vmov	d6, r2, r3
 800989a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800989e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009a50 <_dtoa_r+0x2c0>
 80098a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80098a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009a58 <_dtoa_r+0x2c8>
 80098aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80098ae:	eeb0 7b46 	vmov.f64	d7, d6
 80098b2:	ee06 1a90 	vmov	s13, r1
 80098b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80098ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009a60 <_dtoa_r+0x2d0>
 80098be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80098c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80098c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80098ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ce:	ee16 ba90 	vmov	fp, s13
 80098d2:	9411      	str	r4, [sp, #68]	; 0x44
 80098d4:	d508      	bpl.n	80098e8 <_dtoa_r+0x158>
 80098d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80098da:	eeb4 6b47 	vcmp.f64	d6, d7
 80098de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e2:	bf18      	it	ne
 80098e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80098e8:	f1bb 0f16 	cmp.w	fp, #22
 80098ec:	d832      	bhi.n	8009954 <_dtoa_r+0x1c4>
 80098ee:	4b64      	ldr	r3, [pc, #400]	; (8009a80 <_dtoa_r+0x2f0>)
 80098f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098f4:	ed93 7b00 	vldr	d7, [r3]
 80098f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80098fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	d501      	bpl.n	800990a <_dtoa_r+0x17a>
 8009906:	f10b 3bff 	add.w	fp, fp, #4294967295
 800990a:	2300      	movs	r3, #0
 800990c:	e023      	b.n	8009956 <_dtoa_r+0x1c6>
 800990e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009910:	4401      	add	r1, r0
 8009912:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009916:	2b20      	cmp	r3, #32
 8009918:	bfc3      	ittte	gt
 800991a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800991e:	fa04 f303 	lslgt.w	r3, r4, r3
 8009922:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009926:	f1c3 0320 	rsble	r3, r3, #32
 800992a:	bfc6      	itte	gt
 800992c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009930:	ea43 0308 	orrgt.w	r3, r3, r8
 8009934:	fa08 f303 	lslle.w	r3, r8, r3
 8009938:	ee07 3a90 	vmov	s15, r3
 800993c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009940:	3901      	subs	r1, #1
 8009942:	ed8d 7b00 	vstr	d7, [sp]
 8009946:	9c01      	ldr	r4, [sp, #4]
 8009948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800994c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009950:	2401      	movs	r4, #1
 8009952:	e7a0      	b.n	8009896 <_dtoa_r+0x106>
 8009954:	2301      	movs	r3, #1
 8009956:	930f      	str	r3, [sp, #60]	; 0x3c
 8009958:	1a43      	subs	r3, r0, r1
 800995a:	1e5a      	subs	r2, r3, #1
 800995c:	bf45      	ittet	mi
 800995e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009962:	9305      	strmi	r3, [sp, #20]
 8009964:	2300      	movpl	r3, #0
 8009966:	2300      	movmi	r3, #0
 8009968:	9206      	str	r2, [sp, #24]
 800996a:	bf54      	ite	pl
 800996c:	9305      	strpl	r3, [sp, #20]
 800996e:	9306      	strmi	r3, [sp, #24]
 8009970:	f1bb 0f00 	cmp.w	fp, #0
 8009974:	db18      	blt.n	80099a8 <_dtoa_r+0x218>
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800997c:	445b      	add	r3, fp
 800997e:	9306      	str	r3, [sp, #24]
 8009980:	2300      	movs	r3, #0
 8009982:	9a07      	ldr	r2, [sp, #28]
 8009984:	2a09      	cmp	r2, #9
 8009986:	d849      	bhi.n	8009a1c <_dtoa_r+0x28c>
 8009988:	2a05      	cmp	r2, #5
 800998a:	bfc4      	itt	gt
 800998c:	3a04      	subgt	r2, #4
 800998e:	9207      	strgt	r2, [sp, #28]
 8009990:	9a07      	ldr	r2, [sp, #28]
 8009992:	f1a2 0202 	sub.w	r2, r2, #2
 8009996:	bfcc      	ite	gt
 8009998:	2400      	movgt	r4, #0
 800999a:	2401      	movle	r4, #1
 800999c:	2a03      	cmp	r2, #3
 800999e:	d848      	bhi.n	8009a32 <_dtoa_r+0x2a2>
 80099a0:	e8df f002 	tbb	[pc, r2]
 80099a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80099a8:	9b05      	ldr	r3, [sp, #20]
 80099aa:	2200      	movs	r2, #0
 80099ac:	eba3 030b 	sub.w	r3, r3, fp
 80099b0:	9305      	str	r3, [sp, #20]
 80099b2:	920e      	str	r2, [sp, #56]	; 0x38
 80099b4:	f1cb 0300 	rsb	r3, fp, #0
 80099b8:	e7e3      	b.n	8009982 <_dtoa_r+0x1f2>
 80099ba:	2200      	movs	r2, #0
 80099bc:	9208      	str	r2, [sp, #32]
 80099be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c0:	2a00      	cmp	r2, #0
 80099c2:	dc39      	bgt.n	8009a38 <_dtoa_r+0x2a8>
 80099c4:	f04f 0a01 	mov.w	sl, #1
 80099c8:	46d1      	mov	r9, sl
 80099ca:	4652      	mov	r2, sl
 80099cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80099d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80099d2:	2100      	movs	r1, #0
 80099d4:	6079      	str	r1, [r7, #4]
 80099d6:	2004      	movs	r0, #4
 80099d8:	f100 0c14 	add.w	ip, r0, #20
 80099dc:	4594      	cmp	ip, r2
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	d92f      	bls.n	8009a42 <_dtoa_r+0x2b2>
 80099e2:	4630      	mov	r0, r6
 80099e4:	930c      	str	r3, [sp, #48]	; 0x30
 80099e6:	f000 fc6f 	bl	800a2c8 <_Balloc>
 80099ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099ec:	9000      	str	r0, [sp, #0]
 80099ee:	4602      	mov	r2, r0
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d149      	bne.n	8009a88 <_dtoa_r+0x2f8>
 80099f4:	4b23      	ldr	r3, [pc, #140]	; (8009a84 <_dtoa_r+0x2f4>)
 80099f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099fa:	e6df      	b.n	80097bc <_dtoa_r+0x2c>
 80099fc:	2201      	movs	r2, #1
 80099fe:	e7dd      	b.n	80099bc <_dtoa_r+0x22c>
 8009a00:	2200      	movs	r2, #0
 8009a02:	9208      	str	r2, [sp, #32]
 8009a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a06:	eb0b 0a02 	add.w	sl, fp, r2
 8009a0a:	f10a 0901 	add.w	r9, sl, #1
 8009a0e:	464a      	mov	r2, r9
 8009a10:	2a01      	cmp	r2, #1
 8009a12:	bfb8      	it	lt
 8009a14:	2201      	movlt	r2, #1
 8009a16:	e7db      	b.n	80099d0 <_dtoa_r+0x240>
 8009a18:	2201      	movs	r2, #1
 8009a1a:	e7f2      	b.n	8009a02 <_dtoa_r+0x272>
 8009a1c:	2401      	movs	r4, #1
 8009a1e:	2200      	movs	r2, #0
 8009a20:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009a24:	f04f 3aff 	mov.w	sl, #4294967295
 8009a28:	2100      	movs	r1, #0
 8009a2a:	46d1      	mov	r9, sl
 8009a2c:	2212      	movs	r2, #18
 8009a2e:	9109      	str	r1, [sp, #36]	; 0x24
 8009a30:	e7ce      	b.n	80099d0 <_dtoa_r+0x240>
 8009a32:	2201      	movs	r2, #1
 8009a34:	9208      	str	r2, [sp, #32]
 8009a36:	e7f5      	b.n	8009a24 <_dtoa_r+0x294>
 8009a38:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009a3c:	46d1      	mov	r9, sl
 8009a3e:	4652      	mov	r2, sl
 8009a40:	e7c6      	b.n	80099d0 <_dtoa_r+0x240>
 8009a42:	3101      	adds	r1, #1
 8009a44:	6079      	str	r1, [r7, #4]
 8009a46:	0040      	lsls	r0, r0, #1
 8009a48:	e7c6      	b.n	80099d8 <_dtoa_r+0x248>
 8009a4a:	bf00      	nop
 8009a4c:	f3af 8000 	nop.w
 8009a50:	636f4361 	.word	0x636f4361
 8009a54:	3fd287a7 	.word	0x3fd287a7
 8009a58:	8b60c8b3 	.word	0x8b60c8b3
 8009a5c:	3fc68a28 	.word	0x3fc68a28
 8009a60:	509f79fb 	.word	0x509f79fb
 8009a64:	3fd34413 	.word	0x3fd34413
 8009a68:	0800bd1d 	.word	0x0800bd1d
 8009a6c:	0800bd34 	.word	0x0800bd34
 8009a70:	7ff00000 	.word	0x7ff00000
 8009a74:	0800bd19 	.word	0x0800bd19
 8009a78:	0800bd10 	.word	0x0800bd10
 8009a7c:	0800bced 	.word	0x0800bced
 8009a80:	0800be30 	.word	0x0800be30
 8009a84:	0800bd93 	.word	0x0800bd93
 8009a88:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009a8a:	9900      	ldr	r1, [sp, #0]
 8009a8c:	6011      	str	r1, [r2, #0]
 8009a8e:	f1b9 0f0e 	cmp.w	r9, #14
 8009a92:	d872      	bhi.n	8009b7a <_dtoa_r+0x3ea>
 8009a94:	2c00      	cmp	r4, #0
 8009a96:	d070      	beq.n	8009b7a <_dtoa_r+0x3ea>
 8009a98:	f1bb 0f00 	cmp.w	fp, #0
 8009a9c:	f340 80a6 	ble.w	8009bec <_dtoa_r+0x45c>
 8009aa0:	49ca      	ldr	r1, [pc, #808]	; (8009dcc <_dtoa_r+0x63c>)
 8009aa2:	f00b 020f 	and.w	r2, fp, #15
 8009aa6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009aaa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009aae:	ed92 7b00 	vldr	d7, [r2]
 8009ab2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009ab6:	f000 808d 	beq.w	8009bd4 <_dtoa_r+0x444>
 8009aba:	4ac5      	ldr	r2, [pc, #788]	; (8009dd0 <_dtoa_r+0x640>)
 8009abc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009ac0:	ed92 6b08 	vldr	d6, [r2, #32]
 8009ac4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009ac8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009acc:	f001 010f 	and.w	r1, r1, #15
 8009ad0:	2203      	movs	r2, #3
 8009ad2:	48bf      	ldr	r0, [pc, #764]	; (8009dd0 <_dtoa_r+0x640>)
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	d17f      	bne.n	8009bd8 <_dtoa_r+0x448>
 8009ad8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009adc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ae4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ae6:	2900      	cmp	r1, #0
 8009ae8:	f000 80b2 	beq.w	8009c50 <_dtoa_r+0x4c0>
 8009aec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009af0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009af4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afc:	f140 80a8 	bpl.w	8009c50 <_dtoa_r+0x4c0>
 8009b00:	f1b9 0f00 	cmp.w	r9, #0
 8009b04:	f000 80a4 	beq.w	8009c50 <_dtoa_r+0x4c0>
 8009b08:	f1ba 0f00 	cmp.w	sl, #0
 8009b0c:	dd31      	ble.n	8009b72 <_dtoa_r+0x3e2>
 8009b0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b1a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009b1e:	3201      	adds	r2, #1
 8009b20:	4650      	mov	r0, sl
 8009b22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b26:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009b2a:	ee07 2a90 	vmov	s15, r2
 8009b2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b32:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009b36:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009b3a:	9c03      	ldr	r4, [sp, #12]
 8009b3c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009b40:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f040 8086 	bne.w	8009c56 <_dtoa_r+0x4c6>
 8009b4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b52:	ec42 1b17 	vmov	d7, r1, r2
 8009b56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5e:	f300 8272 	bgt.w	800a046 <_dtoa_r+0x8b6>
 8009b62:	eeb1 7b47 	vneg.f64	d7, d7
 8009b66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6e:	f100 8267 	bmi.w	800a040 <_dtoa_r+0x8b0>
 8009b72:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8009b76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009b7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	f2c0 8129 	blt.w	8009dd4 <_dtoa_r+0x644>
 8009b82:	f1bb 0f0e 	cmp.w	fp, #14
 8009b86:	f300 8125 	bgt.w	8009dd4 <_dtoa_r+0x644>
 8009b8a:	4b90      	ldr	r3, [pc, #576]	; (8009dcc <_dtoa_r+0x63c>)
 8009b8c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b90:	ed93 6b00 	vldr	d6, [r3]
 8009b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f280 80c3 	bge.w	8009d22 <_dtoa_r+0x592>
 8009b9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ba0:	f300 80bf 	bgt.w	8009d22 <_dtoa_r+0x592>
 8009ba4:	f040 824c 	bne.w	800a040 <_dtoa_r+0x8b0>
 8009ba8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009bac:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009bb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbc:	464c      	mov	r4, r9
 8009bbe:	464f      	mov	r7, r9
 8009bc0:	f280 8222 	bge.w	800a008 <_dtoa_r+0x878>
 8009bc4:	f8dd 8000 	ldr.w	r8, [sp]
 8009bc8:	2331      	movs	r3, #49	; 0x31
 8009bca:	f808 3b01 	strb.w	r3, [r8], #1
 8009bce:	f10b 0b01 	add.w	fp, fp, #1
 8009bd2:	e21e      	b.n	800a012 <_dtoa_r+0x882>
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	e77c      	b.n	8009ad2 <_dtoa_r+0x342>
 8009bd8:	07cc      	lsls	r4, r1, #31
 8009bda:	d504      	bpl.n	8009be6 <_dtoa_r+0x456>
 8009bdc:	ed90 6b00 	vldr	d6, [r0]
 8009be0:	3201      	adds	r2, #1
 8009be2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009be6:	1049      	asrs	r1, r1, #1
 8009be8:	3008      	adds	r0, #8
 8009bea:	e773      	b.n	8009ad4 <_dtoa_r+0x344>
 8009bec:	d02e      	beq.n	8009c4c <_dtoa_r+0x4bc>
 8009bee:	f1cb 0100 	rsb	r1, fp, #0
 8009bf2:	4a76      	ldr	r2, [pc, #472]	; (8009dcc <_dtoa_r+0x63c>)
 8009bf4:	f001 000f 	and.w	r0, r1, #15
 8009bf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009bfc:	ed92 7b00 	vldr	d7, [r2]
 8009c00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009c04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c08:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009c0c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009c10:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009c14:	486e      	ldr	r0, [pc, #440]	; (8009dd0 <_dtoa_r+0x640>)
 8009c16:	1109      	asrs	r1, r1, #4
 8009c18:	2400      	movs	r4, #0
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	b939      	cbnz	r1, 8009c2e <_dtoa_r+0x49e>
 8009c1e:	2c00      	cmp	r4, #0
 8009c20:	f43f af60 	beq.w	8009ae4 <_dtoa_r+0x354>
 8009c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c2c:	e75a      	b.n	8009ae4 <_dtoa_r+0x354>
 8009c2e:	07cf      	lsls	r7, r1, #31
 8009c30:	d509      	bpl.n	8009c46 <_dtoa_r+0x4b6>
 8009c32:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009c36:	ed90 7b00 	vldr	d7, [r0]
 8009c3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c3e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009c42:	3201      	adds	r2, #1
 8009c44:	2401      	movs	r4, #1
 8009c46:	1049      	asrs	r1, r1, #1
 8009c48:	3008      	adds	r0, #8
 8009c4a:	e7e7      	b.n	8009c1c <_dtoa_r+0x48c>
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	e749      	b.n	8009ae4 <_dtoa_r+0x354>
 8009c50:	465f      	mov	r7, fp
 8009c52:	4648      	mov	r0, r9
 8009c54:	e765      	b.n	8009b22 <_dtoa_r+0x392>
 8009c56:	ec42 1b17 	vmov	d7, r1, r2
 8009c5a:	4a5c      	ldr	r2, [pc, #368]	; (8009dcc <_dtoa_r+0x63c>)
 8009c5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009c60:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009c64:	9a00      	ldr	r2, [sp, #0]
 8009c66:	1814      	adds	r4, r2, r0
 8009c68:	9a08      	ldr	r2, [sp, #32]
 8009c6a:	b352      	cbz	r2, 8009cc2 <_dtoa_r+0x532>
 8009c6c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009c70:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009c74:	f8dd 8000 	ldr.w	r8, [sp]
 8009c78:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c80:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c88:	ee14 2a90 	vmov	r2, s9
 8009c8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c90:	3230      	adds	r2, #48	; 0x30
 8009c92:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9e:	f808 2b01 	strb.w	r2, [r8], #1
 8009ca2:	d439      	bmi.n	8009d18 <_dtoa_r+0x588>
 8009ca4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009ca8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb0:	d472      	bmi.n	8009d98 <_dtoa_r+0x608>
 8009cb2:	45a0      	cmp	r8, r4
 8009cb4:	f43f af5d 	beq.w	8009b72 <_dtoa_r+0x3e2>
 8009cb8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009cbc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009cc0:	e7e0      	b.n	8009c84 <_dtoa_r+0x4f4>
 8009cc2:	f8dd 8000 	ldr.w	r8, [sp]
 8009cc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cca:	4621      	mov	r1, r4
 8009ccc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009cd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009cd4:	ee14 2a90 	vmov	r2, s9
 8009cd8:	3230      	adds	r2, #48	; 0x30
 8009cda:	f808 2b01 	strb.w	r2, [r8], #1
 8009cde:	45a0      	cmp	r8, r4
 8009ce0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ce4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ce8:	d118      	bne.n	8009d1c <_dtoa_r+0x58c>
 8009cea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009cee:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009cf2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfa:	dc4d      	bgt.n	8009d98 <_dtoa_r+0x608>
 8009cfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d08:	f57f af33 	bpl.w	8009b72 <_dtoa_r+0x3e2>
 8009d0c:	4688      	mov	r8, r1
 8009d0e:	3901      	subs	r1, #1
 8009d10:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009d14:	2b30      	cmp	r3, #48	; 0x30
 8009d16:	d0f9      	beq.n	8009d0c <_dtoa_r+0x57c>
 8009d18:	46bb      	mov	fp, r7
 8009d1a:	e02a      	b.n	8009d72 <_dtoa_r+0x5e2>
 8009d1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d20:	e7d6      	b.n	8009cd0 <_dtoa_r+0x540>
 8009d22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d26:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009d2a:	f8dd 8000 	ldr.w	r8, [sp]
 8009d2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009d32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009d36:	ee15 3a10 	vmov	r3, s10
 8009d3a:	3330      	adds	r3, #48	; 0x30
 8009d3c:	f808 3b01 	strb.w	r3, [r8], #1
 8009d40:	9b00      	ldr	r3, [sp, #0]
 8009d42:	eba8 0303 	sub.w	r3, r8, r3
 8009d46:	4599      	cmp	r9, r3
 8009d48:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009d4c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009d50:	d133      	bne.n	8009dba <_dtoa_r+0x62a>
 8009d52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009d56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5e:	dc1a      	bgt.n	8009d96 <_dtoa_r+0x606>
 8009d60:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d68:	d103      	bne.n	8009d72 <_dtoa_r+0x5e2>
 8009d6a:	ee15 3a10 	vmov	r3, s10
 8009d6e:	07d9      	lsls	r1, r3, #31
 8009d70:	d411      	bmi.n	8009d96 <_dtoa_r+0x606>
 8009d72:	4629      	mov	r1, r5
 8009d74:	4630      	mov	r0, r6
 8009d76:	f000 fae7 	bl	800a348 <_Bfree>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d7e:	f888 3000 	strb.w	r3, [r8]
 8009d82:	f10b 0301 	add.w	r3, fp, #1
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f43f ad4d 	beq.w	800982a <_dtoa_r+0x9a>
 8009d90:	f8c3 8000 	str.w	r8, [r3]
 8009d94:	e549      	b.n	800982a <_dtoa_r+0x9a>
 8009d96:	465f      	mov	r7, fp
 8009d98:	4643      	mov	r3, r8
 8009d9a:	4698      	mov	r8, r3
 8009d9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009da0:	2a39      	cmp	r2, #57	; 0x39
 8009da2:	d106      	bne.n	8009db2 <_dtoa_r+0x622>
 8009da4:	9a00      	ldr	r2, [sp, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d1f7      	bne.n	8009d9a <_dtoa_r+0x60a>
 8009daa:	9900      	ldr	r1, [sp, #0]
 8009dac:	2230      	movs	r2, #48	; 0x30
 8009dae:	3701      	adds	r7, #1
 8009db0:	700a      	strb	r2, [r1, #0]
 8009db2:	781a      	ldrb	r2, [r3, #0]
 8009db4:	3201      	adds	r2, #1
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	e7ae      	b.n	8009d18 <_dtoa_r+0x588>
 8009dba:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009dbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc6:	d1b2      	bne.n	8009d2e <_dtoa_r+0x59e>
 8009dc8:	e7d3      	b.n	8009d72 <_dtoa_r+0x5e2>
 8009dca:	bf00      	nop
 8009dcc:	0800be30 	.word	0x0800be30
 8009dd0:	0800be08 	.word	0x0800be08
 8009dd4:	9908      	ldr	r1, [sp, #32]
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	f000 80d1 	beq.w	8009f7e <_dtoa_r+0x7ee>
 8009ddc:	9907      	ldr	r1, [sp, #28]
 8009dde:	2901      	cmp	r1, #1
 8009de0:	f300 80b4 	bgt.w	8009f4c <_dtoa_r+0x7bc>
 8009de4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009de6:	2900      	cmp	r1, #0
 8009de8:	f000 80ac 	beq.w	8009f44 <_dtoa_r+0x7b4>
 8009dec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009df0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009df4:	461c      	mov	r4, r3
 8009df6:	930a      	str	r3, [sp, #40]	; 0x28
 8009df8:	9b05      	ldr	r3, [sp, #20]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	9b06      	ldr	r3, [sp, #24]
 8009e00:	2101      	movs	r1, #1
 8009e02:	4413      	add	r3, r2
 8009e04:	4630      	mov	r0, r6
 8009e06:	9306      	str	r3, [sp, #24]
 8009e08:	f000 fb5a 	bl	800a4c0 <__i2b>
 8009e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0e:	4607      	mov	r7, r0
 8009e10:	f1b8 0f00 	cmp.w	r8, #0
 8009e14:	dd0d      	ble.n	8009e32 <_dtoa_r+0x6a2>
 8009e16:	9a06      	ldr	r2, [sp, #24]
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	dd0a      	ble.n	8009e32 <_dtoa_r+0x6a2>
 8009e1c:	4542      	cmp	r2, r8
 8009e1e:	9905      	ldr	r1, [sp, #20]
 8009e20:	bfa8      	it	ge
 8009e22:	4642      	movge	r2, r8
 8009e24:	1a89      	subs	r1, r1, r2
 8009e26:	9105      	str	r1, [sp, #20]
 8009e28:	9906      	ldr	r1, [sp, #24]
 8009e2a:	eba8 0802 	sub.w	r8, r8, r2
 8009e2e:	1a8a      	subs	r2, r1, r2
 8009e30:	9206      	str	r2, [sp, #24]
 8009e32:	b303      	cbz	r3, 8009e76 <_dtoa_r+0x6e6>
 8009e34:	9a08      	ldr	r2, [sp, #32]
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	f000 80a6 	beq.w	8009f88 <_dtoa_r+0x7f8>
 8009e3c:	2c00      	cmp	r4, #0
 8009e3e:	dd13      	ble.n	8009e68 <_dtoa_r+0x6d8>
 8009e40:	4639      	mov	r1, r7
 8009e42:	4622      	mov	r2, r4
 8009e44:	4630      	mov	r0, r6
 8009e46:	930c      	str	r3, [sp, #48]	; 0x30
 8009e48:	f000 fbf6 	bl	800a638 <__pow5mult>
 8009e4c:	462a      	mov	r2, r5
 8009e4e:	4601      	mov	r1, r0
 8009e50:	4607      	mov	r7, r0
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 fb4a 	bl	800a4ec <__multiply>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	900a      	str	r0, [sp, #40]	; 0x28
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f000 fa73 	bl	800a348 <_Bfree>
 8009e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e66:	4615      	mov	r5, r2
 8009e68:	1b1a      	subs	r2, r3, r4
 8009e6a:	d004      	beq.n	8009e76 <_dtoa_r+0x6e6>
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 fbe2 	bl	800a638 <__pow5mult>
 8009e74:	4605      	mov	r5, r0
 8009e76:	2101      	movs	r1, #1
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 fb21 	bl	800a4c0 <__i2b>
 8009e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	f340 8082 	ble.w	8009f8c <_dtoa_r+0x7fc>
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f000 fbd3 	bl	800a638 <__pow5mult>
 8009e92:	9b07      	ldr	r3, [sp, #28]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	4604      	mov	r4, r0
 8009e98:	dd7b      	ble.n	8009f92 <_dtoa_r+0x802>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e9e:	6922      	ldr	r2, [r4, #16]
 8009ea0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ea4:	6910      	ldr	r0, [r2, #16]
 8009ea6:	f000 fabb 	bl	800a420 <__hi0bits>
 8009eaa:	f1c0 0020 	rsb	r0, r0, #32
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	4418      	add	r0, r3
 8009eb2:	f010 001f 	ands.w	r0, r0, #31
 8009eb6:	f000 808d 	beq.w	8009fd4 <_dtoa_r+0x844>
 8009eba:	f1c0 0220 	rsb	r2, r0, #32
 8009ebe:	2a04      	cmp	r2, #4
 8009ec0:	f340 8086 	ble.w	8009fd0 <_dtoa_r+0x840>
 8009ec4:	f1c0 001c 	rsb	r0, r0, #28
 8009ec8:	9b05      	ldr	r3, [sp, #20]
 8009eca:	4403      	add	r3, r0
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	9b06      	ldr	r3, [sp, #24]
 8009ed0:	4403      	add	r3, r0
 8009ed2:	4480      	add	r8, r0
 8009ed4:	9306      	str	r3, [sp, #24]
 8009ed6:	9b05      	ldr	r3, [sp, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dd05      	ble.n	8009ee8 <_dtoa_r+0x758>
 8009edc:	4629      	mov	r1, r5
 8009ede:	461a      	mov	r2, r3
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 fc03 	bl	800a6ec <__lshift>
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	9b06      	ldr	r3, [sp, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	dd05      	ble.n	8009efa <_dtoa_r+0x76a>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f000 fbfa 	bl	800a6ec <__lshift>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d06b      	beq.n	8009fd8 <_dtoa_r+0x848>
 8009f00:	4621      	mov	r1, r4
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 fc5e 	bl	800a7c4 <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	da65      	bge.n	8009fd8 <_dtoa_r+0x848>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4629      	mov	r1, r5
 8009f10:	220a      	movs	r2, #10
 8009f12:	4630      	mov	r0, r6
 8009f14:	f000 fa3a 	bl	800a38c <__multadd>
 8009f18:	9b08      	ldr	r3, [sp, #32]
 8009f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f1e:	4605      	mov	r5, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 8192 	beq.w	800a24a <_dtoa_r+0xaba>
 8009f26:	4639      	mov	r1, r7
 8009f28:	2300      	movs	r3, #0
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f000 fa2d 	bl	800a38c <__multadd>
 8009f32:	f1ba 0f00 	cmp.w	sl, #0
 8009f36:	4607      	mov	r7, r0
 8009f38:	f300 808e 	bgt.w	800a058 <_dtoa_r+0x8c8>
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	dc51      	bgt.n	8009fe6 <_dtoa_r+0x856>
 8009f42:	e089      	b.n	800a058 <_dtoa_r+0x8c8>
 8009f44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f4a:	e751      	b.n	8009df0 <_dtoa_r+0x660>
 8009f4c:	f109 34ff 	add.w	r4, r9, #4294967295
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	bfbf      	itttt	lt
 8009f54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009f56:	1ae3      	sublt	r3, r4, r3
 8009f58:	18d2      	addlt	r2, r2, r3
 8009f5a:	4613      	movlt	r3, r2
 8009f5c:	bfb7      	itett	lt
 8009f5e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f60:	1b1c      	subge	r4, r3, r4
 8009f62:	4623      	movlt	r3, r4
 8009f64:	2400      	movlt	r4, #0
 8009f66:	f1b9 0f00 	cmp.w	r9, #0
 8009f6a:	bfb5      	itete	lt
 8009f6c:	9a05      	ldrlt	r2, [sp, #20]
 8009f6e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009f72:	eba2 0809 	sublt.w	r8, r2, r9
 8009f76:	464a      	movge	r2, r9
 8009f78:	bfb8      	it	lt
 8009f7a:	2200      	movlt	r2, #0
 8009f7c:	e73b      	b.n	8009df6 <_dtoa_r+0x666>
 8009f7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009f82:	9f08      	ldr	r7, [sp, #32]
 8009f84:	461c      	mov	r4, r3
 8009f86:	e743      	b.n	8009e10 <_dtoa_r+0x680>
 8009f88:	461a      	mov	r2, r3
 8009f8a:	e76f      	b.n	8009e6c <_dtoa_r+0x6dc>
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	dc18      	bgt.n	8009fc4 <_dtoa_r+0x834>
 8009f92:	9b02      	ldr	r3, [sp, #8]
 8009f94:	b9b3      	cbnz	r3, 8009fc4 <_dtoa_r+0x834>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009f9c:	b9a2      	cbnz	r2, 8009fc8 <_dtoa_r+0x838>
 8009f9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009fa2:	0d12      	lsrs	r2, r2, #20
 8009fa4:	0512      	lsls	r2, r2, #20
 8009fa6:	b18a      	cbz	r2, 8009fcc <_dtoa_r+0x83c>
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	3301      	adds	r3, #1
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	9306      	str	r3, [sp, #24]
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f47f af6f 	bne.w	8009e9e <_dtoa_r+0x70e>
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	e774      	b.n	8009eae <_dtoa_r+0x71e>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e7f6      	b.n	8009fb6 <_dtoa_r+0x826>
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	e7f4      	b.n	8009fb6 <_dtoa_r+0x826>
 8009fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8009fce:	e7f3      	b.n	8009fb8 <_dtoa_r+0x828>
 8009fd0:	d081      	beq.n	8009ed6 <_dtoa_r+0x746>
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	301c      	adds	r0, #28
 8009fd6:	e777      	b.n	8009ec8 <_dtoa_r+0x738>
 8009fd8:	f1b9 0f00 	cmp.w	r9, #0
 8009fdc:	dc37      	bgt.n	800a04e <_dtoa_r+0x8be>
 8009fde:	9b07      	ldr	r3, [sp, #28]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	dd34      	ble.n	800a04e <_dtoa_r+0x8be>
 8009fe4:	46ca      	mov	sl, r9
 8009fe6:	f1ba 0f00 	cmp.w	sl, #0
 8009fea:	d10d      	bne.n	800a008 <_dtoa_r+0x878>
 8009fec:	4621      	mov	r1, r4
 8009fee:	4653      	mov	r3, sl
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 f9ca 	bl	800a38c <__multadd>
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 fbe1 	bl	800a7c4 <__mcmp>
 800a002:	2800      	cmp	r0, #0
 800a004:	f73f adde 	bgt.w	8009bc4 <_dtoa_r+0x434>
 800a008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00a:	f8dd 8000 	ldr.w	r8, [sp]
 800a00e:	ea6f 0b03 	mvn.w	fp, r3
 800a012:	f04f 0900 	mov.w	r9, #0
 800a016:	4621      	mov	r1, r4
 800a018:	4630      	mov	r0, r6
 800a01a:	f000 f995 	bl	800a348 <_Bfree>
 800a01e:	2f00      	cmp	r7, #0
 800a020:	f43f aea7 	beq.w	8009d72 <_dtoa_r+0x5e2>
 800a024:	f1b9 0f00 	cmp.w	r9, #0
 800a028:	d005      	beq.n	800a036 <_dtoa_r+0x8a6>
 800a02a:	45b9      	cmp	r9, r7
 800a02c:	d003      	beq.n	800a036 <_dtoa_r+0x8a6>
 800a02e:	4649      	mov	r1, r9
 800a030:	4630      	mov	r0, r6
 800a032:	f000 f989 	bl	800a348 <_Bfree>
 800a036:	4639      	mov	r1, r7
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 f985 	bl	800a348 <_Bfree>
 800a03e:	e698      	b.n	8009d72 <_dtoa_r+0x5e2>
 800a040:	2400      	movs	r4, #0
 800a042:	4627      	mov	r7, r4
 800a044:	e7e0      	b.n	800a008 <_dtoa_r+0x878>
 800a046:	46bb      	mov	fp, r7
 800a048:	4604      	mov	r4, r0
 800a04a:	4607      	mov	r7, r0
 800a04c:	e5ba      	b.n	8009bc4 <_dtoa_r+0x434>
 800a04e:	9b08      	ldr	r3, [sp, #32]
 800a050:	46ca      	mov	sl, r9
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 8100 	beq.w	800a258 <_dtoa_r+0xac8>
 800a058:	f1b8 0f00 	cmp.w	r8, #0
 800a05c:	dd05      	ble.n	800a06a <_dtoa_r+0x8da>
 800a05e:	4639      	mov	r1, r7
 800a060:	4642      	mov	r2, r8
 800a062:	4630      	mov	r0, r6
 800a064:	f000 fb42 	bl	800a6ec <__lshift>
 800a068:	4607      	mov	r7, r0
 800a06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d05d      	beq.n	800a12c <_dtoa_r+0x99c>
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	4630      	mov	r0, r6
 800a074:	f000 f928 	bl	800a2c8 <_Balloc>
 800a078:	4680      	mov	r8, r0
 800a07a:	b928      	cbnz	r0, 800a088 <_dtoa_r+0x8f8>
 800a07c:	4b82      	ldr	r3, [pc, #520]	; (800a288 <_dtoa_r+0xaf8>)
 800a07e:	4602      	mov	r2, r0
 800a080:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a084:	f7ff bb9a 	b.w	80097bc <_dtoa_r+0x2c>
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	3202      	adds	r2, #2
 800a08c:	0092      	lsls	r2, r2, #2
 800a08e:	f107 010c 	add.w	r1, r7, #12
 800a092:	300c      	adds	r0, #12
 800a094:	f000 f90a 	bl	800a2ac <memcpy>
 800a098:	2201      	movs	r2, #1
 800a09a:	4641      	mov	r1, r8
 800a09c:	4630      	mov	r0, r6
 800a09e:	f000 fb25 	bl	800a6ec <__lshift>
 800a0a2:	9b00      	ldr	r3, [sp, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	9305      	str	r3, [sp, #20]
 800a0a8:	9b00      	ldr	r3, [sp, #0]
 800a0aa:	4453      	add	r3, sl
 800a0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ae:	9b02      	ldr	r3, [sp, #8]
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	46b9      	mov	r9, r7
 800a0b6:	9308      	str	r3, [sp, #32]
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	9b05      	ldr	r3, [sp, #20]
 800a0bc:	4621      	mov	r1, r4
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	f7ff fad6 	bl	8009674 <quorem>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	3330      	adds	r3, #48	; 0x30
 800a0cc:	9006      	str	r0, [sp, #24]
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d4:	f000 fb76 	bl	800a7c4 <__mcmp>
 800a0d8:	463a      	mov	r2, r7
 800a0da:	4682      	mov	sl, r0
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f000 fb8c 	bl	800a7fc <__mdiff>
 800a0e4:	68c2      	ldr	r2, [r0, #12]
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	bb0a      	cbnz	r2, 800a130 <_dtoa_r+0x9a0>
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f000 fb68 	bl	800a7c4 <__mcmp>
 800a0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	4641      	mov	r1, r8
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	920e      	str	r2, [sp, #56]	; 0x38
 800a0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a100:	f000 f922 	bl	800a348 <_Bfree>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a108:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a10c:	ea43 0102 	orr.w	r1, r3, r2
 800a110:	9b08      	ldr	r3, [sp, #32]
 800a112:	430b      	orrs	r3, r1
 800a114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a116:	d10d      	bne.n	800a134 <_dtoa_r+0x9a4>
 800a118:	2b39      	cmp	r3, #57	; 0x39
 800a11a:	d029      	beq.n	800a170 <_dtoa_r+0x9e0>
 800a11c:	f1ba 0f00 	cmp.w	sl, #0
 800a120:	dd01      	ble.n	800a126 <_dtoa_r+0x996>
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	3331      	adds	r3, #49	; 0x31
 800a126:	9a02      	ldr	r2, [sp, #8]
 800a128:	7013      	strb	r3, [r2, #0]
 800a12a:	e774      	b.n	800a016 <_dtoa_r+0x886>
 800a12c:	4638      	mov	r0, r7
 800a12e:	e7b8      	b.n	800a0a2 <_dtoa_r+0x912>
 800a130:	2201      	movs	r2, #1
 800a132:	e7e1      	b.n	800a0f8 <_dtoa_r+0x968>
 800a134:	f1ba 0f00 	cmp.w	sl, #0
 800a138:	db06      	blt.n	800a148 <_dtoa_r+0x9b8>
 800a13a:	9907      	ldr	r1, [sp, #28]
 800a13c:	ea41 0a0a 	orr.w	sl, r1, sl
 800a140:	9908      	ldr	r1, [sp, #32]
 800a142:	ea5a 0101 	orrs.w	r1, sl, r1
 800a146:	d120      	bne.n	800a18a <_dtoa_r+0x9fa>
 800a148:	2a00      	cmp	r2, #0
 800a14a:	ddec      	ble.n	800a126 <_dtoa_r+0x996>
 800a14c:	4629      	mov	r1, r5
 800a14e:	2201      	movs	r2, #1
 800a150:	4630      	mov	r0, r6
 800a152:	9305      	str	r3, [sp, #20]
 800a154:	f000 faca 	bl	800a6ec <__lshift>
 800a158:	4621      	mov	r1, r4
 800a15a:	4605      	mov	r5, r0
 800a15c:	f000 fb32 	bl	800a7c4 <__mcmp>
 800a160:	2800      	cmp	r0, #0
 800a162:	9b05      	ldr	r3, [sp, #20]
 800a164:	dc02      	bgt.n	800a16c <_dtoa_r+0x9dc>
 800a166:	d1de      	bne.n	800a126 <_dtoa_r+0x996>
 800a168:	07da      	lsls	r2, r3, #31
 800a16a:	d5dc      	bpl.n	800a126 <_dtoa_r+0x996>
 800a16c:	2b39      	cmp	r3, #57	; 0x39
 800a16e:	d1d8      	bne.n	800a122 <_dtoa_r+0x992>
 800a170:	9a02      	ldr	r2, [sp, #8]
 800a172:	2339      	movs	r3, #57	; 0x39
 800a174:	7013      	strb	r3, [r2, #0]
 800a176:	4643      	mov	r3, r8
 800a178:	4698      	mov	r8, r3
 800a17a:	3b01      	subs	r3, #1
 800a17c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a180:	2a39      	cmp	r2, #57	; 0x39
 800a182:	d051      	beq.n	800a228 <_dtoa_r+0xa98>
 800a184:	3201      	adds	r2, #1
 800a186:	701a      	strb	r2, [r3, #0]
 800a188:	e745      	b.n	800a016 <_dtoa_r+0x886>
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	dd03      	ble.n	800a196 <_dtoa_r+0xa06>
 800a18e:	2b39      	cmp	r3, #57	; 0x39
 800a190:	d0ee      	beq.n	800a170 <_dtoa_r+0x9e0>
 800a192:	3301      	adds	r3, #1
 800a194:	e7c7      	b.n	800a126 <_dtoa_r+0x996>
 800a196:	9a05      	ldr	r2, [sp, #20]
 800a198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a19a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a19e:	428a      	cmp	r2, r1
 800a1a0:	d02b      	beq.n	800a1fa <_dtoa_r+0xa6a>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	220a      	movs	r2, #10
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f000 f8ef 	bl	800a38c <__multadd>
 800a1ae:	45b9      	cmp	r9, r7
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	f04f 0300 	mov.w	r3, #0
 800a1b6:	f04f 020a 	mov.w	r2, #10
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4630      	mov	r0, r6
 800a1be:	d107      	bne.n	800a1d0 <_dtoa_r+0xa40>
 800a1c0:	f000 f8e4 	bl	800a38c <__multadd>
 800a1c4:	4681      	mov	r9, r0
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	9b05      	ldr	r3, [sp, #20]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	9305      	str	r3, [sp, #20]
 800a1ce:	e774      	b.n	800a0ba <_dtoa_r+0x92a>
 800a1d0:	f000 f8dc 	bl	800a38c <__multadd>
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	4681      	mov	r9, r0
 800a1d8:	2300      	movs	r3, #0
 800a1da:	220a      	movs	r2, #10
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f000 f8d5 	bl	800a38c <__multadd>
 800a1e2:	4607      	mov	r7, r0
 800a1e4:	e7f0      	b.n	800a1c8 <_dtoa_r+0xa38>
 800a1e6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ea:	9a00      	ldr	r2, [sp, #0]
 800a1ec:	bfcc      	ite	gt
 800a1ee:	46d0      	movgt	r8, sl
 800a1f0:	f04f 0801 	movle.w	r8, #1
 800a1f4:	4490      	add	r8, r2
 800a1f6:	f04f 0900 	mov.w	r9, #0
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4630      	mov	r0, r6
 800a200:	9302      	str	r3, [sp, #8]
 800a202:	f000 fa73 	bl	800a6ec <__lshift>
 800a206:	4621      	mov	r1, r4
 800a208:	4605      	mov	r5, r0
 800a20a:	f000 fadb 	bl	800a7c4 <__mcmp>
 800a20e:	2800      	cmp	r0, #0
 800a210:	dcb1      	bgt.n	800a176 <_dtoa_r+0x9e6>
 800a212:	d102      	bne.n	800a21a <_dtoa_r+0xa8a>
 800a214:	9b02      	ldr	r3, [sp, #8]
 800a216:	07db      	lsls	r3, r3, #31
 800a218:	d4ad      	bmi.n	800a176 <_dtoa_r+0x9e6>
 800a21a:	4643      	mov	r3, r8
 800a21c:	4698      	mov	r8, r3
 800a21e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a222:	2a30      	cmp	r2, #48	; 0x30
 800a224:	d0fa      	beq.n	800a21c <_dtoa_r+0xa8c>
 800a226:	e6f6      	b.n	800a016 <_dtoa_r+0x886>
 800a228:	9a00      	ldr	r2, [sp, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d1a4      	bne.n	800a178 <_dtoa_r+0x9e8>
 800a22e:	f10b 0b01 	add.w	fp, fp, #1
 800a232:	2331      	movs	r3, #49	; 0x31
 800a234:	e778      	b.n	800a128 <_dtoa_r+0x998>
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <_dtoa_r+0xafc>)
 800a238:	f7ff bb12 	b.w	8009860 <_dtoa_r+0xd0>
 800a23c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f47f aaee 	bne.w	8009820 <_dtoa_r+0x90>
 800a244:	4b12      	ldr	r3, [pc, #72]	; (800a290 <_dtoa_r+0xb00>)
 800a246:	f7ff bb0b 	b.w	8009860 <_dtoa_r+0xd0>
 800a24a:	f1ba 0f00 	cmp.w	sl, #0
 800a24e:	dc03      	bgt.n	800a258 <_dtoa_r+0xac8>
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	2b02      	cmp	r3, #2
 800a254:	f73f aec7 	bgt.w	8009fe6 <_dtoa_r+0x856>
 800a258:	f8dd 8000 	ldr.w	r8, [sp]
 800a25c:	4621      	mov	r1, r4
 800a25e:	4628      	mov	r0, r5
 800a260:	f7ff fa08 	bl	8009674 <quorem>
 800a264:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a268:	f808 3b01 	strb.w	r3, [r8], #1
 800a26c:	9a00      	ldr	r2, [sp, #0]
 800a26e:	eba8 0202 	sub.w	r2, r8, r2
 800a272:	4592      	cmp	sl, r2
 800a274:	ddb7      	ble.n	800a1e6 <_dtoa_r+0xa56>
 800a276:	4629      	mov	r1, r5
 800a278:	2300      	movs	r3, #0
 800a27a:	220a      	movs	r2, #10
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 f885 	bl	800a38c <__multadd>
 800a282:	4605      	mov	r5, r0
 800a284:	e7ea      	b.n	800a25c <_dtoa_r+0xacc>
 800a286:	bf00      	nop
 800a288:	0800bd93 	.word	0x0800bd93
 800a28c:	0800bcec 	.word	0x0800bcec
 800a290:	0800bd10 	.word	0x0800bd10

0800a294 <_localeconv_r>:
 800a294:	4800      	ldr	r0, [pc, #0]	; (800a298 <_localeconv_r+0x4>)
 800a296:	4770      	bx	lr
 800a298:	200001fc 	.word	0x200001fc

0800a29c <malloc>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <malloc+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f000 bbef 	b.w	800aa84 <_malloc_r>
 800a2a6:	bf00      	nop
 800a2a8:	200000a8 	.word	0x200000a8

0800a2ac <memcpy>:
 800a2ac:	440a      	add	r2, r1
 800a2ae:	4291      	cmp	r1, r2
 800a2b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2b4:	d100      	bne.n	800a2b8 <memcpy+0xc>
 800a2b6:	4770      	bx	lr
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2c2:	4291      	cmp	r1, r2
 800a2c4:	d1f9      	bne.n	800a2ba <memcpy+0xe>
 800a2c6:	bd10      	pop	{r4, pc}

0800a2c8 <_Balloc>:
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	b976      	cbnz	r6, 800a2f0 <_Balloc+0x28>
 800a2d2:	2010      	movs	r0, #16
 800a2d4:	f7ff ffe2 	bl	800a29c <malloc>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	6260      	str	r0, [r4, #36]	; 0x24
 800a2dc:	b920      	cbnz	r0, 800a2e8 <_Balloc+0x20>
 800a2de:	4b18      	ldr	r3, [pc, #96]	; (800a340 <_Balloc+0x78>)
 800a2e0:	4818      	ldr	r0, [pc, #96]	; (800a344 <_Balloc+0x7c>)
 800a2e2:	2166      	movs	r1, #102	; 0x66
 800a2e4:	f000 fd94 	bl	800ae10 <__assert_func>
 800a2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2ec:	6006      	str	r6, [r0, #0]
 800a2ee:	60c6      	str	r6, [r0, #12]
 800a2f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2f2:	68f3      	ldr	r3, [r6, #12]
 800a2f4:	b183      	cbz	r3, 800a318 <_Balloc+0x50>
 800a2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2fe:	b9b8      	cbnz	r0, 800a330 <_Balloc+0x68>
 800a300:	2101      	movs	r1, #1
 800a302:	fa01 f605 	lsl.w	r6, r1, r5
 800a306:	1d72      	adds	r2, r6, #5
 800a308:	0092      	lsls	r2, r2, #2
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fb5a 	bl	800a9c4 <_calloc_r>
 800a310:	b160      	cbz	r0, 800a32c <_Balloc+0x64>
 800a312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a316:	e00e      	b.n	800a336 <_Balloc+0x6e>
 800a318:	2221      	movs	r2, #33	; 0x21
 800a31a:	2104      	movs	r1, #4
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fb51 	bl	800a9c4 <_calloc_r>
 800a322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a324:	60f0      	str	r0, [r6, #12]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1e4      	bne.n	800a2f6 <_Balloc+0x2e>
 800a32c:	2000      	movs	r0, #0
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	6802      	ldr	r2, [r0, #0]
 800a332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a336:	2300      	movs	r3, #0
 800a338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a33c:	e7f7      	b.n	800a32e <_Balloc+0x66>
 800a33e:	bf00      	nop
 800a340:	0800bd1d 	.word	0x0800bd1d
 800a344:	0800bda4 	.word	0x0800bda4

0800a348 <_Bfree>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a34c:	4605      	mov	r5, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	b976      	cbnz	r6, 800a370 <_Bfree+0x28>
 800a352:	2010      	movs	r0, #16
 800a354:	f7ff ffa2 	bl	800a29c <malloc>
 800a358:	4602      	mov	r2, r0
 800a35a:	6268      	str	r0, [r5, #36]	; 0x24
 800a35c:	b920      	cbnz	r0, 800a368 <_Bfree+0x20>
 800a35e:	4b09      	ldr	r3, [pc, #36]	; (800a384 <_Bfree+0x3c>)
 800a360:	4809      	ldr	r0, [pc, #36]	; (800a388 <_Bfree+0x40>)
 800a362:	218a      	movs	r1, #138	; 0x8a
 800a364:	f000 fd54 	bl	800ae10 <__assert_func>
 800a368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a36c:	6006      	str	r6, [r0, #0]
 800a36e:	60c6      	str	r6, [r0, #12]
 800a370:	b13c      	cbz	r4, 800a382 <_Bfree+0x3a>
 800a372:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a374:	6862      	ldr	r2, [r4, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a37c:	6021      	str	r1, [r4, #0]
 800a37e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	0800bd1d 	.word	0x0800bd1d
 800a388:	0800bda4 	.word	0x0800bda4

0800a38c <__multadd>:
 800a38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a390:	690e      	ldr	r6, [r1, #16]
 800a392:	4607      	mov	r7, r0
 800a394:	4698      	mov	r8, r3
 800a396:	460c      	mov	r4, r1
 800a398:	f101 0014 	add.w	r0, r1, #20
 800a39c:	2300      	movs	r3, #0
 800a39e:	6805      	ldr	r5, [r0, #0]
 800a3a0:	b2a9      	uxth	r1, r5
 800a3a2:	fb02 8101 	mla	r1, r2, r1, r8
 800a3a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a3aa:	0c2d      	lsrs	r5, r5, #16
 800a3ac:	fb02 c505 	mla	r5, r2, r5, ip
 800a3b0:	b289      	uxth	r1, r1
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a3b8:	429e      	cmp	r6, r3
 800a3ba:	f840 1b04 	str.w	r1, [r0], #4
 800a3be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a3c2:	dcec      	bgt.n	800a39e <__multadd+0x12>
 800a3c4:	f1b8 0f00 	cmp.w	r8, #0
 800a3c8:	d022      	beq.n	800a410 <__multadd+0x84>
 800a3ca:	68a3      	ldr	r3, [r4, #8]
 800a3cc:	42b3      	cmp	r3, r6
 800a3ce:	dc19      	bgt.n	800a404 <__multadd+0x78>
 800a3d0:	6861      	ldr	r1, [r4, #4]
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	3101      	adds	r1, #1
 800a3d6:	f7ff ff77 	bl	800a2c8 <_Balloc>
 800a3da:	4605      	mov	r5, r0
 800a3dc:	b928      	cbnz	r0, 800a3ea <__multadd+0x5e>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <__multadd+0x8c>)
 800a3e2:	480e      	ldr	r0, [pc, #56]	; (800a41c <__multadd+0x90>)
 800a3e4:	21b5      	movs	r1, #181	; 0xb5
 800a3e6:	f000 fd13 	bl	800ae10 <__assert_func>
 800a3ea:	6922      	ldr	r2, [r4, #16]
 800a3ec:	3202      	adds	r2, #2
 800a3ee:	f104 010c 	add.w	r1, r4, #12
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	300c      	adds	r0, #12
 800a3f6:	f7ff ff59 	bl	800a2ac <memcpy>
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff ffa3 	bl	800a348 <_Bfree>
 800a402:	462c      	mov	r4, r5
 800a404:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a408:	3601      	adds	r6, #1
 800a40a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a40e:	6126      	str	r6, [r4, #16]
 800a410:	4620      	mov	r0, r4
 800a412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a416:	bf00      	nop
 800a418:	0800bd93 	.word	0x0800bd93
 800a41c:	0800bda4 	.word	0x0800bda4

0800a420 <__hi0bits>:
 800a420:	0c03      	lsrs	r3, r0, #16
 800a422:	041b      	lsls	r3, r3, #16
 800a424:	b9d3      	cbnz	r3, 800a45c <__hi0bits+0x3c>
 800a426:	0400      	lsls	r0, r0, #16
 800a428:	2310      	movs	r3, #16
 800a42a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a42e:	bf04      	itt	eq
 800a430:	0200      	lsleq	r0, r0, #8
 800a432:	3308      	addeq	r3, #8
 800a434:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a438:	bf04      	itt	eq
 800a43a:	0100      	lsleq	r0, r0, #4
 800a43c:	3304      	addeq	r3, #4
 800a43e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a442:	bf04      	itt	eq
 800a444:	0080      	lsleq	r0, r0, #2
 800a446:	3302      	addeq	r3, #2
 800a448:	2800      	cmp	r0, #0
 800a44a:	db05      	blt.n	800a458 <__hi0bits+0x38>
 800a44c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a450:	f103 0301 	add.w	r3, r3, #1
 800a454:	bf08      	it	eq
 800a456:	2320      	moveq	r3, #32
 800a458:	4618      	mov	r0, r3
 800a45a:	4770      	bx	lr
 800a45c:	2300      	movs	r3, #0
 800a45e:	e7e4      	b.n	800a42a <__hi0bits+0xa>

0800a460 <__lo0bits>:
 800a460:	6803      	ldr	r3, [r0, #0]
 800a462:	f013 0207 	ands.w	r2, r3, #7
 800a466:	4601      	mov	r1, r0
 800a468:	d00b      	beq.n	800a482 <__lo0bits+0x22>
 800a46a:	07da      	lsls	r2, r3, #31
 800a46c:	d424      	bmi.n	800a4b8 <__lo0bits+0x58>
 800a46e:	0798      	lsls	r0, r3, #30
 800a470:	bf49      	itett	mi
 800a472:	085b      	lsrmi	r3, r3, #1
 800a474:	089b      	lsrpl	r3, r3, #2
 800a476:	2001      	movmi	r0, #1
 800a478:	600b      	strmi	r3, [r1, #0]
 800a47a:	bf5c      	itt	pl
 800a47c:	600b      	strpl	r3, [r1, #0]
 800a47e:	2002      	movpl	r0, #2
 800a480:	4770      	bx	lr
 800a482:	b298      	uxth	r0, r3
 800a484:	b9b0      	cbnz	r0, 800a4b4 <__lo0bits+0x54>
 800a486:	0c1b      	lsrs	r3, r3, #16
 800a488:	2010      	movs	r0, #16
 800a48a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a48e:	bf04      	itt	eq
 800a490:	0a1b      	lsreq	r3, r3, #8
 800a492:	3008      	addeq	r0, #8
 800a494:	071a      	lsls	r2, r3, #28
 800a496:	bf04      	itt	eq
 800a498:	091b      	lsreq	r3, r3, #4
 800a49a:	3004      	addeq	r0, #4
 800a49c:	079a      	lsls	r2, r3, #30
 800a49e:	bf04      	itt	eq
 800a4a0:	089b      	lsreq	r3, r3, #2
 800a4a2:	3002      	addeq	r0, #2
 800a4a4:	07da      	lsls	r2, r3, #31
 800a4a6:	d403      	bmi.n	800a4b0 <__lo0bits+0x50>
 800a4a8:	085b      	lsrs	r3, r3, #1
 800a4aa:	f100 0001 	add.w	r0, r0, #1
 800a4ae:	d005      	beq.n	800a4bc <__lo0bits+0x5c>
 800a4b0:	600b      	str	r3, [r1, #0]
 800a4b2:	4770      	bx	lr
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	e7e8      	b.n	800a48a <__lo0bits+0x2a>
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	4770      	bx	lr
 800a4bc:	2020      	movs	r0, #32
 800a4be:	4770      	bx	lr

0800a4c0 <__i2b>:
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	f7ff feff 	bl	800a2c8 <_Balloc>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	b928      	cbnz	r0, 800a4da <__i2b+0x1a>
 800a4ce:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <__i2b+0x24>)
 800a4d0:	4805      	ldr	r0, [pc, #20]	; (800a4e8 <__i2b+0x28>)
 800a4d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4d6:	f000 fc9b 	bl	800ae10 <__assert_func>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	6144      	str	r4, [r0, #20]
 800a4de:	6103      	str	r3, [r0, #16]
 800a4e0:	bd10      	pop	{r4, pc}
 800a4e2:	bf00      	nop
 800a4e4:	0800bd93 	.word	0x0800bd93
 800a4e8:	0800bda4 	.word	0x0800bda4

0800a4ec <__multiply>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	690a      	ldr	r2, [r1, #16]
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	bfb8      	it	lt
 800a4fa:	460b      	movlt	r3, r1
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	bfbc      	itt	lt
 800a500:	4625      	movlt	r5, r4
 800a502:	461c      	movlt	r4, r3
 800a504:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a508:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a50c:	68ab      	ldr	r3, [r5, #8]
 800a50e:	6869      	ldr	r1, [r5, #4]
 800a510:	eb0a 0709 	add.w	r7, sl, r9
 800a514:	42bb      	cmp	r3, r7
 800a516:	b085      	sub	sp, #20
 800a518:	bfb8      	it	lt
 800a51a:	3101      	addlt	r1, #1
 800a51c:	f7ff fed4 	bl	800a2c8 <_Balloc>
 800a520:	b930      	cbnz	r0, 800a530 <__multiply+0x44>
 800a522:	4602      	mov	r2, r0
 800a524:	4b42      	ldr	r3, [pc, #264]	; (800a630 <__multiply+0x144>)
 800a526:	4843      	ldr	r0, [pc, #268]	; (800a634 <__multiply+0x148>)
 800a528:	f240 115d 	movw	r1, #349	; 0x15d
 800a52c:	f000 fc70 	bl	800ae10 <__assert_func>
 800a530:	f100 0614 	add.w	r6, r0, #20
 800a534:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a538:	4633      	mov	r3, r6
 800a53a:	2200      	movs	r2, #0
 800a53c:	4543      	cmp	r3, r8
 800a53e:	d31e      	bcc.n	800a57e <__multiply+0x92>
 800a540:	f105 0c14 	add.w	ip, r5, #20
 800a544:	f104 0314 	add.w	r3, r4, #20
 800a548:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a54c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a550:	9202      	str	r2, [sp, #8]
 800a552:	ebac 0205 	sub.w	r2, ip, r5
 800a556:	3a15      	subs	r2, #21
 800a558:	f022 0203 	bic.w	r2, r2, #3
 800a55c:	3204      	adds	r2, #4
 800a55e:	f105 0115 	add.w	r1, r5, #21
 800a562:	458c      	cmp	ip, r1
 800a564:	bf38      	it	cc
 800a566:	2204      	movcc	r2, #4
 800a568:	9201      	str	r2, [sp, #4]
 800a56a:	9a02      	ldr	r2, [sp, #8]
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d808      	bhi.n	800a584 <__multiply+0x98>
 800a572:	2f00      	cmp	r7, #0
 800a574:	dc55      	bgt.n	800a622 <__multiply+0x136>
 800a576:	6107      	str	r7, [r0, #16]
 800a578:	b005      	add	sp, #20
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	f843 2b04 	str.w	r2, [r3], #4
 800a582:	e7db      	b.n	800a53c <__multiply+0x50>
 800a584:	f8b3 a000 	ldrh.w	sl, [r3]
 800a588:	f1ba 0f00 	cmp.w	sl, #0
 800a58c:	d020      	beq.n	800a5d0 <__multiply+0xe4>
 800a58e:	f105 0e14 	add.w	lr, r5, #20
 800a592:	46b1      	mov	r9, r6
 800a594:	2200      	movs	r2, #0
 800a596:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a59a:	f8d9 b000 	ldr.w	fp, [r9]
 800a59e:	b2a1      	uxth	r1, r4
 800a5a0:	fa1f fb8b 	uxth.w	fp, fp
 800a5a4:	fb0a b101 	mla	r1, sl, r1, fp
 800a5a8:	4411      	add	r1, r2
 800a5aa:	f8d9 2000 	ldr.w	r2, [r9]
 800a5ae:	0c24      	lsrs	r4, r4, #16
 800a5b0:	0c12      	lsrs	r2, r2, #16
 800a5b2:	fb0a 2404 	mla	r4, sl, r4, r2
 800a5b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a5ba:	b289      	uxth	r1, r1
 800a5bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a5c0:	45f4      	cmp	ip, lr
 800a5c2:	f849 1b04 	str.w	r1, [r9], #4
 800a5c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a5ca:	d8e4      	bhi.n	800a596 <__multiply+0xaa>
 800a5cc:	9901      	ldr	r1, [sp, #4]
 800a5ce:	5072      	str	r2, [r6, r1]
 800a5d0:	9a03      	ldr	r2, [sp, #12]
 800a5d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	f1b9 0f00 	cmp.w	r9, #0
 800a5dc:	d01f      	beq.n	800a61e <__multiply+0x132>
 800a5de:	6834      	ldr	r4, [r6, #0]
 800a5e0:	f105 0114 	add.w	r1, r5, #20
 800a5e4:	46b6      	mov	lr, r6
 800a5e6:	f04f 0a00 	mov.w	sl, #0
 800a5ea:	880a      	ldrh	r2, [r1, #0]
 800a5ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a5f0:	fb09 b202 	mla	r2, r9, r2, fp
 800a5f4:	4492      	add	sl, r2
 800a5f6:	b2a4      	uxth	r4, r4
 800a5f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a5fc:	f84e 4b04 	str.w	r4, [lr], #4
 800a600:	f851 4b04 	ldr.w	r4, [r1], #4
 800a604:	f8be 2000 	ldrh.w	r2, [lr]
 800a608:	0c24      	lsrs	r4, r4, #16
 800a60a:	fb09 2404 	mla	r4, r9, r4, r2
 800a60e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a612:	458c      	cmp	ip, r1
 800a614:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a618:	d8e7      	bhi.n	800a5ea <__multiply+0xfe>
 800a61a:	9a01      	ldr	r2, [sp, #4]
 800a61c:	50b4      	str	r4, [r6, r2]
 800a61e:	3604      	adds	r6, #4
 800a620:	e7a3      	b.n	800a56a <__multiply+0x7e>
 800a622:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1a5      	bne.n	800a576 <__multiply+0x8a>
 800a62a:	3f01      	subs	r7, #1
 800a62c:	e7a1      	b.n	800a572 <__multiply+0x86>
 800a62e:	bf00      	nop
 800a630:	0800bd93 	.word	0x0800bd93
 800a634:	0800bda4 	.word	0x0800bda4

0800a638 <__pow5mult>:
 800a638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4615      	mov	r5, r2
 800a63e:	f012 0203 	ands.w	r2, r2, #3
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	d007      	beq.n	800a658 <__pow5mult+0x20>
 800a648:	4c25      	ldr	r4, [pc, #148]	; (800a6e0 <__pow5mult+0xa8>)
 800a64a:	3a01      	subs	r2, #1
 800a64c:	2300      	movs	r3, #0
 800a64e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a652:	f7ff fe9b 	bl	800a38c <__multadd>
 800a656:	4607      	mov	r7, r0
 800a658:	10ad      	asrs	r5, r5, #2
 800a65a:	d03d      	beq.n	800a6d8 <__pow5mult+0xa0>
 800a65c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a65e:	b97c      	cbnz	r4, 800a680 <__pow5mult+0x48>
 800a660:	2010      	movs	r0, #16
 800a662:	f7ff fe1b 	bl	800a29c <malloc>
 800a666:	4602      	mov	r2, r0
 800a668:	6270      	str	r0, [r6, #36]	; 0x24
 800a66a:	b928      	cbnz	r0, 800a678 <__pow5mult+0x40>
 800a66c:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <__pow5mult+0xac>)
 800a66e:	481e      	ldr	r0, [pc, #120]	; (800a6e8 <__pow5mult+0xb0>)
 800a670:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a674:	f000 fbcc 	bl	800ae10 <__assert_func>
 800a678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a67c:	6004      	str	r4, [r0, #0]
 800a67e:	60c4      	str	r4, [r0, #12]
 800a680:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a688:	b94c      	cbnz	r4, 800a69e <__pow5mult+0x66>
 800a68a:	f240 2171 	movw	r1, #625	; 0x271
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ff16 	bl	800a4c0 <__i2b>
 800a694:	2300      	movs	r3, #0
 800a696:	f8c8 0008 	str.w	r0, [r8, #8]
 800a69a:	4604      	mov	r4, r0
 800a69c:	6003      	str	r3, [r0, #0]
 800a69e:	f04f 0900 	mov.w	r9, #0
 800a6a2:	07eb      	lsls	r3, r5, #31
 800a6a4:	d50a      	bpl.n	800a6bc <__pow5mult+0x84>
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ff1e 	bl	800a4ec <__multiply>
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff fe47 	bl	800a348 <_Bfree>
 800a6ba:	4647      	mov	r7, r8
 800a6bc:	106d      	asrs	r5, r5, #1
 800a6be:	d00b      	beq.n	800a6d8 <__pow5mult+0xa0>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	b938      	cbnz	r0, 800a6d4 <__pow5mult+0x9c>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff ff0f 	bl	800a4ec <__multiply>
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	f8c0 9000 	str.w	r9, [r0]
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	e7e4      	b.n	800a6a2 <__pow5mult+0x6a>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800bef8 	.word	0x0800bef8
 800a6e4:	0800bd1d 	.word	0x0800bd1d
 800a6e8:	0800bda4 	.word	0x0800bda4

0800a6ec <__lshift>:
 800a6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	6849      	ldr	r1, [r1, #4]
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	4691      	mov	r9, r2
 800a700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a704:	f108 0601 	add.w	r6, r8, #1
 800a708:	42b3      	cmp	r3, r6
 800a70a:	db0b      	blt.n	800a724 <__lshift+0x38>
 800a70c:	4638      	mov	r0, r7
 800a70e:	f7ff fddb 	bl	800a2c8 <_Balloc>
 800a712:	4605      	mov	r5, r0
 800a714:	b948      	cbnz	r0, 800a72a <__lshift+0x3e>
 800a716:	4602      	mov	r2, r0
 800a718:	4b28      	ldr	r3, [pc, #160]	; (800a7bc <__lshift+0xd0>)
 800a71a:	4829      	ldr	r0, [pc, #164]	; (800a7c0 <__lshift+0xd4>)
 800a71c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a720:	f000 fb76 	bl	800ae10 <__assert_func>
 800a724:	3101      	adds	r1, #1
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	e7ee      	b.n	800a708 <__lshift+0x1c>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f100 0114 	add.w	r1, r0, #20
 800a730:	f100 0210 	add.w	r2, r0, #16
 800a734:	4618      	mov	r0, r3
 800a736:	4553      	cmp	r3, sl
 800a738:	db33      	blt.n	800a7a2 <__lshift+0xb6>
 800a73a:	6920      	ldr	r0, [r4, #16]
 800a73c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a740:	f104 0314 	add.w	r3, r4, #20
 800a744:	f019 091f 	ands.w	r9, r9, #31
 800a748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a74c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a750:	d02b      	beq.n	800a7aa <__lshift+0xbe>
 800a752:	f1c9 0e20 	rsb	lr, r9, #32
 800a756:	468a      	mov	sl, r1
 800a758:	2200      	movs	r2, #0
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	fa00 f009 	lsl.w	r0, r0, r9
 800a760:	4302      	orrs	r2, r0
 800a762:	f84a 2b04 	str.w	r2, [sl], #4
 800a766:	f853 2b04 	ldr.w	r2, [r3], #4
 800a76a:	459c      	cmp	ip, r3
 800a76c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a770:	d8f3      	bhi.n	800a75a <__lshift+0x6e>
 800a772:	ebac 0304 	sub.w	r3, ip, r4
 800a776:	3b15      	subs	r3, #21
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3304      	adds	r3, #4
 800a77e:	f104 0015 	add.w	r0, r4, #21
 800a782:	4584      	cmp	ip, r0
 800a784:	bf38      	it	cc
 800a786:	2304      	movcc	r3, #4
 800a788:	50ca      	str	r2, [r1, r3]
 800a78a:	b10a      	cbz	r2, 800a790 <__lshift+0xa4>
 800a78c:	f108 0602 	add.w	r6, r8, #2
 800a790:	3e01      	subs	r6, #1
 800a792:	4638      	mov	r0, r7
 800a794:	612e      	str	r6, [r5, #16]
 800a796:	4621      	mov	r1, r4
 800a798:	f7ff fdd6 	bl	800a348 <_Bfree>
 800a79c:	4628      	mov	r0, r5
 800a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	e7c5      	b.n	800a736 <__lshift+0x4a>
 800a7aa:	3904      	subs	r1, #4
 800a7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7b4:	459c      	cmp	ip, r3
 800a7b6:	d8f9      	bhi.n	800a7ac <__lshift+0xc0>
 800a7b8:	e7ea      	b.n	800a790 <__lshift+0xa4>
 800a7ba:	bf00      	nop
 800a7bc:	0800bd93 	.word	0x0800bd93
 800a7c0:	0800bda4 	.word	0x0800bda4

0800a7c4 <__mcmp>:
 800a7c4:	b530      	push	{r4, r5, lr}
 800a7c6:	6902      	ldr	r2, [r0, #16]
 800a7c8:	690c      	ldr	r4, [r1, #16]
 800a7ca:	1b12      	subs	r2, r2, r4
 800a7cc:	d10e      	bne.n	800a7ec <__mcmp+0x28>
 800a7ce:	f100 0314 	add.w	r3, r0, #20
 800a7d2:	3114      	adds	r1, #20
 800a7d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7e4:	42a5      	cmp	r5, r4
 800a7e6:	d003      	beq.n	800a7f0 <__mcmp+0x2c>
 800a7e8:	d305      	bcc.n	800a7f6 <__mcmp+0x32>
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	bd30      	pop	{r4, r5, pc}
 800a7f0:	4283      	cmp	r3, r0
 800a7f2:	d3f3      	bcc.n	800a7dc <__mcmp+0x18>
 800a7f4:	e7fa      	b.n	800a7ec <__mcmp+0x28>
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e7f7      	b.n	800a7ec <__mcmp+0x28>

0800a7fc <__mdiff>:
 800a7fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	460c      	mov	r4, r1
 800a802:	4606      	mov	r6, r0
 800a804:	4611      	mov	r1, r2
 800a806:	4620      	mov	r0, r4
 800a808:	4617      	mov	r7, r2
 800a80a:	f7ff ffdb 	bl	800a7c4 <__mcmp>
 800a80e:	1e05      	subs	r5, r0, #0
 800a810:	d110      	bne.n	800a834 <__mdiff+0x38>
 800a812:	4629      	mov	r1, r5
 800a814:	4630      	mov	r0, r6
 800a816:	f7ff fd57 	bl	800a2c8 <_Balloc>
 800a81a:	b930      	cbnz	r0, 800a82a <__mdiff+0x2e>
 800a81c:	4b39      	ldr	r3, [pc, #228]	; (800a904 <__mdiff+0x108>)
 800a81e:	4602      	mov	r2, r0
 800a820:	f240 2132 	movw	r1, #562	; 0x232
 800a824:	4838      	ldr	r0, [pc, #224]	; (800a908 <__mdiff+0x10c>)
 800a826:	f000 faf3 	bl	800ae10 <__assert_func>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a834:	bfa4      	itt	ge
 800a836:	463b      	movge	r3, r7
 800a838:	4627      	movge	r7, r4
 800a83a:	4630      	mov	r0, r6
 800a83c:	6879      	ldr	r1, [r7, #4]
 800a83e:	bfa6      	itte	ge
 800a840:	461c      	movge	r4, r3
 800a842:	2500      	movge	r5, #0
 800a844:	2501      	movlt	r5, #1
 800a846:	f7ff fd3f 	bl	800a2c8 <_Balloc>
 800a84a:	b920      	cbnz	r0, 800a856 <__mdiff+0x5a>
 800a84c:	4b2d      	ldr	r3, [pc, #180]	; (800a904 <__mdiff+0x108>)
 800a84e:	4602      	mov	r2, r0
 800a850:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a854:	e7e6      	b.n	800a824 <__mdiff+0x28>
 800a856:	693e      	ldr	r6, [r7, #16]
 800a858:	60c5      	str	r5, [r0, #12]
 800a85a:	6925      	ldr	r5, [r4, #16]
 800a85c:	f107 0114 	add.w	r1, r7, #20
 800a860:	f104 0914 	add.w	r9, r4, #20
 800a864:	f100 0e14 	add.w	lr, r0, #20
 800a868:	f107 0210 	add.w	r2, r7, #16
 800a86c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a870:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a874:	46f2      	mov	sl, lr
 800a876:	2700      	movs	r7, #0
 800a878:	f859 3b04 	ldr.w	r3, [r9], #4
 800a87c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a880:	fa1f f883 	uxth.w	r8, r3
 800a884:	fa17 f78b 	uxtah	r7, r7, fp
 800a888:	0c1b      	lsrs	r3, r3, #16
 800a88a:	eba7 0808 	sub.w	r8, r7, r8
 800a88e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a892:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a896:	fa1f f888 	uxth.w	r8, r8
 800a89a:	141f      	asrs	r7, r3, #16
 800a89c:	454d      	cmp	r5, r9
 800a89e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a8a6:	d8e7      	bhi.n	800a878 <__mdiff+0x7c>
 800a8a8:	1b2b      	subs	r3, r5, r4
 800a8aa:	3b15      	subs	r3, #21
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	3415      	adds	r4, #21
 800a8b4:	42a5      	cmp	r5, r4
 800a8b6:	bf38      	it	cc
 800a8b8:	2304      	movcc	r3, #4
 800a8ba:	4419      	add	r1, r3
 800a8bc:	4473      	add	r3, lr
 800a8be:	469e      	mov	lr, r3
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	4565      	cmp	r5, ip
 800a8c4:	d30e      	bcc.n	800a8e4 <__mdiff+0xe8>
 800a8c6:	f10c 0203 	add.w	r2, ip, #3
 800a8ca:	1a52      	subs	r2, r2, r1
 800a8cc:	f022 0203 	bic.w	r2, r2, #3
 800a8d0:	3903      	subs	r1, #3
 800a8d2:	458c      	cmp	ip, r1
 800a8d4:	bf38      	it	cc
 800a8d6:	2200      	movcc	r2, #0
 800a8d8:	441a      	add	r2, r3
 800a8da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8de:	b17b      	cbz	r3, 800a900 <__mdiff+0x104>
 800a8e0:	6106      	str	r6, [r0, #16]
 800a8e2:	e7a5      	b.n	800a830 <__mdiff+0x34>
 800a8e4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a8e8:	fa17 f488 	uxtah	r4, r7, r8
 800a8ec:	1422      	asrs	r2, r4, #16
 800a8ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a8f2:	b2a4      	uxth	r4, r4
 800a8f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8f8:	f84e 4b04 	str.w	r4, [lr], #4
 800a8fc:	1417      	asrs	r7, r2, #16
 800a8fe:	e7e0      	b.n	800a8c2 <__mdiff+0xc6>
 800a900:	3e01      	subs	r6, #1
 800a902:	e7ea      	b.n	800a8da <__mdiff+0xde>
 800a904:	0800bd93 	.word	0x0800bd93
 800a908:	0800bda4 	.word	0x0800bda4

0800a90c <__d2b>:
 800a90c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a910:	4689      	mov	r9, r1
 800a912:	2101      	movs	r1, #1
 800a914:	ec57 6b10 	vmov	r6, r7, d0
 800a918:	4690      	mov	r8, r2
 800a91a:	f7ff fcd5 	bl	800a2c8 <_Balloc>
 800a91e:	4604      	mov	r4, r0
 800a920:	b930      	cbnz	r0, 800a930 <__d2b+0x24>
 800a922:	4602      	mov	r2, r0
 800a924:	4b25      	ldr	r3, [pc, #148]	; (800a9bc <__d2b+0xb0>)
 800a926:	4826      	ldr	r0, [pc, #152]	; (800a9c0 <__d2b+0xb4>)
 800a928:	f240 310a 	movw	r1, #778	; 0x30a
 800a92c:	f000 fa70 	bl	800ae10 <__assert_func>
 800a930:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a934:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a938:	bb35      	cbnz	r5, 800a988 <__d2b+0x7c>
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	d028      	beq.n	800a992 <__d2b+0x86>
 800a940:	4668      	mov	r0, sp
 800a942:	9600      	str	r6, [sp, #0]
 800a944:	f7ff fd8c 	bl	800a460 <__lo0bits>
 800a948:	9900      	ldr	r1, [sp, #0]
 800a94a:	b300      	cbz	r0, 800a98e <__d2b+0x82>
 800a94c:	9a01      	ldr	r2, [sp, #4]
 800a94e:	f1c0 0320 	rsb	r3, r0, #32
 800a952:	fa02 f303 	lsl.w	r3, r2, r3
 800a956:	430b      	orrs	r3, r1
 800a958:	40c2      	lsrs	r2, r0
 800a95a:	6163      	str	r3, [r4, #20]
 800a95c:	9201      	str	r2, [sp, #4]
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	61a3      	str	r3, [r4, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	bf14      	ite	ne
 800a966:	2202      	movne	r2, #2
 800a968:	2201      	moveq	r2, #1
 800a96a:	6122      	str	r2, [r4, #16]
 800a96c:	b1d5      	cbz	r5, 800a9a4 <__d2b+0x98>
 800a96e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a972:	4405      	add	r5, r0
 800a974:	f8c9 5000 	str.w	r5, [r9]
 800a978:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a97c:	f8c8 0000 	str.w	r0, [r8]
 800a980:	4620      	mov	r0, r4
 800a982:	b003      	add	sp, #12
 800a984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a98c:	e7d5      	b.n	800a93a <__d2b+0x2e>
 800a98e:	6161      	str	r1, [r4, #20]
 800a990:	e7e5      	b.n	800a95e <__d2b+0x52>
 800a992:	a801      	add	r0, sp, #4
 800a994:	f7ff fd64 	bl	800a460 <__lo0bits>
 800a998:	9b01      	ldr	r3, [sp, #4]
 800a99a:	6163      	str	r3, [r4, #20]
 800a99c:	2201      	movs	r2, #1
 800a99e:	6122      	str	r2, [r4, #16]
 800a9a0:	3020      	adds	r0, #32
 800a9a2:	e7e3      	b.n	800a96c <__d2b+0x60>
 800a9a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9ac:	f8c9 0000 	str.w	r0, [r9]
 800a9b0:	6918      	ldr	r0, [r3, #16]
 800a9b2:	f7ff fd35 	bl	800a420 <__hi0bits>
 800a9b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9ba:	e7df      	b.n	800a97c <__d2b+0x70>
 800a9bc:	0800bd93 	.word	0x0800bd93
 800a9c0:	0800bda4 	.word	0x0800bda4

0800a9c4 <_calloc_r>:
 800a9c4:	b513      	push	{r0, r1, r4, lr}
 800a9c6:	434a      	muls	r2, r1
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	9201      	str	r2, [sp, #4]
 800a9cc:	f000 f85a 	bl	800aa84 <_malloc_r>
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	b118      	cbz	r0, 800a9dc <_calloc_r+0x18>
 800a9d4:	9a01      	ldr	r2, [sp, #4]
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f7fe f9e0 	bl	8008d9c <memset>
 800a9dc:	4620      	mov	r0, r4
 800a9de:	b002      	add	sp, #8
 800a9e0:	bd10      	pop	{r4, pc}
	...

0800a9e4 <_free_r>:
 800a9e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d048      	beq.n	800aa7c <_free_r+0x98>
 800a9ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ee:	9001      	str	r0, [sp, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a9f6:	bfb8      	it	lt
 800a9f8:	18e4      	addlt	r4, r4, r3
 800a9fa:	f000 fa65 	bl	800aec8 <__malloc_lock>
 800a9fe:	4a20      	ldr	r2, [pc, #128]	; (800aa80 <_free_r+0x9c>)
 800aa00:	9801      	ldr	r0, [sp, #4]
 800aa02:	6813      	ldr	r3, [r2, #0]
 800aa04:	4615      	mov	r5, r2
 800aa06:	b933      	cbnz	r3, 800aa16 <_free_r+0x32>
 800aa08:	6063      	str	r3, [r4, #4]
 800aa0a:	6014      	str	r4, [r2, #0]
 800aa0c:	b003      	add	sp, #12
 800aa0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa12:	f000 ba5f 	b.w	800aed4 <__malloc_unlock>
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	d90b      	bls.n	800aa32 <_free_r+0x4e>
 800aa1a:	6821      	ldr	r1, [r4, #0]
 800aa1c:	1862      	adds	r2, r4, r1
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	bf04      	itt	eq
 800aa22:	681a      	ldreq	r2, [r3, #0]
 800aa24:	685b      	ldreq	r3, [r3, #4]
 800aa26:	6063      	str	r3, [r4, #4]
 800aa28:	bf04      	itt	eq
 800aa2a:	1852      	addeq	r2, r2, r1
 800aa2c:	6022      	streq	r2, [r4, #0]
 800aa2e:	602c      	str	r4, [r5, #0]
 800aa30:	e7ec      	b.n	800aa0c <_free_r+0x28>
 800aa32:	461a      	mov	r2, r3
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	b10b      	cbz	r3, 800aa3c <_free_r+0x58>
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	d9fa      	bls.n	800aa32 <_free_r+0x4e>
 800aa3c:	6811      	ldr	r1, [r2, #0]
 800aa3e:	1855      	adds	r5, r2, r1
 800aa40:	42a5      	cmp	r5, r4
 800aa42:	d10b      	bne.n	800aa5c <_free_r+0x78>
 800aa44:	6824      	ldr	r4, [r4, #0]
 800aa46:	4421      	add	r1, r4
 800aa48:	1854      	adds	r4, r2, r1
 800aa4a:	42a3      	cmp	r3, r4
 800aa4c:	6011      	str	r1, [r2, #0]
 800aa4e:	d1dd      	bne.n	800aa0c <_free_r+0x28>
 800aa50:	681c      	ldr	r4, [r3, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	6053      	str	r3, [r2, #4]
 800aa56:	4421      	add	r1, r4
 800aa58:	6011      	str	r1, [r2, #0]
 800aa5a:	e7d7      	b.n	800aa0c <_free_r+0x28>
 800aa5c:	d902      	bls.n	800aa64 <_free_r+0x80>
 800aa5e:	230c      	movs	r3, #12
 800aa60:	6003      	str	r3, [r0, #0]
 800aa62:	e7d3      	b.n	800aa0c <_free_r+0x28>
 800aa64:	6825      	ldr	r5, [r4, #0]
 800aa66:	1961      	adds	r1, r4, r5
 800aa68:	428b      	cmp	r3, r1
 800aa6a:	bf04      	itt	eq
 800aa6c:	6819      	ldreq	r1, [r3, #0]
 800aa6e:	685b      	ldreq	r3, [r3, #4]
 800aa70:	6063      	str	r3, [r4, #4]
 800aa72:	bf04      	itt	eq
 800aa74:	1949      	addeq	r1, r1, r5
 800aa76:	6021      	streq	r1, [r4, #0]
 800aa78:	6054      	str	r4, [r2, #4]
 800aa7a:	e7c7      	b.n	800aa0c <_free_r+0x28>
 800aa7c:	b003      	add	sp, #12
 800aa7e:	bd30      	pop	{r4, r5, pc}
 800aa80:	20000304 	.word	0x20000304

0800aa84 <_malloc_r>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	1ccd      	adds	r5, r1, #3
 800aa88:	f025 0503 	bic.w	r5, r5, #3
 800aa8c:	3508      	adds	r5, #8
 800aa8e:	2d0c      	cmp	r5, #12
 800aa90:	bf38      	it	cc
 800aa92:	250c      	movcc	r5, #12
 800aa94:	2d00      	cmp	r5, #0
 800aa96:	4606      	mov	r6, r0
 800aa98:	db01      	blt.n	800aa9e <_malloc_r+0x1a>
 800aa9a:	42a9      	cmp	r1, r5
 800aa9c:	d903      	bls.n	800aaa6 <_malloc_r+0x22>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	6033      	str	r3, [r6, #0]
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa6:	f000 fa0f 	bl	800aec8 <__malloc_lock>
 800aaaa:	4921      	ldr	r1, [pc, #132]	; (800ab30 <_malloc_r+0xac>)
 800aaac:	680a      	ldr	r2, [r1, #0]
 800aaae:	4614      	mov	r4, r2
 800aab0:	b99c      	cbnz	r4, 800aada <_malloc_r+0x56>
 800aab2:	4f20      	ldr	r7, [pc, #128]	; (800ab34 <_malloc_r+0xb0>)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	b923      	cbnz	r3, 800aac2 <_malloc_r+0x3e>
 800aab8:	4621      	mov	r1, r4
 800aaba:	4630      	mov	r0, r6
 800aabc:	f000 f998 	bl	800adf0 <_sbrk_r>
 800aac0:	6038      	str	r0, [r7, #0]
 800aac2:	4629      	mov	r1, r5
 800aac4:	4630      	mov	r0, r6
 800aac6:	f000 f993 	bl	800adf0 <_sbrk_r>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	d123      	bne.n	800ab16 <_malloc_r+0x92>
 800aace:	230c      	movs	r3, #12
 800aad0:	6033      	str	r3, [r6, #0]
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 f9fe 	bl	800aed4 <__malloc_unlock>
 800aad8:	e7e3      	b.n	800aaa2 <_malloc_r+0x1e>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	1b5b      	subs	r3, r3, r5
 800aade:	d417      	bmi.n	800ab10 <_malloc_r+0x8c>
 800aae0:	2b0b      	cmp	r3, #11
 800aae2:	d903      	bls.n	800aaec <_malloc_r+0x68>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	441c      	add	r4, r3
 800aae8:	6025      	str	r5, [r4, #0]
 800aaea:	e004      	b.n	800aaf6 <_malloc_r+0x72>
 800aaec:	6863      	ldr	r3, [r4, #4]
 800aaee:	42a2      	cmp	r2, r4
 800aaf0:	bf0c      	ite	eq
 800aaf2:	600b      	streq	r3, [r1, #0]
 800aaf4:	6053      	strne	r3, [r2, #4]
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f000 f9ec 	bl	800aed4 <__malloc_unlock>
 800aafc:	f104 000b 	add.w	r0, r4, #11
 800ab00:	1d23      	adds	r3, r4, #4
 800ab02:	f020 0007 	bic.w	r0, r0, #7
 800ab06:	1ac2      	subs	r2, r0, r3
 800ab08:	d0cc      	beq.n	800aaa4 <_malloc_r+0x20>
 800ab0a:	1a1b      	subs	r3, r3, r0
 800ab0c:	50a3      	str	r3, [r4, r2]
 800ab0e:	e7c9      	b.n	800aaa4 <_malloc_r+0x20>
 800ab10:	4622      	mov	r2, r4
 800ab12:	6864      	ldr	r4, [r4, #4]
 800ab14:	e7cc      	b.n	800aab0 <_malloc_r+0x2c>
 800ab16:	1cc4      	adds	r4, r0, #3
 800ab18:	f024 0403 	bic.w	r4, r4, #3
 800ab1c:	42a0      	cmp	r0, r4
 800ab1e:	d0e3      	beq.n	800aae8 <_malloc_r+0x64>
 800ab20:	1a21      	subs	r1, r4, r0
 800ab22:	4630      	mov	r0, r6
 800ab24:	f000 f964 	bl	800adf0 <_sbrk_r>
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d1dd      	bne.n	800aae8 <_malloc_r+0x64>
 800ab2c:	e7cf      	b.n	800aace <_malloc_r+0x4a>
 800ab2e:	bf00      	nop
 800ab30:	20000304 	.word	0x20000304
 800ab34:	20000308 	.word	0x20000308

0800ab38 <__ssputs_r>:
 800ab38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3c:	688e      	ldr	r6, [r1, #8]
 800ab3e:	429e      	cmp	r6, r3
 800ab40:	4682      	mov	sl, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	4690      	mov	r8, r2
 800ab46:	461f      	mov	r7, r3
 800ab48:	d838      	bhi.n	800abbc <__ssputs_r+0x84>
 800ab4a:	898a      	ldrh	r2, [r1, #12]
 800ab4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab50:	d032      	beq.n	800abb8 <__ssputs_r+0x80>
 800ab52:	6825      	ldr	r5, [r4, #0]
 800ab54:	6909      	ldr	r1, [r1, #16]
 800ab56:	eba5 0901 	sub.w	r9, r5, r1
 800ab5a:	6965      	ldr	r5, [r4, #20]
 800ab5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab64:	3301      	adds	r3, #1
 800ab66:	444b      	add	r3, r9
 800ab68:	106d      	asrs	r5, r5, #1
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	bf38      	it	cc
 800ab6e:	461d      	movcc	r5, r3
 800ab70:	0553      	lsls	r3, r2, #21
 800ab72:	d531      	bpl.n	800abd8 <__ssputs_r+0xa0>
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7ff ff85 	bl	800aa84 <_malloc_r>
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	b950      	cbnz	r0, 800ab94 <__ssputs_r+0x5c>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	f8ca 3000 	str.w	r3, [sl]
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab94:	6921      	ldr	r1, [r4, #16]
 800ab96:	464a      	mov	r2, r9
 800ab98:	f7ff fb88 	bl	800a2ac <memcpy>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba6:	81a3      	strh	r3, [r4, #12]
 800aba8:	6126      	str	r6, [r4, #16]
 800abaa:	6165      	str	r5, [r4, #20]
 800abac:	444e      	add	r6, r9
 800abae:	eba5 0509 	sub.w	r5, r5, r9
 800abb2:	6026      	str	r6, [r4, #0]
 800abb4:	60a5      	str	r5, [r4, #8]
 800abb6:	463e      	mov	r6, r7
 800abb8:	42be      	cmp	r6, r7
 800abba:	d900      	bls.n	800abbe <__ssputs_r+0x86>
 800abbc:	463e      	mov	r6, r7
 800abbe:	4632      	mov	r2, r6
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	4641      	mov	r1, r8
 800abc4:	f000 f966 	bl	800ae94 <memmove>
 800abc8:	68a3      	ldr	r3, [r4, #8]
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	1b9b      	subs	r3, r3, r6
 800abce:	4432      	add	r2, r6
 800abd0:	60a3      	str	r3, [r4, #8]
 800abd2:	6022      	str	r2, [r4, #0]
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7db      	b.n	800ab90 <__ssputs_r+0x58>
 800abd8:	462a      	mov	r2, r5
 800abda:	f000 f981 	bl	800aee0 <_realloc_r>
 800abde:	4606      	mov	r6, r0
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d1e1      	bne.n	800aba8 <__ssputs_r+0x70>
 800abe4:	6921      	ldr	r1, [r4, #16]
 800abe6:	4650      	mov	r0, sl
 800abe8:	f7ff fefc 	bl	800a9e4 <_free_r>
 800abec:	e7c7      	b.n	800ab7e <__ssputs_r+0x46>
	...

0800abf0 <_svfiprintf_r>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4698      	mov	r8, r3
 800abf6:	898b      	ldrh	r3, [r1, #12]
 800abf8:	061b      	lsls	r3, r3, #24
 800abfa:	b09d      	sub	sp, #116	; 0x74
 800abfc:	4607      	mov	r7, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	4614      	mov	r4, r2
 800ac02:	d50e      	bpl.n	800ac22 <_svfiprintf_r+0x32>
 800ac04:	690b      	ldr	r3, [r1, #16]
 800ac06:	b963      	cbnz	r3, 800ac22 <_svfiprintf_r+0x32>
 800ac08:	2140      	movs	r1, #64	; 0x40
 800ac0a:	f7ff ff3b 	bl	800aa84 <_malloc_r>
 800ac0e:	6028      	str	r0, [r5, #0]
 800ac10:	6128      	str	r0, [r5, #16]
 800ac12:	b920      	cbnz	r0, 800ac1e <_svfiprintf_r+0x2e>
 800ac14:	230c      	movs	r3, #12
 800ac16:	603b      	str	r3, [r7, #0]
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	e0d1      	b.n	800adc2 <_svfiprintf_r+0x1d2>
 800ac1e:	2340      	movs	r3, #64	; 0x40
 800ac20:	616b      	str	r3, [r5, #20]
 800ac22:	2300      	movs	r3, #0
 800ac24:	9309      	str	r3, [sp, #36]	; 0x24
 800ac26:	2320      	movs	r3, #32
 800ac28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac30:	2330      	movs	r3, #48	; 0x30
 800ac32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800addc <_svfiprintf_r+0x1ec>
 800ac36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac3a:	f04f 0901 	mov.w	r9, #1
 800ac3e:	4623      	mov	r3, r4
 800ac40:	469a      	mov	sl, r3
 800ac42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac46:	b10a      	cbz	r2, 800ac4c <_svfiprintf_r+0x5c>
 800ac48:	2a25      	cmp	r2, #37	; 0x25
 800ac4a:	d1f9      	bne.n	800ac40 <_svfiprintf_r+0x50>
 800ac4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac50:	d00b      	beq.n	800ac6a <_svfiprintf_r+0x7a>
 800ac52:	465b      	mov	r3, fp
 800ac54:	4622      	mov	r2, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7ff ff6d 	bl	800ab38 <__ssputs_r>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f000 80aa 	beq.w	800adb8 <_svfiprintf_r+0x1c8>
 800ac64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac66:	445a      	add	r2, fp
 800ac68:	9209      	str	r2, [sp, #36]	; 0x24
 800ac6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f000 80a2 	beq.w	800adb8 <_svfiprintf_r+0x1c8>
 800ac74:	2300      	movs	r3, #0
 800ac76:	f04f 32ff 	mov.w	r2, #4294967295
 800ac7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac7e:	f10a 0a01 	add.w	sl, sl, #1
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	9307      	str	r3, [sp, #28]
 800ac86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac8a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac8c:	4654      	mov	r4, sl
 800ac8e:	2205      	movs	r2, #5
 800ac90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac94:	4851      	ldr	r0, [pc, #324]	; (800addc <_svfiprintf_r+0x1ec>)
 800ac96:	f7f5 fadb 	bl	8000250 <memchr>
 800ac9a:	9a04      	ldr	r2, [sp, #16]
 800ac9c:	b9d8      	cbnz	r0, 800acd6 <_svfiprintf_r+0xe6>
 800ac9e:	06d0      	lsls	r0, r2, #27
 800aca0:	bf44      	itt	mi
 800aca2:	2320      	movmi	r3, #32
 800aca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca8:	0711      	lsls	r1, r2, #28
 800acaa:	bf44      	itt	mi
 800acac:	232b      	movmi	r3, #43	; 0x2b
 800acae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acb2:	f89a 3000 	ldrb.w	r3, [sl]
 800acb6:	2b2a      	cmp	r3, #42	; 0x2a
 800acb8:	d015      	beq.n	800ace6 <_svfiprintf_r+0xf6>
 800acba:	9a07      	ldr	r2, [sp, #28]
 800acbc:	4654      	mov	r4, sl
 800acbe:	2000      	movs	r0, #0
 800acc0:	f04f 0c0a 	mov.w	ip, #10
 800acc4:	4621      	mov	r1, r4
 800acc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acca:	3b30      	subs	r3, #48	; 0x30
 800accc:	2b09      	cmp	r3, #9
 800acce:	d94e      	bls.n	800ad6e <_svfiprintf_r+0x17e>
 800acd0:	b1b0      	cbz	r0, 800ad00 <_svfiprintf_r+0x110>
 800acd2:	9207      	str	r2, [sp, #28]
 800acd4:	e014      	b.n	800ad00 <_svfiprintf_r+0x110>
 800acd6:	eba0 0308 	sub.w	r3, r0, r8
 800acda:	fa09 f303 	lsl.w	r3, r9, r3
 800acde:	4313      	orrs	r3, r2
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	46a2      	mov	sl, r4
 800ace4:	e7d2      	b.n	800ac8c <_svfiprintf_r+0x9c>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	1d19      	adds	r1, r3, #4
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	9103      	str	r1, [sp, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bfbb      	ittet	lt
 800acf2:	425b      	neglt	r3, r3
 800acf4:	f042 0202 	orrlt.w	r2, r2, #2
 800acf8:	9307      	strge	r3, [sp, #28]
 800acfa:	9307      	strlt	r3, [sp, #28]
 800acfc:	bfb8      	it	lt
 800acfe:	9204      	strlt	r2, [sp, #16]
 800ad00:	7823      	ldrb	r3, [r4, #0]
 800ad02:	2b2e      	cmp	r3, #46	; 0x2e
 800ad04:	d10c      	bne.n	800ad20 <_svfiprintf_r+0x130>
 800ad06:	7863      	ldrb	r3, [r4, #1]
 800ad08:	2b2a      	cmp	r3, #42	; 0x2a
 800ad0a:	d135      	bne.n	800ad78 <_svfiprintf_r+0x188>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	1d1a      	adds	r2, r3, #4
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	9203      	str	r2, [sp, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfb8      	it	lt
 800ad18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad1c:	3402      	adds	r4, #2
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800adec <_svfiprintf_r+0x1fc>
 800ad24:	7821      	ldrb	r1, [r4, #0]
 800ad26:	2203      	movs	r2, #3
 800ad28:	4650      	mov	r0, sl
 800ad2a:	f7f5 fa91 	bl	8000250 <memchr>
 800ad2e:	b140      	cbz	r0, 800ad42 <_svfiprintf_r+0x152>
 800ad30:	2340      	movs	r3, #64	; 0x40
 800ad32:	eba0 000a 	sub.w	r0, r0, sl
 800ad36:	fa03 f000 	lsl.w	r0, r3, r0
 800ad3a:	9b04      	ldr	r3, [sp, #16]
 800ad3c:	4303      	orrs	r3, r0
 800ad3e:	3401      	adds	r4, #1
 800ad40:	9304      	str	r3, [sp, #16]
 800ad42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad46:	4826      	ldr	r0, [pc, #152]	; (800ade0 <_svfiprintf_r+0x1f0>)
 800ad48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad4c:	2206      	movs	r2, #6
 800ad4e:	f7f5 fa7f 	bl	8000250 <memchr>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d038      	beq.n	800adc8 <_svfiprintf_r+0x1d8>
 800ad56:	4b23      	ldr	r3, [pc, #140]	; (800ade4 <_svfiprintf_r+0x1f4>)
 800ad58:	bb1b      	cbnz	r3, 800ada2 <_svfiprintf_r+0x1b2>
 800ad5a:	9b03      	ldr	r3, [sp, #12]
 800ad5c:	3307      	adds	r3, #7
 800ad5e:	f023 0307 	bic.w	r3, r3, #7
 800ad62:	3308      	adds	r3, #8
 800ad64:	9303      	str	r3, [sp, #12]
 800ad66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad68:	4433      	add	r3, r6
 800ad6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6c:	e767      	b.n	800ac3e <_svfiprintf_r+0x4e>
 800ad6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad72:	460c      	mov	r4, r1
 800ad74:	2001      	movs	r0, #1
 800ad76:	e7a5      	b.n	800acc4 <_svfiprintf_r+0xd4>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	3401      	adds	r4, #1
 800ad7c:	9305      	str	r3, [sp, #20]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	f04f 0c0a 	mov.w	ip, #10
 800ad84:	4620      	mov	r0, r4
 800ad86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad8a:	3a30      	subs	r2, #48	; 0x30
 800ad8c:	2a09      	cmp	r2, #9
 800ad8e:	d903      	bls.n	800ad98 <_svfiprintf_r+0x1a8>
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d0c5      	beq.n	800ad20 <_svfiprintf_r+0x130>
 800ad94:	9105      	str	r1, [sp, #20]
 800ad96:	e7c3      	b.n	800ad20 <_svfiprintf_r+0x130>
 800ad98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e7f0      	b.n	800ad84 <_svfiprintf_r+0x194>
 800ada2:	ab03      	add	r3, sp, #12
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	462a      	mov	r2, r5
 800ada8:	4b0f      	ldr	r3, [pc, #60]	; (800ade8 <_svfiprintf_r+0x1f8>)
 800adaa:	a904      	add	r1, sp, #16
 800adac:	4638      	mov	r0, r7
 800adae:	f7fe f88f 	bl	8008ed0 <_printf_float>
 800adb2:	1c42      	adds	r2, r0, #1
 800adb4:	4606      	mov	r6, r0
 800adb6:	d1d6      	bne.n	800ad66 <_svfiprintf_r+0x176>
 800adb8:	89ab      	ldrh	r3, [r5, #12]
 800adba:	065b      	lsls	r3, r3, #25
 800adbc:	f53f af2c 	bmi.w	800ac18 <_svfiprintf_r+0x28>
 800adc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc2:	b01d      	add	sp, #116	; 0x74
 800adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc8:	ab03      	add	r3, sp, #12
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	462a      	mov	r2, r5
 800adce:	4b06      	ldr	r3, [pc, #24]	; (800ade8 <_svfiprintf_r+0x1f8>)
 800add0:	a904      	add	r1, sp, #16
 800add2:	4638      	mov	r0, r7
 800add4:	f7fe fb08 	bl	80093e8 <_printf_i>
 800add8:	e7eb      	b.n	800adb2 <_svfiprintf_r+0x1c2>
 800adda:	bf00      	nop
 800addc:	0800bf04 	.word	0x0800bf04
 800ade0:	0800bf0e 	.word	0x0800bf0e
 800ade4:	08008ed1 	.word	0x08008ed1
 800ade8:	0800ab39 	.word	0x0800ab39
 800adec:	0800bf0a 	.word	0x0800bf0a

0800adf0 <_sbrk_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d06      	ldr	r5, [pc, #24]	; (800ae0c <_sbrk_r+0x1c>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	f7f8 f984 	bl	8003108 <_sbrk>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_sbrk_r+0x1a>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_sbrk_r+0x1a>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20000664 	.word	0x20000664

0800ae10 <__assert_func>:
 800ae10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae12:	4614      	mov	r4, r2
 800ae14:	461a      	mov	r2, r3
 800ae16:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <__assert_func+0x2c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	68d8      	ldr	r0, [r3, #12]
 800ae1e:	b14c      	cbz	r4, 800ae34 <__assert_func+0x24>
 800ae20:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <__assert_func+0x30>)
 800ae22:	9100      	str	r1, [sp, #0]
 800ae24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae28:	4906      	ldr	r1, [pc, #24]	; (800ae44 <__assert_func+0x34>)
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	f000 f80e 	bl	800ae4c <fiprintf>
 800ae30:	f000 faa4 	bl	800b37c <abort>
 800ae34:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <__assert_func+0x38>)
 800ae36:	461c      	mov	r4, r3
 800ae38:	e7f3      	b.n	800ae22 <__assert_func+0x12>
 800ae3a:	bf00      	nop
 800ae3c:	200000a8 	.word	0x200000a8
 800ae40:	0800bf15 	.word	0x0800bf15
 800ae44:	0800bf22 	.word	0x0800bf22
 800ae48:	0800bf50 	.word	0x0800bf50

0800ae4c <fiprintf>:
 800ae4c:	b40e      	push	{r1, r2, r3}
 800ae4e:	b503      	push	{r0, r1, lr}
 800ae50:	4601      	mov	r1, r0
 800ae52:	ab03      	add	r3, sp, #12
 800ae54:	4805      	ldr	r0, [pc, #20]	; (800ae6c <fiprintf+0x20>)
 800ae56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5a:	6800      	ldr	r0, [r0, #0]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f000 f88f 	bl	800af80 <_vfiprintf_r>
 800ae62:	b002      	add	sp, #8
 800ae64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae68:	b003      	add	sp, #12
 800ae6a:	4770      	bx	lr
 800ae6c:	200000a8 	.word	0x200000a8

0800ae70 <__ascii_mbtowc>:
 800ae70:	b082      	sub	sp, #8
 800ae72:	b901      	cbnz	r1, 800ae76 <__ascii_mbtowc+0x6>
 800ae74:	a901      	add	r1, sp, #4
 800ae76:	b142      	cbz	r2, 800ae8a <__ascii_mbtowc+0x1a>
 800ae78:	b14b      	cbz	r3, 800ae8e <__ascii_mbtowc+0x1e>
 800ae7a:	7813      	ldrb	r3, [r2, #0]
 800ae7c:	600b      	str	r3, [r1, #0]
 800ae7e:	7812      	ldrb	r2, [r2, #0]
 800ae80:	1e10      	subs	r0, r2, #0
 800ae82:	bf18      	it	ne
 800ae84:	2001      	movne	r0, #1
 800ae86:	b002      	add	sp, #8
 800ae88:	4770      	bx	lr
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	e7fb      	b.n	800ae86 <__ascii_mbtowc+0x16>
 800ae8e:	f06f 0001 	mvn.w	r0, #1
 800ae92:	e7f8      	b.n	800ae86 <__ascii_mbtowc+0x16>

0800ae94 <memmove>:
 800ae94:	4288      	cmp	r0, r1
 800ae96:	b510      	push	{r4, lr}
 800ae98:	eb01 0402 	add.w	r4, r1, r2
 800ae9c:	d902      	bls.n	800aea4 <memmove+0x10>
 800ae9e:	4284      	cmp	r4, r0
 800aea0:	4623      	mov	r3, r4
 800aea2:	d807      	bhi.n	800aeb4 <memmove+0x20>
 800aea4:	1e43      	subs	r3, r0, #1
 800aea6:	42a1      	cmp	r1, r4
 800aea8:	d008      	beq.n	800aebc <memmove+0x28>
 800aeaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeb2:	e7f8      	b.n	800aea6 <memmove+0x12>
 800aeb4:	4402      	add	r2, r0
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	428a      	cmp	r2, r1
 800aeba:	d100      	bne.n	800aebe <memmove+0x2a>
 800aebc:	bd10      	pop	{r4, pc}
 800aebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aec6:	e7f7      	b.n	800aeb8 <memmove+0x24>

0800aec8 <__malloc_lock>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__malloc_lock+0x8>)
 800aeca:	f000 bc17 	b.w	800b6fc <__retarget_lock_acquire_recursive>
 800aece:	bf00      	nop
 800aed0:	2000066c 	.word	0x2000066c

0800aed4 <__malloc_unlock>:
 800aed4:	4801      	ldr	r0, [pc, #4]	; (800aedc <__malloc_unlock+0x8>)
 800aed6:	f000 bc12 	b.w	800b6fe <__retarget_lock_release_recursive>
 800aeda:	bf00      	nop
 800aedc:	2000066c 	.word	0x2000066c

0800aee0 <_realloc_r>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	4607      	mov	r7, r0
 800aee4:	4614      	mov	r4, r2
 800aee6:	460e      	mov	r6, r1
 800aee8:	b921      	cbnz	r1, 800aef4 <_realloc_r+0x14>
 800aeea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aeee:	4611      	mov	r1, r2
 800aef0:	f7ff bdc8 	b.w	800aa84 <_malloc_r>
 800aef4:	b922      	cbnz	r2, 800af00 <_realloc_r+0x20>
 800aef6:	f7ff fd75 	bl	800a9e4 <_free_r>
 800aefa:	4625      	mov	r5, r4
 800aefc:	4628      	mov	r0, r5
 800aefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af00:	f000 fc62 	bl	800b7c8 <_malloc_usable_size_r>
 800af04:	42a0      	cmp	r0, r4
 800af06:	d20f      	bcs.n	800af28 <_realloc_r+0x48>
 800af08:	4621      	mov	r1, r4
 800af0a:	4638      	mov	r0, r7
 800af0c:	f7ff fdba 	bl	800aa84 <_malloc_r>
 800af10:	4605      	mov	r5, r0
 800af12:	2800      	cmp	r0, #0
 800af14:	d0f2      	beq.n	800aefc <_realloc_r+0x1c>
 800af16:	4631      	mov	r1, r6
 800af18:	4622      	mov	r2, r4
 800af1a:	f7ff f9c7 	bl	800a2ac <memcpy>
 800af1e:	4631      	mov	r1, r6
 800af20:	4638      	mov	r0, r7
 800af22:	f7ff fd5f 	bl	800a9e4 <_free_r>
 800af26:	e7e9      	b.n	800aefc <_realloc_r+0x1c>
 800af28:	4635      	mov	r5, r6
 800af2a:	e7e7      	b.n	800aefc <_realloc_r+0x1c>

0800af2c <__sfputc_r>:
 800af2c:	6893      	ldr	r3, [r2, #8]
 800af2e:	3b01      	subs	r3, #1
 800af30:	2b00      	cmp	r3, #0
 800af32:	b410      	push	{r4}
 800af34:	6093      	str	r3, [r2, #8]
 800af36:	da08      	bge.n	800af4a <__sfputc_r+0x1e>
 800af38:	6994      	ldr	r4, [r2, #24]
 800af3a:	42a3      	cmp	r3, r4
 800af3c:	db01      	blt.n	800af42 <__sfputc_r+0x16>
 800af3e:	290a      	cmp	r1, #10
 800af40:	d103      	bne.n	800af4a <__sfputc_r+0x1e>
 800af42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af46:	f000 b94b 	b.w	800b1e0 <__swbuf_r>
 800af4a:	6813      	ldr	r3, [r2, #0]
 800af4c:	1c58      	adds	r0, r3, #1
 800af4e:	6010      	str	r0, [r2, #0]
 800af50:	7019      	strb	r1, [r3, #0]
 800af52:	4608      	mov	r0, r1
 800af54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <__sfputs_r>:
 800af5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5c:	4606      	mov	r6, r0
 800af5e:	460f      	mov	r7, r1
 800af60:	4614      	mov	r4, r2
 800af62:	18d5      	adds	r5, r2, r3
 800af64:	42ac      	cmp	r4, r5
 800af66:	d101      	bne.n	800af6c <__sfputs_r+0x12>
 800af68:	2000      	movs	r0, #0
 800af6a:	e007      	b.n	800af7c <__sfputs_r+0x22>
 800af6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af70:	463a      	mov	r2, r7
 800af72:	4630      	mov	r0, r6
 800af74:	f7ff ffda 	bl	800af2c <__sfputc_r>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d1f3      	bne.n	800af64 <__sfputs_r+0xa>
 800af7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af80 <_vfiprintf_r>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	460d      	mov	r5, r1
 800af86:	b09d      	sub	sp, #116	; 0x74
 800af88:	4614      	mov	r4, r2
 800af8a:	4698      	mov	r8, r3
 800af8c:	4606      	mov	r6, r0
 800af8e:	b118      	cbz	r0, 800af98 <_vfiprintf_r+0x18>
 800af90:	6983      	ldr	r3, [r0, #24]
 800af92:	b90b      	cbnz	r3, 800af98 <_vfiprintf_r+0x18>
 800af94:	f000 fb14 	bl	800b5c0 <__sinit>
 800af98:	4b89      	ldr	r3, [pc, #548]	; (800b1c0 <_vfiprintf_r+0x240>)
 800af9a:	429d      	cmp	r5, r3
 800af9c:	d11b      	bne.n	800afd6 <_vfiprintf_r+0x56>
 800af9e:	6875      	ldr	r5, [r6, #4]
 800afa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa2:	07d9      	lsls	r1, r3, #31
 800afa4:	d405      	bmi.n	800afb2 <_vfiprintf_r+0x32>
 800afa6:	89ab      	ldrh	r3, [r5, #12]
 800afa8:	059a      	lsls	r2, r3, #22
 800afaa:	d402      	bmi.n	800afb2 <_vfiprintf_r+0x32>
 800afac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afae:	f000 fba5 	bl	800b6fc <__retarget_lock_acquire_recursive>
 800afb2:	89ab      	ldrh	r3, [r5, #12]
 800afb4:	071b      	lsls	r3, r3, #28
 800afb6:	d501      	bpl.n	800afbc <_vfiprintf_r+0x3c>
 800afb8:	692b      	ldr	r3, [r5, #16]
 800afba:	b9eb      	cbnz	r3, 800aff8 <_vfiprintf_r+0x78>
 800afbc:	4629      	mov	r1, r5
 800afbe:	4630      	mov	r0, r6
 800afc0:	f000 f96e 	bl	800b2a0 <__swsetup_r>
 800afc4:	b1c0      	cbz	r0, 800aff8 <_vfiprintf_r+0x78>
 800afc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc8:	07dc      	lsls	r4, r3, #31
 800afca:	d50e      	bpl.n	800afea <_vfiprintf_r+0x6a>
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	b01d      	add	sp, #116	; 0x74
 800afd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd6:	4b7b      	ldr	r3, [pc, #492]	; (800b1c4 <_vfiprintf_r+0x244>)
 800afd8:	429d      	cmp	r5, r3
 800afda:	d101      	bne.n	800afe0 <_vfiprintf_r+0x60>
 800afdc:	68b5      	ldr	r5, [r6, #8]
 800afde:	e7df      	b.n	800afa0 <_vfiprintf_r+0x20>
 800afe0:	4b79      	ldr	r3, [pc, #484]	; (800b1c8 <_vfiprintf_r+0x248>)
 800afe2:	429d      	cmp	r5, r3
 800afe4:	bf08      	it	eq
 800afe6:	68f5      	ldreq	r5, [r6, #12]
 800afe8:	e7da      	b.n	800afa0 <_vfiprintf_r+0x20>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	0598      	lsls	r0, r3, #22
 800afee:	d4ed      	bmi.n	800afcc <_vfiprintf_r+0x4c>
 800aff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff2:	f000 fb84 	bl	800b6fe <__retarget_lock_release_recursive>
 800aff6:	e7e9      	b.n	800afcc <_vfiprintf_r+0x4c>
 800aff8:	2300      	movs	r3, #0
 800affa:	9309      	str	r3, [sp, #36]	; 0x24
 800affc:	2320      	movs	r3, #32
 800affe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b002:	f8cd 800c 	str.w	r8, [sp, #12]
 800b006:	2330      	movs	r3, #48	; 0x30
 800b008:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1cc <_vfiprintf_r+0x24c>
 800b00c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b010:	f04f 0901 	mov.w	r9, #1
 800b014:	4623      	mov	r3, r4
 800b016:	469a      	mov	sl, r3
 800b018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b01c:	b10a      	cbz	r2, 800b022 <_vfiprintf_r+0xa2>
 800b01e:	2a25      	cmp	r2, #37	; 0x25
 800b020:	d1f9      	bne.n	800b016 <_vfiprintf_r+0x96>
 800b022:	ebba 0b04 	subs.w	fp, sl, r4
 800b026:	d00b      	beq.n	800b040 <_vfiprintf_r+0xc0>
 800b028:	465b      	mov	r3, fp
 800b02a:	4622      	mov	r2, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ff93 	bl	800af5a <__sfputs_r>
 800b034:	3001      	adds	r0, #1
 800b036:	f000 80aa 	beq.w	800b18e <_vfiprintf_r+0x20e>
 800b03a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b03c:	445a      	add	r2, fp
 800b03e:	9209      	str	r2, [sp, #36]	; 0x24
 800b040:	f89a 3000 	ldrb.w	r3, [sl]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 80a2 	beq.w	800b18e <_vfiprintf_r+0x20e>
 800b04a:	2300      	movs	r3, #0
 800b04c:	f04f 32ff 	mov.w	r2, #4294967295
 800b050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b054:	f10a 0a01 	add.w	sl, sl, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	9307      	str	r3, [sp, #28]
 800b05c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b060:	931a      	str	r3, [sp, #104]	; 0x68
 800b062:	4654      	mov	r4, sl
 800b064:	2205      	movs	r2, #5
 800b066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06a:	4858      	ldr	r0, [pc, #352]	; (800b1cc <_vfiprintf_r+0x24c>)
 800b06c:	f7f5 f8f0 	bl	8000250 <memchr>
 800b070:	9a04      	ldr	r2, [sp, #16]
 800b072:	b9d8      	cbnz	r0, 800b0ac <_vfiprintf_r+0x12c>
 800b074:	06d1      	lsls	r1, r2, #27
 800b076:	bf44      	itt	mi
 800b078:	2320      	movmi	r3, #32
 800b07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b07e:	0713      	lsls	r3, r2, #28
 800b080:	bf44      	itt	mi
 800b082:	232b      	movmi	r3, #43	; 0x2b
 800b084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b088:	f89a 3000 	ldrb.w	r3, [sl]
 800b08c:	2b2a      	cmp	r3, #42	; 0x2a
 800b08e:	d015      	beq.n	800b0bc <_vfiprintf_r+0x13c>
 800b090:	9a07      	ldr	r2, [sp, #28]
 800b092:	4654      	mov	r4, sl
 800b094:	2000      	movs	r0, #0
 800b096:	f04f 0c0a 	mov.w	ip, #10
 800b09a:	4621      	mov	r1, r4
 800b09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a0:	3b30      	subs	r3, #48	; 0x30
 800b0a2:	2b09      	cmp	r3, #9
 800b0a4:	d94e      	bls.n	800b144 <_vfiprintf_r+0x1c4>
 800b0a6:	b1b0      	cbz	r0, 800b0d6 <_vfiprintf_r+0x156>
 800b0a8:	9207      	str	r2, [sp, #28]
 800b0aa:	e014      	b.n	800b0d6 <_vfiprintf_r+0x156>
 800b0ac:	eba0 0308 	sub.w	r3, r0, r8
 800b0b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	46a2      	mov	sl, r4
 800b0ba:	e7d2      	b.n	800b062 <_vfiprintf_r+0xe2>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	1d19      	adds	r1, r3, #4
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	9103      	str	r1, [sp, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	bfbb      	ittet	lt
 800b0c8:	425b      	neglt	r3, r3
 800b0ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ce:	9307      	strge	r3, [sp, #28]
 800b0d0:	9307      	strlt	r3, [sp, #28]
 800b0d2:	bfb8      	it	lt
 800b0d4:	9204      	strlt	r2, [sp, #16]
 800b0d6:	7823      	ldrb	r3, [r4, #0]
 800b0d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0da:	d10c      	bne.n	800b0f6 <_vfiprintf_r+0x176>
 800b0dc:	7863      	ldrb	r3, [r4, #1]
 800b0de:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e0:	d135      	bne.n	800b14e <_vfiprintf_r+0x1ce>
 800b0e2:	9b03      	ldr	r3, [sp, #12]
 800b0e4:	1d1a      	adds	r2, r3, #4
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	9203      	str	r2, [sp, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	bfb8      	it	lt
 800b0ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0f2:	3402      	adds	r4, #2
 800b0f4:	9305      	str	r3, [sp, #20]
 800b0f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1dc <_vfiprintf_r+0x25c>
 800b0fa:	7821      	ldrb	r1, [r4, #0]
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	4650      	mov	r0, sl
 800b100:	f7f5 f8a6 	bl	8000250 <memchr>
 800b104:	b140      	cbz	r0, 800b118 <_vfiprintf_r+0x198>
 800b106:	2340      	movs	r3, #64	; 0x40
 800b108:	eba0 000a 	sub.w	r0, r0, sl
 800b10c:	fa03 f000 	lsl.w	r0, r3, r0
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	4303      	orrs	r3, r0
 800b114:	3401      	adds	r4, #1
 800b116:	9304      	str	r3, [sp, #16]
 800b118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11c:	482c      	ldr	r0, [pc, #176]	; (800b1d0 <_vfiprintf_r+0x250>)
 800b11e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b122:	2206      	movs	r2, #6
 800b124:	f7f5 f894 	bl	8000250 <memchr>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d03f      	beq.n	800b1ac <_vfiprintf_r+0x22c>
 800b12c:	4b29      	ldr	r3, [pc, #164]	; (800b1d4 <_vfiprintf_r+0x254>)
 800b12e:	bb1b      	cbnz	r3, 800b178 <_vfiprintf_r+0x1f8>
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	3307      	adds	r3, #7
 800b134:	f023 0307 	bic.w	r3, r3, #7
 800b138:	3308      	adds	r3, #8
 800b13a:	9303      	str	r3, [sp, #12]
 800b13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13e:	443b      	add	r3, r7
 800b140:	9309      	str	r3, [sp, #36]	; 0x24
 800b142:	e767      	b.n	800b014 <_vfiprintf_r+0x94>
 800b144:	fb0c 3202 	mla	r2, ip, r2, r3
 800b148:	460c      	mov	r4, r1
 800b14a:	2001      	movs	r0, #1
 800b14c:	e7a5      	b.n	800b09a <_vfiprintf_r+0x11a>
 800b14e:	2300      	movs	r3, #0
 800b150:	3401      	adds	r4, #1
 800b152:	9305      	str	r3, [sp, #20]
 800b154:	4619      	mov	r1, r3
 800b156:	f04f 0c0a 	mov.w	ip, #10
 800b15a:	4620      	mov	r0, r4
 800b15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b160:	3a30      	subs	r2, #48	; 0x30
 800b162:	2a09      	cmp	r2, #9
 800b164:	d903      	bls.n	800b16e <_vfiprintf_r+0x1ee>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0c5      	beq.n	800b0f6 <_vfiprintf_r+0x176>
 800b16a:	9105      	str	r1, [sp, #20]
 800b16c:	e7c3      	b.n	800b0f6 <_vfiprintf_r+0x176>
 800b16e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b172:	4604      	mov	r4, r0
 800b174:	2301      	movs	r3, #1
 800b176:	e7f0      	b.n	800b15a <_vfiprintf_r+0x1da>
 800b178:	ab03      	add	r3, sp, #12
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	462a      	mov	r2, r5
 800b17e:	4b16      	ldr	r3, [pc, #88]	; (800b1d8 <_vfiprintf_r+0x258>)
 800b180:	a904      	add	r1, sp, #16
 800b182:	4630      	mov	r0, r6
 800b184:	f7fd fea4 	bl	8008ed0 <_printf_float>
 800b188:	4607      	mov	r7, r0
 800b18a:	1c78      	adds	r0, r7, #1
 800b18c:	d1d6      	bne.n	800b13c <_vfiprintf_r+0x1bc>
 800b18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b190:	07d9      	lsls	r1, r3, #31
 800b192:	d405      	bmi.n	800b1a0 <_vfiprintf_r+0x220>
 800b194:	89ab      	ldrh	r3, [r5, #12]
 800b196:	059a      	lsls	r2, r3, #22
 800b198:	d402      	bmi.n	800b1a0 <_vfiprintf_r+0x220>
 800b19a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b19c:	f000 faaf 	bl	800b6fe <__retarget_lock_release_recursive>
 800b1a0:	89ab      	ldrh	r3, [r5, #12]
 800b1a2:	065b      	lsls	r3, r3, #25
 800b1a4:	f53f af12 	bmi.w	800afcc <_vfiprintf_r+0x4c>
 800b1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1aa:	e711      	b.n	800afd0 <_vfiprintf_r+0x50>
 800b1ac:	ab03      	add	r3, sp, #12
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	462a      	mov	r2, r5
 800b1b2:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <_vfiprintf_r+0x258>)
 800b1b4:	a904      	add	r1, sp, #16
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7fe f916 	bl	80093e8 <_printf_i>
 800b1bc:	e7e4      	b.n	800b188 <_vfiprintf_r+0x208>
 800b1be:	bf00      	nop
 800b1c0:	0800c07c 	.word	0x0800c07c
 800b1c4:	0800c09c 	.word	0x0800c09c
 800b1c8:	0800c05c 	.word	0x0800c05c
 800b1cc:	0800bf04 	.word	0x0800bf04
 800b1d0:	0800bf0e 	.word	0x0800bf0e
 800b1d4:	08008ed1 	.word	0x08008ed1
 800b1d8:	0800af5b 	.word	0x0800af5b
 800b1dc:	0800bf0a 	.word	0x0800bf0a

0800b1e0 <__swbuf_r>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	460e      	mov	r6, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b118      	cbz	r0, 800b1f2 <__swbuf_r+0x12>
 800b1ea:	6983      	ldr	r3, [r0, #24]
 800b1ec:	b90b      	cbnz	r3, 800b1f2 <__swbuf_r+0x12>
 800b1ee:	f000 f9e7 	bl	800b5c0 <__sinit>
 800b1f2:	4b21      	ldr	r3, [pc, #132]	; (800b278 <__swbuf_r+0x98>)
 800b1f4:	429c      	cmp	r4, r3
 800b1f6:	d12b      	bne.n	800b250 <__swbuf_r+0x70>
 800b1f8:	686c      	ldr	r4, [r5, #4]
 800b1fa:	69a3      	ldr	r3, [r4, #24]
 800b1fc:	60a3      	str	r3, [r4, #8]
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	071a      	lsls	r2, r3, #28
 800b202:	d52f      	bpl.n	800b264 <__swbuf_r+0x84>
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	b36b      	cbz	r3, 800b264 <__swbuf_r+0x84>
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	6820      	ldr	r0, [r4, #0]
 800b20c:	1ac0      	subs	r0, r0, r3
 800b20e:	6963      	ldr	r3, [r4, #20]
 800b210:	b2f6      	uxtb	r6, r6
 800b212:	4283      	cmp	r3, r0
 800b214:	4637      	mov	r7, r6
 800b216:	dc04      	bgt.n	800b222 <__swbuf_r+0x42>
 800b218:	4621      	mov	r1, r4
 800b21a:	4628      	mov	r0, r5
 800b21c:	f000 f93c 	bl	800b498 <_fflush_r>
 800b220:	bb30      	cbnz	r0, 800b270 <__swbuf_r+0x90>
 800b222:	68a3      	ldr	r3, [r4, #8]
 800b224:	3b01      	subs	r3, #1
 800b226:	60a3      	str	r3, [r4, #8]
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	701e      	strb	r6, [r3, #0]
 800b230:	6963      	ldr	r3, [r4, #20]
 800b232:	3001      	adds	r0, #1
 800b234:	4283      	cmp	r3, r0
 800b236:	d004      	beq.n	800b242 <__swbuf_r+0x62>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	07db      	lsls	r3, r3, #31
 800b23c:	d506      	bpl.n	800b24c <__swbuf_r+0x6c>
 800b23e:	2e0a      	cmp	r6, #10
 800b240:	d104      	bne.n	800b24c <__swbuf_r+0x6c>
 800b242:	4621      	mov	r1, r4
 800b244:	4628      	mov	r0, r5
 800b246:	f000 f927 	bl	800b498 <_fflush_r>
 800b24a:	b988      	cbnz	r0, 800b270 <__swbuf_r+0x90>
 800b24c:	4638      	mov	r0, r7
 800b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <__swbuf_r+0x9c>)
 800b252:	429c      	cmp	r4, r3
 800b254:	d101      	bne.n	800b25a <__swbuf_r+0x7a>
 800b256:	68ac      	ldr	r4, [r5, #8]
 800b258:	e7cf      	b.n	800b1fa <__swbuf_r+0x1a>
 800b25a:	4b09      	ldr	r3, [pc, #36]	; (800b280 <__swbuf_r+0xa0>)
 800b25c:	429c      	cmp	r4, r3
 800b25e:	bf08      	it	eq
 800b260:	68ec      	ldreq	r4, [r5, #12]
 800b262:	e7ca      	b.n	800b1fa <__swbuf_r+0x1a>
 800b264:	4621      	mov	r1, r4
 800b266:	4628      	mov	r0, r5
 800b268:	f000 f81a 	bl	800b2a0 <__swsetup_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d0cb      	beq.n	800b208 <__swbuf_r+0x28>
 800b270:	f04f 37ff 	mov.w	r7, #4294967295
 800b274:	e7ea      	b.n	800b24c <__swbuf_r+0x6c>
 800b276:	bf00      	nop
 800b278:	0800c07c 	.word	0x0800c07c
 800b27c:	0800c09c 	.word	0x0800c09c
 800b280:	0800c05c 	.word	0x0800c05c

0800b284 <__ascii_wctomb>:
 800b284:	b149      	cbz	r1, 800b29a <__ascii_wctomb+0x16>
 800b286:	2aff      	cmp	r2, #255	; 0xff
 800b288:	bf85      	ittet	hi
 800b28a:	238a      	movhi	r3, #138	; 0x8a
 800b28c:	6003      	strhi	r3, [r0, #0]
 800b28e:	700a      	strbls	r2, [r1, #0]
 800b290:	f04f 30ff 	movhi.w	r0, #4294967295
 800b294:	bf98      	it	ls
 800b296:	2001      	movls	r0, #1
 800b298:	4770      	bx	lr
 800b29a:	4608      	mov	r0, r1
 800b29c:	4770      	bx	lr
	...

0800b2a0 <__swsetup_r>:
 800b2a0:	4b32      	ldr	r3, [pc, #200]	; (800b36c <__swsetup_r+0xcc>)
 800b2a2:	b570      	push	{r4, r5, r6, lr}
 800b2a4:	681d      	ldr	r5, [r3, #0]
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	b125      	cbz	r5, 800b2b6 <__swsetup_r+0x16>
 800b2ac:	69ab      	ldr	r3, [r5, #24]
 800b2ae:	b913      	cbnz	r3, 800b2b6 <__swsetup_r+0x16>
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f000 f985 	bl	800b5c0 <__sinit>
 800b2b6:	4b2e      	ldr	r3, [pc, #184]	; (800b370 <__swsetup_r+0xd0>)
 800b2b8:	429c      	cmp	r4, r3
 800b2ba:	d10f      	bne.n	800b2dc <__swsetup_r+0x3c>
 800b2bc:	686c      	ldr	r4, [r5, #4]
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2c4:	0719      	lsls	r1, r3, #28
 800b2c6:	d42c      	bmi.n	800b322 <__swsetup_r+0x82>
 800b2c8:	06dd      	lsls	r5, r3, #27
 800b2ca:	d411      	bmi.n	800b2f0 <__swsetup_r+0x50>
 800b2cc:	2309      	movs	r3, #9
 800b2ce:	6033      	str	r3, [r6, #0]
 800b2d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2d4:	81a3      	strh	r3, [r4, #12]
 800b2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2da:	e03e      	b.n	800b35a <__swsetup_r+0xba>
 800b2dc:	4b25      	ldr	r3, [pc, #148]	; (800b374 <__swsetup_r+0xd4>)
 800b2de:	429c      	cmp	r4, r3
 800b2e0:	d101      	bne.n	800b2e6 <__swsetup_r+0x46>
 800b2e2:	68ac      	ldr	r4, [r5, #8]
 800b2e4:	e7eb      	b.n	800b2be <__swsetup_r+0x1e>
 800b2e6:	4b24      	ldr	r3, [pc, #144]	; (800b378 <__swsetup_r+0xd8>)
 800b2e8:	429c      	cmp	r4, r3
 800b2ea:	bf08      	it	eq
 800b2ec:	68ec      	ldreq	r4, [r5, #12]
 800b2ee:	e7e6      	b.n	800b2be <__swsetup_r+0x1e>
 800b2f0:	0758      	lsls	r0, r3, #29
 800b2f2:	d512      	bpl.n	800b31a <__swsetup_r+0x7a>
 800b2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2f6:	b141      	cbz	r1, 800b30a <__swsetup_r+0x6a>
 800b2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	d002      	beq.n	800b306 <__swsetup_r+0x66>
 800b300:	4630      	mov	r0, r6
 800b302:	f7ff fb6f 	bl	800a9e4 <_free_r>
 800b306:	2300      	movs	r3, #0
 800b308:	6363      	str	r3, [r4, #52]	; 0x34
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b310:	81a3      	strh	r3, [r4, #12]
 800b312:	2300      	movs	r3, #0
 800b314:	6063      	str	r3, [r4, #4]
 800b316:	6923      	ldr	r3, [r4, #16]
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	f043 0308 	orr.w	r3, r3, #8
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	6923      	ldr	r3, [r4, #16]
 800b324:	b94b      	cbnz	r3, 800b33a <__swsetup_r+0x9a>
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b330:	d003      	beq.n	800b33a <__swsetup_r+0x9a>
 800b332:	4621      	mov	r1, r4
 800b334:	4630      	mov	r0, r6
 800b336:	f000 fa07 	bl	800b748 <__smakebuf_r>
 800b33a:	89a0      	ldrh	r0, [r4, #12]
 800b33c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b340:	f010 0301 	ands.w	r3, r0, #1
 800b344:	d00a      	beq.n	800b35c <__swsetup_r+0xbc>
 800b346:	2300      	movs	r3, #0
 800b348:	60a3      	str	r3, [r4, #8]
 800b34a:	6963      	ldr	r3, [r4, #20]
 800b34c:	425b      	negs	r3, r3
 800b34e:	61a3      	str	r3, [r4, #24]
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	b943      	cbnz	r3, 800b366 <__swsetup_r+0xc6>
 800b354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b358:	d1ba      	bne.n	800b2d0 <__swsetup_r+0x30>
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	0781      	lsls	r1, r0, #30
 800b35e:	bf58      	it	pl
 800b360:	6963      	ldrpl	r3, [r4, #20]
 800b362:	60a3      	str	r3, [r4, #8]
 800b364:	e7f4      	b.n	800b350 <__swsetup_r+0xb0>
 800b366:	2000      	movs	r0, #0
 800b368:	e7f7      	b.n	800b35a <__swsetup_r+0xba>
 800b36a:	bf00      	nop
 800b36c:	200000a8 	.word	0x200000a8
 800b370:	0800c07c 	.word	0x0800c07c
 800b374:	0800c09c 	.word	0x0800c09c
 800b378:	0800c05c 	.word	0x0800c05c

0800b37c <abort>:
 800b37c:	b508      	push	{r3, lr}
 800b37e:	2006      	movs	r0, #6
 800b380:	f000 fa52 	bl	800b828 <raise>
 800b384:	2001      	movs	r0, #1
 800b386:	f7f7 fe47 	bl	8003018 <_exit>
	...

0800b38c <__sflush_r>:
 800b38c:	898a      	ldrh	r2, [r1, #12]
 800b38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b392:	4605      	mov	r5, r0
 800b394:	0710      	lsls	r0, r2, #28
 800b396:	460c      	mov	r4, r1
 800b398:	d458      	bmi.n	800b44c <__sflush_r+0xc0>
 800b39a:	684b      	ldr	r3, [r1, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dc05      	bgt.n	800b3ac <__sflush_r+0x20>
 800b3a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	dc02      	bgt.n	800b3ac <__sflush_r+0x20>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ae:	2e00      	cmp	r6, #0
 800b3b0:	d0f9      	beq.n	800b3a6 <__sflush_r+0x1a>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3b8:	682f      	ldr	r7, [r5, #0]
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	d032      	beq.n	800b424 <__sflush_r+0x98>
 800b3be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	075a      	lsls	r2, r3, #29
 800b3c4:	d505      	bpl.n	800b3d2 <__sflush_r+0x46>
 800b3c6:	6863      	ldr	r3, [r4, #4]
 800b3c8:	1ac0      	subs	r0, r0, r3
 800b3ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3cc:	b10b      	cbz	r3, 800b3d2 <__sflush_r+0x46>
 800b3ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3d0:	1ac0      	subs	r0, r0, r3
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3d8:	6a21      	ldr	r1, [r4, #32]
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b0      	blx	r6
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	d106      	bne.n	800b3f2 <__sflush_r+0x66>
 800b3e4:	6829      	ldr	r1, [r5, #0]
 800b3e6:	291d      	cmp	r1, #29
 800b3e8:	d82c      	bhi.n	800b444 <__sflush_r+0xb8>
 800b3ea:	4a2a      	ldr	r2, [pc, #168]	; (800b494 <__sflush_r+0x108>)
 800b3ec:	40ca      	lsrs	r2, r1
 800b3ee:	07d6      	lsls	r6, r2, #31
 800b3f0:	d528      	bpl.n	800b444 <__sflush_r+0xb8>
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	6062      	str	r2, [r4, #4]
 800b3f6:	04d9      	lsls	r1, r3, #19
 800b3f8:	6922      	ldr	r2, [r4, #16]
 800b3fa:	6022      	str	r2, [r4, #0]
 800b3fc:	d504      	bpl.n	800b408 <__sflush_r+0x7c>
 800b3fe:	1c42      	adds	r2, r0, #1
 800b400:	d101      	bne.n	800b406 <__sflush_r+0x7a>
 800b402:	682b      	ldr	r3, [r5, #0]
 800b404:	b903      	cbnz	r3, 800b408 <__sflush_r+0x7c>
 800b406:	6560      	str	r0, [r4, #84]	; 0x54
 800b408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b40a:	602f      	str	r7, [r5, #0]
 800b40c:	2900      	cmp	r1, #0
 800b40e:	d0ca      	beq.n	800b3a6 <__sflush_r+0x1a>
 800b410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b414:	4299      	cmp	r1, r3
 800b416:	d002      	beq.n	800b41e <__sflush_r+0x92>
 800b418:	4628      	mov	r0, r5
 800b41a:	f7ff fae3 	bl	800a9e4 <_free_r>
 800b41e:	2000      	movs	r0, #0
 800b420:	6360      	str	r0, [r4, #52]	; 0x34
 800b422:	e7c1      	b.n	800b3a8 <__sflush_r+0x1c>
 800b424:	6a21      	ldr	r1, [r4, #32]
 800b426:	2301      	movs	r3, #1
 800b428:	4628      	mov	r0, r5
 800b42a:	47b0      	blx	r6
 800b42c:	1c41      	adds	r1, r0, #1
 800b42e:	d1c7      	bne.n	800b3c0 <__sflush_r+0x34>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0c4      	beq.n	800b3c0 <__sflush_r+0x34>
 800b436:	2b1d      	cmp	r3, #29
 800b438:	d001      	beq.n	800b43e <__sflush_r+0xb2>
 800b43a:	2b16      	cmp	r3, #22
 800b43c:	d101      	bne.n	800b442 <__sflush_r+0xb6>
 800b43e:	602f      	str	r7, [r5, #0]
 800b440:	e7b1      	b.n	800b3a6 <__sflush_r+0x1a>
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b448:	81a3      	strh	r3, [r4, #12]
 800b44a:	e7ad      	b.n	800b3a8 <__sflush_r+0x1c>
 800b44c:	690f      	ldr	r7, [r1, #16]
 800b44e:	2f00      	cmp	r7, #0
 800b450:	d0a9      	beq.n	800b3a6 <__sflush_r+0x1a>
 800b452:	0793      	lsls	r3, r2, #30
 800b454:	680e      	ldr	r6, [r1, #0]
 800b456:	bf08      	it	eq
 800b458:	694b      	ldreq	r3, [r1, #20]
 800b45a:	600f      	str	r7, [r1, #0]
 800b45c:	bf18      	it	ne
 800b45e:	2300      	movne	r3, #0
 800b460:	eba6 0807 	sub.w	r8, r6, r7
 800b464:	608b      	str	r3, [r1, #8]
 800b466:	f1b8 0f00 	cmp.w	r8, #0
 800b46a:	dd9c      	ble.n	800b3a6 <__sflush_r+0x1a>
 800b46c:	6a21      	ldr	r1, [r4, #32]
 800b46e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b470:	4643      	mov	r3, r8
 800b472:	463a      	mov	r2, r7
 800b474:	4628      	mov	r0, r5
 800b476:	47b0      	blx	r6
 800b478:	2800      	cmp	r0, #0
 800b47a:	dc06      	bgt.n	800b48a <__sflush_r+0xfe>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	f04f 30ff 	mov.w	r0, #4294967295
 800b488:	e78e      	b.n	800b3a8 <__sflush_r+0x1c>
 800b48a:	4407      	add	r7, r0
 800b48c:	eba8 0800 	sub.w	r8, r8, r0
 800b490:	e7e9      	b.n	800b466 <__sflush_r+0xda>
 800b492:	bf00      	nop
 800b494:	20400001 	.word	0x20400001

0800b498 <_fflush_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	690b      	ldr	r3, [r1, #16]
 800b49c:	4605      	mov	r5, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	b913      	cbnz	r3, 800b4a8 <_fflush_r+0x10>
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	b118      	cbz	r0, 800b4b2 <_fflush_r+0x1a>
 800b4aa:	6983      	ldr	r3, [r0, #24]
 800b4ac:	b90b      	cbnz	r3, 800b4b2 <_fflush_r+0x1a>
 800b4ae:	f000 f887 	bl	800b5c0 <__sinit>
 800b4b2:	4b14      	ldr	r3, [pc, #80]	; (800b504 <_fflush_r+0x6c>)
 800b4b4:	429c      	cmp	r4, r3
 800b4b6:	d11b      	bne.n	800b4f0 <_fflush_r+0x58>
 800b4b8:	686c      	ldr	r4, [r5, #4]
 800b4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d0ef      	beq.n	800b4a2 <_fflush_r+0xa>
 800b4c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4c4:	07d0      	lsls	r0, r2, #31
 800b4c6:	d404      	bmi.n	800b4d2 <_fflush_r+0x3a>
 800b4c8:	0599      	lsls	r1, r3, #22
 800b4ca:	d402      	bmi.n	800b4d2 <_fflush_r+0x3a>
 800b4cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ce:	f000 f915 	bl	800b6fc <__retarget_lock_acquire_recursive>
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	f7ff ff59 	bl	800b38c <__sflush_r>
 800b4da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4dc:	07da      	lsls	r2, r3, #31
 800b4de:	4605      	mov	r5, r0
 800b4e0:	d4e0      	bmi.n	800b4a4 <_fflush_r+0xc>
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	059b      	lsls	r3, r3, #22
 800b4e6:	d4dd      	bmi.n	800b4a4 <_fflush_r+0xc>
 800b4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ea:	f000 f908 	bl	800b6fe <__retarget_lock_release_recursive>
 800b4ee:	e7d9      	b.n	800b4a4 <_fflush_r+0xc>
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <_fflush_r+0x70>)
 800b4f2:	429c      	cmp	r4, r3
 800b4f4:	d101      	bne.n	800b4fa <_fflush_r+0x62>
 800b4f6:	68ac      	ldr	r4, [r5, #8]
 800b4f8:	e7df      	b.n	800b4ba <_fflush_r+0x22>
 800b4fa:	4b04      	ldr	r3, [pc, #16]	; (800b50c <_fflush_r+0x74>)
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	bf08      	it	eq
 800b500:	68ec      	ldreq	r4, [r5, #12]
 800b502:	e7da      	b.n	800b4ba <_fflush_r+0x22>
 800b504:	0800c07c 	.word	0x0800c07c
 800b508:	0800c09c 	.word	0x0800c09c
 800b50c:	0800c05c 	.word	0x0800c05c

0800b510 <std>:
 800b510:	2300      	movs	r3, #0
 800b512:	b510      	push	{r4, lr}
 800b514:	4604      	mov	r4, r0
 800b516:	e9c0 3300 	strd	r3, r3, [r0]
 800b51a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b51e:	6083      	str	r3, [r0, #8]
 800b520:	8181      	strh	r1, [r0, #12]
 800b522:	6643      	str	r3, [r0, #100]	; 0x64
 800b524:	81c2      	strh	r2, [r0, #14]
 800b526:	6183      	str	r3, [r0, #24]
 800b528:	4619      	mov	r1, r3
 800b52a:	2208      	movs	r2, #8
 800b52c:	305c      	adds	r0, #92	; 0x5c
 800b52e:	f7fd fc35 	bl	8008d9c <memset>
 800b532:	4b05      	ldr	r3, [pc, #20]	; (800b548 <std+0x38>)
 800b534:	6263      	str	r3, [r4, #36]	; 0x24
 800b536:	4b05      	ldr	r3, [pc, #20]	; (800b54c <std+0x3c>)
 800b538:	62a3      	str	r3, [r4, #40]	; 0x28
 800b53a:	4b05      	ldr	r3, [pc, #20]	; (800b550 <std+0x40>)
 800b53c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b53e:	4b05      	ldr	r3, [pc, #20]	; (800b554 <std+0x44>)
 800b540:	6224      	str	r4, [r4, #32]
 800b542:	6323      	str	r3, [r4, #48]	; 0x30
 800b544:	bd10      	pop	{r4, pc}
 800b546:	bf00      	nop
 800b548:	0800b861 	.word	0x0800b861
 800b54c:	0800b883 	.word	0x0800b883
 800b550:	0800b8bb 	.word	0x0800b8bb
 800b554:	0800b8df 	.word	0x0800b8df

0800b558 <_cleanup_r>:
 800b558:	4901      	ldr	r1, [pc, #4]	; (800b560 <_cleanup_r+0x8>)
 800b55a:	f000 b8af 	b.w	800b6bc <_fwalk_reent>
 800b55e:	bf00      	nop
 800b560:	0800b499 	.word	0x0800b499

0800b564 <__sfmoreglue>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	1e4a      	subs	r2, r1, #1
 800b568:	2568      	movs	r5, #104	; 0x68
 800b56a:	4355      	muls	r5, r2
 800b56c:	460e      	mov	r6, r1
 800b56e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b572:	f7ff fa87 	bl	800aa84 <_malloc_r>
 800b576:	4604      	mov	r4, r0
 800b578:	b140      	cbz	r0, 800b58c <__sfmoreglue+0x28>
 800b57a:	2100      	movs	r1, #0
 800b57c:	e9c0 1600 	strd	r1, r6, [r0]
 800b580:	300c      	adds	r0, #12
 800b582:	60a0      	str	r0, [r4, #8]
 800b584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b588:	f7fd fc08 	bl	8008d9c <memset>
 800b58c:	4620      	mov	r0, r4
 800b58e:	bd70      	pop	{r4, r5, r6, pc}

0800b590 <__sfp_lock_acquire>:
 800b590:	4801      	ldr	r0, [pc, #4]	; (800b598 <__sfp_lock_acquire+0x8>)
 800b592:	f000 b8b3 	b.w	800b6fc <__retarget_lock_acquire_recursive>
 800b596:	bf00      	nop
 800b598:	20000670 	.word	0x20000670

0800b59c <__sfp_lock_release>:
 800b59c:	4801      	ldr	r0, [pc, #4]	; (800b5a4 <__sfp_lock_release+0x8>)
 800b59e:	f000 b8ae 	b.w	800b6fe <__retarget_lock_release_recursive>
 800b5a2:	bf00      	nop
 800b5a4:	20000670 	.word	0x20000670

0800b5a8 <__sinit_lock_acquire>:
 800b5a8:	4801      	ldr	r0, [pc, #4]	; (800b5b0 <__sinit_lock_acquire+0x8>)
 800b5aa:	f000 b8a7 	b.w	800b6fc <__retarget_lock_acquire_recursive>
 800b5ae:	bf00      	nop
 800b5b0:	2000066b 	.word	0x2000066b

0800b5b4 <__sinit_lock_release>:
 800b5b4:	4801      	ldr	r0, [pc, #4]	; (800b5bc <__sinit_lock_release+0x8>)
 800b5b6:	f000 b8a2 	b.w	800b6fe <__retarget_lock_release_recursive>
 800b5ba:	bf00      	nop
 800b5bc:	2000066b 	.word	0x2000066b

0800b5c0 <__sinit>:
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	f7ff fff0 	bl	800b5a8 <__sinit_lock_acquire>
 800b5c8:	69a3      	ldr	r3, [r4, #24]
 800b5ca:	b11b      	cbz	r3, 800b5d4 <__sinit+0x14>
 800b5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d0:	f7ff bff0 	b.w	800b5b4 <__sinit_lock_release>
 800b5d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5d8:	6523      	str	r3, [r4, #80]	; 0x50
 800b5da:	4b13      	ldr	r3, [pc, #76]	; (800b628 <__sinit+0x68>)
 800b5dc:	4a13      	ldr	r2, [pc, #76]	; (800b62c <__sinit+0x6c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5e2:	42a3      	cmp	r3, r4
 800b5e4:	bf04      	itt	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	61a3      	streq	r3, [r4, #24]
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 f820 	bl	800b630 <__sfp>
 800b5f0:	6060      	str	r0, [r4, #4]
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 f81c 	bl	800b630 <__sfp>
 800b5f8:	60a0      	str	r0, [r4, #8]
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 f818 	bl	800b630 <__sfp>
 800b600:	2200      	movs	r2, #0
 800b602:	60e0      	str	r0, [r4, #12]
 800b604:	2104      	movs	r1, #4
 800b606:	6860      	ldr	r0, [r4, #4]
 800b608:	f7ff ff82 	bl	800b510 <std>
 800b60c:	68a0      	ldr	r0, [r4, #8]
 800b60e:	2201      	movs	r2, #1
 800b610:	2109      	movs	r1, #9
 800b612:	f7ff ff7d 	bl	800b510 <std>
 800b616:	68e0      	ldr	r0, [r4, #12]
 800b618:	2202      	movs	r2, #2
 800b61a:	2112      	movs	r1, #18
 800b61c:	f7ff ff78 	bl	800b510 <std>
 800b620:	2301      	movs	r3, #1
 800b622:	61a3      	str	r3, [r4, #24]
 800b624:	e7d2      	b.n	800b5cc <__sinit+0xc>
 800b626:	bf00      	nop
 800b628:	0800bcd8 	.word	0x0800bcd8
 800b62c:	0800b559 	.word	0x0800b559

0800b630 <__sfp>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	4607      	mov	r7, r0
 800b634:	f7ff ffac 	bl	800b590 <__sfp_lock_acquire>
 800b638:	4b1e      	ldr	r3, [pc, #120]	; (800b6b4 <__sfp+0x84>)
 800b63a:	681e      	ldr	r6, [r3, #0]
 800b63c:	69b3      	ldr	r3, [r6, #24]
 800b63e:	b913      	cbnz	r3, 800b646 <__sfp+0x16>
 800b640:	4630      	mov	r0, r6
 800b642:	f7ff ffbd 	bl	800b5c0 <__sinit>
 800b646:	3648      	adds	r6, #72	; 0x48
 800b648:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	d503      	bpl.n	800b658 <__sfp+0x28>
 800b650:	6833      	ldr	r3, [r6, #0]
 800b652:	b30b      	cbz	r3, 800b698 <__sfp+0x68>
 800b654:	6836      	ldr	r6, [r6, #0]
 800b656:	e7f7      	b.n	800b648 <__sfp+0x18>
 800b658:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b65c:	b9d5      	cbnz	r5, 800b694 <__sfp+0x64>
 800b65e:	4b16      	ldr	r3, [pc, #88]	; (800b6b8 <__sfp+0x88>)
 800b660:	60e3      	str	r3, [r4, #12]
 800b662:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b666:	6665      	str	r5, [r4, #100]	; 0x64
 800b668:	f000 f847 	bl	800b6fa <__retarget_lock_init_recursive>
 800b66c:	f7ff ff96 	bl	800b59c <__sfp_lock_release>
 800b670:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b674:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b678:	6025      	str	r5, [r4, #0]
 800b67a:	61a5      	str	r5, [r4, #24]
 800b67c:	2208      	movs	r2, #8
 800b67e:	4629      	mov	r1, r5
 800b680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b684:	f7fd fb8a 	bl	8008d9c <memset>
 800b688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b68c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b690:	4620      	mov	r0, r4
 800b692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b694:	3468      	adds	r4, #104	; 0x68
 800b696:	e7d9      	b.n	800b64c <__sfp+0x1c>
 800b698:	2104      	movs	r1, #4
 800b69a:	4638      	mov	r0, r7
 800b69c:	f7ff ff62 	bl	800b564 <__sfmoreglue>
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	6030      	str	r0, [r6, #0]
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d1d5      	bne.n	800b654 <__sfp+0x24>
 800b6a8:	f7ff ff78 	bl	800b59c <__sfp_lock_release>
 800b6ac:	230c      	movs	r3, #12
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	e7ee      	b.n	800b690 <__sfp+0x60>
 800b6b2:	bf00      	nop
 800b6b4:	0800bcd8 	.word	0x0800bcd8
 800b6b8:	ffff0001 	.word	0xffff0001

0800b6bc <_fwalk_reent>:
 800b6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	4688      	mov	r8, r1
 800b6c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6c8:	2700      	movs	r7, #0
 800b6ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6ce:	f1b9 0901 	subs.w	r9, r9, #1
 800b6d2:	d505      	bpl.n	800b6e0 <_fwalk_reent+0x24>
 800b6d4:	6824      	ldr	r4, [r4, #0]
 800b6d6:	2c00      	cmp	r4, #0
 800b6d8:	d1f7      	bne.n	800b6ca <_fwalk_reent+0xe>
 800b6da:	4638      	mov	r0, r7
 800b6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6e0:	89ab      	ldrh	r3, [r5, #12]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d907      	bls.n	800b6f6 <_fwalk_reent+0x3a>
 800b6e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	d003      	beq.n	800b6f6 <_fwalk_reent+0x3a>
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	47c0      	blx	r8
 800b6f4:	4307      	orrs	r7, r0
 800b6f6:	3568      	adds	r5, #104	; 0x68
 800b6f8:	e7e9      	b.n	800b6ce <_fwalk_reent+0x12>

0800b6fa <__retarget_lock_init_recursive>:
 800b6fa:	4770      	bx	lr

0800b6fc <__retarget_lock_acquire_recursive>:
 800b6fc:	4770      	bx	lr

0800b6fe <__retarget_lock_release_recursive>:
 800b6fe:	4770      	bx	lr

0800b700 <__swhatbuf_r>:
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	460e      	mov	r6, r1
 800b704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b708:	2900      	cmp	r1, #0
 800b70a:	b096      	sub	sp, #88	; 0x58
 800b70c:	4614      	mov	r4, r2
 800b70e:	461d      	mov	r5, r3
 800b710:	da07      	bge.n	800b722 <__swhatbuf_r+0x22>
 800b712:	2300      	movs	r3, #0
 800b714:	602b      	str	r3, [r5, #0]
 800b716:	89b3      	ldrh	r3, [r6, #12]
 800b718:	061a      	lsls	r2, r3, #24
 800b71a:	d410      	bmi.n	800b73e <__swhatbuf_r+0x3e>
 800b71c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b720:	e00e      	b.n	800b740 <__swhatbuf_r+0x40>
 800b722:	466a      	mov	r2, sp
 800b724:	f000 f902 	bl	800b92c <_fstat_r>
 800b728:	2800      	cmp	r0, #0
 800b72a:	dbf2      	blt.n	800b712 <__swhatbuf_r+0x12>
 800b72c:	9a01      	ldr	r2, [sp, #4]
 800b72e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b732:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b736:	425a      	negs	r2, r3
 800b738:	415a      	adcs	r2, r3
 800b73a:	602a      	str	r2, [r5, #0]
 800b73c:	e7ee      	b.n	800b71c <__swhatbuf_r+0x1c>
 800b73e:	2340      	movs	r3, #64	; 0x40
 800b740:	2000      	movs	r0, #0
 800b742:	6023      	str	r3, [r4, #0]
 800b744:	b016      	add	sp, #88	; 0x58
 800b746:	bd70      	pop	{r4, r5, r6, pc}

0800b748 <__smakebuf_r>:
 800b748:	898b      	ldrh	r3, [r1, #12]
 800b74a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b74c:	079d      	lsls	r5, r3, #30
 800b74e:	4606      	mov	r6, r0
 800b750:	460c      	mov	r4, r1
 800b752:	d507      	bpl.n	800b764 <__smakebuf_r+0x1c>
 800b754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	2301      	movs	r3, #1
 800b75e:	6163      	str	r3, [r4, #20]
 800b760:	b002      	add	sp, #8
 800b762:	bd70      	pop	{r4, r5, r6, pc}
 800b764:	ab01      	add	r3, sp, #4
 800b766:	466a      	mov	r2, sp
 800b768:	f7ff ffca 	bl	800b700 <__swhatbuf_r>
 800b76c:	9900      	ldr	r1, [sp, #0]
 800b76e:	4605      	mov	r5, r0
 800b770:	4630      	mov	r0, r6
 800b772:	f7ff f987 	bl	800aa84 <_malloc_r>
 800b776:	b948      	cbnz	r0, 800b78c <__smakebuf_r+0x44>
 800b778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77c:	059a      	lsls	r2, r3, #22
 800b77e:	d4ef      	bmi.n	800b760 <__smakebuf_r+0x18>
 800b780:	f023 0303 	bic.w	r3, r3, #3
 800b784:	f043 0302 	orr.w	r3, r3, #2
 800b788:	81a3      	strh	r3, [r4, #12]
 800b78a:	e7e3      	b.n	800b754 <__smakebuf_r+0xc>
 800b78c:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <__smakebuf_r+0x7c>)
 800b78e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	6020      	str	r0, [r4, #0]
 800b794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b798:	81a3      	strh	r3, [r4, #12]
 800b79a:	9b00      	ldr	r3, [sp, #0]
 800b79c:	6163      	str	r3, [r4, #20]
 800b79e:	9b01      	ldr	r3, [sp, #4]
 800b7a0:	6120      	str	r0, [r4, #16]
 800b7a2:	b15b      	cbz	r3, 800b7bc <__smakebuf_r+0x74>
 800b7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f000 f8d1 	bl	800b950 <_isatty_r>
 800b7ae:	b128      	cbz	r0, 800b7bc <__smakebuf_r+0x74>
 800b7b0:	89a3      	ldrh	r3, [r4, #12]
 800b7b2:	f023 0303 	bic.w	r3, r3, #3
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	89a0      	ldrh	r0, [r4, #12]
 800b7be:	4305      	orrs	r5, r0
 800b7c0:	81a5      	strh	r5, [r4, #12]
 800b7c2:	e7cd      	b.n	800b760 <__smakebuf_r+0x18>
 800b7c4:	0800b559 	.word	0x0800b559

0800b7c8 <_malloc_usable_size_r>:
 800b7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7cc:	1f18      	subs	r0, r3, #4
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	bfbc      	itt	lt
 800b7d2:	580b      	ldrlt	r3, [r1, r0]
 800b7d4:	18c0      	addlt	r0, r0, r3
 800b7d6:	4770      	bx	lr

0800b7d8 <_raise_r>:
 800b7d8:	291f      	cmp	r1, #31
 800b7da:	b538      	push	{r3, r4, r5, lr}
 800b7dc:	4604      	mov	r4, r0
 800b7de:	460d      	mov	r5, r1
 800b7e0:	d904      	bls.n	800b7ec <_raise_r+0x14>
 800b7e2:	2316      	movs	r3, #22
 800b7e4:	6003      	str	r3, [r0, #0]
 800b7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7ee:	b112      	cbz	r2, 800b7f6 <_raise_r+0x1e>
 800b7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7f4:	b94b      	cbnz	r3, 800b80a <_raise_r+0x32>
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 f830 	bl	800b85c <_getpid_r>
 800b7fc:	462a      	mov	r2, r5
 800b7fe:	4601      	mov	r1, r0
 800b800:	4620      	mov	r0, r4
 800b802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b806:	f000 b817 	b.w	800b838 <_kill_r>
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d00a      	beq.n	800b824 <_raise_r+0x4c>
 800b80e:	1c59      	adds	r1, r3, #1
 800b810:	d103      	bne.n	800b81a <_raise_r+0x42>
 800b812:	2316      	movs	r3, #22
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	2001      	movs	r0, #1
 800b818:	e7e7      	b.n	800b7ea <_raise_r+0x12>
 800b81a:	2400      	movs	r4, #0
 800b81c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b820:	4628      	mov	r0, r5
 800b822:	4798      	blx	r3
 800b824:	2000      	movs	r0, #0
 800b826:	e7e0      	b.n	800b7ea <_raise_r+0x12>

0800b828 <raise>:
 800b828:	4b02      	ldr	r3, [pc, #8]	; (800b834 <raise+0xc>)
 800b82a:	4601      	mov	r1, r0
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	f7ff bfd3 	b.w	800b7d8 <_raise_r>
 800b832:	bf00      	nop
 800b834:	200000a8 	.word	0x200000a8

0800b838 <_kill_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	; (800b858 <_kill_r+0x20>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	4611      	mov	r1, r2
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	f7f7 fbd7 	bl	8002ff8 <_kill>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	d102      	bne.n	800b854 <_kill_r+0x1c>
 800b84e:	682b      	ldr	r3, [r5, #0]
 800b850:	b103      	cbz	r3, 800b854 <_kill_r+0x1c>
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	bd38      	pop	{r3, r4, r5, pc}
 800b856:	bf00      	nop
 800b858:	20000664 	.word	0x20000664

0800b85c <_getpid_r>:
 800b85c:	f7f7 bbc4 	b.w	8002fe8 <_getpid>

0800b860 <__sread>:
 800b860:	b510      	push	{r4, lr}
 800b862:	460c      	mov	r4, r1
 800b864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b868:	f000 f894 	bl	800b994 <_read_r>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	bfab      	itete	ge
 800b870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b872:	89a3      	ldrhlt	r3, [r4, #12]
 800b874:	181b      	addge	r3, r3, r0
 800b876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b87a:	bfac      	ite	ge
 800b87c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b87e:	81a3      	strhlt	r3, [r4, #12]
 800b880:	bd10      	pop	{r4, pc}

0800b882 <__swrite>:
 800b882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b886:	461f      	mov	r7, r3
 800b888:	898b      	ldrh	r3, [r1, #12]
 800b88a:	05db      	lsls	r3, r3, #23
 800b88c:	4605      	mov	r5, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	4616      	mov	r6, r2
 800b892:	d505      	bpl.n	800b8a0 <__swrite+0x1e>
 800b894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b898:	2302      	movs	r3, #2
 800b89a:	2200      	movs	r2, #0
 800b89c:	f000 f868 	bl	800b970 <_lseek_r>
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	463b      	mov	r3, r7
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b6:	f000 b817 	b.w	800b8e8 <_write_r>

0800b8ba <__sseek>:
 800b8ba:	b510      	push	{r4, lr}
 800b8bc:	460c      	mov	r4, r1
 800b8be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c2:	f000 f855 	bl	800b970 <_lseek_r>
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	bf15      	itete	ne
 800b8cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8d6:	81a3      	strheq	r3, [r4, #12]
 800b8d8:	bf18      	it	ne
 800b8da:	81a3      	strhne	r3, [r4, #12]
 800b8dc:	bd10      	pop	{r4, pc}

0800b8de <__sclose>:
 800b8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e2:	f000 b813 	b.w	800b90c <_close_r>
	...

0800b8e8 <_write_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d07      	ldr	r5, [pc, #28]	; (800b908 <_write_r+0x20>)
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	602a      	str	r2, [r5, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f7f7 fbb5 	bl	8003066 <_write>
 800b8fc:	1c43      	adds	r3, r0, #1
 800b8fe:	d102      	bne.n	800b906 <_write_r+0x1e>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	b103      	cbz	r3, 800b906 <_write_r+0x1e>
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	20000664 	.word	0x20000664

0800b90c <_close_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d06      	ldr	r5, [pc, #24]	; (800b928 <_close_r+0x1c>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	602b      	str	r3, [r5, #0]
 800b918:	f7f7 fbc1 	bl	800309e <_close>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_close_r+0x1a>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_close_r+0x1a>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	20000664 	.word	0x20000664

0800b92c <_fstat_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4d07      	ldr	r5, [pc, #28]	; (800b94c <_fstat_r+0x20>)
 800b930:	2300      	movs	r3, #0
 800b932:	4604      	mov	r4, r0
 800b934:	4608      	mov	r0, r1
 800b936:	4611      	mov	r1, r2
 800b938:	602b      	str	r3, [r5, #0]
 800b93a:	f7f7 fbbc 	bl	80030b6 <_fstat>
 800b93e:	1c43      	adds	r3, r0, #1
 800b940:	d102      	bne.n	800b948 <_fstat_r+0x1c>
 800b942:	682b      	ldr	r3, [r5, #0]
 800b944:	b103      	cbz	r3, 800b948 <_fstat_r+0x1c>
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	bd38      	pop	{r3, r4, r5, pc}
 800b94a:	bf00      	nop
 800b94c:	20000664 	.word	0x20000664

0800b950 <_isatty_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d06      	ldr	r5, [pc, #24]	; (800b96c <_isatty_r+0x1c>)
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	602b      	str	r3, [r5, #0]
 800b95c:	f7f7 fbbb 	bl	80030d6 <_isatty>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_isatty_r+0x1a>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_isatty_r+0x1a>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	20000664 	.word	0x20000664

0800b970 <_lseek_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d07      	ldr	r5, [pc, #28]	; (800b990 <_lseek_r+0x20>)
 800b974:	4604      	mov	r4, r0
 800b976:	4608      	mov	r0, r1
 800b978:	4611      	mov	r1, r2
 800b97a:	2200      	movs	r2, #0
 800b97c:	602a      	str	r2, [r5, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	f7f7 fbb4 	bl	80030ec <_lseek>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_lseek_r+0x1e>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_lseek_r+0x1e>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	20000664 	.word	0x20000664

0800b994 <_read_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_read_r+0x20>)
 800b998:	4604      	mov	r4, r0
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	2200      	movs	r2, #0
 800b9a0:	602a      	str	r2, [r5, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f7f7 fb42 	bl	800302c <_read>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_read_r+0x1e>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_read_r+0x1e>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	20000664 	.word	0x20000664

0800b9b8 <_init>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	bf00      	nop
 800b9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9be:	bc08      	pop	{r3}
 800b9c0:	469e      	mov	lr, r3
 800b9c2:	4770      	bx	lr

0800b9c4 <_fini>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	bf00      	nop
 800b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ca:	bc08      	pop	{r3}
 800b9cc:	469e      	mov	lr, r3
 800b9ce:	4770      	bx	lr

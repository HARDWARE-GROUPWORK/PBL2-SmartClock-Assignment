
PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  08009ff0  08009ff0  00019ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a664  0800a664  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a664  0800a664  0001a664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a66c  0800a66c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a670  0800a670  0001a670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800a674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  2000021c  0800a890  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800a890  00020624  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a529  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  0003a773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003e0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0a8  00000000  00000000  00040a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab7e  00000000  00000000  0006baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001010fb  00000000  00000000  0008666e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068cc  00000000  00000000  001877bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000021c 	.word	0x2000021c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009fd8 	.word	0x08009fd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000220 	.word	0x20000220
 800023c:	08009fd8 	.word	0x08009fd8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fe:	4b93      	ldr	r3, [pc, #588]	; (800084c <MX_GPIO_Init+0x264>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a92      	ldr	r2, [pc, #584]	; (800084c <MX_GPIO_Init+0x264>)
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <MX_GPIO_Init+0x264>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b8d      	ldr	r3, [pc, #564]	; (800084c <MX_GPIO_Init+0x264>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a8c      	ldr	r2, [pc, #560]	; (800084c <MX_GPIO_Init+0x264>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <MX_GPIO_Init+0x264>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	4b87      	ldr	r3, [pc, #540]	; (800084c <MX_GPIO_Init+0x264>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a86      	ldr	r2, [pc, #536]	; (800084c <MX_GPIO_Init+0x264>)
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b84      	ldr	r3, [pc, #528]	; (800084c <MX_GPIO_Init+0x264>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b81      	ldr	r3, [pc, #516]	; (800084c <MX_GPIO_Init+0x264>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a80      	ldr	r2, [pc, #512]	; (800084c <MX_GPIO_Init+0x264>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b7e      	ldr	r3, [pc, #504]	; (800084c <MX_GPIO_Init+0x264>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b7b      	ldr	r3, [pc, #492]	; (800084c <MX_GPIO_Init+0x264>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a7a      	ldr	r2, [pc, #488]	; (800084c <MX_GPIO_Init+0x264>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b78      	ldr	r3, [pc, #480]	; (800084c <MX_GPIO_Init+0x264>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <MX_GPIO_Init+0x264>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a74      	ldr	r2, [pc, #464]	; (800084c <MX_GPIO_Init+0x264>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <MX_GPIO_Init+0x264>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b6f      	ldr	r3, [pc, #444]	; (800084c <MX_GPIO_Init+0x264>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a6e      	ldr	r2, [pc, #440]	; (800084c <MX_GPIO_Init+0x264>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <MX_GPIO_Init+0x264>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b69      	ldr	r3, [pc, #420]	; (800084c <MX_GPIO_Init+0x264>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a68      	ldr	r2, [pc, #416]	; (800084c <MX_GPIO_Init+0x264>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b66      	ldr	r3, [pc, #408]	; (800084c <MX_GPIO_Init+0x264>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2168      	movs	r1, #104	; 0x68
 80006c2:	4863      	ldr	r0, [pc, #396]	; (8000850 <MX_GPIO_Init+0x268>)
 80006c4:	f003 f878 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006ce:	4861      	ldr	r0, [pc, #388]	; (8000854 <MX_GPIO_Init+0x26c>)
 80006d0:	f003 f872 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	485f      	ldr	r0, [pc, #380]	; (8000858 <MX_GPIO_Init+0x270>)
 80006da:	f003 f86d 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e4:	485d      	ldr	r0, [pc, #372]	; (800085c <MX_GPIO_Init+0x274>)
 80006e6:	f003 f867 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ea:	2314      	movs	r3, #20
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	4854      	ldr	r0, [pc, #336]	; (8000850 <MX_GPIO_Init+0x268>)
 80006fe:	f002 fe97 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000702:	2368      	movs	r3, #104	; 0x68
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	4619      	mov	r1, r3
 8000718:	484d      	ldr	r0, [pc, #308]	; (8000850 <MX_GPIO_Init+0x268>)
 800071a:	f002 fe89 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	484a      	ldr	r0, [pc, #296]	; (800085c <MX_GPIO_Init+0x274>)
 8000734:	f002 fe7c 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000748:	230b      	movs	r3, #11
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4842      	ldr	r0, [pc, #264]	; (800085c <MX_GPIO_Init+0x274>)
 8000754:	f002 fe6c 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000758:	2386      	movs	r3, #134	; 0x86
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000768:	230b      	movs	r3, #11
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000770:	4619      	mov	r1, r3
 8000772:	483b      	ldr	r0, [pc, #236]	; (8000860 <MX_GPIO_Init+0x278>)
 8000774:	f002 fe5c 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078a:	230b      	movs	r3, #11
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	482f      	ldr	r0, [pc, #188]	; (8000854 <MX_GPIO_Init+0x26c>)
 8000796:	f002 fe4b 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4828      	ldr	r0, [pc, #160]	; (8000854 <MX_GPIO_Init+0x26c>)
 80007b4:	f002 fe3c 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4822      	ldr	r0, [pc, #136]	; (8000858 <MX_GPIO_Init+0x270>)
 80007d0:	f002 fe2e 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4619      	mov	r1, r3
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <MX_GPIO_Init+0x270>)
 80007e8:	f002 fe22 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <MX_GPIO_Init+0x274>)
 8000806:	f002 fe13 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800080a:	23f0      	movs	r3, #240	; 0xf0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_GPIO_Init+0x27c>)
 800081e:	f002 fe07 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000822:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000834:	230b      	movs	r3, #11
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_GPIO_Init+0x270>)
 8000840:	f002 fdf6 	bl	8003430 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3738      	adds	r7, #56	; 0x38
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40021000 	.word	0x40021000
 8000854:	40020400 	.word	0x40020400
 8000858:	40021800 	.word	0x40021800
 800085c:	40020800 	.word	0x40020800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020c00 	.word	0x40020c00

08000868 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C1_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C1_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C1_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C1_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C1_Init+0x74>)
 80008a4:	f002 ffa2 	bl	80037ec <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f001 fa0b 	bl	8001cc8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C1_Init+0x74>)
 80008b6:	f003 f829 	bl	800390c <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f001 fa02 	bl	8001cc8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C1_Init+0x74>)
 80008c8:	f003 f86b 	bl	80039a2 <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f001 f9f9 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000260 	.word	0x20000260
 80008e0:	40005400 	.word	0x40005400
 80008e4:	00c0eaff 	.word	0x00c0eaff

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_I2C_MspInit+0x7c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d128      	bne.n	800095c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_I2C_MspInit+0x80>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000928:	2312      	movs	r3, #18
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000934:	2304      	movs	r3, #4
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_I2C_MspInit+0x84>)
 8000940:	f002 fd76 	bl	8003430 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_I2C_MspInit+0x80>)
 800094a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005400 	.word	0x40005400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400

08000970 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
}
 8000978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097a:	f3bf 8f6f 	isb	sy
}
 800097e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <SCB_EnableICache+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <SCB_EnableICache+0x48>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <SCB_EnableICache+0x48>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a0:	f3bf 8f4f 	dsb	sy
}
 80009a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a6:	f3bf 8f6f 	isb	sy
}
 80009aa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009d6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	0b5b      	lsrs	r3, r3, #13
 80009dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	015a      	lsls	r2, r3, #5
 80009f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009fa:	4911      	ldr	r1, [pc, #68]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	60ba      	str	r2, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1ef      	bne.n	80009ec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	60fa      	str	r2, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1e5      	bne.n	80009e2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a16:	f3bf 8f4f 	dsb	sy
}
 8000a1a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a28:	f3bf 8f4f 	dsb	sy
}
 8000a2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a2e:	f3bf 8f6f 	isb	sy
}
 8000a32:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <setHorizontalScreen>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Paint screen black
void setHorizontalScreen(uint16_t color){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 f9ef 	bl	8002e34 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f001 ffe6 	bl	8002a28 <ILI9341_Set_Rotation>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <calculationClock>:


void calculationClock(uint32_t ms){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

	millisecondHAL = HAL_GetTick();
 8000a6c:	f002 fb9e 	bl	80031ac <HAL_GetTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <calculationClock+0x84>)
 8000a74:	6013      	str	r3, [r2, #0]

	if(millisecond >= 1000){
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <calculationClock+0x88>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a7e:	d307      	bcc.n	8000a90 <calculationClock+0x2c>
		millisecond = 0;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <calculationClock+0x88>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
		secondNum++;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <calculationClock+0x8c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <calculationClock+0x8c>)
 8000a8e:	6013      	str	r3, [r2, #0]

	}
	if(secondNum >= 60){
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <calculationClock+0x8c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b3b      	cmp	r3, #59	; 0x3b
 8000a96:	d90b      	bls.n	8000ab0 <calculationClock+0x4c>
		secondNum = 0;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <calculationClock+0x8c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
		if(mode != 100){
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <calculationClock+0x90>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	2b64      	cmp	r3, #100	; 0x64
 8000aa4:	d004      	beq.n	8000ab0 <calculationClock+0x4c>
			minuteNum++;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <calculationClock+0x94>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <calculationClock+0x94>)
 8000aae:	6013      	str	r3, [r2, #0]
		}
	}
	if(minuteNum >= 60){
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <calculationClock+0x94>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b3b      	cmp	r3, #59	; 0x3b
 8000ab6:	d90b      	bls.n	8000ad0 <calculationClock+0x6c>
		minuteNum = 0;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <calculationClock+0x94>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
		if(mode != 100){
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <calculationClock+0x90>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	2b64      	cmp	r3, #100	; 0x64
 8000ac4:	d004      	beq.n	8000ad0 <calculationClock+0x6c>
			hourNum++;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <calculationClock+0x98>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <calculationClock+0x98>)
 8000ace:	6013      	str	r3, [r2, #0]
		}
	}
	if(hourNum >= 24){
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <calculationClock+0x98>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b17      	cmp	r3, #23
 8000ad6:	d902      	bls.n	8000ade <calculationClock+0x7a>
		hourNum = 0;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <calculationClock+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
	if(hourNum < 0){
		hourNum = 23;
	}


}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000250 	.word	0x20000250
 8000aec:	20000238 	.word	0x20000238
 8000af0:	20000014 	.word	0x20000014
 8000af4:	20000242 	.word	0x20000242
 8000af8:	20000018 	.word	0x20000018
 8000afc:	2000001c 	.word	0x2000001c

08000b00 <topBarScreen>:
//		sprintf(hexString,"%02d %02d\r", hourNum, minuteNum);
//		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);
//	}
//}

void topBarScreen(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af02      	add	r7, sp, #8


	sprintf(Temp_Buffer_text, "ON");
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <topBarScreen+0x90>)
 8000b08:	4822      	ldr	r0, [pc, #136]	; (8000b94 <topBarScreen+0x94>)
 8000b0a:	f007 f8a3 	bl	8007c54 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.9 + offsetWidth-5, maxHeight*0.1, BLACK, 2, RED);
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <topBarScreen+0x98>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b1a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000b80 <topBarScreen+0x80>
 8000b1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <topBarScreen+0x9c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b32:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000b36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b3e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b42:	793b      	ldrb	r3, [r7, #4]
 8000b44:	b2d9      	uxtb	r1, r3
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <topBarScreen+0xa0>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	ee07 3a90 	vmov	s15, r3
 8000b4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b52:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000b88 <topBarScreen+0x88>
 8000b56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <topBarScreen+0x94>)
 8000b74:	f001 fe58 	bl	8002828 <ILI9341_Draw_Text>


}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	cccccccd 	.word	0xcccccccd
 8000b84:	3feccccc 	.word	0x3feccccc
 8000b88:	9999999a 	.word	0x9999999a
 8000b8c:	3fb99999 	.word	0x3fb99999
 8000b90:	08009ff0 	.word	0x08009ff0
 8000b94:	20000388 	.word	0x20000388
 8000b98:	2000002e 	.word	0x2000002e
 8000b9c:	20000030 	.word	0x20000030
 8000ba0:	20000032 	.word	0x20000032

08000ba4 <resetPrevNum>:

void resetPrevNum(){
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <resetPrevNum+0x28>)
 8000baa:	f04f 32ff 	mov.w	r2, #4294967295
 8000bae:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <resetPrevNum+0x2c>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <resetPrevNum+0x30>)
 8000bba:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000020 	.word	0x20000020
 8000bd0:	20000024 	.word	0x20000024
 8000bd4:	20000028 	.word	0x20000028

08000bd8 <hourScreen>:

void hourScreen(bool status, bool isEdit){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
	if(prevHourNum != hourNum || isEdit == true){
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <hourScreen+0xd0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <hourScreen+0xd4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d102      	bne.n	8000bfa <hourScreen+0x22>
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d04e      	beq.n	8000c98 <hourScreen+0xc0>
		if(status == true){
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d025      	beq.n	8000c4c <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <hourScreen+0xd4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	492a      	ldr	r1, [pc, #168]	; (8000cb0 <hourScreen+0xd8>)
 8000c08:	482a      	ldr	r0, [pc, #168]	; (8000cb4 <hourScreen+0xdc>)
 8000c0a:	f007 f823 	bl	8007c54 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth-5, maxHeight*0.3, WHITE, 6, BLACK);
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <hourScreen+0xe0>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3b05      	subs	r3, #5
 8000c16:	b2d9      	uxtb	r1, r3
 8000c18:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <hourScreen+0xe4>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c24:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8000ca0 <hourScreen+0xc8>
 8000c28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c30:	edc7 7a00 	vstr	s15, [r7]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	2306      	movs	r3, #6
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c44:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <hourScreen+0xdc>)
 8000c46:	f001 fdef 	bl	8002828 <ILI9341_Draw_Text>
 8000c4a:	e021      	b.n	8000c90 <hourScreen+0xb8>
		}else{
			sprintf(Temp_Buffer_text, "  ");
 8000c4c:	491c      	ldr	r1, [pc, #112]	; (8000cc0 <hourScreen+0xe8>)
 8000c4e:	4819      	ldr	r0, [pc, #100]	; (8000cb4 <hourScreen+0xdc>)
 8000c50:	f007 f800 	bl	8007c54 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth-5, maxHeight*0.3, WHITE, 6, BLACK);
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <hourScreen+0xe0>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	3b05      	subs	r3, #5
 8000c5c:	b2d9      	uxtb	r1, r3
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <hourScreen+0xe4>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c6a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000ca0 <hourScreen+0xc8>
 8000c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c76:	edc7 7a00 	vstr	s15, [r7]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2306      	movs	r3, #6
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8a:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <hourScreen+0xdc>)
 8000c8c:	f001 fdcc 	bl	8002828 <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <hourScreen+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <hourScreen+0xd0>)
 8000c96:	6013      	str	r3, [r2, #0]
	}
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	33333333 	.word	0x33333333
 8000ca4:	3fd33333 	.word	0x3fd33333
 8000ca8:	20000028 	.word	0x20000028
 8000cac:	2000001c 	.word	0x2000001c
 8000cb0:	08009ff4 	.word	0x08009ff4
 8000cb4:	20000388 	.word	0x20000388
 8000cb8:	20000030 	.word	0x20000030
 8000cbc:	20000032 	.word	0x20000032
 8000cc0:	08009ffc 	.word	0x08009ffc
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <colonScreen>:

void colonScreen(bool status){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	if(status == true){
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d022      	beq.n	8000d1e <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8000cd8:	4927      	ldr	r1, [pc, #156]	; (8000d78 <colonScreen+0xb0>)
 8000cda:	4828      	ldr	r0, [pc, #160]	; (8000d7c <colonScreen+0xb4>)
 8000cdc:	f006 ffba 	bl	8007c54 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth+75, maxHeight*0.35, WHITE, 4, BLACK);
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <colonScreen+0xb8>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	334b      	adds	r3, #75	; 0x4b
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <colonScreen+0xbc>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cf6:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8000d70 <colonScreen+0xa8>
 8000cfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cfe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d02:	edc7 7a00 	vstr	s15, [r7]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	2304      	movs	r3, #4
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d16:	4819      	ldr	r0, [pc, #100]	; (8000d7c <colonScreen+0xb4>)
 8000d18:	f001 fd86 	bl	8002828 <ILI9341_Draw_Text>
	}else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth+75, maxHeight*0.35, WHITE, 4, BLACK);
	}

}
 8000d1c:	e021      	b.n	8000d62 <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 8000d1e:	491a      	ldr	r1, [pc, #104]	; (8000d88 <colonScreen+0xc0>)
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <colonScreen+0xb4>)
 8000d22:	f006 ff97 	bl	8007c54 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth+75, maxHeight*0.35, WHITE, 4, BLACK);
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <colonScreen+0xb8>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	334b      	adds	r3, #75	; 0x4b
 8000d2e:	b2d9      	uxtb	r1, r3
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <colonScreen+0xbc>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	ee07 3a90 	vmov	s15, r3
 8000d38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d3c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000d70 <colonScreen+0xa8>
 8000d40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d48:	edc7 7a00 	vstr	s15, [r7]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2304      	movs	r3, #4
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <colonScreen+0xb4>)
 8000d5e:	f001 fd63 	bl	8002828 <ILI9341_Draw_Text>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w
 8000d70:	66666666 	.word	0x66666666
 8000d74:	3fd66666 	.word	0x3fd66666
 8000d78:	0800a000 	.word	0x0800a000
 8000d7c:	20000388 	.word	0x20000388
 8000d80:	20000030 	.word	0x20000030
 8000d84:	20000032 	.word	0x20000032
 8000d88:	0800a004 	.word	0x0800a004
 8000d8c:	00000000 	.word	0x00000000

08000d90 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
	if(prevMinuteNum != minuteNum || isEdit == true){
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <minuteScreen+0xd0>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <minuteScreen+0xd4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d102      	bne.n	8000db2 <minuteScreen+0x22>
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d04e      	beq.n	8000e50 <minuteScreen+0xc0>
		if(status == true){
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d025      	beq.n	8000e04 <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <minuteScreen+0xd4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	492a      	ldr	r1, [pc, #168]	; (8000e68 <minuteScreen+0xd8>)
 8000dc0:	482a      	ldr	r0, [pc, #168]	; (8000e6c <minuteScreen+0xdc>)
 8000dc2:	f006 ff47 	bl	8007c54 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth+100, maxHeight*0.3, WHITE, 6, BLACK);
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <minuteScreen+0xe0>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	3364      	adds	r3, #100	; 0x64
 8000dce:	b2d9      	uxtb	r1, r3
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <minuteScreen+0xe4>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ddc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8000e58 <minuteScreen+0xc8>
 8000de0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000de4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000de8:	edc7 7a00 	vstr	s15, [r7]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	2306      	movs	r3, #6
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfc:	481b      	ldr	r0, [pc, #108]	; (8000e6c <minuteScreen+0xdc>)
 8000dfe:	f001 fd13 	bl	8002828 <ILI9341_Draw_Text>
 8000e02:	e021      	b.n	8000e48 <minuteScreen+0xb8>
		}else{
			sprintf(Temp_Buffer_text, "  ");
 8000e04:	491c      	ldr	r1, [pc, #112]	; (8000e78 <minuteScreen+0xe8>)
 8000e06:	4819      	ldr	r0, [pc, #100]	; (8000e6c <minuteScreen+0xdc>)
 8000e08:	f006 ff24 	bl	8007c54 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth+100, maxHeight*0.3, WHITE, 6, BLACK);
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <minuteScreen+0xe0>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3364      	adds	r3, #100	; 0x64
 8000e14:	b2d9      	uxtb	r1, r3
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <minuteScreen+0xe4>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e22:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000e58 <minuteScreen+0xc8>
 8000e26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e2e:	edc7 7a00 	vstr	s15, [r7]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	2300      	movs	r3, #0
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e42:	480a      	ldr	r0, [pc, #40]	; (8000e6c <minuteScreen+0xdc>)
 8000e44:	f001 fcf0 	bl	8002828 <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <minuteScreen+0xd4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <minuteScreen+0xd0>)
 8000e4e:	6013      	str	r3, [r2, #0]
	}

}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	33333333 	.word	0x33333333
 8000e5c:	3fd33333 	.word	0x3fd33333
 8000e60:	20000024 	.word	0x20000024
 8000e64:	20000018 	.word	0x20000018
 8000e68:	08009ff4 	.word	0x08009ff4
 8000e6c:	20000388 	.word	0x20000388
 8000e70:	20000030 	.word	0x20000030
 8000e74:	20000032 	.word	0x20000032
 8000e78:	08009ffc 	.word	0x08009ffc
 8000e7c:	00000000 	.word	0x00000000

08000e80 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
	if(prevSecondNum != secondNum || isEdit == true){
 8000e90:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <secondScreen+0x128>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <secondScreen+0x12c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d102      	bne.n	8000ea2 <secondScreen+0x22>
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d074      	beq.n	8000f8c <secondScreen+0x10c>
		if(status == true){
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d038      	beq.n	8000f1a <secondScreen+0x9a>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8000ea8:	4b40      	ldr	r3, [pc, #256]	; (8000fac <secondScreen+0x12c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4940      	ldr	r1, [pc, #256]	; (8000fb0 <secondScreen+0x130>)
 8000eb0:	4840      	ldr	r0, [pc, #256]	; (8000fb4 <secondScreen+0x134>)
 8000eb2:	f006 fecf 	bl	8007c54 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.90 + offsetWidth, maxHeight*0.42, WHITE, 2, BLACK);
 8000eb6:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <secondScreen+0x138>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ec2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000f98 <secondScreen+0x118>
 8000ec6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <secondScreen+0x13c>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ed6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000eda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ede:	edc7 7a00 	vstr	s15, [r7]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2d9      	uxtb	r1, r3
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <secondScreen+0x140>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000fa0 <secondScreen+0x120>
 8000ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000efe:	edc7 7a00 	vstr	s15, [r7]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	2300      	movs	r3, #0
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f12:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <secondScreen+0x134>)
 8000f14:	f001 fc88 	bl	8002828 <ILI9341_Draw_Text>
 8000f18:	e034      	b.n	8000f84 <secondScreen+0x104>
		}else{
			sprintf(Temp_Buffer_text, "  ");
 8000f1a:	492a      	ldr	r1, [pc, #168]	; (8000fc4 <secondScreen+0x144>)
 8000f1c:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <secondScreen+0x134>)
 8000f1e:	f006 fe99 	bl	8007c54 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.90 + offsetWidth, maxHeight*0.42, WHITE, 2, BLACK);
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <secondScreen+0x138>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f2e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000f98 <secondScreen+0x118>
 8000f32:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <secondScreen+0x13c>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f4a:	edc7 7a00 	vstr	s15, [r7]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2d9      	uxtb	r1, r3
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <secondScreen+0x140>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f5e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000fa0 <secondScreen+0x120>
 8000f62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f6a:	edc7 7a00 	vstr	s15, [r7]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	2300      	movs	r3, #0
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2302      	movs	r3, #2
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <secondScreen+0x134>)
 8000f80:	f001 fc52 	bl	8002828 <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <secondScreen+0x12c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <secondScreen+0x128>)
 8000f8a:	6013      	str	r3, [r2, #0]
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	f3af 8000 	nop.w
 8000f98:	cccccccd 	.word	0xcccccccd
 8000f9c:	3feccccc 	.word	0x3feccccc
 8000fa0:	ae147ae1 	.word	0xae147ae1
 8000fa4:	3fdae147 	.word	0x3fdae147
 8000fa8:	20000020 	.word	0x20000020
 8000fac:	20000014 	.word	0x20000014
 8000fb0:	08009ff4 	.word	0x08009ff4
 8000fb4:	20000388 	.word	0x20000388
 8000fb8:	2000002e 	.word	0x2000002e
 8000fbc:	20000030 	.word	0x20000030
 8000fc0:	20000032 	.word	0x20000032
 8000fc4:	08009ffc 	.word	0x08009ffc

08000fc8 <displayClockScreen>:

void displayClockScreen(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

	if(halfsecondState == false){ // colon behaviour
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <displayClockScreen+0x3c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <displayClockScreen+0x1a>
		colonScreen(true);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff fe74 	bl	8000cc8 <colonScreen>
 8000fe0:	e002      	b.n	8000fe8 <displayClockScreen+0x20>
	}else{
		colonScreen(false);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fe70 	bl	8000cc8 <colonScreen>
	}

	secondScreen(true,false);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff ff48 	bl	8000e80 <secondScreen>
	minuteScreen(true,false);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff fecc 	bl	8000d90 <minuteScreen>
	hourScreen(true,false);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff fdec 	bl	8000bd8 <hourScreen>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000002c 	.word	0x2000002c

08001008 <editHourScreen>:

void editHourScreen(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

	colonScreen(true);
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff fe5b 	bl	8000cc8 <colonScreen>
	minuteScreen(true,false);
 8001012:	2100      	movs	r1, #0
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff febb 	bl	8000d90 <minuteScreen>
	secondScreen(true,false);
 800101a:	2100      	movs	r1, #0
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff ff2f 	bl	8000e80 <secondScreen>

	if(halfsecondState == false){ // hour
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <editHourScreen+0x40>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <editHourScreen+0x32>
		hourScreen(false,true);
 8001030:	2101      	movs	r1, #1
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fdd0 	bl	8000bd8 <hourScreen>
	}else{
		hourScreen(true,true);
	}

}
 8001038:	e003      	b.n	8001042 <editHourScreen+0x3a>
		hourScreen(true,true);
 800103a:	2101      	movs	r1, #1
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fdcb 	bl	8000bd8 <hourScreen>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000002c 	.word	0x2000002c

0800104c <editMinuteScreen>:
void editMinuteScreen(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

	colonScreen(true);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff fe39 	bl	8000cc8 <colonScreen>
	hourScreen(true,false);
 8001056:	2100      	movs	r1, #0
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff fdbd 	bl	8000bd8 <hourScreen>
	secondScreen(true,false);
 800105e:	2100      	movs	r1, #0
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff ff0d 	bl	8000e80 <secondScreen>

	if(halfsecondState == false){ //minute
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <editMinuteScreen+0x40>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <editMinuteScreen+0x32>
		minuteScreen(false,true);
 8001074:	2101      	movs	r1, #1
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fe8a 	bl	8000d90 <minuteScreen>
	}else{
		minuteScreen(true,true);
	}

}
 800107c:	e003      	b.n	8001086 <editMinuteScreen+0x3a>
		minuteScreen(true,true);
 800107e:	2101      	movs	r1, #1
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff fe85 	bl	8000d90 <minuteScreen>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000002c 	.word	0x2000002c

08001090 <editSecondScreen>:
void editSecondScreen(){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

	colonScreen(true);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fe17 	bl	8000cc8 <colonScreen>
	hourScreen(true,false);
 800109a:	2100      	movs	r1, #0
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fd9b 	bl	8000bd8 <hourScreen>
	minuteScreen(true,false);
 80010a2:	2100      	movs	r1, #0
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe73 	bl	8000d90 <minuteScreen>

	if(halfsecondState == false){  //second
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <editSecondScreen+0x40>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <editSecondScreen+0x32>
		secondScreen(false,true);
 80010b8:	2101      	movs	r1, #1
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fee0 	bl	8000e80 <secondScreen>
	}else{
		secondScreen(true,true);
	}

}
 80010c0:	e003      	b.n	80010ca <editSecondScreen+0x3a>
		secondScreen(true,true);
 80010c2:	2101      	movs	r1, #1
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fedb 	bl	8000e80 <secondScreen>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000002c 	.word	0x2000002c
 80010d4:	00000000 	.word	0x00000000

080010d8 <bottomBarScreen>:

void bottomBarScreen(){
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b087      	sub	sp, #28
 80010dc:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	73fb      	strb	r3, [r7, #15]
	//uint16_t maxWidthFull = 320;
	uint8_t bottomHeight = maxHeight*0.87;
 80010e2:	4bb3      	ldr	r3, [pc, #716]	; (80013b0 <bottomBarScreen+0x2d8>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ee:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001398 <bottomBarScreen+0x2c0>
 80010f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth*0+51;
 8001102:	2333      	movs	r3, #51	; 0x33
 8001104:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth*0.25+51;
 8001106:	4bab      	ldr	r3, [pc, #684]	; (80013b4 <bottomBarScreen+0x2dc>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001112:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001116:	ee27 7b06 	vmul.f64	d7, d7, d6
 800111a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80013a0 <bottomBarScreen+0x2c8>
 800111e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001122:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001126:	edc7 7a01 	vstr	s15, [r7, #4]
 800112a:	793b      	ldrb	r3, [r7, #4]
 800112c:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth*0.50+51;
 800112e:	4ba1      	ldr	r3, [pc, #644]	; (80013b4 <bottomBarScreen+0x2dc>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800113a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800113e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001142:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80013a0 <bottomBarScreen+0x2c8>
 8001146:	ee37 7b06 	vadd.f64	d7, d7, d6
 800114a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800114e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001152:	793b      	ldrb	r3, [r7, #4]
 8001154:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth*0.75+51;
 8001156:	4b97      	ldr	r3, [pc, #604]	; (80013b4 <bottomBarScreen+0x2dc>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001162:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8001166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800116a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 80013a0 <bottomBarScreen+0x2c8>
 800116e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001172:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001176:	edc7 7a01 	vstr	s15, [r7, #4]
 800117a:	793b      	ldrb	r3, [r7, #4]
 800117c:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 800117e:	2337      	movs	r3, #55	; 0x37
 8001180:	727b      	strb	r3, [r7, #9]

	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1+bottomWidth, maxHeight, RED);
 8001182:	7b7b      	ldrb	r3, [r7, #13]
 8001184:	b298      	uxth	r0, r3
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	b299      	uxth	r1, r3
 800118a:	7b7b      	ldrb	r3, [r7, #13]
 800118c:	b29a      	uxth	r2, r3
 800118e:	7a7b      	ldrb	r3, [r7, #9]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b86      	ldr	r3, [pc, #536]	; (80013b0 <bottomBarScreen+0x2d8>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800119e:	9400      	str	r4, [sp, #0]
 80011a0:	f001 fa47 	bl	8002632 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2+bottomWidth, maxHeight, YELLOW);
 80011a4:	7b3b      	ldrb	r3, [r7, #12]
 80011a6:	b298      	uxth	r0, r3
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	b299      	uxth	r1, r3
 80011ac:	7b3b      	ldrb	r3, [r7, #12]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	7a7b      	ldrb	r3, [r7, #9]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4413      	add	r3, r2
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b7d      	ldr	r3, [pc, #500]	; (80013b0 <bottomBarScreen+0x2d8>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 80011c0:	9400      	str	r4, [sp, #0]
 80011c2:	f001 fa36 	bl	8002632 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3+bottomWidth, maxHeight, CYAN);
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	b298      	uxth	r0, r3
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b75      	ldr	r3, [pc, #468]	; (80013b0 <bottomBarScreen+0x2d8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	f240 74ff 	movw	r4, #2047	; 0x7ff
 80011e2:	9400      	str	r4, [sp, #0]
 80011e4:	f001 fa25 	bl	8002632 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4+bottomWidth, maxHeight, GREEN);
 80011e8:	7abb      	ldrb	r3, [r7, #10]
 80011ea:	b298      	uxth	r0, r3
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	b299      	uxth	r1, r3
 80011f0:	7abb      	ldrb	r3, [r7, #10]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	7a7b      	ldrb	r3, [r7, #9]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b6c      	ldr	r3, [pc, #432]	; (80013b0 <bottomBarScreen+0x2d8>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8001204:	9400      	str	r4, [sp, #0]
 8001206:	f001 fa14 	bl	8002632 <ILI9341_Draw_Filled_Rectangle_Coord>

	sprintf(Temp_Buffer_text, "MOD");
 800120a:	496b      	ldr	r1, [pc, #428]	; (80013b8 <bottomBarScreen+0x2e0>)
 800120c:	486b      	ldr	r0, [pc, #428]	; (80013bc <bottomBarScreen+0x2e4>)
 800120e:	f006 fd21 	bl	8007c54 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0 + offsetWidth, maxHeight*0.9, BLACK, size, RED);
 8001212:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <bottomBarScreen+0x2e8>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b2d9      	uxtb	r1, r3
 8001218:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <bottomBarScreen+0x2d8>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001224:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80013a8 <bottomBarScreen+0x2d0>
 8001228:	ee27 7b06 	vmul.f64	d7, d7, d6
 800122c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001230:	edc7 7a01 	vstr	s15, [r7, #4]
 8001234:	793b      	ldrb	r3, [r7, #4]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	b29b      	uxth	r3, r3
 800123c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001240:	9001      	str	r0, [sp, #4]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	485d      	ldr	r0, [pc, #372]	; (80013bc <bottomBarScreen+0x2e4>)
 8001248:	f001 faee 	bl	8002828 <ILI9341_Draw_Text>

	sprintf(Temp_Buffer_text, "ADJ");
 800124c:	495d      	ldr	r1, [pc, #372]	; (80013c4 <bottomBarScreen+0x2ec>)
 800124e:	485b      	ldr	r0, [pc, #364]	; (80013bc <bottomBarScreen+0x2e4>)
 8001250:	f006 fd00 	bl	8007c54 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.25 + offsetWidth, maxHeight*0.9, BLACK, size, YELLOW);
 8001254:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <bottomBarScreen+0x2dc>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001260:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001264:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <bottomBarScreen+0x2e8>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001274:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001278:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800127c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001280:	793b      	ldrb	r3, [r7, #4]
 8001282:	b2d9      	uxtb	r1, r3
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <bottomBarScreen+0x2d8>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001290:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80013a8 <bottomBarScreen+0x2d0>
 8001294:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001298:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800129c:	edc7 7a01 	vstr	s15, [r7, #4]
 80012a0:	793b      	ldrb	r3, [r7, #4]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80012ac:	9001      	str	r0, [sp, #4]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	4842      	ldr	r0, [pc, #264]	; (80013bc <bottomBarScreen+0x2e4>)
 80012b4:	f001 fab8 	bl	8002828 <ILI9341_Draw_Text>

	sprintf(Temp_Buffer_text, "FWD");
 80012b8:	4943      	ldr	r1, [pc, #268]	; (80013c8 <bottomBarScreen+0x2f0>)
 80012ba:	4840      	ldr	r0, [pc, #256]	; (80013bc <bottomBarScreen+0x2e4>)
 80012bc:	f006 fcca 	bl	8007c54 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.5 + offsetWidth, maxHeight*0.9, BLACK, size, CYAN);
 80012c0:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <bottomBarScreen+0x2dc>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012cc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80012d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <bottomBarScreen+0x2e8>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80012ec:	793b      	ldrb	r3, [r7, #4]
 80012ee:	b2d9      	uxtb	r1, r3
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <bottomBarScreen+0x2d8>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012fc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80013a8 <bottomBarScreen+0x2d0>
 8001300:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001304:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001308:	edc7 7a01 	vstr	s15, [r7, #4]
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	b29b      	uxth	r3, r3
 8001314:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001318:	9001      	str	r0, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <bottomBarScreen+0x2e4>)
 8001320:	f001 fa82 	bl	8002828 <ILI9341_Draw_Text>

	sprintf(Temp_Buffer_text, "BWD");
 8001324:	4929      	ldr	r1, [pc, #164]	; (80013cc <bottomBarScreen+0x2f4>)
 8001326:	4825      	ldr	r0, [pc, #148]	; (80013bc <bottomBarScreen+0x2e4>)
 8001328:	f006 fc94 	bl	8007c54 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.75 + offsetWidth, maxHeight*0.9, BLACK, size, GREEN);
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <bottomBarScreen+0x2dc>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001338:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 800133c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <bottomBarScreen+0x2e8>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800134c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001350:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001354:	edc7 7a01 	vstr	s15, [r7, #4]
 8001358:	793b      	ldrb	r3, [r7, #4]
 800135a:	b2d9      	uxtb	r1, r3
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <bottomBarScreen+0x2d8>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001368:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80013a8 <bottomBarScreen+0x2d0>
 800136c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001370:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001374:	edc7 7a01 	vstr	s15, [r7, #4]
 8001378:	793b      	ldrb	r3, [r7, #4]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b29b      	uxth	r3, r3
 8001380:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001384:	9001      	str	r0, [sp, #4]
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2300      	movs	r3, #0
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <bottomBarScreen+0x2e4>)
 800138c:	f001 fa4c 	bl	8002828 <ILI9341_Draw_Text>

}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	3d70a3d7 	.word	0x3d70a3d7
 800139c:	3febd70a 	.word	0x3febd70a
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40498000 	.word	0x40498000
 80013a8:	cccccccd 	.word	0xcccccccd
 80013ac:	3feccccc 	.word	0x3feccccc
 80013b0:	20000032 	.word	0x20000032
 80013b4:	2000002e 	.word	0x2000002e
 80013b8:	0800a008 	.word	0x0800a008
 80013bc:	20000388 	.word	0x20000388
 80013c0:	20000030 	.word	0x20000030
 80013c4:	0800a00c 	.word	0x0800a00c
 80013c8:	0800a010 	.word	0x0800a010
 80013cc:	0800a014 	.word	0x0800a014

080013d0 <buzzerSound>:

void buzzerSound(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	  htim3.Instance -> CCR1 = (1000-1) * 0.5;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <buzzerSound+0x28>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <buzzerSound+0x28>)
 80013e2:	f004 f939 	bl	8005658 <HAL_TIM_PWM_Start>
	  HAL_Delay(70);
 80013e6:	2046      	movs	r0, #70	; 0x46
 80013e8:	f001 feec 	bl	80031c4 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80013ec:	2100      	movs	r1, #0
 80013ee:	4802      	ldr	r0, [pc, #8]	; (80013f8 <buzzerSound+0x28>)
 80013f0:	f004 fa2c 	bl	800584c <HAL_TIM_PWM_Stop>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000424 	.word	0x20000424

080013fc <assignmentTwo>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void assignmentTwo(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

	calculationClock(millisecond);
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <assignmentTwo+0x9c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fb2d 	bl	8000a64 <calculationClock>

	if(prevMode != mode || prevModeEdit != modeEdit){
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <assignmentTwo+0xa0>)
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <assignmentTwo+0xa4>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d105      	bne.n	8001422 <assignmentTwo+0x26>
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <assignmentTwo+0xa8>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <assignmentTwo+0xac>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d005      	beq.n	800142e <assignmentTwo+0x32>
		prevModeEdit = modeEdit;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <assignmentTwo+0xac>)
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <assignmentTwo+0xa8>)
 8001428:	801a      	strh	r2, [r3, #0]
		resetPrevNum();
 800142a:	f7ff fbbb 	bl	8000ba4 <resetPrevNum>
	}
	if(prevMode != mode){
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <assignmentTwo+0xa0>)
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <assignmentTwo+0xa4>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d00b      	beq.n	8001452 <assignmentTwo+0x56>
		prevMode = mode;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <assignmentTwo+0xa4>)
 800143c:	881a      	ldrh	r2, [r3, #0]
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <assignmentTwo+0xa0>)
 8001440:	801a      	strh	r2, [r3, #0]
		setHorizontalScreen(BLACK);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fafe 	bl	8000a44 <setHorizontalScreen>
		initialState = false;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <assignmentTwo+0xb0>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
		bottomBarScreen();
 800144e:	f7ff fe43 	bl	80010d8 <bottomBarScreen>
	}


	if(mode == 0){
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <assignmentTwo+0xa4>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d104      	bne.n	8001464 <assignmentTwo+0x68>
		topBarScreen();
 800145a:	f7ff fb51 	bl	8000b00 <topBarScreen>
		displayClockScreen();
 800145e:	f7ff fdb3 	bl	8000fc8 <displayClockScreen>

	//Test huart1 UART PB6 TX - PB15 RX
//	sprintf(Temp_Buffer_text, "AA");
//	HAL_UART_Transmit(&huart1, (uint8_t*) Temp_Buffer_text, strlen(Temp_Buffer_text), 1000);

}
 8001462:	e017      	b.n	8001494 <assignmentTwo+0x98>
	}else if(mode == 100){ // Adjust time
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <assignmentTwo+0xa4>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d113      	bne.n	8001494 <assignmentTwo+0x98>
		if(modeEdit == 1){
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <assignmentTwo+0xac>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <assignmentTwo+0x7e>
			editHourScreen();
 8001474:	f7ff fdc8 	bl	8001008 <editHourScreen>
}
 8001478:	e00c      	b.n	8001494 <assignmentTwo+0x98>
		}else if(modeEdit == 2){
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <assignmentTwo+0xac>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d102      	bne.n	8001488 <assignmentTwo+0x8c>
			editMinuteScreen();
 8001482:	f7ff fde3 	bl	800104c <editMinuteScreen>
}
 8001486:	e005      	b.n	8001494 <assignmentTwo+0x98>
		}else if(modeEdit == 3){
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <assignmentTwo+0xac>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d101      	bne.n	8001494 <assignmentTwo+0x98>
			editSecondScreen();
 8001490:	f7ff fdfe 	bl	8001090 <editSecondScreen>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000238 	.word	0x20000238
 800149c:	20000036 	.word	0x20000036
 80014a0:	20000242 	.word	0x20000242
 80014a4:	20000038 	.word	0x20000038
 80014a8:	20000034 	.word	0x20000034
 80014ac:	20000240 	.word	0x20000240

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
int main(void)
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80014bc:	f7ff fa58 	bl	8000970 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80014c0:	f7ff fa7c 	bl	80009bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f001 fe12 	bl	80030ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 fb62 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff f88c 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014d0:	f000 ffce 	bl	8002470 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 80014d4:	f000 fc30 	bl	8001d38 <MX_SPI5_Init>
  MX_TIM1_Init();
 80014d8:	f000 fdf4 	bl	80020c4 <MX_TIM1_Init>
  MX_RNG_Init();
 80014dc:	f000 fbf8 	bl	8001cd0 <MX_RNG_Init>
  MX_I2C1_Init();
 80014e0:	f7ff f9c2 	bl	8000868 <MX_I2C1_Init>
  MX_TIM2_Init();
 80014e4:	f000 fe42 	bl	800216c <MX_TIM2_Init>
  MX_TIM3_Init();
 80014e8:	f000 fe8e 	bl	8002208 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80014ec:	f000 ff90 	bl	8002410 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Temp but not has code in here yet
  cmdBuffer[0] = 0x03;
 80014f0:	4b87      	ldr	r3, [pc, #540]	; (8001710 <main+0x260>)
 80014f2:	2203      	movs	r2, #3
 80014f4:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1] = 0x00;
 80014f6:	4b86      	ldr	r3, [pc, #536]	; (8001710 <main+0x260>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2] = 0x04;
 80014fc:	4b84      	ldr	r3, [pc, #528]	; (8001710 <main+0x260>)
 80014fe:	2204      	movs	r2, #4
 8001500:	709a      	strb	r2, [r3, #2]

  //initial driver setup to drive ili9341
  ILI9341_Init();
 8001502:	f001 faef 	bl	8002ae4 <ILI9341_Init>


  //Interrupt millisecond
  HAL_TIM_Base_Start_IT(&htim1);
 8001506:	4883      	ldr	r0, [pc, #524]	; (8001714 <main+0x264>)
 8001508:	f003 ffcc 	bl	80054a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800150c:	4882      	ldr	r0, [pc, #520]	; (8001718 <main+0x268>)
 800150e:	f003 ffc9 	bl	80054a4 <HAL_TIM_Base_Start_IT>


  //Reset Screen
  setHorizontalScreen(BLACK);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fa96 	bl	8000a44 <setHorizontalScreen>

  // Setup PM Sensor
  for (int i = 0; i < sizeof(data); i++) {
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e007      	b.n	800152e <main+0x7e>
  	data[i] = 0x00;
 800151e:	4a7f      	ldr	r2, [pc, #508]	; (800171c <main+0x26c>)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(data); i++) {
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b45      	cmp	r3, #69	; 0x45
 8001532:	d9f4      	bls.n	800151e <main+0x6e>
  }
  for (int i = 0; i < sizeof(concatenateHex); i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	e007      	b.n	800154a <main+0x9a>
  	concatenateHex[i] = 0;
 800153a:	4a79      	ldr	r2, [pc, #484]	; (8001720 <main+0x270>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2100      	movs	r1, #0
 8001540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < sizeof(concatenateHex); i++) {
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	3301      	adds	r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b27      	cmp	r3, #39	; 0x27
 800154e:	d9f4      	bls.n	800153a <main+0x8a>
   }
  for (int i = 0; i < sizeof(actualValue); i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	e009      	b.n	800156a <main+0xba>
  	actualValue[i] = 0;
 8001556:	4a73      	ldr	r2, [pc, #460]	; (8001724 <main+0x274>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < sizeof(actualValue); i++) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3301      	adds	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b27      	cmp	r3, #39	; 0x27
 800156e:	d9f2      	bls.n	8001556 <main+0xa6>
        }
    }
    // start frame is 0x7E and address device is 0x00
    // finding checksum

  while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC) == RESET){}
 8001570:	bf00      	nop
 8001572:	4b6d      	ldr	r3, [pc, #436]	; (8001728 <main+0x278>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	d1f8      	bne.n	8001572 <main+0xc2>
  HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8001580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001584:	220a      	movs	r2, #10
 8001586:	4969      	ldr	r1, [pc, #420]	; (800172c <main+0x27c>)
 8001588:	4867      	ldr	r0, [pc, #412]	; (8001728 <main+0x278>)
 800158a:	f005 f9bf 	bl	800690c <HAL_UART_Transmit>
  while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC) == RESET){}
 800158e:	bf00      	nop
 8001590:	4b65      	ldr	r3, [pc, #404]	; (8001728 <main+0x278>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	2b40      	cmp	r3, #64	; 0x40
 800159c:	d1f8      	bne.n	8001590 <main+0xe0>
  HAL_UART_Receive(&huart1,(uint8_t *)data , sizeof(data) , 1000);
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	2246      	movs	r2, #70	; 0x46
 80015a4:	495d      	ldr	r1, [pc, #372]	; (800171c <main+0x26c>)
 80015a6:	4860      	ldr	r0, [pc, #384]	; (8001728 <main+0x278>)
 80015a8:	f005 fa43 	bl	8006a32 <HAL_UART_Receive>
//  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET){}
//  HAL_UART_Transmit(&huart3, (uint8_t *)data, sizeof(data), 1000);

  HAL_Delay(1000);
 80015ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b0:	f001 fe08 	bl	80031c4 <HAL_Delay>
  readData();
 80015b4:	463b      	mov	r3, r7
 80015b6:	469c      	mov	ip, r3
 80015b8:	f000 f9fa 	bl	80019b0 <readData.10722>
  HAL_Delay(1000);
 80015bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c0:	f001 fe00 	bl	80031c4 <HAL_Delay>
//	  char stringBuffer[30];
//	  sprintf(stringBuffer, "%d\r\n" , millisecond);
//	  HAL_UART_Transmit(&huart3, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);


	  if(halfsecond == 1){  // interupt every 500 ms
 80015c4:	4b5a      	ldr	r3, [pc, #360]	; (8001730 <main+0x280>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d113      	bne.n	80015f4 <main+0x144>
		  halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <main+0x284>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	f083 0301 	eor.w	r3, r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <main+0x284>)
 80015e8:	701a      	strb	r2, [r3, #0]
		  //displayClock(millisecond);
		  halfsecond = 0;
 80015ea:	4b51      	ldr	r3, [pc, #324]	; (8001730 <main+0x280>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
		  assignmentTwo();
 80015f0:	f7ff ff04 	bl	80013fc <assignmentTwo>
	  }

	  pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	4850      	ldr	r0, [pc, #320]	; (8001738 <main+0x288>)
 80015f8:	f002 f8c6 	bl	8003788 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <main+0x28c>)
 800160a:	701a      	strb	r2, [r3, #0]
	  pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	484a      	ldr	r0, [pc, #296]	; (8001738 <main+0x288>)
 8001610:	f002 f8ba 	bl	8003788 <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <main+0x290>)
 8001622:	701a      	strb	r2, [r3, #0]
	  pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8001624:	2120      	movs	r1, #32
 8001626:	4844      	ldr	r0, [pc, #272]	; (8001738 <main+0x288>)
 8001628:	f002 f8ae 	bl	8003788 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf0c      	ite	eq
 8001632:	2301      	moveq	r3, #1
 8001634:	2300      	movne	r3, #0
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <main+0x294>)
 800163a:	701a      	strb	r2, [r3, #0]
	  pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 800163c:	2110      	movs	r1, #16
 800163e:	483e      	ldr	r0, [pc, #248]	; (8001738 <main+0x288>)
 8001640:	f002 f8a2 	bl	8003788 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <main+0x298>)
 8001652:	701a      	strb	r2, [r3, #0]

	  //Buzzer
	  if((pressButton1 == true && isPressButton1 == false) ||
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <main+0x28c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <main+0x1ba>
 800165c:	4b3b      	ldr	r3, [pc, #236]	; (800174c <main+0x29c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d120      	bne.n	80016ac <main+0x1fc>
		  (pressButton2 == true && isPressButton2 == false) ||
 800166a:	4b35      	ldr	r3, [pc, #212]	; (8001740 <main+0x290>)
 800166c:	781b      	ldrb	r3, [r3, #0]
	  if((pressButton1 == true && isPressButton1 == false) ||
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <main+0x1d0>
		  (pressButton2 == true && isPressButton2 == false) ||
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <main+0x2a0>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	f083 0301 	eor.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d115      	bne.n	80016ac <main+0x1fc>
		  (pressButton3 == true && isPressButton3 == false) ||
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <main+0x294>)
 8001682:	781b      	ldrb	r3, [r3, #0]
		  (pressButton2 == true && isPressButton2 == false) ||
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <main+0x1e6>
		  (pressButton3 == true && isPressButton3 == false) ||
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <main+0x2a4>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f083 0301 	eor.w	r3, r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10a      	bne.n	80016ac <main+0x1fc>
		  (pressButton4 == true && isPressButton4 == false)){
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <main+0x298>)
 8001698:	781b      	ldrb	r3, [r3, #0]
		  (pressButton3 == true && isPressButton3 == false) ||
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <main+0x200>
		  (pressButton4 == true && isPressButton4 == false)){
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <main+0x2a8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <main+0x200>
		  buzzerSound();
 80016ac:	f7ff fe90 	bl	80013d0 <buzzerSound>
	  }


	  //General Mode
	  if(pressButton1 == true && isPressButton1 == false && mode == 0){ // increase mode only once
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <main+0x28c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <main+0x230>
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <main+0x29c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00c      	beq.n	80016e0 <main+0x230>
 80016c6:	4b25      	ldr	r3, [pc, #148]	; (800175c <main+0x2ac>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <main+0x230>
		  mode++;
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <main+0x2ac>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <main+0x2ac>)
 80016d8:	801a      	strh	r2, [r3, #0]
		  isPressButton1 = true;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <main+0x29c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
	  }


	  //Adjust Time Mode
  	  if(pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <main+0x290>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03f      	beq.n	8001768 <main+0x2b8>
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <main+0x2a0>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d038      	beq.n	8001768 <main+0x2b8>
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <main+0x2ac>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d134      	bne.n	8001768 <main+0x2b8>
  		  isPressButton2 = true;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <main+0x2a0>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
  		  prevSecondCounter = millisecondHAL;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <main+0x2b0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <main+0x2b4>)
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	e04a      	b.n	80017a6 <main+0x2f6>
 8001710:	200002ac 	.word	0x200002ac
 8001714:	20000470 	.word	0x20000470
 8001718:	200004bc 	.word	0x200004bc
 800171c:	2000030c 	.word	0x2000030c
 8001720:	200002dc 	.word	0x200002dc
 8001724:	200002b4 	.word	0x200002b4
 8001728:	2000058c 	.word	0x2000058c
 800172c:	20000000 	.word	0x20000000
 8001730:	2000023c 	.word	0x2000023c
 8001734:	2000002c 	.word	0x2000002c
 8001738:	40020c00 	.word	0x40020c00
 800173c:	20000244 	.word	0x20000244
 8001740:	20000245 	.word	0x20000245
 8001744:	20000246 	.word	0x20000246
 8001748:	20000247 	.word	0x20000247
 800174c:	20000248 	.word	0x20000248
 8001750:	20000249 	.word	0x20000249
 8001754:	2000024a 	.word	0x2000024a
 8001758:	2000024b 	.word	0x2000024b
 800175c:	20000242 	.word	0x20000242
 8001760:	20000250 	.word	0x20000250
 8001764:	2000024c 	.word	0x2000024c
  	  }else if(pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 8001768:	4b78      	ldr	r3, [pc, #480]	; (800194c <main+0x49c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01a      	beq.n	80017a6 <main+0x2f6>
 8001770:	4b77      	ldr	r3, [pc, #476]	; (8001950 <main+0x4a0>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d016      	beq.n	80017a6 <main+0x2f6>
 8001778:	4b76      	ldr	r3, [pc, #472]	; (8001954 <main+0x4a4>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d112      	bne.n	80017a6 <main+0x2f6>
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <main+0x4a8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a75      	ldr	r2, [pc, #468]	; (800195c <main+0x4ac>)
 8001786:	8812      	ldrh	r2, [r2, #0]
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800178e:	4293      	cmp	r3, r2
 8001790:	d909      	bls.n	80017a6 <main+0x2f6>
		  buzzerSound();
 8001792:	f7ff fe1d 	bl	80013d0 <buzzerSound>
  		  mode = 100;
 8001796:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <main+0x4a4>)
 8001798:	2264      	movs	r2, #100	; 0x64
 800179a:	801a      	strh	r2, [r3, #0]
		  prevSecondCounter = millisecondHAL;
 800179c:	4b6e      	ldr	r3, [pc, #440]	; (8001958 <main+0x4a8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b6e      	ldr	r3, [pc, #440]	; (800195c <main+0x4ac>)
 80017a4:	801a      	strh	r2, [r3, #0]
	  }

  	  //Exit Adjust Time Mode
  	  if(pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 80017a6:	4b69      	ldr	r3, [pc, #420]	; (800194c <main+0x49c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01d      	beq.n	80017ea <main+0x33a>
 80017ae:	4b68      	ldr	r3, [pc, #416]	; (8001950 <main+0x4a0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f083 0301 	eor.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d016      	beq.n	80017ea <main+0x33a>
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <main+0x4a8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a66      	ldr	r2, [pc, #408]	; (800195c <main+0x4ac>)
 80017c2:	8812      	ldrh	r2, [r2, #0]
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ca:	d30e      	bcc.n	80017ea <main+0x33a>
 80017cc:	4b61      	ldr	r3, [pc, #388]	; (8001954 <main+0x4a4>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d10a      	bne.n	80017ea <main+0x33a>
  		  isPressButton2 = true;
 80017d4:	4b5e      	ldr	r3, [pc, #376]	; (8001950 <main+0x4a0>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
  		  mode = 0;
 80017da:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <main+0x4a4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	801a      	strh	r2, [r3, #0]
  		  prevSecondCounter = millisecondHAL;
 80017e0:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <main+0x4a8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <main+0x4ac>)
 80017e8:	801a      	strh	r2, [r3, #0]
  	  }

  	  //Edit Mode
	  if(pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 80017ea:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <main+0x4b0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01d      	beq.n	800182e <main+0x37e>
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <main+0x4b4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	f083 0301 	eor.w	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d016      	beq.n	800182e <main+0x37e>
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <main+0x4a4>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d112      	bne.n	800182e <main+0x37e>
		  modeEdit++;
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <main+0x4b8>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b55      	ldr	r3, [pc, #340]	; (8001968 <main+0x4b8>)
 8001812:	801a      	strh	r2, [r3, #0]
		  isPressButton1 = true;
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <main+0x4b4>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
		  if(modeEdit == 4){ // finish loop edit
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <main+0x4b8>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	2b04      	cmp	r3, #4
 8001820:	d105      	bne.n	800182e <main+0x37e>
			  modeEdit = 1; // Reset to hour
 8001822:	4b51      	ldr	r3, [pc, #324]	; (8001968 <main+0x4b8>)
 8001824:	2201      	movs	r2, #1
 8001826:	801a      	strh	r2, [r3, #0]
			  mode = 0;	// Back to General Mode
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <main+0x4a4>)
 800182a:	2200      	movs	r2, #0
 800182c:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  //Forward
	  if(pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 800182e:	4b4f      	ldr	r3, [pc, #316]	; (800196c <main+0x4bc>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02d      	beq.n	8001892 <main+0x3e2>
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <main+0x4c0>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	f083 0301 	eor.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d026      	beq.n	8001892 <main+0x3e2>
 8001844:	4b43      	ldr	r3, [pc, #268]	; (8001954 <main+0x4a4>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d122      	bne.n	8001892 <main+0x3e2>
		  if(modeEdit == 1){
 800184c:	4b46      	ldr	r3, [pc, #280]	; (8001968 <main+0x4b8>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <main+0x3b0>
			  hourNum--;
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <main+0x4c4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3b01      	subs	r3, #1
 800185a:	4a46      	ldr	r2, [pc, #280]	; (8001974 <main+0x4c4>)
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e010      	b.n	8001882 <main+0x3d2>
		  }else if(modeEdit == 2){
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <main+0x4b8>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d105      	bne.n	8001874 <main+0x3c4>
			  minuteNum--;
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <main+0x4c8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a42      	ldr	r2, [pc, #264]	; (8001978 <main+0x4c8>)
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e006      	b.n	8001882 <main+0x3d2>
		  }else if(modeEdit == 3){
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <main+0x4b8>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d102      	bne.n	8001882 <main+0x3d2>
			  secondNum = 0;
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <main+0x4cc>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
		  }
		  halfsecondState = false;
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <main+0x4d0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
		  resetPrevNum();
 8001888:	f7ff f98c 	bl	8000ba4 <resetPrevNum>
		  isPressButton3 = true;
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <main+0x4c0>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
	  }

	  //Backward
	  if(pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <main+0x4d4>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d02d      	beq.n	80018f6 <main+0x446>
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <main+0x4d8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d026      	beq.n	80018f6 <main+0x446>
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <main+0x4a4>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d122      	bne.n	80018f6 <main+0x446>
		  if(modeEdit == 1){
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <main+0x4b8>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <main+0x414>
			  hourNum++;
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <main+0x4c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <main+0x4c4>)
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e010      	b.n	80018e6 <main+0x436>
		  }else if(modeEdit == 2){
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <main+0x4b8>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d105      	bne.n	80018d8 <main+0x428>
			  minuteNum++;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <main+0x4c8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	4a29      	ldr	r2, [pc, #164]	; (8001978 <main+0x4c8>)
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e006      	b.n	80018e6 <main+0x436>
		  }else if(modeEdit == 3){
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <main+0x4b8>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d102      	bne.n	80018e6 <main+0x436>
			  secondNum = 0;
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <main+0x4cc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
		  }
		  halfsecondState = false;
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <main+0x4d0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
		  resetPrevNum();
 80018ec:	f7ff f95a 	bl	8000ba4 <resetPrevNum>
		  isPressButton4 = true;
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <main+0x4d8>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
	  }


  	  //Reset isPressButton
	  if(pressButton1 == false){
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <main+0x4b0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <main+0x45a>
		  isPressButton1 = false;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <main+0x4b4>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
	  }
  	  if(pressButton2 == false){
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <main+0x49c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	f083 0301 	eor.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <main+0x46e>
		  isPressButton2 = false;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <main+0x4a0>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
	  }
	  if(pressButton3 == false){
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <main+0x4bc>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	f083 0301 	eor.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <main+0x482>
		  isPressButton3 = false;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <main+0x4c0>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	  }
	  if(pressButton4 == false){
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <main+0x4d4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	f43f ae41 	beq.w	80015c4 <main+0x114>
		  isPressButton4 = false;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <main+0x4d8>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	  if(halfsecond == 1){  // interupt every 500 ms
 8001948:	e63c      	b.n	80015c4 <main+0x114>
 800194a:	bf00      	nop
 800194c:	20000245 	.word	0x20000245
 8001950:	20000249 	.word	0x20000249
 8001954:	20000242 	.word	0x20000242
 8001958:	20000250 	.word	0x20000250
 800195c:	2000024c 	.word	0x2000024c
 8001960:	20000244 	.word	0x20000244
 8001964:	20000248 	.word	0x20000248
 8001968:	20000034 	.word	0x20000034
 800196c:	20000246 	.word	0x20000246
 8001970:	2000024a 	.word	0x2000024a
 8001974:	2000001c 	.word	0x2000001c
 8001978:	20000018 	.word	0x20000018
 800197c:	20000014 	.word	0x20000014
 8001980:	2000002c 	.word	0x2000002c
 8001984:	20000247 	.word	0x20000247
 8001988:	2000024b 	.word	0x2000024b

0800198c <sensirion_bytes_to_float.10716>:
  float sensirion_bytes_to_float(const uint32_t bytes) {
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	f8c7 c000 	str.w	ip, [r7]
      tmp.u32_value = bytes;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60fb      	str	r3, [r7, #12]
      return tmp.float32;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	ee07 3a90 	vmov	s15, r3
  }
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <readData.10722>:
    void readData(){
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08f      	sub	sp, #60	; 0x3c
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4664      	mov	r4, ip
 80019b8:	f8c7 c004 	str.w	ip, [r7, #4]
    while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC) == RESET){}
 80019bc:	bf00      	nop
 80019be:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <readData.10722+0x1b0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c8:	2b40      	cmp	r3, #64	; 0x40
 80019ca:	d1f8      	bne.n	80019be <readData.10722+0xe>
    HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	2208      	movs	r2, #8
 80019d2:	4964      	ldr	r1, [pc, #400]	; (8001b64 <readData.10722+0x1b4>)
 80019d4:	4862      	ldr	r0, [pc, #392]	; (8001b60 <readData.10722+0x1b0>)
 80019d6:	f004 ff99 	bl	800690c <HAL_UART_Transmit>
    while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC) == RESET){}
 80019da:	bf00      	nop
 80019dc:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <readData.10722+0x1b0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b40      	cmp	r3, #64	; 0x40
 80019e8:	d1f8      	bne.n	80019dc <readData.10722+0x2c>
    HAL_UART_Receive(&huart1,(uint8_t *)data , sizeof(data) , 1000);
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	2246      	movs	r2, #70	; 0x46
 80019f0:	495d      	ldr	r1, [pc, #372]	; (8001b68 <readData.10722+0x1b8>)
 80019f2:	485b      	ldr	r0, [pc, #364]	; (8001b60 <readData.10722+0x1b0>)
 80019f4:	f005 f81d 	bl	8006a32 <HAL_UART_Receive>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET){}
 80019f8:	bf00      	nop
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <readData.10722+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	d1f8      	bne.n	80019fa <readData.10722+0x4a>
	  HAL_UART_Transmit(&huart3, (uint8_t *)data, sizeof(data), 1000);
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	2246      	movs	r2, #70	; 0x46
 8001a0e:	4956      	ldr	r1, [pc, #344]	; (8001b68 <readData.10722+0x1b8>)
 8001a10:	4856      	ldr	r0, [pc, #344]	; (8001b6c <readData.10722+0x1bc>)
 8001a12:	f004 ff7b 	bl	800690c <HAL_UART_Transmit>
    if(data[0] == 0x7E && data[1] == 0x00){
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <readData.10722+0x1b8>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b7e      	cmp	r3, #126	; 0x7e
 8001a1c:	f040 809b 	bne.w	8001b56 <readData.10722+0x1a6>
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <readData.10722+0x1b8>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f040 8096 	bne.w	8001b56 <readData.10722+0x1a6>
            command = data[2];
 8001a2a:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <readData.10722+0x1b8>)
 8001a2c:	789a      	ldrb	r2, [r3, #2]
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <readData.10722+0x1c0>)
 8001a30:	701a      	strb	r2, [r3, #0]
            errorcode = data[3];
 8001a32:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <readData.10722+0x1b8>)
 8001a34:	78da      	ldrb	r2, [r3, #3]
 8001a36:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <readData.10722+0x1c4>)
 8001a38:	701a      	strb	r2, [r3, #0]
            length = data[4];
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <readData.10722+0x1b8>)
 8001a3c:	791a      	ldrb	r2, [r3, #4]
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <readData.10722+0x1c8>)
 8001a40:	701a      	strb	r2, [r3, #0]
            state = data[5];
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <readData.10722+0x1b8>)
 8001a44:	795a      	ldrb	r2, [r3, #5]
 8001a46:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <readData.10722+0x1cc>)
 8001a48:	701a      	strb	r2, [r3, #0]
            for(uint8_t i = sizeof(data) ; i > 0 ; i--){
 8001a4a:	2346      	movs	r3, #70	; 0x46
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e011      	b.n	8001a76 <readData.10722+0xc6>
                if(data[i] == 0x7E){
 8001a52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a56:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <readData.10722+0x1b8>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	2b7e      	cmp	r3, #126	; 0x7e
 8001a5c:	d106      	bne.n	8001a6c <readData.10722+0xbc>
                    data[i - 1] = checksum;
 8001a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a62:	3b01      	subs	r3, #1
 8001a64:	4a46      	ldr	r2, [pc, #280]	; (8001b80 <readData.10722+0x1d0>)
 8001a66:	7811      	ldrb	r1, [r2, #0]
 8001a68:	4a3f      	ldr	r2, [pc, #252]	; (8001b68 <readData.10722+0x1b8>)
 8001a6a:	54d1      	strb	r1, [r2, r3]
            for(uint8_t i = sizeof(data) ; i > 0 ; i--){
 8001a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a70:	3b01      	subs	r3, #1
 8001a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e9      	bne.n	8001a52 <readData.10722+0xa2>
            for (int i = 0; i < 10; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
 8001a82:	e021      	b.n	8001ac8 <readData.10722+0x118>
            	concatenateHex[i] = ((data[4 * i  + 5])<<24) + ((data[(4 * i) + 1  + 5])<<16) + ((data[(4 * i) + 2  + 5])<<8) + (data[(4 * i) + 3 + 5]);
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	3305      	adds	r3, #5
 8001a8a:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <readData.10722+0x1b8>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	061a      	lsls	r2, r3, #24
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	3306      	adds	r3, #6
 8001a96:	4934      	ldr	r1, [pc, #208]	; (8001b68 <readData.10722+0x1b8>)
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	441a      	add	r2, r3
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	3307      	adds	r3, #7
 8001aa4:	4930      	ldr	r1, [pc, #192]	; (8001b68 <readData.10722+0x1b8>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	4413      	add	r3, r2
 8001aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aae:	3202      	adds	r2, #2
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	492d      	ldr	r1, [pc, #180]	; (8001b68 <readData.10722+0x1b8>)
 8001ab4:	5c8a      	ldrb	r2, [r1, r2]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <readData.10722+0x1d4>)
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int i = 0; i < 10; i++) {
 8001ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	2b09      	cmp	r3, #9
 8001acc:	ddda      	ble.n	8001a84 <readData.10722+0xd4>
            while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET){}
 8001ace:	bf00      	nop
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <readData.10722+0x1bc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	2b40      	cmp	r3, #64	; 0x40
 8001adc:	d1f8      	bne.n	8001ad0 <readData.10722+0x120>
            HAL_UART_Transmit(&huart3, (uint32_t *)concatenateHex, sizeof(concatenateHex), 1000);
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	2228      	movs	r2, #40	; 0x28
 8001ae4:	4927      	ldr	r1, [pc, #156]	; (8001b84 <readData.10722+0x1d4>)
 8001ae6:	4821      	ldr	r0, [pc, #132]	; (8001b6c <readData.10722+0x1bc>)
 8001ae8:	f004 ff10 	bl	800690c <HAL_UART_Transmit>
            for (int i = 0; i < 10; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af0:	e02e      	b.n	8001b50 <readData.10722+0x1a0>
            	actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 8001af2:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <readData.10722+0x1d4>)
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	46a4      	mov	ip, r4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff45 	bl	800198c <sensirion_bytes_to_float.10716>
 8001b02:	eef0 7a40 	vmov.f32	s15, s0
 8001b06:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <readData.10722+0x1d8>)
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
            	sprintf(stringBuffer, "%.4f\r\n" , actualValue[i]);
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <readData.10722+0x1d8>)
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b22:	f107 000c 	add.w	r0, r7, #12
 8001b26:	ec53 2b17 	vmov	r2, r3, d7
 8001b2a:	4918      	ldr	r1, [pc, #96]	; (8001b8c <readData.10722+0x1dc>)
 8001b2c:	f006 f892 	bl	8007c54 <siprintf>
            	HAL_UART_Transmit(&huart3, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fb83 	bl	8000240 <strlen>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f107 010c 	add.w	r1, r7, #12
 8001b42:	23c8      	movs	r3, #200	; 0xc8
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <readData.10722+0x1bc>)
 8001b46:	f004 fee1 	bl	800690c <HAL_UART_Transmit>
            for (int i = 0; i < 10; i++) {
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	2b09      	cmp	r3, #9
 8001b54:	ddcd      	ble.n	8001af2 <readData.10722+0x142>
    }
 8001b56:	bf00      	nop
 8001b58:	373c      	adds	r7, #60	; 0x3c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000058c 	.word	0x2000058c
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	2000030c 	.word	0x2000030c
 8001b6c:	20000508 	.word	0x20000508
 8001b70:	200002b0 	.word	0x200002b0
 8001b74:	20000352 	.word	0x20000352
 8001b78:	200002af 	.word	0x200002af
 8001b7c:	200002b1 	.word	0x200002b1
 8001b80:	20000386 	.word	0x20000386
 8001b84:	200002dc 	.word	0x200002dc
 8001b88:	200002b4 	.word	0x200002b4
 8001b8c:	0800a020 	.word	0x0800a020

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0b8      	sub	sp, #224	; 0xe0
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b9a:	2234      	movs	r2, #52	; 0x34
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 fc0c 	bl	80073bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	2290      	movs	r2, #144	; 0x90
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fbfd 	bl	80073bc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bc2:	f001 ff3b 	bl	8003a3c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <SystemClock_Config+0x12c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <SystemClock_Config+0x12c>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <SystemClock_Config+0x12c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bde:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <SystemClock_Config+0x130>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a37      	ldr	r2, [pc, #220]	; (8001cc0 <SystemClock_Config+0x130>)
 8001be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <SystemClock_Config+0x130>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bfc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c04:	2302      	movs	r3, #2
 8001c06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c12:	2304      	movs	r3, #4
 8001c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001c18:	23c8      	movs	r3, #200	; 0xc8
 8001c1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c24:	2309      	movs	r3, #9
 8001c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 ff61 	bl	8003afc <HAL_RCC_OscConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c40:	f000 f842 	bl	8001cc8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c44:	f001 ff0a 	bl	8003a5c <HAL_PWREx_EnableOverDrive>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c4e:	f000 f83b 	bl	8001cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c52:	230f      	movs	r3, #15
 8001c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c78:	2106      	movs	r1, #6
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 f9ec 	bl	8004058 <HAL_RCC_ClockConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001c86:	f000 f81f 	bl	8001cc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <SystemClock_Config+0x134>)
 8001c8c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fbd9 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001cb0:	f000 f80a 	bl	8001cc8 <Error_Handler>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	37e0      	adds	r7, #224	; 0xe0
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	00204140 	.word	0x00204140

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x4>
	...

08001cd0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_RNG_Init+0x20>)
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <MX_RNG_Init+0x24>)
 8001cd8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_RNG_Init+0x20>)
 8001cdc:	f002 ffe6 	bl	8004cac <HAL_RNG_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001ce6:	f7ff ffef 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003b0 	.word	0x200003b0
 8001cf4:	50060800 	.word	0x50060800

08001cf8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_RNG_MspInit+0x38>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10b      	bne.n	8001d22 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RNG_MspInit+0x3c>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RNG_MspInit+0x3c>)
 8001d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d14:	6353      	str	r3, [r2, #52]	; 0x34
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RNG_MspInit+0x3c>)
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	50060800 	.word	0x50060800
 8001d34:	40023800 	.word	0x40023800

08001d38 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_SPI5_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d56:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d86:	2207      	movs	r2, #7
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_SPI5_Init+0x74>)
 8001d98:	f002 ffb2 	bl	8004d00 <HAL_SPI_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001da2:	f7ff ff91 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200003c0 	.word	0x200003c0
 8001db0:	40015000 	.word	0x40015000

08001db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_SPI_MspInit+0x7c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d128      	bne.n	8001e28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_SPI_MspInit+0x80>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_SPI_MspInit+0x80>)
 8001ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_SPI_MspInit+0x80>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_SPI_MspInit+0x80>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_SPI_MspInit+0x80>)
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_SPI_MspInit+0x80>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e06:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_SPI_MspInit+0x84>)
 8001e24:	f001 fb04 	bl	8003430 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40015000 	.word	0x40015000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40021400 	.word	0x40021400

08001e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_MspInit+0x44>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_MspInit+0x44>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_MspInit+0x44>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x44>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_MspInit+0x44>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_MspInit+0x44>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f001 f97c 	bl	8003184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001e96:	f003 fd59 	bl	800594c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4a02      	ldr	r2, [pc, #8]	; (8001eac <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001ea2:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000470 	.word	0x20000470
 8001eac:	20000238 	.word	0x20000238

08001eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb4:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <TIM2_IRQHandler+0x14>)
 8001eb6:	f003 fd49 	bl	800594c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8001eba:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <TIM2_IRQHandler+0x18>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200004bc 	.word	0x200004bc
 8001ec8:	2000023c 	.word	0x2000023c

08001ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
	return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_kill>:

int _kill(int pid, int sig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ee6:	f005 fa3f 	bl	8007368 <__errno>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2216      	movs	r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
	return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_exit>:

void _exit (int status)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffe7 	bl	8001edc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f0e:	e7fe      	b.n	8001f0e <_exit+0x12>

08001f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e00a      	b.n	8001f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f22:	f3af 8000 	nop.w
 8001f26:	4601      	mov	r1, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf0      	blt.n	8001f22 <_read+0x12>
	}

return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e009      	b.n	8001f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf1      	blt.n	8001f5c <_write+0x12>
	}
	return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
	return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f005 f9a4 	bl	8007368 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20080000 	.word	0x20080000
 800204c:	00000400 	.word	0x00000400
 8002050:	20000254 	.word	0x20000254
 8002054:	20000628 	.word	0x20000628

08002058 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <SystemInit+0x5c>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <SystemInit+0x5c>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <SystemInit+0x60>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <SystemInit+0x60>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <SystemInit+0x60>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <SystemInit+0x60>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <SystemInit+0x60>)
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <SystemInit+0x64>)
 8002086:	4013      	ands	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <SystemInit+0x60>)
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <SystemInit+0x68>)
 800208e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <SystemInit+0x60>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <SystemInit+0x60>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x60>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SystemInit+0x5c>)
 80020a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020a8:	609a      	str	r2, [r3, #8]
#endif
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00
 80020b8:	40023800 	.word	0x40023800
 80020bc:	fef6ffff 	.word	0xfef6ffff
 80020c0:	24003010 	.word	0x24003010

080020c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <MX_TIM1_Init+0xa0>)
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <MX_TIM1_Init+0xa4>)
 80020e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <MX_TIM1_Init+0xa0>)
 80020ea:	22c7      	movs	r2, #199	; 0xc7
 80020ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <MX_TIM1_Init+0xa0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <MX_TIM1_Init+0xa0>)
 80020f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_TIM1_Init+0xa0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <MX_TIM1_Init+0xa0>)
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <MX_TIM1_Init+0xa0>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800210e:	4815      	ldr	r0, [pc, #84]	; (8002164 <MX_TIM1_Init+0xa0>)
 8002110:	f003 f970 	bl	80053f4 <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800211a:	f7ff fdd5 	bl	8001cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002122:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	4619      	mov	r1, r3
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <MX_TIM1_Init+0xa0>)
 800212c:	f003 fe3e 	bl	8005dac <HAL_TIM_ConfigClockSource>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002136:	f7ff fdc7 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_TIM1_Init+0xa0>)
 800214c:	f004 fae4 	bl	8006718 <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002156:	f7ff fdb7 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000470 	.word	0x20000470
 8002168:	40010000 	.word	0x40010000

0800216c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <MX_TIM2_Init+0x98>)
 800218c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002190:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_TIM2_Init+0x98>)
 8002194:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_TIM2_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <MX_TIM2_Init+0x98>)
 80021a2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80021a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MX_TIM2_Init+0x98>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <MX_TIM2_Init+0x98>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b4:	4813      	ldr	r0, [pc, #76]	; (8002204 <MX_TIM2_Init+0x98>)
 80021b6:	f003 f91d 	bl	80053f4 <HAL_TIM_Base_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021c0:	f7ff fd82 	bl	8001cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ca:	f107 0310 	add.w	r3, r7, #16
 80021ce:	4619      	mov	r1, r3
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <MX_TIM2_Init+0x98>)
 80021d2:	f003 fdeb 	bl	8005dac <HAL_TIM_ConfigClockSource>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80021dc:	f7ff fd74 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_TIM2_Init+0x98>)
 80021ee:	f004 fa93 	bl	8006718 <HAL_TIMEx_MasterConfigSynchronization>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80021f8:	f7ff fd66 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200004bc 	.word	0x200004bc

08002208 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	611a      	str	r2, [r3, #16]
 8002236:	615a      	str	r2, [r3, #20]
 8002238:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <MX_TIM3_Init+0xe8>)
 800223c:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <MX_TIM3_Init+0xec>)
 800223e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <MX_TIM3_Init+0xe8>)
 8002242:	22f9      	movs	r2, #249	; 0xf9
 8002244:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <MX_TIM3_Init+0xe8>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <MX_TIM3_Init+0xe8>)
 800224e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002252:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <MX_TIM3_Init+0xe8>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <MX_TIM3_Init+0xe8>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002260:	4823      	ldr	r0, [pc, #140]	; (80022f0 <MX_TIM3_Init+0xe8>)
 8002262:	f003 f8c7 	bl	80053f4 <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800226c:	f7ff fd2c 	bl	8001cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227a:	4619      	mov	r1, r3
 800227c:	481c      	ldr	r0, [pc, #112]	; (80022f0 <MX_TIM3_Init+0xe8>)
 800227e:	f003 fd95 	bl	8005dac <HAL_TIM_ConfigClockSource>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002288:	f7ff fd1e 	bl	8001cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800228c:	4818      	ldr	r0, [pc, #96]	; (80022f0 <MX_TIM3_Init+0xe8>)
 800228e:	f003 f981 	bl	8005594 <HAL_TIM_PWM_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002298:	f7ff fd16 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	4619      	mov	r1, r3
 80022aa:	4811      	ldr	r0, [pc, #68]	; (80022f0 <MX_TIM3_Init+0xe8>)
 80022ac:	f004 fa34 	bl	8006718 <HAL_TIMEx_MasterConfigSynchronization>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022b6:	f7ff fd07 	bl	8001cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ba:	2360      	movs	r3, #96	; 0x60
 80022bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 80022be:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	2200      	movs	r2, #0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <MX_TIM3_Init+0xe8>)
 80022d4:	f003 fc5a 	bl	8005b8c <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80022de:	f7ff fcf3 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <MX_TIM3_Init+0xe8>)
 80022e4:	f000 f85c 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80022e8:	bf00      	nop
 80022ea:	3738      	adds	r7, #56	; 0x38
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000424 	.word	0x20000424
 80022f4:	40000400 	.word	0x40000400

080022f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_TIM_Base_MspInit+0x9c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d114      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a22      	ldr	r2, [pc, #136]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	2019      	movs	r0, #25
 8002328:	f001 f84b 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800232c:	2019      	movs	r0, #25
 800232e:	f001 f864 	bl	80033fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002332:	e02a      	b.n	800238a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d114      	bne.n	8002368 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2102      	movs	r1, #2
 800235a:	201c      	movs	r0, #28
 800235c:	f001 f831 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002360:	201c      	movs	r0, #28
 8002362:	f001 f84a 	bl	80033fa <HAL_NVIC_EnableIRQ>
}
 8002366:	e010      	b.n	800238a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0b      	ldr	r2, [pc, #44]	; (800239c <HAL_TIM_Base_MspInit+0xa4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10b      	bne.n	800238a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_TIM_Base_MspInit+0xa0>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000
 8002398:	40023800 	.word	0x40023800
 800239c:	40000400 	.word	0x40000400

080023a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_TIM_MspPostInit+0x64>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11b      	bne.n	80023fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_TIM_MspPostInit+0x68>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_TIM_MspPostInit+0x68>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_TIM_MspPostInit+0x68>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023da:	2340      	movs	r3, #64	; 0x40
 80023dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ea:	2302      	movs	r3, #2
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_TIM_MspPostInit+0x6c>)
 80023f6:	f001 f81b 	bl	8003430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40000400 	.word	0x40000400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020000 	.word	0x40020000

08002410 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_USART1_UART_Init+0x58>)
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <MX_USART1_UART_Init+0x5c>)
 8002418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <MX_USART1_UART_Init+0x58>)
 800241c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_USART1_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_USART1_UART_Init+0x58>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_USART1_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_USART1_UART_Init+0x58>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <MX_USART1_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_USART1_UART_Init+0x58>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <MX_USART1_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_USART1_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_USART1_UART_Init+0x58>)
 8002454:	f004 fa0c 	bl	8006870 <HAL_UART_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800245e:	f7ff fc33 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000058c 	.word	0x2000058c
 800246c:	40011000 	.word	0x40011000

08002470 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <MX_USART3_UART_Init+0x5c>)
 8002478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 800247c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 8002496:	220c      	movs	r2, #12
 8002498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_USART3_UART_Init+0x58>)
 80024b4:	f004 f9dc 	bl	8006870 <HAL_UART_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024be:	f7ff fc03 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000508 	.word	0x20000508
 80024cc:	40004800 	.word	0x40004800

080024d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a37      	ldr	r2, [pc, #220]	; (80025cc <HAL_UART_MspInit+0xfc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d139      	bne.n	8002566 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f2:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <HAL_UART_MspInit+0x100>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a36      	ldr	r2, [pc, #216]	; (80025d0 <HAL_UART_MspInit+0x100>)
 80024f8:	f043 0310 	orr.w	r3, r3, #16
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_UART_MspInit+0x100>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_UART_MspInit+0x100>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a30      	ldr	r2, [pc, #192]	; (80025d0 <HAL_UART_MspInit+0x100>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_UART_MspInit+0x100>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002534:	2304      	movs	r3, #4
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4619      	mov	r1, r3
 800253e:	4825      	ldr	r0, [pc, #148]	; (80025d4 <HAL_UART_MspInit+0x104>)
 8002540:	f000 ff76 	bl	8003430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002544:	2340      	movs	r3, #64	; 0x40
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002554:	2307      	movs	r3, #7
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	481d      	ldr	r0, [pc, #116]	; (80025d4 <HAL_UART_MspInit+0x104>)
 8002560:	f000 ff66 	bl	8003430 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002564:	e02d      	b.n	80025c2 <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_UART_MspInit+0x108>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d128      	bne.n	80025c2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_UART_MspInit+0x100>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_UART_MspInit+0x100>)
 8002576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_UART_MspInit+0x100>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_UART_MspInit+0x100>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_UART_MspInit+0x100>)
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	6313      	str	r3, [r2, #48]	; 0x30
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_UART_MspInit+0x100>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025b2:	2307      	movs	r3, #7
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	4807      	ldr	r0, [pc, #28]	; (80025dc <HAL_UART_MspInit+0x10c>)
 80025be:	f000 ff37 	bl	8003430 <HAL_GPIO_Init>
}
 80025c2:	bf00      	nop
 80025c4:	3730      	adds	r7, #48	; 0x30
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40004800 	.word	0x40004800
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025e6:	e003      	b.n	80025f0 <LoopCopyDataInit>

080025e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ee:	3104      	adds	r1, #4

080025f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f8:	d3f6      	bcc.n	80025e8 <CopyDataInit>
  ldr  r2, =_sbss
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025fc:	e002      	b.n	8002604 <LoopFillZerobss>

080025fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002600:	f842 3b04 	str.w	r3, [r2], #4

08002604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002608:	d3f9      	bcc.n	80025fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800260a:	f7ff fd25 	bl	8002058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f004 feb1 	bl	8007374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7fe ff4d 	bl	80014b0 <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002618:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800261c:	0800a674 	.word	0x0800a674
  ldr  r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002624:	2000021c 	.word	0x2000021c
  ldr  r2, =_sbss
 8002628:	2000021c 	.word	0x2000021c
  ldr  r3, = _ebss
 800262c:	20000624 	.word	0x20000624

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>

08002632 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b089      	sub	sp, #36	; 0x24
 8002636:	af02      	add	r7, sp, #8
 8002638:	4604      	mov	r4, r0
 800263a:	4608      	mov	r0, r1
 800263c:	4611      	mov	r1, r2
 800263e:	461a      	mov	r2, r3
 8002640:	4623      	mov	r3, r4
 8002642:	80fb      	strh	r3, [r7, #6]
 8002644:	4603      	mov	r3, r0
 8002646:	80bb      	strh	r3, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800266c:	887a      	ldrh	r2, [r7, #2]
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	da01      	bge.n	800267e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800267a:	2301      	movs	r3, #1
 800267c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8002682:	883a      	ldrh	r2, [r7, #0]
 8002684:	88bb      	ldrh	r3, [r7, #4]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da01      	bge.n	8002694 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8002690:	2301      	movs	r3, #1
 8002692:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	823b      	strh	r3, [r7, #16]
 80026a6:	e005      	b.n	80026b4 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80026b4:	7cbb      	ldrb	r3, [r7, #18]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80026ba:	883a      	ldrh	r2, [r7, #0]
 80026bc:	88bb      	ldrh	r3, [r7, #4]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	81fb      	strh	r3, [r7, #14]
 80026c6:	e005      	b.n	80026d4 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80026c8:	88ba      	ldrh	r2, [r7, #4]
 80026ca:	883b      	ldrh	r3, [r7, #0]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80026d0:	883b      	ldrh	r3, [r7, #0]
 80026d2:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80026d4:	8abc      	ldrh	r4, [r7, #20]
 80026d6:	8afa      	ldrh	r2, [r7, #22]
 80026d8:	89f9      	ldrh	r1, [r7, #14]
 80026da:	8a38      	ldrh	r0, [r7, #16]
 80026dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4623      	mov	r3, r4
 80026e2:	f000 fca7 	bl	8003034 <ILI9341_Draw_Rectangle>
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
	...

080026f0 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	4603      	mov	r3, r0
 8002704:	71bb      	strb	r3, [r7, #6]
 8002706:	460b      	mov	r3, r1
 8002708:	717b      	strb	r3, [r7, #5]
 800270a:	4613      	mov	r3, r2
 800270c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b1f      	cmp	r3, #31
 8002716:	d802      	bhi.n	800271e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	e002      	b.n	8002724 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	3b20      	subs	r3, #32
 8002722:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002724:	2300      	movs	r3, #0
 8002726:	753b      	strb	r3, [r7, #20]
 8002728:	e012      	b.n	8002750 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800272a:	7dfa      	ldrb	r2, [r7, #23]
 800272c:	7d38      	ldrb	r0, [r7, #20]
 800272e:	7d39      	ldrb	r1, [r7, #20]
 8002730:	4c3c      	ldr	r4, [pc, #240]	; (8002824 <ILI9341_Draw_Char+0x134>)
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4423      	add	r3, r4
 800273c:	4403      	add	r3, r0
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	f107 0318 	add.w	r3, r7, #24
 8002744:	440b      	add	r3, r1
 8002746:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800274a:	7d3b      	ldrb	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	753b      	strb	r3, [r7, #20]
 8002750:	7d3b      	ldrb	r3, [r7, #20]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d9e9      	bls.n	800272a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	b298      	uxth	r0, r3
 800275a:	797b      	ldrb	r3, [r7, #5]
 800275c:	b299      	uxth	r1, r3
 800275e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002760:	461a      	mov	r2, r3
 8002762:	0052      	lsls	r2, r2, #1
 8002764:	4413      	add	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	b29c      	uxth	r4, r3
 8002770:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4623      	mov	r3, r4
 8002776:	f000 fc5d 	bl	8003034 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800277a:	2300      	movs	r3, #0
 800277c:	757b      	strb	r3, [r7, #21]
 800277e:	e048      	b.n	8002812 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002780:	2300      	movs	r3, #0
 8002782:	75bb      	strb	r3, [r7, #22]
 8002784:	e03f      	b.n	8002806 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8002786:	7d7b      	ldrb	r3, [r7, #21]
 8002788:	f107 0218 	add.w	r2, r7, #24
 800278c:	4413      	add	r3, r2
 800278e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002792:	461a      	mov	r2, r3
 8002794:	7dbb      	ldrb	r3, [r7, #22]
 8002796:	fa42 f303 	asr.w	r3, r2, r3
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d02e      	beq.n	8002800 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 80027a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d110      	bne.n	80027ca <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	7d7b      	ldrb	r3, [r7, #21]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	b298      	uxth	r0, r3
 80027b4:	797b      	ldrb	r3, [r7, #5]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	7dbb      	ldrb	r3, [r7, #22]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4413      	add	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	4619      	mov	r1, r3
 80027c4:	f000 fb5c 	bl	8002e80 <ILI9341_Draw_Pixel>
 80027c8:	e01a      	b.n	8002800 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80027ca:	79bb      	ldrb	r3, [r7, #6]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	7d7b      	ldrb	r3, [r7, #21]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80027d4:	fb11 f303 	smulbb	r3, r1, r3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	b298      	uxth	r0, r3
 80027de:	797b      	ldrb	r3, [r7, #5]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	7dbb      	ldrb	r3, [r7, #22]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80027e8:	fb11 f303 	smulbb	r3, r1, r3
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	b299      	uxth	r1, r3
 80027f2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80027f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4623      	mov	r3, r4
 80027fc:	f000 fc1a 	bl	8003034 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002800:	7dbb      	ldrb	r3, [r7, #22]
 8002802:	3301      	adds	r3, #1
 8002804:	75bb      	strb	r3, [r7, #22]
 8002806:	7dbb      	ldrb	r3, [r7, #22]
 8002808:	2b07      	cmp	r3, #7
 800280a:	d9bc      	bls.n	8002786 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800280c:	7d7b      	ldrb	r3, [r7, #21]
 800280e:	3301      	adds	r3, #1
 8002810:	757b      	strb	r3, [r7, #21]
 8002812:	7d7b      	ldrb	r3, [r7, #21]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d9b3      	bls.n	8002780 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	0800a040 	.word	0x0800a040

08002828 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af02      	add	r7, sp, #8
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	70fb      	strb	r3, [r7, #3]
 800283a:	460b      	mov	r3, r1
 800283c:	70bb      	strb	r3, [r7, #2]
 800283e:	4613      	mov	r3, r2
 8002840:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002842:	e017      	b.n	8002874 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	7818      	ldrb	r0, [r3, #0]
 800284c:	883c      	ldrh	r4, [r7, #0]
 800284e:	78ba      	ldrb	r2, [r7, #2]
 8002850:	78f9      	ldrb	r1, [r7, #3]
 8002852:	8bbb      	ldrh	r3, [r7, #28]
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	8b3b      	ldrh	r3, [r7, #24]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4623      	mov	r3, r4
 800285c:	f7ff ff48 	bl	80026f0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002860:	8b3b      	ldrh	r3, [r7, #24]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	0052      	lsls	r2, r2, #1
 8002868:	4413      	add	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	4413      	add	r3, r2
 8002872:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e3      	bne.n	8002844 <ILI9341_Draw_Text+0x1c>
    }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
	...

08002888 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 800288c:	f7ff fa54 	bl	8001d38 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002890:	f7fd feaa 	bl	80005e8 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800289a:	4802      	ldr	r0, [pc, #8]	; (80028a4 <ILI9341_SPI_Init+0x1c>)
 800289c:	f000 ff8c 	bl	80037b8 <HAL_GPIO_WritePin>
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40020800 	.word	0x40020800

080028a8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80028b2:	1df9      	adds	r1, r7, #7
 80028b4:	2301      	movs	r3, #1
 80028b6:	2201      	movs	r2, #1
 80028b8:	4803      	ldr	r0, [pc, #12]	; (80028c8 <ILI9341_SPI_Send+0x20>)
 80028ba:	f002 facc 	bl	8004e56 <HAL_SPI_Transmit>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200003c0 	.word	0x200003c0

080028cc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028dc:	480b      	ldr	r0, [pc, #44]	; (800290c <ILI9341_Write_Command+0x40>)
 80028de:	f000 ff6b 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80028e2:	2200      	movs	r2, #0
 80028e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <ILI9341_Write_Command+0x40>)
 80028ea:	f000 ff65 	bl	80037b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ffd9 	bl	80028a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80028f6:	2201      	movs	r2, #1
 80028f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <ILI9341_Write_Command+0x40>)
 80028fe:	f000 ff5b 	bl	80037b8 <HAL_GPIO_WritePin>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40020800 	.word	0x40020800

08002910 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002920:	480b      	ldr	r0, [pc, #44]	; (8002950 <ILI9341_Write_Data+0x40>)
 8002922:	f000 ff49 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002926:	2200      	movs	r2, #0
 8002928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800292c:	4808      	ldr	r0, [pc, #32]	; (8002950 <ILI9341_Write_Data+0x40>)
 800292e:	f000 ff43 	bl	80037b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ffb7 	bl	80028a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800293a:	2201      	movs	r2, #1
 800293c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002940:	4803      	ldr	r0, [pc, #12]	; (8002950 <ILI9341_Write_Data+0x40>)
 8002942:	f000 ff39 	bl	80037b8 <HAL_GPIO_WritePin>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40020800 	.word	0x40020800

08002954 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4604      	mov	r4, r0
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4623      	mov	r3, r4
 8002964:	80fb      	strh	r3, [r7, #6]
 8002966:	4603      	mov	r3, r0
 8002968:	80bb      	strh	r3, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	807b      	strh	r3, [r7, #2]
 800296e:	4613      	mov	r3, r2
 8002970:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002972:	202a      	movs	r0, #42	; 0x2a
 8002974:	f7ff ffaa 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29b      	uxth	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ffc5 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ffc0 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002990:	887b      	ldrh	r3, [r7, #2]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29b      	uxth	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ffb9 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ffb4 	bl	8002910 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80029a8:	202b      	movs	r0, #43	; 0x2b
 80029aa:	f7ff ff8f 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80029ae:	88bb      	ldrh	r3, [r7, #4]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ffaa 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80029bc:	88bb      	ldrh	r3, [r7, #4]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ffa5 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80029c6:	883b      	ldrh	r3, [r7, #0]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff9e 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80029d4:	883b      	ldrh	r3, [r7, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff99 	bl	8002910 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80029de:	202c      	movs	r0, #44	; 0x2c
 80029e0:	f7ff ff74 	bl	80028cc <ILI9341_Write_Command>
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}

080029ec <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80029f0:	2201      	movs	r2, #1
 80029f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029f6:	480b      	ldr	r0, [pc, #44]	; (8002a24 <ILI9341_Reset+0x38>)
 80029f8:	f000 fede 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029fc:	20c8      	movs	r0, #200	; 0xc8
 80029fe:	f000 fbe1 	bl	80031c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a02:	2200      	movs	r2, #0
 8002a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <ILI9341_Reset+0x38>)
 8002a0a:	f000 fed5 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002a0e:	20c8      	movs	r0, #200	; 0xc8
 8002a10:	f000 fbd8 	bl	80031c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a1a:	4802      	ldr	r0, [pc, #8]	; (8002a24 <ILI9341_Reset+0x38>)
 8002a1c:	f000 fecc 	bl	80037b8 <HAL_GPIO_WritePin>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40020800 	.word	0x40020800

08002a28 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002a36:	2036      	movs	r0, #54	; 0x36
 8002a38:	f7ff ff48 	bl	80028cc <ILI9341_Write_Command>
HAL_Delay(1);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f000 fbc1 	bl	80031c4 <HAL_Delay>
	
switch(screen_rotation) 
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d837      	bhi.n	8002ab8 <ILI9341_Set_Rotation+0x90>
 8002a48:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <ILI9341_Set_Rotation+0x28>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a77 	.word	0x08002a77
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002aa3 	.word	0x08002aa3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002a60:	2048      	movs	r0, #72	; 0x48
 8002a62:	f7ff ff55 	bl	8002910 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <ILI9341_Set_Rotation+0x9c>)
 8002a68:	22f0      	movs	r2, #240	; 0xf0
 8002a6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <ILI9341_Set_Rotation+0xa0>)
 8002a6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a72:	801a      	strh	r2, [r3, #0]
			break;
 8002a74:	e021      	b.n	8002aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002a76:	2028      	movs	r0, #40	; 0x28
 8002a78:	f7ff ff4a 	bl	8002910 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <ILI9341_Set_Rotation+0x9c>)
 8002a7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a84:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <ILI9341_Set_Rotation+0xa0>)
 8002a86:	22f0      	movs	r2, #240	; 0xf0
 8002a88:	801a      	strh	r2, [r3, #0]
			break;
 8002a8a:	e016      	b.n	8002aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002a8c:	2088      	movs	r0, #136	; 0x88
 8002a8e:	f7ff ff3f 	bl	8002910 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <ILI9341_Set_Rotation+0x9c>)
 8002a94:	22f0      	movs	r2, #240	; 0xf0
 8002a96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <ILI9341_Set_Rotation+0xa0>)
 8002a9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a9e:	801a      	strh	r2, [r3, #0]
			break;
 8002aa0:	e00b      	b.n	8002aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002aa2:	20e8      	movs	r0, #232	; 0xe8
 8002aa4:	f7ff ff34 	bl	8002910 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <ILI9341_Set_Rotation+0x9c>)
 8002aaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002aae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <ILI9341_Set_Rotation+0xa0>)
 8002ab2:	22f0      	movs	r2, #240	; 0xf0
 8002ab4:	801a      	strh	r2, [r3, #0]
			break;
 8002ab6:	e000      	b.n	8002aba <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002ab8:	bf00      	nop
	}
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000042 	.word	0x20000042
 8002ac8:	20000040 	.word	0x20000040

08002acc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ad6:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <ILI9341_Enable+0x14>)
 8002ad8:	f000 fe6e 	bl	80037b8 <HAL_GPIO_WritePin>
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40020800 	.word	0x40020800

08002ae4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002ae8:	f7ff fff0 	bl	8002acc <ILI9341_Enable>
ILI9341_SPI_Init();
 8002aec:	f7ff fecc 	bl	8002888 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002af0:	f7ff ff7c 	bl	80029ec <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7ff fee9 	bl	80028cc <ILI9341_Write_Command>
HAL_Delay(1000);
 8002afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002afe:	f000 fb61 	bl	80031c4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002b02:	20cb      	movs	r0, #203	; 0xcb
 8002b04:	f7ff fee2 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002b08:	2039      	movs	r0, #57	; 0x39
 8002b0a:	f7ff ff01 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002b0e:	202c      	movs	r0, #44	; 0x2c
 8002b10:	f7ff fefe 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7ff fefb 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002b1a:	2034      	movs	r0, #52	; 0x34
 8002b1c:	f7ff fef8 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002b20:	2002      	movs	r0, #2
 8002b22:	f7ff fef5 	bl	8002910 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002b26:	20cf      	movs	r0, #207	; 0xcf
 8002b28:	f7ff fed0 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7ff feef 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002b32:	20c1      	movs	r0, #193	; 0xc1
 8002b34:	f7ff feec 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002b38:	2030      	movs	r0, #48	; 0x30
 8002b3a:	f7ff fee9 	bl	8002910 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002b3e:	20e8      	movs	r0, #232	; 0xe8
 8002b40:	f7ff fec4 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002b44:	2085      	movs	r0, #133	; 0x85
 8002b46:	f7ff fee3 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7ff fee0 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002b50:	2078      	movs	r0, #120	; 0x78
 8002b52:	f7ff fedd 	bl	8002910 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002b56:	20ea      	movs	r0, #234	; 0xea
 8002b58:	f7ff feb8 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7ff fed7 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7ff fed4 	bl	8002910 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002b68:	20ed      	movs	r0, #237	; 0xed
 8002b6a:	f7ff feaf 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002b6e:	2064      	movs	r0, #100	; 0x64
 8002b70:	f7ff fece 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff fecb 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002b7a:	2012      	movs	r0, #18
 8002b7c:	f7ff fec8 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002b80:	2081      	movs	r0, #129	; 0x81
 8002b82:	f7ff fec5 	bl	8002910 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002b86:	20f7      	movs	r0, #247	; 0xf7
 8002b88:	f7ff fea0 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002b8c:	2020      	movs	r0, #32
 8002b8e:	f7ff febf 	bl	8002910 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002b92:	20c0      	movs	r0, #192	; 0xc0
 8002b94:	f7ff fe9a 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002b98:	2023      	movs	r0, #35	; 0x23
 8002b9a:	f7ff feb9 	bl	8002910 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002b9e:	20c1      	movs	r0, #193	; 0xc1
 8002ba0:	f7ff fe94 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002ba4:	2010      	movs	r0, #16
 8002ba6:	f7ff feb3 	bl	8002910 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002baa:	20c5      	movs	r0, #197	; 0xc5
 8002bac:	f7ff fe8e 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002bb0:	203e      	movs	r0, #62	; 0x3e
 8002bb2:	f7ff fead 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002bb6:	2028      	movs	r0, #40	; 0x28
 8002bb8:	f7ff feaa 	bl	8002910 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002bbc:	20c7      	movs	r0, #199	; 0xc7
 8002bbe:	f7ff fe85 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002bc2:	2086      	movs	r0, #134	; 0x86
 8002bc4:	f7ff fea4 	bl	8002910 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002bc8:	2036      	movs	r0, #54	; 0x36
 8002bca:	f7ff fe7f 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002bce:	2048      	movs	r0, #72	; 0x48
 8002bd0:	f7ff fe9e 	bl	8002910 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002bd4:	203a      	movs	r0, #58	; 0x3a
 8002bd6:	f7ff fe79 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002bda:	2055      	movs	r0, #85	; 0x55
 8002bdc:	f7ff fe98 	bl	8002910 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002be0:	20b1      	movs	r0, #177	; 0xb1
 8002be2:	f7ff fe73 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff fe92 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002bec:	2018      	movs	r0, #24
 8002bee:	f7ff fe8f 	bl	8002910 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002bf2:	20b6      	movs	r0, #182	; 0xb6
 8002bf4:	f7ff fe6a 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002bf8:	2008      	movs	r0, #8
 8002bfa:	f7ff fe89 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002bfe:	2082      	movs	r0, #130	; 0x82
 8002c00:	f7ff fe86 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002c04:	2027      	movs	r0, #39	; 0x27
 8002c06:	f7ff fe83 	bl	8002910 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002c0a:	20f2      	movs	r0, #242	; 0xf2
 8002c0c:	f7ff fe5e 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7ff fe7d 	bl	8002910 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002c16:	2026      	movs	r0, #38	; 0x26
 8002c18:	f7ff fe58 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7ff fe77 	bl	8002910 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002c22:	20e0      	movs	r0, #224	; 0xe0
 8002c24:	f7ff fe52 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002c28:	200f      	movs	r0, #15
 8002c2a:	f7ff fe71 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c2e:	2031      	movs	r0, #49	; 0x31
 8002c30:	f7ff fe6e 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002c34:	202b      	movs	r0, #43	; 0x2b
 8002c36:	f7ff fe6b 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002c3a:	200c      	movs	r0, #12
 8002c3c:	f7ff fe68 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c40:	200e      	movs	r0, #14
 8002c42:	f7ff fe65 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002c46:	2008      	movs	r0, #8
 8002c48:	f7ff fe62 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002c4c:	204e      	movs	r0, #78	; 0x4e
 8002c4e:	f7ff fe5f 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002c52:	20f1      	movs	r0, #241	; 0xf1
 8002c54:	f7ff fe5c 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002c58:	2037      	movs	r0, #55	; 0x37
 8002c5a:	f7ff fe59 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c5e:	2007      	movs	r0, #7
 8002c60:	f7ff fe56 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002c64:	2010      	movs	r0, #16
 8002c66:	f7ff fe53 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c6a:	2003      	movs	r0, #3
 8002c6c:	f7ff fe50 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c70:	200e      	movs	r0, #14
 8002c72:	f7ff fe4d 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002c76:	2009      	movs	r0, #9
 8002c78:	f7ff fe4a 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7ff fe47 	bl	8002910 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002c82:	20e1      	movs	r0, #225	; 0xe1
 8002c84:	f7ff fe22 	bl	80028cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7ff fe41 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c8e:	200e      	movs	r0, #14
 8002c90:	f7ff fe3e 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002c94:	2014      	movs	r0, #20
 8002c96:	f7ff fe3b 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	f7ff fe38 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002ca0:	2011      	movs	r0, #17
 8002ca2:	f7ff fe35 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002ca6:	2007      	movs	r0, #7
 8002ca8:	f7ff fe32 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002cac:	2031      	movs	r0, #49	; 0x31
 8002cae:	f7ff fe2f 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002cb2:	20c1      	movs	r0, #193	; 0xc1
 8002cb4:	f7ff fe2c 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002cb8:	2048      	movs	r0, #72	; 0x48
 8002cba:	f7ff fe29 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002cbe:	2008      	movs	r0, #8
 8002cc0:	f7ff fe26 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002cc4:	200f      	movs	r0, #15
 8002cc6:	f7ff fe23 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002cca:	200c      	movs	r0, #12
 8002ccc:	f7ff fe20 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002cd0:	2031      	movs	r0, #49	; 0x31
 8002cd2:	f7ff fe1d 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002cd6:	2036      	movs	r0, #54	; 0x36
 8002cd8:	f7ff fe1a 	bl	8002910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002cdc:	200f      	movs	r0, #15
 8002cde:	f7ff fe17 	bl	8002910 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002ce2:	2011      	movs	r0, #17
 8002ce4:	f7ff fdf2 	bl	80028cc <ILI9341_Write_Command>
HAL_Delay(120);
 8002ce8:	2078      	movs	r0, #120	; 0x78
 8002cea:	f000 fa6b 	bl	80031c4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002cee:	2029      	movs	r0, #41	; 0x29
 8002cf0:	f7ff fdec 	bl	80028cc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7ff fe97 	bl	8002a28 <ILI9341_Set_Rotation>
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002d00:	b5b0      	push	{r4, r5, r7, lr}
 8002d02:	b08c      	sub	sp, #48	; 0x30
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	80fb      	strh	r3, [r7, #6]
 8002d0c:	466b      	mov	r3, sp
 8002d0e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d1c:	d202      	bcs.n	8002d24 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e002      	b.n	8002d2a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002d24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d30:	483e      	ldr	r0, [pc, #248]	; (8002e2c <ILI9341_Draw_Colour_Burst+0x12c>)
 8002d32:	f000 fd41 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d3c:	483b      	ldr	r0, [pc, #236]	; (8002e2c <ILI9341_Draw_Colour_Burst+0x12c>)
 8002d3e:	f000 fd3b 	bl	80037b8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002d4c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002d4e:	4623      	mov	r3, r4
 8002d50:	3b01      	subs	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	4620      	mov	r0, r4
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	00cb      	lsls	r3, r1, #3
 8002d64:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d68:	00c2      	lsls	r2, r0, #3
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	00cb      	lsls	r3, r1, #3
 8002d7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d7e:	00c2      	lsls	r2, r0, #3
 8002d80:	1de3      	adds	r3, r4, #7
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	ebad 0d03 	sub.w	sp, sp, r3
 8002d8a:	466b      	mov	r3, sp
 8002d8c:	3300      	adds	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d90:	2300      	movs	r3, #0
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	e00e      	b.n	8002db4 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002da0:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	3301      	adds	r3, #1
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	b2d1      	uxtb	r1, r2
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	3302      	adds	r3, #2
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3ec      	bcc.n	8002d96 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd6:	fb01 f202 	mul.w	r2, r1, r2
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de8:	e009      	b.n	8002dfe <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	230a      	movs	r3, #10
 8002df2:	480f      	ldr	r0, [pc, #60]	; (8002e30 <ILI9341_Draw_Colour_Burst+0x130>)
 8002df4:	f002 f82f 	bl	8004e56 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3f1      	bcc.n	8002dea <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	230a      	movs	r3, #10
 8002e0e:	4808      	ldr	r0, [pc, #32]	; (8002e30 <ILI9341_Draw_Colour_Burst+0x130>)
 8002e10:	f002 f821 	bl	8004e56 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e14:	2201      	movs	r2, #1
 8002e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e1a:	4804      	ldr	r0, [pc, #16]	; (8002e2c <ILI9341_Draw_Colour_Burst+0x12c>)
 8002e1c:	f000 fccc 	bl	80037b8 <HAL_GPIO_WritePin>
 8002e20:	46ad      	mov	sp, r5
}
 8002e22:	bf00      	nop
 8002e24:	3730      	adds	r7, #48	; 0x30
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	200003c0 	.word	0x200003c0

08002e34 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <ILI9341_Fill_Screen+0x44>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <ILI9341_Fill_Screen+0x48>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff fd81 	bl	8002954 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <ILI9341_Fill_Screen+0x44>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <ILI9341_Fill_Screen+0x48>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	fb03 f302 	mul.w	r3, r3, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff48 	bl	8002d00 <ILI9341_Draw_Colour_Burst>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000042 	.word	0x20000042
 8002e7c:	20000040 	.word	0x20000040

08002e80 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	80bb      	strh	r3, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002e92:	4b64      	ldr	r3, [pc, #400]	; (8003024 <ILI9341_Draw_Pixel+0x1a4>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f080 80be 	bcs.w	800301c <ILI9341_Draw_Pixel+0x19c>
 8002ea0:	4b61      	ldr	r3, [pc, #388]	; (8003028 <ILI9341_Draw_Pixel+0x1a8>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	88ba      	ldrh	r2, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f080 80b7 	bcs.w	800301c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eb4:	485d      	ldr	r0, [pc, #372]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002eb6:	f000 fc7f 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec0:	485a      	ldr	r0, [pc, #360]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002ec2:	f000 fc79 	bl	80037b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002ec6:	202a      	movs	r0, #42	; 0x2a
 8002ec8:	f7ff fcee 	bl	80028a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed2:	4856      	ldr	r0, [pc, #344]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002ed4:	f000 fc70 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ede:	4853      	ldr	r0, [pc, #332]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002ee0:	f000 fc6a 	bl	80037b8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eea:	4850      	ldr	r0, [pc, #320]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002eec:	f000 fc64 	bl	80037b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	753b      	strb	r3, [r7, #20]
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	757b      	strb	r3, [r7, #21]
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	3301      	adds	r3, #1
 8002f04:	121b      	asrs	r3, r3, #8
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	75bb      	strb	r3, [r7, #22]
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002f14:	f107 0114 	add.w	r1, r7, #20
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	4844      	ldr	r0, [pc, #272]	; (8003030 <ILI9341_Draw_Pixel+0x1b0>)
 8002f1e:	f001 ff9a 	bl	8004e56 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f22:	2201      	movs	r2, #1
 8002f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f28:	4840      	ldr	r0, [pc, #256]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002f2a:	f000 fc45 	bl	80037b8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f34:	483d      	ldr	r0, [pc, #244]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002f36:	f000 fc3f 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f40:	483a      	ldr	r0, [pc, #232]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002f42:	f000 fc39 	bl	80037b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002f46:	202b      	movs	r0, #43	; 0x2b
 8002f48:	f7ff fcae 	bl	80028a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f52:	4836      	ldr	r0, [pc, #216]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002f54:	f000 fc30 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f5e:	4833      	ldr	r0, [pc, #204]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002f60:	f000 fc2a 	bl	80037b8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f64:	2200      	movs	r2, #0
 8002f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f6a:	4830      	ldr	r0, [pc, #192]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002f6c:	f000 fc24 	bl	80037b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002f70:	88bb      	ldrh	r3, [r7, #4]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	743b      	strb	r3, [r7, #16]
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	747b      	strb	r3, [r7, #17]
 8002f80:	88bb      	ldrh	r3, [r7, #4]
 8002f82:	3301      	adds	r3, #1
 8002f84:	121b      	asrs	r3, r3, #8
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	74bb      	strb	r3, [r7, #18]
 8002f8a:	88bb      	ldrh	r3, [r7, #4]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002f94:	f107 0110 	add.w	r1, r7, #16
 8002f98:	2301      	movs	r3, #1
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	4824      	ldr	r0, [pc, #144]	; (8003030 <ILI9341_Draw_Pixel+0x1b0>)
 8002f9e:	f001 ff5a 	bl	8004e56 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa8:	4820      	ldr	r0, [pc, #128]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002faa:	f000 fc05 	bl	80037b8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fb4:	481d      	ldr	r0, [pc, #116]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002fb6:	f000 fbff 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc0:	481a      	ldr	r0, [pc, #104]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002fc2:	f000 fbf9 	bl	80037b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002fc6:	202c      	movs	r0, #44	; 0x2c
 8002fc8:	f7ff fc6e 	bl	80028a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd2:	4816      	ldr	r0, [pc, #88]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002fd4:	f000 fbf0 	bl	80037b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fde:	4813      	ldr	r0, [pc, #76]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002fe0:	f000 fbea 	bl	80037b8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fea:	4810      	ldr	r0, [pc, #64]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8002fec:	f000 fbe4 	bl	80037b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	733b      	strb	r3, [r7, #12]
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8003000:	f107 010c 	add.w	r1, r7, #12
 8003004:	2301      	movs	r3, #1
 8003006:	2202      	movs	r2, #2
 8003008:	4809      	ldr	r0, [pc, #36]	; (8003030 <ILI9341_Draw_Pixel+0x1b0>)
 800300a:	f001 ff24 	bl	8004e56 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800300e:	2201      	movs	r2, #1
 8003010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003014:	4805      	ldr	r0, [pc, #20]	; (800302c <ILI9341_Draw_Pixel+0x1ac>)
 8003016:	f000 fbcf 	bl	80037b8 <HAL_GPIO_WritePin>
 800301a:	e000      	b.n	800301e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800301c:	bf00      	nop
	
}
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000042 	.word	0x20000042
 8003028:	20000040 	.word	0x20000040
 800302c:	40020800 	.word	0x40020800
 8003030:	200003c0 	.word	0x200003c0

08003034 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4604      	mov	r4, r0
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4623      	mov	r3, r4
 8003044:	80fb      	strh	r3, [r7, #6]
 8003046:	4603      	mov	r3, r0
 8003048:	80bb      	strh	r3, [r7, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	807b      	strh	r3, [r7, #2]
 800304e:	4613      	mov	r3, r2
 8003050:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <ILI9341_Draw_Rectangle+0xb0>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	429a      	cmp	r2, r3
 800305c:	d23d      	bcs.n	80030da <ILI9341_Draw_Rectangle+0xa6>
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <ILI9341_Draw_Rectangle+0xb4>)
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	88ba      	ldrh	r2, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	d237      	bcs.n	80030da <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	4413      	add	r3, r2
 8003070:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <ILI9341_Draw_Rectangle+0xb0>)
 8003072:	8812      	ldrh	r2, [r2, #0]
 8003074:	b292      	uxth	r2, r2
 8003076:	4293      	cmp	r3, r2
 8003078:	dd05      	ble.n	8003086 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <ILI9341_Draw_Rectangle+0xb0>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29a      	uxth	r2, r3
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003086:	88ba      	ldrh	r2, [r7, #4]
 8003088:	883b      	ldrh	r3, [r7, #0]
 800308a:	4413      	add	r3, r2
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <ILI9341_Draw_Rectangle+0xb4>)
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	b292      	uxth	r2, r2
 8003092:	4293      	cmp	r3, r2
 8003094:	dd05      	ble.n	80030a2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <ILI9341_Draw_Rectangle+0xb4>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29a      	uxth	r2, r3
 800309c:	88bb      	ldrh	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	4413      	add	r3, r2
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29c      	uxth	r4, r3
 80030ae:	88ba      	ldrh	r2, [r7, #4]
 80030b0:	883b      	ldrh	r3, [r7, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	88b9      	ldrh	r1, [r7, #4]
 80030bc:	88f8      	ldrh	r0, [r7, #6]
 80030be:	4622      	mov	r2, r4
 80030c0:	f7ff fc48 	bl	8002954 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80030c4:	883b      	ldrh	r3, [r7, #0]
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	8b3b      	ldrh	r3, [r7, #24]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fe14 	bl	8002d00 <ILI9341_Draw_Colour_Burst>
 80030d8:	e000      	b.n	80030dc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80030da:	bf00      	nop
}
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd90      	pop	{r4, r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000042 	.word	0x20000042
 80030e8:	20000040 	.word	0x20000040

080030ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_Init+0x34>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <HAL_Init+0x34>)
 80030f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fa:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_Init+0x34>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_Init+0x34>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003108:	2003      	movs	r0, #3
 800310a:	f000 f94f 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800310e:	2000      	movs	r0, #0
 8003110:	f000 f808 	bl	8003124 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003114:	f7fe fe92 	bl	8001e3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00

08003124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_InitTick+0x54>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_InitTick+0x58>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313a:	fbb3 f3f1 	udiv	r3, r3, r1
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f967 	bl	8003416 <HAL_SYSTICK_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00e      	b.n	8003170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d80a      	bhi.n	800316e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003158:	2200      	movs	r2, #0
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f000 f92f 	bl	80033c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <HAL_InitTick+0x5c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000003c 	.word	0x2000003c
 800317c:	20000048 	.word	0x20000048
 8003180:	20000044 	.word	0x20000044

08003184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_IncTick+0x20>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x24>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_IncTick+0x24>)
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000048 	.word	0x20000048
 80031a8:	20000610 	.word	0x20000610

080031ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return uwTick;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_GetTick+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000610 	.word	0x20000610

080031c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7ff ffee 	bl	80031ac <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d005      	beq.n	80031ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_Delay+0x44>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ea:	bf00      	nop
 80031ec:	f7ff ffde 	bl	80031ac <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d8f7      	bhi.n	80031ec <HAL_Delay+0x28>
  {
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000048 	.word	0x20000048

0800320c <__NVIC_SetPriorityGrouping>:
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <__NVIC_SetPriorityGrouping+0x40>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003236:	4313      	orrs	r3, r2
 8003238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323a:	4a04      	ldr	r2, [pc, #16]	; (800324c <__NVIC_SetPriorityGrouping+0x40>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	60d3      	str	r3, [r2, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00
 8003250:	05fa0000 	.word	0x05fa0000

08003254 <__NVIC_GetPriorityGrouping>:
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <__NVIC_EnableIRQ+0x38>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	; (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	; (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	; 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff8e 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff29 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff3e 	bl	8003254 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff8e 	bl	8003300 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5d 	bl	80032ac <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff31 	bl	8003270 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e175      	b.n	800373c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003450:	2201      	movs	r2, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	429a      	cmp	r2, r3
 800346a:	f040 8164 	bne.w	8003736 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d00b      	beq.n	800348e <HAL_GPIO_Init+0x5e>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d007      	beq.n	800348e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003482:	2b11      	cmp	r3, #17
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b12      	cmp	r3, #18
 800348c:	d130      	bne.n	80034f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034c4:	2201      	movs	r2, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0201 	and.w	r2, r3, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x100>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b12      	cmp	r3, #18
 800352e:	d123      	bne.n	8003578 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	220f      	movs	r2, #15
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	08da      	lsrs	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3208      	adds	r2, #8
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0203 	and.w	r2, r3, #3
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80be 	beq.w	8003736 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	4b66      	ldr	r3, [pc, #408]	; (8003754 <HAL_GPIO_Init+0x324>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	4a65      	ldr	r2, [pc, #404]	; (8003754 <HAL_GPIO_Init+0x324>)
 80035c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c4:	6453      	str	r3, [r2, #68]	; 0x44
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_GPIO_Init+0x324>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035d2:	4a61      	ldr	r2, [pc, #388]	; (8003758 <HAL_GPIO_Init+0x328>)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3302      	adds	r3, #2
 80035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	220f      	movs	r2, #15
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_GPIO_Init+0x32c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d037      	beq.n	800366e <HAL_GPIO_Init+0x23e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a57      	ldr	r2, [pc, #348]	; (8003760 <HAL_GPIO_Init+0x330>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_GPIO_Init+0x23a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a56      	ldr	r2, [pc, #344]	; (8003764 <HAL_GPIO_Init+0x334>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d02b      	beq.n	8003666 <HAL_GPIO_Init+0x236>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a55      	ldr	r2, [pc, #340]	; (8003768 <HAL_GPIO_Init+0x338>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d025      	beq.n	8003662 <HAL_GPIO_Init+0x232>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a54      	ldr	r2, [pc, #336]	; (800376c <HAL_GPIO_Init+0x33c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01f      	beq.n	800365e <HAL_GPIO_Init+0x22e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a53      	ldr	r2, [pc, #332]	; (8003770 <HAL_GPIO_Init+0x340>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d019      	beq.n	800365a <HAL_GPIO_Init+0x22a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_GPIO_Init+0x344>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0x226>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a51      	ldr	r2, [pc, #324]	; (8003778 <HAL_GPIO_Init+0x348>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_GPIO_Init+0x222>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a50      	ldr	r2, [pc, #320]	; (800377c <HAL_GPIO_Init+0x34c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <HAL_GPIO_Init+0x21e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4f      	ldr	r2, [pc, #316]	; (8003780 <HAL_GPIO_Init+0x350>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_GPIO_Init+0x21a>
 8003646:	2309      	movs	r3, #9
 8003648:	e012      	b.n	8003670 <HAL_GPIO_Init+0x240>
 800364a:	230a      	movs	r3, #10
 800364c:	e010      	b.n	8003670 <HAL_GPIO_Init+0x240>
 800364e:	2308      	movs	r3, #8
 8003650:	e00e      	b.n	8003670 <HAL_GPIO_Init+0x240>
 8003652:	2307      	movs	r3, #7
 8003654:	e00c      	b.n	8003670 <HAL_GPIO_Init+0x240>
 8003656:	2306      	movs	r3, #6
 8003658:	e00a      	b.n	8003670 <HAL_GPIO_Init+0x240>
 800365a:	2305      	movs	r3, #5
 800365c:	e008      	b.n	8003670 <HAL_GPIO_Init+0x240>
 800365e:	2304      	movs	r3, #4
 8003660:	e006      	b.n	8003670 <HAL_GPIO_Init+0x240>
 8003662:	2303      	movs	r3, #3
 8003664:	e004      	b.n	8003670 <HAL_GPIO_Init+0x240>
 8003666:	2302      	movs	r3, #2
 8003668:	e002      	b.n	8003670 <HAL_GPIO_Init+0x240>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_GPIO_Init+0x240>
 800366e:	2300      	movs	r3, #0
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	f002 0203 	and.w	r2, r2, #3
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	4093      	lsls	r3, r2
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003680:	4935      	ldr	r1, [pc, #212]	; (8003758 <HAL_GPIO_Init+0x328>)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3302      	adds	r3, #2
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_GPIO_Init+0x354>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b2:	4a34      	ldr	r2, [pc, #208]	; (8003784 <HAL_GPIO_Init+0x354>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036b8:	4b32      	ldr	r3, [pc, #200]	; (8003784 <HAL_GPIO_Init+0x354>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036dc:	4a29      	ldr	r2, [pc, #164]	; (8003784 <HAL_GPIO_Init+0x354>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_GPIO_Init+0x354>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003706:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <HAL_GPIO_Init+0x354>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_GPIO_Init+0x354>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_GPIO_Init+0x354>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3301      	adds	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b0f      	cmp	r3, #15
 8003740:	f67f ae86 	bls.w	8003450 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	40013800 	.word	0x40013800
 800375c:	40020000 	.word	0x40020000
 8003760:	40020400 	.word	0x40020400
 8003764:	40020800 	.word	0x40020800
 8003768:	40020c00 	.word	0x40020c00
 800376c:	40021000 	.word	0x40021000
 8003770:	40021400 	.word	0x40021400
 8003774:	40021800 	.word	0x40021800
 8003778:	40021c00 	.word	0x40021c00
 800377c:	40022000 	.word	0x40022000
 8003780:	40022400 	.word	0x40022400
 8003784:	40013c00 	.word	0x40013c00

08003788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e001      	b.n	80037aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
 80037c4:	4613      	mov	r3, r2
 80037c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c8:	787b      	ldrb	r3, [r7, #1]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037d4:	e003      	b.n	80037de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	041a      	lsls	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e07f      	b.n	80038fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd f868 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800383c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800384c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	e006      	b.n	8003874 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003872:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d104      	bne.n	8003886 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003884:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_I2C_Init+0x11c>)
 8003892:	430b      	orrs	r3, r1
 8003894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	ea42 0103 	orr.w	r1, r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	02008000 	.word	0x02008000

0800390c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d138      	bne.n	8003994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800392c:	2302      	movs	r3, #2
 800392e:	e032      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800395e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d139      	bne.n	8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e033      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2224      	movs	r2, #36	; 0x24
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40007000 	.word	0x40007000

08003a5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a70:	6413      	str	r3, [r2, #64]	; 0x40
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8a:	f7ff fb8f 	bl	80031ac <HAL_GetTick>
 8003a8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a90:	e009      	b.n	8003aa6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a92:	f7ff fb8b 	bl	80031ac <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa0:	d901      	bls.n	8003aa6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e022      	b.n	8003aec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab2:	d1ee      	bne.n	8003a92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac0:	f7ff fb74 	bl	80031ac <HAL_GetTick>
 8003ac4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ac6:	e009      	b.n	8003adc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ac8:	f7ff fb70 	bl	80031ac <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad6:	d901      	bls.n	8003adc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e007      	b.n	8003aec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae8:	d1ee      	bne.n	8003ac8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40007000 	.word	0x40007000

08003afc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b04:	2300      	movs	r3, #0
 8003b06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e29b      	b.n	800404a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8087 	beq.w	8003c2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b20:	4b96      	ldr	r3, [pc, #600]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d00c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2c:	4b93      	ldr	r3, [pc, #588]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d112      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62>
 8003b38:	4b90      	ldr	r3, [pc, #576]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b44:	d10b      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	4b8d      	ldr	r3, [pc, #564]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d06c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x130>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d168      	bne.n	8003c2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e275      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x7a>
 8003b68:	4b84      	ldr	r3, [pc, #528]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a83      	ldr	r2, [pc, #524]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e02e      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x9c>
 8003b7e:	4b7f      	ldr	r3, [pc, #508]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7e      	ldr	r2, [pc, #504]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b7c      	ldr	r3, [pc, #496]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7b      	ldr	r2, [pc, #492]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0xc0>
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b73      	ldr	r3, [pc, #460]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a72      	ldr	r2, [pc, #456]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd8>
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6e      	ldr	r2, [pc, #440]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b6c      	ldr	r3, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6b      	ldr	r2, [pc, #428]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7ff fae6 	bl	80031ac <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7ff fae2 	bl	80031ac <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e229      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xe8>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7ff fad2 	bl	80031ac <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7ff face 	bl	80031ac <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e215      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	4b57      	ldr	r3, [pc, #348]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x110>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d069      	beq.n	8003d0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3a:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b4d      	ldr	r3, [pc, #308]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x190>
 8003c52:	4b4a      	ldr	r3, [pc, #296]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCC_OscConfig+0x17a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1e9      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	493d      	ldr	r1, [pc, #244]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	e040      	b.n	8003d0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d023      	beq.n	8003cdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a38      	ldr	r2, [pc, #224]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7ff fa84 	bl	80031ac <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7ff fa80 	bl	80031ac <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1c7      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4929      	ldr	r1, [pc, #164]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
 8003cda:	e018      	b.n	8003d0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cdc:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7ff fa60 	bl	80031ac <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7ff fa5c 	bl	80031ac <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1a3      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d038      	beq.n	8003d8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d26:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7ff fa3d 	bl	80031ac <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d36:	f7ff fa39 	bl	80031ac <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e180      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x23a>
 8003d54:	e01a      	b.n	8003d8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5a:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7ff fa23 	bl	80031ac <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7ff fa1f 	bl	80031ac <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d903      	bls.n	8003d80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e166      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
 8003d7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	4b92      	ldr	r3, [pc, #584]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ee      	bne.n	8003d6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a4 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9a:	4b8c      	ldr	r3, [pc, #560]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	4b89      	ldr	r3, [pc, #548]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	4a88      	ldr	r2, [pc, #544]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	; 0x40
 8003db2:	4b86      	ldr	r3, [pc, #536]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc2:	4b83      	ldr	r3, [pc, #524]	; (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dce:	4b80      	ldr	r3, [pc, #512]	; (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7f      	ldr	r2, [pc, #508]	; (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7ff f9e7 	bl	80031ac <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7ff f9e3 	bl	80031ac <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	; 0x64
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e12a      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df4:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x31a>
 8003e08:	4b70      	ldr	r3, [pc, #448]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a6f      	ldr	r2, [pc, #444]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	e02d      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x33c>
 8003e1e:	4b6b      	ldr	r3, [pc, #428]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a6a      	ldr	r2, [pc, #424]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	4b68      	ldr	r3, [pc, #416]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a67      	ldr	r2, [pc, #412]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	e01c      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x35e>
 8003e40:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a61      	ldr	r2, [pc, #388]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	4b5f      	ldr	r3, [pc, #380]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a5e      	ldr	r2, [pc, #376]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	e00b      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
 8003e5a:	4b5c      	ldr	r3, [pc, #368]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7ff f997 	bl	80031ac <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7ff f993 	bl	80031ac <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0d8      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4b4c      	ldr	r3, [pc, #304]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ee      	beq.n	8003e82 <HAL_RCC_OscConfig+0x386>
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7ff f981 	bl	80031ac <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7ff f97d 	bl	80031ac <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0c2      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ee      	bne.n	8003eae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80ae 	beq.w	8004048 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eec:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d06d      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d14b      	bne.n	8003f98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a31      	ldr	r2, [pc, #196]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7ff f94e 	bl	80031ac <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7ff f94a 	bl	80031ac <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e091      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	491b      	ldr	r1, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7ff f91c 	bl	80031ac <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f78:	f7ff f918 	bl	80031ac <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e05f      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x47c>
 8003f96:	e057      	b.n	8004048 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7ff f902 	bl	80031ac <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7ff f8fe 	bl	80031ac <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e045      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x4b0>
 8003fca:	e03d      	b.n	8004048 <HAL_RCC_OscConfig+0x54c>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <HAL_RCC_OscConfig+0x558>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d030      	beq.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d129      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d122      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800400a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800400c:	4293      	cmp	r3, r2
 800400e:	d119      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	3b01      	subs	r3, #1
 800401e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d10f      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800

08004058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0d0      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b67      	ldr	r3, [pc, #412]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 020f 	bic.w	r2, r3, #15
 8004086:	4965      	ldr	r1, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d040      	beq.n	800417c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d115      	bne.n	800413a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e073      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b39      	ldr	r3, [pc, #228]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4936      	ldr	r1, [pc, #216]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414c:	f7ff f82e 	bl	80031ac <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7ff f82a 	bl	80031ac <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e053      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d210      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 020f 	bic.w	r2, r3, #15
 8004192:	4922      	ldr	r1, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1cc>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1d0>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1d4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe ff8a 	bl	8003124 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	0800a028 	.word	0x0800a028
 8004228:	2000003c 	.word	0x2000003c
 800422c:	20000044 	.word	0x20000044

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	2300      	movs	r3, #0
 8004242:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80bd 	bhi.w	80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e0b7      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004266:	60bb      	str	r3, [r7, #8]
      break;
 8004268:	e0b7      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800426c:	60bb      	str	r3, [r7, #8]
      break;
 800426e:	e0b4      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800427a:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04d      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b58      	ldr	r3, [pc, #352]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	461a      	mov	r2, r3
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	ea02 0800 	and.w	r8, r2, r0
 800429e:	ea03 0901 	and.w	r9, r3, r1
 80042a2:	4640      	mov	r0, r8
 80042a4:	4649      	mov	r1, r9
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	014b      	lsls	r3, r1, #5
 80042b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042b4:	0142      	lsls	r2, r0, #5
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	ebb0 0008 	subs.w	r0, r0, r8
 80042be:	eb61 0109 	sbc.w	r1, r1, r9
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	018b      	lsls	r3, r1, #6
 80042cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042d0:	0182      	lsls	r2, r0, #6
 80042d2:	1a12      	subs	r2, r2, r0
 80042d4:	eb63 0301 	sbc.w	r3, r3, r1
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	00d9      	lsls	r1, r3, #3
 80042e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e6:	00d0      	lsls	r0, r2, #3
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	eb12 0208 	adds.w	r2, r2, r8
 80042f0:	eb43 0309 	adc.w	r3, r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0259      	lsls	r1, r3, #9
 80042fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004302:	0250      	lsls	r0, r2, #9
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	f7fb ffec 	bl	80002f0 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e04a      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	461a      	mov	r2, r3
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	ea02 0400 	and.w	r4, r2, r0
 800433a:	ea03 0501 	and.w	r5, r3, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	014b      	lsls	r3, r1, #5
 800434c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004350:	0142      	lsls	r2, r0, #5
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	1b00      	subs	r0, r0, r4
 8004358:	eb61 0105 	sbc.w	r1, r1, r5
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	018b      	lsls	r3, r1, #6
 8004366:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800436a:	0182      	lsls	r2, r0, #6
 800436c:	1a12      	subs	r2, r2, r0
 800436e:	eb63 0301 	sbc.w	r3, r3, r1
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	00d9      	lsls	r1, r3, #3
 800437c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004380:	00d0      	lsls	r0, r2, #3
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	1912      	adds	r2, r2, r4
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	f04f 0000 	mov.w	r0, #0
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	0299      	lsls	r1, r3, #10
 8004396:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800439a:	0290      	lsls	r0, r2, #10
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	f7fb ffa0 	bl	80002f0 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	2000003c 	.word	0x2000003c

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004410:	f7ff fff0 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0a9b      	lsrs	r3, r3, #10
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40023800 	.word	0x40023800
 8004430:	0800a038 	.word	0x0800a038

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004438:	f7ff ffdc 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0b5b      	lsrs	r3, r3, #13
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	0800a038 	.word	0x0800a038

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d012      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004484:	4b69      	ldr	r3, [pc, #420]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a68      	ldr	r2, [pc, #416]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800448e:	6093      	str	r3, [r2, #8]
 8004490:	4b66      	ldr	r3, [pc, #408]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	4964      	ldr	r1, [pc, #400]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d017      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	4959      	ldr	r1, [pc, #356]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d017      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044f2:	4b4e      	ldr	r3, [pc, #312]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	494a      	ldr	r1, [pc, #296]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004510:	d101      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 808b 	beq.w	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004540:	4b3a      	ldr	r3, [pc, #232]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	4a39      	ldr	r2, [pc, #228]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454a:	6413      	str	r3, [r2, #64]	; 0x40
 800454c:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004558:	4b35      	ldr	r3, [pc, #212]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800455e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004564:	f7fe fe22 	bl	80031ac <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fe fe1e 	bl	80031ac <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e38f      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800457e:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800458a:	4b28      	ldr	r3, [pc, #160]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d035      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d02e      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b2:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045be:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a1a      	ldr	r2, [pc, #104]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045d0:	4b16      	ldr	r3, [pc, #88]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d114      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fe fde6 	bl	80031ac <HAL_GetTick>
 80045e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e2:	e00a      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fe fde2 	bl	80031ac <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e351      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ee      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004612:	d111      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004622:	400b      	ands	r3, r1
 8004624:	4901      	ldr	r1, [pc, #4]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
 800462a:	e00b      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800462c:	40023800 	.word	0x40023800
 8004630:	40007000 	.word	0x40007000
 8004634:	0ffffcff 	.word	0x0ffffcff
 8004638:	4bb3      	ldr	r3, [pc, #716]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4ab2      	ldr	r2, [pc, #712]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004642:	6093      	str	r3, [r2, #8]
 8004644:	4bb0      	ldr	r3, [pc, #704]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	49ad      	ldr	r1, [pc, #692]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004652:	4313      	orrs	r3, r2
 8004654:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004662:	4ba9      	ldr	r3, [pc, #676]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	4aa7      	ldr	r2, [pc, #668]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004672:	4ba5      	ldr	r3, [pc, #660]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004674:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	49a2      	ldr	r1, [pc, #648]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004690:	4b9d      	ldr	r3, [pc, #628]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469e:	499a      	ldr	r1, [pc, #616]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046b2:	4b95      	ldr	r3, [pc, #596]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c0:	4991      	ldr	r1, [pc, #580]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d4:	4b8c      	ldr	r3, [pc, #560]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e2:	4989      	ldr	r1, [pc, #548]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046f6:	4b84      	ldr	r3, [pc, #528]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4980      	ldr	r1, [pc, #512]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004718:	4b7b      	ldr	r3, [pc, #492]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	4978      	ldr	r1, [pc, #480]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f023 020c 	bic.w	r2, r3, #12
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004748:	496f      	ldr	r1, [pc, #444]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800475c:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	4967      	ldr	r1, [pc, #412]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800477e:	4b62      	ldr	r3, [pc, #392]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	495e      	ldr	r1, [pc, #376]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047a0:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	4956      	ldr	r1, [pc, #344]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047c2:	4b51      	ldr	r3, [pc, #324]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	494d      	ldr	r1, [pc, #308]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047e4:	4b48      	ldr	r3, [pc, #288]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f2:	4945      	ldr	r1, [pc, #276]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004806:	4b40      	ldr	r3, [pc, #256]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	493c      	ldr	r1, [pc, #240]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004828:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004836:	4934      	ldr	r1, [pc, #208]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800484a:	4b2f      	ldr	r3, [pc, #188]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004850:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004858:	492b      	ldr	r1, [pc, #172]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004868:	d101      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800487a:	2301      	movs	r3, #1
 800487c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800488a:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004898:	491b      	ldr	r1, [pc, #108]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048ac:	4b16      	ldr	r3, [pc, #88]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048bc:	4912      	ldr	r1, [pc, #72]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048d0:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e0:	4909      	ldr	r1, [pc, #36]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00f      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	e002      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800
 800490c:	4986      	ldr	r1, [pc, #536]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004920:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004926:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004930:	497d      	ldr	r1, [pc, #500]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d006      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 80d6 	beq.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800494c:	4b76      	ldr	r3, [pc, #472]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a75      	ldr	r2, [pc, #468]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004952:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fe fc28 	bl	80031ac <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004960:	f7fe fc24 	bl	80031ac <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e195      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004972:	4b6d      	ldr	r3, [pc, #436]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d021      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11d      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004992:	4b65      	ldr	r3, [pc, #404]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049a0:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	0e1b      	lsrs	r3, r3, #24
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	019a      	lsls	r2, r3, #6
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	4958      	ldr	r1, [pc, #352]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02e      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f8:	d129      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049fa:	4b4b      	ldr	r3, [pc, #300]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a08:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0e:	0f1b      	lsrs	r3, r3, #28
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	019a      	lsls	r2, r3, #6
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	061b      	lsls	r3, r3, #24
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	071b      	lsls	r3, r3, #28
 8004a2e:	493e      	ldr	r1, [pc, #248]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a36:	4b3c      	ldr	r3, [pc, #240]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3c:	f023 021f 	bic.w	r2, r3, #31
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	3b01      	subs	r3, #1
 8004a46:	4938      	ldr	r1, [pc, #224]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d01d      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a5a:	4b33      	ldr	r3, [pc, #204]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a60:	0e1b      	lsrs	r3, r3, #24
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	0f1b      	lsrs	r3, r3, #28
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	019a      	lsls	r2, r3, #6
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	071b      	lsls	r3, r3, #28
 8004a8e:	4926      	ldr	r1, [pc, #152]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d011      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	019a      	lsls	r2, r3, #6
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	071b      	lsls	r3, r3, #28
 8004abe:	491a      	ldr	r1, [pc, #104]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ac6:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004acc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad2:	f7fe fb6b 	bl	80031ac <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ada:	f7fe fb67 	bl	80031ac <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b64      	cmp	r3, #100	; 0x64
 8004ae6:	d901      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0d8      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	f040 80ce 	bne.w	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0c:	f7fe fb4e 	bl	80031ac <HAL_GetTick>
 8004b10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b12:	e00b      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b14:	f7fe fb4a 	bl	80031ac <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d904      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0bb      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b2c:	4b5e      	ldr	r3, [pc, #376]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b38:	d0ec      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d02e      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d12a      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b62:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b70:	4b4d      	ldr	r3, [pc, #308]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	0f1b      	lsrs	r3, r3, #28
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	019a      	lsls	r2, r3, #6
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	071b      	lsls	r3, r3, #28
 8004b96:	4944      	ldr	r1, [pc, #272]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b9e:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	3b01      	subs	r3, #1
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	493d      	ldr	r1, [pc, #244]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d022      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bcc:	d11d      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bce:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	0e1b      	lsrs	r3, r3, #24
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	0f1b      	lsrs	r3, r3, #28
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	019a      	lsls	r2, r3, #6
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	071b      	lsls	r3, r3, #28
 8004c02:	4929      	ldr	r1, [pc, #164]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d028      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	0e1b      	lsrs	r3, r3, #24
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c24:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	019a      	lsls	r2, r3, #6
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	061b      	lsls	r3, r3, #24
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	071b      	lsls	r3, r3, #28
 8004c4a:	4917      	ldr	r1, [pc, #92]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	4911      	ldr	r1, [pc, #68]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c74:	f7fe fa9a 	bl	80031ac <HAL_GetTick>
 8004c78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c7c:	f7fe fa96 	bl	80031ac <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e007      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9a:	d1ef      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800

08004cac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	795b      	ldrb	r3, [r3, #5]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd f812 	bl	8001cf8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0204 	orr.w	r2, r2, #4
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e09d      	b.n	8004e4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d22:	d009      	beq.n	8004d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	61da      	str	r2, [r3, #28]
 8004d2a:	e005      	b.n	8004d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd f82e 	bl	8001db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d78:	d902      	bls.n	8004d80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e002      	b.n	8004d86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d8e:	d007      	beq.n	8004da0 <HAL_SPI_Init+0xa0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	ea42 0103 	orr.w	r1, r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	f003 0204 	and.w	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e1c:	ea42 0103 	orr.w	r1, r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b088      	sub	sp, #32
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_SPI_Transmit+0x22>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e158      	b.n	800512a <HAL_SPI_Transmit+0x2d4>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e80:	f7fe f994 	bl	80031ac <HAL_GetTick>
 8004e84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e9a:	e13d      	b.n	8005118 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_Transmit+0x52>
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eac:	e134      	b.n	8005118 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef8:	d10f      	bne.n	8004f1a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d007      	beq.n	8004f38 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f40:	d94b      	bls.n	8004fda <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_SPI_Transmit+0xfa>
 8004f4a:	8afb      	ldrh	r3, [r7, #22]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d13e      	bne.n	8004fce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	881a      	ldrh	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	1c9a      	adds	r2, r3, #2
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f74:	e02b      	b.n	8004fce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d112      	bne.n	8004faa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	881a      	ldrh	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	1c9a      	adds	r2, r3, #2
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fa8:	e011      	b.n	8004fce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004faa:	f7fe f8ff 	bl	80031ac <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d803      	bhi.n	8004fc2 <HAL_SPI_Transmit+0x16c>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d102      	bne.n	8004fc8 <HAL_SPI_Transmit+0x172>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fcc:	e0a4      	b.n	8005118 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ce      	bne.n	8004f76 <HAL_SPI_Transmit+0x120>
 8004fd8:	e07c      	b.n	80050d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_SPI_Transmit+0x192>
 8004fe2:	8afb      	ldrh	r3, [r7, #22]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d170      	bne.n	80050ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d912      	bls.n	8005018 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b02      	subs	r3, #2
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005016:	e058      	b.n	80050ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800503e:	e044      	b.n	80050ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b02      	cmp	r3, #2
 800504c:	d12b      	bne.n	80050a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d912      	bls.n	800507e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	881a      	ldrh	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	1c9a      	adds	r2, r3, #2
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b02      	subs	r3, #2
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800507c:	e025      	b.n	80050ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050a4:	e011      	b.n	80050ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050a6:	f7fe f881 	bl	80031ac <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d803      	bhi.n	80050be <HAL_SPI_Transmit+0x268>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d102      	bne.n	80050c4 <HAL_SPI_Transmit+0x26e>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050c8:	e026      	b.n	8005118 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1b5      	bne.n	8005040 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f945 	bl	8005368 <SPI_EndRxTxTransaction>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e000      	b.n	8005118 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005116:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005128:	7ffb      	ldrb	r3, [r7, #31]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005144:	f7fe f832 	bl	80031ac <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	4413      	add	r3, r2
 8005152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005154:	f7fe f82a 	bl	80031ac <HAL_GetTick>
 8005158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	015b      	lsls	r3, r3, #5
 8005160:	0d1b      	lsrs	r3, r3, #20
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516a:	e054      	b.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d050      	beq.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005174:	f7fe f81a 	bl	80031ac <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	429a      	cmp	r2, r3
 8005182:	d902      	bls.n	800518a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d13d      	bne.n	8005206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d111      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ac:	d004      	beq.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	d107      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d0:	d10f      	bne.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e017      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3b01      	subs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	429a      	cmp	r2, r3
 8005232:	d19b      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	2000003c 	.word	0x2000003c

08005244 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005252:	f7fd ffab 	bl	80031ac <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	4413      	add	r3, r2
 8005260:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005262:	f7fd ffa3 	bl	80031ac <HAL_GetTick>
 8005266:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005268:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	00da      	lsls	r2, r3, #3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	0d1b      	lsrs	r3, r3, #20
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005280:	e062      	b.n	8005348 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005288:	d109      	bne.n	800529e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800529c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d050      	beq.n	8005348 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a6:	f7fd ff81 	bl	80031ac <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d902      	bls.n	80052bc <SPI_WaitFifoStateUntilTimeout+0x78>
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d13d      	bne.n	8005338 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d4:	d111      	bne.n	80052fa <SPI_WaitFifoStateUntilTimeout+0xb6>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052de:	d004      	beq.n	80052ea <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d107      	bne.n	80052fa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	d10f      	bne.n	8005324 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005322:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e010      	b.n	800535a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3b01      	subs	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d194      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	2000003c 	.word	0x2000003c

08005368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2200      	movs	r2, #0
 800537c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff5f 	bl	8005244 <SPI_WaitFifoStateUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e027      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2180      	movs	r1, #128	; 0x80
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fec4 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e014      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ff38 	bl	8005244 <SPI_WaitFifoStateUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e000      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e049      	b.n	800549a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc ff6c 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f000 fdb2 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e054      	b.n	8005566 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <HAL_TIM_Base_Start_IT+0xd0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d022      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d01d      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_TIM_Base_Start_IT+0xd8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <HAL_TIM_Base_Start_IT+0xdc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <HAL_TIM_Base_Start_IT+0xe0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_TIM_Base_Start_IT+0xe4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1b      	ldr	r2, [pc, #108]	; (800558c <HAL_TIM_Base_Start_IT+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d115      	bne.n	8005550 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_TIM_Base_Start_IT+0xec>)
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b06      	cmp	r3, #6
 8005534:	d015      	beq.n	8005562 <HAL_TIM_Base_Start_IT+0xbe>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553c:	d011      	beq.n	8005562 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	e008      	b.n	8005562 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e000      	b.n	8005564 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40010400 	.word	0x40010400
 8005588:	40014000 	.word	0x40014000
 800558c:	40001800 	.word	0x40001800
 8005590:	00010007 	.word	0x00010007

08005594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e049      	b.n	800563a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f841 	bl	8005642 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fce2 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <HAL_TIM_PWM_Start+0x24>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e03c      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b04      	cmp	r3, #4
 8005680:	d109      	bne.n	8005696 <HAL_TIM_PWM_Start+0x3e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	e02f      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b08      	cmp	r3, #8
 800569a:	d109      	bne.n	80056b0 <HAL_TIM_PWM_Start+0x58>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	e022      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b0c      	cmp	r3, #12
 80056b4:	d109      	bne.n	80056ca <HAL_TIM_PWM_Start+0x72>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	bf14      	ite	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	2300      	moveq	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	e015      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b10      	cmp	r3, #16
 80056ce:	d109      	bne.n	80056e4 <HAL_TIM_PWM_Start+0x8c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	bf14      	ite	ne
 80056dc:	2301      	movne	r3, #1
 80056de:	2300      	moveq	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e008      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e092      	b.n	8005824 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Start+0xb6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570c:	e023      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Start+0xc6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571c:	e01b      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start+0xd6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800572c:	e013      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d104      	bne.n	800573e <HAL_TIM_PWM_Start+0xe6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800573c:	e00b      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d104      	bne.n	800574e <HAL_TIM_PWM_Start+0xf6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800574c:	e003      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2201      	movs	r2, #1
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 ffb4 	bl	80066cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a30      	ldr	r2, [pc, #192]	; (800582c <HAL_TIM_PWM_Start+0x1d4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_TIM_PWM_Start+0x120>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <HAL_TIM_PWM_Start+0x1d8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_TIM_PWM_Start+0x124>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_TIM_PWM_Start+0x126>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a25      	ldr	r2, [pc, #148]	; (800582c <HAL_TIM_PWM_Start+0x1d4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d022      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x18a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a4:	d01d      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x18a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a22      	ldr	r2, [pc, #136]	; (8005834 <HAL_TIM_PWM_Start+0x1dc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x18a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a20      	ldr	r2, [pc, #128]	; (8005838 <HAL_TIM_PWM_Start+0x1e0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x18a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1f      	ldr	r2, [pc, #124]	; (800583c <HAL_TIM_PWM_Start+0x1e4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x18a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_TIM_PWM_Start+0x1d8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x18a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HAL_TIM_PWM_Start+0x1e8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x18a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_TIM_PWM_Start+0x1ec>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d115      	bne.n	800580e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_TIM_PWM_Start+0x1f0>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d015      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1c8>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fa:	d011      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580c:	e008      	b.n	8005820 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e000      	b.n	8005822 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40001800 	.word	0x40001800
 8005848:	00010007 	.word	0x00010007

0800584c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 ff34 	bl	80066cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a36      	ldr	r2, [pc, #216]	; (8005944 <HAL_TIM_PWM_Stop+0xf8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_PWM_Stop+0x2c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a35      	ldr	r2, [pc, #212]	; (8005948 <HAL_TIM_PWM_Stop+0xfc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_TIM_PWM_Stop+0x30>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_TIM_PWM_Stop+0x32>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1a      	ldr	r2, [r3, #32]
 8005888:	f241 1311 	movw	r3, #4369	; 0x1111
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10f      	bne.n	80058b2 <HAL_TIM_PWM_Stop+0x66>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	f240 4344 	movw	r3, #1092	; 0x444
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_PWM_Stop+0x66>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a1a      	ldr	r2, [r3, #32]
 80058b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10f      	bne.n	80058e2 <HAL_TIM_PWM_Stop+0x96>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6a1a      	ldr	r2, [r3, #32]
 80058c8:	f240 4344 	movw	r3, #1092	; 0x444
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d107      	bne.n	80058e2 <HAL_TIM_PWM_Stop+0x96>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_PWM_Stop+0xa6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f0:	e023      	b.n	800593a <HAL_TIM_PWM_Stop+0xee>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_PWM_Stop+0xb6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005900:	e01b      	b.n	800593a <HAL_TIM_PWM_Stop+0xee>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Stop+0xc6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005910:	e013      	b.n	800593a <HAL_TIM_PWM_Stop+0xee>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b0c      	cmp	r3, #12
 8005916:	d104      	bne.n	8005922 <HAL_TIM_PWM_Stop+0xd6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005920:	e00b      	b.n	800593a <HAL_TIM_PWM_Stop+0xee>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b10      	cmp	r3, #16
 8005926:	d104      	bne.n	8005932 <HAL_TIM_PWM_Stop+0xe6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005930:	e003      	b.n	800593a <HAL_TIM_PWM_Stop+0xee>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40010000 	.word	0x40010000
 8005948:	40010400 	.word	0x40010400

0800594c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	d122      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d11b      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0202 	mvn.w	r2, #2
 8005978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fae6 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fad8 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fae9 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d122      	bne.n	80059fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d11b      	bne.n	80059fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0204 	mvn.w	r2, #4
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2202      	movs	r2, #2
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fabc 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 faae 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fabf 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d122      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d11b      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0208 	mvn.w	r2, #8
 8005a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2204      	movs	r2, #4
 8005a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa92 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fa84 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fa95 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d122      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0210 	mvn.w	r2, #16
 8005a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2208      	movs	r2, #8
 8005a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fa68 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005a90:	e005      	b.n	8005a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa5a 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fa6b 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d107      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0201 	mvn.w	r2, #1
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fa34 	bl	8005f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ada:	2b80      	cmp	r3, #128	; 0x80
 8005adc:	d10e      	bne.n	8005afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae8:	2b80      	cmp	r3, #128	; 0x80
 8005aea:	d107      	bne.n	8005afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fea6 	bl	8006848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0a:	d10e      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d107      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fe99 	bl	800685c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d10e      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa19 	bl	8005f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d10e      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d107      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 0220 	mvn.w	r2, #32
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fe59 	bl	8006834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e0fd      	b.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b14      	cmp	r3, #20
 8005bb2:	f200 80f0 	bhi.w	8005d96 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005d97 	.word	0x08005d97
 8005bc4:	08005d97 	.word	0x08005d97
 8005bc8:	08005d97 	.word	0x08005d97
 8005bcc:	08005c51 	.word	0x08005c51
 8005bd0:	08005d97 	.word	0x08005d97
 8005bd4:	08005d97 	.word	0x08005d97
 8005bd8:	08005d97 	.word	0x08005d97
 8005bdc:	08005c93 	.word	0x08005c93
 8005be0:	08005d97 	.word	0x08005d97
 8005be4:	08005d97 	.word	0x08005d97
 8005be8:	08005d97 	.word	0x08005d97
 8005bec:	08005cd3 	.word	0x08005cd3
 8005bf0:	08005d97 	.word	0x08005d97
 8005bf4:	08005d97 	.word	0x08005d97
 8005bf8:	08005d97 	.word	0x08005d97
 8005bfc:	08005d15 	.word	0x08005d15
 8005c00:	08005d97 	.word	0x08005d97
 8005c04:	08005d97 	.word	0x08005d97
 8005c08:	08005d97 	.word	0x08005d97
 8005c0c:	08005d55 	.word	0x08005d55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fa60 	bl	80060dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0208 	orr.w	r2, r2, #8
 8005c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0204 	bic.w	r2, r2, #4
 8005c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	619a      	str	r2, [r3, #24]
      break;
 8005c4e:	e0a3      	b.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fab2 	bl	80061c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	021a      	lsls	r2, r3, #8
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	619a      	str	r2, [r3, #24]
      break;
 8005c90:	e082      	b.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fb09 	bl	80062b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0208 	orr.w	r2, r2, #8
 8005cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0204 	bic.w	r2, r2, #4
 8005cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69d9      	ldr	r1, [r3, #28]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	61da      	str	r2, [r3, #28]
      break;
 8005cd0:	e062      	b.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fb5f 	bl	800639c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	021a      	lsls	r2, r3, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	61da      	str	r2, [r3, #28]
      break;
 8005d12:	e041      	b.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fb96 	bl	800644c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0208 	orr.w	r2, r2, #8
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0204 	bic.w	r2, r2, #4
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d52:	e021      	b.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fbc8 	bl	80064f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d94:	e000      	b.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005d96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop

08005dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_ConfigClockSource+0x18>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0b3      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x180>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4b55      	ldr	r3, [pc, #340]	; (8005f34 <HAL_TIM_ConfigClockSource+0x188>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfc:	d03e      	beq.n	8005e7c <HAL_TIM_ConfigClockSource+0xd0>
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e02:	f200 8087 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0a:	f000 8085 	beq.w	8005f18 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	d87f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d01a      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0xa2>
 8005e18:	2b70      	cmp	r3, #112	; 0x70
 8005e1a:	d87b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e1c:	2b60      	cmp	r3, #96	; 0x60
 8005e1e:	d050      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x116>
 8005e20:	2b60      	cmp	r3, #96	; 0x60
 8005e22:	d877      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e24:	2b50      	cmp	r3, #80	; 0x50
 8005e26:	d03c      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0xf6>
 8005e28:	2b50      	cmp	r3, #80	; 0x50
 8005e2a:	d873      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d058      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x136>
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d86f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d064      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x156>
 8005e38:	2b30      	cmp	r3, #48	; 0x30
 8005e3a:	d86b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d060      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x156>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d867      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05c      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x156>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d05a      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e4c:	e062      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6899      	ldr	r1, [r3, #8]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f000 fc15 	bl	800668c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	609a      	str	r2, [r3, #8]
      break;
 8005e7a:	e04e      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6899      	ldr	r1, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f000 fbfe 	bl	800668c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e9e:	609a      	str	r2, [r3, #8]
      break;
 8005ea0:	e03b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fb72 	bl	8006598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2150      	movs	r1, #80	; 0x50
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fbcb 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e02b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 fb91 	bl	80065f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2160      	movs	r1, #96	; 0x60
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fbbb 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e01b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f000 fb52 	bl	8006598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2140      	movs	r1, #64	; 0x40
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fbab 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8005f00:	e00b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 fba2 	bl	8006656 <TIM_ITRx_SetConfig>
        break;
 8005f12:	e002      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	fffeff88 	.word	0xfffeff88

08005f38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a40      	ldr	r2, [pc, #256]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3d      	ldr	r2, [pc, #244]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3c      	ldr	r2, [pc, #240]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3b      	ldr	r2, [pc, #236]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3a      	ldr	r2, [pc, #232]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d027      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d023      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d017      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a28      	ldr	r2, [pc, #160]	; (80060c4 <TIM_Base_SetConfig+0x128>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <TIM_Base_SetConfig+0x12c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a26      	ldr	r2, [pc, #152]	; (80060cc <TIM_Base_SetConfig+0x130>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_Base_SetConfig+0x134>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <TIM_Base_SetConfig+0x138>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a23      	ldr	r2, [pc, #140]	; (80060d8 <TIM_Base_SetConfig+0x13c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d108      	bne.n	8006060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0xf8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40014800 	.word	0x40014800
 80060d0:	40001800 	.word	0x40001800
 80060d4:	40001c00 	.word	0x40001c00
 80060d8:	40002000 	.word	0x40002000

080060dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f023 0201 	bic.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <TIM_OC1_SetConfig+0xd8>)
 8006108:	4013      	ands	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 0302 	bic.w	r3, r3, #2
 8006124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a21      	ldr	r2, [pc, #132]	; (80061b8 <TIM_OC1_SetConfig+0xdc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC1_SetConfig+0x64>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a20      	ldr	r2, [pc, #128]	; (80061bc <TIM_OC1_SetConfig+0xe0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10c      	bne.n	800615a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0308 	bic.w	r3, r3, #8
 8006146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0304 	bic.w	r3, r3, #4
 8006158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC1_SetConfig+0xdc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC1_SetConfig+0x8e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC1_SetConfig+0xe0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d111      	bne.n	800618e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	fffeff8f 	.word	0xfffeff8f
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4b2e      	ldr	r3, [pc, #184]	; (80062a4 <TIM_OC2_SetConfig+0xe4>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0320 	bic.w	r3, r3, #32
 800620a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <TIM_OC2_SetConfig+0xe8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0x68>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a22      	ldr	r2, [pc, #136]	; (80062ac <TIM_OC2_SetConfig+0xec>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10d      	bne.n	8006244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC2_SetConfig+0x94>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <TIM_OC2_SetConfig+0xec>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d113      	bne.n	800627c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	feff8fff 	.word	0xfeff8fff
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40010400 	.word	0x40010400

080062b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <TIM_OC3_SetConfig+0xe0>)
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a22      	ldr	r2, [pc, #136]	; (8006394 <TIM_OC3_SetConfig+0xe4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC3_SetConfig+0x66>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a21      	ldr	r2, [pc, #132]	; (8006398 <TIM_OC3_SetConfig+0xe8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10d      	bne.n	8006332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800631c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <TIM_OC3_SetConfig+0xe4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x92>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a16      	ldr	r2, [pc, #88]	; (8006398 <TIM_OC3_SetConfig+0xe8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d113      	bne.n	800636a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	fffeff8f 	.word	0xfffeff8f
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400

0800639c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <TIM_OC4_SetConfig+0xa4>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	031b      	lsls	r3, r3, #12
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a13      	ldr	r2, [pc, #76]	; (8006444 <TIM_OC4_SetConfig+0xa8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_OC4_SetConfig+0x68>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a12      	ldr	r2, [pc, #72]	; (8006448 <TIM_OC4_SetConfig+0xac>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d109      	bne.n	8006418 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	019b      	lsls	r3, r3, #6
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	feff8fff 	.word	0xfeff8fff
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b1b      	ldr	r3, [pc, #108]	; (80064e4 <TIM_OC5_SetConfig+0x98>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800648c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <TIM_OC5_SetConfig+0x9c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_OC5_SetConfig+0x5e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a11      	ldr	r2, [pc, #68]	; (80064ec <TIM_OC5_SetConfig+0xa0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d109      	bne.n	80064be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	621a      	str	r2, [r3, #32]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	fffeff8f 	.word	0xfffeff8f
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40010400 	.word	0x40010400

080064f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <TIM_OC6_SetConfig+0x9c>)
 800651c:	4013      	ands	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	051b      	lsls	r3, r3, #20
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a13      	ldr	r2, [pc, #76]	; (8006590 <TIM_OC6_SetConfig+0xa0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC6_SetConfig+0x60>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <TIM_OC6_SetConfig+0xa4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d109      	bne.n	8006564 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	029b      	lsls	r3, r3, #10
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	feff8fff 	.word	0xfeff8fff
 8006590:	40010000 	.word	0x40010000
 8006594:	40010400 	.word	0x40010400

08006598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 030a 	bic.w	r3, r3, #10
 80065d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0210 	bic.w	r2, r3, #16
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	f043 0307 	orr.w	r3, r3, #7
 8006678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	021a      	lsls	r2, r3, #8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	609a      	str	r2, [r3, #8]
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2201      	movs	r2, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1a      	ldr	r2, [r3, #32]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	401a      	ands	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	431a      	orrs	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800672c:	2302      	movs	r3, #2
 800672e:	e06d      	b.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a30      	ldr	r2, [pc, #192]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2f      	ldr	r2, [pc, #188]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d108      	bne.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800676a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a20      	ldr	r2, [pc, #128]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a2:	d01d      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a15      	ldr	r2, [pc, #84]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a16      	ldr	r2, [pc, #88]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a15      	ldr	r2, [pc, #84]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10c      	bne.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40014000 	.word	0x40014000
 8006830:	40001800 	.word	0x40001800

08006834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e040      	b.n	8006904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb fe1c 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	; 0x24
 800689c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f990 	bl	8006bd4 <UART_SetConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e022      	b.n	8006904 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fbe6 	bl	8007098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc6d 	bl	80071dc <UART_CheckIdleState>
 8006902:	4603      	mov	r3, r0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006920:	2b20      	cmp	r3, #32
 8006922:	f040 8081 	bne.w	8006a28 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_UART_Transmit+0x26>
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e079      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UART_Transmit+0x38>
 8006940:	2302      	movs	r3, #2
 8006942:	e072      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2221      	movs	r2, #33	; 0x21
 8006958:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800695a:	f7fc fc27 	bl	80031ac <HAL_GetTick>
 800695e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006978:	d108      	bne.n	800698c <HAL_UART_Transmit+0x80>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	e003      	b.n	8006994 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800699c:	e02c      	b.n	80069f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fc60 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e038      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	3302      	adds	r3, #2
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	e007      	b.n	80069e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1cc      	bne.n	800699e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2140      	movs	r1, #64	; 0x40
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fc2d 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e005      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	f040 80be 	bne.w	8006bc8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_UART_Receive+0x26>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0b6      	b.n	8006bca <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Receive+0x38>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e0af      	b.n	8006bca <HAL_UART_Receive+0x198>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2222      	movs	r2, #34	; 0x22
 8006a7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a86:	f7fc fb91 	bl	80031ac <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_UART_Receive+0x92>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d105      	bne.n	8006aba <HAL_UART_Receive+0x88>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab8:	e02d      	b.n	8006b16 <HAL_UART_Receive+0xe4>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac2:	e028      	b.n	8006b16 <HAL_UART_Receive+0xe4>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10d      	bne.n	8006ae8 <HAL_UART_Receive+0xb6>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_UART_Receive+0xac>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	22ff      	movs	r2, #255	; 0xff
 8006ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006adc:	e01b      	b.n	8006b16 <HAL_UART_Receive+0xe4>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	227f      	movs	r2, #127	; 0x7f
 8006ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ae6:	e016      	b.n	8006b16 <HAL_UART_Receive+0xe4>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006af0:	d10d      	bne.n	8006b0e <HAL_UART_Receive+0xdc>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <HAL_UART_Receive+0xd2>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	227f      	movs	r2, #127	; 0x7f
 8006afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b02:	e008      	b.n	8006b16 <HAL_UART_Receive+0xe4>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	223f      	movs	r2, #63	; 0x3f
 8006b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b0c:	e003      	b.n	8006b16 <HAL_UART_Receive+0xe4>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b1c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d108      	bne.n	8006b3a <HAL_UART_Receive+0x108>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e003      	b.n	8006b42 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b4a:	e032      	b.n	8006bb2 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	2120      	movs	r1, #32
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fb89 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e031      	b.n	8006bca <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10c      	bne.n	8006b86 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	8a7b      	ldrh	r3, [r7, #18]
 8006b76:	4013      	ands	r3, r2
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	3302      	adds	r3, #2
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	e00c      	b.n	8006ba0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	8a7b      	ldrh	r3, [r7, #18]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	4013      	ands	r3, r2
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1c6      	bne.n	8006b4c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e000      	b.n	8006bca <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8006bc8:	2302      	movs	r3, #2
  }
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4ba7      	ldr	r3, [pc, #668]	; (8006e9c <UART_SetConfig+0x2c8>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a95      	ldr	r2, [pc, #596]	; (8006ea0 <UART_SetConfig+0x2cc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d120      	bne.n	8006c92 <UART_SetConfig+0xbe>
 8006c50:	4b94      	ldr	r3, [pc, #592]	; (8006ea4 <UART_SetConfig+0x2d0>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d816      	bhi.n	8006c8c <UART_SetConfig+0xb8>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0x90>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c75 	.word	0x08006c75
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c7b 	.word	0x08006c7b
 8006c70:	08006c87 	.word	0x08006c87
 8006c74:	2301      	movs	r3, #1
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e14f      	b.n	8006f1a <UART_SetConfig+0x346>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e14c      	b.n	8006f1a <UART_SetConfig+0x346>
 8006c80:	2304      	movs	r3, #4
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e149      	b.n	8006f1a <UART_SetConfig+0x346>
 8006c86:	2308      	movs	r3, #8
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e146      	b.n	8006f1a <UART_SetConfig+0x346>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e143      	b.n	8006f1a <UART_SetConfig+0x346>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a84      	ldr	r2, [pc, #528]	; (8006ea8 <UART_SetConfig+0x2d4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d132      	bne.n	8006d02 <UART_SetConfig+0x12e>
 8006c9c:	4b81      	ldr	r3, [pc, #516]	; (8006ea4 <UART_SetConfig+0x2d0>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f003 030c 	and.w	r3, r3, #12
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d828      	bhi.n	8006cfc <UART_SetConfig+0x128>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <UART_SetConfig+0xdc>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006cfd 	.word	0x08006cfd
 8006cb8:	08006cfd 	.word	0x08006cfd
 8006cbc:	08006cfd 	.word	0x08006cfd
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006cfd 	.word	0x08006cfd
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006cfd 	.word	0x08006cfd
 8006cd0:	08006ceb 	.word	0x08006ceb
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006cfd 	.word	0x08006cfd
 8006ce0:	08006cf7 	.word	0x08006cf7
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	77fb      	strb	r3, [r7, #31]
 8006ce8:	e117      	b.n	8006f1a <UART_SetConfig+0x346>
 8006cea:	2302      	movs	r3, #2
 8006cec:	77fb      	strb	r3, [r7, #31]
 8006cee:	e114      	b.n	8006f1a <UART_SetConfig+0x346>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e111      	b.n	8006f1a <UART_SetConfig+0x346>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	77fb      	strb	r3, [r7, #31]
 8006cfa:	e10e      	b.n	8006f1a <UART_SetConfig+0x346>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e10b      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a69      	ldr	r2, [pc, #420]	; (8006eac <UART_SetConfig+0x2d8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d120      	bne.n	8006d4e <UART_SetConfig+0x17a>
 8006d0c:	4b65      	ldr	r3, [pc, #404]	; (8006ea4 <UART_SetConfig+0x2d0>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d013      	beq.n	8006d42 <UART_SetConfig+0x16e>
 8006d1a:	2b30      	cmp	r3, #48	; 0x30
 8006d1c:	d814      	bhi.n	8006d48 <UART_SetConfig+0x174>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d009      	beq.n	8006d36 <UART_SetConfig+0x162>
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d810      	bhi.n	8006d48 <UART_SetConfig+0x174>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <UART_SetConfig+0x15c>
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d006      	beq.n	8006d3c <UART_SetConfig+0x168>
 8006d2e:	e00b      	b.n	8006d48 <UART_SetConfig+0x174>
 8006d30:	2300      	movs	r3, #0
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e0f1      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d36:	2302      	movs	r3, #2
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e0ee      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e0eb      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d42:	2308      	movs	r3, #8
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e0e8      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e0e5      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a57      	ldr	r2, [pc, #348]	; (8006eb0 <UART_SetConfig+0x2dc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d120      	bne.n	8006d9a <UART_SetConfig+0x1c6>
 8006d58:	4b52      	ldr	r3, [pc, #328]	; (8006ea4 <UART_SetConfig+0x2d0>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d62:	2bc0      	cmp	r3, #192	; 0xc0
 8006d64:	d013      	beq.n	8006d8e <UART_SetConfig+0x1ba>
 8006d66:	2bc0      	cmp	r3, #192	; 0xc0
 8006d68:	d814      	bhi.n	8006d94 <UART_SetConfig+0x1c0>
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d009      	beq.n	8006d82 <UART_SetConfig+0x1ae>
 8006d6e:	2b80      	cmp	r3, #128	; 0x80
 8006d70:	d810      	bhi.n	8006d94 <UART_SetConfig+0x1c0>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <UART_SetConfig+0x1a8>
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d006      	beq.n	8006d88 <UART_SetConfig+0x1b4>
 8006d7a:	e00b      	b.n	8006d94 <UART_SetConfig+0x1c0>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e0cb      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d82:	2302      	movs	r3, #2
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e0c8      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e0c5      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e0c2      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d94:	2310      	movs	r3, #16
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e0bf      	b.n	8006f1a <UART_SetConfig+0x346>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a45      	ldr	r2, [pc, #276]	; (8006eb4 <UART_SetConfig+0x2e0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d125      	bne.n	8006df0 <UART_SetConfig+0x21c>
 8006da4:	4b3f      	ldr	r3, [pc, #252]	; (8006ea4 <UART_SetConfig+0x2d0>)
 8006da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db2:	d017      	beq.n	8006de4 <UART_SetConfig+0x210>
 8006db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db8:	d817      	bhi.n	8006dea <UART_SetConfig+0x216>
 8006dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dbe:	d00b      	beq.n	8006dd8 <UART_SetConfig+0x204>
 8006dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc4:	d811      	bhi.n	8006dea <UART_SetConfig+0x216>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <UART_SetConfig+0x1fe>
 8006dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dce:	d006      	beq.n	8006dde <UART_SetConfig+0x20a>
 8006dd0:	e00b      	b.n	8006dea <UART_SetConfig+0x216>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e0a0      	b.n	8006f1a <UART_SetConfig+0x346>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e09d      	b.n	8006f1a <UART_SetConfig+0x346>
 8006dde:	2304      	movs	r3, #4
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e09a      	b.n	8006f1a <UART_SetConfig+0x346>
 8006de4:	2308      	movs	r3, #8
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e097      	b.n	8006f1a <UART_SetConfig+0x346>
 8006dea:	2310      	movs	r3, #16
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	e094      	b.n	8006f1a <UART_SetConfig+0x346>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a30      	ldr	r2, [pc, #192]	; (8006eb8 <UART_SetConfig+0x2e4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d125      	bne.n	8006e46 <UART_SetConfig+0x272>
 8006dfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <UART_SetConfig+0x2d0>)
 8006dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e08:	d017      	beq.n	8006e3a <UART_SetConfig+0x266>
 8006e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e0e:	d817      	bhi.n	8006e40 <UART_SetConfig+0x26c>
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e14:	d00b      	beq.n	8006e2e <UART_SetConfig+0x25a>
 8006e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1a:	d811      	bhi.n	8006e40 <UART_SetConfig+0x26c>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <UART_SetConfig+0x254>
 8006e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e24:	d006      	beq.n	8006e34 <UART_SetConfig+0x260>
 8006e26:	e00b      	b.n	8006e40 <UART_SetConfig+0x26c>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e075      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e072      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e34:	2304      	movs	r3, #4
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e06f      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e06c      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e40:	2310      	movs	r3, #16
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e069      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <UART_SetConfig+0x2e8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d137      	bne.n	8006ec0 <UART_SetConfig+0x2ec>
 8006e50:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <UART_SetConfig+0x2d0>)
 8006e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e5e:	d017      	beq.n	8006e90 <UART_SetConfig+0x2bc>
 8006e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e64:	d817      	bhi.n	8006e96 <UART_SetConfig+0x2c2>
 8006e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6a:	d00b      	beq.n	8006e84 <UART_SetConfig+0x2b0>
 8006e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e70:	d811      	bhi.n	8006e96 <UART_SetConfig+0x2c2>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <UART_SetConfig+0x2aa>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	d006      	beq.n	8006e8a <UART_SetConfig+0x2b6>
 8006e7c:	e00b      	b.n	8006e96 <UART_SetConfig+0x2c2>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e04a      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e84:	2302      	movs	r3, #2
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e047      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e8a:	2304      	movs	r3, #4
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e044      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e90:	2308      	movs	r3, #8
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e041      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e96:	2310      	movs	r3, #16
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e03e      	b.n	8006f1a <UART_SetConfig+0x346>
 8006e9c:	efff69f3 	.word	0xefff69f3
 8006ea0:	40011000 	.word	0x40011000
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	40004400 	.word	0x40004400
 8006eac:	40004800 	.word	0x40004800
 8006eb0:	40004c00 	.word	0x40004c00
 8006eb4:	40005000 	.word	0x40005000
 8006eb8:	40011400 	.word	0x40011400
 8006ebc:	40007800 	.word	0x40007800
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a71      	ldr	r2, [pc, #452]	; (800708c <UART_SetConfig+0x4b8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d125      	bne.n	8006f16 <UART_SetConfig+0x342>
 8006eca:	4b71      	ldr	r3, [pc, #452]	; (8007090 <UART_SetConfig+0x4bc>)
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ed4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ed8:	d017      	beq.n	8006f0a <UART_SetConfig+0x336>
 8006eda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ede:	d817      	bhi.n	8006f10 <UART_SetConfig+0x33c>
 8006ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee4:	d00b      	beq.n	8006efe <UART_SetConfig+0x32a>
 8006ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eea:	d811      	bhi.n	8006f10 <UART_SetConfig+0x33c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <UART_SetConfig+0x324>
 8006ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef4:	d006      	beq.n	8006f04 <UART_SetConfig+0x330>
 8006ef6:	e00b      	b.n	8006f10 <UART_SetConfig+0x33c>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e00d      	b.n	8006f1a <UART_SetConfig+0x346>
 8006efe:	2302      	movs	r3, #2
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e00a      	b.n	8006f1a <UART_SetConfig+0x346>
 8006f04:	2304      	movs	r3, #4
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e007      	b.n	8006f1a <UART_SetConfig+0x346>
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e004      	b.n	8006f1a <UART_SetConfig+0x346>
 8006f10:	2310      	movs	r3, #16
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e001      	b.n	8006f1a <UART_SetConfig+0x346>
 8006f16:	2310      	movs	r3, #16
 8006f18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f22:	d15b      	bne.n	8006fdc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006f24:	7ffb      	ldrb	r3, [r7, #31]
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d827      	bhi.n	8006f7a <UART_SetConfig+0x3a6>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x35c>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f5d 	.word	0x08006f5d
 8006f38:	08006f65 	.word	0x08006f65
 8006f3c:	08006f7b 	.word	0x08006f7b
 8006f40:	08006f6b 	.word	0x08006f6b
 8006f44:	08006f7b 	.word	0x08006f7b
 8006f48:	08006f7b 	.word	0x08006f7b
 8006f4c:	08006f7b 	.word	0x08006f7b
 8006f50:	08006f73 	.word	0x08006f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fd fa5a 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8006f58:	61b8      	str	r0, [r7, #24]
        break;
 8006f5a:	e013      	b.n	8006f84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fd fa6a 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 8006f60:	61b8      	str	r0, [r7, #24]
        break;
 8006f62:	e00f      	b.n	8006f84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f64:	4b4b      	ldr	r3, [pc, #300]	; (8007094 <UART_SetConfig+0x4c0>)
 8006f66:	61bb      	str	r3, [r7, #24]
        break;
 8006f68:	e00c      	b.n	8006f84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fd f961 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 8006f6e:	61b8      	str	r0, [r7, #24]
        break;
 8006f70:	e008      	b.n	8006f84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f76:	61bb      	str	r3, [r7, #24]
        break;
 8006f78:	e004      	b.n	8006f84 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	77bb      	strb	r3, [r7, #30]
        break;
 8006f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d074      	beq.n	8007074 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	005a      	lsls	r2, r3, #1
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	441a      	add	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b0f      	cmp	r3, #15
 8006fa6:	d916      	bls.n	8006fd6 <UART_SetConfig+0x402>
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fae:	d212      	bcs.n	8006fd6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f023 030f 	bic.w	r3, r3, #15
 8006fb8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	89fb      	ldrh	r3, [r7, #14]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	89fa      	ldrh	r2, [r7, #14]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	e04e      	b.n	8007074 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	77bb      	strb	r3, [r7, #30]
 8006fda:	e04b      	b.n	8007074 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fdc:	7ffb      	ldrb	r3, [r7, #31]
 8006fde:	2b08      	cmp	r3, #8
 8006fe0:	d827      	bhi.n	8007032 <UART_SetConfig+0x45e>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <UART_SetConfig+0x414>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	08007015 	.word	0x08007015
 8006ff0:	0800701d 	.word	0x0800701d
 8006ff4:	08007033 	.word	0x08007033
 8006ff8:	08007023 	.word	0x08007023
 8006ffc:	08007033 	.word	0x08007033
 8007000:	08007033 	.word	0x08007033
 8007004:	08007033 	.word	0x08007033
 8007008:	0800702b 	.word	0x0800702b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700c:	f7fd f9fe 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8007010:	61b8      	str	r0, [r7, #24]
        break;
 8007012:	e013      	b.n	800703c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007014:	f7fd fa0e 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 8007018:	61b8      	str	r0, [r7, #24]
        break;
 800701a:	e00f      	b.n	800703c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800701c:	4b1d      	ldr	r3, [pc, #116]	; (8007094 <UART_SetConfig+0x4c0>)
 800701e:	61bb      	str	r3, [r7, #24]
        break;
 8007020:	e00c      	b.n	800703c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007022:	f7fd f905 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 8007026:	61b8      	str	r0, [r7, #24]
        break;
 8007028:	e008      	b.n	800703c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800702a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702e:	61bb      	str	r3, [r7, #24]
        break;
 8007030:	e004      	b.n	800703c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	77bb      	strb	r3, [r7, #30]
        break;
 800703a:	bf00      	nop
    }

    if (pclk != 0U)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d018      	beq.n	8007074 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	085a      	lsrs	r2, r3, #1
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	441a      	add	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	fbb2 f3f3 	udiv	r3, r2, r3
 8007054:	b29b      	uxth	r3, r3
 8007056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b0f      	cmp	r3, #15
 800705c:	d908      	bls.n	8007070 <UART_SetConfig+0x49c>
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007064:	d204      	bcs.n	8007070 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	60da      	str	r2, [r3, #12]
 800706e:	e001      	b.n	8007074 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007080:	7fbb      	ldrb	r3, [r7, #30]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40007c00 	.word	0x40007c00
 8007090:	40023800 	.word	0x40023800
 8007094:	00f42400 	.word	0x00f42400

08007098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01a      	beq.n	80071ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007196:	d10a      	bne.n	80071ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071ec:	f7fb ffde 	bl	80031ac <HAL_GetTick>
 80071f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d10e      	bne.n	800721e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f82d 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e023      	b.n	8007266 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d10e      	bne.n	800724a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800722c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f817 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e00d      	b.n	8007266 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2220      	movs	r2, #32
 800724e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727e:	e05e      	b.n	800733e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007286:	d05a      	beq.n	800733e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007288:	f7fb ff90 	bl	80031ac <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	429a      	cmp	r2, r3
 8007296:	d302      	bcc.n	800729e <UART_WaitOnFlagUntilTimeout+0x30>
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d11b      	bne.n	80072d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0201 	bic.w	r2, r2, #1
 80072bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2220      	movs	r2, #32
 80072c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e043      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d02c      	beq.n	800733e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f2:	d124      	bne.n	800733e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800730c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e00f      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4013      	ands	r3, r2
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	bf0c      	ite	eq
 800734e:	2301      	moveq	r3, #1
 8007350:	2300      	movne	r3, #0
 8007352:	b2db      	uxtb	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	429a      	cmp	r2, r3
 800735a:	d091      	beq.n	8007280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <__errno>:
 8007368:	4b01      	ldr	r3, [pc, #4]	; (8007370 <__errno+0x8>)
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	2000004c 	.word	0x2000004c

08007374 <__libc_init_array>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	4d0d      	ldr	r5, [pc, #52]	; (80073ac <__libc_init_array+0x38>)
 8007378:	4c0d      	ldr	r4, [pc, #52]	; (80073b0 <__libc_init_array+0x3c>)
 800737a:	1b64      	subs	r4, r4, r5
 800737c:	10a4      	asrs	r4, r4, #2
 800737e:	2600      	movs	r6, #0
 8007380:	42a6      	cmp	r6, r4
 8007382:	d109      	bne.n	8007398 <__libc_init_array+0x24>
 8007384:	4d0b      	ldr	r5, [pc, #44]	; (80073b4 <__libc_init_array+0x40>)
 8007386:	4c0c      	ldr	r4, [pc, #48]	; (80073b8 <__libc_init_array+0x44>)
 8007388:	f002 fe26 	bl	8009fd8 <_init>
 800738c:	1b64      	subs	r4, r4, r5
 800738e:	10a4      	asrs	r4, r4, #2
 8007390:	2600      	movs	r6, #0
 8007392:	42a6      	cmp	r6, r4
 8007394:	d105      	bne.n	80073a2 <__libc_init_array+0x2e>
 8007396:	bd70      	pop	{r4, r5, r6, pc}
 8007398:	f855 3b04 	ldr.w	r3, [r5], #4
 800739c:	4798      	blx	r3
 800739e:	3601      	adds	r6, #1
 80073a0:	e7ee      	b.n	8007380 <__libc_init_array+0xc>
 80073a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a6:	4798      	blx	r3
 80073a8:	3601      	adds	r6, #1
 80073aa:	e7f2      	b.n	8007392 <__libc_init_array+0x1e>
 80073ac:	0800a66c 	.word	0x0800a66c
 80073b0:	0800a66c 	.word	0x0800a66c
 80073b4:	0800a66c 	.word	0x0800a66c
 80073b8:	0800a670 	.word	0x0800a670

080073bc <memset>:
 80073bc:	4402      	add	r2, r0
 80073be:	4603      	mov	r3, r0
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d100      	bne.n	80073c6 <memset+0xa>
 80073c4:	4770      	bx	lr
 80073c6:	f803 1b01 	strb.w	r1, [r3], #1
 80073ca:	e7f9      	b.n	80073c0 <memset+0x4>

080073cc <__cvt>:
 80073cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ce:	ed2d 8b02 	vpush	{d8}
 80073d2:	eeb0 8b40 	vmov.f64	d8, d0
 80073d6:	b085      	sub	sp, #20
 80073d8:	4617      	mov	r7, r2
 80073da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80073dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80073de:	ee18 2a90 	vmov	r2, s17
 80073e2:	f025 0520 	bic.w	r5, r5, #32
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	bfb6      	itet	lt
 80073ea:	222d      	movlt	r2, #45	; 0x2d
 80073ec:	2200      	movge	r2, #0
 80073ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80073f2:	2d46      	cmp	r5, #70	; 0x46
 80073f4:	460c      	mov	r4, r1
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	d004      	beq.n	8007404 <__cvt+0x38>
 80073fa:	2d45      	cmp	r5, #69	; 0x45
 80073fc:	d100      	bne.n	8007400 <__cvt+0x34>
 80073fe:	3401      	adds	r4, #1
 8007400:	2102      	movs	r1, #2
 8007402:	e000      	b.n	8007406 <__cvt+0x3a>
 8007404:	2103      	movs	r1, #3
 8007406:	ab03      	add	r3, sp, #12
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	ab02      	add	r3, sp, #8
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4622      	mov	r2, r4
 8007410:	4633      	mov	r3, r6
 8007412:	eeb0 0b48 	vmov.f64	d0, d8
 8007416:	f000 fccb 	bl	8007db0 <_dtoa_r>
 800741a:	2d47      	cmp	r5, #71	; 0x47
 800741c:	d109      	bne.n	8007432 <__cvt+0x66>
 800741e:	07fb      	lsls	r3, r7, #31
 8007420:	d407      	bmi.n	8007432 <__cvt+0x66>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007426:	1a1b      	subs	r3, r3, r0
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	b005      	add	sp, #20
 800742c:	ecbd 8b02 	vpop	{d8}
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007432:	2d46      	cmp	r5, #70	; 0x46
 8007434:	eb00 0204 	add.w	r2, r0, r4
 8007438:	d10c      	bne.n	8007454 <__cvt+0x88>
 800743a:	7803      	ldrb	r3, [r0, #0]
 800743c:	2b30      	cmp	r3, #48	; 0x30
 800743e:	d107      	bne.n	8007450 <__cvt+0x84>
 8007440:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	bf1c      	itt	ne
 800744a:	f1c4 0401 	rsbne	r4, r4, #1
 800744e:	6034      	strne	r4, [r6, #0]
 8007450:	6833      	ldr	r3, [r6, #0]
 8007452:	441a      	add	r2, r3
 8007454:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745c:	bf08      	it	eq
 800745e:	9203      	streq	r2, [sp, #12]
 8007460:	2130      	movs	r1, #48	; 0x30
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	4293      	cmp	r3, r2
 8007466:	d2dc      	bcs.n	8007422 <__cvt+0x56>
 8007468:	1c5c      	adds	r4, r3, #1
 800746a:	9403      	str	r4, [sp, #12]
 800746c:	7019      	strb	r1, [r3, #0]
 800746e:	e7f8      	b.n	8007462 <__cvt+0x96>

08007470 <__exponent>:
 8007470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007472:	4603      	mov	r3, r0
 8007474:	2900      	cmp	r1, #0
 8007476:	bfb8      	it	lt
 8007478:	4249      	neglt	r1, r1
 800747a:	f803 2b02 	strb.w	r2, [r3], #2
 800747e:	bfb4      	ite	lt
 8007480:	222d      	movlt	r2, #45	; 0x2d
 8007482:	222b      	movge	r2, #43	; 0x2b
 8007484:	2909      	cmp	r1, #9
 8007486:	7042      	strb	r2, [r0, #1]
 8007488:	dd2a      	ble.n	80074e0 <__exponent+0x70>
 800748a:	f10d 0407 	add.w	r4, sp, #7
 800748e:	46a4      	mov	ip, r4
 8007490:	270a      	movs	r7, #10
 8007492:	46a6      	mov	lr, r4
 8007494:	460a      	mov	r2, r1
 8007496:	fb91 f6f7 	sdiv	r6, r1, r7
 800749a:	fb07 1516 	mls	r5, r7, r6, r1
 800749e:	3530      	adds	r5, #48	; 0x30
 80074a0:	2a63      	cmp	r2, #99	; 0x63
 80074a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80074a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074aa:	4631      	mov	r1, r6
 80074ac:	dcf1      	bgt.n	8007492 <__exponent+0x22>
 80074ae:	3130      	adds	r1, #48	; 0x30
 80074b0:	f1ae 0502 	sub.w	r5, lr, #2
 80074b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074b8:	1c44      	adds	r4, r0, #1
 80074ba:	4629      	mov	r1, r5
 80074bc:	4561      	cmp	r1, ip
 80074be:	d30a      	bcc.n	80074d6 <__exponent+0x66>
 80074c0:	f10d 0209 	add.w	r2, sp, #9
 80074c4:	eba2 020e 	sub.w	r2, r2, lr
 80074c8:	4565      	cmp	r5, ip
 80074ca:	bf88      	it	hi
 80074cc:	2200      	movhi	r2, #0
 80074ce:	4413      	add	r3, r2
 80074d0:	1a18      	subs	r0, r3, r0
 80074d2:	b003      	add	sp, #12
 80074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80074de:	e7ed      	b.n	80074bc <__exponent+0x4c>
 80074e0:	2330      	movs	r3, #48	; 0x30
 80074e2:	3130      	adds	r1, #48	; 0x30
 80074e4:	7083      	strb	r3, [r0, #2]
 80074e6:	70c1      	strb	r1, [r0, #3]
 80074e8:	1d03      	adds	r3, r0, #4
 80074ea:	e7f1      	b.n	80074d0 <__exponent+0x60>
 80074ec:	0000      	movs	r0, r0
	...

080074f0 <_printf_float>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b08b      	sub	sp, #44	; 0x2c
 80074f6:	460c      	mov	r4, r1
 80074f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80074fc:	4616      	mov	r6, r2
 80074fe:	461f      	mov	r7, r3
 8007500:	4605      	mov	r5, r0
 8007502:	f001 f9d7 	bl	80088b4 <_localeconv_r>
 8007506:	f8d0 b000 	ldr.w	fp, [r0]
 800750a:	4658      	mov	r0, fp
 800750c:	f7f8 fe98 	bl	8000240 <strlen>
 8007510:	2300      	movs	r3, #0
 8007512:	9308      	str	r3, [sp, #32]
 8007514:	f8d8 3000 	ldr.w	r3, [r8]
 8007518:	f894 9018 	ldrb.w	r9, [r4, #24]
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	3307      	adds	r3, #7
 8007520:	f023 0307 	bic.w	r3, r3, #7
 8007524:	f103 0108 	add.w	r1, r3, #8
 8007528:	f8c8 1000 	str.w	r1, [r8]
 800752c:	4682      	mov	sl, r0
 800752e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007532:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007536:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007798 <_printf_float+0x2a8>
 800753a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800753e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007542:	eeb4 6b47 	vcmp.f64	d6, d7
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	dd24      	ble.n	8007596 <_printf_float+0xa6>
 800754c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007554:	d502      	bpl.n	800755c <_printf_float+0x6c>
 8007556:	232d      	movs	r3, #45	; 0x2d
 8007558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800755c:	4b90      	ldr	r3, [pc, #576]	; (80077a0 <_printf_float+0x2b0>)
 800755e:	4891      	ldr	r0, [pc, #580]	; (80077a4 <_printf_float+0x2b4>)
 8007560:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007564:	bf94      	ite	ls
 8007566:	4698      	movls	r8, r3
 8007568:	4680      	movhi	r8, r0
 800756a:	2303      	movs	r3, #3
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	f022 0204 	bic.w	r2, r2, #4
 8007572:	2300      	movs	r3, #0
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	9700      	str	r7, [sp, #0]
 800757a:	4633      	mov	r3, r6
 800757c:	aa09      	add	r2, sp, #36	; 0x24
 800757e:	4621      	mov	r1, r4
 8007580:	4628      	mov	r0, r5
 8007582:	f000 f9d3 	bl	800792c <_printf_common>
 8007586:	3001      	adds	r0, #1
 8007588:	f040 808a 	bne.w	80076a0 <_printf_float+0x1b0>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	b00b      	add	sp, #44	; 0x2c
 8007592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007596:	eeb4 0b40 	vcmp.f64	d0, d0
 800759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759e:	d709      	bvc.n	80075b4 <_printf_float+0xc4>
 80075a0:	ee10 3a90 	vmov	r3, s1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfbc      	itt	lt
 80075a8:	232d      	movlt	r3, #45	; 0x2d
 80075aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075ae:	487e      	ldr	r0, [pc, #504]	; (80077a8 <_printf_float+0x2b8>)
 80075b0:	4b7e      	ldr	r3, [pc, #504]	; (80077ac <_printf_float+0x2bc>)
 80075b2:	e7d5      	b.n	8007560 <_printf_float+0x70>
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80075ba:	9104      	str	r1, [sp, #16]
 80075bc:	1c59      	adds	r1, r3, #1
 80075be:	d13c      	bne.n	800763a <_printf_float+0x14a>
 80075c0:	2306      	movs	r3, #6
 80075c2:	6063      	str	r3, [r4, #4]
 80075c4:	2300      	movs	r3, #0
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	ab08      	add	r3, sp, #32
 80075ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80075ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075d2:	ab07      	add	r3, sp, #28
 80075d4:	6861      	ldr	r1, [r4, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	6022      	str	r2, [r4, #0]
 80075da:	f10d 031b 	add.w	r3, sp, #27
 80075de:	4628      	mov	r0, r5
 80075e0:	f7ff fef4 	bl	80073cc <__cvt>
 80075e4:	9b04      	ldr	r3, [sp, #16]
 80075e6:	9907      	ldr	r1, [sp, #28]
 80075e8:	2b47      	cmp	r3, #71	; 0x47
 80075ea:	4680      	mov	r8, r0
 80075ec:	d108      	bne.n	8007600 <_printf_float+0x110>
 80075ee:	1cc8      	adds	r0, r1, #3
 80075f0:	db02      	blt.n	80075f8 <_printf_float+0x108>
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	4299      	cmp	r1, r3
 80075f6:	dd41      	ble.n	800767c <_printf_float+0x18c>
 80075f8:	f1a9 0902 	sub.w	r9, r9, #2
 80075fc:	fa5f f989 	uxtb.w	r9, r9
 8007600:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007604:	d820      	bhi.n	8007648 <_printf_float+0x158>
 8007606:	3901      	subs	r1, #1
 8007608:	464a      	mov	r2, r9
 800760a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800760e:	9107      	str	r1, [sp, #28]
 8007610:	f7ff ff2e 	bl	8007470 <__exponent>
 8007614:	9a08      	ldr	r2, [sp, #32]
 8007616:	9004      	str	r0, [sp, #16]
 8007618:	1813      	adds	r3, r2, r0
 800761a:	2a01      	cmp	r2, #1
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	dc02      	bgt.n	8007626 <_printf_float+0x136>
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	07d2      	lsls	r2, r2, #31
 8007624:	d501      	bpl.n	800762a <_printf_float+0x13a>
 8007626:	3301      	adds	r3, #1
 8007628:	6123      	str	r3, [r4, #16]
 800762a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0a2      	beq.n	8007578 <_printf_float+0x88>
 8007632:	232d      	movs	r3, #45	; 0x2d
 8007634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007638:	e79e      	b.n	8007578 <_printf_float+0x88>
 800763a:	9904      	ldr	r1, [sp, #16]
 800763c:	2947      	cmp	r1, #71	; 0x47
 800763e:	d1c1      	bne.n	80075c4 <_printf_float+0xd4>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1bf      	bne.n	80075c4 <_printf_float+0xd4>
 8007644:	2301      	movs	r3, #1
 8007646:	e7bc      	b.n	80075c2 <_printf_float+0xd2>
 8007648:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800764c:	d118      	bne.n	8007680 <_printf_float+0x190>
 800764e:	2900      	cmp	r1, #0
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	dd0b      	ble.n	800766c <_printf_float+0x17c>
 8007654:	6121      	str	r1, [r4, #16]
 8007656:	b913      	cbnz	r3, 800765e <_printf_float+0x16e>
 8007658:	6822      	ldr	r2, [r4, #0]
 800765a:	07d0      	lsls	r0, r2, #31
 800765c:	d502      	bpl.n	8007664 <_printf_float+0x174>
 800765e:	3301      	adds	r3, #1
 8007660:	440b      	add	r3, r1
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	2300      	movs	r3, #0
 8007666:	65a1      	str	r1, [r4, #88]	; 0x58
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	e7de      	b.n	800762a <_printf_float+0x13a>
 800766c:	b913      	cbnz	r3, 8007674 <_printf_float+0x184>
 800766e:	6822      	ldr	r2, [r4, #0]
 8007670:	07d2      	lsls	r2, r2, #31
 8007672:	d501      	bpl.n	8007678 <_printf_float+0x188>
 8007674:	3302      	adds	r3, #2
 8007676:	e7f4      	b.n	8007662 <_printf_float+0x172>
 8007678:	2301      	movs	r3, #1
 800767a:	e7f2      	b.n	8007662 <_printf_float+0x172>
 800767c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007680:	9b08      	ldr	r3, [sp, #32]
 8007682:	4299      	cmp	r1, r3
 8007684:	db05      	blt.n	8007692 <_printf_float+0x1a2>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	6121      	str	r1, [r4, #16]
 800768a:	07d8      	lsls	r0, r3, #31
 800768c:	d5ea      	bpl.n	8007664 <_printf_float+0x174>
 800768e:	1c4b      	adds	r3, r1, #1
 8007690:	e7e7      	b.n	8007662 <_printf_float+0x172>
 8007692:	2900      	cmp	r1, #0
 8007694:	bfd4      	ite	le
 8007696:	f1c1 0202 	rsble	r2, r1, #2
 800769a:	2201      	movgt	r2, #1
 800769c:	4413      	add	r3, r2
 800769e:	e7e0      	b.n	8007662 <_printf_float+0x172>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	055a      	lsls	r2, r3, #21
 80076a4:	d407      	bmi.n	80076b6 <_printf_float+0x1c6>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	4642      	mov	r2, r8
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	d12a      	bne.n	800770a <_printf_float+0x21a>
 80076b4:	e76a      	b.n	800758c <_printf_float+0x9c>
 80076b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80076ba:	f240 80e2 	bls.w	8007882 <_printf_float+0x392>
 80076be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80076c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d133      	bne.n	8007734 <_printf_float+0x244>
 80076cc:	4a38      	ldr	r2, [pc, #224]	; (80077b0 <_printf_float+0x2c0>)
 80076ce:	2301      	movs	r3, #1
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f af58 	beq.w	800758c <_printf_float+0x9c>
 80076dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	db02      	blt.n	80076ea <_printf_float+0x1fa>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	07d8      	lsls	r0, r3, #31
 80076e8:	d50f      	bpl.n	800770a <_printf_float+0x21a>
 80076ea:	4653      	mov	r3, sl
 80076ec:	465a      	mov	r2, fp
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	f43f af49 	beq.w	800758c <_printf_float+0x9c>
 80076fa:	f04f 0800 	mov.w	r8, #0
 80076fe:	f104 091a 	add.w	r9, r4, #26
 8007702:	9b08      	ldr	r3, [sp, #32]
 8007704:	3b01      	subs	r3, #1
 8007706:	4543      	cmp	r3, r8
 8007708:	dc09      	bgt.n	800771e <_printf_float+0x22e>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	079b      	lsls	r3, r3, #30
 800770e:	f100 8108 	bmi.w	8007922 <_printf_float+0x432>
 8007712:	68e0      	ldr	r0, [r4, #12]
 8007714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007716:	4298      	cmp	r0, r3
 8007718:	bfb8      	it	lt
 800771a:	4618      	movlt	r0, r3
 800771c:	e738      	b.n	8007590 <_printf_float+0xa0>
 800771e:	2301      	movs	r3, #1
 8007720:	464a      	mov	r2, r9
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f af2f 	beq.w	800758c <_printf_float+0x9c>
 800772e:	f108 0801 	add.w	r8, r8, #1
 8007732:	e7e6      	b.n	8007702 <_printf_float+0x212>
 8007734:	9b07      	ldr	r3, [sp, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	dc3c      	bgt.n	80077b4 <_printf_float+0x2c4>
 800773a:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <_printf_float+0x2c0>)
 800773c:	2301      	movs	r3, #1
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f af21 	beq.w	800758c <_printf_float+0x9c>
 800774a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800774e:	4313      	orrs	r3, r2
 8007750:	d102      	bne.n	8007758 <_printf_float+0x268>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	07d9      	lsls	r1, r3, #31
 8007756:	d5d8      	bpl.n	800770a <_printf_float+0x21a>
 8007758:	4653      	mov	r3, sl
 800775a:	465a      	mov	r2, fp
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f af12 	beq.w	800758c <_printf_float+0x9c>
 8007768:	f04f 0900 	mov.w	r9, #0
 800776c:	f104 0a1a 	add.w	sl, r4, #26
 8007770:	9b07      	ldr	r3, [sp, #28]
 8007772:	425b      	negs	r3, r3
 8007774:	454b      	cmp	r3, r9
 8007776:	dc01      	bgt.n	800777c <_printf_float+0x28c>
 8007778:	9b08      	ldr	r3, [sp, #32]
 800777a:	e795      	b.n	80076a8 <_printf_float+0x1b8>
 800777c:	2301      	movs	r3, #1
 800777e:	4652      	mov	r2, sl
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af00 	beq.w	800758c <_printf_float+0x9c>
 800778c:	f109 0901 	add.w	r9, r9, #1
 8007790:	e7ee      	b.n	8007770 <_printf_float+0x280>
 8007792:	bf00      	nop
 8007794:	f3af 8000 	nop.w
 8007798:	ffffffff 	.word	0xffffffff
 800779c:	7fefffff 	.word	0x7fefffff
 80077a0:	0800a284 	.word	0x0800a284
 80077a4:	0800a288 	.word	0x0800a288
 80077a8:	0800a290 	.word	0x0800a290
 80077ac:	0800a28c 	.word	0x0800a28c
 80077b0:	0800a294 	.word	0x0800a294
 80077b4:	9a08      	ldr	r2, [sp, #32]
 80077b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077b8:	429a      	cmp	r2, r3
 80077ba:	bfa8      	it	ge
 80077bc:	461a      	movge	r2, r3
 80077be:	2a00      	cmp	r2, #0
 80077c0:	4691      	mov	r9, r2
 80077c2:	dc38      	bgt.n	8007836 <_printf_float+0x346>
 80077c4:	2300      	movs	r3, #0
 80077c6:	9305      	str	r3, [sp, #20]
 80077c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077cc:	f104 021a 	add.w	r2, r4, #26
 80077d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077d2:	9905      	ldr	r1, [sp, #20]
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	eba3 0309 	sub.w	r3, r3, r9
 80077da:	428b      	cmp	r3, r1
 80077dc:	dc33      	bgt.n	8007846 <_printf_float+0x356>
 80077de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	db3c      	blt.n	8007860 <_printf_float+0x370>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	07da      	lsls	r2, r3, #31
 80077ea:	d439      	bmi.n	8007860 <_printf_float+0x370>
 80077ec:	9a08      	ldr	r2, [sp, #32]
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	9907      	ldr	r1, [sp, #28]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	eba2 0901 	sub.w	r9, r2, r1
 80077f8:	4599      	cmp	r9, r3
 80077fa:	bfa8      	it	ge
 80077fc:	4699      	movge	r9, r3
 80077fe:	f1b9 0f00 	cmp.w	r9, #0
 8007802:	dc35      	bgt.n	8007870 <_printf_float+0x380>
 8007804:	f04f 0800 	mov.w	r8, #0
 8007808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800780c:	f104 0a1a 	add.w	sl, r4, #26
 8007810:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	eba3 0309 	sub.w	r3, r3, r9
 800781a:	4543      	cmp	r3, r8
 800781c:	f77f af75 	ble.w	800770a <_printf_float+0x21a>
 8007820:	2301      	movs	r3, #1
 8007822:	4652      	mov	r2, sl
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f aeae 	beq.w	800758c <_printf_float+0x9c>
 8007830:	f108 0801 	add.w	r8, r8, #1
 8007834:	e7ec      	b.n	8007810 <_printf_float+0x320>
 8007836:	4613      	mov	r3, r2
 8007838:	4631      	mov	r1, r6
 800783a:	4642      	mov	r2, r8
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	d1bf      	bne.n	80077c4 <_printf_float+0x2d4>
 8007844:	e6a2      	b.n	800758c <_printf_float+0x9c>
 8007846:	2301      	movs	r3, #1
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	9204      	str	r2, [sp, #16]
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f ae9b 	beq.w	800758c <_printf_float+0x9c>
 8007856:	9b05      	ldr	r3, [sp, #20]
 8007858:	9a04      	ldr	r2, [sp, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	9305      	str	r3, [sp, #20]
 800785e:	e7b7      	b.n	80077d0 <_printf_float+0x2e0>
 8007860:	4653      	mov	r3, sl
 8007862:	465a      	mov	r2, fp
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	d1be      	bne.n	80077ec <_printf_float+0x2fc>
 800786e:	e68d      	b.n	800758c <_printf_float+0x9c>
 8007870:	9a04      	ldr	r2, [sp, #16]
 8007872:	464b      	mov	r3, r9
 8007874:	4442      	add	r2, r8
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	47b8      	blx	r7
 800787c:	3001      	adds	r0, #1
 800787e:	d1c1      	bne.n	8007804 <_printf_float+0x314>
 8007880:	e684      	b.n	800758c <_printf_float+0x9c>
 8007882:	9a08      	ldr	r2, [sp, #32]
 8007884:	2a01      	cmp	r2, #1
 8007886:	dc01      	bgt.n	800788c <_printf_float+0x39c>
 8007888:	07db      	lsls	r3, r3, #31
 800788a:	d537      	bpl.n	80078fc <_printf_float+0x40c>
 800788c:	2301      	movs	r3, #1
 800788e:	4642      	mov	r2, r8
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f ae78 	beq.w	800758c <_printf_float+0x9c>
 800789c:	4653      	mov	r3, sl
 800789e:	465a      	mov	r2, fp
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f ae70 	beq.w	800758c <_printf_float+0x9c>
 80078ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80078b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b8:	d01b      	beq.n	80078f2 <_printf_float+0x402>
 80078ba:	9b08      	ldr	r3, [sp, #32]
 80078bc:	f108 0201 	add.w	r2, r8, #1
 80078c0:	3b01      	subs	r3, #1
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	d10e      	bne.n	80078ea <_printf_float+0x3fa>
 80078cc:	e65e      	b.n	800758c <_printf_float+0x9c>
 80078ce:	2301      	movs	r3, #1
 80078d0:	464a      	mov	r2, r9
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f ae57 	beq.w	800758c <_printf_float+0x9c>
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	4543      	cmp	r3, r8
 80078e8:	dcf1      	bgt.n	80078ce <_printf_float+0x3de>
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078f0:	e6db      	b.n	80076aa <_printf_float+0x1ba>
 80078f2:	f04f 0800 	mov.w	r8, #0
 80078f6:	f104 091a 	add.w	r9, r4, #26
 80078fa:	e7f2      	b.n	80078e2 <_printf_float+0x3f2>
 80078fc:	2301      	movs	r3, #1
 80078fe:	4642      	mov	r2, r8
 8007900:	e7df      	b.n	80078c2 <_printf_float+0x3d2>
 8007902:	2301      	movs	r3, #1
 8007904:	464a      	mov	r2, r9
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f ae3d 	beq.w	800758c <_printf_float+0x9c>
 8007912:	f108 0801 	add.w	r8, r8, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	9909      	ldr	r1, [sp, #36]	; 0x24
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	4543      	cmp	r3, r8
 800791e:	dcf0      	bgt.n	8007902 <_printf_float+0x412>
 8007920:	e6f7      	b.n	8007712 <_printf_float+0x222>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	f104 0919 	add.w	r9, r4, #25
 800792a:	e7f4      	b.n	8007916 <_printf_float+0x426>

0800792c <_printf_common>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	4616      	mov	r6, r2
 8007932:	4699      	mov	r9, r3
 8007934:	688a      	ldr	r2, [r1, #8]
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800793c:	4293      	cmp	r3, r2
 800793e:	bfb8      	it	lt
 8007940:	4613      	movlt	r3, r2
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007948:	4607      	mov	r7, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b10a      	cbz	r2, 8007952 <_printf_common+0x26>
 800794e:	3301      	adds	r3, #1
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	0699      	lsls	r1, r3, #26
 8007956:	bf42      	ittt	mi
 8007958:	6833      	ldrmi	r3, [r6, #0]
 800795a:	3302      	addmi	r3, #2
 800795c:	6033      	strmi	r3, [r6, #0]
 800795e:	6825      	ldr	r5, [r4, #0]
 8007960:	f015 0506 	ands.w	r5, r5, #6
 8007964:	d106      	bne.n	8007974 <_printf_common+0x48>
 8007966:	f104 0a19 	add.w	sl, r4, #25
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	42ab      	cmp	r3, r5
 8007972:	dc26      	bgt.n	80079c2 <_printf_common+0x96>
 8007974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007978:	1e13      	subs	r3, r2, #0
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	bf18      	it	ne
 800797e:	2301      	movne	r3, #1
 8007980:	0692      	lsls	r2, r2, #26
 8007982:	d42b      	bmi.n	80079dc <_printf_common+0xb0>
 8007984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007988:	4649      	mov	r1, r9
 800798a:	4638      	mov	r0, r7
 800798c:	47c0      	blx	r8
 800798e:	3001      	adds	r0, #1
 8007990:	d01e      	beq.n	80079d0 <_printf_common+0xa4>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	68e5      	ldr	r5, [r4, #12]
 8007996:	6832      	ldr	r2, [r6, #0]
 8007998:	f003 0306 	and.w	r3, r3, #6
 800799c:	2b04      	cmp	r3, #4
 800799e:	bf08      	it	eq
 80079a0:	1aad      	subeq	r5, r5, r2
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	6922      	ldr	r2, [r4, #16]
 80079a6:	bf0c      	ite	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	2500      	movne	r5, #0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfc4      	itt	gt
 80079b2:	1a9b      	subgt	r3, r3, r2
 80079b4:	18ed      	addgt	r5, r5, r3
 80079b6:	2600      	movs	r6, #0
 80079b8:	341a      	adds	r4, #26
 80079ba:	42b5      	cmp	r5, r6
 80079bc:	d11a      	bne.n	80079f4 <_printf_common+0xc8>
 80079be:	2000      	movs	r0, #0
 80079c0:	e008      	b.n	80079d4 <_printf_common+0xa8>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4652      	mov	r2, sl
 80079c6:	4649      	mov	r1, r9
 80079c8:	4638      	mov	r0, r7
 80079ca:	47c0      	blx	r8
 80079cc:	3001      	adds	r0, #1
 80079ce:	d103      	bne.n	80079d8 <_printf_common+0xac>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d8:	3501      	adds	r5, #1
 80079da:	e7c6      	b.n	800796a <_printf_common+0x3e>
 80079dc:	18e1      	adds	r1, r4, r3
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	2030      	movs	r0, #48	; 0x30
 80079e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e6:	4422      	add	r2, r4
 80079e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079f0:	3302      	adds	r3, #2
 80079f2:	e7c7      	b.n	8007984 <_printf_common+0x58>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4622      	mov	r2, r4
 80079f8:	4649      	mov	r1, r9
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c0      	blx	r8
 80079fe:	3001      	adds	r0, #1
 8007a00:	d0e6      	beq.n	80079d0 <_printf_common+0xa4>
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7d9      	b.n	80079ba <_printf_common+0x8e>
	...

08007a08 <_printf_i>:
 8007a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	4691      	mov	r9, r2
 8007a10:	7e27      	ldrb	r7, [r4, #24]
 8007a12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a14:	2f78      	cmp	r7, #120	; 0x78
 8007a16:	4680      	mov	r8, r0
 8007a18:	469a      	mov	sl, r3
 8007a1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a1e:	d807      	bhi.n	8007a30 <_printf_i+0x28>
 8007a20:	2f62      	cmp	r7, #98	; 0x62
 8007a22:	d80a      	bhi.n	8007a3a <_printf_i+0x32>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	f000 80d8 	beq.w	8007bda <_printf_i+0x1d2>
 8007a2a:	2f58      	cmp	r7, #88	; 0x58
 8007a2c:	f000 80a3 	beq.w	8007b76 <_printf_i+0x16e>
 8007a30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a38:	e03a      	b.n	8007ab0 <_printf_i+0xa8>
 8007a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a3e:	2b15      	cmp	r3, #21
 8007a40:	d8f6      	bhi.n	8007a30 <_printf_i+0x28>
 8007a42:	a001      	add	r0, pc, #4	; (adr r0, 8007a48 <_printf_i+0x40>)
 8007a44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007a31 	.word	0x08007a31
 8007a54:	08007a31 	.word	0x08007a31
 8007a58:	08007a31 	.word	0x08007a31
 8007a5c:	08007a31 	.word	0x08007a31
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a31 	.word	0x08007a31
 8007a68:	08007a31 	.word	0x08007a31
 8007a6c:	08007a31 	.word	0x08007a31
 8007a70:	08007a31 	.word	0x08007a31
 8007a74:	08007bc1 	.word	0x08007bc1
 8007a78:	08007ae5 	.word	0x08007ae5
 8007a7c:	08007ba3 	.word	0x08007ba3
 8007a80:	08007a31 	.word	0x08007a31
 8007a84:	08007a31 	.word	0x08007a31
 8007a88:	08007be3 	.word	0x08007be3
 8007a8c:	08007a31 	.word	0x08007a31
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007a31 	.word	0x08007a31
 8007a98:	08007a31 	.word	0x08007a31
 8007a9c:	08007bab 	.word	0x08007bab
 8007aa0:	680b      	ldr	r3, [r1, #0]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	600a      	str	r2, [r1, #0]
 8007aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0a3      	b.n	8007bfc <_printf_i+0x1f4>
 8007ab4:	6825      	ldr	r5, [r4, #0]
 8007ab6:	6808      	ldr	r0, [r1, #0]
 8007ab8:	062e      	lsls	r6, r5, #24
 8007aba:	f100 0304 	add.w	r3, r0, #4
 8007abe:	d50a      	bpl.n	8007ad6 <_printf_i+0xce>
 8007ac0:	6805      	ldr	r5, [r0, #0]
 8007ac2:	600b      	str	r3, [r1, #0]
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	da03      	bge.n	8007ad0 <_printf_i+0xc8>
 8007ac8:	232d      	movs	r3, #45	; 0x2d
 8007aca:	426d      	negs	r5, r5
 8007acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad0:	485e      	ldr	r0, [pc, #376]	; (8007c4c <_printf_i+0x244>)
 8007ad2:	230a      	movs	r3, #10
 8007ad4:	e019      	b.n	8007b0a <_printf_i+0x102>
 8007ad6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ada:	6805      	ldr	r5, [r0, #0]
 8007adc:	600b      	str	r3, [r1, #0]
 8007ade:	bf18      	it	ne
 8007ae0:	b22d      	sxthne	r5, r5
 8007ae2:	e7ef      	b.n	8007ac4 <_printf_i+0xbc>
 8007ae4:	680b      	ldr	r3, [r1, #0]
 8007ae6:	6825      	ldr	r5, [r4, #0]
 8007ae8:	1d18      	adds	r0, r3, #4
 8007aea:	6008      	str	r0, [r1, #0]
 8007aec:	0628      	lsls	r0, r5, #24
 8007aee:	d501      	bpl.n	8007af4 <_printf_i+0xec>
 8007af0:	681d      	ldr	r5, [r3, #0]
 8007af2:	e002      	b.n	8007afa <_printf_i+0xf2>
 8007af4:	0669      	lsls	r1, r5, #25
 8007af6:	d5fb      	bpl.n	8007af0 <_printf_i+0xe8>
 8007af8:	881d      	ldrh	r5, [r3, #0]
 8007afa:	4854      	ldr	r0, [pc, #336]	; (8007c4c <_printf_i+0x244>)
 8007afc:	2f6f      	cmp	r7, #111	; 0x6f
 8007afe:	bf0c      	ite	eq
 8007b00:	2308      	moveq	r3, #8
 8007b02:	230a      	movne	r3, #10
 8007b04:	2100      	movs	r1, #0
 8007b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b0a:	6866      	ldr	r6, [r4, #4]
 8007b0c:	60a6      	str	r6, [r4, #8]
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	bfa2      	ittt	ge
 8007b12:	6821      	ldrge	r1, [r4, #0]
 8007b14:	f021 0104 	bicge.w	r1, r1, #4
 8007b18:	6021      	strge	r1, [r4, #0]
 8007b1a:	b90d      	cbnz	r5, 8007b20 <_printf_i+0x118>
 8007b1c:	2e00      	cmp	r6, #0
 8007b1e:	d04d      	beq.n	8007bbc <_printf_i+0x1b4>
 8007b20:	4616      	mov	r6, r2
 8007b22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b26:	fb03 5711 	mls	r7, r3, r1, r5
 8007b2a:	5dc7      	ldrb	r7, [r0, r7]
 8007b2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b30:	462f      	mov	r7, r5
 8007b32:	42bb      	cmp	r3, r7
 8007b34:	460d      	mov	r5, r1
 8007b36:	d9f4      	bls.n	8007b22 <_printf_i+0x11a>
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d10b      	bne.n	8007b54 <_printf_i+0x14c>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	07df      	lsls	r7, r3, #31
 8007b40:	d508      	bpl.n	8007b54 <_printf_i+0x14c>
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	6861      	ldr	r1, [r4, #4]
 8007b46:	4299      	cmp	r1, r3
 8007b48:	bfde      	ittt	le
 8007b4a:	2330      	movle	r3, #48	; 0x30
 8007b4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b54:	1b92      	subs	r2, r2, r6
 8007b56:	6122      	str	r2, [r4, #16]
 8007b58:	f8cd a000 	str.w	sl, [sp]
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	aa03      	add	r2, sp, #12
 8007b60:	4621      	mov	r1, r4
 8007b62:	4640      	mov	r0, r8
 8007b64:	f7ff fee2 	bl	800792c <_printf_common>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d14c      	bne.n	8007c06 <_printf_i+0x1fe>
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	b004      	add	sp, #16
 8007b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b76:	4835      	ldr	r0, [pc, #212]	; (8007c4c <_printf_i+0x244>)
 8007b78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	680e      	ldr	r6, [r1, #0]
 8007b80:	061f      	lsls	r7, r3, #24
 8007b82:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b86:	600e      	str	r6, [r1, #0]
 8007b88:	d514      	bpl.n	8007bb4 <_printf_i+0x1ac>
 8007b8a:	07d9      	lsls	r1, r3, #31
 8007b8c:	bf44      	itt	mi
 8007b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b92:	6023      	strmi	r3, [r4, #0]
 8007b94:	b91d      	cbnz	r5, 8007b9e <_printf_i+0x196>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	f023 0320 	bic.w	r3, r3, #32
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	2310      	movs	r3, #16
 8007ba0:	e7b0      	b.n	8007b04 <_printf_i+0xfc>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	f043 0320 	orr.w	r3, r3, #32
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	2378      	movs	r3, #120	; 0x78
 8007bac:	4828      	ldr	r0, [pc, #160]	; (8007c50 <_printf_i+0x248>)
 8007bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bb2:	e7e3      	b.n	8007b7c <_printf_i+0x174>
 8007bb4:	065e      	lsls	r6, r3, #25
 8007bb6:	bf48      	it	mi
 8007bb8:	b2ad      	uxthmi	r5, r5
 8007bba:	e7e6      	b.n	8007b8a <_printf_i+0x182>
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	e7bb      	b.n	8007b38 <_printf_i+0x130>
 8007bc0:	680b      	ldr	r3, [r1, #0]
 8007bc2:	6826      	ldr	r6, [r4, #0]
 8007bc4:	6960      	ldr	r0, [r4, #20]
 8007bc6:	1d1d      	adds	r5, r3, #4
 8007bc8:	600d      	str	r5, [r1, #0]
 8007bca:	0635      	lsls	r5, r6, #24
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	d501      	bpl.n	8007bd4 <_printf_i+0x1cc>
 8007bd0:	6018      	str	r0, [r3, #0]
 8007bd2:	e002      	b.n	8007bda <_printf_i+0x1d2>
 8007bd4:	0671      	lsls	r1, r6, #25
 8007bd6:	d5fb      	bpl.n	8007bd0 <_printf_i+0x1c8>
 8007bd8:	8018      	strh	r0, [r3, #0]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	4616      	mov	r6, r2
 8007be0:	e7ba      	b.n	8007b58 <_printf_i+0x150>
 8007be2:	680b      	ldr	r3, [r1, #0]
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	600a      	str	r2, [r1, #0]
 8007be8:	681e      	ldr	r6, [r3, #0]
 8007bea:	6862      	ldr	r2, [r4, #4]
 8007bec:	2100      	movs	r1, #0
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7f8 fb2e 	bl	8000250 <memchr>
 8007bf4:	b108      	cbz	r0, 8007bfa <_printf_i+0x1f2>
 8007bf6:	1b80      	subs	r0, r0, r6
 8007bf8:	6060      	str	r0, [r4, #4]
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c04:	e7a8      	b.n	8007b58 <_printf_i+0x150>
 8007c06:	6923      	ldr	r3, [r4, #16]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	47d0      	blx	sl
 8007c10:	3001      	adds	r0, #1
 8007c12:	d0ab      	beq.n	8007b6c <_printf_i+0x164>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	079b      	lsls	r3, r3, #30
 8007c18:	d413      	bmi.n	8007c42 <_printf_i+0x23a>
 8007c1a:	68e0      	ldr	r0, [r4, #12]
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	bfb8      	it	lt
 8007c22:	4618      	movlt	r0, r3
 8007c24:	e7a4      	b.n	8007b70 <_printf_i+0x168>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4632      	mov	r2, r6
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	47d0      	blx	sl
 8007c30:	3001      	adds	r0, #1
 8007c32:	d09b      	beq.n	8007b6c <_printf_i+0x164>
 8007c34:	3501      	adds	r5, #1
 8007c36:	68e3      	ldr	r3, [r4, #12]
 8007c38:	9903      	ldr	r1, [sp, #12]
 8007c3a:	1a5b      	subs	r3, r3, r1
 8007c3c:	42ab      	cmp	r3, r5
 8007c3e:	dcf2      	bgt.n	8007c26 <_printf_i+0x21e>
 8007c40:	e7eb      	b.n	8007c1a <_printf_i+0x212>
 8007c42:	2500      	movs	r5, #0
 8007c44:	f104 0619 	add.w	r6, r4, #25
 8007c48:	e7f5      	b.n	8007c36 <_printf_i+0x22e>
 8007c4a:	bf00      	nop
 8007c4c:	0800a296 	.word	0x0800a296
 8007c50:	0800a2a7 	.word	0x0800a2a7

08007c54 <siprintf>:
 8007c54:	b40e      	push	{r1, r2, r3}
 8007c56:	b500      	push	{lr}
 8007c58:	b09c      	sub	sp, #112	; 0x70
 8007c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007c5c:	9002      	str	r0, [sp, #8]
 8007c5e:	9006      	str	r0, [sp, #24]
 8007c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c64:	4809      	ldr	r0, [pc, #36]	; (8007c8c <siprintf+0x38>)
 8007c66:	9107      	str	r1, [sp, #28]
 8007c68:	9104      	str	r1, [sp, #16]
 8007c6a:	4909      	ldr	r1, [pc, #36]	; (8007c90 <siprintf+0x3c>)
 8007c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c70:	9105      	str	r1, [sp, #20]
 8007c72:	6800      	ldr	r0, [r0, #0]
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	a902      	add	r1, sp, #8
 8007c78:	f001 faca 	bl	8009210 <_svfiprintf_r>
 8007c7c:	9b02      	ldr	r3, [sp, #8]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	b01c      	add	sp, #112	; 0x70
 8007c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c88:	b003      	add	sp, #12
 8007c8a:	4770      	bx	lr
 8007c8c:	2000004c 	.word	0x2000004c
 8007c90:	ffff0208 	.word	0xffff0208

08007c94 <quorem>:
 8007c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c98:	6903      	ldr	r3, [r0, #16]
 8007c9a:	690c      	ldr	r4, [r1, #16]
 8007c9c:	42a3      	cmp	r3, r4
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	f2c0 8081 	blt.w	8007da6 <quorem+0x112>
 8007ca4:	3c01      	subs	r4, #1
 8007ca6:	f101 0814 	add.w	r8, r1, #20
 8007caa:	f100 0514 	add.w	r5, r0, #20
 8007cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ccc:	d331      	bcc.n	8007d32 <quorem+0x9e>
 8007cce:	f04f 0e00 	mov.w	lr, #0
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	46ac      	mov	ip, r5
 8007cd6:	46f2      	mov	sl, lr
 8007cd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cdc:	b293      	uxth	r3, r2
 8007cde:	fb06 e303 	mla	r3, r6, r3, lr
 8007ce2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8007cec:	0c12      	lsrs	r2, r2, #16
 8007cee:	f8dc a000 	ldr.w	sl, [ip]
 8007cf2:	fb06 e202 	mla	r2, r6, r2, lr
 8007cf6:	fa13 f38a 	uxtah	r3, r3, sl
 8007cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cfe:	fa1f fa82 	uxth.w	sl, r2
 8007d02:	f8dc 2000 	ldr.w	r2, [ip]
 8007d06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d14:	4581      	cmp	r9, r0
 8007d16:	f84c 3b04 	str.w	r3, [ip], #4
 8007d1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d1e:	d2db      	bcs.n	8007cd8 <quorem+0x44>
 8007d20:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d24:	b92b      	cbnz	r3, 8007d32 <quorem+0x9e>
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	3b04      	subs	r3, #4
 8007d2a:	429d      	cmp	r5, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	d32e      	bcc.n	8007d8e <quorem+0xfa>
 8007d30:	613c      	str	r4, [r7, #16]
 8007d32:	4638      	mov	r0, r7
 8007d34:	f001 f856 	bl	8008de4 <__mcmp>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	db24      	blt.n	8007d86 <quorem+0xf2>
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f04f 0c00 	mov.w	ip, #0
 8007d44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d48:	f8d0 e000 	ldr.w	lr, [r0]
 8007d4c:	b293      	uxth	r3, r2
 8007d4e:	ebac 0303 	sub.w	r3, ip, r3
 8007d52:	0c12      	lsrs	r2, r2, #16
 8007d54:	fa13 f38e 	uxtah	r3, r3, lr
 8007d58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d66:	45c1      	cmp	r9, r8
 8007d68:	f840 3b04 	str.w	r3, [r0], #4
 8007d6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d70:	d2e8      	bcs.n	8007d44 <quorem+0xb0>
 8007d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d7a:	b922      	cbnz	r2, 8007d86 <quorem+0xf2>
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	d30a      	bcc.n	8007d9a <quorem+0x106>
 8007d84:	613c      	str	r4, [r7, #16]
 8007d86:	4630      	mov	r0, r6
 8007d88:	b003      	add	sp, #12
 8007d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	3b04      	subs	r3, #4
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	d1cc      	bne.n	8007d30 <quorem+0x9c>
 8007d96:	3c01      	subs	r4, #1
 8007d98:	e7c7      	b.n	8007d2a <quorem+0x96>
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	3b04      	subs	r3, #4
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d1f0      	bne.n	8007d84 <quorem+0xf0>
 8007da2:	3c01      	subs	r4, #1
 8007da4:	e7eb      	b.n	8007d7e <quorem+0xea>
 8007da6:	2000      	movs	r0, #0
 8007da8:	e7ee      	b.n	8007d88 <quorem+0xf4>
 8007daa:	0000      	movs	r0, r0
 8007dac:	0000      	movs	r0, r0
	...

08007db0 <_dtoa_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	ec59 8b10 	vmov	r8, r9, d0
 8007db8:	b095      	sub	sp, #84	; 0x54
 8007dba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dbc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007dbe:	9107      	str	r1, [sp, #28]
 8007dc0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc8:	9310      	str	r3, [sp, #64]	; 0x40
 8007dca:	b975      	cbnz	r5, 8007dea <_dtoa_r+0x3a>
 8007dcc:	2010      	movs	r0, #16
 8007dce:	f000 fd75 	bl	80088bc <malloc>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6270      	str	r0, [r6, #36]	; 0x24
 8007dd6:	b920      	cbnz	r0, 8007de2 <_dtoa_r+0x32>
 8007dd8:	4bab      	ldr	r3, [pc, #684]	; (8008088 <_dtoa_r+0x2d8>)
 8007dda:	21ea      	movs	r1, #234	; 0xea
 8007ddc:	48ab      	ldr	r0, [pc, #684]	; (800808c <_dtoa_r+0x2dc>)
 8007dde:	f001 fb27 	bl	8009430 <__assert_func>
 8007de2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007de6:	6005      	str	r5, [r0, #0]
 8007de8:	60c5      	str	r5, [r0, #12]
 8007dea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007dec:	6819      	ldr	r1, [r3, #0]
 8007dee:	b151      	cbz	r1, 8007e06 <_dtoa_r+0x56>
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	604a      	str	r2, [r1, #4]
 8007df4:	2301      	movs	r3, #1
 8007df6:	4093      	lsls	r3, r2
 8007df8:	608b      	str	r3, [r1, #8]
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 fdb4 	bl	8008968 <_Bfree>
 8007e00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	f1b9 0300 	subs.w	r3, r9, #0
 8007e0a:	bfbb      	ittet	lt
 8007e0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e10:	9303      	strlt	r3, [sp, #12]
 8007e12:	2300      	movge	r3, #0
 8007e14:	2201      	movlt	r2, #1
 8007e16:	bfac      	ite	ge
 8007e18:	6023      	strge	r3, [r4, #0]
 8007e1a:	6022      	strlt	r2, [r4, #0]
 8007e1c:	4b9c      	ldr	r3, [pc, #624]	; (8008090 <_dtoa_r+0x2e0>)
 8007e1e:	9c03      	ldr	r4, [sp, #12]
 8007e20:	43a3      	bics	r3, r4
 8007e22:	d11a      	bne.n	8007e5a <_dtoa_r+0xaa>
 8007e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e26:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e30:	ea53 0308 	orrs.w	r3, r3, r8
 8007e34:	f000 8512 	beq.w	800885c <_dtoa_r+0xaac>
 8007e38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e3a:	b953      	cbnz	r3, 8007e52 <_dtoa_r+0xa2>
 8007e3c:	4b95      	ldr	r3, [pc, #596]	; (8008094 <_dtoa_r+0x2e4>)
 8007e3e:	e01f      	b.n	8007e80 <_dtoa_r+0xd0>
 8007e40:	4b95      	ldr	r3, [pc, #596]	; (8008098 <_dtoa_r+0x2e8>)
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	9800      	ldr	r0, [sp, #0]
 8007e4c:	b015      	add	sp, #84	; 0x54
 8007e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e52:	4b90      	ldr	r3, [pc, #576]	; (8008094 <_dtoa_r+0x2e4>)
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	3303      	adds	r3, #3
 8007e58:	e7f5      	b.n	8007e46 <_dtoa_r+0x96>
 8007e5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007e6a:	d10b      	bne.n	8007e84 <_dtoa_r+0xd4>
 8007e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e6e:	2301      	movs	r3, #1
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 84ee 	beq.w	8008856 <_dtoa_r+0xaa6>
 8007e7a:	4888      	ldr	r0, [pc, #544]	; (800809c <_dtoa_r+0x2ec>)
 8007e7c:	6018      	str	r0, [r3, #0]
 8007e7e:	1e43      	subs	r3, r0, #1
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	e7e2      	b.n	8007e4a <_dtoa_r+0x9a>
 8007e84:	a913      	add	r1, sp, #76	; 0x4c
 8007e86:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007e8a:	aa12      	add	r2, sp, #72	; 0x48
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f001 f84d 	bl	8008f2c <__d2b>
 8007e92:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007e96:	4605      	mov	r5, r0
 8007e98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d047      	beq.n	8007f2e <_dtoa_r+0x17e>
 8007e9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ea0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ea4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ea8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007eac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007eb0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007eb4:	2400      	movs	r4, #0
 8007eb6:	ec43 2b16 	vmov	d6, r2, r3
 8007eba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007ebe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008070 <_dtoa_r+0x2c0>
 8007ec2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007ec6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008078 <_dtoa_r+0x2c8>
 8007eca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007ece:	eeb0 7b46 	vmov.f64	d7, d6
 8007ed2:	ee06 1a90 	vmov	s13, r1
 8007ed6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007eda:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008080 <_dtoa_r+0x2d0>
 8007ede:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007ee2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007ee6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eee:	ee16 ba90 	vmov	fp, s13
 8007ef2:	9411      	str	r4, [sp, #68]	; 0x44
 8007ef4:	d508      	bpl.n	8007f08 <_dtoa_r+0x158>
 8007ef6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007efa:	eeb4 6b47 	vcmp.f64	d6, d7
 8007efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f02:	bf18      	it	ne
 8007f04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007f08:	f1bb 0f16 	cmp.w	fp, #22
 8007f0c:	d832      	bhi.n	8007f74 <_dtoa_r+0x1c4>
 8007f0e:	4b64      	ldr	r3, [pc, #400]	; (80080a0 <_dtoa_r+0x2f0>)
 8007f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f14:	ed93 7b00 	vldr	d7, [r3]
 8007f18:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007f1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f24:	d501      	bpl.n	8007f2a <_dtoa_r+0x17a>
 8007f26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e023      	b.n	8007f76 <_dtoa_r+0x1c6>
 8007f2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f30:	4401      	add	r1, r0
 8007f32:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	bfc3      	ittte	gt
 8007f3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f3e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007f42:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007f46:	f1c3 0320 	rsble	r3, r3, #32
 8007f4a:	bfc6      	itte	gt
 8007f4c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007f50:	ea43 0308 	orrgt.w	r3, r3, r8
 8007f54:	fa08 f303 	lslle.w	r3, r8, r3
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f60:	3901      	subs	r1, #1
 8007f62:	ed8d 7b00 	vstr	d7, [sp]
 8007f66:	9c01      	ldr	r4, [sp, #4]
 8007f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007f70:	2401      	movs	r4, #1
 8007f72:	e7a0      	b.n	8007eb6 <_dtoa_r+0x106>
 8007f74:	2301      	movs	r3, #1
 8007f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f78:	1a43      	subs	r3, r0, r1
 8007f7a:	1e5a      	subs	r2, r3, #1
 8007f7c:	bf45      	ittet	mi
 8007f7e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f82:	9305      	strmi	r3, [sp, #20]
 8007f84:	2300      	movpl	r3, #0
 8007f86:	2300      	movmi	r3, #0
 8007f88:	9206      	str	r2, [sp, #24]
 8007f8a:	bf54      	ite	pl
 8007f8c:	9305      	strpl	r3, [sp, #20]
 8007f8e:	9306      	strmi	r3, [sp, #24]
 8007f90:	f1bb 0f00 	cmp.w	fp, #0
 8007f94:	db18      	blt.n	8007fc8 <_dtoa_r+0x218>
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007f9c:	445b      	add	r3, fp
 8007f9e:	9306      	str	r3, [sp, #24]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9a07      	ldr	r2, [sp, #28]
 8007fa4:	2a09      	cmp	r2, #9
 8007fa6:	d849      	bhi.n	800803c <_dtoa_r+0x28c>
 8007fa8:	2a05      	cmp	r2, #5
 8007faa:	bfc4      	itt	gt
 8007fac:	3a04      	subgt	r2, #4
 8007fae:	9207      	strgt	r2, [sp, #28]
 8007fb0:	9a07      	ldr	r2, [sp, #28]
 8007fb2:	f1a2 0202 	sub.w	r2, r2, #2
 8007fb6:	bfcc      	ite	gt
 8007fb8:	2400      	movgt	r4, #0
 8007fba:	2401      	movle	r4, #1
 8007fbc:	2a03      	cmp	r2, #3
 8007fbe:	d848      	bhi.n	8008052 <_dtoa_r+0x2a2>
 8007fc0:	e8df f002 	tbb	[pc, r2]
 8007fc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8007fc8:	9b05      	ldr	r3, [sp, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	eba3 030b 	sub.w	r3, r3, fp
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	920e      	str	r2, [sp, #56]	; 0x38
 8007fd4:	f1cb 0300 	rsb	r3, fp, #0
 8007fd8:	e7e3      	b.n	8007fa2 <_dtoa_r+0x1f2>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	9208      	str	r2, [sp, #32]
 8007fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe0:	2a00      	cmp	r2, #0
 8007fe2:	dc39      	bgt.n	8008058 <_dtoa_r+0x2a8>
 8007fe4:	f04f 0a01 	mov.w	sl, #1
 8007fe8:	46d1      	mov	r9, sl
 8007fea:	4652      	mov	r2, sl
 8007fec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007ff0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	6079      	str	r1, [r7, #4]
 8007ff6:	2004      	movs	r0, #4
 8007ff8:	f100 0c14 	add.w	ip, r0, #20
 8007ffc:	4594      	cmp	ip, r2
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	d92f      	bls.n	8008062 <_dtoa_r+0x2b2>
 8008002:	4630      	mov	r0, r6
 8008004:	930c      	str	r3, [sp, #48]	; 0x30
 8008006:	f000 fc6f 	bl	80088e8 <_Balloc>
 800800a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800c:	9000      	str	r0, [sp, #0]
 800800e:	4602      	mov	r2, r0
 8008010:	2800      	cmp	r0, #0
 8008012:	d149      	bne.n	80080a8 <_dtoa_r+0x2f8>
 8008014:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <_dtoa_r+0x2f4>)
 8008016:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800801a:	e6df      	b.n	8007ddc <_dtoa_r+0x2c>
 800801c:	2201      	movs	r2, #1
 800801e:	e7dd      	b.n	8007fdc <_dtoa_r+0x22c>
 8008020:	2200      	movs	r2, #0
 8008022:	9208      	str	r2, [sp, #32]
 8008024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008026:	eb0b 0a02 	add.w	sl, fp, r2
 800802a:	f10a 0901 	add.w	r9, sl, #1
 800802e:	464a      	mov	r2, r9
 8008030:	2a01      	cmp	r2, #1
 8008032:	bfb8      	it	lt
 8008034:	2201      	movlt	r2, #1
 8008036:	e7db      	b.n	8007ff0 <_dtoa_r+0x240>
 8008038:	2201      	movs	r2, #1
 800803a:	e7f2      	b.n	8008022 <_dtoa_r+0x272>
 800803c:	2401      	movs	r4, #1
 800803e:	2200      	movs	r2, #0
 8008040:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008044:	f04f 3aff 	mov.w	sl, #4294967295
 8008048:	2100      	movs	r1, #0
 800804a:	46d1      	mov	r9, sl
 800804c:	2212      	movs	r2, #18
 800804e:	9109      	str	r1, [sp, #36]	; 0x24
 8008050:	e7ce      	b.n	8007ff0 <_dtoa_r+0x240>
 8008052:	2201      	movs	r2, #1
 8008054:	9208      	str	r2, [sp, #32]
 8008056:	e7f5      	b.n	8008044 <_dtoa_r+0x294>
 8008058:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800805c:	46d1      	mov	r9, sl
 800805e:	4652      	mov	r2, sl
 8008060:	e7c6      	b.n	8007ff0 <_dtoa_r+0x240>
 8008062:	3101      	adds	r1, #1
 8008064:	6079      	str	r1, [r7, #4]
 8008066:	0040      	lsls	r0, r0, #1
 8008068:	e7c6      	b.n	8007ff8 <_dtoa_r+0x248>
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	636f4361 	.word	0x636f4361
 8008074:	3fd287a7 	.word	0x3fd287a7
 8008078:	8b60c8b3 	.word	0x8b60c8b3
 800807c:	3fc68a28 	.word	0x3fc68a28
 8008080:	509f79fb 	.word	0x509f79fb
 8008084:	3fd34413 	.word	0x3fd34413
 8008088:	0800a2c5 	.word	0x0800a2c5
 800808c:	0800a2dc 	.word	0x0800a2dc
 8008090:	7ff00000 	.word	0x7ff00000
 8008094:	0800a2c1 	.word	0x0800a2c1
 8008098:	0800a2b8 	.word	0x0800a2b8
 800809c:	0800a295 	.word	0x0800a295
 80080a0:	0800a3d8 	.word	0x0800a3d8
 80080a4:	0800a33b 	.word	0x0800a33b
 80080a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80080aa:	9900      	ldr	r1, [sp, #0]
 80080ac:	6011      	str	r1, [r2, #0]
 80080ae:	f1b9 0f0e 	cmp.w	r9, #14
 80080b2:	d872      	bhi.n	800819a <_dtoa_r+0x3ea>
 80080b4:	2c00      	cmp	r4, #0
 80080b6:	d070      	beq.n	800819a <_dtoa_r+0x3ea>
 80080b8:	f1bb 0f00 	cmp.w	fp, #0
 80080bc:	f340 80a6 	ble.w	800820c <_dtoa_r+0x45c>
 80080c0:	49ca      	ldr	r1, [pc, #808]	; (80083ec <_dtoa_r+0x63c>)
 80080c2:	f00b 020f 	and.w	r2, fp, #15
 80080c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80080ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80080ce:	ed92 7b00 	vldr	d7, [r2]
 80080d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80080d6:	f000 808d 	beq.w	80081f4 <_dtoa_r+0x444>
 80080da:	4ac5      	ldr	r2, [pc, #788]	; (80083f0 <_dtoa_r+0x640>)
 80080dc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80080e0:	ed92 6b08 	vldr	d6, [r2, #32]
 80080e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80080e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80080ec:	f001 010f 	and.w	r1, r1, #15
 80080f0:	2203      	movs	r2, #3
 80080f2:	48bf      	ldr	r0, [pc, #764]	; (80083f0 <_dtoa_r+0x640>)
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d17f      	bne.n	80081f8 <_dtoa_r+0x448>
 80080f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008100:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008104:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008106:	2900      	cmp	r1, #0
 8008108:	f000 80b2 	beq.w	8008270 <_dtoa_r+0x4c0>
 800810c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008110:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008114:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811c:	f140 80a8 	bpl.w	8008270 <_dtoa_r+0x4c0>
 8008120:	f1b9 0f00 	cmp.w	r9, #0
 8008124:	f000 80a4 	beq.w	8008270 <_dtoa_r+0x4c0>
 8008128:	f1ba 0f00 	cmp.w	sl, #0
 800812c:	dd31      	ble.n	8008192 <_dtoa_r+0x3e2>
 800812e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008132:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008136:	ed8d 7b02 	vstr	d7, [sp, #8]
 800813a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800813e:	3201      	adds	r2, #1
 8008140:	4650      	mov	r0, sl
 8008142:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008146:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800814a:	ee07 2a90 	vmov	s15, r2
 800814e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008152:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008156:	ed8d 5b02 	vstr	d5, [sp, #8]
 800815a:	9c03      	ldr	r4, [sp, #12]
 800815c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008160:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 8086 	bne.w	8008276 <_dtoa_r+0x4c6>
 800816a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800816e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008172:	ec42 1b17 	vmov	d7, r1, r2
 8008176:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800817a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817e:	f300 8272 	bgt.w	8008666 <_dtoa_r+0x8b6>
 8008182:	eeb1 7b47 	vneg.f64	d7, d7
 8008186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800818a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800818e:	f100 8267 	bmi.w	8008660 <_dtoa_r+0x8b0>
 8008192:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008196:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800819a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800819c:	2a00      	cmp	r2, #0
 800819e:	f2c0 8129 	blt.w	80083f4 <_dtoa_r+0x644>
 80081a2:	f1bb 0f0e 	cmp.w	fp, #14
 80081a6:	f300 8125 	bgt.w	80083f4 <_dtoa_r+0x644>
 80081aa:	4b90      	ldr	r3, [pc, #576]	; (80083ec <_dtoa_r+0x63c>)
 80081ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80081b0:	ed93 6b00 	vldr	d6, [r3]
 80081b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f280 80c3 	bge.w	8008342 <_dtoa_r+0x592>
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	f300 80bf 	bgt.w	8008342 <_dtoa_r+0x592>
 80081c4:	f040 824c 	bne.w	8008660 <_dtoa_r+0x8b0>
 80081c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80081cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80081d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081dc:	464c      	mov	r4, r9
 80081de:	464f      	mov	r7, r9
 80081e0:	f280 8222 	bge.w	8008628 <_dtoa_r+0x878>
 80081e4:	f8dd 8000 	ldr.w	r8, [sp]
 80081e8:	2331      	movs	r3, #49	; 0x31
 80081ea:	f808 3b01 	strb.w	r3, [r8], #1
 80081ee:	f10b 0b01 	add.w	fp, fp, #1
 80081f2:	e21e      	b.n	8008632 <_dtoa_r+0x882>
 80081f4:	2202      	movs	r2, #2
 80081f6:	e77c      	b.n	80080f2 <_dtoa_r+0x342>
 80081f8:	07cc      	lsls	r4, r1, #31
 80081fa:	d504      	bpl.n	8008206 <_dtoa_r+0x456>
 80081fc:	ed90 6b00 	vldr	d6, [r0]
 8008200:	3201      	adds	r2, #1
 8008202:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008206:	1049      	asrs	r1, r1, #1
 8008208:	3008      	adds	r0, #8
 800820a:	e773      	b.n	80080f4 <_dtoa_r+0x344>
 800820c:	d02e      	beq.n	800826c <_dtoa_r+0x4bc>
 800820e:	f1cb 0100 	rsb	r1, fp, #0
 8008212:	4a76      	ldr	r2, [pc, #472]	; (80083ec <_dtoa_r+0x63c>)
 8008214:	f001 000f 	and.w	r0, r1, #15
 8008218:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800821c:	ed92 7b00 	vldr	d7, [r2]
 8008220:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008224:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008228:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800822c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008230:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008234:	486e      	ldr	r0, [pc, #440]	; (80083f0 <_dtoa_r+0x640>)
 8008236:	1109      	asrs	r1, r1, #4
 8008238:	2400      	movs	r4, #0
 800823a:	2202      	movs	r2, #2
 800823c:	b939      	cbnz	r1, 800824e <_dtoa_r+0x49e>
 800823e:	2c00      	cmp	r4, #0
 8008240:	f43f af60 	beq.w	8008104 <_dtoa_r+0x354>
 8008244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800824c:	e75a      	b.n	8008104 <_dtoa_r+0x354>
 800824e:	07cf      	lsls	r7, r1, #31
 8008250:	d509      	bpl.n	8008266 <_dtoa_r+0x4b6>
 8008252:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008256:	ed90 7b00 	vldr	d7, [r0]
 800825a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800825e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008262:	3201      	adds	r2, #1
 8008264:	2401      	movs	r4, #1
 8008266:	1049      	asrs	r1, r1, #1
 8008268:	3008      	adds	r0, #8
 800826a:	e7e7      	b.n	800823c <_dtoa_r+0x48c>
 800826c:	2202      	movs	r2, #2
 800826e:	e749      	b.n	8008104 <_dtoa_r+0x354>
 8008270:	465f      	mov	r7, fp
 8008272:	4648      	mov	r0, r9
 8008274:	e765      	b.n	8008142 <_dtoa_r+0x392>
 8008276:	ec42 1b17 	vmov	d7, r1, r2
 800827a:	4a5c      	ldr	r2, [pc, #368]	; (80083ec <_dtoa_r+0x63c>)
 800827c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008280:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008284:	9a00      	ldr	r2, [sp, #0]
 8008286:	1814      	adds	r4, r2, r0
 8008288:	9a08      	ldr	r2, [sp, #32]
 800828a:	b352      	cbz	r2, 80082e2 <_dtoa_r+0x532>
 800828c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008290:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008294:	f8dd 8000 	ldr.w	r8, [sp]
 8008298:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800829c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80082a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80082a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082a8:	ee14 2a90 	vmov	r2, s9
 80082ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082b0:	3230      	adds	r2, #48	; 0x30
 80082b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082be:	f808 2b01 	strb.w	r2, [r8], #1
 80082c2:	d439      	bmi.n	8008338 <_dtoa_r+0x588>
 80082c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80082c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80082cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d0:	d472      	bmi.n	80083b8 <_dtoa_r+0x608>
 80082d2:	45a0      	cmp	r8, r4
 80082d4:	f43f af5d 	beq.w	8008192 <_dtoa_r+0x3e2>
 80082d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80082dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80082e0:	e7e0      	b.n	80082a4 <_dtoa_r+0x4f4>
 80082e2:	f8dd 8000 	ldr.w	r8, [sp]
 80082e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082ea:	4621      	mov	r1, r4
 80082ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80082f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082f4:	ee14 2a90 	vmov	r2, s9
 80082f8:	3230      	adds	r2, #48	; 0x30
 80082fa:	f808 2b01 	strb.w	r2, [r8], #1
 80082fe:	45a0      	cmp	r8, r4
 8008300:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008304:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008308:	d118      	bne.n	800833c <_dtoa_r+0x58c>
 800830a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800830e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008312:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831a:	dc4d      	bgt.n	80083b8 <_dtoa_r+0x608>
 800831c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008320:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008328:	f57f af33 	bpl.w	8008192 <_dtoa_r+0x3e2>
 800832c:	4688      	mov	r8, r1
 800832e:	3901      	subs	r1, #1
 8008330:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d0f9      	beq.n	800832c <_dtoa_r+0x57c>
 8008338:	46bb      	mov	fp, r7
 800833a:	e02a      	b.n	8008392 <_dtoa_r+0x5e2>
 800833c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008340:	e7d6      	b.n	80082f0 <_dtoa_r+0x540>
 8008342:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008346:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800834a:	f8dd 8000 	ldr.w	r8, [sp]
 800834e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008352:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008356:	ee15 3a10 	vmov	r3, s10
 800835a:	3330      	adds	r3, #48	; 0x30
 800835c:	f808 3b01 	strb.w	r3, [r8], #1
 8008360:	9b00      	ldr	r3, [sp, #0]
 8008362:	eba8 0303 	sub.w	r3, r8, r3
 8008366:	4599      	cmp	r9, r3
 8008368:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800836c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008370:	d133      	bne.n	80083da <_dtoa_r+0x62a>
 8008372:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008376:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	dc1a      	bgt.n	80083b6 <_dtoa_r+0x606>
 8008380:	eeb4 7b46 	vcmp.f64	d7, d6
 8008384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008388:	d103      	bne.n	8008392 <_dtoa_r+0x5e2>
 800838a:	ee15 3a10 	vmov	r3, s10
 800838e:	07d9      	lsls	r1, r3, #31
 8008390:	d411      	bmi.n	80083b6 <_dtoa_r+0x606>
 8008392:	4629      	mov	r1, r5
 8008394:	4630      	mov	r0, r6
 8008396:	f000 fae7 	bl	8008968 <_Bfree>
 800839a:	2300      	movs	r3, #0
 800839c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800839e:	f888 3000 	strb.w	r3, [r8]
 80083a2:	f10b 0301 	add.w	r3, fp, #1
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f43f ad4d 	beq.w	8007e4a <_dtoa_r+0x9a>
 80083b0:	f8c3 8000 	str.w	r8, [r3]
 80083b4:	e549      	b.n	8007e4a <_dtoa_r+0x9a>
 80083b6:	465f      	mov	r7, fp
 80083b8:	4643      	mov	r3, r8
 80083ba:	4698      	mov	r8, r3
 80083bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083c0:	2a39      	cmp	r2, #57	; 0x39
 80083c2:	d106      	bne.n	80083d2 <_dtoa_r+0x622>
 80083c4:	9a00      	ldr	r2, [sp, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d1f7      	bne.n	80083ba <_dtoa_r+0x60a>
 80083ca:	9900      	ldr	r1, [sp, #0]
 80083cc:	2230      	movs	r2, #48	; 0x30
 80083ce:	3701      	adds	r7, #1
 80083d0:	700a      	strb	r2, [r1, #0]
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	3201      	adds	r2, #1
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e7ae      	b.n	8008338 <_dtoa_r+0x588>
 80083da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80083de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e6:	d1b2      	bne.n	800834e <_dtoa_r+0x59e>
 80083e8:	e7d3      	b.n	8008392 <_dtoa_r+0x5e2>
 80083ea:	bf00      	nop
 80083ec:	0800a3d8 	.word	0x0800a3d8
 80083f0:	0800a3b0 	.word	0x0800a3b0
 80083f4:	9908      	ldr	r1, [sp, #32]
 80083f6:	2900      	cmp	r1, #0
 80083f8:	f000 80d1 	beq.w	800859e <_dtoa_r+0x7ee>
 80083fc:	9907      	ldr	r1, [sp, #28]
 80083fe:	2901      	cmp	r1, #1
 8008400:	f300 80b4 	bgt.w	800856c <_dtoa_r+0x7bc>
 8008404:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008406:	2900      	cmp	r1, #0
 8008408:	f000 80ac 	beq.w	8008564 <_dtoa_r+0x7b4>
 800840c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008410:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008414:	461c      	mov	r4, r3
 8008416:	930a      	str	r3, [sp, #40]	; 0x28
 8008418:	9b05      	ldr	r3, [sp, #20]
 800841a:	4413      	add	r3, r2
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	9b06      	ldr	r3, [sp, #24]
 8008420:	2101      	movs	r1, #1
 8008422:	4413      	add	r3, r2
 8008424:	4630      	mov	r0, r6
 8008426:	9306      	str	r3, [sp, #24]
 8008428:	f000 fb5a 	bl	8008ae0 <__i2b>
 800842c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842e:	4607      	mov	r7, r0
 8008430:	f1b8 0f00 	cmp.w	r8, #0
 8008434:	dd0d      	ble.n	8008452 <_dtoa_r+0x6a2>
 8008436:	9a06      	ldr	r2, [sp, #24]
 8008438:	2a00      	cmp	r2, #0
 800843a:	dd0a      	ble.n	8008452 <_dtoa_r+0x6a2>
 800843c:	4542      	cmp	r2, r8
 800843e:	9905      	ldr	r1, [sp, #20]
 8008440:	bfa8      	it	ge
 8008442:	4642      	movge	r2, r8
 8008444:	1a89      	subs	r1, r1, r2
 8008446:	9105      	str	r1, [sp, #20]
 8008448:	9906      	ldr	r1, [sp, #24]
 800844a:	eba8 0802 	sub.w	r8, r8, r2
 800844e:	1a8a      	subs	r2, r1, r2
 8008450:	9206      	str	r2, [sp, #24]
 8008452:	b303      	cbz	r3, 8008496 <_dtoa_r+0x6e6>
 8008454:	9a08      	ldr	r2, [sp, #32]
 8008456:	2a00      	cmp	r2, #0
 8008458:	f000 80a6 	beq.w	80085a8 <_dtoa_r+0x7f8>
 800845c:	2c00      	cmp	r4, #0
 800845e:	dd13      	ble.n	8008488 <_dtoa_r+0x6d8>
 8008460:	4639      	mov	r1, r7
 8008462:	4622      	mov	r2, r4
 8008464:	4630      	mov	r0, r6
 8008466:	930c      	str	r3, [sp, #48]	; 0x30
 8008468:	f000 fbf6 	bl	8008c58 <__pow5mult>
 800846c:	462a      	mov	r2, r5
 800846e:	4601      	mov	r1, r0
 8008470:	4607      	mov	r7, r0
 8008472:	4630      	mov	r0, r6
 8008474:	f000 fb4a 	bl	8008b0c <__multiply>
 8008478:	4629      	mov	r1, r5
 800847a:	900a      	str	r0, [sp, #40]	; 0x28
 800847c:	4630      	mov	r0, r6
 800847e:	f000 fa73 	bl	8008968 <_Bfree>
 8008482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008486:	4615      	mov	r5, r2
 8008488:	1b1a      	subs	r2, r3, r4
 800848a:	d004      	beq.n	8008496 <_dtoa_r+0x6e6>
 800848c:	4629      	mov	r1, r5
 800848e:	4630      	mov	r0, r6
 8008490:	f000 fbe2 	bl	8008c58 <__pow5mult>
 8008494:	4605      	mov	r5, r0
 8008496:	2101      	movs	r1, #1
 8008498:	4630      	mov	r0, r6
 800849a:	f000 fb21 	bl	8008ae0 <__i2b>
 800849e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	f340 8082 	ble.w	80085ac <_dtoa_r+0x7fc>
 80084a8:	461a      	mov	r2, r3
 80084aa:	4601      	mov	r1, r0
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 fbd3 	bl	8008c58 <__pow5mult>
 80084b2:	9b07      	ldr	r3, [sp, #28]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	4604      	mov	r4, r0
 80084b8:	dd7b      	ble.n	80085b2 <_dtoa_r+0x802>
 80084ba:	2300      	movs	r3, #0
 80084bc:	930a      	str	r3, [sp, #40]	; 0x28
 80084be:	6922      	ldr	r2, [r4, #16]
 80084c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80084c4:	6910      	ldr	r0, [r2, #16]
 80084c6:	f000 fabb 	bl	8008a40 <__hi0bits>
 80084ca:	f1c0 0020 	rsb	r0, r0, #32
 80084ce:	9b06      	ldr	r3, [sp, #24]
 80084d0:	4418      	add	r0, r3
 80084d2:	f010 001f 	ands.w	r0, r0, #31
 80084d6:	f000 808d 	beq.w	80085f4 <_dtoa_r+0x844>
 80084da:	f1c0 0220 	rsb	r2, r0, #32
 80084de:	2a04      	cmp	r2, #4
 80084e0:	f340 8086 	ble.w	80085f0 <_dtoa_r+0x840>
 80084e4:	f1c0 001c 	rsb	r0, r0, #28
 80084e8:	9b05      	ldr	r3, [sp, #20]
 80084ea:	4403      	add	r3, r0
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	9b06      	ldr	r3, [sp, #24]
 80084f0:	4403      	add	r3, r0
 80084f2:	4480      	add	r8, r0
 80084f4:	9306      	str	r3, [sp, #24]
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dd05      	ble.n	8008508 <_dtoa_r+0x758>
 80084fc:	4629      	mov	r1, r5
 80084fe:	461a      	mov	r2, r3
 8008500:	4630      	mov	r0, r6
 8008502:	f000 fc03 	bl	8008d0c <__lshift>
 8008506:	4605      	mov	r5, r0
 8008508:	9b06      	ldr	r3, [sp, #24]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dd05      	ble.n	800851a <_dtoa_r+0x76a>
 800850e:	4621      	mov	r1, r4
 8008510:	461a      	mov	r2, r3
 8008512:	4630      	mov	r0, r6
 8008514:	f000 fbfa 	bl	8008d0c <__lshift>
 8008518:	4604      	mov	r4, r0
 800851a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d06b      	beq.n	80085f8 <_dtoa_r+0x848>
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f000 fc5e 	bl	8008de4 <__mcmp>
 8008528:	2800      	cmp	r0, #0
 800852a:	da65      	bge.n	80085f8 <_dtoa_r+0x848>
 800852c:	2300      	movs	r3, #0
 800852e:	4629      	mov	r1, r5
 8008530:	220a      	movs	r2, #10
 8008532:	4630      	mov	r0, r6
 8008534:	f000 fa3a 	bl	80089ac <__multadd>
 8008538:	9b08      	ldr	r3, [sp, #32]
 800853a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800853e:	4605      	mov	r5, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8192 	beq.w	800886a <_dtoa_r+0xaba>
 8008546:	4639      	mov	r1, r7
 8008548:	2300      	movs	r3, #0
 800854a:	220a      	movs	r2, #10
 800854c:	4630      	mov	r0, r6
 800854e:	f000 fa2d 	bl	80089ac <__multadd>
 8008552:	f1ba 0f00 	cmp.w	sl, #0
 8008556:	4607      	mov	r7, r0
 8008558:	f300 808e 	bgt.w	8008678 <_dtoa_r+0x8c8>
 800855c:	9b07      	ldr	r3, [sp, #28]
 800855e:	2b02      	cmp	r3, #2
 8008560:	dc51      	bgt.n	8008606 <_dtoa_r+0x856>
 8008562:	e089      	b.n	8008678 <_dtoa_r+0x8c8>
 8008564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800856a:	e751      	b.n	8008410 <_dtoa_r+0x660>
 800856c:	f109 34ff 	add.w	r4, r9, #4294967295
 8008570:	42a3      	cmp	r3, r4
 8008572:	bfbf      	itttt	lt
 8008574:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008576:	1ae3      	sublt	r3, r4, r3
 8008578:	18d2      	addlt	r2, r2, r3
 800857a:	4613      	movlt	r3, r2
 800857c:	bfb7      	itett	lt
 800857e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008580:	1b1c      	subge	r4, r3, r4
 8008582:	4623      	movlt	r3, r4
 8008584:	2400      	movlt	r4, #0
 8008586:	f1b9 0f00 	cmp.w	r9, #0
 800858a:	bfb5      	itete	lt
 800858c:	9a05      	ldrlt	r2, [sp, #20]
 800858e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008592:	eba2 0809 	sublt.w	r8, r2, r9
 8008596:	464a      	movge	r2, r9
 8008598:	bfb8      	it	lt
 800859a:	2200      	movlt	r2, #0
 800859c:	e73b      	b.n	8008416 <_dtoa_r+0x666>
 800859e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80085a2:	9f08      	ldr	r7, [sp, #32]
 80085a4:	461c      	mov	r4, r3
 80085a6:	e743      	b.n	8008430 <_dtoa_r+0x680>
 80085a8:	461a      	mov	r2, r3
 80085aa:	e76f      	b.n	800848c <_dtoa_r+0x6dc>
 80085ac:	9b07      	ldr	r3, [sp, #28]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	dc18      	bgt.n	80085e4 <_dtoa_r+0x834>
 80085b2:	9b02      	ldr	r3, [sp, #8]
 80085b4:	b9b3      	cbnz	r3, 80085e4 <_dtoa_r+0x834>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80085bc:	b9a2      	cbnz	r2, 80085e8 <_dtoa_r+0x838>
 80085be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085c2:	0d12      	lsrs	r2, r2, #20
 80085c4:	0512      	lsls	r2, r2, #20
 80085c6:	b18a      	cbz	r2, 80085ec <_dtoa_r+0x83c>
 80085c8:	9b05      	ldr	r3, [sp, #20]
 80085ca:	3301      	adds	r3, #1
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	9b06      	ldr	r3, [sp, #24]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9306      	str	r3, [sp, #24]
 80085d4:	2301      	movs	r3, #1
 80085d6:	930a      	str	r3, [sp, #40]	; 0x28
 80085d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f47f af6f 	bne.w	80084be <_dtoa_r+0x70e>
 80085e0:	2001      	movs	r0, #1
 80085e2:	e774      	b.n	80084ce <_dtoa_r+0x71e>
 80085e4:	2300      	movs	r3, #0
 80085e6:	e7f6      	b.n	80085d6 <_dtoa_r+0x826>
 80085e8:	9b02      	ldr	r3, [sp, #8]
 80085ea:	e7f4      	b.n	80085d6 <_dtoa_r+0x826>
 80085ec:	920a      	str	r2, [sp, #40]	; 0x28
 80085ee:	e7f3      	b.n	80085d8 <_dtoa_r+0x828>
 80085f0:	d081      	beq.n	80084f6 <_dtoa_r+0x746>
 80085f2:	4610      	mov	r0, r2
 80085f4:	301c      	adds	r0, #28
 80085f6:	e777      	b.n	80084e8 <_dtoa_r+0x738>
 80085f8:	f1b9 0f00 	cmp.w	r9, #0
 80085fc:	dc37      	bgt.n	800866e <_dtoa_r+0x8be>
 80085fe:	9b07      	ldr	r3, [sp, #28]
 8008600:	2b02      	cmp	r3, #2
 8008602:	dd34      	ble.n	800866e <_dtoa_r+0x8be>
 8008604:	46ca      	mov	sl, r9
 8008606:	f1ba 0f00 	cmp.w	sl, #0
 800860a:	d10d      	bne.n	8008628 <_dtoa_r+0x878>
 800860c:	4621      	mov	r1, r4
 800860e:	4653      	mov	r3, sl
 8008610:	2205      	movs	r2, #5
 8008612:	4630      	mov	r0, r6
 8008614:	f000 f9ca 	bl	80089ac <__multadd>
 8008618:	4601      	mov	r1, r0
 800861a:	4604      	mov	r4, r0
 800861c:	4628      	mov	r0, r5
 800861e:	f000 fbe1 	bl	8008de4 <__mcmp>
 8008622:	2800      	cmp	r0, #0
 8008624:	f73f adde 	bgt.w	80081e4 <_dtoa_r+0x434>
 8008628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862a:	f8dd 8000 	ldr.w	r8, [sp]
 800862e:	ea6f 0b03 	mvn.w	fp, r3
 8008632:	f04f 0900 	mov.w	r9, #0
 8008636:	4621      	mov	r1, r4
 8008638:	4630      	mov	r0, r6
 800863a:	f000 f995 	bl	8008968 <_Bfree>
 800863e:	2f00      	cmp	r7, #0
 8008640:	f43f aea7 	beq.w	8008392 <_dtoa_r+0x5e2>
 8008644:	f1b9 0f00 	cmp.w	r9, #0
 8008648:	d005      	beq.n	8008656 <_dtoa_r+0x8a6>
 800864a:	45b9      	cmp	r9, r7
 800864c:	d003      	beq.n	8008656 <_dtoa_r+0x8a6>
 800864e:	4649      	mov	r1, r9
 8008650:	4630      	mov	r0, r6
 8008652:	f000 f989 	bl	8008968 <_Bfree>
 8008656:	4639      	mov	r1, r7
 8008658:	4630      	mov	r0, r6
 800865a:	f000 f985 	bl	8008968 <_Bfree>
 800865e:	e698      	b.n	8008392 <_dtoa_r+0x5e2>
 8008660:	2400      	movs	r4, #0
 8008662:	4627      	mov	r7, r4
 8008664:	e7e0      	b.n	8008628 <_dtoa_r+0x878>
 8008666:	46bb      	mov	fp, r7
 8008668:	4604      	mov	r4, r0
 800866a:	4607      	mov	r7, r0
 800866c:	e5ba      	b.n	80081e4 <_dtoa_r+0x434>
 800866e:	9b08      	ldr	r3, [sp, #32]
 8008670:	46ca      	mov	sl, r9
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8100 	beq.w	8008878 <_dtoa_r+0xac8>
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	dd05      	ble.n	800868a <_dtoa_r+0x8da>
 800867e:	4639      	mov	r1, r7
 8008680:	4642      	mov	r2, r8
 8008682:	4630      	mov	r0, r6
 8008684:	f000 fb42 	bl	8008d0c <__lshift>
 8008688:	4607      	mov	r7, r0
 800868a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	d05d      	beq.n	800874c <_dtoa_r+0x99c>
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f928 	bl	80088e8 <_Balloc>
 8008698:	4680      	mov	r8, r0
 800869a:	b928      	cbnz	r0, 80086a8 <_dtoa_r+0x8f8>
 800869c:	4b82      	ldr	r3, [pc, #520]	; (80088a8 <_dtoa_r+0xaf8>)
 800869e:	4602      	mov	r2, r0
 80086a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086a4:	f7ff bb9a 	b.w	8007ddc <_dtoa_r+0x2c>
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	3202      	adds	r2, #2
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	f107 010c 	add.w	r1, r7, #12
 80086b2:	300c      	adds	r0, #12
 80086b4:	f000 f90a 	bl	80088cc <memcpy>
 80086b8:	2201      	movs	r2, #1
 80086ba:	4641      	mov	r1, r8
 80086bc:	4630      	mov	r0, r6
 80086be:	f000 fb25 	bl	8008d0c <__lshift>
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	3301      	adds	r3, #1
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	4453      	add	r3, sl
 80086cc:	9309      	str	r3, [sp, #36]	; 0x24
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	46b9      	mov	r9, r7
 80086d6:	9308      	str	r3, [sp, #32]
 80086d8:	4607      	mov	r7, r0
 80086da:	9b05      	ldr	r3, [sp, #20]
 80086dc:	4621      	mov	r1, r4
 80086de:	3b01      	subs	r3, #1
 80086e0:	4628      	mov	r0, r5
 80086e2:	9302      	str	r3, [sp, #8]
 80086e4:	f7ff fad6 	bl	8007c94 <quorem>
 80086e8:	4603      	mov	r3, r0
 80086ea:	3330      	adds	r3, #48	; 0x30
 80086ec:	9006      	str	r0, [sp, #24]
 80086ee:	4649      	mov	r1, r9
 80086f0:	4628      	mov	r0, r5
 80086f2:	930a      	str	r3, [sp, #40]	; 0x28
 80086f4:	f000 fb76 	bl	8008de4 <__mcmp>
 80086f8:	463a      	mov	r2, r7
 80086fa:	4682      	mov	sl, r0
 80086fc:	4621      	mov	r1, r4
 80086fe:	4630      	mov	r0, r6
 8008700:	f000 fb8c 	bl	8008e1c <__mdiff>
 8008704:	68c2      	ldr	r2, [r0, #12]
 8008706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008708:	4680      	mov	r8, r0
 800870a:	bb0a      	cbnz	r2, 8008750 <_dtoa_r+0x9a0>
 800870c:	4601      	mov	r1, r0
 800870e:	4628      	mov	r0, r5
 8008710:	f000 fb68 	bl	8008de4 <__mcmp>
 8008714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008716:	4602      	mov	r2, r0
 8008718:	4641      	mov	r1, r8
 800871a:	4630      	mov	r0, r6
 800871c:	920e      	str	r2, [sp, #56]	; 0x38
 800871e:	930a      	str	r3, [sp, #40]	; 0x28
 8008720:	f000 f922 	bl	8008968 <_Bfree>
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008728:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800872c:	ea43 0102 	orr.w	r1, r3, r2
 8008730:	9b08      	ldr	r3, [sp, #32]
 8008732:	430b      	orrs	r3, r1
 8008734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008736:	d10d      	bne.n	8008754 <_dtoa_r+0x9a4>
 8008738:	2b39      	cmp	r3, #57	; 0x39
 800873a:	d029      	beq.n	8008790 <_dtoa_r+0x9e0>
 800873c:	f1ba 0f00 	cmp.w	sl, #0
 8008740:	dd01      	ble.n	8008746 <_dtoa_r+0x996>
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	3331      	adds	r3, #49	; 0x31
 8008746:	9a02      	ldr	r2, [sp, #8]
 8008748:	7013      	strb	r3, [r2, #0]
 800874a:	e774      	b.n	8008636 <_dtoa_r+0x886>
 800874c:	4638      	mov	r0, r7
 800874e:	e7b8      	b.n	80086c2 <_dtoa_r+0x912>
 8008750:	2201      	movs	r2, #1
 8008752:	e7e1      	b.n	8008718 <_dtoa_r+0x968>
 8008754:	f1ba 0f00 	cmp.w	sl, #0
 8008758:	db06      	blt.n	8008768 <_dtoa_r+0x9b8>
 800875a:	9907      	ldr	r1, [sp, #28]
 800875c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008760:	9908      	ldr	r1, [sp, #32]
 8008762:	ea5a 0101 	orrs.w	r1, sl, r1
 8008766:	d120      	bne.n	80087aa <_dtoa_r+0x9fa>
 8008768:	2a00      	cmp	r2, #0
 800876a:	ddec      	ble.n	8008746 <_dtoa_r+0x996>
 800876c:	4629      	mov	r1, r5
 800876e:	2201      	movs	r2, #1
 8008770:	4630      	mov	r0, r6
 8008772:	9305      	str	r3, [sp, #20]
 8008774:	f000 faca 	bl	8008d0c <__lshift>
 8008778:	4621      	mov	r1, r4
 800877a:	4605      	mov	r5, r0
 800877c:	f000 fb32 	bl	8008de4 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	dc02      	bgt.n	800878c <_dtoa_r+0x9dc>
 8008786:	d1de      	bne.n	8008746 <_dtoa_r+0x996>
 8008788:	07da      	lsls	r2, r3, #31
 800878a:	d5dc      	bpl.n	8008746 <_dtoa_r+0x996>
 800878c:	2b39      	cmp	r3, #57	; 0x39
 800878e:	d1d8      	bne.n	8008742 <_dtoa_r+0x992>
 8008790:	9a02      	ldr	r2, [sp, #8]
 8008792:	2339      	movs	r3, #57	; 0x39
 8008794:	7013      	strb	r3, [r2, #0]
 8008796:	4643      	mov	r3, r8
 8008798:	4698      	mov	r8, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80087a0:	2a39      	cmp	r2, #57	; 0x39
 80087a2:	d051      	beq.n	8008848 <_dtoa_r+0xa98>
 80087a4:	3201      	adds	r2, #1
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	e745      	b.n	8008636 <_dtoa_r+0x886>
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	dd03      	ble.n	80087b6 <_dtoa_r+0xa06>
 80087ae:	2b39      	cmp	r3, #57	; 0x39
 80087b0:	d0ee      	beq.n	8008790 <_dtoa_r+0x9e0>
 80087b2:	3301      	adds	r3, #1
 80087b4:	e7c7      	b.n	8008746 <_dtoa_r+0x996>
 80087b6:	9a05      	ldr	r2, [sp, #20]
 80087b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087be:	428a      	cmp	r2, r1
 80087c0:	d02b      	beq.n	800881a <_dtoa_r+0xa6a>
 80087c2:	4629      	mov	r1, r5
 80087c4:	2300      	movs	r3, #0
 80087c6:	220a      	movs	r2, #10
 80087c8:	4630      	mov	r0, r6
 80087ca:	f000 f8ef 	bl	80089ac <__multadd>
 80087ce:	45b9      	cmp	r9, r7
 80087d0:	4605      	mov	r5, r0
 80087d2:	f04f 0300 	mov.w	r3, #0
 80087d6:	f04f 020a 	mov.w	r2, #10
 80087da:	4649      	mov	r1, r9
 80087dc:	4630      	mov	r0, r6
 80087de:	d107      	bne.n	80087f0 <_dtoa_r+0xa40>
 80087e0:	f000 f8e4 	bl	80089ac <__multadd>
 80087e4:	4681      	mov	r9, r0
 80087e6:	4607      	mov	r7, r0
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	3301      	adds	r3, #1
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	e774      	b.n	80086da <_dtoa_r+0x92a>
 80087f0:	f000 f8dc 	bl	80089ac <__multadd>
 80087f4:	4639      	mov	r1, r7
 80087f6:	4681      	mov	r9, r0
 80087f8:	2300      	movs	r3, #0
 80087fa:	220a      	movs	r2, #10
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 f8d5 	bl	80089ac <__multadd>
 8008802:	4607      	mov	r7, r0
 8008804:	e7f0      	b.n	80087e8 <_dtoa_r+0xa38>
 8008806:	f1ba 0f00 	cmp.w	sl, #0
 800880a:	9a00      	ldr	r2, [sp, #0]
 800880c:	bfcc      	ite	gt
 800880e:	46d0      	movgt	r8, sl
 8008810:	f04f 0801 	movle.w	r8, #1
 8008814:	4490      	add	r8, r2
 8008816:	f04f 0900 	mov.w	r9, #0
 800881a:	4629      	mov	r1, r5
 800881c:	2201      	movs	r2, #1
 800881e:	4630      	mov	r0, r6
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	f000 fa73 	bl	8008d0c <__lshift>
 8008826:	4621      	mov	r1, r4
 8008828:	4605      	mov	r5, r0
 800882a:	f000 fadb 	bl	8008de4 <__mcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	dcb1      	bgt.n	8008796 <_dtoa_r+0x9e6>
 8008832:	d102      	bne.n	800883a <_dtoa_r+0xa8a>
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	07db      	lsls	r3, r3, #31
 8008838:	d4ad      	bmi.n	8008796 <_dtoa_r+0x9e6>
 800883a:	4643      	mov	r3, r8
 800883c:	4698      	mov	r8, r3
 800883e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008842:	2a30      	cmp	r2, #48	; 0x30
 8008844:	d0fa      	beq.n	800883c <_dtoa_r+0xa8c>
 8008846:	e6f6      	b.n	8008636 <_dtoa_r+0x886>
 8008848:	9a00      	ldr	r2, [sp, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d1a4      	bne.n	8008798 <_dtoa_r+0x9e8>
 800884e:	f10b 0b01 	add.w	fp, fp, #1
 8008852:	2331      	movs	r3, #49	; 0x31
 8008854:	e778      	b.n	8008748 <_dtoa_r+0x998>
 8008856:	4b15      	ldr	r3, [pc, #84]	; (80088ac <_dtoa_r+0xafc>)
 8008858:	f7ff bb12 	b.w	8007e80 <_dtoa_r+0xd0>
 800885c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800885e:	2b00      	cmp	r3, #0
 8008860:	f47f aaee 	bne.w	8007e40 <_dtoa_r+0x90>
 8008864:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <_dtoa_r+0xb00>)
 8008866:	f7ff bb0b 	b.w	8007e80 <_dtoa_r+0xd0>
 800886a:	f1ba 0f00 	cmp.w	sl, #0
 800886e:	dc03      	bgt.n	8008878 <_dtoa_r+0xac8>
 8008870:	9b07      	ldr	r3, [sp, #28]
 8008872:	2b02      	cmp	r3, #2
 8008874:	f73f aec7 	bgt.w	8008606 <_dtoa_r+0x856>
 8008878:	f8dd 8000 	ldr.w	r8, [sp]
 800887c:	4621      	mov	r1, r4
 800887e:	4628      	mov	r0, r5
 8008880:	f7ff fa08 	bl	8007c94 <quorem>
 8008884:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008888:	f808 3b01 	strb.w	r3, [r8], #1
 800888c:	9a00      	ldr	r2, [sp, #0]
 800888e:	eba8 0202 	sub.w	r2, r8, r2
 8008892:	4592      	cmp	sl, r2
 8008894:	ddb7      	ble.n	8008806 <_dtoa_r+0xa56>
 8008896:	4629      	mov	r1, r5
 8008898:	2300      	movs	r3, #0
 800889a:	220a      	movs	r2, #10
 800889c:	4630      	mov	r0, r6
 800889e:	f000 f885 	bl	80089ac <__multadd>
 80088a2:	4605      	mov	r5, r0
 80088a4:	e7ea      	b.n	800887c <_dtoa_r+0xacc>
 80088a6:	bf00      	nop
 80088a8:	0800a33b 	.word	0x0800a33b
 80088ac:	0800a294 	.word	0x0800a294
 80088b0:	0800a2b8 	.word	0x0800a2b8

080088b4 <_localeconv_r>:
 80088b4:	4800      	ldr	r0, [pc, #0]	; (80088b8 <_localeconv_r+0x4>)
 80088b6:	4770      	bx	lr
 80088b8:	200001a0 	.word	0x200001a0

080088bc <malloc>:
 80088bc:	4b02      	ldr	r3, [pc, #8]	; (80088c8 <malloc+0xc>)
 80088be:	4601      	mov	r1, r0
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	f000 bbef 	b.w	80090a4 <_malloc_r>
 80088c6:	bf00      	nop
 80088c8:	2000004c 	.word	0x2000004c

080088cc <memcpy>:
 80088cc:	440a      	add	r2, r1
 80088ce:	4291      	cmp	r1, r2
 80088d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088d4:	d100      	bne.n	80088d8 <memcpy+0xc>
 80088d6:	4770      	bx	lr
 80088d8:	b510      	push	{r4, lr}
 80088da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e2:	4291      	cmp	r1, r2
 80088e4:	d1f9      	bne.n	80088da <memcpy+0xe>
 80088e6:	bd10      	pop	{r4, pc}

080088e8 <_Balloc>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	b976      	cbnz	r6, 8008910 <_Balloc+0x28>
 80088f2:	2010      	movs	r0, #16
 80088f4:	f7ff ffe2 	bl	80088bc <malloc>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6260      	str	r0, [r4, #36]	; 0x24
 80088fc:	b920      	cbnz	r0, 8008908 <_Balloc+0x20>
 80088fe:	4b18      	ldr	r3, [pc, #96]	; (8008960 <_Balloc+0x78>)
 8008900:	4818      	ldr	r0, [pc, #96]	; (8008964 <_Balloc+0x7c>)
 8008902:	2166      	movs	r1, #102	; 0x66
 8008904:	f000 fd94 	bl	8009430 <__assert_func>
 8008908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800890c:	6006      	str	r6, [r0, #0]
 800890e:	60c6      	str	r6, [r0, #12]
 8008910:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008912:	68f3      	ldr	r3, [r6, #12]
 8008914:	b183      	cbz	r3, 8008938 <_Balloc+0x50>
 8008916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800891e:	b9b8      	cbnz	r0, 8008950 <_Balloc+0x68>
 8008920:	2101      	movs	r1, #1
 8008922:	fa01 f605 	lsl.w	r6, r1, r5
 8008926:	1d72      	adds	r2, r6, #5
 8008928:	0092      	lsls	r2, r2, #2
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fb5a 	bl	8008fe4 <_calloc_r>
 8008930:	b160      	cbz	r0, 800894c <_Balloc+0x64>
 8008932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008936:	e00e      	b.n	8008956 <_Balloc+0x6e>
 8008938:	2221      	movs	r2, #33	; 0x21
 800893a:	2104      	movs	r1, #4
 800893c:	4620      	mov	r0, r4
 800893e:	f000 fb51 	bl	8008fe4 <_calloc_r>
 8008942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008944:	60f0      	str	r0, [r6, #12]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e4      	bne.n	8008916 <_Balloc+0x2e>
 800894c:	2000      	movs	r0, #0
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	6802      	ldr	r2, [r0, #0]
 8008952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008956:	2300      	movs	r3, #0
 8008958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800895c:	e7f7      	b.n	800894e <_Balloc+0x66>
 800895e:	bf00      	nop
 8008960:	0800a2c5 	.word	0x0800a2c5
 8008964:	0800a34c 	.word	0x0800a34c

08008968 <_Bfree>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800896c:	4605      	mov	r5, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b976      	cbnz	r6, 8008990 <_Bfree+0x28>
 8008972:	2010      	movs	r0, #16
 8008974:	f7ff ffa2 	bl	80088bc <malloc>
 8008978:	4602      	mov	r2, r0
 800897a:	6268      	str	r0, [r5, #36]	; 0x24
 800897c:	b920      	cbnz	r0, 8008988 <_Bfree+0x20>
 800897e:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <_Bfree+0x3c>)
 8008980:	4809      	ldr	r0, [pc, #36]	; (80089a8 <_Bfree+0x40>)
 8008982:	218a      	movs	r1, #138	; 0x8a
 8008984:	f000 fd54 	bl	8009430 <__assert_func>
 8008988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800898c:	6006      	str	r6, [r0, #0]
 800898e:	60c6      	str	r6, [r0, #12]
 8008990:	b13c      	cbz	r4, 80089a2 <_Bfree+0x3a>
 8008992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008994:	6862      	ldr	r2, [r4, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800899c:	6021      	str	r1, [r4, #0]
 800899e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	0800a2c5 	.word	0x0800a2c5
 80089a8:	0800a34c 	.word	0x0800a34c

080089ac <__multadd>:
 80089ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b0:	690e      	ldr	r6, [r1, #16]
 80089b2:	4607      	mov	r7, r0
 80089b4:	4698      	mov	r8, r3
 80089b6:	460c      	mov	r4, r1
 80089b8:	f101 0014 	add.w	r0, r1, #20
 80089bc:	2300      	movs	r3, #0
 80089be:	6805      	ldr	r5, [r0, #0]
 80089c0:	b2a9      	uxth	r1, r5
 80089c2:	fb02 8101 	mla	r1, r2, r1, r8
 80089c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80089ca:	0c2d      	lsrs	r5, r5, #16
 80089cc:	fb02 c505 	mla	r5, r2, r5, ip
 80089d0:	b289      	uxth	r1, r1
 80089d2:	3301      	adds	r3, #1
 80089d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80089d8:	429e      	cmp	r6, r3
 80089da:	f840 1b04 	str.w	r1, [r0], #4
 80089de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80089e2:	dcec      	bgt.n	80089be <__multadd+0x12>
 80089e4:	f1b8 0f00 	cmp.w	r8, #0
 80089e8:	d022      	beq.n	8008a30 <__multadd+0x84>
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	42b3      	cmp	r3, r6
 80089ee:	dc19      	bgt.n	8008a24 <__multadd+0x78>
 80089f0:	6861      	ldr	r1, [r4, #4]
 80089f2:	4638      	mov	r0, r7
 80089f4:	3101      	adds	r1, #1
 80089f6:	f7ff ff77 	bl	80088e8 <_Balloc>
 80089fa:	4605      	mov	r5, r0
 80089fc:	b928      	cbnz	r0, 8008a0a <__multadd+0x5e>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <__multadd+0x8c>)
 8008a02:	480e      	ldr	r0, [pc, #56]	; (8008a3c <__multadd+0x90>)
 8008a04:	21b5      	movs	r1, #181	; 0xb5
 8008a06:	f000 fd13 	bl	8009430 <__assert_func>
 8008a0a:	6922      	ldr	r2, [r4, #16]
 8008a0c:	3202      	adds	r2, #2
 8008a0e:	f104 010c 	add.w	r1, r4, #12
 8008a12:	0092      	lsls	r2, r2, #2
 8008a14:	300c      	adds	r0, #12
 8008a16:	f7ff ff59 	bl	80088cc <memcpy>
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f7ff ffa3 	bl	8008968 <_Bfree>
 8008a22:	462c      	mov	r4, r5
 8008a24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a28:	3601      	adds	r6, #1
 8008a2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a2e:	6126      	str	r6, [r4, #16]
 8008a30:	4620      	mov	r0, r4
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a36:	bf00      	nop
 8008a38:	0800a33b 	.word	0x0800a33b
 8008a3c:	0800a34c 	.word	0x0800a34c

08008a40 <__hi0bits>:
 8008a40:	0c03      	lsrs	r3, r0, #16
 8008a42:	041b      	lsls	r3, r3, #16
 8008a44:	b9d3      	cbnz	r3, 8008a7c <__hi0bits+0x3c>
 8008a46:	0400      	lsls	r0, r0, #16
 8008a48:	2310      	movs	r3, #16
 8008a4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a4e:	bf04      	itt	eq
 8008a50:	0200      	lsleq	r0, r0, #8
 8008a52:	3308      	addeq	r3, #8
 8008a54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a58:	bf04      	itt	eq
 8008a5a:	0100      	lsleq	r0, r0, #4
 8008a5c:	3304      	addeq	r3, #4
 8008a5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a62:	bf04      	itt	eq
 8008a64:	0080      	lsleq	r0, r0, #2
 8008a66:	3302      	addeq	r3, #2
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	db05      	blt.n	8008a78 <__hi0bits+0x38>
 8008a6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a70:	f103 0301 	add.w	r3, r3, #1
 8008a74:	bf08      	it	eq
 8008a76:	2320      	moveq	r3, #32
 8008a78:	4618      	mov	r0, r3
 8008a7a:	4770      	bx	lr
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e7e4      	b.n	8008a4a <__hi0bits+0xa>

08008a80 <__lo0bits>:
 8008a80:	6803      	ldr	r3, [r0, #0]
 8008a82:	f013 0207 	ands.w	r2, r3, #7
 8008a86:	4601      	mov	r1, r0
 8008a88:	d00b      	beq.n	8008aa2 <__lo0bits+0x22>
 8008a8a:	07da      	lsls	r2, r3, #31
 8008a8c:	d424      	bmi.n	8008ad8 <__lo0bits+0x58>
 8008a8e:	0798      	lsls	r0, r3, #30
 8008a90:	bf49      	itett	mi
 8008a92:	085b      	lsrmi	r3, r3, #1
 8008a94:	089b      	lsrpl	r3, r3, #2
 8008a96:	2001      	movmi	r0, #1
 8008a98:	600b      	strmi	r3, [r1, #0]
 8008a9a:	bf5c      	itt	pl
 8008a9c:	600b      	strpl	r3, [r1, #0]
 8008a9e:	2002      	movpl	r0, #2
 8008aa0:	4770      	bx	lr
 8008aa2:	b298      	uxth	r0, r3
 8008aa4:	b9b0      	cbnz	r0, 8008ad4 <__lo0bits+0x54>
 8008aa6:	0c1b      	lsrs	r3, r3, #16
 8008aa8:	2010      	movs	r0, #16
 8008aaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008aae:	bf04      	itt	eq
 8008ab0:	0a1b      	lsreq	r3, r3, #8
 8008ab2:	3008      	addeq	r0, #8
 8008ab4:	071a      	lsls	r2, r3, #28
 8008ab6:	bf04      	itt	eq
 8008ab8:	091b      	lsreq	r3, r3, #4
 8008aba:	3004      	addeq	r0, #4
 8008abc:	079a      	lsls	r2, r3, #30
 8008abe:	bf04      	itt	eq
 8008ac0:	089b      	lsreq	r3, r3, #2
 8008ac2:	3002      	addeq	r0, #2
 8008ac4:	07da      	lsls	r2, r3, #31
 8008ac6:	d403      	bmi.n	8008ad0 <__lo0bits+0x50>
 8008ac8:	085b      	lsrs	r3, r3, #1
 8008aca:	f100 0001 	add.w	r0, r0, #1
 8008ace:	d005      	beq.n	8008adc <__lo0bits+0x5c>
 8008ad0:	600b      	str	r3, [r1, #0]
 8008ad2:	4770      	bx	lr
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	e7e8      	b.n	8008aaa <__lo0bits+0x2a>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	4770      	bx	lr
 8008adc:	2020      	movs	r0, #32
 8008ade:	4770      	bx	lr

08008ae0 <__i2b>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	f7ff feff 	bl	80088e8 <_Balloc>
 8008aea:	4602      	mov	r2, r0
 8008aec:	b928      	cbnz	r0, 8008afa <__i2b+0x1a>
 8008aee:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <__i2b+0x24>)
 8008af0:	4805      	ldr	r0, [pc, #20]	; (8008b08 <__i2b+0x28>)
 8008af2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008af6:	f000 fc9b 	bl	8009430 <__assert_func>
 8008afa:	2301      	movs	r3, #1
 8008afc:	6144      	str	r4, [r0, #20]
 8008afe:	6103      	str	r3, [r0, #16]
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	bf00      	nop
 8008b04:	0800a33b 	.word	0x0800a33b
 8008b08:	0800a34c 	.word	0x0800a34c

08008b0c <__multiply>:
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	4614      	mov	r4, r2
 8008b12:	690a      	ldr	r2, [r1, #16]
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	bfb8      	it	lt
 8008b1a:	460b      	movlt	r3, r1
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	bfbc      	itt	lt
 8008b20:	4625      	movlt	r5, r4
 8008b22:	461c      	movlt	r4, r3
 8008b24:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b2c:	68ab      	ldr	r3, [r5, #8]
 8008b2e:	6869      	ldr	r1, [r5, #4]
 8008b30:	eb0a 0709 	add.w	r7, sl, r9
 8008b34:	42bb      	cmp	r3, r7
 8008b36:	b085      	sub	sp, #20
 8008b38:	bfb8      	it	lt
 8008b3a:	3101      	addlt	r1, #1
 8008b3c:	f7ff fed4 	bl	80088e8 <_Balloc>
 8008b40:	b930      	cbnz	r0, 8008b50 <__multiply+0x44>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b42      	ldr	r3, [pc, #264]	; (8008c50 <__multiply+0x144>)
 8008b46:	4843      	ldr	r0, [pc, #268]	; (8008c54 <__multiply+0x148>)
 8008b48:	f240 115d 	movw	r1, #349	; 0x15d
 8008b4c:	f000 fc70 	bl	8009430 <__assert_func>
 8008b50:	f100 0614 	add.w	r6, r0, #20
 8008b54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b58:	4633      	mov	r3, r6
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4543      	cmp	r3, r8
 8008b5e:	d31e      	bcc.n	8008b9e <__multiply+0x92>
 8008b60:	f105 0c14 	add.w	ip, r5, #20
 8008b64:	f104 0314 	add.w	r3, r4, #20
 8008b68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b6c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b70:	9202      	str	r2, [sp, #8]
 8008b72:	ebac 0205 	sub.w	r2, ip, r5
 8008b76:	3a15      	subs	r2, #21
 8008b78:	f022 0203 	bic.w	r2, r2, #3
 8008b7c:	3204      	adds	r2, #4
 8008b7e:	f105 0115 	add.w	r1, r5, #21
 8008b82:	458c      	cmp	ip, r1
 8008b84:	bf38      	it	cc
 8008b86:	2204      	movcc	r2, #4
 8008b88:	9201      	str	r2, [sp, #4]
 8008b8a:	9a02      	ldr	r2, [sp, #8]
 8008b8c:	9303      	str	r3, [sp, #12]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d808      	bhi.n	8008ba4 <__multiply+0x98>
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	dc55      	bgt.n	8008c42 <__multiply+0x136>
 8008b96:	6107      	str	r7, [r0, #16]
 8008b98:	b005      	add	sp, #20
 8008b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9e:	f843 2b04 	str.w	r2, [r3], #4
 8008ba2:	e7db      	b.n	8008b5c <__multiply+0x50>
 8008ba4:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ba8:	f1ba 0f00 	cmp.w	sl, #0
 8008bac:	d020      	beq.n	8008bf0 <__multiply+0xe4>
 8008bae:	f105 0e14 	add.w	lr, r5, #20
 8008bb2:	46b1      	mov	r9, r6
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008bba:	f8d9 b000 	ldr.w	fp, [r9]
 8008bbe:	b2a1      	uxth	r1, r4
 8008bc0:	fa1f fb8b 	uxth.w	fp, fp
 8008bc4:	fb0a b101 	mla	r1, sl, r1, fp
 8008bc8:	4411      	add	r1, r2
 8008bca:	f8d9 2000 	ldr.w	r2, [r9]
 8008bce:	0c24      	lsrs	r4, r4, #16
 8008bd0:	0c12      	lsrs	r2, r2, #16
 8008bd2:	fb0a 2404 	mla	r4, sl, r4, r2
 8008bd6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008bda:	b289      	uxth	r1, r1
 8008bdc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008be0:	45f4      	cmp	ip, lr
 8008be2:	f849 1b04 	str.w	r1, [r9], #4
 8008be6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008bea:	d8e4      	bhi.n	8008bb6 <__multiply+0xaa>
 8008bec:	9901      	ldr	r1, [sp, #4]
 8008bee:	5072      	str	r2, [r6, r1]
 8008bf0:	9a03      	ldr	r2, [sp, #12]
 8008bf2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	f1b9 0f00 	cmp.w	r9, #0
 8008bfc:	d01f      	beq.n	8008c3e <__multiply+0x132>
 8008bfe:	6834      	ldr	r4, [r6, #0]
 8008c00:	f105 0114 	add.w	r1, r5, #20
 8008c04:	46b6      	mov	lr, r6
 8008c06:	f04f 0a00 	mov.w	sl, #0
 8008c0a:	880a      	ldrh	r2, [r1, #0]
 8008c0c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c10:	fb09 b202 	mla	r2, r9, r2, fp
 8008c14:	4492      	add	sl, r2
 8008c16:	b2a4      	uxth	r4, r4
 8008c18:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c1c:	f84e 4b04 	str.w	r4, [lr], #4
 8008c20:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c24:	f8be 2000 	ldrh.w	r2, [lr]
 8008c28:	0c24      	lsrs	r4, r4, #16
 8008c2a:	fb09 2404 	mla	r4, r9, r4, r2
 8008c2e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c32:	458c      	cmp	ip, r1
 8008c34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c38:	d8e7      	bhi.n	8008c0a <__multiply+0xfe>
 8008c3a:	9a01      	ldr	r2, [sp, #4]
 8008c3c:	50b4      	str	r4, [r6, r2]
 8008c3e:	3604      	adds	r6, #4
 8008c40:	e7a3      	b.n	8008b8a <__multiply+0x7e>
 8008c42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1a5      	bne.n	8008b96 <__multiply+0x8a>
 8008c4a:	3f01      	subs	r7, #1
 8008c4c:	e7a1      	b.n	8008b92 <__multiply+0x86>
 8008c4e:	bf00      	nop
 8008c50:	0800a33b 	.word	0x0800a33b
 8008c54:	0800a34c 	.word	0x0800a34c

08008c58 <__pow5mult>:
 8008c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	4615      	mov	r5, r2
 8008c5e:	f012 0203 	ands.w	r2, r2, #3
 8008c62:	4606      	mov	r6, r0
 8008c64:	460f      	mov	r7, r1
 8008c66:	d007      	beq.n	8008c78 <__pow5mult+0x20>
 8008c68:	4c25      	ldr	r4, [pc, #148]	; (8008d00 <__pow5mult+0xa8>)
 8008c6a:	3a01      	subs	r2, #1
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c72:	f7ff fe9b 	bl	80089ac <__multadd>
 8008c76:	4607      	mov	r7, r0
 8008c78:	10ad      	asrs	r5, r5, #2
 8008c7a:	d03d      	beq.n	8008cf8 <__pow5mult+0xa0>
 8008c7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c7e:	b97c      	cbnz	r4, 8008ca0 <__pow5mult+0x48>
 8008c80:	2010      	movs	r0, #16
 8008c82:	f7ff fe1b 	bl	80088bc <malloc>
 8008c86:	4602      	mov	r2, r0
 8008c88:	6270      	str	r0, [r6, #36]	; 0x24
 8008c8a:	b928      	cbnz	r0, 8008c98 <__pow5mult+0x40>
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	; (8008d04 <__pow5mult+0xac>)
 8008c8e:	481e      	ldr	r0, [pc, #120]	; (8008d08 <__pow5mult+0xb0>)
 8008c90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c94:	f000 fbcc 	bl	8009430 <__assert_func>
 8008c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c9c:	6004      	str	r4, [r0, #0]
 8008c9e:	60c4      	str	r4, [r0, #12]
 8008ca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ca8:	b94c      	cbnz	r4, 8008cbe <__pow5mult+0x66>
 8008caa:	f240 2171 	movw	r1, #625	; 0x271
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7ff ff16 	bl	8008ae0 <__i2b>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cba:	4604      	mov	r4, r0
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	f04f 0900 	mov.w	r9, #0
 8008cc2:	07eb      	lsls	r3, r5, #31
 8008cc4:	d50a      	bpl.n	8008cdc <__pow5mult+0x84>
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff ff1e 	bl	8008b0c <__multiply>
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7ff fe47 	bl	8008968 <_Bfree>
 8008cda:	4647      	mov	r7, r8
 8008cdc:	106d      	asrs	r5, r5, #1
 8008cde:	d00b      	beq.n	8008cf8 <__pow5mult+0xa0>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	b938      	cbnz	r0, 8008cf4 <__pow5mult+0x9c>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ff0f 	bl	8008b0c <__multiply>
 8008cee:	6020      	str	r0, [r4, #0]
 8008cf0:	f8c0 9000 	str.w	r9, [r0]
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	e7e4      	b.n	8008cc2 <__pow5mult+0x6a>
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cfe:	bf00      	nop
 8008d00:	0800a4a0 	.word	0x0800a4a0
 8008d04:	0800a2c5 	.word	0x0800a2c5
 8008d08:	0800a34c 	.word	0x0800a34c

08008d0c <__lshift>:
 8008d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	460c      	mov	r4, r1
 8008d12:	6849      	ldr	r1, [r1, #4]
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	4607      	mov	r7, r0
 8008d1e:	4691      	mov	r9, r2
 8008d20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d24:	f108 0601 	add.w	r6, r8, #1
 8008d28:	42b3      	cmp	r3, r6
 8008d2a:	db0b      	blt.n	8008d44 <__lshift+0x38>
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f7ff fddb 	bl	80088e8 <_Balloc>
 8008d32:	4605      	mov	r5, r0
 8008d34:	b948      	cbnz	r0, 8008d4a <__lshift+0x3e>
 8008d36:	4602      	mov	r2, r0
 8008d38:	4b28      	ldr	r3, [pc, #160]	; (8008ddc <__lshift+0xd0>)
 8008d3a:	4829      	ldr	r0, [pc, #164]	; (8008de0 <__lshift+0xd4>)
 8008d3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d40:	f000 fb76 	bl	8009430 <__assert_func>
 8008d44:	3101      	adds	r1, #1
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	e7ee      	b.n	8008d28 <__lshift+0x1c>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f100 0114 	add.w	r1, r0, #20
 8008d50:	f100 0210 	add.w	r2, r0, #16
 8008d54:	4618      	mov	r0, r3
 8008d56:	4553      	cmp	r3, sl
 8008d58:	db33      	blt.n	8008dc2 <__lshift+0xb6>
 8008d5a:	6920      	ldr	r0, [r4, #16]
 8008d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d60:	f104 0314 	add.w	r3, r4, #20
 8008d64:	f019 091f 	ands.w	r9, r9, #31
 8008d68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d70:	d02b      	beq.n	8008dca <__lshift+0xbe>
 8008d72:	f1c9 0e20 	rsb	lr, r9, #32
 8008d76:	468a      	mov	sl, r1
 8008d78:	2200      	movs	r2, #0
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	fa00 f009 	lsl.w	r0, r0, r9
 8008d80:	4302      	orrs	r2, r0
 8008d82:	f84a 2b04 	str.w	r2, [sl], #4
 8008d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8a:	459c      	cmp	ip, r3
 8008d8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d90:	d8f3      	bhi.n	8008d7a <__lshift+0x6e>
 8008d92:	ebac 0304 	sub.w	r3, ip, r4
 8008d96:	3b15      	subs	r3, #21
 8008d98:	f023 0303 	bic.w	r3, r3, #3
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	f104 0015 	add.w	r0, r4, #21
 8008da2:	4584      	cmp	ip, r0
 8008da4:	bf38      	it	cc
 8008da6:	2304      	movcc	r3, #4
 8008da8:	50ca      	str	r2, [r1, r3]
 8008daa:	b10a      	cbz	r2, 8008db0 <__lshift+0xa4>
 8008dac:	f108 0602 	add.w	r6, r8, #2
 8008db0:	3e01      	subs	r6, #1
 8008db2:	4638      	mov	r0, r7
 8008db4:	612e      	str	r6, [r5, #16]
 8008db6:	4621      	mov	r1, r4
 8008db8:	f7ff fdd6 	bl	8008968 <_Bfree>
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	e7c5      	b.n	8008d56 <__lshift+0x4a>
 8008dca:	3904      	subs	r1, #4
 8008dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dd4:	459c      	cmp	ip, r3
 8008dd6:	d8f9      	bhi.n	8008dcc <__lshift+0xc0>
 8008dd8:	e7ea      	b.n	8008db0 <__lshift+0xa4>
 8008dda:	bf00      	nop
 8008ddc:	0800a33b 	.word	0x0800a33b
 8008de0:	0800a34c 	.word	0x0800a34c

08008de4 <__mcmp>:
 8008de4:	b530      	push	{r4, r5, lr}
 8008de6:	6902      	ldr	r2, [r0, #16]
 8008de8:	690c      	ldr	r4, [r1, #16]
 8008dea:	1b12      	subs	r2, r2, r4
 8008dec:	d10e      	bne.n	8008e0c <__mcmp+0x28>
 8008dee:	f100 0314 	add.w	r3, r0, #20
 8008df2:	3114      	adds	r1, #20
 8008df4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008df8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008dfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e04:	42a5      	cmp	r5, r4
 8008e06:	d003      	beq.n	8008e10 <__mcmp+0x2c>
 8008e08:	d305      	bcc.n	8008e16 <__mcmp+0x32>
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	bd30      	pop	{r4, r5, pc}
 8008e10:	4283      	cmp	r3, r0
 8008e12:	d3f3      	bcc.n	8008dfc <__mcmp+0x18>
 8008e14:	e7fa      	b.n	8008e0c <__mcmp+0x28>
 8008e16:	f04f 32ff 	mov.w	r2, #4294967295
 8008e1a:	e7f7      	b.n	8008e0c <__mcmp+0x28>

08008e1c <__mdiff>:
 8008e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e20:	460c      	mov	r4, r1
 8008e22:	4606      	mov	r6, r0
 8008e24:	4611      	mov	r1, r2
 8008e26:	4620      	mov	r0, r4
 8008e28:	4617      	mov	r7, r2
 8008e2a:	f7ff ffdb 	bl	8008de4 <__mcmp>
 8008e2e:	1e05      	subs	r5, r0, #0
 8008e30:	d110      	bne.n	8008e54 <__mdiff+0x38>
 8008e32:	4629      	mov	r1, r5
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff fd57 	bl	80088e8 <_Balloc>
 8008e3a:	b930      	cbnz	r0, 8008e4a <__mdiff+0x2e>
 8008e3c:	4b39      	ldr	r3, [pc, #228]	; (8008f24 <__mdiff+0x108>)
 8008e3e:	4602      	mov	r2, r0
 8008e40:	f240 2132 	movw	r1, #562	; 0x232
 8008e44:	4838      	ldr	r0, [pc, #224]	; (8008f28 <__mdiff+0x10c>)
 8008e46:	f000 faf3 	bl	8009430 <__assert_func>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	bfa4      	itt	ge
 8008e56:	463b      	movge	r3, r7
 8008e58:	4627      	movge	r7, r4
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	bfa6      	itte	ge
 8008e60:	461c      	movge	r4, r3
 8008e62:	2500      	movge	r5, #0
 8008e64:	2501      	movlt	r5, #1
 8008e66:	f7ff fd3f 	bl	80088e8 <_Balloc>
 8008e6a:	b920      	cbnz	r0, 8008e76 <__mdiff+0x5a>
 8008e6c:	4b2d      	ldr	r3, [pc, #180]	; (8008f24 <__mdiff+0x108>)
 8008e6e:	4602      	mov	r2, r0
 8008e70:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e74:	e7e6      	b.n	8008e44 <__mdiff+0x28>
 8008e76:	693e      	ldr	r6, [r7, #16]
 8008e78:	60c5      	str	r5, [r0, #12]
 8008e7a:	6925      	ldr	r5, [r4, #16]
 8008e7c:	f107 0114 	add.w	r1, r7, #20
 8008e80:	f104 0914 	add.w	r9, r4, #20
 8008e84:	f100 0e14 	add.w	lr, r0, #20
 8008e88:	f107 0210 	add.w	r2, r7, #16
 8008e8c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008e90:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008e94:	46f2      	mov	sl, lr
 8008e96:	2700      	movs	r7, #0
 8008e98:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ea0:	fa1f f883 	uxth.w	r8, r3
 8008ea4:	fa17 f78b 	uxtah	r7, r7, fp
 8008ea8:	0c1b      	lsrs	r3, r3, #16
 8008eaa:	eba7 0808 	sub.w	r8, r7, r8
 8008eae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008eb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008eb6:	fa1f f888 	uxth.w	r8, r8
 8008eba:	141f      	asrs	r7, r3, #16
 8008ebc:	454d      	cmp	r5, r9
 8008ebe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ec2:	f84a 3b04 	str.w	r3, [sl], #4
 8008ec6:	d8e7      	bhi.n	8008e98 <__mdiff+0x7c>
 8008ec8:	1b2b      	subs	r3, r5, r4
 8008eca:	3b15      	subs	r3, #21
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	3415      	adds	r4, #21
 8008ed4:	42a5      	cmp	r5, r4
 8008ed6:	bf38      	it	cc
 8008ed8:	2304      	movcc	r3, #4
 8008eda:	4419      	add	r1, r3
 8008edc:	4473      	add	r3, lr
 8008ede:	469e      	mov	lr, r3
 8008ee0:	460d      	mov	r5, r1
 8008ee2:	4565      	cmp	r5, ip
 8008ee4:	d30e      	bcc.n	8008f04 <__mdiff+0xe8>
 8008ee6:	f10c 0203 	add.w	r2, ip, #3
 8008eea:	1a52      	subs	r2, r2, r1
 8008eec:	f022 0203 	bic.w	r2, r2, #3
 8008ef0:	3903      	subs	r1, #3
 8008ef2:	458c      	cmp	ip, r1
 8008ef4:	bf38      	it	cc
 8008ef6:	2200      	movcc	r2, #0
 8008ef8:	441a      	add	r2, r3
 8008efa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008efe:	b17b      	cbz	r3, 8008f20 <__mdiff+0x104>
 8008f00:	6106      	str	r6, [r0, #16]
 8008f02:	e7a5      	b.n	8008e50 <__mdiff+0x34>
 8008f04:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f08:	fa17 f488 	uxtah	r4, r7, r8
 8008f0c:	1422      	asrs	r2, r4, #16
 8008f0e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f12:	b2a4      	uxth	r4, r4
 8008f14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f18:	f84e 4b04 	str.w	r4, [lr], #4
 8008f1c:	1417      	asrs	r7, r2, #16
 8008f1e:	e7e0      	b.n	8008ee2 <__mdiff+0xc6>
 8008f20:	3e01      	subs	r6, #1
 8008f22:	e7ea      	b.n	8008efa <__mdiff+0xde>
 8008f24:	0800a33b 	.word	0x0800a33b
 8008f28:	0800a34c 	.word	0x0800a34c

08008f2c <__d2b>:
 8008f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f30:	4689      	mov	r9, r1
 8008f32:	2101      	movs	r1, #1
 8008f34:	ec57 6b10 	vmov	r6, r7, d0
 8008f38:	4690      	mov	r8, r2
 8008f3a:	f7ff fcd5 	bl	80088e8 <_Balloc>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b930      	cbnz	r0, 8008f50 <__d2b+0x24>
 8008f42:	4602      	mov	r2, r0
 8008f44:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <__d2b+0xb0>)
 8008f46:	4826      	ldr	r0, [pc, #152]	; (8008fe0 <__d2b+0xb4>)
 8008f48:	f240 310a 	movw	r1, #778	; 0x30a
 8008f4c:	f000 fa70 	bl	8009430 <__assert_func>
 8008f50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f58:	bb35      	cbnz	r5, 8008fa8 <__d2b+0x7c>
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	d028      	beq.n	8008fb2 <__d2b+0x86>
 8008f60:	4668      	mov	r0, sp
 8008f62:	9600      	str	r6, [sp, #0]
 8008f64:	f7ff fd8c 	bl	8008a80 <__lo0bits>
 8008f68:	9900      	ldr	r1, [sp, #0]
 8008f6a:	b300      	cbz	r0, 8008fae <__d2b+0x82>
 8008f6c:	9a01      	ldr	r2, [sp, #4]
 8008f6e:	f1c0 0320 	rsb	r3, r0, #32
 8008f72:	fa02 f303 	lsl.w	r3, r2, r3
 8008f76:	430b      	orrs	r3, r1
 8008f78:	40c2      	lsrs	r2, r0
 8008f7a:	6163      	str	r3, [r4, #20]
 8008f7c:	9201      	str	r2, [sp, #4]
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	61a3      	str	r3, [r4, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bf14      	ite	ne
 8008f86:	2202      	movne	r2, #2
 8008f88:	2201      	moveq	r2, #1
 8008f8a:	6122      	str	r2, [r4, #16]
 8008f8c:	b1d5      	cbz	r5, 8008fc4 <__d2b+0x98>
 8008f8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f92:	4405      	add	r5, r0
 8008f94:	f8c9 5000 	str.w	r5, [r9]
 8008f98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f9c:	f8c8 0000 	str.w	r0, [r8]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	b003      	add	sp, #12
 8008fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fac:	e7d5      	b.n	8008f5a <__d2b+0x2e>
 8008fae:	6161      	str	r1, [r4, #20]
 8008fb0:	e7e5      	b.n	8008f7e <__d2b+0x52>
 8008fb2:	a801      	add	r0, sp, #4
 8008fb4:	f7ff fd64 	bl	8008a80 <__lo0bits>
 8008fb8:	9b01      	ldr	r3, [sp, #4]
 8008fba:	6163      	str	r3, [r4, #20]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	6122      	str	r2, [r4, #16]
 8008fc0:	3020      	adds	r0, #32
 8008fc2:	e7e3      	b.n	8008f8c <__d2b+0x60>
 8008fc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fcc:	f8c9 0000 	str.w	r0, [r9]
 8008fd0:	6918      	ldr	r0, [r3, #16]
 8008fd2:	f7ff fd35 	bl	8008a40 <__hi0bits>
 8008fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fda:	e7df      	b.n	8008f9c <__d2b+0x70>
 8008fdc:	0800a33b 	.word	0x0800a33b
 8008fe0:	0800a34c 	.word	0x0800a34c

08008fe4 <_calloc_r>:
 8008fe4:	b513      	push	{r0, r1, r4, lr}
 8008fe6:	434a      	muls	r2, r1
 8008fe8:	4611      	mov	r1, r2
 8008fea:	9201      	str	r2, [sp, #4]
 8008fec:	f000 f85a 	bl	80090a4 <_malloc_r>
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	b118      	cbz	r0, 8008ffc <_calloc_r+0x18>
 8008ff4:	9a01      	ldr	r2, [sp, #4]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	f7fe f9e0 	bl	80073bc <memset>
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	b002      	add	sp, #8
 8009000:	bd10      	pop	{r4, pc}
	...

08009004 <_free_r>:
 8009004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009006:	2900      	cmp	r1, #0
 8009008:	d048      	beq.n	800909c <_free_r+0x98>
 800900a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800900e:	9001      	str	r0, [sp, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f1a1 0404 	sub.w	r4, r1, #4
 8009016:	bfb8      	it	lt
 8009018:	18e4      	addlt	r4, r4, r3
 800901a:	f000 fa65 	bl	80094e8 <__malloc_lock>
 800901e:	4a20      	ldr	r2, [pc, #128]	; (80090a0 <_free_r+0x9c>)
 8009020:	9801      	ldr	r0, [sp, #4]
 8009022:	6813      	ldr	r3, [r2, #0]
 8009024:	4615      	mov	r5, r2
 8009026:	b933      	cbnz	r3, 8009036 <_free_r+0x32>
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	6014      	str	r4, [r2, #0]
 800902c:	b003      	add	sp, #12
 800902e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009032:	f000 ba5f 	b.w	80094f4 <__malloc_unlock>
 8009036:	42a3      	cmp	r3, r4
 8009038:	d90b      	bls.n	8009052 <_free_r+0x4e>
 800903a:	6821      	ldr	r1, [r4, #0]
 800903c:	1862      	adds	r2, r4, r1
 800903e:	4293      	cmp	r3, r2
 8009040:	bf04      	itt	eq
 8009042:	681a      	ldreq	r2, [r3, #0]
 8009044:	685b      	ldreq	r3, [r3, #4]
 8009046:	6063      	str	r3, [r4, #4]
 8009048:	bf04      	itt	eq
 800904a:	1852      	addeq	r2, r2, r1
 800904c:	6022      	streq	r2, [r4, #0]
 800904e:	602c      	str	r4, [r5, #0]
 8009050:	e7ec      	b.n	800902c <_free_r+0x28>
 8009052:	461a      	mov	r2, r3
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	b10b      	cbz	r3, 800905c <_free_r+0x58>
 8009058:	42a3      	cmp	r3, r4
 800905a:	d9fa      	bls.n	8009052 <_free_r+0x4e>
 800905c:	6811      	ldr	r1, [r2, #0]
 800905e:	1855      	adds	r5, r2, r1
 8009060:	42a5      	cmp	r5, r4
 8009062:	d10b      	bne.n	800907c <_free_r+0x78>
 8009064:	6824      	ldr	r4, [r4, #0]
 8009066:	4421      	add	r1, r4
 8009068:	1854      	adds	r4, r2, r1
 800906a:	42a3      	cmp	r3, r4
 800906c:	6011      	str	r1, [r2, #0]
 800906e:	d1dd      	bne.n	800902c <_free_r+0x28>
 8009070:	681c      	ldr	r4, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	6053      	str	r3, [r2, #4]
 8009076:	4421      	add	r1, r4
 8009078:	6011      	str	r1, [r2, #0]
 800907a:	e7d7      	b.n	800902c <_free_r+0x28>
 800907c:	d902      	bls.n	8009084 <_free_r+0x80>
 800907e:	230c      	movs	r3, #12
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	e7d3      	b.n	800902c <_free_r+0x28>
 8009084:	6825      	ldr	r5, [r4, #0]
 8009086:	1961      	adds	r1, r4, r5
 8009088:	428b      	cmp	r3, r1
 800908a:	bf04      	itt	eq
 800908c:	6819      	ldreq	r1, [r3, #0]
 800908e:	685b      	ldreq	r3, [r3, #4]
 8009090:	6063      	str	r3, [r4, #4]
 8009092:	bf04      	itt	eq
 8009094:	1949      	addeq	r1, r1, r5
 8009096:	6021      	streq	r1, [r4, #0]
 8009098:	6054      	str	r4, [r2, #4]
 800909a:	e7c7      	b.n	800902c <_free_r+0x28>
 800909c:	b003      	add	sp, #12
 800909e:	bd30      	pop	{r4, r5, pc}
 80090a0:	20000258 	.word	0x20000258

080090a4 <_malloc_r>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	1ccd      	adds	r5, r1, #3
 80090a8:	f025 0503 	bic.w	r5, r5, #3
 80090ac:	3508      	adds	r5, #8
 80090ae:	2d0c      	cmp	r5, #12
 80090b0:	bf38      	it	cc
 80090b2:	250c      	movcc	r5, #12
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	4606      	mov	r6, r0
 80090b8:	db01      	blt.n	80090be <_malloc_r+0x1a>
 80090ba:	42a9      	cmp	r1, r5
 80090bc:	d903      	bls.n	80090c6 <_malloc_r+0x22>
 80090be:	230c      	movs	r3, #12
 80090c0:	6033      	str	r3, [r6, #0]
 80090c2:	2000      	movs	r0, #0
 80090c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c6:	f000 fa0f 	bl	80094e8 <__malloc_lock>
 80090ca:	4921      	ldr	r1, [pc, #132]	; (8009150 <_malloc_r+0xac>)
 80090cc:	680a      	ldr	r2, [r1, #0]
 80090ce:	4614      	mov	r4, r2
 80090d0:	b99c      	cbnz	r4, 80090fa <_malloc_r+0x56>
 80090d2:	4f20      	ldr	r7, [pc, #128]	; (8009154 <_malloc_r+0xb0>)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	b923      	cbnz	r3, 80090e2 <_malloc_r+0x3e>
 80090d8:	4621      	mov	r1, r4
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f998 	bl	8009410 <_sbrk_r>
 80090e0:	6038      	str	r0, [r7, #0]
 80090e2:	4629      	mov	r1, r5
 80090e4:	4630      	mov	r0, r6
 80090e6:	f000 f993 	bl	8009410 <_sbrk_r>
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	d123      	bne.n	8009136 <_malloc_r+0x92>
 80090ee:	230c      	movs	r3, #12
 80090f0:	6033      	str	r3, [r6, #0]
 80090f2:	4630      	mov	r0, r6
 80090f4:	f000 f9fe 	bl	80094f4 <__malloc_unlock>
 80090f8:	e7e3      	b.n	80090c2 <_malloc_r+0x1e>
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	1b5b      	subs	r3, r3, r5
 80090fe:	d417      	bmi.n	8009130 <_malloc_r+0x8c>
 8009100:	2b0b      	cmp	r3, #11
 8009102:	d903      	bls.n	800910c <_malloc_r+0x68>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	441c      	add	r4, r3
 8009108:	6025      	str	r5, [r4, #0]
 800910a:	e004      	b.n	8009116 <_malloc_r+0x72>
 800910c:	6863      	ldr	r3, [r4, #4]
 800910e:	42a2      	cmp	r2, r4
 8009110:	bf0c      	ite	eq
 8009112:	600b      	streq	r3, [r1, #0]
 8009114:	6053      	strne	r3, [r2, #4]
 8009116:	4630      	mov	r0, r6
 8009118:	f000 f9ec 	bl	80094f4 <__malloc_unlock>
 800911c:	f104 000b 	add.w	r0, r4, #11
 8009120:	1d23      	adds	r3, r4, #4
 8009122:	f020 0007 	bic.w	r0, r0, #7
 8009126:	1ac2      	subs	r2, r0, r3
 8009128:	d0cc      	beq.n	80090c4 <_malloc_r+0x20>
 800912a:	1a1b      	subs	r3, r3, r0
 800912c:	50a3      	str	r3, [r4, r2]
 800912e:	e7c9      	b.n	80090c4 <_malloc_r+0x20>
 8009130:	4622      	mov	r2, r4
 8009132:	6864      	ldr	r4, [r4, #4]
 8009134:	e7cc      	b.n	80090d0 <_malloc_r+0x2c>
 8009136:	1cc4      	adds	r4, r0, #3
 8009138:	f024 0403 	bic.w	r4, r4, #3
 800913c:	42a0      	cmp	r0, r4
 800913e:	d0e3      	beq.n	8009108 <_malloc_r+0x64>
 8009140:	1a21      	subs	r1, r4, r0
 8009142:	4630      	mov	r0, r6
 8009144:	f000 f964 	bl	8009410 <_sbrk_r>
 8009148:	3001      	adds	r0, #1
 800914a:	d1dd      	bne.n	8009108 <_malloc_r+0x64>
 800914c:	e7cf      	b.n	80090ee <_malloc_r+0x4a>
 800914e:	bf00      	nop
 8009150:	20000258 	.word	0x20000258
 8009154:	2000025c 	.word	0x2000025c

08009158 <__ssputs_r>:
 8009158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	688e      	ldr	r6, [r1, #8]
 800915e:	429e      	cmp	r6, r3
 8009160:	4682      	mov	sl, r0
 8009162:	460c      	mov	r4, r1
 8009164:	4690      	mov	r8, r2
 8009166:	461f      	mov	r7, r3
 8009168:	d838      	bhi.n	80091dc <__ssputs_r+0x84>
 800916a:	898a      	ldrh	r2, [r1, #12]
 800916c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009170:	d032      	beq.n	80091d8 <__ssputs_r+0x80>
 8009172:	6825      	ldr	r5, [r4, #0]
 8009174:	6909      	ldr	r1, [r1, #16]
 8009176:	eba5 0901 	sub.w	r9, r5, r1
 800917a:	6965      	ldr	r5, [r4, #20]
 800917c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009180:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009184:	3301      	adds	r3, #1
 8009186:	444b      	add	r3, r9
 8009188:	106d      	asrs	r5, r5, #1
 800918a:	429d      	cmp	r5, r3
 800918c:	bf38      	it	cc
 800918e:	461d      	movcc	r5, r3
 8009190:	0553      	lsls	r3, r2, #21
 8009192:	d531      	bpl.n	80091f8 <__ssputs_r+0xa0>
 8009194:	4629      	mov	r1, r5
 8009196:	f7ff ff85 	bl	80090a4 <_malloc_r>
 800919a:	4606      	mov	r6, r0
 800919c:	b950      	cbnz	r0, 80091b4 <__ssputs_r+0x5c>
 800919e:	230c      	movs	r3, #12
 80091a0:	f8ca 3000 	str.w	r3, [sl]
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b4:	6921      	ldr	r1, [r4, #16]
 80091b6:	464a      	mov	r2, r9
 80091b8:	f7ff fb88 	bl	80088cc <memcpy>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	6126      	str	r6, [r4, #16]
 80091ca:	6165      	str	r5, [r4, #20]
 80091cc:	444e      	add	r6, r9
 80091ce:	eba5 0509 	sub.w	r5, r5, r9
 80091d2:	6026      	str	r6, [r4, #0]
 80091d4:	60a5      	str	r5, [r4, #8]
 80091d6:	463e      	mov	r6, r7
 80091d8:	42be      	cmp	r6, r7
 80091da:	d900      	bls.n	80091de <__ssputs_r+0x86>
 80091dc:	463e      	mov	r6, r7
 80091de:	4632      	mov	r2, r6
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	4641      	mov	r1, r8
 80091e4:	f000 f966 	bl	80094b4 <memmove>
 80091e8:	68a3      	ldr	r3, [r4, #8]
 80091ea:	6822      	ldr	r2, [r4, #0]
 80091ec:	1b9b      	subs	r3, r3, r6
 80091ee:	4432      	add	r2, r6
 80091f0:	60a3      	str	r3, [r4, #8]
 80091f2:	6022      	str	r2, [r4, #0]
 80091f4:	2000      	movs	r0, #0
 80091f6:	e7db      	b.n	80091b0 <__ssputs_r+0x58>
 80091f8:	462a      	mov	r2, r5
 80091fa:	f000 f981 	bl	8009500 <_realloc_r>
 80091fe:	4606      	mov	r6, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	d1e1      	bne.n	80091c8 <__ssputs_r+0x70>
 8009204:	6921      	ldr	r1, [r4, #16]
 8009206:	4650      	mov	r0, sl
 8009208:	f7ff fefc 	bl	8009004 <_free_r>
 800920c:	e7c7      	b.n	800919e <__ssputs_r+0x46>
	...

08009210 <_svfiprintf_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	4698      	mov	r8, r3
 8009216:	898b      	ldrh	r3, [r1, #12]
 8009218:	061b      	lsls	r3, r3, #24
 800921a:	b09d      	sub	sp, #116	; 0x74
 800921c:	4607      	mov	r7, r0
 800921e:	460d      	mov	r5, r1
 8009220:	4614      	mov	r4, r2
 8009222:	d50e      	bpl.n	8009242 <_svfiprintf_r+0x32>
 8009224:	690b      	ldr	r3, [r1, #16]
 8009226:	b963      	cbnz	r3, 8009242 <_svfiprintf_r+0x32>
 8009228:	2140      	movs	r1, #64	; 0x40
 800922a:	f7ff ff3b 	bl	80090a4 <_malloc_r>
 800922e:	6028      	str	r0, [r5, #0]
 8009230:	6128      	str	r0, [r5, #16]
 8009232:	b920      	cbnz	r0, 800923e <_svfiprintf_r+0x2e>
 8009234:	230c      	movs	r3, #12
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	f04f 30ff 	mov.w	r0, #4294967295
 800923c:	e0d1      	b.n	80093e2 <_svfiprintf_r+0x1d2>
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	616b      	str	r3, [r5, #20]
 8009242:	2300      	movs	r3, #0
 8009244:	9309      	str	r3, [sp, #36]	; 0x24
 8009246:	2320      	movs	r3, #32
 8009248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800924c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009250:	2330      	movs	r3, #48	; 0x30
 8009252:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093fc <_svfiprintf_r+0x1ec>
 8009256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800925a:	f04f 0901 	mov.w	r9, #1
 800925e:	4623      	mov	r3, r4
 8009260:	469a      	mov	sl, r3
 8009262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009266:	b10a      	cbz	r2, 800926c <_svfiprintf_r+0x5c>
 8009268:	2a25      	cmp	r2, #37	; 0x25
 800926a:	d1f9      	bne.n	8009260 <_svfiprintf_r+0x50>
 800926c:	ebba 0b04 	subs.w	fp, sl, r4
 8009270:	d00b      	beq.n	800928a <_svfiprintf_r+0x7a>
 8009272:	465b      	mov	r3, fp
 8009274:	4622      	mov	r2, r4
 8009276:	4629      	mov	r1, r5
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff ff6d 	bl	8009158 <__ssputs_r>
 800927e:	3001      	adds	r0, #1
 8009280:	f000 80aa 	beq.w	80093d8 <_svfiprintf_r+0x1c8>
 8009284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009286:	445a      	add	r2, fp
 8009288:	9209      	str	r2, [sp, #36]	; 0x24
 800928a:	f89a 3000 	ldrb.w	r3, [sl]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80a2 	beq.w	80093d8 <_svfiprintf_r+0x1c8>
 8009294:	2300      	movs	r3, #0
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800929e:	f10a 0a01 	add.w	sl, sl, #1
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	9307      	str	r3, [sp, #28]
 80092a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092aa:	931a      	str	r3, [sp, #104]	; 0x68
 80092ac:	4654      	mov	r4, sl
 80092ae:	2205      	movs	r2, #5
 80092b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b4:	4851      	ldr	r0, [pc, #324]	; (80093fc <_svfiprintf_r+0x1ec>)
 80092b6:	f7f6 ffcb 	bl	8000250 <memchr>
 80092ba:	9a04      	ldr	r2, [sp, #16]
 80092bc:	b9d8      	cbnz	r0, 80092f6 <_svfiprintf_r+0xe6>
 80092be:	06d0      	lsls	r0, r2, #27
 80092c0:	bf44      	itt	mi
 80092c2:	2320      	movmi	r3, #32
 80092c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c8:	0711      	lsls	r1, r2, #28
 80092ca:	bf44      	itt	mi
 80092cc:	232b      	movmi	r3, #43	; 0x2b
 80092ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d2:	f89a 3000 	ldrb.w	r3, [sl]
 80092d6:	2b2a      	cmp	r3, #42	; 0x2a
 80092d8:	d015      	beq.n	8009306 <_svfiprintf_r+0xf6>
 80092da:	9a07      	ldr	r2, [sp, #28]
 80092dc:	4654      	mov	r4, sl
 80092de:	2000      	movs	r0, #0
 80092e0:	f04f 0c0a 	mov.w	ip, #10
 80092e4:	4621      	mov	r1, r4
 80092e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ea:	3b30      	subs	r3, #48	; 0x30
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	d94e      	bls.n	800938e <_svfiprintf_r+0x17e>
 80092f0:	b1b0      	cbz	r0, 8009320 <_svfiprintf_r+0x110>
 80092f2:	9207      	str	r2, [sp, #28]
 80092f4:	e014      	b.n	8009320 <_svfiprintf_r+0x110>
 80092f6:	eba0 0308 	sub.w	r3, r0, r8
 80092fa:	fa09 f303 	lsl.w	r3, r9, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	46a2      	mov	sl, r4
 8009304:	e7d2      	b.n	80092ac <_svfiprintf_r+0x9c>
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	1d19      	adds	r1, r3, #4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	9103      	str	r1, [sp, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	bfbb      	ittet	lt
 8009312:	425b      	neglt	r3, r3
 8009314:	f042 0202 	orrlt.w	r2, r2, #2
 8009318:	9307      	strge	r3, [sp, #28]
 800931a:	9307      	strlt	r3, [sp, #28]
 800931c:	bfb8      	it	lt
 800931e:	9204      	strlt	r2, [sp, #16]
 8009320:	7823      	ldrb	r3, [r4, #0]
 8009322:	2b2e      	cmp	r3, #46	; 0x2e
 8009324:	d10c      	bne.n	8009340 <_svfiprintf_r+0x130>
 8009326:	7863      	ldrb	r3, [r4, #1]
 8009328:	2b2a      	cmp	r3, #42	; 0x2a
 800932a:	d135      	bne.n	8009398 <_svfiprintf_r+0x188>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	9203      	str	r2, [sp, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfb8      	it	lt
 8009338:	f04f 33ff 	movlt.w	r3, #4294967295
 800933c:	3402      	adds	r4, #2
 800933e:	9305      	str	r3, [sp, #20]
 8009340:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800940c <_svfiprintf_r+0x1fc>
 8009344:	7821      	ldrb	r1, [r4, #0]
 8009346:	2203      	movs	r2, #3
 8009348:	4650      	mov	r0, sl
 800934a:	f7f6 ff81 	bl	8000250 <memchr>
 800934e:	b140      	cbz	r0, 8009362 <_svfiprintf_r+0x152>
 8009350:	2340      	movs	r3, #64	; 0x40
 8009352:	eba0 000a 	sub.w	r0, r0, sl
 8009356:	fa03 f000 	lsl.w	r0, r3, r0
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	4303      	orrs	r3, r0
 800935e:	3401      	adds	r4, #1
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	4826      	ldr	r0, [pc, #152]	; (8009400 <_svfiprintf_r+0x1f0>)
 8009368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800936c:	2206      	movs	r2, #6
 800936e:	f7f6 ff6f 	bl	8000250 <memchr>
 8009372:	2800      	cmp	r0, #0
 8009374:	d038      	beq.n	80093e8 <_svfiprintf_r+0x1d8>
 8009376:	4b23      	ldr	r3, [pc, #140]	; (8009404 <_svfiprintf_r+0x1f4>)
 8009378:	bb1b      	cbnz	r3, 80093c2 <_svfiprintf_r+0x1b2>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	3307      	adds	r3, #7
 800937e:	f023 0307 	bic.w	r3, r3, #7
 8009382:	3308      	adds	r3, #8
 8009384:	9303      	str	r3, [sp, #12]
 8009386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009388:	4433      	add	r3, r6
 800938a:	9309      	str	r3, [sp, #36]	; 0x24
 800938c:	e767      	b.n	800925e <_svfiprintf_r+0x4e>
 800938e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009392:	460c      	mov	r4, r1
 8009394:	2001      	movs	r0, #1
 8009396:	e7a5      	b.n	80092e4 <_svfiprintf_r+0xd4>
 8009398:	2300      	movs	r3, #0
 800939a:	3401      	adds	r4, #1
 800939c:	9305      	str	r3, [sp, #20]
 800939e:	4619      	mov	r1, r3
 80093a0:	f04f 0c0a 	mov.w	ip, #10
 80093a4:	4620      	mov	r0, r4
 80093a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093aa:	3a30      	subs	r2, #48	; 0x30
 80093ac:	2a09      	cmp	r2, #9
 80093ae:	d903      	bls.n	80093b8 <_svfiprintf_r+0x1a8>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0c5      	beq.n	8009340 <_svfiprintf_r+0x130>
 80093b4:	9105      	str	r1, [sp, #20]
 80093b6:	e7c3      	b.n	8009340 <_svfiprintf_r+0x130>
 80093b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093bc:	4604      	mov	r4, r0
 80093be:	2301      	movs	r3, #1
 80093c0:	e7f0      	b.n	80093a4 <_svfiprintf_r+0x194>
 80093c2:	ab03      	add	r3, sp, #12
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	462a      	mov	r2, r5
 80093c8:	4b0f      	ldr	r3, [pc, #60]	; (8009408 <_svfiprintf_r+0x1f8>)
 80093ca:	a904      	add	r1, sp, #16
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7fe f88f 	bl	80074f0 <_printf_float>
 80093d2:	1c42      	adds	r2, r0, #1
 80093d4:	4606      	mov	r6, r0
 80093d6:	d1d6      	bne.n	8009386 <_svfiprintf_r+0x176>
 80093d8:	89ab      	ldrh	r3, [r5, #12]
 80093da:	065b      	lsls	r3, r3, #25
 80093dc:	f53f af2c 	bmi.w	8009238 <_svfiprintf_r+0x28>
 80093e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e2:	b01d      	add	sp, #116	; 0x74
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	ab03      	add	r3, sp, #12
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <_svfiprintf_r+0x1f8>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	4638      	mov	r0, r7
 80093f4:	f7fe fb08 	bl	8007a08 <_printf_i>
 80093f8:	e7eb      	b.n	80093d2 <_svfiprintf_r+0x1c2>
 80093fa:	bf00      	nop
 80093fc:	0800a4ac 	.word	0x0800a4ac
 8009400:	0800a4b6 	.word	0x0800a4b6
 8009404:	080074f1 	.word	0x080074f1
 8009408:	08009159 	.word	0x08009159
 800940c:	0800a4b2 	.word	0x0800a4b2

08009410 <_sbrk_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_sbrk_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f8 fde6 	bl	8001fec <_sbrk>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_sbrk_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_sbrk_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000614 	.word	0x20000614

08009430 <__assert_func>:
 8009430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009432:	4614      	mov	r4, r2
 8009434:	461a      	mov	r2, r3
 8009436:	4b09      	ldr	r3, [pc, #36]	; (800945c <__assert_func+0x2c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4605      	mov	r5, r0
 800943c:	68d8      	ldr	r0, [r3, #12]
 800943e:	b14c      	cbz	r4, 8009454 <__assert_func+0x24>
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <__assert_func+0x30>)
 8009442:	9100      	str	r1, [sp, #0]
 8009444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009448:	4906      	ldr	r1, [pc, #24]	; (8009464 <__assert_func+0x34>)
 800944a:	462b      	mov	r3, r5
 800944c:	f000 f80e 	bl	800946c <fiprintf>
 8009450:	f000 faa4 	bl	800999c <abort>
 8009454:	4b04      	ldr	r3, [pc, #16]	; (8009468 <__assert_func+0x38>)
 8009456:	461c      	mov	r4, r3
 8009458:	e7f3      	b.n	8009442 <__assert_func+0x12>
 800945a:	bf00      	nop
 800945c:	2000004c 	.word	0x2000004c
 8009460:	0800a4bd 	.word	0x0800a4bd
 8009464:	0800a4ca 	.word	0x0800a4ca
 8009468:	0800a4f8 	.word	0x0800a4f8

0800946c <fiprintf>:
 800946c:	b40e      	push	{r1, r2, r3}
 800946e:	b503      	push	{r0, r1, lr}
 8009470:	4601      	mov	r1, r0
 8009472:	ab03      	add	r3, sp, #12
 8009474:	4805      	ldr	r0, [pc, #20]	; (800948c <fiprintf+0x20>)
 8009476:	f853 2b04 	ldr.w	r2, [r3], #4
 800947a:	6800      	ldr	r0, [r0, #0]
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	f000 f88f 	bl	80095a0 <_vfiprintf_r>
 8009482:	b002      	add	sp, #8
 8009484:	f85d eb04 	ldr.w	lr, [sp], #4
 8009488:	b003      	add	sp, #12
 800948a:	4770      	bx	lr
 800948c:	2000004c 	.word	0x2000004c

08009490 <__ascii_mbtowc>:
 8009490:	b082      	sub	sp, #8
 8009492:	b901      	cbnz	r1, 8009496 <__ascii_mbtowc+0x6>
 8009494:	a901      	add	r1, sp, #4
 8009496:	b142      	cbz	r2, 80094aa <__ascii_mbtowc+0x1a>
 8009498:	b14b      	cbz	r3, 80094ae <__ascii_mbtowc+0x1e>
 800949a:	7813      	ldrb	r3, [r2, #0]
 800949c:	600b      	str	r3, [r1, #0]
 800949e:	7812      	ldrb	r2, [r2, #0]
 80094a0:	1e10      	subs	r0, r2, #0
 80094a2:	bf18      	it	ne
 80094a4:	2001      	movne	r0, #1
 80094a6:	b002      	add	sp, #8
 80094a8:	4770      	bx	lr
 80094aa:	4610      	mov	r0, r2
 80094ac:	e7fb      	b.n	80094a6 <__ascii_mbtowc+0x16>
 80094ae:	f06f 0001 	mvn.w	r0, #1
 80094b2:	e7f8      	b.n	80094a6 <__ascii_mbtowc+0x16>

080094b4 <memmove>:
 80094b4:	4288      	cmp	r0, r1
 80094b6:	b510      	push	{r4, lr}
 80094b8:	eb01 0402 	add.w	r4, r1, r2
 80094bc:	d902      	bls.n	80094c4 <memmove+0x10>
 80094be:	4284      	cmp	r4, r0
 80094c0:	4623      	mov	r3, r4
 80094c2:	d807      	bhi.n	80094d4 <memmove+0x20>
 80094c4:	1e43      	subs	r3, r0, #1
 80094c6:	42a1      	cmp	r1, r4
 80094c8:	d008      	beq.n	80094dc <memmove+0x28>
 80094ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d2:	e7f8      	b.n	80094c6 <memmove+0x12>
 80094d4:	4402      	add	r2, r0
 80094d6:	4601      	mov	r1, r0
 80094d8:	428a      	cmp	r2, r1
 80094da:	d100      	bne.n	80094de <memmove+0x2a>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094e6:	e7f7      	b.n	80094d8 <memmove+0x24>

080094e8 <__malloc_lock>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__malloc_lock+0x8>)
 80094ea:	f000 bc17 	b.w	8009d1c <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	2000061c 	.word	0x2000061c

080094f4 <__malloc_unlock>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__malloc_unlock+0x8>)
 80094f6:	f000 bc12 	b.w	8009d1e <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	2000061c 	.word	0x2000061c

08009500 <_realloc_r>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	4607      	mov	r7, r0
 8009504:	4614      	mov	r4, r2
 8009506:	460e      	mov	r6, r1
 8009508:	b921      	cbnz	r1, 8009514 <_realloc_r+0x14>
 800950a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800950e:	4611      	mov	r1, r2
 8009510:	f7ff bdc8 	b.w	80090a4 <_malloc_r>
 8009514:	b922      	cbnz	r2, 8009520 <_realloc_r+0x20>
 8009516:	f7ff fd75 	bl	8009004 <_free_r>
 800951a:	4625      	mov	r5, r4
 800951c:	4628      	mov	r0, r5
 800951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009520:	f000 fc62 	bl	8009de8 <_malloc_usable_size_r>
 8009524:	42a0      	cmp	r0, r4
 8009526:	d20f      	bcs.n	8009548 <_realloc_r+0x48>
 8009528:	4621      	mov	r1, r4
 800952a:	4638      	mov	r0, r7
 800952c:	f7ff fdba 	bl	80090a4 <_malloc_r>
 8009530:	4605      	mov	r5, r0
 8009532:	2800      	cmp	r0, #0
 8009534:	d0f2      	beq.n	800951c <_realloc_r+0x1c>
 8009536:	4631      	mov	r1, r6
 8009538:	4622      	mov	r2, r4
 800953a:	f7ff f9c7 	bl	80088cc <memcpy>
 800953e:	4631      	mov	r1, r6
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff fd5f 	bl	8009004 <_free_r>
 8009546:	e7e9      	b.n	800951c <_realloc_r+0x1c>
 8009548:	4635      	mov	r5, r6
 800954a:	e7e7      	b.n	800951c <_realloc_r+0x1c>

0800954c <__sfputc_r>:
 800954c:	6893      	ldr	r3, [r2, #8]
 800954e:	3b01      	subs	r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	b410      	push	{r4}
 8009554:	6093      	str	r3, [r2, #8]
 8009556:	da08      	bge.n	800956a <__sfputc_r+0x1e>
 8009558:	6994      	ldr	r4, [r2, #24]
 800955a:	42a3      	cmp	r3, r4
 800955c:	db01      	blt.n	8009562 <__sfputc_r+0x16>
 800955e:	290a      	cmp	r1, #10
 8009560:	d103      	bne.n	800956a <__sfputc_r+0x1e>
 8009562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009566:	f000 b94b 	b.w	8009800 <__swbuf_r>
 800956a:	6813      	ldr	r3, [r2, #0]
 800956c:	1c58      	adds	r0, r3, #1
 800956e:	6010      	str	r0, [r2, #0]
 8009570:	7019      	strb	r1, [r3, #0]
 8009572:	4608      	mov	r0, r1
 8009574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009578:	4770      	bx	lr

0800957a <__sfputs_r>:
 800957a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957c:	4606      	mov	r6, r0
 800957e:	460f      	mov	r7, r1
 8009580:	4614      	mov	r4, r2
 8009582:	18d5      	adds	r5, r2, r3
 8009584:	42ac      	cmp	r4, r5
 8009586:	d101      	bne.n	800958c <__sfputs_r+0x12>
 8009588:	2000      	movs	r0, #0
 800958a:	e007      	b.n	800959c <__sfputs_r+0x22>
 800958c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009590:	463a      	mov	r2, r7
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff ffda 	bl	800954c <__sfputc_r>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d1f3      	bne.n	8009584 <__sfputs_r+0xa>
 800959c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095a0 <_vfiprintf_r>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	460d      	mov	r5, r1
 80095a6:	b09d      	sub	sp, #116	; 0x74
 80095a8:	4614      	mov	r4, r2
 80095aa:	4698      	mov	r8, r3
 80095ac:	4606      	mov	r6, r0
 80095ae:	b118      	cbz	r0, 80095b8 <_vfiprintf_r+0x18>
 80095b0:	6983      	ldr	r3, [r0, #24]
 80095b2:	b90b      	cbnz	r3, 80095b8 <_vfiprintf_r+0x18>
 80095b4:	f000 fb14 	bl	8009be0 <__sinit>
 80095b8:	4b89      	ldr	r3, [pc, #548]	; (80097e0 <_vfiprintf_r+0x240>)
 80095ba:	429d      	cmp	r5, r3
 80095bc:	d11b      	bne.n	80095f6 <_vfiprintf_r+0x56>
 80095be:	6875      	ldr	r5, [r6, #4]
 80095c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095c2:	07d9      	lsls	r1, r3, #31
 80095c4:	d405      	bmi.n	80095d2 <_vfiprintf_r+0x32>
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	059a      	lsls	r2, r3, #22
 80095ca:	d402      	bmi.n	80095d2 <_vfiprintf_r+0x32>
 80095cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ce:	f000 fba5 	bl	8009d1c <__retarget_lock_acquire_recursive>
 80095d2:	89ab      	ldrh	r3, [r5, #12]
 80095d4:	071b      	lsls	r3, r3, #28
 80095d6:	d501      	bpl.n	80095dc <_vfiprintf_r+0x3c>
 80095d8:	692b      	ldr	r3, [r5, #16]
 80095da:	b9eb      	cbnz	r3, 8009618 <_vfiprintf_r+0x78>
 80095dc:	4629      	mov	r1, r5
 80095de:	4630      	mov	r0, r6
 80095e0:	f000 f96e 	bl	80098c0 <__swsetup_r>
 80095e4:	b1c0      	cbz	r0, 8009618 <_vfiprintf_r+0x78>
 80095e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e8:	07dc      	lsls	r4, r3, #31
 80095ea:	d50e      	bpl.n	800960a <_vfiprintf_r+0x6a>
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295
 80095f0:	b01d      	add	sp, #116	; 0x74
 80095f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f6:	4b7b      	ldr	r3, [pc, #492]	; (80097e4 <_vfiprintf_r+0x244>)
 80095f8:	429d      	cmp	r5, r3
 80095fa:	d101      	bne.n	8009600 <_vfiprintf_r+0x60>
 80095fc:	68b5      	ldr	r5, [r6, #8]
 80095fe:	e7df      	b.n	80095c0 <_vfiprintf_r+0x20>
 8009600:	4b79      	ldr	r3, [pc, #484]	; (80097e8 <_vfiprintf_r+0x248>)
 8009602:	429d      	cmp	r5, r3
 8009604:	bf08      	it	eq
 8009606:	68f5      	ldreq	r5, [r6, #12]
 8009608:	e7da      	b.n	80095c0 <_vfiprintf_r+0x20>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	0598      	lsls	r0, r3, #22
 800960e:	d4ed      	bmi.n	80095ec <_vfiprintf_r+0x4c>
 8009610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009612:	f000 fb84 	bl	8009d1e <__retarget_lock_release_recursive>
 8009616:	e7e9      	b.n	80095ec <_vfiprintf_r+0x4c>
 8009618:	2300      	movs	r3, #0
 800961a:	9309      	str	r3, [sp, #36]	; 0x24
 800961c:	2320      	movs	r3, #32
 800961e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009622:	f8cd 800c 	str.w	r8, [sp, #12]
 8009626:	2330      	movs	r3, #48	; 0x30
 8009628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097ec <_vfiprintf_r+0x24c>
 800962c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009630:	f04f 0901 	mov.w	r9, #1
 8009634:	4623      	mov	r3, r4
 8009636:	469a      	mov	sl, r3
 8009638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800963c:	b10a      	cbz	r2, 8009642 <_vfiprintf_r+0xa2>
 800963e:	2a25      	cmp	r2, #37	; 0x25
 8009640:	d1f9      	bne.n	8009636 <_vfiprintf_r+0x96>
 8009642:	ebba 0b04 	subs.w	fp, sl, r4
 8009646:	d00b      	beq.n	8009660 <_vfiprintf_r+0xc0>
 8009648:	465b      	mov	r3, fp
 800964a:	4622      	mov	r2, r4
 800964c:	4629      	mov	r1, r5
 800964e:	4630      	mov	r0, r6
 8009650:	f7ff ff93 	bl	800957a <__sfputs_r>
 8009654:	3001      	adds	r0, #1
 8009656:	f000 80aa 	beq.w	80097ae <_vfiprintf_r+0x20e>
 800965a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800965c:	445a      	add	r2, fp
 800965e:	9209      	str	r2, [sp, #36]	; 0x24
 8009660:	f89a 3000 	ldrb.w	r3, [sl]
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 80a2 	beq.w	80097ae <_vfiprintf_r+0x20e>
 800966a:	2300      	movs	r3, #0
 800966c:	f04f 32ff 	mov.w	r2, #4294967295
 8009670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009674:	f10a 0a01 	add.w	sl, sl, #1
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	9307      	str	r3, [sp, #28]
 800967c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009680:	931a      	str	r3, [sp, #104]	; 0x68
 8009682:	4654      	mov	r4, sl
 8009684:	2205      	movs	r2, #5
 8009686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800968a:	4858      	ldr	r0, [pc, #352]	; (80097ec <_vfiprintf_r+0x24c>)
 800968c:	f7f6 fde0 	bl	8000250 <memchr>
 8009690:	9a04      	ldr	r2, [sp, #16]
 8009692:	b9d8      	cbnz	r0, 80096cc <_vfiprintf_r+0x12c>
 8009694:	06d1      	lsls	r1, r2, #27
 8009696:	bf44      	itt	mi
 8009698:	2320      	movmi	r3, #32
 800969a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969e:	0713      	lsls	r3, r2, #28
 80096a0:	bf44      	itt	mi
 80096a2:	232b      	movmi	r3, #43	; 0x2b
 80096a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096a8:	f89a 3000 	ldrb.w	r3, [sl]
 80096ac:	2b2a      	cmp	r3, #42	; 0x2a
 80096ae:	d015      	beq.n	80096dc <_vfiprintf_r+0x13c>
 80096b0:	9a07      	ldr	r2, [sp, #28]
 80096b2:	4654      	mov	r4, sl
 80096b4:	2000      	movs	r0, #0
 80096b6:	f04f 0c0a 	mov.w	ip, #10
 80096ba:	4621      	mov	r1, r4
 80096bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096c0:	3b30      	subs	r3, #48	; 0x30
 80096c2:	2b09      	cmp	r3, #9
 80096c4:	d94e      	bls.n	8009764 <_vfiprintf_r+0x1c4>
 80096c6:	b1b0      	cbz	r0, 80096f6 <_vfiprintf_r+0x156>
 80096c8:	9207      	str	r2, [sp, #28]
 80096ca:	e014      	b.n	80096f6 <_vfiprintf_r+0x156>
 80096cc:	eba0 0308 	sub.w	r3, r0, r8
 80096d0:	fa09 f303 	lsl.w	r3, r9, r3
 80096d4:	4313      	orrs	r3, r2
 80096d6:	9304      	str	r3, [sp, #16]
 80096d8:	46a2      	mov	sl, r4
 80096da:	e7d2      	b.n	8009682 <_vfiprintf_r+0xe2>
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	1d19      	adds	r1, r3, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	9103      	str	r1, [sp, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfbb      	ittet	lt
 80096e8:	425b      	neglt	r3, r3
 80096ea:	f042 0202 	orrlt.w	r2, r2, #2
 80096ee:	9307      	strge	r3, [sp, #28]
 80096f0:	9307      	strlt	r3, [sp, #28]
 80096f2:	bfb8      	it	lt
 80096f4:	9204      	strlt	r2, [sp, #16]
 80096f6:	7823      	ldrb	r3, [r4, #0]
 80096f8:	2b2e      	cmp	r3, #46	; 0x2e
 80096fa:	d10c      	bne.n	8009716 <_vfiprintf_r+0x176>
 80096fc:	7863      	ldrb	r3, [r4, #1]
 80096fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009700:	d135      	bne.n	800976e <_vfiprintf_r+0x1ce>
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	1d1a      	adds	r2, r3, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	9203      	str	r2, [sp, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfb8      	it	lt
 800970e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009712:	3402      	adds	r4, #2
 8009714:	9305      	str	r3, [sp, #20]
 8009716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097fc <_vfiprintf_r+0x25c>
 800971a:	7821      	ldrb	r1, [r4, #0]
 800971c:	2203      	movs	r2, #3
 800971e:	4650      	mov	r0, sl
 8009720:	f7f6 fd96 	bl	8000250 <memchr>
 8009724:	b140      	cbz	r0, 8009738 <_vfiprintf_r+0x198>
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	eba0 000a 	sub.w	r0, r0, sl
 800972c:	fa03 f000 	lsl.w	r0, r3, r0
 8009730:	9b04      	ldr	r3, [sp, #16]
 8009732:	4303      	orrs	r3, r0
 8009734:	3401      	adds	r4, #1
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973c:	482c      	ldr	r0, [pc, #176]	; (80097f0 <_vfiprintf_r+0x250>)
 800973e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009742:	2206      	movs	r2, #6
 8009744:	f7f6 fd84 	bl	8000250 <memchr>
 8009748:	2800      	cmp	r0, #0
 800974a:	d03f      	beq.n	80097cc <_vfiprintf_r+0x22c>
 800974c:	4b29      	ldr	r3, [pc, #164]	; (80097f4 <_vfiprintf_r+0x254>)
 800974e:	bb1b      	cbnz	r3, 8009798 <_vfiprintf_r+0x1f8>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	3307      	adds	r3, #7
 8009754:	f023 0307 	bic.w	r3, r3, #7
 8009758:	3308      	adds	r3, #8
 800975a:	9303      	str	r3, [sp, #12]
 800975c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975e:	443b      	add	r3, r7
 8009760:	9309      	str	r3, [sp, #36]	; 0x24
 8009762:	e767      	b.n	8009634 <_vfiprintf_r+0x94>
 8009764:	fb0c 3202 	mla	r2, ip, r2, r3
 8009768:	460c      	mov	r4, r1
 800976a:	2001      	movs	r0, #1
 800976c:	e7a5      	b.n	80096ba <_vfiprintf_r+0x11a>
 800976e:	2300      	movs	r3, #0
 8009770:	3401      	adds	r4, #1
 8009772:	9305      	str	r3, [sp, #20]
 8009774:	4619      	mov	r1, r3
 8009776:	f04f 0c0a 	mov.w	ip, #10
 800977a:	4620      	mov	r0, r4
 800977c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009780:	3a30      	subs	r2, #48	; 0x30
 8009782:	2a09      	cmp	r2, #9
 8009784:	d903      	bls.n	800978e <_vfiprintf_r+0x1ee>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0c5      	beq.n	8009716 <_vfiprintf_r+0x176>
 800978a:	9105      	str	r1, [sp, #20]
 800978c:	e7c3      	b.n	8009716 <_vfiprintf_r+0x176>
 800978e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009792:	4604      	mov	r4, r0
 8009794:	2301      	movs	r3, #1
 8009796:	e7f0      	b.n	800977a <_vfiprintf_r+0x1da>
 8009798:	ab03      	add	r3, sp, #12
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	462a      	mov	r2, r5
 800979e:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <_vfiprintf_r+0x258>)
 80097a0:	a904      	add	r1, sp, #16
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7fd fea4 	bl	80074f0 <_printf_float>
 80097a8:	4607      	mov	r7, r0
 80097aa:	1c78      	adds	r0, r7, #1
 80097ac:	d1d6      	bne.n	800975c <_vfiprintf_r+0x1bc>
 80097ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097b0:	07d9      	lsls	r1, r3, #31
 80097b2:	d405      	bmi.n	80097c0 <_vfiprintf_r+0x220>
 80097b4:	89ab      	ldrh	r3, [r5, #12]
 80097b6:	059a      	lsls	r2, r3, #22
 80097b8:	d402      	bmi.n	80097c0 <_vfiprintf_r+0x220>
 80097ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097bc:	f000 faaf 	bl	8009d1e <__retarget_lock_release_recursive>
 80097c0:	89ab      	ldrh	r3, [r5, #12]
 80097c2:	065b      	lsls	r3, r3, #25
 80097c4:	f53f af12 	bmi.w	80095ec <_vfiprintf_r+0x4c>
 80097c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ca:	e711      	b.n	80095f0 <_vfiprintf_r+0x50>
 80097cc:	ab03      	add	r3, sp, #12
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	462a      	mov	r2, r5
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <_vfiprintf_r+0x258>)
 80097d4:	a904      	add	r1, sp, #16
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7fe f916 	bl	8007a08 <_printf_i>
 80097dc:	e7e4      	b.n	80097a8 <_vfiprintf_r+0x208>
 80097de:	bf00      	nop
 80097e0:	0800a624 	.word	0x0800a624
 80097e4:	0800a644 	.word	0x0800a644
 80097e8:	0800a604 	.word	0x0800a604
 80097ec:	0800a4ac 	.word	0x0800a4ac
 80097f0:	0800a4b6 	.word	0x0800a4b6
 80097f4:	080074f1 	.word	0x080074f1
 80097f8:	0800957b 	.word	0x0800957b
 80097fc:	0800a4b2 	.word	0x0800a4b2

08009800 <__swbuf_r>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	460e      	mov	r6, r1
 8009804:	4614      	mov	r4, r2
 8009806:	4605      	mov	r5, r0
 8009808:	b118      	cbz	r0, 8009812 <__swbuf_r+0x12>
 800980a:	6983      	ldr	r3, [r0, #24]
 800980c:	b90b      	cbnz	r3, 8009812 <__swbuf_r+0x12>
 800980e:	f000 f9e7 	bl	8009be0 <__sinit>
 8009812:	4b21      	ldr	r3, [pc, #132]	; (8009898 <__swbuf_r+0x98>)
 8009814:	429c      	cmp	r4, r3
 8009816:	d12b      	bne.n	8009870 <__swbuf_r+0x70>
 8009818:	686c      	ldr	r4, [r5, #4]
 800981a:	69a3      	ldr	r3, [r4, #24]
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	071a      	lsls	r2, r3, #28
 8009822:	d52f      	bpl.n	8009884 <__swbuf_r+0x84>
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	b36b      	cbz	r3, 8009884 <__swbuf_r+0x84>
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	6820      	ldr	r0, [r4, #0]
 800982c:	1ac0      	subs	r0, r0, r3
 800982e:	6963      	ldr	r3, [r4, #20]
 8009830:	b2f6      	uxtb	r6, r6
 8009832:	4283      	cmp	r3, r0
 8009834:	4637      	mov	r7, r6
 8009836:	dc04      	bgt.n	8009842 <__swbuf_r+0x42>
 8009838:	4621      	mov	r1, r4
 800983a:	4628      	mov	r0, r5
 800983c:	f000 f93c 	bl	8009ab8 <_fflush_r>
 8009840:	bb30      	cbnz	r0, 8009890 <__swbuf_r+0x90>
 8009842:	68a3      	ldr	r3, [r4, #8]
 8009844:	3b01      	subs	r3, #1
 8009846:	60a3      	str	r3, [r4, #8]
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	701e      	strb	r6, [r3, #0]
 8009850:	6963      	ldr	r3, [r4, #20]
 8009852:	3001      	adds	r0, #1
 8009854:	4283      	cmp	r3, r0
 8009856:	d004      	beq.n	8009862 <__swbuf_r+0x62>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	07db      	lsls	r3, r3, #31
 800985c:	d506      	bpl.n	800986c <__swbuf_r+0x6c>
 800985e:	2e0a      	cmp	r6, #10
 8009860:	d104      	bne.n	800986c <__swbuf_r+0x6c>
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f000 f927 	bl	8009ab8 <_fflush_r>
 800986a:	b988      	cbnz	r0, 8009890 <__swbuf_r+0x90>
 800986c:	4638      	mov	r0, r7
 800986e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <__swbuf_r+0x9c>)
 8009872:	429c      	cmp	r4, r3
 8009874:	d101      	bne.n	800987a <__swbuf_r+0x7a>
 8009876:	68ac      	ldr	r4, [r5, #8]
 8009878:	e7cf      	b.n	800981a <__swbuf_r+0x1a>
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <__swbuf_r+0xa0>)
 800987c:	429c      	cmp	r4, r3
 800987e:	bf08      	it	eq
 8009880:	68ec      	ldreq	r4, [r5, #12]
 8009882:	e7ca      	b.n	800981a <__swbuf_r+0x1a>
 8009884:	4621      	mov	r1, r4
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f81a 	bl	80098c0 <__swsetup_r>
 800988c:	2800      	cmp	r0, #0
 800988e:	d0cb      	beq.n	8009828 <__swbuf_r+0x28>
 8009890:	f04f 37ff 	mov.w	r7, #4294967295
 8009894:	e7ea      	b.n	800986c <__swbuf_r+0x6c>
 8009896:	bf00      	nop
 8009898:	0800a624 	.word	0x0800a624
 800989c:	0800a644 	.word	0x0800a644
 80098a0:	0800a604 	.word	0x0800a604

080098a4 <__ascii_wctomb>:
 80098a4:	b149      	cbz	r1, 80098ba <__ascii_wctomb+0x16>
 80098a6:	2aff      	cmp	r2, #255	; 0xff
 80098a8:	bf85      	ittet	hi
 80098aa:	238a      	movhi	r3, #138	; 0x8a
 80098ac:	6003      	strhi	r3, [r0, #0]
 80098ae:	700a      	strbls	r2, [r1, #0]
 80098b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80098b4:	bf98      	it	ls
 80098b6:	2001      	movls	r0, #1
 80098b8:	4770      	bx	lr
 80098ba:	4608      	mov	r0, r1
 80098bc:	4770      	bx	lr
	...

080098c0 <__swsetup_r>:
 80098c0:	4b32      	ldr	r3, [pc, #200]	; (800998c <__swsetup_r+0xcc>)
 80098c2:	b570      	push	{r4, r5, r6, lr}
 80098c4:	681d      	ldr	r5, [r3, #0]
 80098c6:	4606      	mov	r6, r0
 80098c8:	460c      	mov	r4, r1
 80098ca:	b125      	cbz	r5, 80098d6 <__swsetup_r+0x16>
 80098cc:	69ab      	ldr	r3, [r5, #24]
 80098ce:	b913      	cbnz	r3, 80098d6 <__swsetup_r+0x16>
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f985 	bl	8009be0 <__sinit>
 80098d6:	4b2e      	ldr	r3, [pc, #184]	; (8009990 <__swsetup_r+0xd0>)
 80098d8:	429c      	cmp	r4, r3
 80098da:	d10f      	bne.n	80098fc <__swsetup_r+0x3c>
 80098dc:	686c      	ldr	r4, [r5, #4]
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098e4:	0719      	lsls	r1, r3, #28
 80098e6:	d42c      	bmi.n	8009942 <__swsetup_r+0x82>
 80098e8:	06dd      	lsls	r5, r3, #27
 80098ea:	d411      	bmi.n	8009910 <__swsetup_r+0x50>
 80098ec:	2309      	movs	r3, #9
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	e03e      	b.n	800997a <__swsetup_r+0xba>
 80098fc:	4b25      	ldr	r3, [pc, #148]	; (8009994 <__swsetup_r+0xd4>)
 80098fe:	429c      	cmp	r4, r3
 8009900:	d101      	bne.n	8009906 <__swsetup_r+0x46>
 8009902:	68ac      	ldr	r4, [r5, #8]
 8009904:	e7eb      	b.n	80098de <__swsetup_r+0x1e>
 8009906:	4b24      	ldr	r3, [pc, #144]	; (8009998 <__swsetup_r+0xd8>)
 8009908:	429c      	cmp	r4, r3
 800990a:	bf08      	it	eq
 800990c:	68ec      	ldreq	r4, [r5, #12]
 800990e:	e7e6      	b.n	80098de <__swsetup_r+0x1e>
 8009910:	0758      	lsls	r0, r3, #29
 8009912:	d512      	bpl.n	800993a <__swsetup_r+0x7a>
 8009914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009916:	b141      	cbz	r1, 800992a <__swsetup_r+0x6a>
 8009918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800991c:	4299      	cmp	r1, r3
 800991e:	d002      	beq.n	8009926 <__swsetup_r+0x66>
 8009920:	4630      	mov	r0, r6
 8009922:	f7ff fb6f 	bl	8009004 <_free_r>
 8009926:	2300      	movs	r3, #0
 8009928:	6363      	str	r3, [r4, #52]	; 0x34
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	2300      	movs	r3, #0
 8009934:	6063      	str	r3, [r4, #4]
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f043 0308 	orr.w	r3, r3, #8
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	6923      	ldr	r3, [r4, #16]
 8009944:	b94b      	cbnz	r3, 800995a <__swsetup_r+0x9a>
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800994c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009950:	d003      	beq.n	800995a <__swsetup_r+0x9a>
 8009952:	4621      	mov	r1, r4
 8009954:	4630      	mov	r0, r6
 8009956:	f000 fa07 	bl	8009d68 <__smakebuf_r>
 800995a:	89a0      	ldrh	r0, [r4, #12]
 800995c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009960:	f010 0301 	ands.w	r3, r0, #1
 8009964:	d00a      	beq.n	800997c <__swsetup_r+0xbc>
 8009966:	2300      	movs	r3, #0
 8009968:	60a3      	str	r3, [r4, #8]
 800996a:	6963      	ldr	r3, [r4, #20]
 800996c:	425b      	negs	r3, r3
 800996e:	61a3      	str	r3, [r4, #24]
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	b943      	cbnz	r3, 8009986 <__swsetup_r+0xc6>
 8009974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009978:	d1ba      	bne.n	80098f0 <__swsetup_r+0x30>
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	0781      	lsls	r1, r0, #30
 800997e:	bf58      	it	pl
 8009980:	6963      	ldrpl	r3, [r4, #20]
 8009982:	60a3      	str	r3, [r4, #8]
 8009984:	e7f4      	b.n	8009970 <__swsetup_r+0xb0>
 8009986:	2000      	movs	r0, #0
 8009988:	e7f7      	b.n	800997a <__swsetup_r+0xba>
 800998a:	bf00      	nop
 800998c:	2000004c 	.word	0x2000004c
 8009990:	0800a624 	.word	0x0800a624
 8009994:	0800a644 	.word	0x0800a644
 8009998:	0800a604 	.word	0x0800a604

0800999c <abort>:
 800999c:	b508      	push	{r3, lr}
 800999e:	2006      	movs	r0, #6
 80099a0:	f000 fa52 	bl	8009e48 <raise>
 80099a4:	2001      	movs	r0, #1
 80099a6:	f7f8 faa9 	bl	8001efc <_exit>
	...

080099ac <__sflush_r>:
 80099ac:	898a      	ldrh	r2, [r1, #12]
 80099ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	4605      	mov	r5, r0
 80099b4:	0710      	lsls	r0, r2, #28
 80099b6:	460c      	mov	r4, r1
 80099b8:	d458      	bmi.n	8009a6c <__sflush_r+0xc0>
 80099ba:	684b      	ldr	r3, [r1, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dc05      	bgt.n	80099cc <__sflush_r+0x20>
 80099c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dc02      	bgt.n	80099cc <__sflush_r+0x20>
 80099c6:	2000      	movs	r0, #0
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d0f9      	beq.n	80099c6 <__sflush_r+0x1a>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099d8:	682f      	ldr	r7, [r5, #0]
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	d032      	beq.n	8009a44 <__sflush_r+0x98>
 80099de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	075a      	lsls	r2, r3, #29
 80099e4:	d505      	bpl.n	80099f2 <__sflush_r+0x46>
 80099e6:	6863      	ldr	r3, [r4, #4]
 80099e8:	1ac0      	subs	r0, r0, r3
 80099ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099ec:	b10b      	cbz	r3, 80099f2 <__sflush_r+0x46>
 80099ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f0:	1ac0      	subs	r0, r0, r3
 80099f2:	2300      	movs	r3, #0
 80099f4:	4602      	mov	r2, r0
 80099f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099f8:	6a21      	ldr	r1, [r4, #32]
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b0      	blx	r6
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	d106      	bne.n	8009a12 <__sflush_r+0x66>
 8009a04:	6829      	ldr	r1, [r5, #0]
 8009a06:	291d      	cmp	r1, #29
 8009a08:	d82c      	bhi.n	8009a64 <__sflush_r+0xb8>
 8009a0a:	4a2a      	ldr	r2, [pc, #168]	; (8009ab4 <__sflush_r+0x108>)
 8009a0c:	40ca      	lsrs	r2, r1
 8009a0e:	07d6      	lsls	r6, r2, #31
 8009a10:	d528      	bpl.n	8009a64 <__sflush_r+0xb8>
 8009a12:	2200      	movs	r2, #0
 8009a14:	6062      	str	r2, [r4, #4]
 8009a16:	04d9      	lsls	r1, r3, #19
 8009a18:	6922      	ldr	r2, [r4, #16]
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	d504      	bpl.n	8009a28 <__sflush_r+0x7c>
 8009a1e:	1c42      	adds	r2, r0, #1
 8009a20:	d101      	bne.n	8009a26 <__sflush_r+0x7a>
 8009a22:	682b      	ldr	r3, [r5, #0]
 8009a24:	b903      	cbnz	r3, 8009a28 <__sflush_r+0x7c>
 8009a26:	6560      	str	r0, [r4, #84]	; 0x54
 8009a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2a:	602f      	str	r7, [r5, #0]
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d0ca      	beq.n	80099c6 <__sflush_r+0x1a>
 8009a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a34:	4299      	cmp	r1, r3
 8009a36:	d002      	beq.n	8009a3e <__sflush_r+0x92>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7ff fae3 	bl	8009004 <_free_r>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	6360      	str	r0, [r4, #52]	; 0x34
 8009a42:	e7c1      	b.n	80099c8 <__sflush_r+0x1c>
 8009a44:	6a21      	ldr	r1, [r4, #32]
 8009a46:	2301      	movs	r3, #1
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b0      	blx	r6
 8009a4c:	1c41      	adds	r1, r0, #1
 8009a4e:	d1c7      	bne.n	80099e0 <__sflush_r+0x34>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0c4      	beq.n	80099e0 <__sflush_r+0x34>
 8009a56:	2b1d      	cmp	r3, #29
 8009a58:	d001      	beq.n	8009a5e <__sflush_r+0xb2>
 8009a5a:	2b16      	cmp	r3, #22
 8009a5c:	d101      	bne.n	8009a62 <__sflush_r+0xb6>
 8009a5e:	602f      	str	r7, [r5, #0]
 8009a60:	e7b1      	b.n	80099c6 <__sflush_r+0x1a>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	e7ad      	b.n	80099c8 <__sflush_r+0x1c>
 8009a6c:	690f      	ldr	r7, [r1, #16]
 8009a6e:	2f00      	cmp	r7, #0
 8009a70:	d0a9      	beq.n	80099c6 <__sflush_r+0x1a>
 8009a72:	0793      	lsls	r3, r2, #30
 8009a74:	680e      	ldr	r6, [r1, #0]
 8009a76:	bf08      	it	eq
 8009a78:	694b      	ldreq	r3, [r1, #20]
 8009a7a:	600f      	str	r7, [r1, #0]
 8009a7c:	bf18      	it	ne
 8009a7e:	2300      	movne	r3, #0
 8009a80:	eba6 0807 	sub.w	r8, r6, r7
 8009a84:	608b      	str	r3, [r1, #8]
 8009a86:	f1b8 0f00 	cmp.w	r8, #0
 8009a8a:	dd9c      	ble.n	80099c6 <__sflush_r+0x1a>
 8009a8c:	6a21      	ldr	r1, [r4, #32]
 8009a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a90:	4643      	mov	r3, r8
 8009a92:	463a      	mov	r2, r7
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b0      	blx	r6
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	dc06      	bgt.n	8009aaa <__sflush_r+0xfe>
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa2:	81a3      	strh	r3, [r4, #12]
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	e78e      	b.n	80099c8 <__sflush_r+0x1c>
 8009aaa:	4407      	add	r7, r0
 8009aac:	eba8 0800 	sub.w	r8, r8, r0
 8009ab0:	e7e9      	b.n	8009a86 <__sflush_r+0xda>
 8009ab2:	bf00      	nop
 8009ab4:	20400001 	.word	0x20400001

08009ab8 <_fflush_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	690b      	ldr	r3, [r1, #16]
 8009abc:	4605      	mov	r5, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	b913      	cbnz	r3, 8009ac8 <_fflush_r+0x10>
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	b118      	cbz	r0, 8009ad2 <_fflush_r+0x1a>
 8009aca:	6983      	ldr	r3, [r0, #24]
 8009acc:	b90b      	cbnz	r3, 8009ad2 <_fflush_r+0x1a>
 8009ace:	f000 f887 	bl	8009be0 <__sinit>
 8009ad2:	4b14      	ldr	r3, [pc, #80]	; (8009b24 <_fflush_r+0x6c>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d11b      	bne.n	8009b10 <_fflush_r+0x58>
 8009ad8:	686c      	ldr	r4, [r5, #4]
 8009ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0ef      	beq.n	8009ac2 <_fflush_r+0xa>
 8009ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ae4:	07d0      	lsls	r0, r2, #31
 8009ae6:	d404      	bmi.n	8009af2 <_fflush_r+0x3a>
 8009ae8:	0599      	lsls	r1, r3, #22
 8009aea:	d402      	bmi.n	8009af2 <_fflush_r+0x3a>
 8009aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aee:	f000 f915 	bl	8009d1c <__retarget_lock_acquire_recursive>
 8009af2:	4628      	mov	r0, r5
 8009af4:	4621      	mov	r1, r4
 8009af6:	f7ff ff59 	bl	80099ac <__sflush_r>
 8009afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009afc:	07da      	lsls	r2, r3, #31
 8009afe:	4605      	mov	r5, r0
 8009b00:	d4e0      	bmi.n	8009ac4 <_fflush_r+0xc>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	059b      	lsls	r3, r3, #22
 8009b06:	d4dd      	bmi.n	8009ac4 <_fflush_r+0xc>
 8009b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0a:	f000 f908 	bl	8009d1e <__retarget_lock_release_recursive>
 8009b0e:	e7d9      	b.n	8009ac4 <_fflush_r+0xc>
 8009b10:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <_fflush_r+0x70>)
 8009b12:	429c      	cmp	r4, r3
 8009b14:	d101      	bne.n	8009b1a <_fflush_r+0x62>
 8009b16:	68ac      	ldr	r4, [r5, #8]
 8009b18:	e7df      	b.n	8009ada <_fflush_r+0x22>
 8009b1a:	4b04      	ldr	r3, [pc, #16]	; (8009b2c <_fflush_r+0x74>)
 8009b1c:	429c      	cmp	r4, r3
 8009b1e:	bf08      	it	eq
 8009b20:	68ec      	ldreq	r4, [r5, #12]
 8009b22:	e7da      	b.n	8009ada <_fflush_r+0x22>
 8009b24:	0800a624 	.word	0x0800a624
 8009b28:	0800a644 	.word	0x0800a644
 8009b2c:	0800a604 	.word	0x0800a604

08009b30 <std>:
 8009b30:	2300      	movs	r3, #0
 8009b32:	b510      	push	{r4, lr}
 8009b34:	4604      	mov	r4, r0
 8009b36:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b3e:	6083      	str	r3, [r0, #8]
 8009b40:	8181      	strh	r1, [r0, #12]
 8009b42:	6643      	str	r3, [r0, #100]	; 0x64
 8009b44:	81c2      	strh	r2, [r0, #14]
 8009b46:	6183      	str	r3, [r0, #24]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	305c      	adds	r0, #92	; 0x5c
 8009b4e:	f7fd fc35 	bl	80073bc <memset>
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <std+0x38>)
 8009b54:	6263      	str	r3, [r4, #36]	; 0x24
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <std+0x3c>)
 8009b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <std+0x40>)
 8009b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <std+0x44>)
 8009b60:	6224      	str	r4, [r4, #32]
 8009b62:	6323      	str	r3, [r4, #48]	; 0x30
 8009b64:	bd10      	pop	{r4, pc}
 8009b66:	bf00      	nop
 8009b68:	08009e81 	.word	0x08009e81
 8009b6c:	08009ea3 	.word	0x08009ea3
 8009b70:	08009edb 	.word	0x08009edb
 8009b74:	08009eff 	.word	0x08009eff

08009b78 <_cleanup_r>:
 8009b78:	4901      	ldr	r1, [pc, #4]	; (8009b80 <_cleanup_r+0x8>)
 8009b7a:	f000 b8af 	b.w	8009cdc <_fwalk_reent>
 8009b7e:	bf00      	nop
 8009b80:	08009ab9 	.word	0x08009ab9

08009b84 <__sfmoreglue>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	1e4a      	subs	r2, r1, #1
 8009b88:	2568      	movs	r5, #104	; 0x68
 8009b8a:	4355      	muls	r5, r2
 8009b8c:	460e      	mov	r6, r1
 8009b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b92:	f7ff fa87 	bl	80090a4 <_malloc_r>
 8009b96:	4604      	mov	r4, r0
 8009b98:	b140      	cbz	r0, 8009bac <__sfmoreglue+0x28>
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba0:	300c      	adds	r0, #12
 8009ba2:	60a0      	str	r0, [r4, #8]
 8009ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ba8:	f7fd fc08 	bl	80073bc <memset>
 8009bac:	4620      	mov	r0, r4
 8009bae:	bd70      	pop	{r4, r5, r6, pc}

08009bb0 <__sfp_lock_acquire>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__sfp_lock_acquire+0x8>)
 8009bb2:	f000 b8b3 	b.w	8009d1c <__retarget_lock_acquire_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20000620 	.word	0x20000620

08009bbc <__sfp_lock_release>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__sfp_lock_release+0x8>)
 8009bbe:	f000 b8ae 	b.w	8009d1e <__retarget_lock_release_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	20000620 	.word	0x20000620

08009bc8 <__sinit_lock_acquire>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__sinit_lock_acquire+0x8>)
 8009bca:	f000 b8a7 	b.w	8009d1c <__retarget_lock_acquire_recursive>
 8009bce:	bf00      	nop
 8009bd0:	2000061b 	.word	0x2000061b

08009bd4 <__sinit_lock_release>:
 8009bd4:	4801      	ldr	r0, [pc, #4]	; (8009bdc <__sinit_lock_release+0x8>)
 8009bd6:	f000 b8a2 	b.w	8009d1e <__retarget_lock_release_recursive>
 8009bda:	bf00      	nop
 8009bdc:	2000061b 	.word	0x2000061b

08009be0 <__sinit>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	4604      	mov	r4, r0
 8009be4:	f7ff fff0 	bl	8009bc8 <__sinit_lock_acquire>
 8009be8:	69a3      	ldr	r3, [r4, #24]
 8009bea:	b11b      	cbz	r3, 8009bf4 <__sinit+0x14>
 8009bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf0:	f7ff bff0 	b.w	8009bd4 <__sinit_lock_release>
 8009bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8009bfa:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <__sinit+0x68>)
 8009bfc:	4a13      	ldr	r2, [pc, #76]	; (8009c4c <__sinit+0x6c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c02:	42a3      	cmp	r3, r4
 8009c04:	bf04      	itt	eq
 8009c06:	2301      	moveq	r3, #1
 8009c08:	61a3      	streq	r3, [r4, #24]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 f820 	bl	8009c50 <__sfp>
 8009c10:	6060      	str	r0, [r4, #4]
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 f81c 	bl	8009c50 <__sfp>
 8009c18:	60a0      	str	r0, [r4, #8]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f000 f818 	bl	8009c50 <__sfp>
 8009c20:	2200      	movs	r2, #0
 8009c22:	60e0      	str	r0, [r4, #12]
 8009c24:	2104      	movs	r1, #4
 8009c26:	6860      	ldr	r0, [r4, #4]
 8009c28:	f7ff ff82 	bl	8009b30 <std>
 8009c2c:	68a0      	ldr	r0, [r4, #8]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	2109      	movs	r1, #9
 8009c32:	f7ff ff7d 	bl	8009b30 <std>
 8009c36:	68e0      	ldr	r0, [r4, #12]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	2112      	movs	r1, #18
 8009c3c:	f7ff ff78 	bl	8009b30 <std>
 8009c40:	2301      	movs	r3, #1
 8009c42:	61a3      	str	r3, [r4, #24]
 8009c44:	e7d2      	b.n	8009bec <__sinit+0xc>
 8009c46:	bf00      	nop
 8009c48:	0800a280 	.word	0x0800a280
 8009c4c:	08009b79 	.word	0x08009b79

08009c50 <__sfp>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	4607      	mov	r7, r0
 8009c54:	f7ff ffac 	bl	8009bb0 <__sfp_lock_acquire>
 8009c58:	4b1e      	ldr	r3, [pc, #120]	; (8009cd4 <__sfp+0x84>)
 8009c5a:	681e      	ldr	r6, [r3, #0]
 8009c5c:	69b3      	ldr	r3, [r6, #24]
 8009c5e:	b913      	cbnz	r3, 8009c66 <__sfp+0x16>
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff ffbd 	bl	8009be0 <__sinit>
 8009c66:	3648      	adds	r6, #72	; 0x48
 8009c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	d503      	bpl.n	8009c78 <__sfp+0x28>
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	b30b      	cbz	r3, 8009cb8 <__sfp+0x68>
 8009c74:	6836      	ldr	r6, [r6, #0]
 8009c76:	e7f7      	b.n	8009c68 <__sfp+0x18>
 8009c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c7c:	b9d5      	cbnz	r5, 8009cb4 <__sfp+0x64>
 8009c7e:	4b16      	ldr	r3, [pc, #88]	; (8009cd8 <__sfp+0x88>)
 8009c80:	60e3      	str	r3, [r4, #12]
 8009c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c86:	6665      	str	r5, [r4, #100]	; 0x64
 8009c88:	f000 f847 	bl	8009d1a <__retarget_lock_init_recursive>
 8009c8c:	f7ff ff96 	bl	8009bbc <__sfp_lock_release>
 8009c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c98:	6025      	str	r5, [r4, #0]
 8009c9a:	61a5      	str	r5, [r4, #24]
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ca4:	f7fd fb8a 	bl	80073bc <memset>
 8009ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb4:	3468      	adds	r4, #104	; 0x68
 8009cb6:	e7d9      	b.n	8009c6c <__sfp+0x1c>
 8009cb8:	2104      	movs	r1, #4
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f7ff ff62 	bl	8009b84 <__sfmoreglue>
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	6030      	str	r0, [r6, #0]
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d1d5      	bne.n	8009c74 <__sfp+0x24>
 8009cc8:	f7ff ff78 	bl	8009bbc <__sfp_lock_release>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	e7ee      	b.n	8009cb0 <__sfp+0x60>
 8009cd2:	bf00      	nop
 8009cd4:	0800a280 	.word	0x0800a280
 8009cd8:	ffff0001 	.word	0xffff0001

08009cdc <_fwalk_reent>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	4688      	mov	r8, r1
 8009ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ce8:	2700      	movs	r7, #0
 8009cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cee:	f1b9 0901 	subs.w	r9, r9, #1
 8009cf2:	d505      	bpl.n	8009d00 <_fwalk_reent+0x24>
 8009cf4:	6824      	ldr	r4, [r4, #0]
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	d1f7      	bne.n	8009cea <_fwalk_reent+0xe>
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d00:	89ab      	ldrh	r3, [r5, #12]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d907      	bls.n	8009d16 <_fwalk_reent+0x3a>
 8009d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	d003      	beq.n	8009d16 <_fwalk_reent+0x3a>
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4630      	mov	r0, r6
 8009d12:	47c0      	blx	r8
 8009d14:	4307      	orrs	r7, r0
 8009d16:	3568      	adds	r5, #104	; 0x68
 8009d18:	e7e9      	b.n	8009cee <_fwalk_reent+0x12>

08009d1a <__retarget_lock_init_recursive>:
 8009d1a:	4770      	bx	lr

08009d1c <__retarget_lock_acquire_recursive>:
 8009d1c:	4770      	bx	lr

08009d1e <__retarget_lock_release_recursive>:
 8009d1e:	4770      	bx	lr

08009d20 <__swhatbuf_r>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	460e      	mov	r6, r1
 8009d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	b096      	sub	sp, #88	; 0x58
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	461d      	mov	r5, r3
 8009d30:	da07      	bge.n	8009d42 <__swhatbuf_r+0x22>
 8009d32:	2300      	movs	r3, #0
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	89b3      	ldrh	r3, [r6, #12]
 8009d38:	061a      	lsls	r2, r3, #24
 8009d3a:	d410      	bmi.n	8009d5e <__swhatbuf_r+0x3e>
 8009d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d40:	e00e      	b.n	8009d60 <__swhatbuf_r+0x40>
 8009d42:	466a      	mov	r2, sp
 8009d44:	f000 f902 	bl	8009f4c <_fstat_r>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	dbf2      	blt.n	8009d32 <__swhatbuf_r+0x12>
 8009d4c:	9a01      	ldr	r2, [sp, #4]
 8009d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d56:	425a      	negs	r2, r3
 8009d58:	415a      	adcs	r2, r3
 8009d5a:	602a      	str	r2, [r5, #0]
 8009d5c:	e7ee      	b.n	8009d3c <__swhatbuf_r+0x1c>
 8009d5e:	2340      	movs	r3, #64	; 0x40
 8009d60:	2000      	movs	r0, #0
 8009d62:	6023      	str	r3, [r4, #0]
 8009d64:	b016      	add	sp, #88	; 0x58
 8009d66:	bd70      	pop	{r4, r5, r6, pc}

08009d68 <__smakebuf_r>:
 8009d68:	898b      	ldrh	r3, [r1, #12]
 8009d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d6c:	079d      	lsls	r5, r3, #30
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	d507      	bpl.n	8009d84 <__smakebuf_r+0x1c>
 8009d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	6123      	str	r3, [r4, #16]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	6163      	str	r3, [r4, #20]
 8009d80:	b002      	add	sp, #8
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	ab01      	add	r3, sp, #4
 8009d86:	466a      	mov	r2, sp
 8009d88:	f7ff ffca 	bl	8009d20 <__swhatbuf_r>
 8009d8c:	9900      	ldr	r1, [sp, #0]
 8009d8e:	4605      	mov	r5, r0
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7ff f987 	bl	80090a4 <_malloc_r>
 8009d96:	b948      	cbnz	r0, 8009dac <__smakebuf_r+0x44>
 8009d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9c:	059a      	lsls	r2, r3, #22
 8009d9e:	d4ef      	bmi.n	8009d80 <__smakebuf_r+0x18>
 8009da0:	f023 0303 	bic.w	r3, r3, #3
 8009da4:	f043 0302 	orr.w	r3, r3, #2
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	e7e3      	b.n	8009d74 <__smakebuf_r+0xc>
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <__smakebuf_r+0x7c>)
 8009dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	6020      	str	r0, [r4, #0]
 8009db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db8:	81a3      	strh	r3, [r4, #12]
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	6163      	str	r3, [r4, #20]
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	6120      	str	r0, [r4, #16]
 8009dc2:	b15b      	cbz	r3, 8009ddc <__smakebuf_r+0x74>
 8009dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 f8d1 	bl	8009f70 <_isatty_r>
 8009dce:	b128      	cbz	r0, 8009ddc <__smakebuf_r+0x74>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	89a0      	ldrh	r0, [r4, #12]
 8009dde:	4305      	orrs	r5, r0
 8009de0:	81a5      	strh	r5, [r4, #12]
 8009de2:	e7cd      	b.n	8009d80 <__smakebuf_r+0x18>
 8009de4:	08009b79 	.word	0x08009b79

08009de8 <_malloc_usable_size_r>:
 8009de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dec:	1f18      	subs	r0, r3, #4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	bfbc      	itt	lt
 8009df2:	580b      	ldrlt	r3, [r1, r0]
 8009df4:	18c0      	addlt	r0, r0, r3
 8009df6:	4770      	bx	lr

08009df8 <_raise_r>:
 8009df8:	291f      	cmp	r1, #31
 8009dfa:	b538      	push	{r3, r4, r5, lr}
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	460d      	mov	r5, r1
 8009e00:	d904      	bls.n	8009e0c <_raise_r+0x14>
 8009e02:	2316      	movs	r3, #22
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e0e:	b112      	cbz	r2, 8009e16 <_raise_r+0x1e>
 8009e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e14:	b94b      	cbnz	r3, 8009e2a <_raise_r+0x32>
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 f830 	bl	8009e7c <_getpid_r>
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	4601      	mov	r1, r0
 8009e20:	4620      	mov	r0, r4
 8009e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e26:	f000 b817 	b.w	8009e58 <_kill_r>
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d00a      	beq.n	8009e44 <_raise_r+0x4c>
 8009e2e:	1c59      	adds	r1, r3, #1
 8009e30:	d103      	bne.n	8009e3a <_raise_r+0x42>
 8009e32:	2316      	movs	r3, #22
 8009e34:	6003      	str	r3, [r0, #0]
 8009e36:	2001      	movs	r0, #1
 8009e38:	e7e7      	b.n	8009e0a <_raise_r+0x12>
 8009e3a:	2400      	movs	r4, #0
 8009e3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e40:	4628      	mov	r0, r5
 8009e42:	4798      	blx	r3
 8009e44:	2000      	movs	r0, #0
 8009e46:	e7e0      	b.n	8009e0a <_raise_r+0x12>

08009e48 <raise>:
 8009e48:	4b02      	ldr	r3, [pc, #8]	; (8009e54 <raise+0xc>)
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	f7ff bfd3 	b.w	8009df8 <_raise_r>
 8009e52:	bf00      	nop
 8009e54:	2000004c 	.word	0x2000004c

08009e58 <_kill_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	; (8009e78 <_kill_r+0x20>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	4611      	mov	r1, r2
 8009e64:	602b      	str	r3, [r5, #0]
 8009e66:	f7f8 f839 	bl	8001edc <_kill>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d102      	bne.n	8009e74 <_kill_r+0x1c>
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	b103      	cbz	r3, 8009e74 <_kill_r+0x1c>
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	bd38      	pop	{r3, r4, r5, pc}
 8009e76:	bf00      	nop
 8009e78:	20000614 	.word	0x20000614

08009e7c <_getpid_r>:
 8009e7c:	f7f8 b826 	b.w	8001ecc <_getpid>

08009e80 <__sread>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	460c      	mov	r4, r1
 8009e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e88:	f000 f894 	bl	8009fb4 <_read_r>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	bfab      	itete	ge
 8009e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e92:	89a3      	ldrhlt	r3, [r4, #12]
 8009e94:	181b      	addge	r3, r3, r0
 8009e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e9a:	bfac      	ite	ge
 8009e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e9e:	81a3      	strhlt	r3, [r4, #12]
 8009ea0:	bd10      	pop	{r4, pc}

08009ea2 <__swrite>:
 8009ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea6:	461f      	mov	r7, r3
 8009ea8:	898b      	ldrh	r3, [r1, #12]
 8009eaa:	05db      	lsls	r3, r3, #23
 8009eac:	4605      	mov	r5, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	d505      	bpl.n	8009ec0 <__swrite+0x1e>
 8009eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb8:	2302      	movs	r3, #2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f000 f868 	bl	8009f90 <_lseek_r>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	4632      	mov	r2, r6
 8009ece:	463b      	mov	r3, r7
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed6:	f000 b817 	b.w	8009f08 <_write_r>

08009eda <__sseek>:
 8009eda:	b510      	push	{r4, lr}
 8009edc:	460c      	mov	r4, r1
 8009ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee2:	f000 f855 	bl	8009f90 <_lseek_r>
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	bf15      	itete	ne
 8009eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ef6:	81a3      	strheq	r3, [r4, #12]
 8009ef8:	bf18      	it	ne
 8009efa:	81a3      	strhne	r3, [r4, #12]
 8009efc:	bd10      	pop	{r4, pc}

08009efe <__sclose>:
 8009efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f02:	f000 b813 	b.w	8009f2c <_close_r>
	...

08009f08 <_write_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_write_r+0x20>)
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	f7f8 f817 	bl	8001f4a <_write>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_write_r+0x1e>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_write_r+0x1e>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	20000614 	.word	0x20000614

08009f2c <_close_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d06      	ldr	r5, [pc, #24]	; (8009f48 <_close_r+0x1c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	f7f8 f823 	bl	8001f82 <_close>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_close_r+0x1a>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_close_r+0x1a>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20000614 	.word	0x20000614

08009f4c <_fstat_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_fstat_r+0x20>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	4611      	mov	r1, r2
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	f7f8 f81e 	bl	8001f9a <_fstat>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d102      	bne.n	8009f68 <_fstat_r+0x1c>
 8009f62:	682b      	ldr	r3, [r5, #0]
 8009f64:	b103      	cbz	r3, 8009f68 <_fstat_r+0x1c>
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	bd38      	pop	{r3, r4, r5, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20000614 	.word	0x20000614

08009f70 <_isatty_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d06      	ldr	r5, [pc, #24]	; (8009f8c <_isatty_r+0x1c>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	602b      	str	r3, [r5, #0]
 8009f7c:	f7f8 f81d 	bl	8001fba <_isatty>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_isatty_r+0x1a>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_isatty_r+0x1a>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20000614 	.word	0x20000614

08009f90 <_lseek_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d07      	ldr	r5, [pc, #28]	; (8009fb0 <_lseek_r+0x20>)
 8009f94:	4604      	mov	r4, r0
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	602a      	str	r2, [r5, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f7f8 f816 	bl	8001fd0 <_lseek>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_lseek_r+0x1e>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_lseek_r+0x1e>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20000614 	.word	0x20000614

08009fb4 <_read_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d07      	ldr	r5, [pc, #28]	; (8009fd4 <_read_r+0x20>)
 8009fb8:	4604      	mov	r4, r0
 8009fba:	4608      	mov	r0, r1
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	602a      	str	r2, [r5, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f7f7 ffa4 	bl	8001f10 <_read>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_read_r+0x1e>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_read_r+0x1e>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	20000614 	.word	0x20000614

08009fd8 <_init>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr

08009fe4 <_fini>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	bf00      	nop
 8009fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fea:	bc08      	pop	{r3}
 8009fec:	469e      	mov	lr, r3
 8009fee:	4770      	bx	lr

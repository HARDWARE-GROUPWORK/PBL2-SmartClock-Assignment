
PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e910  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800eb10  0800eb10  0001eb10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f31c  0800f31c  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800f31c  0800f31c  0001f31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f324  0800f324  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f324  0800f324  0001f324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f328  0800f328  0001f328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800f32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200002b0  0800f5d8  000202b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800f5d8  00020824  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e02f  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405c  00000000  00000000  0003e309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00042368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00043bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2d3  00000000  00000000  00045240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6db  00000000  00000000  00071513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073e4  00000000  00000000  0008fbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007490  00000000  00000000  00197028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b0 	.word	0x200002b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800eaf8 	.word	0x0800eaf8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b4 	.word	0x200002b4
 800023c:	0800eaf8 	.word	0x0800eaf8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f007 fa0d 	bl	8007ac4 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f006 f869 	bl	800679c <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200003f0 	.word	0x200003f0

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200003a4 	.word	0x200003a4

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f007 fa3d 	bl	8007cec <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200003f0 	.word	0x200003f0

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00b fb08 	bl	800bee0 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f007 f8eb 	bl	8007ac4 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f005 ff54 	bl	800679c <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200003f0 	.word	0x200003f0

08000900 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_ADC1_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC1_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800091e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ADC1_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ADC1_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_ADC1_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_ADC1_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_ADC1_Init+0x98>)
 8000962:	f005 ff3f 	bl	80067e4 <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800096c:	f004 f9e8 	bl	8004d40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000970:	230a      	movs	r3, #10
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC1_Init+0x98>)
 8000982:	f006 f8d9 	bl	8006b38 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800098c:	f004 f9d8 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200003a8 	.word	0x200003a8
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d123      	bne.n	8000a0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x7c>)
 8000a0a:	f006 fbeb 	bl	80071e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800

08000a24 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b97      	ldr	r3, [pc, #604]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a96      	ldr	r2, [pc, #600]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b94      	ldr	r3, [pc, #592]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b91      	ldr	r3, [pc, #580]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b8b      	ldr	r3, [pc, #556]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a8a      	ldr	r2, [pc, #552]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b88      	ldr	r3, [pc, #544]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b85      	ldr	r3, [pc, #532]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a84      	ldr	r2, [pc, #528]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7e      	ldr	r2, [pc, #504]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a78      	ldr	r2, [pc, #480]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a72      	ldr	r2, [pc, #456]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6c      	ldr	r2, [pc, #432]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2168      	movs	r1, #104	; 0x68
 8000afe:	4867      	ldr	r0, [pc, #412]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b00:	f006 fd34 	bl	800756c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b0a:	4865      	ldr	r0, [pc, #404]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000b0c:	f006 fd2e 	bl	800756c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4863      	ldr	r0, [pc, #396]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000b16:	f006 fd29 	bl	800756c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b20:	4861      	ldr	r0, [pc, #388]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b22:	f006 fd23 	bl	800756c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000b26:	2314      	movs	r3, #20
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4858      	ldr	r0, [pc, #352]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b3a:	f006 fb53 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000b3e:	2368      	movs	r3, #104	; 0x68
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4851      	ldr	r0, [pc, #324]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b56:	f006 fb45 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <MX_GPIO_Init+0x288>)
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	484e      	ldr	r0, [pc, #312]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b70:	f006 fb38 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b74:	2332      	movs	r3, #50	; 0x32
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4846      	ldr	r0, [pc, #280]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b90:	f006 fb28 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b94:	2386      	movs	r3, #134	; 0x86
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4840      	ldr	r0, [pc, #256]	; (8000cb0 <MX_GPIO_Init+0x28c>)
 8000bb0:	f006 fb18 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4833      	ldr	r0, [pc, #204]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bd2:	f006 fb07 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bd6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bf0:	f006 faf8 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c0c:	f006 faea 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c24:	f006 fade 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000c28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000c42:	f006 facf 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23f0      	movs	r3, #240	; 0xf0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000c5a:	f006 fac3 	bl	80071e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c7c:	f006 fab2 	bl	80071e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2103      	movs	r1, #3
 8000c84:	2028      	movs	r0, #40	; 0x28
 8000c86:	f006 fa76 	bl	8007176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8a:	2028      	movs	r0, #40	; 0x28
 8000c8c:	f006 fa8f 	bl	80071ae <HAL_NVIC_EnableIRQ>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020c00 	.word	0x40020c00

08000cb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f006 fc6c 	bl	80075d0 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f004 f81f 	bl	8004d40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f007 fb93 	bl	8008430 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f004 f816 	bl	8004d40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f007 fbd5 	bl	80084c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f004 f80d 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003f0 	.word	0x200003f0
 8000d30:	40005400 	.word	0x40005400
 8000d34:	00c0eaff 	.word	0x00c0eaff

08000d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_I2C_MspInit+0x7c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d128      	bne.n	8000dac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d90:	f006 fa28 	bl	80071e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
}
 8000dc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dca:	f3bf 8f6f 	isb	sy
}
 8000dce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd8:	f3bf 8f4f 	dsb	sy
}
 8000ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dde:	f3bf 8f6f 	isb	sy
}
 8000de2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SCB_EnableICache+0x48>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df0:	f3bf 8f4f 	dsb	sy
}
 8000df4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000df6:	f3bf 8f6f 	isb	sy
}
 8000dfa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
}
 8000e1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e26:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0b5b      	lsrs	r3, r3, #13
 8000e2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	015a      	lsls	r2, r3, #5
 8000e40:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e44:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4a:	4911      	ldr	r1, [pc, #68]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ef      	bne.n	8000e3c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	60fa      	str	r2, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e5      	bne.n	8000e32 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e66:	f3bf 8f4f 	dsb	sy
}
 8000e6a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e78:	f3bf 8f4f 	dsb	sy
}
 8000e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e7e:	f3bf 8f6f 	isb	sy
}
 8000e82:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <println>:
uint8_t SerialNumber[] = {0x00, 0x00, 0x7E, 0x00, 0xD0, 0x01, 0x03, 0x2B, 0x7E};
static int pre_define_data_size = 70;

// Utility function
void println(char input[])
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	char stringBuffer[30];
	sprintf(stringBuffer, "%s\r\n", input);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <println+0x38>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00b fc65 	bl	800c774 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f9c6 	bl	8000240 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 0108 	add.w	r1, r7, #8
 8000ebc:	23c8      	movs	r3, #200	; 0xc8
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <println+0x3c>)
 8000ec0:	f00a fab6 	bl	800b430 <HAL_UART_Transmit>
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0800eb10 	.word	0x0800eb10
 8000ed0:	20000684 	.word	0x20000684

08000ed4 <sensirion_bytes_to_float>:
	HAL_UART_Transmit(&huart3, (uint8_t *)data, pre_define_data_size, 1000);
}

// For convert concatenate hex to float ieee754
float sensirion_bytes_to_float(const uint32_t bytes)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32_value;
		float float32;
	} tmp;

	tmp.u32_value = bytes;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
	return tmp.float32;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	ee07 3a90 	vmov	s15, r3
}
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <wake_sensirion>:

// Wake up SPS30 by sent start frame
uint8_t *wake_sensirion()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent start frame");

	static uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e007      	b.n	8000f10 <wake_sensirion+0x1c>
	{
		data[i] = 0x00;
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <wake_sensirion+0x70>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b45      	cmp	r3, #69	; 0x45
 8000f14:	d9f4      	bls.n	8000f00 <wake_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f16:	bf00      	nop
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <wake_sensirion+0x74>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	2b40      	cmp	r3, #64	; 0x40
 8000f24:	d1f8      	bne.n	8000f18 <wake_sensirion+0x24>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	490f      	ldr	r1, [pc, #60]	; (8000f6c <wake_sensirion+0x78>)
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <wake_sensirion+0x74>)
 8000f30:	f00a fa7e 	bl	800b430 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f34:	bf00      	nop
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <wake_sensirion+0x74>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	2b40      	cmp	r3, #64	; 0x40
 8000f42:	d1f8      	bne.n	8000f36 <wake_sensirion+0x42>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	2246      	movs	r2, #70	; 0x46
 8000f4a:	4906      	ldr	r1, [pc, #24]	; (8000f64 <wake_sensirion+0x70>)
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <wake_sensirion+0x74>)
 8000f4e:	f00a fb02 	bl	800b556 <HAL_UART_Receive>
	//HAL_Delay(200);
	println("Wakeup");
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <wake_sensirion+0x7c>)
 8000f54:	f7ff ff9e 	bl	8000e94 <println>
	return data;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <wake_sensirion+0x70>)
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000328 	.word	0x20000328
 8000f68:	20000708 	.word	0x20000708
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	0800eb18 	.word	0x0800eb18

08000f74 <read_sensirion>:

// Read from SPS30 by sent read frame
float *read_sensirion()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0a8      	sub	sp, #160	; 0xa0
 8000f78:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent read frame");

	uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f80:	e00b      	b.n	8000f9a <read_sensirion+0x26>
	{
		data[i] = 0x00;
 8000f82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f8a:	4413      	add	r3, r2
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f94:	3301      	adds	r3, #1
 8000f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f9e:	2b45      	cmp	r3, #69	; 0x45
 8000fa0:	d9ef      	bls.n	8000f82 <read_sensirion+0xe>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000fa2:	bf00      	nop
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <read_sensirion+0x1e0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	2b40      	cmp	r3, #64	; 0x40
 8000fb0:	d1f8      	bne.n	8000fa4 <read_sensirion+0x30>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	4967      	ldr	r1, [pc, #412]	; (8001158 <read_sensirion+0x1e4>)
 8000fba:	4866      	ldr	r0, [pc, #408]	; (8001154 <read_sensirion+0x1e0>)
 8000fbc:	f00a fa38 	bl	800b430 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000fc0:	bf00      	nop
 8000fc2:	4b64      	ldr	r3, [pc, #400]	; (8001154 <read_sensirion+0x1e0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fcc:	2b40      	cmp	r3, #64	; 0x40
 8000fce:	d1f8      	bne.n	8000fc2 <read_sensirion+0x4e>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 100); // from 1000 to 100
 8000fd0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	2246      	movs	r2, #70	; 0x46
 8000fd8:	485e      	ldr	r0, [pc, #376]	; (8001154 <read_sensirion+0x1e0>)
 8000fda:	f00a fabc 	bl	800b556 <HAL_UART_Receive>


	println("starting");
 8000fde:	485f      	ldr	r0, [pc, #380]	; (800115c <read_sensirion+0x1e8>)
 8000fe0:	f7ff ff58 	bl	8000e94 <println>
	// Check for start frame
	if (data[0] == 0x7E && data[1] == 0x00)
 8000fe4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fe8:	2b7e      	cmp	r3, #126	; 0x7e
 8000fea:	f040 80ab 	bne.w	8001144 <read_sensirion+0x1d0>
 8000fee:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 80a6 	bne.w	8001144 <read_sensirion+0x1d0>
	{
		// Header frame
		uint8_t command = data[2];
 8000ff8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000ffc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t errorcode = data[3];
 8001000:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001004:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		uint8_t length = data[4];
 8001008:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800100c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		uint8_t state = data[5];
 8001010:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001014:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

		uint8_t checksum;
		// Find checksum frame by start from the back of the array
		for (uint8_t i = sizeof(data); i > 0; i--)
 8001018:	2346      	movs	r3, #70	; 0x46
 800101a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800101e:	e017      	b.n	8001050 <read_sensirion+0xdc>
		{
			if (data[i] == 0x7E)
 8001020:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001024:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001028:	4413      	add	r3, r2
 800102a:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800102e:	2b7e      	cmp	r3, #126	; 0x7e
 8001030:	d109      	bne.n	8001046 <read_sensirion+0xd2>
			{
				data[i - 1] = checksum;
 8001032:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001036:	3b01      	subs	r3, #1
 8001038:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800103c:	4413      	add	r3, r2
 800103e:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001042:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (uint8_t i = sizeof(data); i > 0; i--)
 8001046:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800104a:	3b01      	subs	r3, #1
 800104c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8001050:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e3      	bne.n	8001020 <read_sensirion+0xac>
		}

		uint32_t concatenateHex[10];
		static float actualValue[10];
		// Concatenate HEX(2,2,2,2) into HEX(8) and convert concatenate hex to float ieee754
		for (int i = 0; i < 10; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800105e:	e06b      	b.n	8001138 <read_sensirion+0x1c4>
		{
			// 40 HEX(2) into 10 Groups
			// Skip first 5 bits (header)
			concatenateHex[i] = ((data[4 * i + 5]) << 24) + ((data[(4 * i) + 1 + 5]) << 16) + ((data[(4 * i) + 2 + 5]) << 8) + (data[(4 * i) + 3 + 5]);
 8001060:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3305      	adds	r3, #5
 8001068:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800106c:	4413      	add	r3, r2
 800106e:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001072:	061a      	lsls	r2, r3, #24
 8001074:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	3306      	adds	r3, #6
 800107c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001080:	440b      	add	r3, r1
 8001082:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001086:	041b      	lsls	r3, r3, #16
 8001088:	441a      	add	r2, r3
 800108a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	3307      	adds	r3, #7
 8001092:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001096:	440b      	add	r3, r1
 8001098:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	4413      	add	r3, r2
 80010a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80010a4:	3202      	adds	r2, #2
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010ac:	440a      	add	r2, r1
 80010ae:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 80010b2:	4413      	add	r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010c0:	440b      	add	r3, r1
 80010c2:	f843 2ca0 	str.w	r2, [r3, #-160]

			// Convert sensirion bytes to float
			actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 80010c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80010d0:	4413      	add	r3, r2
 80010d2:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fefc 	bl	8000ed4 <sensirion_bytes_to_float>
 80010dc:	eef0 7a40 	vmov.f32	s15, s0
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <read_sensirion+0x1ec>)
 80010e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	edc3 7a00 	vstr	s15, [r3]

			// ! For debug only
			char stringBuffer[30];
			sprintf(stringBuffer, "%.4f\r\n", actualValue[i]);
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <read_sensirion+0x1ec>)
 80010f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001100:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001104:	ec53 2b17 	vmov	r2, r3, d7
 8001108:	4916      	ldr	r1, [pc, #88]	; (8001164 <read_sensirion+0x1f0>)
 800110a:	f00b fb33 	bl	800c774 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 800110e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f894 	bl	8000240 <strlen>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001120:	23c8      	movs	r3, #200	; 0xc8
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <read_sensirion+0x1f4>)
 8001124:	f00a f984 	bl	800b430 <HAL_UART_Transmit>
			println("Read completed");
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <read_sensirion+0x1f8>)
 800112a:	f7ff feb3 	bl	8000e94 <println>
		for (int i = 0; i < 10; i++)
 800112e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001138:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800113c:	2b09      	cmp	r3, #9
 800113e:	dd8f      	ble.n	8001060 <read_sensirion+0xec>
		}
		//HAL_Delay(200);
		return actualValue;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <read_sensirion+0x1ec>)
 8001142:	e003      	b.n	800114c <read_sensirion+0x1d8>
	}
	else
	{
		println("Error: Can't read sensor");
 8001144:	480a      	ldr	r0, [pc, #40]	; (8001170 <read_sensirion+0x1fc>)
 8001146:	f7ff fea5 	bl	8000e94 <println>
		//HAL_Delay(200);
		return NULL;
 800114a:	2300      	movs	r3, #0
	}
}
 800114c:	4618      	mov	r0, r3
 800114e:	37a0      	adds	r7, #160	; 0xa0
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000708 	.word	0x20000708
 8001158:	2000000c 	.word	0x2000000c
 800115c:	0800eb20 	.word	0x0800eb20
 8001160:	20000370 	.word	0x20000370
 8001164:	0800eb2c 	.word	0x0800eb2c
 8001168:	20000684 	.word	0x20000684
 800116c:	0800eb34 	.word	0x0800eb34
 8001170:	0800eb44 	.word	0x0800eb44

08001174 <sent_string_to_mcu>:
#include "string.h"
#include "stdio.h"

void sent_string_to_mcu(char data[]){
 8001174:	b580      	push	{r7, lr}
 8001176:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800117a:	af00      	add	r7, sp, #0
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	6018      	str	r0, [r3, #0]
	char stringBuffer[500];
	sprintf(stringBuffer, "%s\n" , data);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	f107 000c 	add.w	r0, r7, #12
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	490a      	ldr	r1, [pc, #40]	; (80011b4 <sent_string_to_mcu+0x40>)
 800118a:	f00b faf3 	bl	800c774 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f854 	bl	8000240 <strlen>
 8001198:	4603      	mov	r3, r0
 800119a:	b29a      	uxth	r2, r3
 800119c:	f107 010c 	add.w	r1, r7, #12
 80011a0:	23c8      	movs	r3, #200	; 0xc8
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <sent_string_to_mcu+0x44>)
 80011a4:	f00a f944 	bl	800b430 <HAL_UART_Transmit>
}
 80011a8:	bf00      	nop
 80011aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0800eb60 	.word	0x0800eb60
 80011b8:	2000078c 	.word	0x2000078c

080011bc <buzzerSound>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Buzzer Sound
void buzzerSound(uint32_t delay){
 80011bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]

	if(alarmIsAlert == false){
 80011c6:	4b59      	ldr	r3, [pc, #356]	; (800132c <buzzerSound+0x170>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f083 0301 	eor.w	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d032      	beq.n	800123a <buzzerSound+0x7e>
		if(buzzerIsOn == true){
 80011d4:	4b56      	ldr	r3, [pc, #344]	; (8001330 <buzzerSound+0x174>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <buzzerSound+0x32>
	//		char hexString[30];
	//		sprintf(hexString,"BUZZER....\r\n");
	//		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

			htim4.Instance->CCR1 = (1000 - 1) * 0.5;
 80011dc:	4b55      	ldr	r3, [pc, #340]	; (8001334 <buzzerSound+0x178>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011e6:	2100      	movs	r1, #0
 80011e8:	4852      	ldr	r0, [pc, #328]	; (8001334 <buzzerSound+0x178>)
 80011ea:	f008 ffc7 	bl	800a17c <HAL_TIM_PWM_Start>
		}

		if(buzzerIsOn == true && millisecondHAL - buzzerPrevMillisecondHAL >= delay){
 80011ee:	4b50      	ldr	r3, [pc, #320]	; (8001330 <buzzerSound+0x174>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8095 	beq.w	8001322 <buzzerSound+0x166>
 80011f8:	4b4f      	ldr	r3, [pc, #316]	; (8001338 <buzzerSound+0x17c>)
 80011fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011fe:	4b4f      	ldr	r3, [pc, #316]	; (800133c <buzzerSound+0x180>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	ebb0 0a02 	subs.w	sl, r0, r2
 8001208:	eb61 0b03 	sbc.w	fp, r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	461a      	mov	r2, r3
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	459b      	cmp	fp, r3
 8001216:	bf08      	it	eq
 8001218:	4592      	cmpeq	sl, r2
 800121a:	f0c0 8082 	bcc.w	8001322 <buzzerSound+0x166>
	//		char hexString[30];
	//		sprintf(hexString,"QUIT BUZZER\r\n");
	//		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800121e:	2100      	movs	r1, #0
 8001220:	4844      	ldr	r0, [pc, #272]	; (8001334 <buzzerSound+0x178>)
 8001222:	f009 f8a5 	bl	800a370 <HAL_TIM_PWM_Stop>
			buzzerIsOn = false;
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <buzzerSound+0x174>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 800122c:	4b42      	ldr	r3, [pc, #264]	; (8001338 <buzzerSound+0x17c>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	4942      	ldr	r1, [pc, #264]	; (800133c <buzzerSound+0x180>)
 8001234:	e9c1 2300 	strd	r2, r3, [r1]

		}

	}

}
 8001238:	e073      	b.n	8001322 <buzzerSound+0x166>
		delay += 90;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	335a      	adds	r3, #90	; 0x5a
 800123e:	607b      	str	r3, [r7, #4]
		if(alarmNumOfAlert >= 60){
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <buzzerSound+0x184>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b3b      	cmp	r3, #59	; 0x3b
 8001246:	d905      	bls.n	8001254 <buzzerSound+0x98>
			alarmNumOfAlert = 0;
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <buzzerSound+0x184>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
			alarmIsAlert = false;
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <buzzerSound+0x170>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
		if(alarmNumOfAlert % 4 == 0){
 8001254:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <buzzerSound+0x184>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d104      	bne.n	800126c <buzzerSound+0xb0>
			delay += delay*2;
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	607b      	str	r3, [r7, #4]
		if(buzzerIsOn == false && millisecondHAL - buzzerPrevMillisecondHAL >= delay && alarmNumOfAlert < 60){
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <buzzerSound+0x174>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f083 0301 	eor.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <buzzerSound+0x108>
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <buzzerSound+0x17c>)
 800127c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <buzzerSound+0x180>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	ebb0 0802 	subs.w	r8, r0, r2
 800128a:	eb61 0903 	sbc.w	r9, r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	461a      	mov	r2, r3
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	4599      	cmp	r9, r3
 8001298:	bf08      	it	eq
 800129a:	4590      	cmpeq	r8, r2
 800129c:	d312      	bcc.n	80012c4 <buzzerSound+0x108>
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <buzzerSound+0x184>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b3b      	cmp	r3, #59	; 0x3b
 80012a4:	d80e      	bhi.n	80012c4 <buzzerSound+0x108>
			buzzerIsOn = true;
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <buzzerSound+0x174>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <buzzerSound+0x17c>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	4922      	ldr	r1, [pc, #136]	; (800133c <buzzerSound+0x180>)
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]
			alarmNumOfAlert++;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <buzzerSound+0x184>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <buzzerSound+0x184>)
 80012c2:	701a      	strb	r2, [r3, #0]
		if(buzzerIsOn == true){
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <buzzerSound+0x174>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <buzzerSound+0x122>
			htim4.Instance->CCR1 = (1000 - 1) * 0.5;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <buzzerSound+0x178>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	4816      	ldr	r0, [pc, #88]	; (8001334 <buzzerSound+0x178>)
 80012da:	f008 ff4f 	bl	800a17c <HAL_TIM_PWM_Start>
		if(buzzerIsOn == true && millisecondHAL - buzzerPrevMillisecondHAL >= delay){
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <buzzerSound+0x174>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d01d      	beq.n	8001322 <buzzerSound+0x166>
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <buzzerSound+0x17c>)
 80012e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <buzzerSound+0x180>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	1a84      	subs	r4, r0, r2
 80012f4:	eb61 0503 	sbc.w	r5, r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	429d      	cmp	r5, r3
 8001302:	bf08      	it	eq
 8001304:	4294      	cmpeq	r4, r2
 8001306:	d30c      	bcc.n	8001322 <buzzerSound+0x166>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001308:	2100      	movs	r1, #0
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <buzzerSound+0x178>)
 800130c:	f009 f830 	bl	800a370 <HAL_TIM_PWM_Stop>
			buzzerIsOn = false;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <buzzerSound+0x174>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <buzzerSound+0x17c>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <buzzerSound+0x180>)
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800132c:	200002ef 	.word	0x200002ef
 8001330:	20000310 	.word	0x20000310
 8001334:	20000554 	.word	0x20000554
 8001338:	200002f8 	.word	0x200002f8
 800133c:	20000308 	.word	0x20000308
 8001340:	20000311 	.word	0x20000311

08001344 <saveData>:

// Save EEPROM
void saveData(){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	//Clock
	EEPROM_Write_NUM (1, 0, hourNum);
 8001348:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <saveData+0x100>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	2100      	movs	r1, #0
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fa0a 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (2, 0, minuteNum);
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <saveData+0x104>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	2100      	movs	r1, #0
 8001372:	2002      	movs	r0, #2
 8001374:	f7ff f9fe 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (3, 0, secondNum);
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <saveData+0x108>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	2100      	movs	r1, #0
 800138a:	2003      	movs	r0, #3
 800138c:	f7ff f9f2 	bl	8000774 <EEPROM_Write_NUM>

	//Date
	EEPROM_Write_NUM (4, 0, dayIndex);
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <saveData+0x10c>)
 8001392:	f993 3000 	ldrsb.w	r3, [r3]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	2100      	movs	r1, #0
 80013a4:	2004      	movs	r0, #4
 80013a6:	f7ff f9e5 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (5, 0, date);
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <saveData+0x110>)
 80013ac:	f993 3000 	ldrsb.w	r3, [r3]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	2100      	movs	r1, #0
 80013be:	2005      	movs	r0, #5
 80013c0:	f7ff f9d8 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (6, 0, monthIndex);
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <saveData+0x114>)
 80013c6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	2100      	movs	r1, #0
 80013d8:	2006      	movs	r0, #6
 80013da:	f7ff f9cb 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (7, 0, year);
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <saveData+0x118>)
 80013e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	2100      	movs	r1, #0
 80013f2:	2007      	movs	r0, #7
 80013f4:	f7ff f9be 	bl	8000774 <EEPROM_Write_NUM>

	//Alarm
	EEPROM_Write_NUM (8, 0, alarmHour);
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <saveData+0x11c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	2100      	movs	r1, #0
 800140a:	2008      	movs	r0, #8
 800140c:	f7ff f9b2 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (9, 0, alarmMinute);
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <saveData+0x120>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	eeb0 0a67 	vmov.f32	s0, s15
 8001420:	2100      	movs	r1, #0
 8001422:	2009      	movs	r0, #9
 8001424:	f7ff f9a6 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (10, 0, alarmIsOn);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <saveData+0x124>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	2100      	movs	r1, #0
 800143a:	200a      	movs	r0, #10
 800143c:	f7ff f99a 	bl	8000774 <EEPROM_Write_NUM>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000040 	.word	0x20000040
 8001448:	2000003c 	.word	0x2000003c
 800144c:	20000038 	.word	0x20000038
 8001450:	200000b0 	.word	0x200000b0
 8001454:	20000061 	.word	0x20000061
 8001458:	200000b1 	.word	0x200000b1
 800145c:	200000b2 	.word	0x200000b2
 8001460:	200002d0 	.word	0x200002d0
 8001464:	200002cc 	.word	0x200002cc
 8001468:	20000060 	.word	0x20000060

0800146c <readData>:
// Read EEPROM
void readData(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	//Clock
	hourNum = EEPROM_Read_NUM (1, 0);
 8001472:	2100      	movs	r1, #0
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff f999 	bl	80007ac <EEPROM_Read_NUM>
 800147a:	eef0 7a40 	vmov.f32	s15, s0
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 2a90 	vmov	r2, s15
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <readData+0x114>)
 8001488:	601a      	str	r2, [r3, #0]
	minuteNum = EEPROM_Read_NUM (2, 0);
 800148a:	2100      	movs	r1, #0
 800148c:	2002      	movs	r0, #2
 800148e:	f7ff f98d 	bl	80007ac <EEPROM_Read_NUM>
 8001492:	eef0 7a40 	vmov.f32	s15, s0
 8001496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149a:	ee17 2a90 	vmov	r2, s15
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <readData+0x118>)
 80014a0:	601a      	str	r2, [r3, #0]
	secondNum = EEPROM_Read_NUM (3, 0);
 80014a2:	2100      	movs	r1, #0
 80014a4:	2003      	movs	r0, #3
 80014a6:	f7ff f981 	bl	80007ac <EEPROM_Read_NUM>
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
 80014ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b2:	ee17 2a90 	vmov	r2, s15
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <readData+0x11c>)
 80014b8:	601a      	str	r2, [r3, #0]

	//Date
	dayIndex = EEPROM_Read_NUM (4, 0);
 80014ba:	2100      	movs	r1, #0
 80014bc:	2004      	movs	r0, #4
 80014be:	f7ff f975 	bl	80007ac <EEPROM_Read_NUM>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
 80014c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80014ce:	793b      	ldrb	r3, [r7, #4]
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <readData+0x120>)
 80014d4:	701a      	strb	r2, [r3, #0]
	date = EEPROM_Read_NUM (5, 0);
 80014d6:	2100      	movs	r1, #0
 80014d8:	2005      	movs	r0, #5
 80014da:	f7ff f967 	bl	80007ac <EEPROM_Read_NUM>
 80014de:	eef0 7a40 	vmov.f32	s15, s0
 80014e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80014ea:	793b      	ldrb	r3, [r7, #4]
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <readData+0x124>)
 80014f0:	701a      	strb	r2, [r3, #0]
	monthIndex = EEPROM_Read_NUM (6, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2006      	movs	r0, #6
 80014f6:	f7ff f959 	bl	80007ac <EEPROM_Read_NUM>
 80014fa:	eef0 7a40 	vmov.f32	s15, s0
 80014fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001502:	edc7 7a01 	vstr	s15, [r7, #4]
 8001506:	793b      	ldrb	r3, [r7, #4]
 8001508:	b25a      	sxtb	r2, r3
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <readData+0x128>)
 800150c:	701a      	strb	r2, [r3, #0]
	year = EEPROM_Read_NUM (7, 0);
 800150e:	2100      	movs	r1, #0
 8001510:	2007      	movs	r0, #7
 8001512:	f7ff f94b 	bl	80007ac <EEPROM_Read_NUM>
 8001516:	eef0 7a40 	vmov.f32	s15, s0
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 3a90 	vmov	r3, s15
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <readData+0x12c>)
 8001526:	801a      	strh	r2, [r3, #0]

	//Alarm
	alarmHour = EEPROM_Read_NUM (8, 0);
 8001528:	2100      	movs	r1, #0
 800152a:	2008      	movs	r0, #8
 800152c:	f7ff f93e 	bl	80007ac <EEPROM_Read_NUM>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001538:	ee17 2a90 	vmov	r2, s15
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <readData+0x130>)
 800153e:	601a      	str	r2, [r3, #0]
	alarmMinute = EEPROM_Read_NUM (9, 0);
 8001540:	2100      	movs	r1, #0
 8001542:	2009      	movs	r0, #9
 8001544:	f7ff f932 	bl	80007ac <EEPROM_Read_NUM>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001550:	ee17 2a90 	vmov	r2, s15
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <readData+0x134>)
 8001556:	601a      	str	r2, [r3, #0]
	alarmIsOn = EEPROM_Read_NUM (10, 0);
 8001558:	2100      	movs	r1, #0
 800155a:	200a      	movs	r0, #10
 800155c:	f7ff f926 	bl	80007ac <EEPROM_Read_NUM>
 8001560:	eef0 7a40 	vmov.f32	s15, s0
 8001564:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	bf14      	ite	ne
 800156e:	2301      	movne	r3, #1
 8001570:	2300      	moveq	r3, #0
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <readData+0x138>)
 8001576:	701a      	strb	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000040 	.word	0x20000040
 8001584:	2000003c 	.word	0x2000003c
 8001588:	20000038 	.word	0x20000038
 800158c:	200000b0 	.word	0x200000b0
 8001590:	20000061 	.word	0x20000061
 8001594:	200000b1 	.word	0x200000b1
 8001598:	200000b2 	.word	0x200000b2
 800159c:	200002d0 	.word	0x200002d0
 80015a0:	200002cc 	.word	0x200002cc
 80015a4:	20000060 	.word	0x20000060

080015a8 <eraseAllData>:

// Erase EERPOM
void eraseAllData(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e007      	b.n	80015c4 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f975 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3301      	adds	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ca:	dbf3      	blt.n	80015b4 <eraseAllData+0xc>
	}
	year = 2021;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <eraseAllData+0x54>)
 80015ce:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80015d2:	801a      	strh	r2, [r3, #0]
	EEPROM_Write_NUM (7, 0, year); // override year
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <eraseAllData+0x54>)
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	2100      	movs	r1, #0
 80015e8:	2007      	movs	r0, #7
 80015ea:	f7ff f8c3 	bl	8000774 <EEPROM_Write_NUM>
	readData(); // Read from Clean EEPROM
 80015ee:	f7ff ff3d 	bl	800146c <readData>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200000b2 	.word	0x200000b2

08001600 <checkResetData>:

void checkResetData(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if(userResetButton == 1){
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <checkResetData+0x1c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <checkResetData+0x16>
		eraseAllData();
 800160c:	f7ff ffcc 	bl	80015a8 <eraseAllData>
		userResetButton = 0;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <checkResetData+0x1c>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
	}
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200002ee 	.word	0x200002ee

08001620 <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fe65 	bl	80062fc <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001632:	2001      	movs	r0, #1
 8001634:	f004 fc5c 	bl	8005ef0 <ILI9341_Set_Rotation>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <check31Days>:

bool check31Days(){
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	if(monthIndex == 0 || monthIndex == 2 || monthIndex == 4 || monthIndex == 6 || monthIndex == 7 || monthIndex == 9 || monthIndex == 11){
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <check31Days+0x5c>)
 8001646:	f993 3000 	ldrsb.w	r3, [r3]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d01d      	beq.n	800168a <check31Days+0x4a>
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <check31Days+0x5c>)
 8001650:	f993 3000 	ldrsb.w	r3, [r3]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d018      	beq.n	800168a <check31Days+0x4a>
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <check31Days+0x5c>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d013      	beq.n	800168a <check31Days+0x4a>
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <check31Days+0x5c>)
 8001664:	f993 3000 	ldrsb.w	r3, [r3]
 8001668:	2b06      	cmp	r3, #6
 800166a:	d00e      	beq.n	800168a <check31Days+0x4a>
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <check31Days+0x5c>)
 800166e:	f993 3000 	ldrsb.w	r3, [r3]
 8001672:	2b07      	cmp	r3, #7
 8001674:	d009      	beq.n	800168a <check31Days+0x4a>
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <check31Days+0x5c>)
 8001678:	f993 3000 	ldrsb.w	r3, [r3]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d004      	beq.n	800168a <check31Days+0x4a>
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <check31Days+0x5c>)
 8001682:	f993 3000 	ldrsb.w	r3, [r3]
 8001686:	2b0b      	cmp	r3, #11
 8001688:	d101      	bne.n	800168e <check31Days+0x4e>
		return true;
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <check31Days+0x50>
	}else{
		return false;
 800168e:	2300      	movs	r3, #0
	}
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200000b1 	.word	0x200000b1

080016a0 <setDayOneIncrementMonth>:
void setDayOneIncrementMonth(uint8_t num){
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	if(date > num){
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <setDayOneIncrementMonth+0x48>)
 80016ac:	f993 3000 	ldrsb.w	r3, [r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dd10      	ble.n	80016da <setDayOneIncrementMonth+0x3a>
		date = 1;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <setDayOneIncrementMonth+0x48>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
		if(mode != 100){
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <setDayOneIncrementMonth+0x4c>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d008      	beq.n	80016da <setDayOneIncrementMonth+0x3a>
			monthIndex++;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <setDayOneIncrementMonth+0x50>)
 80016ca:	f993 3000 	ldrsb.w	r3, [r3]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	b25a      	sxtb	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <setDayOneIncrementMonth+0x50>)
 80016d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000061 	.word	0x20000061
 80016ec:	200002e4 	.word	0x200002e4
 80016f0:	200000b1 	.word	0x200000b1

080016f4 <setDayX>:
void setDayX(uint8_t num){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	date = num;
 80016fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <setDayX+0x20>)
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000061 	.word	0x20000061

08001718 <compareAlarmClock>:

void compareAlarmClock(){ //Check If alarmIsOn and equal to alarm setting, alert!
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b094      	sub	sp, #80	; 0x50
 800171c:	af04      	add	r7, sp, #16
	char hexString[30];
	sprintf(hexString,"%d %d %d // %d %d\r\n",hourNum,minuteNum,secondNum,alarmHour,alarmMinute);
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <compareAlarmClock+0xa4>)
 8001720:	681c      	ldr	r4, [r3, #0]
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <compareAlarmClock+0xa8>)
 8001724:	681d      	ldr	r5, [r3, #0]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <compareAlarmClock+0xac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <compareAlarmClock+0xb0>)
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	4927      	ldr	r1, [pc, #156]	; (80017cc <compareAlarmClock+0xb4>)
 8001730:	6809      	ldr	r1, [r1, #0]
 8001732:	f107 0020 	add.w	r0, r7, #32
 8001736:	9102      	str	r1, [sp, #8]
 8001738:	9201      	str	r2, [sp, #4]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	462b      	mov	r3, r5
 800173e:	4622      	mov	r2, r4
 8001740:	4923      	ldr	r1, [pc, #140]	; (80017d0 <compareAlarmClock+0xb8>)
 8001742:	f00b f817 	bl	800c774 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fd78 	bl	8000240 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	f107 0120 	add.w	r1, r7, #32
 8001758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175c:	481d      	ldr	r0, [pc, #116]	; (80017d4 <compareAlarmClock+0xbc>)
 800175e:	f009 fe67 	bl	800b430 <HAL_UART_Transmit>
	if(alarmIsOn == true && hourNum == alarmHour && minuteNum == alarmMinute && secondNum == 0){
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <compareAlarmClock+0xc0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d023      	beq.n	80017b2 <compareAlarmClock+0x9a>
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <compareAlarmClock+0xa4>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <compareAlarmClock+0xb0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d11d      	bne.n	80017b2 <compareAlarmClock+0x9a>
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <compareAlarmClock+0xa8>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <compareAlarmClock+0xb4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d117      	bne.n	80017b2 <compareAlarmClock+0x9a>
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <compareAlarmClock+0xac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d113      	bne.n	80017b2 <compareAlarmClock+0x9a>
		alarmIsAlert = true;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <compareAlarmClock+0xc4>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
		char hexString[30];
		sprintf(hexString,"Clock Alert! First Time\r\n");
 8001790:	463b      	mov	r3, r7
 8001792:	4913      	ldr	r1, [pc, #76]	; (80017e0 <compareAlarmClock+0xc8>)
 8001794:	4618      	mov	r0, r3
 8001796:	f00a ffed 	bl	800c774 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);
 800179a:	463b      	mov	r3, r7
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd4f 	bl	8000240 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4639      	mov	r1, r7
 80017a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <compareAlarmClock+0xbc>)
 80017ae:	f009 fe3f 	bl	800b430 <HAL_UART_Transmit>
	}
}
 80017b2:	bf00      	nop
 80017b4:	3740      	adds	r7, #64	; 0x40
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000040 	.word	0x20000040
 80017c0:	2000003c 	.word	0x2000003c
 80017c4:	20000038 	.word	0x20000038
 80017c8:	200002d0 	.word	0x200002d0
 80017cc:	200002cc 	.word	0x200002cc
 80017d0:	0800ebb0 	.word	0x0800ebb0
 80017d4:	20000684 	.word	0x20000684
 80017d8:	20000060 	.word	0x20000060
 80017dc:	200002ef 	.word	0x200002ef
 80017e0:	0800ebc4 	.word	0x0800ebc4

080017e4 <calculationClock>:


}

//Calculation
void calculationClock(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

	millisecondHAL = HAL_GetTick();
 80017e8:	f004 ffcc 	bl	8006784 <HAL_GetTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	498c      	ldr	r1, [pc, #560]	; (8001a28 <calculationClock+0x244>)
 80017f6:	e9c1 2300 	strd	r2, r3, [r1]
//	char hexString[30];
//	sprintf(hexString,"%d\r\n", millisecond);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

	//Normal Clock
	if (millisecond >= 1000){
 80017fa:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <calculationClock+0x248>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001802:	d30a      	bcc.n	800181a <calculationClock+0x36>
		millisecond = millisecond - 1000;
 8001804:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <calculationClock+0x248>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800180c:	4a87      	ldr	r2, [pc, #540]	; (8001a2c <calculationClock+0x248>)
 800180e:	6013      	str	r3, [r2, #0]
		secondNum++;
 8001810:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <calculationClock+0x24c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a86      	ldr	r2, [pc, #536]	; (8001a30 <calculationClock+0x24c>)
 8001818:	6013      	str	r3, [r2, #0]
	}
	if (secondNum >= 60){
 800181a:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <calculationClock+0x24c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b3b      	cmp	r3, #59	; 0x3b
 8001820:	dd0e      	ble.n	8001840 <calculationClock+0x5c>
		secondNum = 0;
 8001822:	4b83      	ldr	r3, [pc, #524]	; (8001a30 <calculationClock+0x24c>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001828:	4b82      	ldr	r3, [pc, #520]	; (8001a34 <calculationClock+0x250>)
 800182a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d004      	beq.n	800183c <calculationClock+0x58>
			minuteNum++;
 8001832:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <calculationClock+0x254>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a7f      	ldr	r2, [pc, #508]	; (8001a38 <calculationClock+0x254>)
 800183a:	6013      	str	r3, [r2, #0]
		}
		compareAlarmClock();
 800183c:	f7ff ff6c 	bl	8001718 <compareAlarmClock>
	}
	if (minuteNum >= 60){
 8001840:	4b7d      	ldr	r3, [pc, #500]	; (8001a38 <calculationClock+0x254>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b3b      	cmp	r3, #59	; 0x3b
 8001846:	dd0c      	ble.n	8001862 <calculationClock+0x7e>
		minuteNum = 0;
 8001848:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <calculationClock+0x254>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800184e:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <calculationClock+0x250>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	2b64      	cmp	r3, #100	; 0x64
 8001856:	d004      	beq.n	8001862 <calculationClock+0x7e>
			hourNum++;
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <calculationClock+0x258>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a77      	ldr	r2, [pc, #476]	; (8001a3c <calculationClock+0x258>)
 8001860:	6013      	str	r3, [r2, #0]
		}
	}
	if (hourNum >= 24){
 8001862:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <calculationClock+0x258>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b17      	cmp	r3, #23
 8001868:	dd19      	ble.n	800189e <calculationClock+0xba>
		hourNum = 0;
 800186a:	4b74      	ldr	r3, [pc, #464]	; (8001a3c <calculationClock+0x258>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 8001870:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <calculationClock+0x250>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d011      	beq.n	800189e <calculationClock+0xba>
			dayIndex++;
 800187a:	4b71      	ldr	r3, [pc, #452]	; (8001a40 <calculationClock+0x25c>)
 800187c:	f993 3000 	ldrsb.w	r3, [r3]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	b25a      	sxtb	r2, r3
 8001888:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <calculationClock+0x25c>)
 800188a:	701a      	strb	r2, [r3, #0]
			date++;
 800188c:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <calculationClock+0x260>)
 800188e:	f993 3000 	ldrsb.w	r3, [r3]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	b25a      	sxtb	r2, r3
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <calculationClock+0x260>)
 800189c:	701a      	strb	r2, [r3, #0]
		}
	}
	//Normal Date
	if (dayIndex >= 7){
 800189e:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <calculationClock+0x25c>)
 80018a0:	f993 3000 	ldrsb.w	r3, [r3]
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	dd02      	ble.n	80018ae <calculationClock+0xca>
		dayIndex = 0;
 80018a8:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <calculationClock+0x25c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
	}
	if (year % 4 == 0){ //check for FEB 29 days
 80018ae:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <calculationClock+0x264>)
 80018b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d115      	bne.n	80018ec <calculationClock+0x108>
		if(monthIndex == 1){
 80018c0:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <calculationClock+0x268>)
 80018c2:	f993 3000 	ldrsb.w	r3, [r3]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d103      	bne.n	80018d2 <calculationClock+0xee>
			setDayOneIncrementMonth(29); // 29 days
 80018ca:	201d      	movs	r0, #29
 80018cc:	f7ff fee8 	bl	80016a0 <setDayOneIncrementMonth>
 80018d0:	e021      	b.n	8001916 <calculationClock+0x132>
		}else if(check31Days() == true){
 80018d2:	f7ff feb5 	bl	8001640 <check31Days>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <calculationClock+0x100>
			setDayOneIncrementMonth(31); // 31 days
 80018dc:	201f      	movs	r0, #31
 80018de:	f7ff fedf 	bl	80016a0 <setDayOneIncrementMonth>
 80018e2:	e018      	b.n	8001916 <calculationClock+0x132>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 80018e4:	201e      	movs	r0, #30
 80018e6:	f7ff fedb 	bl	80016a0 <setDayOneIncrementMonth>
 80018ea:	e014      	b.n	8001916 <calculationClock+0x132>
		}
	}else{
		if(monthIndex == 1){
 80018ec:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <calculationClock+0x268>)
 80018ee:	f993 3000 	ldrsb.w	r3, [r3]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d103      	bne.n	80018fe <calculationClock+0x11a>
			setDayOneIncrementMonth(28); // 28 days
 80018f6:	201c      	movs	r0, #28
 80018f8:	f7ff fed2 	bl	80016a0 <setDayOneIncrementMonth>
 80018fc:	e00b      	b.n	8001916 <calculationClock+0x132>
		}else if(check31Days() == true){
 80018fe:	f7ff fe9f 	bl	8001640 <check31Days>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <calculationClock+0x12c>
			setDayOneIncrementMonth(31); // 31 days
 8001908:	201f      	movs	r0, #31
 800190a:	f7ff fec9 	bl	80016a0 <setDayOneIncrementMonth>
 800190e:	e002      	b.n	8001916 <calculationClock+0x132>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 8001910:	201e      	movs	r0, #30
 8001912:	f7ff fec5 	bl	80016a0 <setDayOneIncrementMonth>
		}
	}
	if (monthIndex >= 12){
 8001916:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <calculationClock+0x268>)
 8001918:	f993 3000 	ldrsb.w	r3, [r3]
 800191c:	2b0b      	cmp	r3, #11
 800191e:	dd10      	ble.n	8001942 <calculationClock+0x15e>
		monthIndex = 0;
 8001920:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <calculationClock+0x268>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
		if (mode != 100){
 8001926:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <calculationClock+0x250>)
 8001928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d008      	beq.n	8001942 <calculationClock+0x15e>
			year++;
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <calculationClock+0x264>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	b29b      	uxth	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <calculationClock+0x264>)
 8001940:	801a      	strh	r2, [r3, #0]
		}
	}
	if (year >= 10000){
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <calculationClock+0x264>)
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	f242 720f 	movw	r2, #9999	; 0x270f
 800194c:	4293      	cmp	r3, r2
 800194e:	dd02      	ble.n	8001956 <calculationClock+0x172>
		year = 1;
 8001950:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <calculationClock+0x264>)
 8001952:	2201      	movs	r2, #1
 8001954:	801a      	strh	r2, [r3, #0]
	}

	//check for editMode
	if(mode == 100){
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <calculationClock+0x250>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d15f      	bne.n	8001a20 <calculationClock+0x23c>
		if (minuteNum < 0){
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <calculationClock+0x254>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	da02      	bge.n	800196e <calculationClock+0x18a>
			minuteNum = 59;
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <calculationClock+0x254>)
 800196a:	223b      	movs	r2, #59	; 0x3b
 800196c:	601a      	str	r2, [r3, #0]
		}
		if (hourNum < 0){
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <calculationClock+0x258>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	da02      	bge.n	800197c <calculationClock+0x198>
			hourNum = 23;
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <calculationClock+0x258>)
 8001978:	2217      	movs	r2, #23
 800197a:	601a      	str	r2, [r3, #0]
		}
		if (dayIndex < 0){
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <calculationClock+0x25c>)
 800197e:	f993 3000 	ldrsb.w	r3, [r3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da02      	bge.n	800198c <calculationClock+0x1a8>
			dayIndex = 6;
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <calculationClock+0x25c>)
 8001988:	2206      	movs	r2, #6
 800198a:	701a      	strb	r2, [r3, #0]
		}
		if (date < 1){
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <calculationClock+0x260>)
 800198e:	f993 3000 	ldrsb.w	r3, [r3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	dc33      	bgt.n	80019fe <calculationClock+0x21a>
			if (year % 4 == 0){ //check for FEB 29 days
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <calculationClock+0x264>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	b29b      	uxth	r3, r3
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d115      	bne.n	80019d4 <calculationClock+0x1f0>
				if(monthIndex == 1){
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <calculationClock+0x268>)
 80019aa:	f993 3000 	ldrsb.w	r3, [r3]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d103      	bne.n	80019ba <calculationClock+0x1d6>
					setDayX(29); // 29 days
 80019b2:	201d      	movs	r0, #29
 80019b4:	f7ff fe9e 	bl	80016f4 <setDayX>
 80019b8:	e021      	b.n	80019fe <calculationClock+0x21a>
				}else if(check31Days() == true){
 80019ba:	f7ff fe41 	bl	8001640 <check31Days>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <calculationClock+0x1e8>
					setDayX(31); // 31 days
 80019c4:	201f      	movs	r0, #31
 80019c6:	f7ff fe95 	bl	80016f4 <setDayX>
 80019ca:	e018      	b.n	80019fe <calculationClock+0x21a>
				}else{
					setDayX(30); // 30 days
 80019cc:	201e      	movs	r0, #30
 80019ce:	f7ff fe91 	bl	80016f4 <setDayX>
 80019d2:	e014      	b.n	80019fe <calculationClock+0x21a>
				}
			}else{
				if(monthIndex == 1){
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <calculationClock+0x268>)
 80019d6:	f993 3000 	ldrsb.w	r3, [r3]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d103      	bne.n	80019e6 <calculationClock+0x202>
					setDayX(28); // 28 days
 80019de:	201c      	movs	r0, #28
 80019e0:	f7ff fe88 	bl	80016f4 <setDayX>
 80019e4:	e00b      	b.n	80019fe <calculationClock+0x21a>
				}else if(check31Days() == true){
 80019e6:	f7ff fe2b 	bl	8001640 <check31Days>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <calculationClock+0x214>
					setDayX(31); // 31 days
 80019f0:	201f      	movs	r0, #31
 80019f2:	f7ff fe7f 	bl	80016f4 <setDayX>
 80019f6:	e002      	b.n	80019fe <calculationClock+0x21a>
				}else{
					setDayX(30); // 30 days
 80019f8:	201e      	movs	r0, #30
 80019fa:	f7ff fe7b 	bl	80016f4 <setDayX>
				}
			}
		}
		if (monthIndex < 0){
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <calculationClock+0x268>)
 8001a00:	f993 3000 	ldrsb.w	r3, [r3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da02      	bge.n	8001a0e <calculationClock+0x22a>
			monthIndex = 11;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <calculationClock+0x268>)
 8001a0a:	220b      	movs	r2, #11
 8001a0c:	701a      	strb	r2, [r3, #0]
		}
		if (year < 1){
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <calculationClock+0x264>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dc03      	bgt.n	8001a20 <calculationClock+0x23c>
			year = 9999;
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <calculationClock+0x264>)
 8001a1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a1e:	801a      	strh	r2, [r3, #0]
		}
	}

	saveData();
 8001a20:	f7ff fc90 	bl	8001344 <saveData>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200002f8 	.word	0x200002f8
 8001a2c:	200002d4 	.word	0x200002d4
 8001a30:	20000038 	.word	0x20000038
 8001a34:	200002e4 	.word	0x200002e4
 8001a38:	2000003c 	.word	0x2000003c
 8001a3c:	20000040 	.word	0x20000040
 8001a40:	200000b0 	.word	0x200000b0
 8001a44:	20000061 	.word	0x20000061
 8001a48:	200000b2 	.word	0x200000b2
 8001a4c:	200000b1 	.word	0x200000b1

08001a50 <dayScreen>:

//Date Clock Atomic
void dayScreen(bool status, bool isEdit){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4603      	mov	r3, r0
 8001a58:	460a      	mov	r2, r1
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	71bb      	strb	r3, [r7, #6]

	if (prevDayIndex != dayIndex || isEdit == true){
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <dayScreen+0xe0>)
 8001a62:	f993 2000 	ldrsb.w	r2, [r3]
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <dayScreen+0xe4>)
 8001a68:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d102      	bne.n	8001a76 <dayScreen+0x26>
 8001a70:	79bb      	ldrb	r3, [r7, #6]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d054      	beq.n	8001b20 <dayScreen+0xd0>
		if (status == true){
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d02a      	beq.n	8001ad2 <dayScreen+0x82>
			sprintf(Temp_Buffer_text, "%s", dayText[dayIndex]);
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <dayScreen+0xe4>)
 8001a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <dayScreen+0xe8>)
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	492b      	ldr	r1, [pc, #172]	; (8001b3c <dayScreen+0xec>)
 8001a8e:	482c      	ldr	r0, [pc, #176]	; (8001b40 <dayScreen+0xf0>)
 8001a90:	f00a fe70 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <dayScreen+0xf4>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3b05      	subs	r3, #5
 8001a9c:	b2d9      	uxtb	r1, r3
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <dayScreen+0xf8>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001aaa:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001b28 <dayScreen+0xd8>
 8001aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ab2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ab6:	edc7 7a00 	vstr	s15, [r7]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aca:	481d      	ldr	r0, [pc, #116]	; (8001b40 <dayScreen+0xf0>)
 8001acc:	f004 f910 	bl	8005cf0 <ILI9341_Draw_Text>
 8001ad0:	e021      	b.n	8001b16 <dayScreen+0xc6>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001ad2:	491e      	ldr	r1, [pc, #120]	; (8001b4c <dayScreen+0xfc>)
 8001ad4:	481a      	ldr	r0, [pc, #104]	; (8001b40 <dayScreen+0xf0>)
 8001ad6:	f00a fe4d 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <dayScreen+0xf4>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3b05      	subs	r3, #5
 8001ae2:	b2d9      	uxtb	r1, r3
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <dayScreen+0xf8>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001b28 <dayScreen+0xd8>
 8001af4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001af8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001afc:	edc7 7a00 	vstr	s15, [r7]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <dayScreen+0xf0>)
 8001b12:	f004 f8ed 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevDayIndex = dayIndex;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <dayScreen+0xe4>)
 8001b18:	f993 2000 	ldrsb.w	r2, [r3]
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <dayScreen+0xe0>)
 8001b1e:	701a      	strb	r2, [r3, #0]
	}
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fb99999 	.word	0x3fb99999
 8001b30:	200000b5 	.word	0x200000b5
 8001b34:	200000b0 	.word	0x200000b0
 8001b38:	20000064 	.word	0x20000064
 8001b3c:	0800ebe0 	.word	0x0800ebe0
 8001b40:	2000047c 	.word	0x2000047c
 8001b44:	20000054 	.word	0x20000054
 8001b48:	20000056 	.word	0x20000056
 8001b4c:	0800ebe4 	.word	0x0800ebe4

08001b50 <dateScreen>:
void dateScreen(bool status, bool isEdit){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71bb      	strb	r3, [r7, #6]
	if (prevDate != date || isEdit == true){
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <dateScreen+0xf0>)
 8001b62:	f993 2000 	ldrsb.w	r2, [r3]
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <dateScreen+0xf4>)
 8001b68:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d102      	bne.n	8001b76 <dateScreen+0x26>
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d05a      	beq.n	8001c2c <dateScreen+0xdc>
		if (status == true){
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d02b      	beq.n	8001bd4 <dateScreen+0x84>
			sprintf(Temp_Buffer_text, "%02d", (int)date);
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <dateScreen+0xf4>)
 8001b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4930      	ldr	r1, [pc, #192]	; (8001c48 <dateScreen+0xf8>)
 8001b86:	4831      	ldr	r0, [pc, #196]	; (8001c4c <dateScreen+0xfc>)
 8001b88:	f00a fdf4 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <dateScreen+0x100>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <dateScreen+0x104>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	b2d9      	uxtb	r1, r3
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <dateScreen+0x108>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bac:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001c38 <dateScreen+0xe8>
 8001bb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bb8:	edc7 7a00 	vstr	s15, [r7]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bcc:	481f      	ldr	r0, [pc, #124]	; (8001c4c <dateScreen+0xfc>)
 8001bce:	f004 f88f 	bl	8005cf0 <ILI9341_Draw_Text>
 8001bd2:	e026      	b.n	8001c22 <dateScreen+0xd2>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8001bd4:	4921      	ldr	r1, [pc, #132]	; (8001c5c <dateScreen+0x10c>)
 8001bd6:	481d      	ldr	r0, [pc, #116]	; (8001c4c <dateScreen+0xfc>)
 8001bd8:	f00a fdcc 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <dateScreen+0x100>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <dateScreen+0x104>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3303      	adds	r3, #3
 8001bee:	b2d9      	uxtb	r1, r3
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <dateScreen+0x108>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bfc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001c38 <dateScreen+0xe8>
 8001c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c08:	edc7 7a00 	vstr	s15, [r7]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <dateScreen+0xfc>)
 8001c1e:	f004 f867 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevDate = date;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <dateScreen+0xf4>)
 8001c24:	f993 2000 	ldrsb.w	r2, [r3]
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <dateScreen+0xf0>)
 8001c2a:	701a      	strb	r2, [r3, #0]
	}
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	f3af 8000 	nop.w
 8001c38:	9999999a 	.word	0x9999999a
 8001c3c:	3fb99999 	.word	0x3fb99999
 8001c40:	200000b4 	.word	0x200000b4
 8001c44:	20000061 	.word	0x20000061
 8001c48:	0800ebe8 	.word	0x0800ebe8
 8001c4c:	2000047c 	.word	0x2000047c
 8001c50:	20000054 	.word	0x20000054
 8001c54:	20000058 	.word	0x20000058
 8001c58:	20000056 	.word	0x20000056
 8001c5c:	0800ebf0 	.word	0x0800ebf0

08001c60 <monthScreen>:
void monthScreen(bool status, bool isEdit){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71bb      	strb	r3, [r7, #6]
	if (prevMonthIndex != monthIndex || isEdit == true){
 8001c70:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <monthScreen+0x100>)
 8001c72:	f993 2000 	ldrsb.w	r2, [r3]
 8001c76:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <monthScreen+0x104>)
 8001c78:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d102      	bne.n	8001c86 <monthScreen+0x26>
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d062      	beq.n	8001d4c <monthScreen+0xec>
		if (status == true){
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d031      	beq.n	8001cf0 <monthScreen+0x90>
			sprintf(Temp_Buffer_text, "%s", monthText[monthIndex]);
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <monthScreen+0x104>)
 8001c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <monthScreen+0x108>)
 8001c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4933      	ldr	r1, [pc, #204]	; (8001d6c <monthScreen+0x10c>)
 8001c9e:	4834      	ldr	r0, [pc, #208]	; (8001d70 <monthScreen+0x110>)
 8001ca0:	f00a fd68 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001ca4:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <monthScreen+0x114>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <monthScreen+0x118>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3b05      	subs	r3, #5
 8001cba:	b2d9      	uxtb	r1, r3
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <monthScreen+0x11c>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cc8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001d58 <monthScreen+0xf8>
 8001ccc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cd0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cd4:	edc7 7a00 	vstr	s15, [r7]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce8:	4821      	ldr	r0, [pc, #132]	; (8001d70 <monthScreen+0x110>)
 8001cea:	f004 f801 	bl	8005cf0 <ILI9341_Draw_Text>
 8001cee:	e028      	b.n	8001d42 <monthScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001cf0:	4923      	ldr	r1, [pc, #140]	; (8001d80 <monthScreen+0x120>)
 8001cf2:	481f      	ldr	r0, [pc, #124]	; (8001d70 <monthScreen+0x110>)
 8001cf4:	f00a fd3e 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <monthScreen+0x114>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <monthScreen+0x118>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3b05      	subs	r3, #5
 8001d0e:	b2d9      	uxtb	r1, r3
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <monthScreen+0x11c>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d1c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001d58 <monthScreen+0xf8>
 8001d20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d28:	edc7 7a00 	vstr	s15, [r7]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	2302      	movs	r3, #2
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <monthScreen+0x110>)
 8001d3e:	f003 ffd7 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevMonthIndex = monthIndex;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <monthScreen+0x104>)
 8001d44:	f993 2000 	ldrsb.w	r2, [r3]
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <monthScreen+0x100>)
 8001d4a:	701a      	strb	r2, [r3, #0]
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	f3af 8000 	nop.w
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	3fb99999 	.word	0x3fb99999
 8001d60:	200000b6 	.word	0x200000b6
 8001d64:	200000b1 	.word	0x200000b1
 8001d68:	20000080 	.word	0x20000080
 8001d6c:	0800ebe0 	.word	0x0800ebe0
 8001d70:	2000047c 	.word	0x2000047c
 8001d74:	20000054 	.word	0x20000054
 8001d78:	20000058 	.word	0x20000058
 8001d7c:	20000056 	.word	0x20000056
 8001d80:	0800ebe4 	.word	0x0800ebe4
 8001d84:	00000000 	.word	0x00000000

08001d88 <yearScreen>:
void yearScreen(bool status, bool isEdit){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	4603      	mov	r3, r0
 8001d90:	460a      	mov	r2, r1
 8001d92:	71fb      	strb	r3, [r7, #7]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71bb      	strb	r3, [r7, #6]
	if (prevYear != year || isEdit == true){
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <yearScreen+0x100>)
 8001d9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <yearScreen+0x104>)
 8001da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d102      	bne.n	8001dae <yearScreen+0x26>
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d062      	beq.n	8001e74 <yearScreen+0xec>
		if (status == true){
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d02f      	beq.n	8001e14 <yearScreen+0x8c>
			sprintf(Temp_Buffer_text, "%04d", (int)year);
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <yearScreen+0x104>)
 8001db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4934      	ldr	r1, [pc, #208]	; (8001e90 <yearScreen+0x108>)
 8001dbe:	4835      	ldr	r0, [pc, #212]	; (8001e94 <yearScreen+0x10c>)
 8001dc0:	f00a fcd8 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <yearScreen+0x110>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <yearScreen+0x114>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	0049      	lsls	r1, r1, #1
 8001dd4:	440b      	add	r3, r1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3303      	adds	r3, #3
 8001dde:	b2d9      	uxtb	r1, r3
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <yearScreen+0x118>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001dec:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001e80 <yearScreen+0xf8>
 8001df0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001df4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001df8:	edc7 7a00 	vstr	s15, [r7]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	2302      	movs	r3, #2
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0c:	4821      	ldr	r0, [pc, #132]	; (8001e94 <yearScreen+0x10c>)
 8001e0e:	f003 ff6f 	bl	8005cf0 <ILI9341_Draw_Text>
 8001e12:	e02a      	b.n	8001e6a <yearScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "    ");
 8001e14:	4923      	ldr	r1, [pc, #140]	; (8001ea4 <yearScreen+0x11c>)
 8001e16:	481f      	ldr	r0, [pc, #124]	; (8001e94 <yearScreen+0x10c>)
 8001e18:	f00a fcac 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <yearScreen+0x110>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <yearScreen+0x114>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4619      	mov	r1, r3
 8001e2a:	0049      	lsls	r1, r1, #1
 8001e2c:	440b      	add	r3, r1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3303      	adds	r3, #3
 8001e36:	b2d9      	uxtb	r1, r3
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <yearScreen+0x118>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e44:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001e80 <yearScreen+0xf8>
 8001e48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e50:	edc7 7a00 	vstr	s15, [r7]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <yearScreen+0x10c>)
 8001e66:	f003 ff43 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevYear = year;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <yearScreen+0x104>)
 8001e6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <yearScreen+0x100>)
 8001e72:	801a      	strh	r2, [r3, #0]
	}
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f3af 8000 	nop.w
 8001e80:	9999999a 	.word	0x9999999a
 8001e84:	3fb99999 	.word	0x3fb99999
 8001e88:	200000b8 	.word	0x200000b8
 8001e8c:	200000b2 	.word	0x200000b2
 8001e90:	0800ebf4 	.word	0x0800ebf4
 8001e94:	2000047c 	.word	0x2000047c
 8001e98:	20000054 	.word	0x20000054
 8001e9c:	20000058 	.word	0x20000058
 8001ea0:	20000056 	.word	0x20000056
 8001ea4:	0800ebfc 	.word	0x0800ebfc

08001ea8 <displayDateScreen>:

//Display Date Clock Screen
void displayDateScreen(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8001eac:	2100      	movs	r1, #0
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff fdce 	bl	8001a50 <dayScreen>
	dateScreen(true, false);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff fe4a 	bl	8001b50 <dateScreen>
	monthScreen(true, false);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fece 	bl	8001c60 <monthScreen>
	yearScreen(true, false);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff ff5e 	bl	8001d88 <yearScreen>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <displayAlarmIcon>:

void displayAlarmIcon(bool on){
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	if(on == true){
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8139 	beq.w	8002154 <displayAlarmIcon+0x284>
		//Alarm
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, YELLOW);
 8001ee2:	4b99      	ldr	r3, [pc, #612]	; (8002148 <displayAlarmIcon+0x278>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eee:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002120 <displayAlarmIcon+0x250>
 8001ef2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ef6:	4b95      	ldr	r3, [pc, #596]	; (800214c <displayAlarmIcon+0x27c>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f0a:	ee17 3a90 	vmov	r3, s15
 8001f0e:	b298      	uxth	r0, r3
 8001f10:	4b8f      	ldr	r3, [pc, #572]	; (8002150 <displayAlarmIcon+0x280>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f1c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002128 <displayAlarmIcon+0x258>
 8001f20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f28:	ee17 3a90 	vmov	r3, s15
 8001f2c:	b299      	uxth	r1, r3
 8001f2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f32:	2206      	movs	r2, #6
 8001f34:	f003 fcd9 	bl	80058ea <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, YELLOW);
 8001f38:	4b83      	ldr	r3, [pc, #524]	; (8002148 <displayAlarmIcon+0x278>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f44:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002120 <displayAlarmIcon+0x250>
 8001f48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f4c:	4b7f      	ldr	r3, [pc, #508]	; (800214c <displayAlarmIcon+0x27c>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f60:	ee17 3a90 	vmov	r3, s15
 8001f64:	b298      	uxth	r0, r3
 8001f66:	4b7a      	ldr	r3, [pc, #488]	; (8002150 <displayAlarmIcon+0x280>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f72:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8002130 <displayAlarmIcon+0x260>
 8001f76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f7a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f86:	ee17 3a90 	vmov	r3, s15
 8001f8a:	b299      	uxth	r1, r3
 8001f8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f90:	2203      	movs	r2, #3
 8001f92:	f003 fcaa 	bl	80058ea <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, YELLOW);
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <displayAlarmIcon+0x278>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fa2:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002138 <displayAlarmIcon+0x268>
 8001fa6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001faa:	4b68      	ldr	r3, [pc, #416]	; (800214c <displayAlarmIcon+0x27c>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fba:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001fbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	b298      	uxth	r0, r3
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <displayAlarmIcon+0x280>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fd8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8002140 <displayAlarmIcon+0x270>
 8001fdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fe0:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001fe4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fe8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fec:	ee17 3a90 	vmov	r3, s15
 8001ff0:	b299      	uxth	r1, r3
 8001ff2:	4b55      	ldr	r3, [pc, #340]	; (8002148 <displayAlarmIcon+0x278>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ffe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8002138 <displayAlarmIcon+0x268>
 8002002:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002006:	4b51      	ldr	r3, [pc, #324]	; (800214c <displayAlarmIcon+0x27c>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002012:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002016:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 800201a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800201e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002022:	ee17 3a90 	vmov	r3, s15
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b49      	ldr	r3, [pc, #292]	; (8002150 <displayAlarmIcon+0x280>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002034:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002140 <displayAlarmIcon+0x270>
 8002038:	ee27 7b06 	vmul.f64	d7, d7, d6
 800203c:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8002040:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002044:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002048:	ee17 3a90 	vmov	r3, s15
 800204c:	b29b      	uxth	r3, r3
 800204e:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8002052:	9400      	str	r4, [sp, #0]
 8002054:	f003 fd52 	bl	8005afc <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <displayAlarmIcon+0x278>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002064:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8002138 <displayAlarmIcon+0x268>
 8002068:	ee27 6b06 	vmul.f64	d6, d7, d6
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <displayAlarmIcon+0x27c>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002078:	ee36 7b07 	vadd.f64	d7, d6, d7
 800207c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8002080:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002084:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002088:	ee17 3a90 	vmov	r3, s15
 800208c:	b298      	uxth	r0, r3
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <displayAlarmIcon+0x280>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800209a:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002140 <displayAlarmIcon+0x270>
 800209e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020a2:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80020a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020ae:	ee17 3a90 	vmov	r3, s15
 80020b2:	b299      	uxth	r1, r3
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <displayAlarmIcon+0x278>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020c0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002138 <displayAlarmIcon+0x268>
 80020c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <displayAlarmIcon+0x27c>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020d8:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 80020dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020e4:	ee17 3a90 	vmov	r3, s15
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <displayAlarmIcon+0x280>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020f6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002140 <displayAlarmIcon+0x270>
 80020fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020fe:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8002102:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002106:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800210a:	ee17 3a90 	vmov	r3, s15
 800210e:	b29b      	uxth	r3, r3
 8002110:	2400      	movs	r4, #0
 8002112:	9400      	str	r4, [sp, #0]
 8002114:	f003 fc71 	bl	80059fa <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
	}
}
 8002118:	e134      	b.n	8002384 <displayAlarmIcon+0x4b4>
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w
 8002120:	d70a3d71 	.word	0xd70a3d71
 8002124:	3fed70a3 	.word	0x3fed70a3
 8002128:	0a3d70a4 	.word	0x0a3d70a4
 800212c:	3fc0a3d7 	.word	0x3fc0a3d7
 8002130:	47ae147b 	.word	0x47ae147b
 8002134:	3fc47ae1 	.word	0x3fc47ae1
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	3feccccc 	.word	0x3feccccc
 8002140:	9999999a 	.word	0x9999999a
 8002144:	3fb99999 	.word	0x3fb99999
 8002148:	20000052 	.word	0x20000052
 800214c:	20000054 	.word	0x20000054
 8002150:	20000056 	.word	0x20000056
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
 8002154:	4b98      	ldr	r3, [pc, #608]	; (80023b8 <displayAlarmIcon+0x4e8>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	ee07 3a90 	vmov	s15, r3
 800215c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002160:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002390 <displayAlarmIcon+0x4c0>
 8002164:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002168:	4b94      	ldr	r3, [pc, #592]	; (80023bc <displayAlarmIcon+0x4ec>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002174:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002178:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	b298      	uxth	r0, r3
 8002182:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <displayAlarmIcon+0x4f0>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800218e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002398 <displayAlarmIcon+0x4c8>
 8002192:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002196:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800219a:	ee17 3a90 	vmov	r3, s15
 800219e:	b299      	uxth	r1, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	2206      	movs	r2, #6
 80021a4:	f003 fba1 	bl	80058ea <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
 80021a8:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <displayAlarmIcon+0x4e8>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80021b4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002390 <displayAlarmIcon+0x4c0>
 80021b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021bc:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <displayAlarmIcon+0x4ec>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80021c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021d0:	ee17 3a90 	vmov	r3, s15
 80021d4:	b298      	uxth	r0, r3
 80021d6:	4b7a      	ldr	r3, [pc, #488]	; (80023c0 <displayAlarmIcon+0x4f0>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80021e2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80023a0 <displayAlarmIcon+0x4d0>
 80021e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80021ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021f6:	ee17 3a90 	vmov	r3, s15
 80021fa:	b299      	uxth	r1, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	2203      	movs	r2, #3
 8002200:	f003 fb73 	bl	80058ea <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <displayAlarmIcon+0x4e8>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002210:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80023a8 <displayAlarmIcon+0x4d8>
 8002214:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <displayAlarmIcon+0x4ec>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002224:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002228:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800222c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002230:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002234:	ee17 3a90 	vmov	r3, s15
 8002238:	b298      	uxth	r0, r3
 800223a:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <displayAlarmIcon+0x4f0>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002246:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80023b0 <displayAlarmIcon+0x4e0>
 800224a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800224e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002252:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002256:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800225a:	ee17 3a90 	vmov	r3, s15
 800225e:	b299      	uxth	r1, r3
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <displayAlarmIcon+0x4e8>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800226c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80023a8 <displayAlarmIcon+0x4d8>
 8002270:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002274:	4b51      	ldr	r3, [pc, #324]	; (80023bc <displayAlarmIcon+0x4ec>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002280:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002284:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002288:	ee37 7b06 	vadd.f64	d7, d7, d6
 800228c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002290:	ee17 3a90 	vmov	r3, s15
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <displayAlarmIcon+0x4f0>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022a2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80023b0 <displayAlarmIcon+0x4e0>
 80022a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022aa:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 80022ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022b6:	ee17 3a90 	vmov	r3, s15
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2400      	movs	r4, #0
 80022be:	9400      	str	r4, [sp, #0]
 80022c0:	f003 fc1c 	bl	8005afc <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 80022c4:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <displayAlarmIcon+0x4e8>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022d0:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80023a8 <displayAlarmIcon+0x4d8>
 80022d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <displayAlarmIcon+0x4ec>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022e8:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80022ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022f4:	ee17 3a90 	vmov	r3, s15
 80022f8:	b298      	uxth	r0, r3
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <displayAlarmIcon+0x4f0>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002306:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80023b0 <displayAlarmIcon+0x4e0>
 800230a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800230e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002312:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002316:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800231a:	ee17 3a90 	vmov	r3, s15
 800231e:	b299      	uxth	r1, r3
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <displayAlarmIcon+0x4e8>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800232c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80023a8 <displayAlarmIcon+0x4d8>
 8002330:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <displayAlarmIcon+0x4ec>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002340:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002344:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002348:	ee37 7b06 	vadd.f64	d7, d7, d6
 800234c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002350:	ee17 3a90 	vmov	r3, s15
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <displayAlarmIcon+0x4f0>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002362:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80023b0 <displayAlarmIcon+0x4e0>
 8002366:	ee27 7b06 	vmul.f64	d7, d7, d6
 800236a:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 800236e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002372:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002376:	ee17 3a90 	vmov	r3, s15
 800237a:	b29b      	uxth	r3, r3
 800237c:	2400      	movs	r4, #0
 800237e:	9400      	str	r4, [sp, #0]
 8002380:	f003 fb3b 	bl	80059fa <ILI9341_Draw_Hollow_Rectangle_Coord>
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}
 800238c:	f3af 8000 	nop.w
 8002390:	d70a3d71 	.word	0xd70a3d71
 8002394:	3fed70a3 	.word	0x3fed70a3
 8002398:	0a3d70a4 	.word	0x0a3d70a4
 800239c:	3fc0a3d7 	.word	0x3fc0a3d7
 80023a0:	47ae147b 	.word	0x47ae147b
 80023a4:	3fc47ae1 	.word	0x3fc47ae1
 80023a8:	cccccccd 	.word	0xcccccccd
 80023ac:	3feccccc 	.word	0x3feccccc
 80023b0:	9999999a 	.word	0x9999999a
 80023b4:	3fb99999 	.word	0x3fb99999
 80023b8:	20000052 	.word	0x20000052
 80023bc:	20000054 	.word	0x20000054
 80023c0:	20000056 	.word	0x20000056

080023c4 <topBarScreen>:

//Top Screen
void topBarScreen(){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	displayDateScreen();
 80023c8:	f7ff fd6e 	bl	8001ea8 <displayDateScreen>

	displayAlarmIcon(alarmIsOn);
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <topBarScreen+0x18>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fd7d 	bl	8001ed0 <displayAlarmIcon>
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000060 	.word	0x20000060

080023e0 <resetPrevNum>:

//Reset Prev Values
void resetPrevNum(){
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <resetPrevNum+0x54>)
 80023e6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ea:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <resetPrevNum+0x58>)
 80023ee:	f04f 32ff 	mov.w	r2, #4294967295
 80023f2:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <resetPrevNum+0x5c>)
 80023f6:	f04f 32ff 	mov.w	r2, #4294967295
 80023fa:	601a      	str	r2, [r3, #0]

	prevDayIndex = -1;
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <resetPrevNum+0x60>)
 80023fe:	22ff      	movs	r2, #255	; 0xff
 8002400:	701a      	strb	r2, [r3, #0]
	prevDate = -1;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <resetPrevNum+0x64>)
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	701a      	strb	r2, [r3, #0]
	prevMonthIndex = -1;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <resetPrevNum+0x68>)
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	701a      	strb	r2, [r3, #0]
	prevYear = -1;
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <resetPrevNum+0x6c>)
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	801a      	strh	r2, [r3, #0]

	prevTemp = -1.0;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <resetPrevNum+0x70>)
 8002418:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <resetPrevNum+0x74>)
 800241a:	601a      	str	r2, [r3, #0]
	prevHumid = -1.0;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <resetPrevNum+0x78>)
 800241e:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <resetPrevNum+0x74>)
 8002420:	601a      	str	r2, [r3, #0]
	prevPmTwoPointFive = -1.0;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <resetPrevNum+0x7c>)
 8002424:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <resetPrevNum+0x74>)
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000044 	.word	0x20000044
 8002438:	20000048 	.word	0x20000048
 800243c:	2000004c 	.word	0x2000004c
 8002440:	200000b5 	.word	0x200000b5
 8002444:	200000b4 	.word	0x200000b4
 8002448:	200000b6 	.word	0x200000b6
 800244c:	200000b8 	.word	0x200000b8
 8002450:	20000024 	.word	0x20000024
 8002454:	bf800000 	.word	0xbf800000
 8002458:	20000028 	.word	0x20000028
 800245c:	2000002c 	.word	0x2000002c

08002460 <hourScreen>:

//Clock Screen Atomic
void hourScreen(bool status, bool isEdit){
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af02      	add	r7, sp, #8
 8002466:	4603      	mov	r3, r0
 8002468:	460a      	mov	r2, r1
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	4613      	mov	r3, r2
 800246e:	71bb      	strb	r3, [r7, #6]
	if (prevHourNum != hourNum || isEdit == true){
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <hourScreen+0xd0>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <hourScreen+0xd4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d102      	bne.n	8002482 <hourScreen+0x22>
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d04e      	beq.n	8002520 <hourScreen+0xc0>
		if (status == true){
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d025      	beq.n	80024d4 <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <hourScreen+0xd4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	492a      	ldr	r1, [pc, #168]	; (8002538 <hourScreen+0xd8>)
 8002490:	482a      	ldr	r0, [pc, #168]	; (800253c <hourScreen+0xdc>)
 8002492:	f00a f96f 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <hourScreen+0xe0>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3b05      	subs	r3, #5
 800249e:	b2d9      	uxtb	r1, r3
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <hourScreen+0xe4>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024ac:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002528 <hourScreen+0xc8>
 80024b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024b8:	edc7 7a00 	vstr	s15, [r7]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2306      	movs	r3, #6
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024cc:	481b      	ldr	r0, [pc, #108]	; (800253c <hourScreen+0xdc>)
 80024ce:	f003 fc0f 	bl	8005cf0 <ILI9341_Draw_Text>
 80024d2:	e021      	b.n	8002518 <hourScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80024d4:	491c      	ldr	r1, [pc, #112]	; (8002548 <hourScreen+0xe8>)
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <hourScreen+0xdc>)
 80024d8:	f00a f94c 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <hourScreen+0xe0>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3b05      	subs	r3, #5
 80024e4:	b2d9      	uxtb	r1, r3
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <hourScreen+0xe4>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024f2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002528 <hourScreen+0xc8>
 80024f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024fe:	edc7 7a00 	vstr	s15, [r7]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	2300      	movs	r3, #0
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	2306      	movs	r3, #6
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002512:	480a      	ldr	r0, [pc, #40]	; (800253c <hourScreen+0xdc>)
 8002514:	f003 fbec 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <hourScreen+0xd4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <hourScreen+0xd0>)
 800251e:	6013      	str	r3, [r2, #0]
	}
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	33333333 	.word	0x33333333
 800252c:	3fd33333 	.word	0x3fd33333
 8002530:	2000004c 	.word	0x2000004c
 8002534:	20000040 	.word	0x20000040
 8002538:	0800ebe8 	.word	0x0800ebe8
 800253c:	2000047c 	.word	0x2000047c
 8002540:	20000054 	.word	0x20000054
 8002544:	20000056 	.word	0x20000056
 8002548:	0800ebf0 	.word	0x0800ebf0
 800254c:	00000000 	.word	0x00000000

08002550 <colonScreen>:

void colonScreen(bool status){
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af02      	add	r7, sp, #8
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	if (status == true){
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d022      	beq.n	80025a6 <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8002560:	4927      	ldr	r1, [pc, #156]	; (8002600 <colonScreen+0xb0>)
 8002562:	4828      	ldr	r0, [pc, #160]	; (8002604 <colonScreen+0xb4>)
 8002564:	f00a f906 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <colonScreen+0xb8>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3349      	adds	r3, #73	; 0x49
 8002570:	b2d9      	uxtb	r1, r3
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <colonScreen+0xbc>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800257e:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80025f8 <colonScreen+0xa8>
 8002582:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002586:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800258a:	edc7 7a00 	vstr	s15, [r7]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2304      	movs	r3, #4
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800259e:	4819      	ldr	r0, [pc, #100]	; (8002604 <colonScreen+0xb4>)
 80025a0:	f003 fba6 	bl	8005cf0 <ILI9341_Draw_Text>
	}
	else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
	}
}
 80025a4:	e021      	b.n	80025ea <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 80025a6:	491a      	ldr	r1, [pc, #104]	; (8002610 <colonScreen+0xc0>)
 80025a8:	4816      	ldr	r0, [pc, #88]	; (8002604 <colonScreen+0xb4>)
 80025aa:	f00a f8e3 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <colonScreen+0xb8>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3349      	adds	r3, #73	; 0x49
 80025b6:	b2d9      	uxtb	r1, r3
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <colonScreen+0xbc>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025c4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80025f8 <colonScreen+0xa8>
 80025c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025d0:	edc7 7a00 	vstr	s15, [r7]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2304      	movs	r3, #4
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <colonScreen+0xb4>)
 80025e6:	f003 fb83 	bl	8005cf0 <ILI9341_Draw_Text>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	66666666 	.word	0x66666666
 80025fc:	3fd66666 	.word	0x3fd66666
 8002600:	0800ec04 	.word	0x0800ec04
 8002604:	2000047c 	.word	0x2000047c
 8002608:	20000054 	.word	0x20000054
 800260c:	20000056 	.word	0x20000056
 8002610:	0800ec08 	.word	0x0800ec08
 8002614:	00000000 	.word	0x00000000

08002618 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af02      	add	r7, sp, #8
 800261e:	4603      	mov	r3, r0
 8002620:	460a      	mov	r2, r1
 8002622:	71fb      	strb	r3, [r7, #7]
 8002624:	4613      	mov	r3, r2
 8002626:	71bb      	strb	r3, [r7, #6]
	if (prevMinuteNum != minuteNum || isEdit == true){
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <minuteScreen+0xd0>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <minuteScreen+0xd4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d102      	bne.n	800263a <minuteScreen+0x22>
 8002634:	79bb      	ldrb	r3, [r7, #6]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04e      	beq.n	80026d8 <minuteScreen+0xc0>
		if (status == true){
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d025      	beq.n	800268c <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <minuteScreen+0xd4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	492a      	ldr	r1, [pc, #168]	; (80026f0 <minuteScreen+0xd8>)
 8002648:	482a      	ldr	r0, [pc, #168]	; (80026f4 <minuteScreen+0xdc>)
 800264a:	f00a f893 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 800264e:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <minuteScreen+0xe0>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3361      	adds	r3, #97	; 0x61
 8002656:	b2d9      	uxtb	r1, r3
 8002658:	4b28      	ldr	r3, [pc, #160]	; (80026fc <minuteScreen+0xe4>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002664:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80026e0 <minuteScreen+0xc8>
 8002668:	ee27 7b06 	vmul.f64	d7, d7, d6
 800266c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002670:	edc7 7a00 	vstr	s15, [r7]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	2300      	movs	r3, #0
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	2306      	movs	r3, #6
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002684:	481b      	ldr	r0, [pc, #108]	; (80026f4 <minuteScreen+0xdc>)
 8002686:	f003 fb33 	bl	8005cf0 <ILI9341_Draw_Text>
 800268a:	e021      	b.n	80026d0 <minuteScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 800268c:	491c      	ldr	r1, [pc, #112]	; (8002700 <minuteScreen+0xe8>)
 800268e:	4819      	ldr	r0, [pc, #100]	; (80026f4 <minuteScreen+0xdc>)
 8002690:	f00a f870 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <minuteScreen+0xe0>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3361      	adds	r3, #97	; 0x61
 800269c:	b2d9      	uxtb	r1, r3
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <minuteScreen+0xe4>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026aa:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80026e0 <minuteScreen+0xc8>
 80026ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026b6:	edc7 7a00 	vstr	s15, [r7]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	2300      	movs	r3, #0
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2306      	movs	r3, #6
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ca:	480a      	ldr	r0, [pc, #40]	; (80026f4 <minuteScreen+0xdc>)
 80026cc:	f003 fb10 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <minuteScreen+0xd4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <minuteScreen+0xd0>)
 80026d6:	6013      	str	r3, [r2, #0]
	}
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	33333333 	.word	0x33333333
 80026e4:	3fd33333 	.word	0x3fd33333
 80026e8:	20000048 	.word	0x20000048
 80026ec:	2000003c 	.word	0x2000003c
 80026f0:	0800ebe8 	.word	0x0800ebe8
 80026f4:	2000047c 	.word	0x2000047c
 80026f8:	20000054 	.word	0x20000054
 80026fc:	20000056 	.word	0x20000056
 8002700:	0800ebf0 	.word	0x0800ebf0
 8002704:	00000000 	.word	0x00000000

08002708 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af02      	add	r7, sp, #8
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
	if (prevSecondNum != secondNum || isEdit == true){
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <secondScreen+0x138>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b49      	ldr	r3, [pc, #292]	; (8002844 <secondScreen+0x13c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d102      	bne.n	800272a <secondScreen+0x22>
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d07c      	beq.n	8002824 <secondScreen+0x11c>
		if (status == true){
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03c      	beq.n	80027aa <secondScreen+0xa2>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <secondScreen+0x13c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4944      	ldr	r1, [pc, #272]	; (8002848 <secondScreen+0x140>)
 8002738:	4844      	ldr	r0, [pc, #272]	; (800284c <secondScreen+0x144>)
 800273a:	f00a f81b 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <secondScreen+0x148>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800274a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002830 <secondScreen+0x128>
 800274e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002752:	4b40      	ldr	r3, [pc, #256]	; (8002854 <secondScreen+0x14c>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800275e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002762:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002766:	ee37 7b46 	vsub.f64	d7, d7, d6
 800276a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800276e:	edc7 7a00 	vstr	s15, [r7]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2d9      	uxtb	r1, r3
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <secondScreen+0x150>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002782:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002838 <secondScreen+0x130>
 8002786:	ee27 7b06 	vmul.f64	d7, d7, d6
 800278a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800278e:	edc7 7a00 	vstr	s15, [r7]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	2300      	movs	r3, #0
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	2302      	movs	r3, #2
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a2:	482a      	ldr	r0, [pc, #168]	; (800284c <secondScreen+0x144>)
 80027a4:	f003 faa4 	bl	8005cf0 <ILI9341_Draw_Text>
 80027a8:	e038      	b.n	800281c <secondScreen+0x114>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80027aa:	492c      	ldr	r1, [pc, #176]	; (800285c <secondScreen+0x154>)
 80027ac:	4827      	ldr	r0, [pc, #156]	; (800284c <secondScreen+0x144>)
 80027ae:	f009 ffe1 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 80027b2:	4b27      	ldr	r3, [pc, #156]	; (8002850 <secondScreen+0x148>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027be:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002830 <secondScreen+0x128>
 80027c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <secondScreen+0x14c>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80027d6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80027da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027e2:	edc7 7a00 	vstr	s15, [r7]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2d9      	uxtb	r1, r3
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <secondScreen+0x150>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027f6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002838 <secondScreen+0x130>
 80027fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002802:	edc7 7a00 	vstr	s15, [r7]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	2300      	movs	r3, #0
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	2302      	movs	r3, #2
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002816:	480d      	ldr	r0, [pc, #52]	; (800284c <secondScreen+0x144>)
 8002818:	f003 fa6a 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <secondScreen+0x13c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <secondScreen+0x138>)
 8002822:	6013      	str	r3, [r2, #0]
	}
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	f3af 8000 	nop.w
 8002830:	cccccccd 	.word	0xcccccccd
 8002834:	3feccccc 	.word	0x3feccccc
 8002838:	ae147ae1 	.word	0xae147ae1
 800283c:	3fdae147 	.word	0x3fdae147
 8002840:	20000044 	.word	0x20000044
 8002844:	20000038 	.word	0x20000038
 8002848:	0800ebe8 	.word	0x0800ebe8
 800284c:	2000047c 	.word	0x2000047c
 8002850:	20000052 	.word	0x20000052
 8002854:	20000054 	.word	0x20000054
 8002858:	20000056 	.word	0x20000056
 800285c:	0800ebf0 	.word	0x0800ebf0

08002860 <displayClockScreen>:

//Display Clock Screen
void displayClockScreen(){
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

	if (halfsecondState == false){ // colon behaviour
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <displayClockScreen+0x3c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <displayClockScreen+0x1a>
		colonScreen(true);
 8002872:	2001      	movs	r0, #1
 8002874:	f7ff fe6c 	bl	8002550 <colonScreen>
 8002878:	e002      	b.n	8002880 <displayClockScreen+0x20>
	}
	else{
		colonScreen(false);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff fe68 	bl	8002550 <colonScreen>
	}

	secondScreen(true, false);
 8002880:	2100      	movs	r1, #0
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff ff40 	bl	8002708 <secondScreen>
	minuteScreen(true, false);
 8002888:	2100      	movs	r1, #0
 800288a:	2001      	movs	r0, #1
 800288c:	f7ff fec4 	bl	8002618 <minuteScreen>
	hourScreen(true, false);
 8002890:	2100      	movs	r1, #0
 8002892:	2001      	movs	r0, #1
 8002894:	f7ff fde4 	bl	8002460 <hourScreen>
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000050 	.word	0x20000050

080028a0 <staticClockScreen>:

void staticClockScreen(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	colonScreen(true);
 80028a4:	2001      	movs	r0, #1
 80028a6:	f7ff fe53 	bl	8002550 <colonScreen>
	hourScreen(true, false);
 80028aa:	2100      	movs	r1, #0
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff fdd7 	bl	8002460 <hourScreen>
	minuteScreen(true, false);
 80028b2:	2100      	movs	r1, #0
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7ff feaf 	bl	8002618 <minuteScreen>
	secondScreen(true, false);
 80028ba:	2100      	movs	r1, #0
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff ff23 	bl	8002708 <secondScreen>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <editHourScreen>:

//Edit Clock Screen
void editHourScreen()
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	displayDateScreen(); // Init first
 80028cc:	f7ff faec 	bl	8001ea8 <displayDateScreen>
	colonScreen(true);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7ff fe3d 	bl	8002550 <colonScreen>
	minuteScreen(true, false);
 80028d6:	2100      	movs	r1, #0
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff fe9d 	bl	8002618 <minuteScreen>
	secondScreen(true, false);
 80028de:	2100      	movs	r1, #0
 80028e0:	2001      	movs	r0, #1
 80028e2:	f7ff ff11 	bl	8002708 <secondScreen>

	if (halfsecondState == false){ // hour
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <editHourScreen+0x44>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <editHourScreen+0x36>
		hourScreen(false, true);
 80028f4:	2101      	movs	r1, #1
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7ff fdb2 	bl	8002460 <hourScreen>
	}
	else{
		hourScreen(true, true);
	}
}
 80028fc:	e003      	b.n	8002906 <editHourScreen+0x3e>
		hourScreen(true, true);
 80028fe:	2101      	movs	r1, #1
 8002900:	2001      	movs	r0, #1
 8002902:	f7ff fdad 	bl	8002460 <hourScreen>
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000050 	.word	0x20000050

08002910 <editMinuteScreen>:
void editMinuteScreen(){
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002914:	2001      	movs	r0, #1
 8002916:	f7ff fe1b 	bl	8002550 <colonScreen>
	hourScreen(true, false);
 800291a:	2100      	movs	r1, #0
 800291c:	2001      	movs	r0, #1
 800291e:	f7ff fd9f 	bl	8002460 <hourScreen>
	secondScreen(true, false);
 8002922:	2100      	movs	r1, #0
 8002924:	2001      	movs	r0, #1
 8002926:	f7ff feef 	bl	8002708 <secondScreen>

	if (halfsecondState == false){ //minute
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <editMinuteScreen+0x40>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	f083 0301 	eor.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <editMinuteScreen+0x32>
		minuteScreen(false, true);
 8002938:	2101      	movs	r1, #1
 800293a:	2000      	movs	r0, #0
 800293c:	f7ff fe6c 	bl	8002618 <minuteScreen>
	}
	else{
		minuteScreen(true, true);
	}
}
 8002940:	e003      	b.n	800294a <editMinuteScreen+0x3a>
		minuteScreen(true, true);
 8002942:	2101      	movs	r1, #1
 8002944:	2001      	movs	r0, #1
 8002946:	f7ff fe67 	bl	8002618 <minuteScreen>
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000050 	.word	0x20000050

08002954 <editSecondScreen>:
void editSecondScreen(){
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002958:	2001      	movs	r0, #1
 800295a:	f7ff fdf9 	bl	8002550 <colonScreen>
	hourScreen(true, false);
 800295e:	2100      	movs	r1, #0
 8002960:	2001      	movs	r0, #1
 8002962:	f7ff fd7d 	bl	8002460 <hourScreen>
	minuteScreen(true, false);
 8002966:	2100      	movs	r1, #0
 8002968:	2001      	movs	r0, #1
 800296a:	f7ff fe55 	bl	8002618 <minuteScreen>

	if (halfsecondState == false){ //second
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <editSecondScreen+0x40>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	f083 0301 	eor.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <editSecondScreen+0x32>
		secondScreen(false, true);
 800297c:	2101      	movs	r1, #1
 800297e:	2000      	movs	r0, #0
 8002980:	f7ff fec2 	bl	8002708 <secondScreen>
	}
	else{
		secondScreen(true, true);
	}
}
 8002984:	e003      	b.n	800298e <editSecondScreen+0x3a>
		secondScreen(true, true);
 8002986:	2101      	movs	r1, #1
 8002988:	2001      	movs	r0, #1
 800298a:	f7ff febd 	bl	8002708 <secondScreen>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000050 	.word	0x20000050

08002998 <editDayScreen>:

//Edit Date Clock Screen
void editDayScreen()
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	dateScreen(true, false);
 800299c:	2100      	movs	r1, #0
 800299e:	2001      	movs	r0, #1
 80029a0:	f7ff f8d6 	bl	8001b50 <dateScreen>
	monthScreen(true, false);
 80029a4:	2100      	movs	r1, #0
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7ff f95a 	bl	8001c60 <monthScreen>
	yearScreen(true, false);
 80029ac:	2100      	movs	r1, #0
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff f9ea 	bl	8001d88 <yearScreen>

	if (halfsecondState == false){ // day
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <editDayScreen+0x40>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <editDayScreen+0x34>
		dayScreen(false, true);
 80029c2:	2101      	movs	r1, #1
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff f843 	bl	8001a50 <dayScreen>
	}
	else{
		dayScreen(true, true);
	}
}
 80029ca:	e003      	b.n	80029d4 <editDayScreen+0x3c>
		dayScreen(true, true);
 80029cc:	2101      	movs	r1, #1
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7ff f83e 	bl	8001a50 <dayScreen>
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000050 	.word	0x20000050

080029dc <editDateScreen>:
void editDateScreen()
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 80029e0:	2100      	movs	r1, #0
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7ff f834 	bl	8001a50 <dayScreen>
	monthScreen(true, false);
 80029e8:	2100      	movs	r1, #0
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff f938 	bl	8001c60 <monthScreen>
	yearScreen(true, false);
 80029f0:	2100      	movs	r1, #0
 80029f2:	2001      	movs	r0, #1
 80029f4:	f7ff f9c8 	bl	8001d88 <yearScreen>

	if (halfsecondState == false){ // date
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <editDateScreen+0x40>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <editDateScreen+0x34>
		dateScreen(false, true);
 8002a06:	2101      	movs	r1, #1
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff f8a1 	bl	8001b50 <dateScreen>
	}
	else{
		dateScreen(true, true);
	}
}
 8002a0e:	e003      	b.n	8002a18 <editDateScreen+0x3c>
		dateScreen(true, true);
 8002a10:	2101      	movs	r1, #1
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7ff f89c 	bl	8001b50 <dateScreen>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000050 	.word	0x20000050

08002a20 <editMonthScreen>:
void editMonthScreen()
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8002a24:	2100      	movs	r1, #0
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7ff f812 	bl	8001a50 <dayScreen>
	dateScreen(true, false);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7ff f88e 	bl	8001b50 <dateScreen>
	yearScreen(true, false);
 8002a34:	2100      	movs	r1, #0
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff f9a6 	bl	8001d88 <yearScreen>

	if (halfsecondState == false){ // month
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <editMonthScreen+0x40>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <editMonthScreen+0x34>
		monthScreen(false, true);
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff f907 	bl	8001c60 <monthScreen>
	}
	else{
		monthScreen(true, true);
	}
}
 8002a52:	e003      	b.n	8002a5c <editMonthScreen+0x3c>
		monthScreen(true, true);
 8002a54:	2101      	movs	r1, #1
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7ff f902 	bl	8001c60 <monthScreen>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000050 	.word	0x20000050

08002a64 <editYearScreen>:
void editYearScreen()
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	staticClockScreen(); // init Clock first in editing mode
 8002a68:	f7ff ff1a 	bl	80028a0 <staticClockScreen>
	dayScreen(true, false);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe ffee 	bl	8001a50 <dayScreen>
	dateScreen(true, false);
 8002a74:	2100      	movs	r1, #0
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7ff f86a 	bl	8001b50 <dateScreen>
	monthScreen(true, false);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7ff f8ee 	bl	8001c60 <monthScreen>

	if (halfsecondState == false){ // day
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <editYearScreen+0x44>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f083 0301 	eor.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <editYearScreen+0x38>
		yearScreen(false, true);
 8002a92:	2101      	movs	r1, #1
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7ff f977 	bl	8001d88 <yearScreen>
	}
	else{
		yearScreen(true, true);
	}
}
 8002a9a:	e003      	b.n	8002aa4 <editYearScreen+0x40>
		yearScreen(true, true);
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7ff f972 	bl	8001d88 <yearScreen>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000050 	.word	0x20000050
 8002aac:	00000000 	.word	0x00000000

08002ab0 <bottomBarScreen>:

//Bottom Screen
void bottomBarScreen(){
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomHeight = maxHeight * 0.87;
 8002aba:	4bb3      	ldr	r3, [pc, #716]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ac6:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002d70 <bottomBarScreen+0x2c0>
 8002aca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ace:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ad2:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ad6:	793b      	ldrb	r3, [r7, #4]
 8002ad8:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 8002ada:	2333      	movs	r3, #51	; 0x33
 8002adc:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth * 0.25 + 51;
 8002ade:	4bab      	ldr	r3, [pc, #684]	; (8002d8c <bottomBarScreen+0x2dc>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002aea:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002aee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002af2:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002d78 <bottomBarScreen+0x2c8>
 8002af6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002afa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002afe:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b02:	793b      	ldrb	r3, [r7, #4]
 8002b04:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth * 0.50 + 51;
 8002b06:	4ba1      	ldr	r3, [pc, #644]	; (8002d8c <bottomBarScreen+0x2dc>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b12:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b1a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002d78 <bottomBarScreen+0x2c8>
 8002b1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b26:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b2a:	793b      	ldrb	r3, [r7, #4]
 8002b2c:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002b2e:	4b97      	ldr	r3, [pc, #604]	; (8002d8c <bottomBarScreen+0x2dc>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b3a:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002b3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b42:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002d78 <bottomBarScreen+0x2c8>
 8002b46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b4e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b52:	793b      	ldrb	r3, [r7, #4]
 8002b54:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 8002b56:	2337      	movs	r3, #55	; 0x37
 8002b58:	727b      	strb	r3, [r7, #9]

	//Rectangle Background Color
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1 + bottomWidth, maxHeight, RED);
 8002b5a:	7b7b      	ldrb	r3, [r7, #13]
 8002b5c:	b298      	uxth	r0, r3
 8002b5e:	7bbb      	ldrb	r3, [r7, #14]
 8002b60:	b299      	uxth	r1, r3
 8002b62:	7b7b      	ldrb	r3, [r7, #13]
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	7a7b      	ldrb	r3, [r7, #9]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b86      	ldr	r3, [pc, #536]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002b76:	9400      	str	r4, [sp, #0]
 8002b78:	f002 ffc0 	bl	8005afc <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2 + bottomWidth, maxHeight, YELLOW);
 8002b7c:	7b3b      	ldrb	r3, [r7, #12]
 8002b7e:	b298      	uxth	r0, r3
 8002b80:	7bbb      	ldrb	r3, [r7, #14]
 8002b82:	b299      	uxth	r1, r3
 8002b84:	7b3b      	ldrb	r3, [r7, #12]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	7a7b      	ldrb	r3, [r7, #9]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b7d      	ldr	r3, [pc, #500]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8002b98:	9400      	str	r4, [sp, #0]
 8002b9a:	f002 ffaf 	bl	8005afc <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3 + bottomWidth, maxHeight, CYAN);
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	b298      	uxth	r0, r3
 8002ba2:	7bbb      	ldrb	r3, [r7, #14]
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	7a7b      	ldrb	r3, [r7, #9]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b75      	ldr	r3, [pc, #468]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8002bba:	9400      	str	r4, [sp, #0]
 8002bbc:	f002 ff9e 	bl	8005afc <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4 + bottomWidth, maxHeight, GREEN);
 8002bc0:	7abb      	ldrb	r3, [r7, #10]
 8002bc2:	b298      	uxth	r0, r3
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	b299      	uxth	r1, r3
 8002bc8:	7abb      	ldrb	r3, [r7, #10]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	7a7b      	ldrb	r3, [r7, #9]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8002bdc:	9400      	str	r4, [sp, #0]
 8002bde:	f002 ff8d 	bl	8005afc <ILI9341_Draw_Filled_Rectangle_Coord>

	//Text Layout
	sprintf(Temp_Buffer_text, "MOD");
 8002be2:	496b      	ldr	r1, [pc, #428]	; (8002d90 <bottomBarScreen+0x2e0>)
 8002be4:	486b      	ldr	r0, [pc, #428]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002be6:	f009 fdc5 	bl	800c774 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.9, BLACK, size, RED);
 8002bea:	4b6b      	ldr	r3, [pc, #428]	; (8002d98 <bottomBarScreen+0x2e8>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b2d9      	uxtb	r1, r3
 8002bf0:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bfc:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002d80 <bottomBarScreen+0x2d0>
 8002c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c08:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c0c:	793b      	ldrb	r3, [r7, #4]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002c18:	9001      	str	r0, [sp, #4]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	485d      	ldr	r0, [pc, #372]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002c20:	f003 f866 	bl	8005cf0 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "ADJ");
 8002c24:	495d      	ldr	r1, [pc, #372]	; (8002d9c <bottomBarScreen+0x2ec>)
 8002c26:	485b      	ldr	r0, [pc, #364]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002c28:	f009 fda4 	bl	800c774 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.25 + offsetWidth, maxHeight * 0.9, BLACK, size, YELLOW);
 8002c2c:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <bottomBarScreen+0x2dc>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	ee07 3a90 	vmov	s15, r3
 8002c34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c38:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002c3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c40:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <bottomBarScreen+0x2e8>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c50:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c54:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c58:	793b      	ldrb	r3, [r7, #4]
 8002c5a:	b2d9      	uxtb	r1, r3
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c68:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002d80 <bottomBarScreen+0x2d0>
 8002c6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c74:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c78:	793b      	ldrb	r3, [r7, #4]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c84:	9001      	str	r0, [sp, #4]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	4842      	ldr	r0, [pc, #264]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002c8c:	f003 f830 	bl	8005cf0 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "BWD");
 8002c90:	4943      	ldr	r1, [pc, #268]	; (8002da0 <bottomBarScreen+0x2f0>)
 8002c92:	4840      	ldr	r0, [pc, #256]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002c94:	f009 fd6e 	bl	800c774 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.5 + offsetWidth, maxHeight * 0.9, BLACK, size, CYAN);
 8002c98:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <bottomBarScreen+0x2dc>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ca4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <bottomBarScreen+0x2e8>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002cc4:	793b      	ldrb	r3, [r7, #4]
 8002cc6:	b2d9      	uxtb	r1, r3
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	ee07 3a90 	vmov	s15, r3
 8002cd0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cd4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002d80 <bottomBarScreen+0x2d0>
 8002cd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ce0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ce4:	793b      	ldrb	r3, [r7, #4]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002cf0:	9001      	str	r0, [sp, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4827      	ldr	r0, [pc, #156]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002cf8:	f002 fffa 	bl	8005cf0 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "FWD");
 8002cfc:	4929      	ldr	r1, [pc, #164]	; (8002da4 <bottomBarScreen+0x2f4>)
 8002cfe:	4825      	ldr	r0, [pc, #148]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002d00:	f009 fd38 	bl	800c774 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.75 + offsetWidth, maxHeight * 0.9, BLACK, size, GREEN);
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <bottomBarScreen+0x2dc>)
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d10:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002d14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d18:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <bottomBarScreen+0x2e8>)
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d30:	793b      	ldrb	r3, [r7, #4]
 8002d32:	b2d9      	uxtb	r1, r3
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <bottomBarScreen+0x2d8>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d40:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002d80 <bottomBarScreen+0x2d0>
 8002d44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d50:	793b      	ldrb	r3, [r7, #4]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002d5c:	9001      	str	r0, [sp, #4]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2300      	movs	r3, #0
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <bottomBarScreen+0x2e4>)
 8002d64:	f002 ffc4 	bl	8005cf0 <ILI9341_Draw_Text>
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	3d70a3d7 	.word	0x3d70a3d7
 8002d74:	3febd70a 	.word	0x3febd70a
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	40498000 	.word	0x40498000
 8002d80:	cccccccd 	.word	0xcccccccd
 8002d84:	3feccccc 	.word	0x3feccccc
 8002d88:	20000056 	.word	0x20000056
 8002d8c:	20000052 	.word	0x20000052
 8002d90:	0800ec0c 	.word	0x0800ec0c
 8002d94:	2000047c 	.word	0x2000047c
 8002d98:	20000054 	.word	0x20000054
 8002d9c:	0800ec10 	.word	0x0800ec10
 8002da0:	0800ec14 	.word	0x0800ec14
 8002da4:	0800ec18 	.word	0x0800ec18

08002da8 <bottomBarScreenUpdate>:
void bottomBarScreenUpdate(){
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 8002dae:	2302      	movs	r3, #2
 8002db0:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 8002db2:	2333      	movs	r3, #51	; 0x33
 8002db4:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomHeight = maxHeight * 0.87;
 8002db6:	4bc6      	ldr	r3, [pc, #792]	; (80030d0 <bottomBarScreenUpdate+0x328>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002dc2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80030a8 <bottomBarScreenUpdate+0x300>
 8002dc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002dce:	edc7 7a01 	vstr	s15, [r7, #4]
 8002dd2:	793b      	ldrb	r3, [r7, #4]
 8002dd4:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002dd6:	4bbf      	ldr	r3, [pc, #764]	; (80030d4 <bottomBarScreenUpdate+0x32c>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002de2:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002de6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dea:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 80030b0 <bottomBarScreenUpdate+0x308>
 8002dee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002df2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002df6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002dfa:	793b      	ldrb	r3, [r7, #4]
 8002dfc:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth = 55;
 8002dfe:	2337      	movs	r3, #55	; 0x37
 8002e00:	72fb      	strb	r3, [r7, #11]

	//Update Temperature
	if(prevTemp != temp){
 8002e02:	4bb5      	ldr	r3, [pc, #724]	; (80030d8 <bottomBarScreenUpdate+0x330>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	4bb4      	ldr	r3, [pc, #720]	; (80030dc <bottomBarScreenUpdate+0x334>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d059      	beq.n	8002ecc <bottomBarScreenUpdate+0x124>
		sprintf(Temp_Buffer_text, "%0.1f 'C", temp);
 8002e18:	4bb0      	ldr	r3, [pc, #704]	; (80030dc <bottomBarScreenUpdate+0x334>)
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e22:	ec53 2b17 	vmov	r2, r3, d7
 8002e26:	49ae      	ldr	r1, [pc, #696]	; (80030e0 <bottomBarScreenUpdate+0x338>)
 8002e28:	48ae      	ldr	r0, [pc, #696]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 8002e2a:	f009 fca3 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002e2e:	4ba9      	ldr	r3, [pc, #676]	; (80030d4 <bottomBarScreenUpdate+0x32c>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e3a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80030b8 <bottomBarScreenUpdate+0x310>
 8002e3e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e42:	4ba9      	ldr	r3, [pc, #676]	; (80030e8 <bottomBarScreenUpdate+0x340>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e56:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e5a:	793b      	ldrb	r3, [r7, #4]
 8002e5c:	b2d9      	uxtb	r1, r3
 8002e5e:	4b9c      	ldr	r3, [pc, #624]	; (80030d0 <bottomBarScreenUpdate+0x328>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e6a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80030c0 <bottomBarScreenUpdate+0x318>
 8002e6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e72:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002e76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e82:	793b      	ldrb	r3, [r7, #4]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	9001      	str	r0, [sp, #4]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e94:	4893      	ldr	r0, [pc, #588]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 8002e96:	f002 ff2b 	bl	8005cf0 <ILI9341_Draw_Text>
		prevTemp = temp;
 8002e9a:	4b90      	ldr	r3, [pc, #576]	; (80030dc <bottomBarScreenUpdate+0x334>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a8e      	ldr	r2, [pc, #568]	; (80030d8 <bottomBarScreenUpdate+0x330>)
 8002ea0:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	b298      	uxth	r0, r3
 8002ea6:	7b7b      	ldrb	r3, [r7, #13]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b37      	subs	r3, #55	; 0x37
 8002eac:	b299      	uxth	r1, r3
 8002eae:	7b3b      	ldrb	r3, [r7, #12]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <bottomBarScreenUpdate+0x328>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	3b3e      	subs	r3, #62	; 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002ec6:	9400      	str	r4, [sp, #0]
 8002ec8:	f002 fd97 	bl	80059fa <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update Humidity
	if(prevHumid != humid){
 8002ecc:	4b87      	ldr	r3, [pc, #540]	; (80030ec <bottomBarScreenUpdate+0x344>)
 8002ece:	ed93 7a00 	vldr	s14, [r3]
 8002ed2:	4b87      	ldr	r3, [pc, #540]	; (80030f0 <bottomBarScreenUpdate+0x348>)
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d059      	beq.n	8002f96 <bottomBarScreenUpdate+0x1ee>
		sprintf(Temp_Buffer_text, "%0.1f %%", humid);
 8002ee2:	4b83      	ldr	r3, [pc, #524]	; (80030f0 <bottomBarScreenUpdate+0x348>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002eec:	ec53 2b17 	vmov	r2, r3, d7
 8002ef0:	4980      	ldr	r1, [pc, #512]	; (80030f4 <bottomBarScreenUpdate+0x34c>)
 8002ef2:	487c      	ldr	r0, [pc, #496]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 8002ef4:	f009 fc3e 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.55 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002ef8:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <bottomBarScreenUpdate+0x32c>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f04:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80030c8 <bottomBarScreenUpdate+0x320>
 8002f08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f0c:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <bottomBarScreenUpdate+0x340>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f20:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f24:	793b      	ldrb	r3, [r7, #4]
 8002f26:	b2d9      	uxtb	r1, r3
 8002f28:	4b69      	ldr	r3, [pc, #420]	; (80030d0 <bottomBarScreenUpdate+0x328>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f34:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80030c0 <bottomBarScreenUpdate+0x318>
 8002f38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f3c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002f40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f48:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f4c:	793b      	ldrb	r3, [r7, #4]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2000      	movs	r0, #0
 8002f56:	9001      	str	r0, [sp, #4]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f5e:	4861      	ldr	r0, [pc, #388]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 8002f60:	f002 fec6 	bl	8005cf0 <ILI9341_Draw_Text>
		prevHumid = humid;
 8002f64:	4b62      	ldr	r3, [pc, #392]	; (80030f0 <bottomBarScreenUpdate+0x348>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a60      	ldr	r2, [pc, #384]	; (80030ec <bottomBarScreenUpdate+0x344>)
 8002f6a:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	b298      	uxth	r0, r3
 8002f70:	7b7b      	ldrb	r3, [r7, #13]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b37      	subs	r3, #55	; 0x37
 8002f76:	b299      	uxth	r1, r3
 8002f78:	7b3b      	ldrb	r3, [r7, #12]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b52      	ldr	r3, [pc, #328]	; (80030d0 <bottomBarScreenUpdate+0x328>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	3b3e      	subs	r3, #62	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002f90:	9400      	str	r4, [sp, #0]
 8002f92:	f002 fd32 	bl	80059fa <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update PM2.5
	if(prevPmTwoPointFive != pmTwoPointFive){ // update this value please
 8002f96:	4b58      	ldr	r3, [pc, #352]	; (80030f8 <bottomBarScreenUpdate+0x350>)
 8002f98:	ed93 7a00 	vldr	s14, [r3]
 8002f9c:	4b57      	ldr	r3, [pc, #348]	; (80030fc <bottomBarScreenUpdate+0x354>)
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	eeb4 7a67 	vcmp.f32	s14, s15
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	f000 80c6 	beq.w	800313a <bottomBarScreenUpdate+0x392>
		sprintf(Temp_Buffer_text, "      %03d ug/m^3", (int)pmTwoPointFive);
 8002fae:	4b53      	ldr	r3, [pc, #332]	; (80030fc <bottomBarScreenUpdate+0x354>)
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fb8:	ee17 2a90 	vmov	r2, s15
 8002fbc:	4950      	ldr	r1, [pc, #320]	; (8003100 <bottomBarScreenUpdate+0x358>)
 8002fbe:	4849      	ldr	r0, [pc, #292]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 8002fc0:	f009 fbd8 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK); // Change color
 8002fc4:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <bottomBarScreenUpdate+0x32c>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002fd0:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80030b8 <bottomBarScreenUpdate+0x310>
 8002fd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002fd8:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <bottomBarScreenUpdate+0x340>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002fe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002fe8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002fec:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ff0:	793b      	ldrb	r3, [r7, #4]
 8002ff2:	b2d9      	uxtb	r1, r3
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <bottomBarScreenUpdate+0x328>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003000:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80030c0 <bottomBarScreenUpdate+0x318>
 8003004:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003008:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 800300c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003010:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003014:	edc7 7a01 	vstr	s15, [r7, #4]
 8003018:	793b      	ldrb	r3, [r7, #4]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	b29b      	uxth	r3, r3
 8003020:	2000      	movs	r0, #0
 8003022:	9001      	str	r0, [sp, #4]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800302a:	482e      	ldr	r0, [pc, #184]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 800302c:	f002 fe60 	bl	8005cf0 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, "PM2.5");
 8003030:	4934      	ldr	r1, [pc, #208]	; (8003104 <bottomBarScreenUpdate+0x35c>)
 8003032:	482c      	ldr	r0, [pc, #176]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 8003034:	f009 fb9e 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK);
 8003038:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <bottomBarScreenUpdate+0x32c>)
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003044:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80030b8 <bottomBarScreenUpdate+0x310>
 8003048:	ee27 6b06 	vmul.f64	d6, d7, d6
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <bottomBarScreenUpdate+0x340>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003058:	ee36 7b07 	vadd.f64	d7, d6, d7
 800305c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003060:	edc7 7a01 	vstr	s15, [r7, #4]
 8003064:	793b      	ldrb	r3, [r7, #4]
 8003066:	b2d9      	uxtb	r1, r3
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <bottomBarScreenUpdate+0x328>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003074:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80030c0 <bottomBarScreenUpdate+0x318>
 8003078:	ee27 7b06 	vmul.f64	d7, d7, d6
 800307c:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8003080:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003084:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003088:	edc7 7a01 	vstr	s15, [r7, #4]
 800308c:	793b      	ldrb	r3, [r7, #4]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	b29b      	uxth	r3, r3
 8003094:	2000      	movs	r0, #0
 8003096:	9001      	str	r0, [sp, #4]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800309e:	4811      	ldr	r0, [pc, #68]	; (80030e4 <bottomBarScreenUpdate+0x33c>)
 80030a0:	f002 fe26 	bl	8005cf0 <ILI9341_Draw_Text>
 80030a4:	e030      	b.n	8003108 <bottomBarScreenUpdate+0x360>
 80030a6:	bf00      	nop
 80030a8:	3d70a3d7 	.word	0x3d70a3d7
 80030ac:	3febd70a 	.word	0x3febd70a
 80030b0:	00000000 	.word	0x00000000
 80030b4:	40498000 	.word	0x40498000
	...
 80030c0:	66666666 	.word	0x66666666
 80030c4:	3fe66666 	.word	0x3fe66666
 80030c8:	9999999a 	.word	0x9999999a
 80030cc:	3fe19999 	.word	0x3fe19999
 80030d0:	20000056 	.word	0x20000056
 80030d4:	20000052 	.word	0x20000052
 80030d8:	20000024 	.word	0x20000024
 80030dc:	20000018 	.word	0x20000018
 80030e0:	0800ec1c 	.word	0x0800ec1c
 80030e4:	2000047c 	.word	0x2000047c
 80030e8:	20000054 	.word	0x20000054
 80030ec:	20000028 	.word	0x20000028
 80030f0:	2000001c 	.word	0x2000001c
 80030f4:	0800ec28 	.word	0x0800ec28
 80030f8:	2000002c 	.word	0x2000002c
 80030fc:	20000020 	.word	0x20000020
 8003100:	0800ec34 	.word	0x0800ec34
 8003104:	0800ec48 	.word	0x0800ec48

		prevPmTwoPointFive = pmTwoPointFive;
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <bottomBarScreenUpdate+0x39c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <bottomBarScreenUpdate+0x3a0>)
 800310e:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45+18, bottomWidth4 + bottomWidth, maxHeight-52+18, WHITE);
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	b298      	uxth	r0, r3
 8003114:	7b7b      	ldrb	r3, [r7, #13]
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b1b      	subs	r3, #27
 800311a:	b299      	uxth	r1, r3
 800311c:	7b3b      	ldrb	r3, [r7, #12]
 800311e:	b29a      	uxth	r2, r3
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	b29b      	uxth	r3, r3
 8003124:	4413      	add	r3, r2
 8003126:	b29a      	uxth	r2, r3
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <bottomBarScreenUpdate+0x3a4>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	3b22      	subs	r3, #34	; 0x22
 800312e:	b29b      	uxth	r3, r3
 8003130:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003134:	9400      	str	r4, [sp, #0]
 8003136:	f002 fc60 	bl	80059fa <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	bf00      	nop
 8003144:	20000020 	.word	0x20000020
 8003148:	2000002c 	.word	0x2000002c
 800314c:	20000056 	.word	0x20000056

08003150 <notifyPm>:

void notifyPm(){
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	ed2d 8b04 	vpush	{d8-d9}
 8003156:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800315a:	af12      	add	r7, sp, #72	; 0x48
	float *respondRead;
	respondRead = read_sensirion();
 800315c:	f7fd ff0a 	bl	8000f74 <read_sensirion>
 8003160:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8003164:	4b70      	ldr	r3, [pc, #448]	; (8003328 <notifyPm+0x1d8>)
 8003166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800316a:	4b70      	ldr	r3, [pc, #448]	; (800332c <notifyPm+0x1dc>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	1a84      	subs	r4, r0, r2
 8003172:	eb61 0503 	sbc.w	r5, r1, r3
 8003176:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	42ab      	cmp	r3, r5
 8003180:	bf08      	it	eq
 8003182:	42a2      	cmpeq	r2, r4
 8003184:	f080 80c9 	bcs.w	800331a <notifyPm+0x1ca>
 8003188:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800318c:	3304      	adds	r3, #4
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	da00      	bge.n	800319e <notifyPm+0x4e>
			println("Normal Air");
		}

		pmPrevMillisecondHAL = millisecondHAL;
	}
}
 800319c:	e0bd      	b.n	800331a <notifyPm+0x1ca>
	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 800319e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031a2:	3304      	adds	r3, #4
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003330 <notifyPm+0x1e0>
 80031ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	d900      	bls.n	80031b8 <notifyPm+0x68>
}
 80031b6:	e0b0      	b.n	800331a <notifyPm+0x1ca>
		pmTwoPointFive = respondRead[1];
 80031b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <notifyPm+0x1e4>)
 80031c0:	6013      	str	r3, [r2, #0]
		if(respondRead[1]>=250){
 80031c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031c6:	3304      	adds	r3, #4
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003338 <notifyPm+0x1e8>
 80031d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	db03      	blt.n	80031e2 <notifyPm+0x92>
			sent_string_to_mcu("HAZ");
 80031da:	4858      	ldr	r0, [pc, #352]	; (800333c <notifyPm+0x1ec>)
 80031dc:	f7fd ffca 	bl	8001174 <sent_string_to_mcu>
 80031e0:	e01e      	b.n	8003220 <notifyPm+0xd0>
		else if(respondRead[1]>=150){
 80031e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031e6:	3304      	adds	r3, #4
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003340 <notifyPm+0x1f0>
 80031f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	db03      	blt.n	8003202 <notifyPm+0xb2>
			sent_string_to_mcu("VUH");
 80031fa:	4852      	ldr	r0, [pc, #328]	; (8003344 <notifyPm+0x1f4>)
 80031fc:	f7fd ffba 	bl	8001174 <sent_string_to_mcu>
 8003200:	e00e      	b.n	8003220 <notifyPm+0xd0>
		else if(respondRead[1]>=55){
 8003202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003206:	3304      	adds	r3, #4
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003348 <notifyPm+0x1f8>
 8003210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	db02      	blt.n	8003220 <notifyPm+0xd0>
			sent_string_to_mcu("UHT");
 800321a:	484c      	ldr	r0, [pc, #304]	; (800334c <notifyPm+0x1fc>)
 800321c:	f7fd ffaa 	bl	8001174 <sent_string_to_mcu>
		if(respondRead[1]>=55){
 8003220:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003224:	3304      	adds	r3, #4
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003348 <notifyPm+0x1f8>
 800322e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003236:	db67      	blt.n	8003308 <notifyPm+0x1b8>
			println("Danger Air");
 8003238:	4845      	ldr	r0, [pc, #276]	; (8003350 <notifyPm+0x200>)
 800323a:	f7fd fe2b 	bl	8000e94 <println>
			println("Sending");
 800323e:	4845      	ldr	r0, [pc, #276]	; (8003354 <notifyPm+0x204>)
 8003240:	f7fd fe28 	bl	8000e94 <println>
			sprintf(stringBuffer, "EXC %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f" , respondRead[0], respondRead[1], respondRead[2], respondRead[3], respondRead[4], respondRead[5], respondRead[6], respondRead[7], respondRead[8], respondRead[9]);
 8003244:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8003250:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003254:	3304      	adds	r3, #4
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800325e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003262:	3308      	adds	r3, #8
 8003264:	edd3 6a00 	vldr	s13, [r3]
 8003268:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800326c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003270:	330c      	adds	r3, #12
 8003272:	edd3 5a00 	vldr	s11, [r3]
 8003276:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800327a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800327e:	3310      	adds	r3, #16
 8003280:	edd3 4a00 	vldr	s9, [r3]
 8003284:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8003288:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800328c:	3314      	adds	r3, #20
 800328e:	edd3 3a00 	vldr	s7, [r3]
 8003292:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8003296:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800329a:	3318      	adds	r3, #24
 800329c:	edd3 2a00 	vldr	s5, [r3]
 80032a0:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80032a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032a8:	331c      	adds	r3, #28
 80032aa:	edd3 1a00 	vldr	s3, [r3]
 80032ae:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80032b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032b6:	3320      	adds	r3, #32
 80032b8:	edd3 0a00 	vldr	s1, [r3]
 80032bc:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80032c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032c4:	3324      	adds	r3, #36	; 0x24
 80032c6:	ed93 8a00 	vldr	s16, [r3]
 80032ca:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80032ce:	4638      	mov	r0, r7
 80032d0:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 80032d4:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 80032d8:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 80032dc:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 80032e0:	ed8d 3b08 	vstr	d3, [sp, #32]
 80032e4:	ed8d 4b06 	vstr	d4, [sp, #24]
 80032e8:	ed8d 5b04 	vstr	d5, [sp, #16]
 80032ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80032f0:	ed8d 7b00 	vstr	d7, [sp]
 80032f4:	ec53 2b19 	vmov	r2, r3, d9
 80032f8:	4917      	ldr	r1, [pc, #92]	; (8003358 <notifyPm+0x208>)
 80032fa:	f009 fa3b 	bl	800c774 <siprintf>
			sent_string_to_mcu(stringBuffer);
 80032fe:	463b      	mov	r3, r7
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd ff37 	bl	8001174 <sent_string_to_mcu>
 8003306:	e002      	b.n	800330e <notifyPm+0x1be>
			println("Normal Air");
 8003308:	4814      	ldr	r0, [pc, #80]	; (800335c <notifyPm+0x20c>)
 800330a:	f7fd fdc3 	bl	8000e94 <println>
		pmPrevMillisecondHAL = millisecondHAL;
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <notifyPm+0x1d8>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	4905      	ldr	r1, [pc, #20]	; (800332c <notifyPm+0x1dc>)
 8003316:	e9c1 2300 	strd	r2, r3, [r1]
}
 800331a:	bf00      	nop
 800331c:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8003320:	46bd      	mov	sp, r7
 8003322:	ecbd 8b04 	vpop	{d8-d9}
 8003326:	bdb0      	pop	{r4, r5, r7, pc}
 8003328:	200002f8 	.word	0x200002f8
 800332c:	20000300 	.word	0x20000300
 8003330:	461c3c00 	.word	0x461c3c00
 8003334:	20000020 	.word	0x20000020
 8003338:	437a0000 	.word	0x437a0000
 800333c:	0800ec50 	.word	0x0800ec50
 8003340:	43160000 	.word	0x43160000
 8003344:	0800ec54 	.word	0x0800ec54
 8003348:	425c0000 	.word	0x425c0000
 800334c:	0800ec58 	.word	0x0800ec58
 8003350:	0800ec5c 	.word	0x0800ec5c
 8003354:	0800ec68 	.word	0x0800ec68
 8003358:	0800ec70 	.word	0x0800ec70
 800335c:	0800eca8 	.word	0x0800eca8

08003360 <resisterMonitor>:

void resisterMonitor(){
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0

	  float dutyCycleScreen = 0.0;
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	607b      	str	r3, [r7, #4]
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 800336c:	bf00      	nop
 800336e:	2164      	movs	r1, #100	; 0x64
 8003370:	4829      	ldr	r0, [pc, #164]	; (8003418 <resisterMonitor+0xb8>)
 8003372:	f003 fb49 	bl	8006a08 <HAL_ADC_PollForConversion>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f8      	bne.n	800336e <resisterMonitor+0xe>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 800337c:	4826      	ldr	r0, [pc, #152]	; (8003418 <resisterMonitor+0xb8>)
 800337e:	f003 fbce 	bl	8006b1e <HAL_ADC_GetValue>
 8003382:	4603      	mov	r3, r0
 8003384:	4a25      	ldr	r2, [pc, #148]	; (800341c <resisterMonitor+0xbc>)
 8003386:	6013      	str	r3, [r2, #0]
	  lightPercent = adc_val*100 / 4095;
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <resisterMonitor+0xbc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2264      	movs	r2, #100	; 0x64
 800338e:	fb02 f203 	mul.w	r2, r2, r3
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <resisterMonitor+0xc0>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	4413      	add	r3, r2
 800339e:	0adb      	lsrs	r3, r3, #11
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b20      	ldr	r3, [pc, #128]	; (8003424 <resisterMonitor+0xc4>)
 80033a4:	601a      	str	r2, [r3, #0]

	  //Change Screen Light Output
	  //PWM
	  dutyCycleScreen = ((adc_val/4095.0) * 0.8) + 0.2;
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <resisterMonitor+0xbc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80033b2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8003400 <resisterMonitor+0xa0>
 80033b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80033ba:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003408 <resisterMonitor+0xa8>
 80033be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033c2:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003410 <resisterMonitor+0xb0>
 80033c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80033ce:	edc7 7a01 	vstr	s15, [r7, #4]
	  //No. 2
	  htim3.Instance -> CCR1 = (100-1) * dutyCycleScreen;
 80033d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003428 <resisterMonitor+0xc8>
 80033da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <resisterMonitor+0xcc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e6:	ee17 2a90 	vmov	r2, s15
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80033ec:	2100      	movs	r1, #0
 80033ee:	480f      	ldr	r0, [pc, #60]	; (800342c <resisterMonitor+0xcc>)
 80033f0:	f006 fec4 	bl	800a17c <HAL_TIM_PWM_Start>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	f3af 8000 	nop.w
 8003400:	00000000 	.word	0x00000000
 8003404:	40affe00 	.word	0x40affe00
 8003408:	9999999a 	.word	0x9999999a
 800340c:	3fe99999 	.word	0x3fe99999
 8003410:	9999999a 	.word	0x9999999a
 8003414:	3fc99999 	.word	0x3fc99999
 8003418:	200003a8 	.word	0x200003a8
 800341c:	200002e0 	.word	0x200002e0
 8003420:	00100101 	.word	0x00100101
 8003424:	20000014 	.word	0x20000014
 8003428:	42c60000 	.word	0x42c60000
 800342c:	200005a0 	.word	0x200005a0

08003430 <resetPrevStopWatch>:
//State
bool initialStopWatchScreen = false;
bool isStopWatchRunning = false;


void resetPrevStopWatch(){
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
	prevStopWatchHour = -1;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <resetPrevStopWatch+0x30>)
 8003436:	f04f 32ff 	mov.w	r2, #4294967295
 800343a:	601a      	str	r2, [r3, #0]
	prevStopWatchMinute = -1;
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <resetPrevStopWatch+0x34>)
 800343e:	f04f 32ff 	mov.w	r2, #4294967295
 8003442:	601a      	str	r2, [r3, #0]
	prevStopWatchSecond = -1;
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <resetPrevStopWatch+0x38>)
 8003446:	f04f 32ff 	mov.w	r2, #4294967295
 800344a:	601a      	str	r2, [r3, #0]
	prevStopWatchMillisecond = -1;
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <resetPrevStopWatch+0x3c>)
 800344e:	f04f 32ff 	mov.w	r2, #4294967295
 8003452:	601a      	str	r2, [r3, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	200000bc 	.word	0x200000bc
 8003464:	200000c0 	.word	0x200000c0
 8003468:	200000c4 	.word	0x200000c4
 800346c:	200000c8 	.word	0x200000c8

08003470 <resetStopWatch>:
void resetStopWatch(){
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	stopWatchHour = 0;
 8003474:	4b07      	ldr	r3, [pc, #28]	; (8003494 <resetStopWatch+0x24>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
	stopWatchMinute = 0;
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <resetStopWatch+0x28>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
	stopWatchSecond = 0;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <resetStopWatch+0x2c>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
	stopWatchMillisecond = 0;
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <resetStopWatch+0x30>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
	resetPrevStopWatch();
 800348c:	f7ff ffd0 	bl	8003430 <resetPrevStopWatch>
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000314 	.word	0x20000314
 8003498:	20000318 	.word	0x20000318
 800349c:	2000031c 	.word	0x2000031c
 80034a0:	20000320 	.word	0x20000320
 80034a4:	00000000 	.word	0x00000000

080034a8 <displayStopWatchScreen>:

void displayStopWatchScreen(){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af02      	add	r7, sp, #8
	if(stopWatchHour < 1){ // Normal StopWatch Mode
 80034ae:	4ba8      	ldr	r3, [pc, #672]	; (8003750 <displayStopWatchScreen+0x2a8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f300 80a8 	bgt.w	8003608 <displayStopWatchScreen+0x160>
		if(prevStopWatchMinute != stopWatchMinute){
 80034b8:	4ba6      	ldr	r3, [pc, #664]	; (8003754 <displayStopWatchScreen+0x2ac>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4ba6      	ldr	r3, [pc, #664]	; (8003758 <displayStopWatchScreen+0x2b0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d02a      	beq.n	800351a <displayStopWatchScreen+0x72>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 80034c4:	4ba4      	ldr	r3, [pc, #656]	; (8003758 <displayStopWatchScreen+0x2b0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	49a4      	ldr	r1, [pc, #656]	; (800375c <displayStopWatchScreen+0x2b4>)
 80034cc:	48a4      	ldr	r0, [pc, #656]	; (8003760 <displayStopWatchScreen+0x2b8>)
 80034ce:	f009 f951 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80034d2:	4ba4      	ldr	r3, [pc, #656]	; (8003764 <displayStopWatchScreen+0x2bc>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b2d9      	uxtb	r1, r3
 80034d8:	4ba3      	ldr	r3, [pc, #652]	; (8003768 <displayStopWatchScreen+0x2c0>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034e4:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8003748 <displayStopWatchScreen+0x2a0>
 80034e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034ec:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80034f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80034fc:	793b      	ldrb	r3, [r7, #4]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	2300      	movs	r3, #0
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2305      	movs	r3, #5
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800350c:	4894      	ldr	r0, [pc, #592]	; (8003760 <displayStopWatchScreen+0x2b8>)
 800350e:	f002 fbef 	bl	8005cf0 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 8003512:	4b91      	ldr	r3, [pc, #580]	; (8003758 <displayStopWatchScreen+0x2b0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a8f      	ldr	r2, [pc, #572]	; (8003754 <displayStopWatchScreen+0x2ac>)
 8003518:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchSecond != stopWatchSecond){
 800351a:	4b94      	ldr	r3, [pc, #592]	; (800376c <displayStopWatchScreen+0x2c4>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b94      	ldr	r3, [pc, #592]	; (8003770 <displayStopWatchScreen+0x2c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d02c      	beq.n	8003580 <displayStopWatchScreen+0xd8>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 8003526:	4b92      	ldr	r3, [pc, #584]	; (8003770 <displayStopWatchScreen+0x2c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	498b      	ldr	r1, [pc, #556]	; (800375c <displayStopWatchScreen+0x2b4>)
 800352e:	488c      	ldr	r0, [pc, #560]	; (8003760 <displayStopWatchScreen+0x2b8>)
 8003530:	f009 f920 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8003534:	4b8b      	ldr	r3, [pc, #556]	; (8003764 <displayStopWatchScreen+0x2bc>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3346      	adds	r3, #70	; 0x46
 800353c:	b2d9      	uxtb	r1, r3
 800353e:	4b8a      	ldr	r3, [pc, #552]	; (8003768 <displayStopWatchScreen+0x2c0>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800354a:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8003748 <displayStopWatchScreen+0x2a0>
 800354e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003552:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003556:	ee37 7b06 	vadd.f64	d7, d7, d6
 800355a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800355e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003562:	793b      	ldrb	r3, [r7, #4]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	2300      	movs	r3, #0
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2305      	movs	r3, #5
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003572:	487b      	ldr	r0, [pc, #492]	; (8003760 <displayStopWatchScreen+0x2b8>)
 8003574:	f002 fbbc 	bl	8005cf0 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8003578:	4b7d      	ldr	r3, [pc, #500]	; (8003770 <displayStopWatchScreen+0x2c8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7b      	ldr	r2, [pc, #492]	; (800376c <displayStopWatchScreen+0x2c4>)
 800357e:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchMillisecond != stopWatchMillisecond){
 8003580:	4b7c      	ldr	r3, [pc, #496]	; (8003774 <displayStopWatchScreen+0x2cc>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b7c      	ldr	r3, [pc, #496]	; (8003778 <displayStopWatchScreen+0x2d0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	f000 80d9 	beq.w	8003740 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)((stopWatchMillisecond/10)%100));
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <displayStopWatchScreen+0x2d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7a      	ldr	r2, [pc, #488]	; (800377c <displayStopWatchScreen+0x2d4>)
 8003594:	fb82 1203 	smull	r1, r2, r2, r3
 8003598:	1092      	asrs	r2, r2, #2
 800359a:	17db      	asrs	r3, r3, #31
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	4a78      	ldr	r2, [pc, #480]	; (8003780 <displayStopWatchScreen+0x2d8>)
 80035a0:	fb82 1203 	smull	r1, r2, r2, r3
 80035a4:	1151      	asrs	r1, r2, #5
 80035a6:	17da      	asrs	r2, r3, #31
 80035a8:	1a8a      	subs	r2, r1, r2
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f202 	mul.w	r2, r1, r2
 80035b0:	1a9a      	subs	r2, r3, r2
 80035b2:	496a      	ldr	r1, [pc, #424]	; (800375c <displayStopWatchScreen+0x2b4>)
 80035b4:	486a      	ldr	r0, [pc, #424]	; (8003760 <displayStopWatchScreen+0x2b8>)
 80035b6:	f009 f8dd 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <displayStopWatchScreen+0x2bc>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3b74      	subs	r3, #116	; 0x74
 80035c2:	b2d9      	uxtb	r1, r3
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <displayStopWatchScreen+0x2c0>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035d0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8003748 <displayStopWatchScreen+0x2a0>
 80035d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035d8:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80035dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80035e8:	793b      	ldrb	r3, [r7, #4]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	2300      	movs	r3, #0
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	2305      	movs	r3, #5
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f8:	4859      	ldr	r0, [pc, #356]	; (8003760 <displayStopWatchScreen+0x2b8>)
 80035fa:	f002 fb79 	bl	8005cf0 <ILI9341_Draw_Text>
			prevStopWatchMillisecond = stopWatchMillisecond;
 80035fe:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <displayStopWatchScreen+0x2d0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a5c      	ldr	r2, [pc, #368]	; (8003774 <displayStopWatchScreen+0x2cc>)
 8003604:	6013      	str	r3, [r2, #0]
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
			prevStopWatchSecond = stopWatchSecond;
		}
	}
}
 8003606:	e09b      	b.n	8003740 <displayStopWatchScreen+0x298>
	}else if (stopWatchHour >= 1){ // counting more than equal to 1 hour
 8003608:	4b51      	ldr	r3, [pc, #324]	; (8003750 <displayStopWatchScreen+0x2a8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f340 8097 	ble.w	8003740 <displayStopWatchScreen+0x298>
		if(prevStopWatchHour != stopWatchHour){
 8003612:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <displayStopWatchScreen+0x2dc>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <displayStopWatchScreen+0x2a8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d02a      	beq.n	8003674 <displayStopWatchScreen+0x1cc>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchHour);
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <displayStopWatchScreen+0x2a8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	494d      	ldr	r1, [pc, #308]	; (800375c <displayStopWatchScreen+0x2b4>)
 8003626:	484e      	ldr	r0, [pc, #312]	; (8003760 <displayStopWatchScreen+0x2b8>)
 8003628:	f009 f8a4 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800362c:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <displayStopWatchScreen+0x2bc>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b2d9      	uxtb	r1, r3
 8003632:	4b4d      	ldr	r3, [pc, #308]	; (8003768 <displayStopWatchScreen+0x2c0>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800363e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8003748 <displayStopWatchScreen+0x2a0>
 8003642:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003646:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800364a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800364e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003652:	edc7 7a01 	vstr	s15, [r7, #4]
 8003656:	793b      	ldrb	r3, [r7, #4]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	2300      	movs	r3, #0
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	2305      	movs	r3, #5
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003666:	483e      	ldr	r0, [pc, #248]	; (8003760 <displayStopWatchScreen+0x2b8>)
 8003668:	f002 fb42 	bl	8005cf0 <ILI9341_Draw_Text>
			prevStopWatchHour = stopWatchHour;
 800366c:	4b38      	ldr	r3, [pc, #224]	; (8003750 <displayStopWatchScreen+0x2a8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a44      	ldr	r2, [pc, #272]	; (8003784 <displayStopWatchScreen+0x2dc>)
 8003672:	6013      	str	r3, [r2, #0]
		if(prevStopWatchMinute != stopWatchMinute){
 8003674:	4b37      	ldr	r3, [pc, #220]	; (8003754 <displayStopWatchScreen+0x2ac>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b37      	ldr	r3, [pc, #220]	; (8003758 <displayStopWatchScreen+0x2b0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d02c      	beq.n	80036da <displayStopWatchScreen+0x232>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <displayStopWatchScreen+0x2b0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	4935      	ldr	r1, [pc, #212]	; (800375c <displayStopWatchScreen+0x2b4>)
 8003688:	4835      	ldr	r0, [pc, #212]	; (8003760 <displayStopWatchScreen+0x2b8>)
 800368a:	f009 f873 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800368e:	4b35      	ldr	r3, [pc, #212]	; (8003764 <displayStopWatchScreen+0x2bc>)
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	3346      	adds	r3, #70	; 0x46
 8003696:	b2d9      	uxtb	r1, r3
 8003698:	4b33      	ldr	r3, [pc, #204]	; (8003768 <displayStopWatchScreen+0x2c0>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	ee07 3a90 	vmov	s15, r3
 80036a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036a4:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8003748 <displayStopWatchScreen+0x2a0>
 80036a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036ac:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80036b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80036bc:	793b      	ldrb	r3, [r7, #4]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	2305      	movs	r3, #5
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036cc:	4824      	ldr	r0, [pc, #144]	; (8003760 <displayStopWatchScreen+0x2b8>)
 80036ce:	f002 fb0f 	bl	8005cf0 <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <displayStopWatchScreen+0x2b0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <displayStopWatchScreen+0x2ac>)
 80036d8:	6013      	str	r3, [r2, #0]
		if(prevStopWatchSecond != stopWatchSecond){
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <displayStopWatchScreen+0x2c4>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <displayStopWatchScreen+0x2c8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d02c      	beq.n	8003740 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 80036e6:	4b22      	ldr	r3, [pc, #136]	; (8003770 <displayStopWatchScreen+0x2c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	491b      	ldr	r1, [pc, #108]	; (800375c <displayStopWatchScreen+0x2b4>)
 80036ee:	481c      	ldr	r0, [pc, #112]	; (8003760 <displayStopWatchScreen+0x2b8>)
 80036f0:	f009 f840 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <displayStopWatchScreen+0x2bc>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3b74      	subs	r3, #116	; 0x74
 80036fc:	b2d9      	uxtb	r1, r3
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <displayStopWatchScreen+0x2c0>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800370a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003748 <displayStopWatchScreen+0x2a0>
 800370e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003712:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003716:	ee37 7b06 	vadd.f64	d7, d7, d6
 800371a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800371e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003722:	793b      	ldrb	r3, [r7, #4]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	2300      	movs	r3, #0
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2305      	movs	r3, #5
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003732:	480b      	ldr	r0, [pc, #44]	; (8003760 <displayStopWatchScreen+0x2b8>)
 8003734:	f002 fadc 	bl	8005cf0 <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <displayStopWatchScreen+0x2c8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0b      	ldr	r2, [pc, #44]	; (800376c <displayStopWatchScreen+0x2c4>)
 800373e:	6013      	str	r3, [r2, #0]
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	66666666 	.word	0x66666666
 800374c:	3fd66666 	.word	0x3fd66666
 8003750:	20000314 	.word	0x20000314
 8003754:	200000c0 	.word	0x200000c0
 8003758:	20000318 	.word	0x20000318
 800375c:	0800ebe8 	.word	0x0800ebe8
 8003760:	2000047c 	.word	0x2000047c
 8003764:	20000054 	.word	0x20000054
 8003768:	20000056 	.word	0x20000056
 800376c:	200000c4 	.word	0x200000c4
 8003770:	2000031c 	.word	0x2000031c
 8003774:	200000c8 	.word	0x200000c8
 8003778:	20000320 	.word	0x20000320
 800377c:	66666667 	.word	0x66666667
 8003780:	51eb851f 	.word	0x51eb851f
 8003784:	200000bc 	.word	0x200000bc

08003788 <stopWatchScreen>:

void stopWatchScreen(){
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af02      	add	r7, sp, #8

	if(initialStopWatchScreen == false){
 800378e:	4b66      	ldr	r3, [pc, #408]	; (8003928 <stopWatchScreen+0x1a0>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	f083 0301 	eor.w	r3, r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d075      	beq.n	8003888 <stopWatchScreen+0x100>
		resetPrevStopWatch();
 800379c:	f7ff fe48 	bl	8003430 <resetPrevStopWatch>
		//Statics
		displayAlarmIcon(alarmIsOn);
 80037a0:	4b62      	ldr	r3, [pc, #392]	; (800392c <stopWatchScreen+0x1a4>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fb93 	bl	8001ed0 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Stopwatch");
 80037aa:	4961      	ldr	r1, [pc, #388]	; (8003930 <stopWatchScreen+0x1a8>)
 80037ac:	4861      	ldr	r0, [pc, #388]	; (8003934 <stopWatchScreen+0x1ac>)
 80037ae:	f008 ffe1 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 80037b2:	4b61      	ldr	r3, [pc, #388]	; (8003938 <stopWatchScreen+0x1b0>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b2d9      	uxtb	r1, r3
 80037b8:	4b60      	ldr	r3, [pc, #384]	; (800393c <stopWatchScreen+0x1b4>)
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80037c4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8003918 <stopWatchScreen+0x190>
 80037c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80037d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80037d4:	793b      	ldrb	r3, [r7, #4]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	2300      	movs	r3, #0
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	2302      	movs	r3, #2
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e4:	4853      	ldr	r0, [pc, #332]	; (8003934 <stopWatchScreen+0x1ac>)
 80037e6:	f002 fa83 	bl	8005cf0 <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, ":");
 80037ea:	4955      	ldr	r1, [pc, #340]	; (8003940 <stopWatchScreen+0x1b8>)
 80037ec:	4851      	ldr	r0, [pc, #324]	; (8003934 <stopWatchScreen+0x1ac>)
 80037ee:	f008 ffc1 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+60, maxHeight * 0.37+16, WHITE, 4, BLACK);
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <stopWatchScreen+0x1b0>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	333c      	adds	r3, #60	; 0x3c
 80037fa:	b2d9      	uxtb	r1, r3
 80037fc:	4b4f      	ldr	r3, [pc, #316]	; (800393c <stopWatchScreen+0x1b4>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003808:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003920 <stopWatchScreen+0x198>
 800380c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003810:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003814:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003818:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800381c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003820:	793b      	ldrb	r3, [r7, #4]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2304      	movs	r3, #4
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003830:	4840      	ldr	r0, [pc, #256]	; (8003934 <stopWatchScreen+0x1ac>)
 8003832:	f002 fa5d 	bl	8005cf0 <ILI9341_Draw_Text>
		sprintf(Temp_Buffer_text, ":");
 8003836:	4942      	ldr	r1, [pc, #264]	; (8003940 <stopWatchScreen+0x1b8>)
 8003838:	483e      	ldr	r0, [pc, #248]	; (8003934 <stopWatchScreen+0x1ac>)
 800383a:	f008 ff9b 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+130, maxHeight * 0.37+16, WHITE, 4, BLACK);
 800383e:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <stopWatchScreen+0x1b0>)
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	3b7e      	subs	r3, #126	; 0x7e
 8003846:	b2d9      	uxtb	r1, r3
 8003848:	4b3c      	ldr	r3, [pc, #240]	; (800393c <stopWatchScreen+0x1b4>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003854:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003920 <stopWatchScreen+0x198>
 8003858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800385c:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003860:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003864:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003868:	edc7 7a01 	vstr	s15, [r7, #4]
 800386c:	793b      	ldrb	r3, [r7, #4]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	2300      	movs	r3, #0
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	2304      	movs	r3, #4
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800387c:	482d      	ldr	r0, [pc, #180]	; (8003934 <stopWatchScreen+0x1ac>)
 800387e:	f002 fa37 	bl	8005cf0 <ILI9341_Draw_Text>

		initialStopWatchScreen = true;
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <stopWatchScreen+0x1a0>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
	}

	//Time running
	if(isStopWatchRunning == true){
 8003888:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <stopWatchScreen+0x1bc>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <stopWatchScreen+0x120>
		stopWatchMillisecond += millisecondStopWatch;
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <stopWatchScreen+0x1c0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <stopWatchScreen+0x1c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4413      	add	r3, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <stopWatchScreen+0x1c0>)
 80038a0:	601a      	str	r2, [r3, #0]
		millisecondStopWatch = 0;
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <stopWatchScreen+0x1c4>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
	}

	//Normal Clock
	if (stopWatchMillisecond >= 1000){
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <stopWatchScreen+0x1c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038b0:	db0a      	blt.n	80038c8 <stopWatchScreen+0x140>
		stopWatchMillisecond = stopWatchMillisecond - 1000; //Keep remainder of millisecondStopWatch
 80038b2:	4b25      	ldr	r3, [pc, #148]	; (8003948 <stopWatchScreen+0x1c0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80038ba:	4a23      	ldr	r2, [pc, #140]	; (8003948 <stopWatchScreen+0x1c0>)
 80038bc:	6013      	str	r3, [r2, #0]
		stopWatchSecond++;
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <stopWatchScreen+0x1c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <stopWatchScreen+0x1c8>)
 80038c6:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchSecond >= 60){
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <stopWatchScreen+0x1c8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b3b      	cmp	r3, #59	; 0x3b
 80038ce:	dd07      	ble.n	80038e0 <stopWatchScreen+0x158>
		stopWatchSecond = 0;
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <stopWatchScreen+0x1c8>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
		stopWatchMinute++;
 80038d6:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <stopWatchScreen+0x1cc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <stopWatchScreen+0x1cc>)
 80038de:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchMinute >= 60){
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <stopWatchScreen+0x1cc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b3b      	cmp	r3, #59	; 0x3b
 80038e6:	dd07      	ble.n	80038f8 <stopWatchScreen+0x170>
		stopWatchMinute = 0;
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <stopWatchScreen+0x1cc>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
		stopWatchHour++;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <stopWatchScreen+0x1d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a18      	ldr	r2, [pc, #96]	; (8003958 <stopWatchScreen+0x1d0>)
 80038f6:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchHour >= 99){
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <stopWatchScreen+0x1d0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b62      	cmp	r3, #98	; 0x62
 80038fe:	dd02      	ble.n	8003906 <stopWatchScreen+0x17e>
		stopWatchHour = 0;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <stopWatchScreen+0x1d0>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
	}

	//Running
	displayStopWatchScreen();
 8003906:	f7ff fdcf 	bl	80034a8 <displayStopWatchScreen>

//	char hexString[30];
//	sprintf(hexString,"%d %d\r\n",prevStopWatchHour,stopWatchHour);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	9999999a 	.word	0x9999999a
 800391c:	3fb99999 	.word	0x3fb99999
 8003920:	7ae147ae 	.word	0x7ae147ae
 8003924:	3fd7ae14 	.word	0x3fd7ae14
 8003928:	20000324 	.word	0x20000324
 800392c:	20000060 	.word	0x20000060
 8003930:	0800ecb4 	.word	0x0800ecb4
 8003934:	2000047c 	.word	0x2000047c
 8003938:	20000054 	.word	0x20000054
 800393c:	20000056 	.word	0x20000056
 8003940:	0800ec04 	.word	0x0800ec04
 8003944:	20000325 	.word	0x20000325
 8003948:	20000320 	.word	0x20000320
 800394c:	200002d8 	.word	0x200002d8
 8003950:	2000031c 	.word	0x2000031c
 8003954:	20000318 	.word	0x20000318
 8003958:	20000314 	.word	0x20000314

0800395c <resetPrevAlarm>:

//State
bool initialAlarmClockScreen = false;
bool initialEditAlarmClockScreen = false;

void resetPrevAlarm(){
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	prevAlarmMinute = -1;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <resetPrevAlarm+0x20>)
 8003962:	f04f 32ff 	mov.w	r2, #4294967295
 8003966:	601a      	str	r2, [r3, #0]
	prevAlarmHour = -1;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <resetPrevAlarm+0x24>)
 800396a:	f04f 32ff 	mov.w	r2, #4294967295
 800396e:	601a      	str	r2, [r3, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000030 	.word	0x20000030
 8003980:	20000034 	.word	0x20000034
 8003984:	00000000 	.word	0x00000000

08003988 <hourAlarmScreen>:

void hourAlarmScreen(bool status, bool isEdit){
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af02      	add	r7, sp, #8
 800398e:	4603      	mov	r3, r0
 8003990:	460a      	mov	r2, r1
 8003992:	71fb      	strb	r3, [r7, #7]
 8003994:	4613      	mov	r3, r2
 8003996:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmHour != alarmHour || isEdit == true){
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <hourAlarmScreen+0xd8>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <hourAlarmScreen+0xdc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d102      	bne.n	80039aa <hourAlarmScreen+0x22>
 80039a4:	79bb      	ldrb	r3, [r7, #6]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d052      	beq.n	8003a50 <hourAlarmScreen+0xc8>
		if (status == true){
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d027      	beq.n	8003a00 <hourAlarmScreen+0x78>
			sprintf(Temp_Buffer_text, "%02d", (int)alarmHour);
 80039b0:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <hourAlarmScreen+0xdc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	492c      	ldr	r1, [pc, #176]	; (8003a68 <hourAlarmScreen+0xe0>)
 80039b8:	482c      	ldr	r0, [pc, #176]	; (8003a6c <hourAlarmScreen+0xe4>)
 80039ba:	f008 fedb 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 80039be:	4b2c      	ldr	r3, [pc, #176]	; (8003a70 <hourAlarmScreen+0xe8>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b2d9      	uxtb	r1, r3
 80039c4:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <hourAlarmScreen+0xec>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80039d0:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8003a58 <hourAlarmScreen+0xd0>
 80039d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039d8:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80039dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039e4:	edc7 7a00 	vstr	s15, [r7]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	2300      	movs	r3, #0
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	2306      	movs	r3, #6
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f8:	481c      	ldr	r0, [pc, #112]	; (8003a6c <hourAlarmScreen+0xe4>)
 80039fa:	f002 f979 	bl	8005cf0 <ILI9341_Draw_Text>
 80039fe:	e023      	b.n	8003a48 <hourAlarmScreen+0xc0>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003a00:	491d      	ldr	r1, [pc, #116]	; (8003a78 <hourAlarmScreen+0xf0>)
 8003a02:	481a      	ldr	r0, [pc, #104]	; (8003a6c <hourAlarmScreen+0xe4>)
 8003a04:	f008 feb6 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <hourAlarmScreen+0xe8>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b2d9      	uxtb	r1, r3
 8003a0e:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <hourAlarmScreen+0xec>)
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a1a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003a58 <hourAlarmScreen+0xd0>
 8003a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a22:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003a26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a2e:	edc7 7a00 	vstr	s15, [r7]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	2300      	movs	r3, #0
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2306      	movs	r3, #6
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a42:	480a      	ldr	r0, [pc, #40]	; (8003a6c <hourAlarmScreen+0xe4>)
 8003a44:	f002 f954 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevAlarmHour = alarmHour;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <hourAlarmScreen+0xdc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <hourAlarmScreen+0xd8>)
 8003a4e:	6013      	str	r3, [r2, #0]
	}
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	33333333 	.word	0x33333333
 8003a5c:	3fd33333 	.word	0x3fd33333
 8003a60:	20000034 	.word	0x20000034
 8003a64:	200002d0 	.word	0x200002d0
 8003a68:	0800ebe8 	.word	0x0800ebe8
 8003a6c:	2000047c 	.word	0x2000047c
 8003a70:	20000054 	.word	0x20000054
 8003a74:	20000056 	.word	0x20000056
 8003a78:	0800ebf0 	.word	0x0800ebf0
 8003a7c:	00000000 	.word	0x00000000

08003a80 <minuteAlarmScreen>:

void minuteAlarmScreen(bool status, bool isEdit){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	4603      	mov	r3, r0
 8003a88:	460a      	mov	r2, r1
 8003a8a:	71fb      	strb	r3, [r7, #7]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmMinute != alarmMinute || isEdit == true){
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <minuteAlarmScreen+0xe0>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <minuteAlarmScreen+0xe4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d102      	bne.n	8003aa2 <minuteAlarmScreen+0x22>
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d056      	beq.n	8003b50 <minuteAlarmScreen+0xd0>
		if (status == true){
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d029      	beq.n	8003afc <minuteAlarmScreen+0x7c>

			sprintf(Temp_Buffer_text, "%02d", (int)alarmMinute);
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <minuteAlarmScreen+0xe4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	492e      	ldr	r1, [pc, #184]	; (8003b68 <minuteAlarmScreen+0xe8>)
 8003ab0:	482e      	ldr	r0, [pc, #184]	; (8003b6c <minuteAlarmScreen+0xec>)
 8003ab2:	f008 fe5f 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <minuteAlarmScreen+0xf0>)
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	336e      	adds	r3, #110	; 0x6e
 8003abe:	b2d9      	uxtb	r1, r3
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <minuteAlarmScreen+0xf4>)
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003acc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8003b58 <minuteAlarmScreen+0xd8>
 8003ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003ad4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003ad8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003adc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ae0:	edc7 7a00 	vstr	s15, [r7]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	2306      	movs	r3, #6
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003af4:	481d      	ldr	r0, [pc, #116]	; (8003b6c <minuteAlarmScreen+0xec>)
 8003af6:	f002 f8fb 	bl	8005cf0 <ILI9341_Draw_Text>
 8003afa:	e025      	b.n	8003b48 <minuteAlarmScreen+0xc8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003afc:	491e      	ldr	r1, [pc, #120]	; (8003b78 <minuteAlarmScreen+0xf8>)
 8003afe:	481b      	ldr	r0, [pc, #108]	; (8003b6c <minuteAlarmScreen+0xec>)
 8003b00:	f008 fe38 	bl	800c774 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <minuteAlarmScreen+0xf0>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	336e      	adds	r3, #110	; 0x6e
 8003b0c:	b2d9      	uxtb	r1, r3
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <minuteAlarmScreen+0xf4>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b1a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003b58 <minuteAlarmScreen+0xd8>
 8003b1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b22:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003b26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b2e:	edc7 7a00 	vstr	s15, [r7]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2306      	movs	r3, #6
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b42:	480a      	ldr	r0, [pc, #40]	; (8003b6c <minuteAlarmScreen+0xec>)
 8003b44:	f002 f8d4 	bl	8005cf0 <ILI9341_Draw_Text>
		}
		prevAlarmMinute = alarmMinute;
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <minuteAlarmScreen+0xe4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <minuteAlarmScreen+0xe0>)
 8003b4e:	6013      	str	r3, [r2, #0]
	}
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	33333333 	.word	0x33333333
 8003b5c:	3fd33333 	.word	0x3fd33333
 8003b60:	20000030 	.word	0x20000030
 8003b64:	200002cc 	.word	0x200002cc
 8003b68:	0800ebe8 	.word	0x0800ebe8
 8003b6c:	2000047c 	.word	0x2000047c
 8003b70:	20000054 	.word	0x20000054
 8003b74:	20000056 	.word	0x20000056
 8003b78:	0800ebf0 	.word	0x0800ebf0
 8003b7c:	00000000 	.word	0x00000000

08003b80 <colonAlarmScreen>:
void colonAlarmScreen(){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af02      	add	r7, sp, #8
	sprintf(Temp_Buffer_text, ":");
 8003b86:	4918      	ldr	r1, [pc, #96]	; (8003be8 <colonAlarmScreen+0x68>)
 8003b88:	4818      	ldr	r0, [pc, #96]	; (8003bec <colonAlarmScreen+0x6c>)
 8003b8a:	f008 fdf3 	bl	800c774 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 80, maxHeight * 0.35 +10, WHITE, 4, BLACK);
 8003b8e:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <colonAlarmScreen+0x70>)
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3350      	adds	r3, #80	; 0x50
 8003b96:	b2d9      	uxtb	r1, r3
 8003b98:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <colonAlarmScreen+0x74>)
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ba4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003be0 <colonAlarmScreen+0x60>
 8003ba8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003bac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003bb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003bb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003bb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003bbc:	793b      	ldrb	r3, [r7, #4]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bcc:	4807      	ldr	r0, [pc, #28]	; (8003bec <colonAlarmScreen+0x6c>)
 8003bce:	f002 f88f 	bl	8005cf0 <ILI9341_Draw_Text>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	f3af 8000 	nop.w
 8003be0:	66666666 	.word	0x66666666
 8003be4:	3fd66666 	.word	0x3fd66666
 8003be8:	0800ec04 	.word	0x0800ec04
 8003bec:	2000047c 	.word	0x2000047c
 8003bf0:	20000054 	.word	0x20000054
 8003bf4:	20000056 	.word	0x20000056

08003bf8 <alarmClockScreen>:

void alarmClockScreen(){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af02      	add	r7, sp, #8
	if(initialAlarmClockScreen == false){
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <alarmClockScreen+0x90>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d033      	beq.n	8003c74 <alarmClockScreen+0x7c>
		resetPrevAlarm();
 8003c0c:	f7ff fea6 	bl	800395c <resetPrevAlarm>

		//Statics
		sprintf(Temp_Buffer_text, "Alarm");
 8003c10:	491e      	ldr	r1, [pc, #120]	; (8003c8c <alarmClockScreen+0x94>)
 8003c12:	481f      	ldr	r0, [pc, #124]	; (8003c90 <alarmClockScreen+0x98>)
 8003c14:	f008 fdae 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <alarmClockScreen+0x9c>)
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b2d9      	uxtb	r1, r3
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <alarmClockScreen+0xa0>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c2a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8003c80 <alarmClockScreen+0x88>
 8003c2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c36:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c3a:	793b      	ldrb	r3, [r7, #4]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2302      	movs	r3, #2
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4a:	4811      	ldr	r0, [pc, #68]	; (8003c90 <alarmClockScreen+0x98>)
 8003c4c:	f002 f850 	bl	8005cf0 <ILI9341_Draw_Text>

		displayAlarmIcon(alarmIsOn);
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <alarmClockScreen+0xa4>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe f93b 	bl	8001ed0 <displayAlarmIcon>

		colonAlarmScreen();
 8003c5a:	f7ff ff91 	bl	8003b80 <colonAlarmScreen>
		hourAlarmScreen(true,false);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7ff fe91 	bl	8003988 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003c66:	2100      	movs	r1, #0
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f7ff ff09 	bl	8003a80 <minuteAlarmScreen>

		initialAlarmClockScreen = true;
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <alarmClockScreen+0x90>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
	}
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	f3af 8000 	nop.w
 8003c80:	9999999a 	.word	0x9999999a
 8003c84:	3fb99999 	.word	0x3fb99999
 8003c88:	20000326 	.word	0x20000326
 8003c8c:	0800ecc0 	.word	0x0800ecc0
 8003c90:	2000047c 	.word	0x2000047c
 8003c94:	20000054 	.word	0x20000054
 8003c98:	20000056 	.word	0x20000056
 8003c9c:	20000060 	.word	0x20000060

08003ca0 <editScreen>:

void editScreen(){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	if(modeEdit == 1){
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <editScreen+0x78>)
 8003ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d102      	bne.n	8003cb4 <editScreen+0x14>
		editYearScreen();
 8003cae:	f7fe fed9 	bl	8002a64 <editYearScreen>
	}else if (modeEdit == 6){
		editMinuteScreen();
	}else if (modeEdit == 7){
		editSecondScreen();
	}
}
 8003cb2:	e02e      	b.n	8003d12 <editScreen+0x72>
	}else if (modeEdit == 2){
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <editScreen+0x78>)
 8003cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d102      	bne.n	8003cc4 <editScreen+0x24>
		editMonthScreen();
 8003cbe:	f7fe feaf 	bl	8002a20 <editMonthScreen>
}
 8003cc2:	e026      	b.n	8003d12 <editScreen+0x72>
	}else if (modeEdit == 3){
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <editScreen+0x78>)
 8003cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d102      	bne.n	8003cd4 <editScreen+0x34>
		editDateScreen();
 8003cce:	f7fe fe85 	bl	80029dc <editDateScreen>
}
 8003cd2:	e01e      	b.n	8003d12 <editScreen+0x72>
	}else if (modeEdit == 4){
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <editScreen+0x78>)
 8003cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d102      	bne.n	8003ce4 <editScreen+0x44>
		editDayScreen();
 8003cde:	f7fe fe5b 	bl	8002998 <editDayScreen>
}
 8003ce2:	e016      	b.n	8003d12 <editScreen+0x72>
	}else if (modeEdit == 5){
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <editScreen+0x78>)
 8003ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d102      	bne.n	8003cf4 <editScreen+0x54>
		editHourScreen();
 8003cee:	f7fe fdeb 	bl	80028c8 <editHourScreen>
}
 8003cf2:	e00e      	b.n	8003d12 <editScreen+0x72>
	}else if (modeEdit == 6){
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <editScreen+0x78>)
 8003cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d102      	bne.n	8003d04 <editScreen+0x64>
		editMinuteScreen();
 8003cfe:	f7fe fe07 	bl	8002910 <editMinuteScreen>
}
 8003d02:	e006      	b.n	8003d12 <editScreen+0x72>
	}else if (modeEdit == 7){
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <editScreen+0x78>)
 8003d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0a:	2b07      	cmp	r3, #7
 8003d0c:	d101      	bne.n	8003d12 <editScreen+0x72>
		editSecondScreen();
 8003d0e:	f7fe fe21 	bl	8002954 <editSecondScreen>
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	2000005a 	.word	0x2000005a

08003d1c <editAlarmHourScreen>:
void editAlarmHourScreen(){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0

	minuteAlarmScreen(true,false);
 8003d20:	2100      	movs	r1, #0
 8003d22:	2001      	movs	r0, #1
 8003d24:	f7ff feac 	bl	8003a80 <minuteAlarmScreen>

	if (halfsecondState == false){ // Hour
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <editAlarmHourScreen+0x30>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	f083 0301 	eor.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <editAlarmHourScreen+0x24>
		hourAlarmScreen(false, true);
 8003d36:	2101      	movs	r1, #1
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7ff fe25 	bl	8003988 <hourAlarmScreen>
	}
	else{
		hourAlarmScreen(true, true);
	}
}
 8003d3e:	e003      	b.n	8003d48 <editAlarmHourScreen+0x2c>
		hourAlarmScreen(true, true);
 8003d40:	2101      	movs	r1, #1
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7ff fe20 	bl	8003988 <hourAlarmScreen>
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000050 	.word	0x20000050

08003d50 <editAlarmMinuteScreen>:

void editAlarmMinuteScreen(){
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	hourAlarmScreen(true,false);
 8003d54:	2100      	movs	r1, #0
 8003d56:	2001      	movs	r0, #1
 8003d58:	f7ff fe16 	bl	8003988 <hourAlarmScreen>

	if (halfsecondState == false){ // Minute
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <editAlarmMinuteScreen+0x30>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f083 0301 	eor.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <editAlarmMinuteScreen+0x24>
		minuteAlarmScreen(false, true);
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7ff fe87 	bl	8003a80 <minuteAlarmScreen>
	}
	else{
		minuteAlarmScreen(true, true);
	}
}
 8003d72:	e003      	b.n	8003d7c <editAlarmMinuteScreen+0x2c>
		minuteAlarmScreen(true, true);
 8003d74:	2101      	movs	r1, #1
 8003d76:	2001      	movs	r0, #1
 8003d78:	f7ff fe82 	bl	8003a80 <minuteAlarmScreen>
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000050 	.word	0x20000050
 8003d84:	00000000 	.word	0x00000000

08003d88 <editAlarmScreen>:
void editAlarmScreen(){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af02      	add	r7, sp, #8
	if(initialEditAlarmClockScreen == false){
 8003d8e:	4b38      	ldr	r3, [pc, #224]	; (8003e70 <editAlarmScreen+0xe8>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	f083 0301 	eor.w	r3, r3, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d031      	beq.n	8003e00 <editAlarmScreen+0x78>
		resetPrevAlarm();
 8003d9c:	f7ff fdde 	bl	800395c <resetPrevAlarm>
		displayAlarmIcon(alarmIsOn);
 8003da0:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <editAlarmScreen+0xec>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe f893 	bl	8001ed0 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Alarm");
 8003daa:	4933      	ldr	r1, [pc, #204]	; (8003e78 <editAlarmScreen+0xf0>)
 8003dac:	4833      	ldr	r0, [pc, #204]	; (8003e7c <editAlarmScreen+0xf4>)
 8003dae:	f008 fce1 	bl	800c774 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003db2:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <editAlarmScreen+0xf8>)
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b2d9      	uxtb	r1, r3
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <editAlarmScreen+0xfc>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003dc4:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8003e68 <editAlarmScreen+0xe0>
 8003dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003dcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003dd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003dd4:	793b      	ldrb	r3, [r7, #4]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	2302      	movs	r3, #2
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003de4:	4825      	ldr	r0, [pc, #148]	; (8003e7c <editAlarmScreen+0xf4>)
 8003de6:	f001 ff83 	bl	8005cf0 <ILI9341_Draw_Text>

		hourAlarmScreen(true,false);
 8003dea:	2100      	movs	r1, #0
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7ff fdcb 	bl	8003988 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003df2:	2100      	movs	r1, #0
 8003df4:	2001      	movs	r0, #1
 8003df6:	f7ff fe43 	bl	8003a80 <minuteAlarmScreen>

		initialEditAlarmClockScreen = true;
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <editAlarmScreen+0xe8>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
	}

	//Algorithm Calculation
	if (alarmMinute >= 60){
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <editAlarmScreen+0x100>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b3b      	cmp	r3, #59	; 0x3b
 8003e06:	dd03      	ble.n	8003e10 <editAlarmScreen+0x88>
		alarmMinute = 0;
 8003e08:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <editAlarmScreen+0x100>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e006      	b.n	8003e1e <editAlarmScreen+0x96>
	}
	else if(alarmMinute < 0){
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <editAlarmScreen+0x100>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	da02      	bge.n	8003e1e <editAlarmScreen+0x96>
		alarmMinute = 59;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <editAlarmScreen+0x100>)
 8003e1a:	223b      	movs	r2, #59	; 0x3b
 8003e1c:	601a      	str	r2, [r3, #0]
	}
	if (alarmHour >= 24){
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <editAlarmScreen+0x104>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b17      	cmp	r3, #23
 8003e24:	dd03      	ble.n	8003e2e <editAlarmScreen+0xa6>
		alarmHour = 0;
 8003e26:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <editAlarmScreen+0x104>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e006      	b.n	8003e3c <editAlarmScreen+0xb4>
	}
	else if(alarmHour < 0){
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <editAlarmScreen+0x104>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da02      	bge.n	8003e3c <editAlarmScreen+0xb4>
		alarmHour = 23;
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <editAlarmScreen+0x104>)
 8003e38:	2217      	movs	r2, #23
 8003e3a:	601a      	str	r2, [r3, #0]
	}

	if(modeEdit == 1){
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <editAlarmScreen+0x108>)
 8003e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d102      	bne.n	8003e4c <editAlarmScreen+0xc4>
		editAlarmHourScreen();
 8003e46:	f7ff ff69 	bl	8003d1c <editAlarmHourScreen>
	}else if (modeEdit == 2){
		editAlarmMinuteScreen();
	}
}
 8003e4a:	e006      	b.n	8003e5a <editAlarmScreen+0xd2>
	}else if (modeEdit == 2){
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <editAlarmScreen+0x108>)
 8003e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d101      	bne.n	8003e5a <editAlarmScreen+0xd2>
		editAlarmMinuteScreen();
 8003e56:	f7ff ff7b 	bl	8003d50 <editAlarmMinuteScreen>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	f3af 8000 	nop.w
 8003e68:	9999999a 	.word	0x9999999a
 8003e6c:	3fb99999 	.word	0x3fb99999
 8003e70:	20000327 	.word	0x20000327
 8003e74:	20000060 	.word	0x20000060
 8003e78:	0800ecc0 	.word	0x0800ecc0
 8003e7c:	2000047c 	.word	0x2000047c
 8003e80:	20000054 	.word	0x20000054
 8003e84:	20000056 	.word	0x20000056
 8003e88:	200002cc 	.word	0x200002cc
 8003e8c:	200002d0 	.word	0x200002d0
 8003e90:	2000005a 	.word	0x2000005a

08003e94 <tempMonitor>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void tempMonitor(){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af02      	add	r7, sp, #8
	//Temperature
	cmdBuffer[0] = 0x03;
 8003e9a:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <tempMonitor+0x108>)
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <tempMonitor+0x108>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <tempMonitor+0x108>)
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	709a      	strb	r2, [r3, #2]

	//HAL_Delay(5000); //>3000 ms
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003eac:	23c8      	movs	r3, #200	; 0xc8
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	4a3a      	ldr	r2, [pc, #232]	; (8003f9c <tempMonitor+0x108>)
 8003eb4:	21b8      	movs	r1, #184	; 0xb8
 8003eb6:	483a      	ldr	r0, [pc, #232]	; (8003fa0 <tempMonitor+0x10c>)
 8003eb8:	f003 fc1a 	bl	80076f0 <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003ebc:	23c8      	movs	r3, #200	; 0xc8
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	4a36      	ldr	r2, [pc, #216]	; (8003f9c <tempMonitor+0x108>)
 8003ec4:	21b8      	movs	r1, #184	; 0xb8
 8003ec6:	4836      	ldr	r0, [pc, #216]	; (8003fa0 <tempMonitor+0x10c>)
 8003ec8:	f003 fc12 	bl	80076f0 <HAL_I2C_Master_Transmit>

	HAL_Delay(80); // 50 is too low, 80 is okay
 8003ecc:	2050      	movs	r0, #80	; 0x50
 8003ece:	f002 fc65 	bl	800679c <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8003ed2:	23c8      	movs	r3, #200	; 0xc8
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	4a32      	ldr	r2, [pc, #200]	; (8003fa4 <tempMonitor+0x110>)
 8003eda:	21b8      	movs	r1, #184	; 0xb8
 8003edc:	4830      	ldr	r0, [pc, #192]	; (8003fa0 <tempMonitor+0x10c>)
 8003ede:	f003 fcfb 	bl	80078d8 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <tempMonitor+0x110>)
 8003ee4:	79db      	ldrb	r3, [r3, #7]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <tempMonitor+0x110>)
 8003eee:	799b      	ldrb	r3, [r3, #6]
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8003ef8:	2106      	movs	r1, #6
 8003efa:	482a      	ldr	r0, [pc, #168]	; (8003fa4 <tempMonitor+0x110>)
 8003efc:	f000 febe 	bl	8004c7c <CRC16_2>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d143      	bne.n	8003f92 <tempMonitor+0xfe>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8003f0a:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <tempMonitor+0x110>)
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <tempMonitor+0x110>)
 8003f1a:	795b      	ldrb	r3, [r3, #5]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 8003f22:	88bb      	ldrh	r3, [r7, #4]
 8003f24:	ee07 3a90 	vmov	s15, r3
 8003f28:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f2c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003f30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <tempMonitor+0x114>)
 8003f3a:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <tempMonitor+0x110>)
 8003f40:	791b      	ldrb	r3, [r3, #4]
 8003f42:	09db      	lsrs	r3, r3, #7
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <tempMonitor+0xc2>
 8003f4a:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <tempMonitor+0x114>)
 8003f4c:	edd3 7a00 	vldr	s15, [r3]
 8003f50:	eef1 7a67 	vneg.f32	s15, s15
 8003f54:	e002      	b.n	8003f5c <tempMonitor+0xc8>
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <tempMonitor+0x114>)
 8003f58:	edd3 7a00 	vldr	s15, [r3]
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <tempMonitor+0x114>)
 8003f5e:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <tempMonitor+0x110>)
 8003f64:	789b      	ldrb	r3, [r3, #2]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <tempMonitor+0x110>)
 8003f6e:	78db      	ldrb	r3, [r3, #3]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f80:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003f84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <tempMonitor+0x118>)
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000043c 	.word	0x2000043c
 8003fa0:	200003f0 	.word	0x200003f0
 8003fa4:	20000440 	.word	0x20000440
 8003fa8:	20000018 	.word	0x20000018
 8003fac:	2000001c 	.word	0x2000001c

08003fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003fb8:	f7fc ff02 	bl	8000dc0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003fbc:	f7fc ff26 	bl	8000e0c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fc0:	f002 fb80 	bl	80066c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fc4:	f000 fdbc 	bl	8004b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fc8:	f7fc fd2c 	bl	8000a24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003fcc:	f001 fb7c 	bl	80056c8 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8003fd0:	f000 feee 	bl	8004db0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003fd4:	f001 f8c2 	bl	800515c <MX_TIM1_Init>
  MX_RNG_Init();
 8003fd8:	f000 feb6 	bl	8004d48 <MX_RNG_Init>
  MX_I2C1_Init();
 8003fdc:	f7fc fe6c 	bl	8000cb8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003fe0:	f001 f910 	bl	8005204 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003fe4:	f001 f95c 	bl	80052a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003fe8:	f001 fb3e 	bl	8005668 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8003fec:	f001 fb0c 	bl	8005608 <MX_UART4_Init>
  MX_ADC1_Init();
 8003ff0:	f7fc fc86 	bl	8000900 <MX_ADC1_Init>
  MX_TIM4_Init();
 8003ff4:	f001 f9ca 	bl	800538c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//Temp but not has code in here yet
	cmdBuffer[0] = 0x03;
 8003ff8:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <main+0x1b4>)
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003ffe:	4b59      	ldr	r3, [pc, #356]	; (8004164 <main+0x1b4>)
 8004000:	2200      	movs	r2, #0
 8004002:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8004004:	4b57      	ldr	r3, [pc, #348]	; (8004164 <main+0x1b4>)
 8004006:	2204      	movs	r2, #4
 8004008:	709a      	strb	r2, [r3, #2]

	//initial driver setup to drive ili9341
	ILI9341_Init();
 800400a:	f001 ffcf 	bl	8005fac <ILI9341_Init>

	//Interrupt millisecond
	HAL_TIM_Base_Start_IT(&htim1);
 800400e:	4856      	ldr	r0, [pc, #344]	; (8004168 <main+0x1b8>)
 8004010:	f005 ffda 	bl	8009fc8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8004014:	4855      	ldr	r0, [pc, #340]	; (800416c <main+0x1bc>)
 8004016:	f005 ffd7 	bl	8009fc8 <HAL_TIM_Base_Start_IT>

	//Reset Screen
	setHorizontalScreen(BLACK);
 800401a:	2000      	movs	r0, #0
 800401c:	f7fd fb00 	bl	8001620 <setHorizontalScreen>

	//Read EEPROM First Time
	readData();
 8004020:	f7fd fa24 	bl	800146c <readData>

	//ADC Input variable Resister(Light)
	HAL_ADC_Start(&hadc1);
 8004024:	4852      	ldr	r0, [pc, #328]	; (8004170 <main+0x1c0>)
 8004026:	f002 fc21 	bl	800686c <HAL_ADC_Start>

	// Setup PM Sensor
	uint8_t* respondStart;
	respondStart = wake_sensirion();
 800402a:	f7fc ff63 	bl	8000ef4 <wake_sensirion>
 800402e:	6178      	str	r0, [r7, #20]
	sent_string_to_mcu("STA");
 8004030:	4850      	ldr	r0, [pc, #320]	; (8004174 <main+0x1c4>)
 8004032:	f7fd f89f 	bl	8001174 <sent_string_to_mcu>

		// REAL CODE BEGIN



		calculationClock();
 8004036:	f7fd fbd5 	bl	80017e4 <calculationClock>
		checkResetData();
 800403a:	f7fd fae1 	bl	8001600 <checkResetData>
		resisterMonitor(); //light screen
 800403e:	f7ff f98f 	bl	8003360 <resisterMonitor>

		if (prevMode != mode || prevModeEdit != modeEdit){
 8004042:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <main+0x1c8>)
 8004044:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004048:	4b4c      	ldr	r3, [pc, #304]	; (800417c <main+0x1cc>)
 800404a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404e:	429a      	cmp	r2, r3
 8004050:	d107      	bne.n	8004062 <main+0xb2>
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <main+0x1d0>)
 8004054:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004058:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <main+0x1d4>)
 800405a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800405e:	429a      	cmp	r2, r3
 8004060:	d008      	beq.n	8004074 <main+0xc4>
			prevModeEdit = modeEdit;
 8004062:	4b48      	ldr	r3, [pc, #288]	; (8004184 <main+0x1d4>)
 8004064:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004068:	4b45      	ldr	r3, [pc, #276]	; (8004180 <main+0x1d0>)
 800406a:	801a      	strh	r2, [r3, #0]
			resetPrevNum();
 800406c:	f7fe f9b8 	bl	80023e0 <resetPrevNum>
			resetPrevAlarm();
 8004070:	f7ff fc74 	bl	800395c <resetPrevAlarm>
		}
		// When Change Mode
		if (prevMode != mode){
 8004074:	4b40      	ldr	r3, [pc, #256]	; (8004178 <main+0x1c8>)
 8004076:	f9b3 2000 	ldrsh.w	r2, [r3]
 800407a:	4b40      	ldr	r3, [pc, #256]	; (800417c <main+0x1cc>)
 800407c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004080:	429a      	cmp	r2, r3
 8004082:	d012      	beq.n	80040aa <main+0xfa>
			prevMode = mode;
 8004084:	4b3d      	ldr	r3, [pc, #244]	; (800417c <main+0x1cc>)
 8004086:	f9b3 2000 	ldrsh.w	r2, [r3]
 800408a:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <main+0x1c8>)
 800408c:	801a      	strh	r2, [r3, #0]
			setHorizontalScreen(BLACK);
 800408e:	2000      	movs	r0, #0
 8004090:	f7fd fac6 	bl	8001620 <setHorizontalScreen>
			bottomBarScreen();
 8004094:	f7fe fd0c 	bl	8002ab0 <bottomBarScreen>

			//For Mode 1 StopWatch
			initialStopWatchScreen = false;
 8004098:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <main+0x1d8>)
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
			//For Mode 2 Alarm
			initialAlarmClockScreen = false;
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <main+0x1dc>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
			//For mode 200 Edit Alarm
			initialEditAlarmClockScreen = false;
 80040a4:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <main+0x1e0>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 0){
 80040aa:	4b34      	ldr	r3, [pc, #208]	; (800417c <main+0x1cc>)
 80040ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d121      	bne.n	80040f8 <main+0x148>
			if (halfsecond == 1){	// render every 500 ms
 80040b4:	4b37      	ldr	r3, [pc, #220]	; (8004194 <main+0x1e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 808e 	bne.w	80041da <main+0x22a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <main+0x1e8>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f083 0301 	eor.w	r3, r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <main+0x1e8>)
 80040da:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <main+0x1e4>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

				tempMonitor(); // read every 500 ms
 80040e2:	f7ff fed7 	bl	8003e94 <tempMonitor>
				notifyPm(); // read every 500 ms
 80040e6:	f7ff f833 	bl	8003150 <notifyPm>

				topBarScreen();
 80040ea:	f7fe f96b 	bl	80023c4 <topBarScreen>
				displayClockScreen();
 80040ee:	f7fe fbb7 	bl	8002860 <displayClockScreen>
				bottomBarScreenUpdate();
 80040f2:	f7fe fe59 	bl	8002da8 <bottomBarScreenUpdate>
 80040f6:	e070      	b.n	80041da <main+0x22a>
			}
		}else if(mode == 1){	// No Notify Line at this mode because has delay
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <main+0x1cc>)
 80040fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d102      	bne.n	8004108 <main+0x158>
			stopWatchScreen();
 8004102:	f7ff fb41 	bl	8003788 <stopWatchScreen>
 8004106:	e068      	b.n	80041da <main+0x22a>
		}else if(mode == 2){
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <main+0x1cc>)
 800410a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d108      	bne.n	8004124 <main+0x174>
			alarmClockScreen();
 8004112:	f7ff fd71 	bl	8003bf8 <alarmClockScreen>
			if(halfsecond ==1){
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <main+0x1e4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d15d      	bne.n	80041da <main+0x22a>
				notifyPm(); // read every 500 ms
 800411e:	f7ff f817 	bl	8003150 <notifyPm>
 8004122:	e05a      	b.n	80041da <main+0x22a>
			}
		}else if (mode == 100){ // Adjust modeEdit 1-year, 2-month, 3-date, 4-day, 5-hour, 6-minute, 7-second
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <main+0x1cc>)
 8004126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d136      	bne.n	800419c <main+0x1ec>

			if(halfsecond == 1){ // render every 500 ms
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <main+0x1e4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d151      	bne.n	80041da <main+0x22a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <main+0x1e8>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f083 0301 	eor.w	r3, r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <main+0x1e8>)
 8004152:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <main+0x1e4>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 800415a:	f7fe fff9 	bl	8003150 <notifyPm>
				editScreen();
 800415e:	f7ff fd9f 	bl	8003ca0 <editScreen>
 8004162:	e03a      	b.n	80041da <main+0x22a>
 8004164:	2000043c 	.word	0x2000043c
 8004168:	200005ec 	.word	0x200005ec
 800416c:	20000638 	.word	0x20000638
 8004170:	200003a8 	.word	0x200003a8
 8004174:	0800ecc8 	.word	0x0800ecc8
 8004178:	2000005c 	.word	0x2000005c
 800417c:	200002e4 	.word	0x200002e4
 8004180:	2000005e 	.word	0x2000005e
 8004184:	2000005a 	.word	0x2000005a
 8004188:	20000324 	.word	0x20000324
 800418c:	20000326 	.word	0x20000326
 8004190:	20000327 	.word	0x20000327
 8004194:	200002dc 	.word	0x200002dc
 8004198:	20000050 	.word	0x20000050
			}
		}else if (mode == 200){
 800419c:	4ba2      	ldr	r3, [pc, #648]	; (8004428 <main+0x478>)
 800419e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a2:	2bc8      	cmp	r3, #200	; 0xc8
 80041a4:	d119      	bne.n	80041da <main+0x22a>
			if(halfsecond == 1){ // render every 500 ms
 80041a6:	4ba1      	ldr	r3, [pc, #644]	; (800442c <main+0x47c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d115      	bne.n	80041da <main+0x22a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 80041ae:	4ba0      	ldr	r3, [pc, #640]	; (8004430 <main+0x480>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f083 0301 	eor.w	r3, r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	4b99      	ldr	r3, [pc, #612]	; (8004430 <main+0x480>)
 80041ca:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 80041cc:	4b97      	ldr	r3, [pc, #604]	; (800442c <main+0x47c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 80041d2:	f7fe ffbd 	bl	8003150 <notifyPm>
				editAlarmScreen();
 80041d6:	f7ff fdd7 	bl	8003d88 <editAlarmScreen>
			}
		}


		pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	4895      	ldr	r0, [pc, #596]	; (8004434 <main+0x484>)
 80041de:	f003 f9ad 	bl	800753c <HAL_GPIO_ReadPin>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b92      	ldr	r3, [pc, #584]	; (8004438 <main+0x488>)
 80041f0:	701a      	strb	r2, [r3, #0]
		pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 80041f2:	2140      	movs	r1, #64	; 0x40
 80041f4:	488f      	ldr	r0, [pc, #572]	; (8004434 <main+0x484>)
 80041f6:	f003 f9a1 	bl	800753c <HAL_GPIO_ReadPin>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <main+0x48c>)
 8004208:	701a      	strb	r2, [r3, #0]
		pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 800420a:	2120      	movs	r1, #32
 800420c:	4889      	ldr	r0, [pc, #548]	; (8004434 <main+0x484>)
 800420e:	f003 f995 	bl	800753c <HAL_GPIO_ReadPin>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <main+0x490>)
 8004220:	701a      	strb	r2, [r3, #0]
		pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 8004222:	2110      	movs	r1, #16
 8004224:	4883      	ldr	r0, [pc, #524]	; (8004434 <main+0x484>)
 8004226:	f003 f989 	bl	800753c <HAL_GPIO_ReadPin>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b83      	ldr	r3, [pc, #524]	; (8004444 <main+0x494>)
 8004238:	701a      	strb	r2, [r3, #0]
//		pressButton2 = 0;
//		pressButton3 = 0;
//		pressButton4 = 0;

		//Buzzer
		if ((pressButton1 == true && isPressButton1 == false) ||
 800423a:	4b7f      	ldr	r3, [pc, #508]	; (8004438 <main+0x488>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <main+0x2a0>
 8004242:	4b81      	ldr	r3, [pc, #516]	; (8004448 <main+0x498>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	f083 0301 	eor.w	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d120      	bne.n	8004292 <main+0x2e2>
			(pressButton2 == true && isPressButton2 == false) ||
 8004250:	4b7a      	ldr	r3, [pc, #488]	; (800443c <main+0x48c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
		if ((pressButton1 == true && isPressButton1 == false) ||
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <main+0x2b6>
			(pressButton2 == true && isPressButton2 == false) ||
 8004258:	4b7c      	ldr	r3, [pc, #496]	; (800444c <main+0x49c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	f083 0301 	eor.w	r3, r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d115      	bne.n	8004292 <main+0x2e2>
			(pressButton3 == true && isPressButton3 == false) ||
 8004266:	4b76      	ldr	r3, [pc, #472]	; (8004440 <main+0x490>)
 8004268:	781b      	ldrb	r3, [r3, #0]
			(pressButton2 == true && isPressButton2 == false) ||
 800426a:	2b00      	cmp	r3, #0
 800426c:	d006      	beq.n	800427c <main+0x2cc>
			(pressButton3 == true && isPressButton3 == false) ||
 800426e:	4b78      	ldr	r3, [pc, #480]	; (8004450 <main+0x4a0>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	f083 0301 	eor.w	r3, r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <main+0x2e2>
			(pressButton4 == true && isPressButton4 == false)){
 800427c:	4b71      	ldr	r3, [pc, #452]	; (8004444 <main+0x494>)
 800427e:	781b      	ldrb	r3, [r3, #0]
			(pressButton3 == true && isPressButton3 == false) ||
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00f      	beq.n	80042a4 <main+0x2f4>
			(pressButton4 == true && isPressButton4 == false)){
 8004284:	4b73      	ldr	r3, [pc, #460]	; (8004454 <main+0x4a4>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	f083 0301 	eor.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <main+0x2f4>
			buzzerIsOn = true;
 8004292:	4b71      	ldr	r3, [pc, #452]	; (8004458 <main+0x4a8>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 8004298:	4b70      	ldr	r3, [pc, #448]	; (800445c <main+0x4ac>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	4970      	ldr	r1, [pc, #448]	; (8004460 <main+0x4b0>)
 80042a0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		buzzerSound(40);
 80042a4:	2028      	movs	r0, #40	; 0x28
 80042a6:	f7fc ff89 	bl	80011bc <buzzerSound>

		//General Mode
		if (pressButton1 == true && isPressButton1 == false && !(mode == 100 || mode == 200)){ // increase mode only once
 80042aa:	4b63      	ldr	r3, [pc, #396]	; (8004438 <main+0x488>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02a      	beq.n	8004308 <main+0x358>
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <main+0x498>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	f083 0301 	eor.w	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d023      	beq.n	8004308 <main+0x358>
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <main+0x478>)
 80042c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d01e      	beq.n	8004308 <main+0x358>
 80042ca:	4b57      	ldr	r3, [pc, #348]	; (8004428 <main+0x478>)
 80042cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d0:	2bc8      	cmp	r3, #200	; 0xc8
 80042d2:	d019      	beq.n	8004308 <main+0x358>
			mode++;
 80042d4:	4b54      	ldr	r3, [pc, #336]	; (8004428 <main+0x478>)
 80042d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3301      	adds	r3, #1
 80042de:	b29b      	uxth	r3, r3
 80042e0:	b21a      	sxth	r2, r3
 80042e2:	4b51      	ldr	r3, [pc, #324]	; (8004428 <main+0x478>)
 80042e4:	801a      	strh	r2, [r3, #0]
			if(mode == 3){
 80042e6:	4b50      	ldr	r3, [pc, #320]	; (8004428 <main+0x478>)
 80042e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d102      	bne.n	80042f6 <main+0x346>
				mode = 0;
 80042f0:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <main+0x478>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	801a      	strh	r2, [r3, #0]
			}
			isPressButton1 = true;
 80042f6:	4b54      	ldr	r3, [pc, #336]	; (8004448 <main+0x498>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80042fc:	4b57      	ldr	r3, [pc, #348]	; (800445c <main+0x4ac>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	4958      	ldr	r1, [pc, #352]	; (8004464 <main+0x4b4>)
 8004304:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//StopWatch Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 1 && isStopWatchRunning != true){ //Reset StopWatch
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <main+0x48c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01d      	beq.n	800434c <main+0x39c>
 8004310:	4b4e      	ldr	r3, [pc, #312]	; (800444c <main+0x49c>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	f083 0301 	eor.w	r3, r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <main+0x39c>
 800431e:	4b42      	ldr	r3, [pc, #264]	; (8004428 <main+0x478>)
 8004320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d111      	bne.n	800434c <main+0x39c>
 8004328:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <main+0x4b8>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <main+0x39c>
			isPressButton2 = true;
 8004336:	4b45      	ldr	r3, [pc, #276]	; (800444c <main+0x49c>)
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
			resetStopWatch();
 800433c:	f7ff f898 	bl	8003470 <resetStopWatch>
			prevSecondCounter = millisecondHAL;
 8004340:	4b46      	ldr	r3, [pc, #280]	; (800445c <main+0x4ac>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	4947      	ldr	r1, [pc, #284]	; (8004464 <main+0x4b4>)
 8004348:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (pressButton3 == true && isPressButton3 == false && mode == 1){ //Running/Stop StopWatch
 800434c:	4b3c      	ldr	r3, [pc, #240]	; (8004440 <main+0x490>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d025      	beq.n	80043a0 <main+0x3f0>
 8004354:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <main+0x4a0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f083 0301 	eor.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01e      	beq.n	80043a0 <main+0x3f0>
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <main+0x478>)
 8004364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d119      	bne.n	80043a0 <main+0x3f0>
			isPressButton3 = true;
 800436c:	4b38      	ldr	r3, [pc, #224]	; (8004450 <main+0x4a0>)
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
			if(isStopWatchRunning == false){ // press button
 8004372:	4b3d      	ldr	r3, [pc, #244]	; (8004468 <main+0x4b8>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	f083 0301 	eor.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d006      	beq.n	800438e <main+0x3de>
				millisecondStopWatch = 0;
 8004380:	4b3a      	ldr	r3, [pc, #232]	; (800446c <main+0x4bc>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
				isStopWatchRunning = true;
 8004386:	4b38      	ldr	r3, [pc, #224]	; (8004468 <main+0x4b8>)
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e002      	b.n	8004394 <main+0x3e4>
			}else{
				isStopWatchRunning = false;
 800438e:	4b36      	ldr	r3, [pc, #216]	; (8004468 <main+0x4b8>)
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
			}
			prevSecondCounter = millisecondHAL;
 8004394:	4b31      	ldr	r3, [pc, #196]	; (800445c <main+0x4ac>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	4932      	ldr	r1, [pc, #200]	; (8004464 <main+0x4b4>)
 800439c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Alarm Clock press when want to stop
		if((pressButton1|| pressButton2 || pressButton3 || pressButton4) && alarmIsAlert == true){
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <main+0x488>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <main+0x410>
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <main+0x48c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d107      	bne.n	80043c0 <main+0x410>
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <main+0x490>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d103      	bne.n	80043c0 <main+0x410>
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <main+0x494>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d018      	beq.n	80043f2 <main+0x442>
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <main+0x4c0>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d014      	beq.n	80043f2 <main+0x442>
			isPressButton1 = true;
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <main+0x498>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
			isPressButton2 = true;
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <main+0x49c>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
			isPressButton3 = true;
 80043d4:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <main+0x4a0>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
			isPressButton4 = true;
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <main+0x4a4>)
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80043e0:	4b1e      	ldr	r3, [pc, #120]	; (800445c <main+0x4ac>)
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	491f      	ldr	r1, [pc, #124]	; (8004464 <main+0x4b4>)
 80043e8:	e9c1 2300 	strd	r2, r3, [r1]
			alarmIsAlert = false;
 80043ec:	4b20      	ldr	r3, [pc, #128]	; (8004470 <main+0x4c0>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
		}

		//Adjust Time Mode For Mode 0 and 100
		if (pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <main+0x48c>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d03c      	beq.n	8004474 <main+0x4c4>
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <main+0x49c>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	f083 0301 	eor.w	r3, r3, #1
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d035      	beq.n	8004474 <main+0x4c4>
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <main+0x478>)
 800440a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d130      	bne.n	8004474 <main+0x4c4>
			isPressButton2 = true;
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <main+0x49c>)
 8004414:	2201      	movs	r2, #1
 8004416:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <main+0x4ac>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	4911      	ldr	r1, [pc, #68]	; (8004464 <main+0x4b4>)
 8004420:	e9c1 2300 	strd	r2, r3, [r1]
 8004424:	e05c      	b.n	80044e0 <main+0x530>
 8004426:	bf00      	nop
 8004428:	200002e4 	.word	0x200002e4
 800442c:	200002dc 	.word	0x200002dc
 8004430:	20000050 	.word	0x20000050
 8004434:	40020c00 	.word	0x40020c00
 8004438:	200002e6 	.word	0x200002e6
 800443c:	200002e7 	.word	0x200002e7
 8004440:	200002e8 	.word	0x200002e8
 8004444:	200002e9 	.word	0x200002e9
 8004448:	200002ea 	.word	0x200002ea
 800444c:	200002eb 	.word	0x200002eb
 8004450:	200002ec 	.word	0x200002ec
 8004454:	200002ed 	.word	0x200002ed
 8004458:	20000310 	.word	0x20000310
 800445c:	200002f8 	.word	0x200002f8
 8004460:	20000308 	.word	0x20000308
 8004464:	200002f0 	.word	0x200002f0
 8004468:	20000325 	.word	0x20000325
 800446c:	200002d8 	.word	0x200002d8
 8004470:	200002ef 	.word	0x200002ef
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 8004474:	4ba5      	ldr	r3, [pc, #660]	; (800470c <main+0x75c>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d031      	beq.n	80044e0 <main+0x530>
 800447c:	4ba4      	ldr	r3, [pc, #656]	; (8004710 <main+0x760>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d02d      	beq.n	80044e0 <main+0x530>
 8004484:	4ba3      	ldr	r3, [pc, #652]	; (8004714 <main+0x764>)
 8004486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d128      	bne.n	80044e0 <main+0x530>
 800448e:	4ba2      	ldr	r3, [pc, #648]	; (8004718 <main+0x768>)
 8004490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004494:	4ba1      	ldr	r3, [pc, #644]	; (800471c <main+0x76c>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	1a84      	subs	r4, r0, r2
 800449c:	eb61 0503 	sbc.w	r5, r1, r3
 80044a0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	42ab      	cmp	r3, r5
 80044aa:	bf08      	it	eq
 80044ac:	42a2      	cmpeq	r2, r4
 80044ae:	d217      	bcs.n	80044e0 <main+0x530>
			buzzerIsOn = true;
 80044b0:	4b9b      	ldr	r3, [pc, #620]	; (8004720 <main+0x770>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 80044b6:	4b98      	ldr	r3, [pc, #608]	; (8004718 <main+0x768>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	4999      	ldr	r1, [pc, #612]	; (8004724 <main+0x774>)
 80044be:	e9c1 2300 	strd	r2, r3, [r1]
			buzzerSound(50);
 80044c2:	2032      	movs	r0, #50	; 0x32
 80044c4:	f7fc fe7a 	bl	80011bc <buzzerSound>

			modeEdit = 1; // Reset to Year First time
 80044c8:	4b97      	ldr	r3, [pc, #604]	; (8004728 <main+0x778>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	801a      	strh	r2, [r3, #0]
			mode = 100;
 80044ce:	4b91      	ldr	r3, [pc, #580]	; (8004714 <main+0x764>)
 80044d0:	2264      	movs	r2, #100	; 0x64
 80044d2:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80044d4:	4b90      	ldr	r3, [pc, #576]	; (8004718 <main+0x768>)
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	4990      	ldr	r1, [pc, #576]	; (800471c <main+0x76c>)
 80044dc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 80044e0:	4b8a      	ldr	r3, [pc, #552]	; (800470c <main+0x75c>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02c      	beq.n	8004542 <main+0x592>
 80044e8:	4b89      	ldr	r3, [pc, #548]	; (8004710 <main+0x760>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f083 0301 	eor.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d025      	beq.n	8004542 <main+0x592>
 80044f6:	4b88      	ldr	r3, [pc, #544]	; (8004718 <main+0x768>)
 80044f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044fc:	4b87      	ldr	r3, [pc, #540]	; (800471c <main+0x76c>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	ebb0 0802 	subs.w	r8, r0, r2
 8004506:	eb61 0903 	sbc.w	r9, r1, r3
 800450a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	454b      	cmp	r3, r9
 8004514:	bf08      	it	eq
 8004516:	4542      	cmpeq	r2, r8
 8004518:	d213      	bcs.n	8004542 <main+0x592>
 800451a:	4b7e      	ldr	r3, [pc, #504]	; (8004714 <main+0x764>)
 800451c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004520:	2b64      	cmp	r3, #100	; 0x64
 8004522:	d10e      	bne.n	8004542 <main+0x592>
			isPressButton2 = true;
 8004524:	4b7a      	ldr	r3, [pc, #488]	; (8004710 <main+0x760>)
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Year First time
 800452a:	4b7f      	ldr	r3, [pc, #508]	; (8004728 <main+0x778>)
 800452c:	2201      	movs	r2, #1
 800452e:	801a      	strh	r2, [r3, #0]
			mode = 0;
 8004530:	4b78      	ldr	r3, [pc, #480]	; (8004714 <main+0x764>)
 8004532:	2200      	movs	r2, #0
 8004534:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004536:	4b78      	ldr	r3, [pc, #480]	; (8004718 <main+0x768>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	4977      	ldr	r1, [pc, #476]	; (800471c <main+0x76c>)
 800453e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <main+0x77c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d028      	beq.n	800459c <main+0x5ec>
 800454a:	4b79      	ldr	r3, [pc, #484]	; (8004730 <main+0x780>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f083 0301 	eor.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d021      	beq.n	800459c <main+0x5ec>
 8004558:	4b6e      	ldr	r3, [pc, #440]	; (8004714 <main+0x764>)
 800455a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d11c      	bne.n	800459c <main+0x5ec>
			modeEdit++;
 8004562:	4b71      	ldr	r3, [pc, #452]	; (8004728 <main+0x778>)
 8004564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004568:	b29b      	uxth	r3, r3
 800456a:	3301      	adds	r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	b21a      	sxth	r2, r3
 8004570:	4b6d      	ldr	r3, [pc, #436]	; (8004728 <main+0x778>)
 8004572:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 8004574:	4b6e      	ldr	r3, [pc, #440]	; (8004730 <main+0x780>)
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 8){	 // finish loop edit
 800457a:	4b6b      	ldr	r3, [pc, #428]	; (8004728 <main+0x778>)
 800457c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d105      	bne.n	8004590 <main+0x5e0>
				modeEdit = 1; // Reset to Year
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <main+0x778>)
 8004586:	2201      	movs	r2, #1
 8004588:	801a      	strh	r2, [r3, #0]
				mode = 0;	  // Back to General Mode
 800458a:	4b62      	ldr	r3, [pc, #392]	; (8004714 <main+0x764>)
 800458c:	2200      	movs	r2, #0
 800458e:	801a      	strh	r2, [r3, #0]
			}
			prevSecondCounter = millisecondHAL;
 8004590:	4b61      	ldr	r3, [pc, #388]	; (8004718 <main+0x768>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	4961      	ldr	r1, [pc, #388]	; (800471c <main+0x76c>)
 8004598:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 800459c:	4b65      	ldr	r3, [pc, #404]	; (8004734 <main+0x784>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d073      	beq.n	800468c <main+0x6dc>
 80045a4:	4b64      	ldr	r3, [pc, #400]	; (8004738 <main+0x788>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f083 0301 	eor.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d06c      	beq.n	800468c <main+0x6dc>
 80045b2:	4b58      	ldr	r3, [pc, #352]	; (8004714 <main+0x764>)
 80045b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b8:	2b64      	cmp	r3, #100	; 0x64
 80045ba:	d167      	bne.n	800468c <main+0x6dc>
			if (modeEdit == 1){
 80045bc:	4b5a      	ldr	r3, [pc, #360]	; (8004728 <main+0x778>)
 80045be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d109      	bne.n	80045da <main+0x62a>
				year--;
 80045c6:	4b5d      	ldr	r3, [pc, #372]	; (800473c <main+0x78c>)
 80045c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	4b59      	ldr	r3, [pc, #356]	; (800473c <main+0x78c>)
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e04a      	b.n	8004670 <main+0x6c0>
			}else if (modeEdit == 2){
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <main+0x778>)
 80045dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d109      	bne.n	80045f8 <main+0x648>
				monthIndex--;
 80045e4:	4b56      	ldr	r3, [pc, #344]	; (8004740 <main+0x790>)
 80045e6:	f993 3000 	ldrsb.w	r3, [r3]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	b25a      	sxtb	r2, r3
 80045f2:	4b53      	ldr	r3, [pc, #332]	; (8004740 <main+0x790>)
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e03b      	b.n	8004670 <main+0x6c0>
			}else if (modeEdit == 3){
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <main+0x778>)
 80045fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d109      	bne.n	8004616 <main+0x666>
				date--;
 8004602:	4b50      	ldr	r3, [pc, #320]	; (8004744 <main+0x794>)
 8004604:	f993 3000 	ldrsb.w	r3, [r3]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	b25a      	sxtb	r2, r3
 8004610:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <main+0x794>)
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e02c      	b.n	8004670 <main+0x6c0>
			}else if (modeEdit == 4){
 8004616:	4b44      	ldr	r3, [pc, #272]	; (8004728 <main+0x778>)
 8004618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d109      	bne.n	8004634 <main+0x684>
				dayIndex--;
 8004620:	4b49      	ldr	r3, [pc, #292]	; (8004748 <main+0x798>)
 8004622:	f993 3000 	ldrsb.w	r3, [r3]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	b25a      	sxtb	r2, r3
 800462e:	4b46      	ldr	r3, [pc, #280]	; (8004748 <main+0x798>)
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e01d      	b.n	8004670 <main+0x6c0>
			}else if (modeEdit == 5){
 8004634:	4b3c      	ldr	r3, [pc, #240]	; (8004728 <main+0x778>)
 8004636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d105      	bne.n	800464a <main+0x69a>
				hourNum--;
 800463e:	4b43      	ldr	r3, [pc, #268]	; (800474c <main+0x79c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a41      	ldr	r2, [pc, #260]	; (800474c <main+0x79c>)
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e012      	b.n	8004670 <main+0x6c0>
			}else if (modeEdit == 6){
 800464a:	4b37      	ldr	r3, [pc, #220]	; (8004728 <main+0x778>)
 800464c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004650:	2b06      	cmp	r3, #6
 8004652:	d105      	bne.n	8004660 <main+0x6b0>
				minuteNum--;
 8004654:	4b3e      	ldr	r3, [pc, #248]	; (8004750 <main+0x7a0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3b01      	subs	r3, #1
 800465a:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <main+0x7a0>)
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e007      	b.n	8004670 <main+0x6c0>
			}else if (modeEdit == 7){
 8004660:	4b31      	ldr	r3, [pc, #196]	; (8004728 <main+0x778>)
 8004662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004666:	2b07      	cmp	r3, #7
 8004668:	d102      	bne.n	8004670 <main+0x6c0>
				secondNum = 0;
 800466a:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <main+0x7a4>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8004670:	4b39      	ldr	r3, [pc, #228]	; (8004758 <main+0x7a8>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8004676:	f7fd feb3 	bl	80023e0 <resetPrevNum>
			isPressButton3 = true;
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <main+0x788>)
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <main+0x768>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	4925      	ldr	r1, [pc, #148]	; (800471c <main+0x76c>)
 8004688:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 800468c:	4b33      	ldr	r3, [pc, #204]	; (800475c <main+0x7ac>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80a2 	beq.w	80047da <main+0x82a>
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <main+0x7b0>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	f083 0301 	eor.w	r3, r3, #1
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 809a 	beq.w	80047da <main+0x82a>
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <main+0x764>)
 80046a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ac:	2b64      	cmp	r3, #100	; 0x64
 80046ae:	f040 8094 	bne.w	80047da <main+0x82a>
			if (modeEdit == 1){
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <main+0x778>)
 80046b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d109      	bne.n	80046d0 <main+0x720>
				year++;
 80046bc:	4b1f      	ldr	r3, [pc, #124]	; (800473c <main+0x78c>)
 80046be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	b21a      	sxth	r2, r3
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <main+0x78c>)
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	e076      	b.n	80047be <main+0x80e>
			}else if (modeEdit == 2){
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <main+0x778>)
 80046d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d109      	bne.n	80046ee <main+0x73e>
				monthIndex++;
 80046da:	4b19      	ldr	r3, [pc, #100]	; (8004740 <main+0x790>)
 80046dc:	f993 3000 	ldrsb.w	r3, [r3]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	b25a      	sxtb	r2, r3
 80046e8:	4b15      	ldr	r3, [pc, #84]	; (8004740 <main+0x790>)
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	e067      	b.n	80047be <main+0x80e>
			}else if (modeEdit == 3){
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <main+0x778>)
 80046f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d135      	bne.n	8004764 <main+0x7b4>
				date++;
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <main+0x794>)
 80046fa:	f993 3000 	ldrsb.w	r3, [r3]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	b2db      	uxtb	r3, r3
 8004704:	b25a      	sxtb	r2, r3
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <main+0x794>)
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e058      	b.n	80047be <main+0x80e>
 800470c:	200002e7 	.word	0x200002e7
 8004710:	200002eb 	.word	0x200002eb
 8004714:	200002e4 	.word	0x200002e4
 8004718:	200002f8 	.word	0x200002f8
 800471c:	200002f0 	.word	0x200002f0
 8004720:	20000310 	.word	0x20000310
 8004724:	20000308 	.word	0x20000308
 8004728:	2000005a 	.word	0x2000005a
 800472c:	200002e6 	.word	0x200002e6
 8004730:	200002ea 	.word	0x200002ea
 8004734:	200002e8 	.word	0x200002e8
 8004738:	200002ec 	.word	0x200002ec
 800473c:	200000b2 	.word	0x200000b2
 8004740:	200000b1 	.word	0x200000b1
 8004744:	20000061 	.word	0x20000061
 8004748:	200000b0 	.word	0x200000b0
 800474c:	20000040 	.word	0x20000040
 8004750:	2000003c 	.word	0x2000003c
 8004754:	20000038 	.word	0x20000038
 8004758:	20000050 	.word	0x20000050
 800475c:	200002e9 	.word	0x200002e9
 8004760:	200002ed 	.word	0x200002ed
			}else if (modeEdit == 4){
 8004764:	4ba8      	ldr	r3, [pc, #672]	; (8004a08 <main+0xa58>)
 8004766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d109      	bne.n	8004782 <main+0x7d2>
				dayIndex++;
 800476e:	4ba7      	ldr	r3, [pc, #668]	; (8004a0c <main+0xa5c>)
 8004770:	f993 3000 	ldrsb.w	r3, [r3]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3301      	adds	r3, #1
 8004778:	b2db      	uxtb	r3, r3
 800477a:	b25a      	sxtb	r2, r3
 800477c:	4ba3      	ldr	r3, [pc, #652]	; (8004a0c <main+0xa5c>)
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e01d      	b.n	80047be <main+0x80e>
			}else if (modeEdit == 5){
 8004782:	4ba1      	ldr	r3, [pc, #644]	; (8004a08 <main+0xa58>)
 8004784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004788:	2b05      	cmp	r3, #5
 800478a:	d105      	bne.n	8004798 <main+0x7e8>
				hourNum++;
 800478c:	4ba0      	ldr	r3, [pc, #640]	; (8004a10 <main+0xa60>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	4a9f      	ldr	r2, [pc, #636]	; (8004a10 <main+0xa60>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e012      	b.n	80047be <main+0x80e>
			}else if (modeEdit == 6){
 8004798:	4b9b      	ldr	r3, [pc, #620]	; (8004a08 <main+0xa58>)
 800479a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d105      	bne.n	80047ae <main+0x7fe>
				minuteNum++;
 80047a2:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <main+0xa64>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	4a9a      	ldr	r2, [pc, #616]	; (8004a14 <main+0xa64>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e007      	b.n	80047be <main+0x80e>
			}else if (modeEdit == 7){
 80047ae:	4b96      	ldr	r3, [pc, #600]	; (8004a08 <main+0xa58>)
 80047b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047b4:	2b07      	cmp	r3, #7
 80047b6:	d102      	bne.n	80047be <main+0x80e>
				secondNum = 0;
 80047b8:	4b97      	ldr	r3, [pc, #604]	; (8004a18 <main+0xa68>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 80047be:	4b97      	ldr	r3, [pc, #604]	; (8004a1c <main+0xa6c>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 80047c4:	f7fd fe0c 	bl	80023e0 <resetPrevNum>
			isPressButton4 = true;
 80047c8:	4b95      	ldr	r3, [pc, #596]	; (8004a20 <main+0xa70>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80047ce:	4b95      	ldr	r3, [pc, #596]	; (8004a24 <main+0xa74>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	4994      	ldr	r1, [pc, #592]	; (8004a28 <main+0xa78>)
 80047d6:	e9c1 2300 	strd	r2, r3, [r1]
		}



		//Adjust Alarm Mode For Mode 2 and 200
		if (pressButton2 == true && isPressButton2 == false && mode == 2){ // initial time when pressButton2
 80047da:	4b94      	ldr	r3, [pc, #592]	; (8004a2c <main+0xa7c>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d029      	beq.n	8004836 <main+0x886>
 80047e2:	4b93      	ldr	r3, [pc, #588]	; (8004a30 <main+0xa80>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f083 0301 	eor.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d022      	beq.n	8004836 <main+0x886>
 80047f0:	4b90      	ldr	r3, [pc, #576]	; (8004a34 <main+0xa84>)
 80047f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d11d      	bne.n	8004836 <main+0x886>
			isPressButton2 = true;
 80047fa:	4b8d      	ldr	r3, [pc, #564]	; (8004a30 <main+0xa80>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
			alarmIsOn = !alarmIsOn;
 8004800:	4b8d      	ldr	r3, [pc, #564]	; (8004a38 <main+0xa88>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f083 0301 	eor.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b87      	ldr	r3, [pc, #540]	; (8004a38 <main+0xa88>)
 800481c:	701a      	strb	r2, [r3, #0]
			displayAlarmIcon(alarmIsOn);
 800481e:	4b86      	ldr	r3, [pc, #536]	; (8004a38 <main+0xa88>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd fb54 	bl	8001ed0 <displayAlarmIcon>
			prevSecondCounter = millisecondHAL;
 8004828:	4b7e      	ldr	r3, [pc, #504]	; (8004a24 <main+0xa74>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	497e      	ldr	r1, [pc, #504]	; (8004a28 <main+0xa78>)
 8004830:	e9c1 2300 	strd	r2, r3, [r1]
 8004834:	e039      	b.n	80048aa <main+0x8fa>
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 2 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 8004836:	4b7d      	ldr	r3, [pc, #500]	; (8004a2c <main+0xa7c>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d035      	beq.n	80048aa <main+0x8fa>
 800483e:	4b7c      	ldr	r3, [pc, #496]	; (8004a30 <main+0xa80>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d031      	beq.n	80048aa <main+0x8fa>
 8004846:	4b7b      	ldr	r3, [pc, #492]	; (8004a34 <main+0xa84>)
 8004848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d12c      	bne.n	80048aa <main+0x8fa>
 8004850:	4b74      	ldr	r3, [pc, #464]	; (8004a24 <main+0xa74>)
 8004852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004856:	4b74      	ldr	r3, [pc, #464]	; (8004a28 <main+0xa78>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	ebb0 0a02 	subs.w	sl, r0, r2
 8004860:	eb61 0b03 	sbc.w	fp, r1, r3
 8004864:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	455b      	cmp	r3, fp
 800486e:	bf08      	it	eq
 8004870:	4552      	cmpeq	r2, sl
 8004872:	d21a      	bcs.n	80048aa <main+0x8fa>
			buzzerIsOn = true;
 8004874:	4b71      	ldr	r3, [pc, #452]	; (8004a3c <main+0xa8c>)
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
			buzzerPrevMillisecondHAL = millisecondHAL;
 800487a:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <main+0xa74>)
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	496f      	ldr	r1, [pc, #444]	; (8004a40 <main+0xa90>)
 8004882:	e9c1 2300 	strd	r2, r3, [r1]
			buzzerSound(50);
 8004886:	2032      	movs	r0, #50	; 0x32
 8004888:	f7fc fc98 	bl	80011bc <buzzerSound>

			modeEdit = 1; // Reset to Hour First time
 800488c:	4b5e      	ldr	r3, [pc, #376]	; (8004a08 <main+0xa58>)
 800488e:	2201      	movs	r2, #1
 8004890:	801a      	strh	r2, [r3, #0]
			mode = 200;
 8004892:	4b68      	ldr	r3, [pc, #416]	; (8004a34 <main+0xa84>)
 8004894:	22c8      	movs	r2, #200	; 0xc8
 8004896:	801a      	strh	r2, [r3, #0]
			alarmIsOn = true; // always on when editing this alarm
 8004898:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <main+0xa88>)
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 800489e:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <main+0xa74>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	4960      	ldr	r1, [pc, #384]	; (8004a28 <main+0xa78>)
 80048a6:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Alarm Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 200){
 80048aa:	4b60      	ldr	r3, [pc, #384]	; (8004a2c <main+0xa7c>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02f      	beq.n	8004912 <main+0x962>
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <main+0xa80>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	f083 0301 	eor.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d028      	beq.n	8004912 <main+0x962>
 80048c0:	4b58      	ldr	r3, [pc, #352]	; (8004a24 <main+0xa74>)
 80048c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048c6:	4b58      	ldr	r3, [pc, #352]	; (8004a28 <main+0xa78>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	1a86      	subs	r6, r0, r2
 80048ce:	60be      	str	r6, [r7, #8]
 80048d0:	eb61 0303 	sbc.w	r3, r1, r3
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048e2:	428b      	cmp	r3, r1
 80048e4:	bf08      	it	eq
 80048e6:	4282      	cmpeq	r2, r0
 80048e8:	d213      	bcs.n	8004912 <main+0x962>
 80048ea:	4b52      	ldr	r3, [pc, #328]	; (8004a34 <main+0xa84>)
 80048ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f0:	2bc8      	cmp	r3, #200	; 0xc8
 80048f2:	d10e      	bne.n	8004912 <main+0x962>
			isPressButton2 = true;
 80048f4:	4b4e      	ldr	r3, [pc, #312]	; (8004a30 <main+0xa80>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Hour First time
 80048fa:	4b43      	ldr	r3, [pc, #268]	; (8004a08 <main+0xa58>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	801a      	strh	r2, [r3, #0]
			mode = 2;
 8004900:	4b4c      	ldr	r3, [pc, #304]	; (8004a34 <main+0xa84>)
 8004902:	2202      	movs	r2, #2
 8004904:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <main+0xa74>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	4946      	ldr	r1, [pc, #280]	; (8004a28 <main+0xa78>)
 800490e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 200){ // increase mode only once
 8004912:	4b4c      	ldr	r3, [pc, #304]	; (8004a44 <main+0xa94>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d028      	beq.n	800496c <main+0x9bc>
 800491a:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <main+0xa98>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	f083 0301 	eor.w	r3, r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d021      	beq.n	800496c <main+0x9bc>
 8004928:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <main+0xa84>)
 800492a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800492e:	2bc8      	cmp	r3, #200	; 0xc8
 8004930:	d11c      	bne.n	800496c <main+0x9bc>
			modeEdit++;
 8004932:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <main+0xa58>)
 8004934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004938:	b29b      	uxth	r3, r3
 800493a:	3301      	adds	r3, #1
 800493c:	b29b      	uxth	r3, r3
 800493e:	b21a      	sxth	r2, r3
 8004940:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <main+0xa58>)
 8004942:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 8004944:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <main+0xa98>)
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 3){	 // finish loop edit
 800494a:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <main+0xa58>)
 800494c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d105      	bne.n	8004960 <main+0x9b0>
				modeEdit = 1; // Reset to Hour
 8004954:	4b2c      	ldr	r3, [pc, #176]	; (8004a08 <main+0xa58>)
 8004956:	2201      	movs	r2, #1
 8004958:	801a      	strh	r2, [r3, #0]
				mode = 2;	  // Back to Alarm Mode
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <main+0xa84>)
 800495c:	2202      	movs	r2, #2
 800495e:	801a      	strh	r2, [r3, #0]
			}
			prevSecondCounter = millisecondHAL;
 8004960:	4b30      	ldr	r3, [pc, #192]	; (8004a24 <main+0xa74>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	4930      	ldr	r1, [pc, #192]	; (8004a28 <main+0xa78>)
 8004968:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 200){ // increase value
 800496c:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <main+0xa9c>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02e      	beq.n	80049d2 <main+0xa22>
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <main+0xaa0>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f083 0301 	eor.w	r3, r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d027      	beq.n	80049d2 <main+0xa22>
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <main+0xa84>)
 8004984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004988:	2bc8      	cmp	r3, #200	; 0xc8
 800498a:	d122      	bne.n	80049d2 <main+0xa22>
			if (modeEdit == 1){
 800498c:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <main+0xa58>)
 800498e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <main+0x9f2>
				alarmHour--;
 8004996:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <main+0xaa4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3b01      	subs	r3, #1
 800499c:	4a2d      	ldr	r2, [pc, #180]	; (8004a54 <main+0xaa4>)
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e009      	b.n	80049b6 <main+0xa06>
			}else if (modeEdit == 2){
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <main+0xa58>)
 80049a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d104      	bne.n	80049b6 <main+0xa06>
				alarmMinute--;
 80049ac:	4b2a      	ldr	r3, [pc, #168]	; (8004a58 <main+0xaa8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <main+0xaa8>)
 80049b4:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 80049b6:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <main+0xa6c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 80049bc:	f7fe ffce 	bl	800395c <resetPrevAlarm>
			isPressButton3 = true;
 80049c0:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <main+0xaa0>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <main+0xa74>)
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <main+0xa78>)
 80049ce:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 200){ // decrease value
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <main+0xaac>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d05a      	beq.n	8004a90 <main+0xae0>
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <main+0xa70>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f083 0301 	eor.w	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d053      	beq.n	8004a90 <main+0xae0>
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <main+0xa84>)
 80049ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ee:	2bc8      	cmp	r3, #200	; 0xc8
 80049f0:	d14e      	bne.n	8004a90 <main+0xae0>
			if (modeEdit == 1){
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <main+0xa58>)
 80049f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d131      	bne.n	8004a60 <main+0xab0>
				alarmHour++;
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <main+0xaa4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <main+0xaa4>)
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e035      	b.n	8004a74 <main+0xac4>
 8004a08:	2000005a 	.word	0x2000005a
 8004a0c:	200000b0 	.word	0x200000b0
 8004a10:	20000040 	.word	0x20000040
 8004a14:	2000003c 	.word	0x2000003c
 8004a18:	20000038 	.word	0x20000038
 8004a1c:	20000050 	.word	0x20000050
 8004a20:	200002ed 	.word	0x200002ed
 8004a24:	200002f8 	.word	0x200002f8
 8004a28:	200002f0 	.word	0x200002f0
 8004a2c:	200002e7 	.word	0x200002e7
 8004a30:	200002eb 	.word	0x200002eb
 8004a34:	200002e4 	.word	0x200002e4
 8004a38:	20000060 	.word	0x20000060
 8004a3c:	20000310 	.word	0x20000310
 8004a40:	20000308 	.word	0x20000308
 8004a44:	200002e6 	.word	0x200002e6
 8004a48:	200002ea 	.word	0x200002ea
 8004a4c:	200002e8 	.word	0x200002e8
 8004a50:	200002ec 	.word	0x200002ec
 8004a54:	200002d0 	.word	0x200002d0
 8004a58:	200002cc 	.word	0x200002cc
 8004a5c:	200002e9 	.word	0x200002e9
			}else if (modeEdit == 2){
 8004a60:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <main+0xb5c>)
 8004a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d104      	bne.n	8004a74 <main+0xac4>
				alarmMinute++;
 8004a6a:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <main+0xb60>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <main+0xb60>)
 8004a72:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <main+0xb64>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 8004a7a:	f7fe ff6f 	bl	800395c <resetPrevAlarm>
			isPressButton4 = true;
 8004a7e:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <main+0xb68>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <main+0xb6c>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	4925      	ldr	r1, [pc, #148]	; (8004b20 <main+0xb70>)
 8004a8c:	e9c1 2300 	strd	r2, r3, [r1]
		}



		if(millisecondHAL - prevSecondCounter >= 150){
 8004a90:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <main+0xb6c>)
 8004a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a96:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <main+0xb70>)
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	1a86      	subs	r6, r0, r2
 8004a9e:	603e      	str	r6, [r7, #0]
 8004aa0:	eb61 0303 	sbc.w	r3, r1, r3
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bf08      	it	eq
 8004aae:	2a96      	cmpeq	r2, #150	; 0x96
 8004ab0:	f4ff aac1 	bcc.w	8004036 <main+0x86>
			//Reset isPressButton
			if (pressButton1 == false){
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <main+0xb74>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	f083 0301 	eor.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <main+0xb18>
				isPressButton1 = false;
 8004ac2:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <main+0xb78>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
			}
			if (pressButton2 == false){
 8004ac8:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <main+0xb7c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f083 0301 	eor.w	r3, r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <main+0xb2c>
				isPressButton2 = false;
 8004ad6:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <main+0xb80>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
			}
			if (pressButton3 == false){
 8004adc:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <main+0xb84>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f083 0301 	eor.w	r3, r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <main+0xb40>
				isPressButton3 = false;
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <main+0xb88>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
			}
			if (pressButton4 == false){
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <main+0xb8c>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f083 0301 	eor.w	r3, r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f43f aa9b 	beq.w	8004036 <main+0x86>
				isPressButton4 = false;
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <main+0xb68>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
		calculationClock();
 8004b06:	f7ff ba96 	b.w	8004036 <main+0x86>
 8004b0a:	bf00      	nop
 8004b0c:	2000005a 	.word	0x2000005a
 8004b10:	200002cc 	.word	0x200002cc
 8004b14:	20000050 	.word	0x20000050
 8004b18:	200002ed 	.word	0x200002ed
 8004b1c:	200002f8 	.word	0x200002f8
 8004b20:	200002f0 	.word	0x200002f0
 8004b24:	200002e6 	.word	0x200002e6
 8004b28:	200002ea 	.word	0x200002ea
 8004b2c:	200002e7 	.word	0x200002e7
 8004b30:	200002eb 	.word	0x200002eb
 8004b34:	200002e8 	.word	0x200002e8
 8004b38:	200002ec 	.word	0x200002ec
 8004b3c:	200002e9 	.word	0x200002e9

08004b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b0b8      	sub	sp, #224	; 0xe0
 8004b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b4a:	2234      	movs	r2, #52	; 0x34
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f007 f9c6 	bl	800bee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	2290      	movs	r2, #144	; 0x90
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f007 f9b7 	bl	800bee0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004b72:	f003 fcf5 	bl	8008560 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <SystemClock_Config+0x130>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	; (8004c70 <SystemClock_Config+0x130>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6413      	str	r3, [r2, #64]	; 0x40
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <SystemClock_Config+0x130>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b8e:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <SystemClock_Config+0x134>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <SystemClock_Config+0x134>)
 8004b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <SystemClock_Config+0x134>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004bac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8004bc8:	23c8      	movs	r3, #200	; 0xc8
 8004bca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004bd4:	2309      	movs	r3, #9
 8004bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004be0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 fd1b 	bl	8008620 <HAL_RCC_OscConfig>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004bf0:	f000 f8a6 	bl	8004d40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004bf4:	f003 fcc4 	bl	8008580 <HAL_PWREx_EnableOverDrive>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004bfe:	f000 f89f 	bl	8004d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c02:	230f      	movs	r3, #15
 8004c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004c24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c28:	2106      	movs	r1, #6
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f003 ffa6 	bl	8008b7c <HAL_RCC_ClockConfig>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8004c36:	f000 f883 	bl	8004d40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <SystemClock_Config+0x138>)
 8004c3c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c42:	2300      	movs	r3, #0
 8004c44:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004c46:	2300      	movs	r3, #0
 8004c48:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 f991 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8004c64:	f000 f86c 	bl	8004d40 <Error_Handler>
  }
}
 8004c68:	bf00      	nop
 8004c6a:	37e0      	adds	r7, #224	; 0xe0
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40007000 	.word	0x40007000
 8004c78:	00204340 	.word	0x00204340

08004c7c <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8004c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c8c:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	737b      	strb	r3, [r7, #13]

	while (length--){
 8004c92:	e023      	b.n	8004cdc <CRC16_2+0x60>
		crc ^= *ptr++;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	89fb      	ldrh	r3, [r7, #14]
 8004ca0:	4053      	eors	r3, r2
 8004ca2:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	737b      	strb	r3, [r7, #13]
 8004ca8:	e015      	b.n	8004cd6 <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <CRC16_2+0x4e>
				crc >>= 1;
 8004cb4:	89fb      	ldrh	r3, [r7, #14]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8004cc0:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	81fb      	strh	r3, [r7, #14]
 8004cc8:	e002      	b.n	8004cd0 <CRC16_2+0x54>
			}
			else
				crc >>= 1;
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 8004cd0:	7b7b      	ldrb	r3, [r7, #13]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	737b      	strb	r3, [r7, #13]
 8004cd6:	7b7b      	ldrb	r3, [r7, #13]
 8004cd8:	2b07      	cmp	r3, #7
 8004cda:	d9e6      	bls.n	8004caa <CRC16_2+0x2e>
	while (length--){
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	1e5a      	subs	r2, r3, #1
 8004ce0:	70fa      	strb	r2, [r7, #3]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1d6      	bne.n	8004c94 <CRC16_2+0x18>
		}
	}
	return crc;
 8004ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]

	//On Board
	//Blue
	if (GPIO_Pin == GPIO_PIN_13){
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d04:	d110      	bne.n	8004d28 <HAL_GPIO_EXTI_Callback+0x34>
		userResetButton = 1;
 8004d06:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Interrupt pin13 \n\r");
 8004d0c:	4909      	ldr	r1, [pc, #36]	; (8004d34 <HAL_GPIO_EXTI_Callback+0x40>)
 8004d0e:	480a      	ldr	r0, [pc, #40]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d10:	f007 fd30 	bl	800c774 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8004d14:	4808      	ldr	r0, [pc, #32]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d16:	f7fb fa93 	bl	8000240 <strlen>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	23c8      	movs	r3, #200	; 0xc8
 8004d20:	4905      	ldr	r1, [pc, #20]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d22:	4806      	ldr	r0, [pc, #24]	; (8004d3c <HAL_GPIO_EXTI_Callback+0x48>)
 8004d24:	f006 fb84 	bl	800b430 <HAL_UART_Transmit>
	}

}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200002ee 	.word	0x200002ee
 8004d34:	0800eccc 	.word	0x0800eccc
 8004d38:	20000448 	.word	0x20000448
 8004d3c:	20000684 	.word	0x20000684

08004d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8004d44:	e7fe      	b.n	8004d44 <Error_Handler+0x4>
	...

08004d48 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <MX_RNG_Init+0x20>)
 8004d4e:	4a07      	ldr	r2, [pc, #28]	; (8004d6c <MX_RNG_Init+0x24>)
 8004d50:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004d52:	4805      	ldr	r0, [pc, #20]	; (8004d68 <MX_RNG_Init+0x20>)
 8004d54:	f004 fd3c 	bl	80097d0 <HAL_RNG_Init>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8004d5e:	f7ff ffef 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200004e0 	.word	0x200004e0
 8004d6c:	50060800 	.word	0x50060800

08004d70 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_RNG_MspInit+0x38>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10b      	bne.n	8004d9a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_RNG_MspInit+0x3c>)
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	4a09      	ldr	r2, [pc, #36]	; (8004dac <HAL_RNG_MspInit+0x3c>)
 8004d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8c:	6353      	str	r3, [r2, #52]	; 0x34
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <HAL_RNG_MspInit+0x3c>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	50060800 	.word	0x50060800
 8004dac:	40023800 	.word	0x40023800

08004db0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004db4:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004db6:	4a1c      	ldr	r2, [pc, #112]	; (8004e28 <MX_SPI5_Init+0x78>)
 8004db8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004dc0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dc8:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004dce:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dd0:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dd6:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004dfe:	2207      	movs	r2, #7
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004e0e:	4805      	ldr	r0, [pc, #20]	; (8004e24 <MX_SPI5_Init+0x74>)
 8004e10:	f004 fd08 	bl	8009824 <HAL_SPI_Init>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8004e1a:	f7ff ff91 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200004f0 	.word	0x200004f0
 8004e28:	40015000 	.word	0x40015000

08004e2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <HAL_SPI_MspInit+0x7c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d128      	bne.n	8004ea0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004e4e:	4b17      	ldr	r3, [pc, #92]	; (8004eac <HAL_SPI_MspInit+0x80>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <HAL_SPI_MspInit+0x80>)
 8004e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e58:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5a:	4b14      	ldr	r3, [pc, #80]	; (8004eac <HAL_SPI_MspInit+0x80>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <HAL_SPI_MspInit+0x80>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	4a10      	ldr	r2, [pc, #64]	; (8004eac <HAL_SPI_MspInit+0x80>)
 8004e6c:	f043 0320 	orr.w	r3, r3, #32
 8004e70:	6313      	str	r3, [r2, #48]	; 0x30
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <HAL_SPI_MspInit+0x80>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004e7e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e84:	2302      	movs	r3, #2
 8004e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004e90:	2305      	movs	r3, #5
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4805      	ldr	r0, [pc, #20]	; (8004eb0 <HAL_SPI_MspInit+0x84>)
 8004e9c:	f002 f9a2 	bl	80071e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3728      	adds	r7, #40	; 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40015000 	.word	0x40015000
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40021400 	.word	0x40021400

08004eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <HAL_MspInit+0x44>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <HAL_MspInit+0x44>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec6:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <HAL_MspInit+0x44>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed2:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <HAL_MspInit+0x44>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <HAL_MspInit+0x44>)
 8004ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004edc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_MspInit+0x44>)
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800

08004efc <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f00:	f001 fc2c 	bl	800675c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f04:	bf00      	nop
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f0c:	4807      	ldr	r0, [pc, #28]	; (8004f2c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8004f0e:	f005 faaf 	bl	800a470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004f1a:	6013      	str	r3, [r2, #0]
  millisecondStopWatch++;
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004f24:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200005ec 	.word	0x200005ec
 8004f30:	200002d4 	.word	0x200002d4
 8004f34:	200002d8 	.word	0x200002d8

08004f38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f3c:	4803      	ldr	r0, [pc, #12]	; (8004f4c <TIM2_IRQHandler+0x14>)
 8004f3e:	f005 fa97 	bl	800a470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8004f42:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <TIM2_IRQHandler+0x18>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f48:	bf00      	nop
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000638 	.word	0x20000638
 8004f50:	200002dc 	.word	0x200002dc

08004f54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004f58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004f5c:	f002 fb20 	bl	80075a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
	return 1;
 8004f68:	2301      	movs	r3, #1
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <_kill>:

int _kill(int pid, int sig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f7e:	f006 ff85 	bl	800be8c <__errno>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2216      	movs	r2, #22
 8004f86:	601a      	str	r2, [r3, #0]
	return -1;
 8004f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <_exit>:

void _exit (int status)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ffe7 	bl	8004f74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fa6:	e7fe      	b.n	8004fa6 <_exit+0x12>

08004fa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e00a      	b.n	8004fd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fba:	f3af 8000 	nop.w
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	60ba      	str	r2, [r7, #8]
 8004fc6:	b2ca      	uxtb	r2, r1
 8004fc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	dbf0      	blt.n	8004fba <_read+0x12>
	}

return len;
 8004fd8:	687b      	ldr	r3, [r7, #4]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e009      	b.n	8005008 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	60ba      	str	r2, [r7, #8]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3301      	adds	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	dbf1      	blt.n	8004ff4 <_write+0x12>
	}
	return len;
 8005010:	687b      	ldr	r3, [r7, #4]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <_close>:

int _close(int file)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
	return -1;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005042:	605a      	str	r2, [r3, #4]
	return 0;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <_isatty>:

int _isatty(int file)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
	return 1;
 800505a:	2301      	movs	r3, #1
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
	return 0;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800508c:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <_sbrk+0x5c>)
 800508e:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <_sbrk+0x60>)
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005098:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <_sbrk+0x64>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d102      	bne.n	80050a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <_sbrk+0x64>)
 80050a2:	4a12      	ldr	r2, [pc, #72]	; (80050ec <_sbrk+0x68>)
 80050a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <_sbrk+0x64>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d207      	bcs.n	80050c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050b4:	f006 feea 	bl	800be8c <__errno>
 80050b8:	4603      	mov	r3, r0
 80050ba:	220c      	movs	r2, #12
 80050bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295
 80050c2:	e009      	b.n	80050d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050c4:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <_sbrk+0x64>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <_sbrk+0x64>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <_sbrk+0x64>)
 80050d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050d6:	68fb      	ldr	r3, [r7, #12]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20080000 	.word	0x20080000
 80050e4:	00000400 	.word	0x00000400
 80050e8:	20000398 	.word	0x20000398
 80050ec:	20000828 	.word	0x20000828

080050f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050f4:	4b15      	ldr	r3, [pc, #84]	; (800514c <SystemInit+0x5c>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	4a14      	ldr	r2, [pc, #80]	; (800514c <SystemInit+0x5c>)
 80050fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <SystemInit+0x60>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a11      	ldr	r2, [pc, #68]	; (8005150 <SystemInit+0x60>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <SystemInit+0x60>)
 8005112:	2200      	movs	r2, #0
 8005114:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005116:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <SystemInit+0x60>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	490d      	ldr	r1, [pc, #52]	; (8005150 <SystemInit+0x60>)
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <SystemInit+0x64>)
 800511e:	4013      	ands	r3, r2
 8005120:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <SystemInit+0x60>)
 8005124:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <SystemInit+0x68>)
 8005126:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <SystemInit+0x60>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a08      	ldr	r2, [pc, #32]	; (8005150 <SystemInit+0x60>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <SystemInit+0x60>)
 8005136:	2200      	movs	r2, #0
 8005138:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <SystemInit+0x5c>)
 800513c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005140:	609a      	str	r2, [r3, #8]
#endif
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	e000ed00 	.word	0xe000ed00
 8005150:	40023800 	.word	0x40023800
 8005154:	fef6ffff 	.word	0xfef6ffff
 8005158:	24003010 	.word	0x24003010

0800515c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005162:	f107 0310 	add.w	r3, r7, #16
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	609a      	str	r2, [r3, #8]
 800516e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	605a      	str	r2, [r3, #4]
 8005178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800517a:	4b20      	ldr	r3, [pc, #128]	; (80051fc <MX_TIM1_Init+0xa0>)
 800517c:	4a20      	ldr	r2, [pc, #128]	; (8005200 <MX_TIM1_Init+0xa4>)
 800517e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005180:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <MX_TIM1_Init+0xa0>)
 8005182:	22c7      	movs	r2, #199	; 0xc7
 8005184:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005186:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <MX_TIM1_Init+0xa0>)
 8005188:	2200      	movs	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <MX_TIM1_Init+0xa0>)
 800518e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005192:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <MX_TIM1_Init+0xa0>)
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800519a:	4b18      	ldr	r3, [pc, #96]	; (80051fc <MX_TIM1_Init+0xa0>)
 800519c:	2200      	movs	r2, #0
 800519e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051a0:	4b16      	ldr	r3, [pc, #88]	; (80051fc <MX_TIM1_Init+0xa0>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80051a6:	4815      	ldr	r0, [pc, #84]	; (80051fc <MX_TIM1_Init+0xa0>)
 80051a8:	f004 feb6 	bl	8009f18 <HAL_TIM_Base_Init>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80051b2:	f7ff fdc5 	bl	8004d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80051bc:	f107 0310 	add.w	r3, r7, #16
 80051c0:	4619      	mov	r1, r3
 80051c2:	480e      	ldr	r0, [pc, #56]	; (80051fc <MX_TIM1_Init+0xa0>)
 80051c4:	f005 fb84 	bl	800a8d0 <HAL_TIM_ConfigClockSource>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80051ce:	f7ff fdb7 	bl	8004d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4806      	ldr	r0, [pc, #24]	; (80051fc <MX_TIM1_Init+0xa0>)
 80051e4:	f006 f82a 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80051ee:	f7ff fda7 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80051f2:	bf00      	nop
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200005ec 	.word	0x200005ec
 8005200:	40010000 	.word	0x40010000

08005204 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800520a:	f107 0310 	add.w	r3, r7, #16
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <MX_TIM2_Init+0x98>)
 8005224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005228:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 800522a:	4b1c      	ldr	r3, [pc, #112]	; (800529c <MX_TIM2_Init+0x98>)
 800522c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <MX_TIM2_Init+0x98>)
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8005238:	4b18      	ldr	r3, [pc, #96]	; (800529c <MX_TIM2_Init+0x98>)
 800523a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800523e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <MX_TIM2_Init+0x98>)
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <MX_TIM2_Init+0x98>)
 8005248:	2200      	movs	r2, #0
 800524a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800524c:	4813      	ldr	r0, [pc, #76]	; (800529c <MX_TIM2_Init+0x98>)
 800524e:	f004 fe63 	bl	8009f18 <HAL_TIM_Base_Init>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005258:	f7ff fd72 	bl	8004d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800525c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005262:	f107 0310 	add.w	r3, r7, #16
 8005266:	4619      	mov	r1, r3
 8005268:	480c      	ldr	r0, [pc, #48]	; (800529c <MX_TIM2_Init+0x98>)
 800526a:	f005 fb31 	bl	800a8d0 <HAL_TIM_ConfigClockSource>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005274:	f7ff fd64 	bl	8004d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005278:	2300      	movs	r3, #0
 800527a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4805      	ldr	r0, [pc, #20]	; (800529c <MX_TIM2_Init+0x98>)
 8005286:	f005 ffd9 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005290:	f7ff fd56 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005294:	bf00      	nop
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000638 	.word	0x20000638

080052a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	; 0x38
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	609a      	str	r2, [r3, #8]
 80052b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052b4:	f107 031c 	add.w	r3, r7, #28
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052c0:	463b      	mov	r3, r7
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	605a      	str	r2, [r3, #4]
 80052c8:	609a      	str	r2, [r3, #8]
 80052ca:	60da      	str	r2, [r3, #12]
 80052cc:	611a      	str	r2, [r3, #16]
 80052ce:	615a      	str	r2, [r3, #20]
 80052d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052d2:	4b2c      	ldr	r3, [pc, #176]	; (8005384 <MX_TIM3_Init+0xe4>)
 80052d4:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <MX_TIM3_Init+0xe8>)
 80052d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 80052d8:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <MX_TIM3_Init+0xe4>)
 80052da:	22f9      	movs	r2, #249	; 0xf9
 80052dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <MX_TIM3_Init+0xe4>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80052e4:	4b27      	ldr	r3, [pc, #156]	; (8005384 <MX_TIM3_Init+0xe4>)
 80052e6:	2263      	movs	r2, #99	; 0x63
 80052e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ea:	4b26      	ldr	r3, [pc, #152]	; (8005384 <MX_TIM3_Init+0xe4>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052f0:	4b24      	ldr	r3, [pc, #144]	; (8005384 <MX_TIM3_Init+0xe4>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80052f6:	4823      	ldr	r0, [pc, #140]	; (8005384 <MX_TIM3_Init+0xe4>)
 80052f8:	f004 fe0e 	bl	8009f18 <HAL_TIM_Base_Init>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005302:	f7ff fd1d 	bl	8004d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800530c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005310:	4619      	mov	r1, r3
 8005312:	481c      	ldr	r0, [pc, #112]	; (8005384 <MX_TIM3_Init+0xe4>)
 8005314:	f005 fadc 	bl	800a8d0 <HAL_TIM_ConfigClockSource>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800531e:	f7ff fd0f 	bl	8004d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005322:	4818      	ldr	r0, [pc, #96]	; (8005384 <MX_TIM3_Init+0xe4>)
 8005324:	f004 fec8 	bl	800a0b8 <HAL_TIM_PWM_Init>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800532e:	f7ff fd07 	bl	8004d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800533a:	f107 031c 	add.w	r3, r7, #28
 800533e:	4619      	mov	r1, r3
 8005340:	4810      	ldr	r0, [pc, #64]	; (8005384 <MX_TIM3_Init+0xe4>)
 8005342:	f005 ff7b 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800534c:	f7ff fcf8 	bl	8004d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005350:	2360      	movs	r3, #96	; 0x60
 8005352:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 8005354:	2363      	movs	r3, #99	; 0x63
 8005356:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005358:	2300      	movs	r3, #0
 800535a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005360:	463b      	mov	r3, r7
 8005362:	2200      	movs	r2, #0
 8005364:	4619      	mov	r1, r3
 8005366:	4807      	ldr	r0, [pc, #28]	; (8005384 <MX_TIM3_Init+0xe4>)
 8005368:	f005 f9a2 	bl	800a6b0 <HAL_TIM_PWM_ConfigChannel>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005372:	f7ff fce5 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005376:	4803      	ldr	r0, [pc, #12]	; (8005384 <MX_TIM3_Init+0xe4>)
 8005378:	f000 f8e8 	bl	800554c <HAL_TIM_MspPostInit>

}
 800537c:	bf00      	nop
 800537e:	3738      	adds	r7, #56	; 0x38
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200005a0 	.word	0x200005a0
 8005388:	40000400 	.word	0x40000400

0800538c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	; 0x38
 8005390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	609a      	str	r2, [r3, #8]
 800539e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053a0:	f107 031c 	add.w	r3, r7, #28
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ac:	463b      	mov	r3, r7
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	605a      	str	r2, [r3, #4]
 80053b4:	609a      	str	r2, [r3, #8]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	611a      	str	r2, [r3, #16]
 80053ba:	615a      	str	r2, [r3, #20]
 80053bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80053be:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <MX_TIM4_Init+0xe8>)
 80053c0:	4a2d      	ldr	r2, [pc, #180]	; (8005478 <MX_TIM4_Init+0xec>)
 80053c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250-1;
 80053c4:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <MX_TIM4_Init+0xe8>)
 80053c6:	22f9      	movs	r2, #249	; 0xf9
 80053c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ca:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <MX_TIM4_Init+0xe8>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <MX_TIM4_Init+0xe8>)
 80053d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d8:	4b26      	ldr	r3, [pc, #152]	; (8005474 <MX_TIM4_Init+0xe8>)
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <MX_TIM4_Init+0xe8>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80053e4:	4823      	ldr	r0, [pc, #140]	; (8005474 <MX_TIM4_Init+0xe8>)
 80053e6:	f004 fd97 	bl	8009f18 <HAL_TIM_Base_Init>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80053f0:	f7ff fca6 	bl	8004d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80053fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053fe:	4619      	mov	r1, r3
 8005400:	481c      	ldr	r0, [pc, #112]	; (8005474 <MX_TIM4_Init+0xe8>)
 8005402:	f005 fa65 	bl	800a8d0 <HAL_TIM_ConfigClockSource>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800540c:	f7ff fc98 	bl	8004d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005410:	4818      	ldr	r0, [pc, #96]	; (8005474 <MX_TIM4_Init+0xe8>)
 8005412:	f004 fe51 	bl	800a0b8 <HAL_TIM_PWM_Init>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800541c:	f7ff fc90 	bl	8004d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005428:	f107 031c 	add.w	r3, r7, #28
 800542c:	4619      	mov	r1, r3
 800542e:	4811      	ldr	r0, [pc, #68]	; (8005474 <MX_TIM4_Init+0xe8>)
 8005430:	f005 ff04 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800543a:	f7ff fc81 	bl	8004d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800543e:	2360      	movs	r3, #96	; 0x60
 8005440:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 8005442:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005446:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005448:	2300      	movs	r3, #0
 800544a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005450:	463b      	mov	r3, r7
 8005452:	2200      	movs	r2, #0
 8005454:	4619      	mov	r1, r3
 8005456:	4807      	ldr	r0, [pc, #28]	; (8005474 <MX_TIM4_Init+0xe8>)
 8005458:	f005 f92a 	bl	800a6b0 <HAL_TIM_PWM_ConfigChannel>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8005462:	f7ff fc6d 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005466:	4803      	ldr	r0, [pc, #12]	; (8005474 <MX_TIM4_Init+0xe8>)
 8005468:	f000 f870 	bl	800554c <HAL_TIM_MspPostInit>

}
 800546c:	bf00      	nop
 800546e:	3738      	adds	r7, #56	; 0x38
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000554 	.word	0x20000554
 8005478:	40000800 	.word	0x40000800

0800547c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2c      	ldr	r2, [pc, #176]	; (800553c <HAL_TIM_Base_MspInit+0xc0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d114      	bne.n	80054b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	6453      	str	r3, [r2, #68]	; 0x44
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2101      	movs	r1, #1
 80054aa:	2019      	movs	r0, #25
 80054ac:	f001 fe63 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80054b0:	2019      	movs	r0, #25
 80054b2:	f001 fe7c 	bl	80071ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80054b6:	e03c      	b.n	8005532 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c0:	d114      	bne.n	80054ec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054c2:	4b1f      	ldr	r3, [pc, #124]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	4a1e      	ldr	r2, [pc, #120]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	6413      	str	r3, [r2, #64]	; 0x40
 80054ce:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80054da:	2200      	movs	r2, #0
 80054dc:	2102      	movs	r1, #2
 80054de:	201c      	movs	r0, #28
 80054e0:	f001 fe49 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054e4:	201c      	movs	r0, #28
 80054e6:	f001 fe62 	bl	80071ae <HAL_NVIC_EnableIRQ>
}
 80054ea:	e022      	b.n	8005532 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <HAL_TIM_Base_MspInit+0xc8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d10c      	bne.n	8005510 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	4a11      	ldr	r2, [pc, #68]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	6413      	str	r3, [r2, #64]	; 0x40
 8005502:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	e010      	b.n	8005532 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <HAL_TIM_Base_MspInit+0xcc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d10b      	bne.n	8005532 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	4a08      	ldr	r2, [pc, #32]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 8005520:	f043 0304 	orr.w	r3, r3, #4
 8005524:	6413      	str	r3, [r2, #64]	; 0x40
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_TIM_Base_MspInit+0xc4>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
}
 8005532:	bf00      	nop
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40010000 	.word	0x40010000
 8005540:	40023800 	.word	0x40023800
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800

0800554c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <HAL_TIM_MspPostInit+0xa8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d11c      	bne.n	80055a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <HAL_TIM_MspPostInit+0xac>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <HAL_TIM_MspPostInit+0xac>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6313      	str	r3, [r2, #48]	; 0x30
 800557a:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <HAL_TIM_MspPostInit+0xac>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005586:	2340      	movs	r3, #64	; 0x40
 8005588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558a:	2302      	movs	r3, #2
 800558c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005592:	2300      	movs	r3, #0
 8005594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005596:	2302      	movs	r3, #2
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559a:	f107 0314 	add.w	r3, r7, #20
 800559e:	4619      	mov	r1, r3
 80055a0:	4816      	ldr	r0, [pc, #88]	; (80055fc <HAL_TIM_MspPostInit+0xb0>)
 80055a2:	f001 fe1f 	bl	80071e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80055a6:	e021      	b.n	80055ec <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_TIM_MspPostInit+0xb4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d11c      	bne.n	80055ec <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <HAL_TIM_MspPostInit+0xac>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <HAL_TIM_MspPostInit+0xac>)
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	6313      	str	r3, [r2, #48]	; 0x30
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <HAL_TIM_MspPostInit+0xac>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d8:	2300      	movs	r3, #0
 80055da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055dc:	2302      	movs	r3, #2
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055e0:	f107 0314 	add.w	r3, r7, #20
 80055e4:	4619      	mov	r1, r3
 80055e6:	4807      	ldr	r0, [pc, #28]	; (8005604 <HAL_TIM_MspPostInit+0xb8>)
 80055e8:	f001 fdfc 	bl	80071e4 <HAL_GPIO_Init>
}
 80055ec:	bf00      	nop
 80055ee:	3728      	adds	r7, #40	; 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40020000 	.word	0x40020000
 8005600:	40000800 	.word	0x40000800
 8005604:	40020c00 	.word	0x40020c00

08005608 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800560c:	4b14      	ldr	r3, [pc, #80]	; (8005660 <MX_UART4_Init+0x58>)
 800560e:	4a15      	ldr	r2, [pc, #84]	; (8005664 <MX_UART4_Init+0x5c>)
 8005610:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <MX_UART4_Init+0x58>)
 8005614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005618:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <MX_UART4_Init+0x58>)
 800561c:	2200      	movs	r2, #0
 800561e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <MX_UART4_Init+0x58>)
 8005622:	2200      	movs	r2, #0
 8005624:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005626:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <MX_UART4_Init+0x58>)
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <MX_UART4_Init+0x58>)
 800562e:	220c      	movs	r2, #12
 8005630:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <MX_UART4_Init+0x58>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <MX_UART4_Init+0x58>)
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <MX_UART4_Init+0x58>)
 8005640:	2200      	movs	r2, #0
 8005642:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <MX_UART4_Init+0x58>)
 8005646:	2200      	movs	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800564a:	4805      	ldr	r0, [pc, #20]	; (8005660 <MX_UART4_Init+0x58>)
 800564c:	f005 fea2 	bl	800b394 <HAL_UART_Init>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005656:	f7ff fb73 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2000078c 	.word	0x2000078c
 8005664:	40004c00 	.word	0x40004c00

08005668 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800566c:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 800566e:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <MX_USART1_UART_Init+0x5c>)
 8005670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 8005674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 8005682:	2200      	movs	r2, #0
 8005684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005686:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 8005688:	2200      	movs	r2, #0
 800568a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 800568e:	220c      	movs	r2, #12
 8005690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 8005694:	2200      	movs	r2, #0
 8005696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005698:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 800569a:	2200      	movs	r2, #0
 800569c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80056aa:	4805      	ldr	r0, [pc, #20]	; (80056c0 <MX_USART1_UART_Init+0x58>)
 80056ac:	f005 fe72 	bl	800b394 <HAL_UART_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80056b6:	f7ff fb43 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000708 	.word	0x20000708
 80056c4:	40011000 	.word	0x40011000

080056c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80056cc:	4b14      	ldr	r3, [pc, #80]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056ce:	4a15      	ldr	r2, [pc, #84]	; (8005724 <MX_USART3_UART_Init+0x5c>)
 80056d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80056da:	4b11      	ldr	r3, [pc, #68]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056dc:	2200      	movs	r2, #0
 80056de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056ee:	220c      	movs	r2, #12
 80056f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80056f8:	4b09      	ldr	r3, [pc, #36]	; (8005720 <MX_USART3_UART_Init+0x58>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <MX_USART3_UART_Init+0x58>)
 8005700:	2200      	movs	r2, #0
 8005702:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <MX_USART3_UART_Init+0x58>)
 8005706:	2200      	movs	r2, #0
 8005708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800570a:	4805      	ldr	r0, [pc, #20]	; (8005720 <MX_USART3_UART_Init+0x58>)
 800570c:	f005 fe42 	bl	800b394 <HAL_UART_Init>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005716:	f7ff fb13 	bl	8004d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000684 	.word	0x20000684
 8005724:	40004800 	.word	0x40004800

08005728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a4e      	ldr	r2, [pc, #312]	; (8005880 <HAL_UART_MspInit+0x158>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d128      	bne.n	800579c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <HAL_UART_MspInit+0x15c>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	4a4d      	ldr	r2, [pc, #308]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005754:	6413      	str	r3, [r2, #64]	; 0x40
 8005756:	4b4b      	ldr	r3, [pc, #300]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005762:	4b48      	ldr	r3, [pc, #288]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	4a47      	ldr	r2, [pc, #284]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005768:	f043 0308 	orr.w	r3, r3, #8
 800576c:	6313      	str	r3, [r2, #48]	; 0x30
 800576e:	4b45      	ldr	r3, [pc, #276]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800577a:	2303      	movs	r3, #3
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577e:	2302      	movs	r3, #2
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005782:	2300      	movs	r3, #0
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005786:	2303      	movs	r3, #3
 8005788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800578a:	2308      	movs	r3, #8
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800578e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005792:	4619      	mov	r1, r3
 8005794:	483c      	ldr	r0, [pc, #240]	; (8005888 <HAL_UART_MspInit+0x160>)
 8005796:	f001 fd25 	bl	80071e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800579a:	e06c      	b.n	8005876 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a3a      	ldr	r2, [pc, #232]	; (800588c <HAL_UART_MspInit+0x164>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d139      	bne.n	800581a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <HAL_UART_MspInit+0x15c>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	4a36      	ldr	r2, [pc, #216]	; (8005884 <HAL_UART_MspInit+0x15c>)
 80057ac:	f043 0310 	orr.w	r3, r3, #16
 80057b0:	6453      	str	r3, [r2, #68]	; 0x44
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_UART_MspInit+0x15c>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <HAL_UART_MspInit+0x15c>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	4a30      	ldr	r2, [pc, #192]	; (8005884 <HAL_UART_MspInit+0x15c>)
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <HAL_UART_MspInit+0x15c>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80057d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057dc:	2302      	movs	r3, #2
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e4:	2303      	movs	r3, #3
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80057e8:	2304      	movs	r3, #4
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f0:	4619      	mov	r1, r3
 80057f2:	4827      	ldr	r0, [pc, #156]	; (8005890 <HAL_UART_MspInit+0x168>)
 80057f4:	f001 fcf6 	bl	80071e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fc:	2302      	movs	r3, #2
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005800:	2300      	movs	r3, #0
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005804:	2303      	movs	r3, #3
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005808:	2307      	movs	r3, #7
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800580c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005810:	4619      	mov	r1, r3
 8005812:	481f      	ldr	r0, [pc, #124]	; (8005890 <HAL_UART_MspInit+0x168>)
 8005814:	f001 fce6 	bl	80071e4 <HAL_GPIO_Init>
}
 8005818:	e02d      	b.n	8005876 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART3)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_UART_MspInit+0x16c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d128      	bne.n	8005876 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005824:	4b17      	ldr	r3, [pc, #92]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_UART_MspInit+0x15c>)
 800582a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800582e:	6413      	str	r3, [r2, #64]	; 0x40
 8005830:	4b14      	ldr	r3, [pc, #80]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800583c:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_UART_MspInit+0x15c>)
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	4a10      	ldr	r2, [pc, #64]	; (8005884 <HAL_UART_MspInit+0x15c>)
 8005842:	f043 0308 	orr.w	r3, r3, #8
 8005846:	6313      	str	r3, [r2, #48]	; 0x30
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_UART_MspInit+0x15c>)
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005854:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585a:	2302      	movs	r3, #2
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800585e:	2300      	movs	r3, #0
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005862:	2303      	movs	r3, #3
 8005864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005866:	2307      	movs	r3, #7
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800586a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800586e:	4619      	mov	r1, r3
 8005870:	4805      	ldr	r0, [pc, #20]	; (8005888 <HAL_UART_MspInit+0x160>)
 8005872:	f001 fcb7 	bl	80071e4 <HAL_GPIO_Init>
}
 8005876:	bf00      	nop
 8005878:	3738      	adds	r7, #56	; 0x38
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40004c00 	.word	0x40004c00
 8005884:	40023800 	.word	0x40023800
 8005888:	40020c00 	.word	0x40020c00
 800588c:	40011000 	.word	0x40011000
 8005890:	40020400 	.word	0x40020400
 8005894:	40004800 	.word	0x40004800

08005898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800589c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800589e:	e003      	b.n	80058a8 <LoopCopyDataInit>

080058a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80058a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80058a6:	3104      	adds	r1, #4

080058a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80058a8:	480b      	ldr	r0, [pc, #44]	; (80058d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80058ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80058ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80058b0:	d3f6      	bcc.n	80058a0 <CopyDataInit>
  ldr  r2, =_sbss
 80058b2:	4a0b      	ldr	r2, [pc, #44]	; (80058e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80058b4:	e002      	b.n	80058bc <LoopFillZerobss>

080058b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80058b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80058b8:	f842 3b04 	str.w	r3, [r2], #4

080058bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80058be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80058c0:	d3f9      	bcc.n	80058b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80058c2:	f7ff fc15 	bl	80050f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058c6:	f006 fae7 	bl	800be98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058ca:	f7fe fb71 	bl	8003fb0 <main>
  bx  lr    
 80058ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058d0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80058d4:	0800f32c 	.word	0x0800f32c
  ldr  r0, =_sdata
 80058d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80058dc:	200002ac 	.word	0x200002ac
  ldr  r2, =_sbss
 80058e0:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 80058e4:	20000824 	.word	0x20000824

080058e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058e8:	e7fe      	b.n	80058e8 <ADC_IRQHandler>

080058ea <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80058ea:	b590      	push	{r4, r7, lr}
 80058ec:	b08b      	sub	sp, #44	; 0x2c
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	4604      	mov	r4, r0
 80058f2:	4608      	mov	r0, r1
 80058f4:	4611      	mov	r1, r2
 80058f6:	461a      	mov	r2, r3
 80058f8:	4623      	mov	r3, r4
 80058fa:	80fb      	strh	r3, [r7, #6]
 80058fc:	4603      	mov	r3, r0
 80058fe:	80bb      	strh	r3, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
 8005904:	4613      	mov	r3, r2
 8005906:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8005908:	887b      	ldrh	r3, [r7, #2]
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8005910:	887b      	ldrh	r3, [r7, #2]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	f1c3 0301 	rsb	r3, r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8005922:	e061      	b.n	80059e8 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8005924:	88fa      	ldrh	r2, [r7, #6]
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	e018      	b.n	8005960 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	b298      	uxth	r0, r3
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	b29a      	uxth	r2, r3
 8005936:	88bb      	ldrh	r3, [r7, #4]
 8005938:	4413      	add	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	883a      	ldrh	r2, [r7, #0]
 800593e:	4619      	mov	r1, r3
 8005940:	f000 fd02 	bl	8006348 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	b298      	uxth	r0, r3
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	b29b      	uxth	r3, r3
 800594c:	88ba      	ldrh	r2, [r7, #4]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	b29b      	uxth	r3, r3
 8005952:	883a      	ldrh	r2, [r7, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	f000 fcf7 	bl	8006348 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3301      	adds	r3, #1
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	88fa      	ldrh	r2, [r7, #6]
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	4413      	add	r3, r2
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	dde0      	ble.n	800592e <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e018      	b.n	80059a8 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	b298      	uxth	r0, r3
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	b29a      	uxth	r2, r3
 800597e:	88bb      	ldrh	r3, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	b29b      	uxth	r3, r3
 8005984:	883a      	ldrh	r2, [r7, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	f000 fcde 	bl	8006348 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	b298      	uxth	r0, r3
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	b29b      	uxth	r3, r3
 8005994:	88ba      	ldrh	r2, [r7, #4]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	b29b      	uxth	r3, r3
 800599a:	883a      	ldrh	r2, [r7, #0]
 800599c:	4619      	mov	r1, r3
 800599e:	f000 fcd3 	bl	8006348 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	4413      	add	r3, r2
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	dde0      	ble.n	8005976 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	3301      	adds	r3, #1
 80059b8:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	4413      	add	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	3302      	adds	r3, #2
 80059c6:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	005a      	lsls	r2, r3, #1
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dd09      	ble.n	80059e8 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	3b01      	subs	r3, #1
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3302      	adds	r3, #2
 80059e6:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	da99      	bge.n	8005924 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	372c      	adds	r7, #44	; 0x2c
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd90      	pop	{r4, r7, pc}

080059fa <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80059fa:	b590      	push	{r4, r7, lr}
 80059fc:	b087      	sub	sp, #28
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4604      	mov	r4, r0
 8005a02:	4608      	mov	r0, r1
 8005a04:	4611      	mov	r1, r2
 8005a06:	461a      	mov	r2, r3
 8005a08:	4623      	mov	r3, r4
 8005a0a:	80fb      	strh	r3, [r7, #6]
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	80bb      	strh	r3, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	807b      	strh	r3, [r7, #2]
 8005a14:	4613      	mov	r3, r2
 8005a16:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a3c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8005a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4c:	d501      	bpl.n	8005a52 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8005a58:	883a      	ldrh	r2, [r7, #0]
 8005a5a:	88bb      	ldrh	r3, [r7, #4]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a66:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8005a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a76:	d501      	bpl.n	8005a7c <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8005a82:	887a      	ldrh	r2, [r7, #2]
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	82fb      	strh	r3, [r7, #22]
 8005a8a:	e003      	b.n	8005a94 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8005a94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a96:	8afa      	ldrh	r2, [r7, #22]
 8005a98:	88b9      	ldrh	r1, [r7, #4]
 8005a9a:	88f8      	ldrh	r0, [r7, #6]
 8005a9c:	f000 fd8a 	bl	80065b4 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8005aa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005aa2:	8afa      	ldrh	r2, [r7, #22]
 8005aa4:	8839      	ldrh	r1, [r7, #0]
 8005aa6:	88f8      	ldrh	r0, [r7, #6]
 8005aa8:	f000 fd84 	bl	80065b4 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005aac:	7cbb      	ldrb	r3, [r7, #18]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8005ab2:	883a      	ldrh	r2, [r7, #0]
 8005ab4:	88bb      	ldrh	r3, [r7, #4]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	82bb      	strh	r3, [r7, #20]
 8005aba:	e003      	b.n	8005ac4 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8005abc:	88ba      	ldrh	r2, [r7, #4]
 8005abe:	883b      	ldrh	r3, [r7, #0]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8005ac4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ac6:	8aba      	ldrh	r2, [r7, #20]
 8005ac8:	88b9      	ldrh	r1, [r7, #4]
 8005aca:	88f8      	ldrh	r0, [r7, #6]
 8005acc:	f000 fdb6 	bl	800663c <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8005ad0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ad2:	8aba      	ldrh	r2, [r7, #20]
 8005ad4:	88b9      	ldrh	r1, [r7, #4]
 8005ad6:	8878      	ldrh	r0, [r7, #2]
 8005ad8:	f000 fdb0 	bl	800663c <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8005adc:	8afb      	ldrh	r3, [r7, #22]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8005ae2:	8abb      	ldrh	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8005ae8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005aea:	8839      	ldrh	r1, [r7, #0]
 8005aec:	887b      	ldrh	r3, [r7, #2]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fc2a 	bl	8006348 <ILI9341_Draw_Pixel>
	}
	
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd90      	pop	{r4, r7, pc}

08005afc <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8005afc:	b590      	push	{r4, r7, lr}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	4604      	mov	r4, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	4611      	mov	r1, r2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	80fb      	strh	r3, [r7, #6]
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80bb      	strh	r3, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	807b      	strh	r3, [r7, #2]
 8005b16:	4613      	mov	r3, r2
 8005b18:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8005b36:	887a      	ldrh	r2, [r7, #2]
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da01      	bge.n	8005b48 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8005b44:	2301      	movs	r3, #1
 8005b46:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8005b4c:	883a      	ldrh	r2, [r7, #0]
 8005b4e:	88bb      	ldrh	r3, [r7, #4]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	da01      	bge.n	8005b5e <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8005b64:	887a      	ldrh	r2, [r7, #2]
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	823b      	strh	r3, [r7, #16]
 8005b70:	e005      	b.n	8005b7e <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	887b      	ldrh	r3, [r7, #2]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8005b7a:	887b      	ldrh	r3, [r7, #2]
 8005b7c:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005b7e:	7cbb      	ldrb	r3, [r7, #18]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8005b84:	883a      	ldrh	r2, [r7, #0]
 8005b86:	88bb      	ldrh	r3, [r7, #4]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8005b8c:	88bb      	ldrh	r3, [r7, #4]
 8005b8e:	81fb      	strh	r3, [r7, #14]
 8005b90:	e005      	b.n	8005b9e <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8005b92:	88ba      	ldrh	r2, [r7, #4]
 8005b94:	883b      	ldrh	r3, [r7, #0]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8005b9a:	883b      	ldrh	r3, [r7, #0]
 8005b9c:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8005b9e:	8abc      	ldrh	r4, [r7, #20]
 8005ba0:	8afa      	ldrh	r2, [r7, #22]
 8005ba2:	89f9      	ldrh	r1, [r7, #14]
 8005ba4:	8a38      	ldrh	r0, [r7, #16]
 8005ba6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4623      	mov	r3, r4
 8005bac:	f000 fca6 	bl	80064fc <ILI9341_Draw_Rectangle>
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd90      	pop	{r4, r7, pc}

08005bb8 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	71fb      	strb	r3, [r7, #7]
 8005bca:	4603      	mov	r3, r0
 8005bcc:	71bb      	strb	r3, [r7, #6]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	717b      	strb	r3, [r7, #5]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b1f      	cmp	r3, #31
 8005bde:	d802      	bhi.n	8005be6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	71fb      	strb	r3, [r7, #7]
 8005be4:	e002      	b.n	8005bec <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	3b20      	subs	r3, #32
 8005bea:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	753b      	strb	r3, [r7, #20]
 8005bf0:	e012      	b.n	8005c18 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8005bf2:	7dfa      	ldrb	r2, [r7, #23]
 8005bf4:	7d38      	ldrb	r0, [r7, #20]
 8005bf6:	7d39      	ldrb	r1, [r7, #20]
 8005bf8:	4c3c      	ldr	r4, [pc, #240]	; (8005cec <ILI9341_Draw_Char+0x134>)
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	4423      	add	r3, r4
 8005c04:	4403      	add	r3, r0
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	f107 0318 	add.w	r3, r7, #24
 8005c0c:	440b      	add	r3, r1
 8005c0e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005c12:	7d3b      	ldrb	r3, [r7, #20]
 8005c14:	3301      	adds	r3, #1
 8005c16:	753b      	strb	r3, [r7, #20]
 8005c18:	7d3b      	ldrb	r3, [r7, #20]
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d9e9      	bls.n	8005bf2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8005c1e:	79bb      	ldrb	r3, [r7, #6]
 8005c20:	b298      	uxth	r0, r3
 8005c22:	797b      	ldrb	r3, [r7, #5]
 8005c24:	b299      	uxth	r1, r3
 8005c26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c28:	461a      	mov	r2, r3
 8005c2a:	0052      	lsls	r2, r2, #1
 8005c2c:	4413      	add	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	b29c      	uxth	r4, r3
 8005c38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	f000 fc5d 	bl	80064fc <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005c42:	2300      	movs	r3, #0
 8005c44:	757b      	strb	r3, [r7, #21]
 8005c46:	e048      	b.n	8005cda <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75bb      	strb	r3, [r7, #22]
 8005c4c:	e03f      	b.n	8005cce <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8005c4e:	7d7b      	ldrb	r3, [r7, #21]
 8005c50:	f107 0218 	add.w	r2, r7, #24
 8005c54:	4413      	add	r3, r2
 8005c56:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	7dbb      	ldrb	r3, [r7, #22]
 8005c5e:	fa42 f303 	asr.w	r3, r2, r3
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02e      	beq.n	8005cc8 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8005c6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d110      	bne.n	8005c92 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8005c70:	79bb      	ldrb	r3, [r7, #6]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	7d7b      	ldrb	r3, [r7, #21]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4413      	add	r3, r2
 8005c7a:	b298      	uxth	r0, r3
 8005c7c:	797b      	ldrb	r3, [r7, #5]
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	7dbb      	ldrb	r3, [r7, #22]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4413      	add	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	887a      	ldrh	r2, [r7, #2]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f000 fb5c 	bl	8006348 <ILI9341_Draw_Pixel>
 8005c90:	e01a      	b.n	8005cc8 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8005c92:	79bb      	ldrb	r3, [r7, #6]
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	7d7b      	ldrb	r3, [r7, #21]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005c9c:	fb11 f303 	smulbb	r3, r1, r3
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	b298      	uxth	r0, r3
 8005ca6:	797b      	ldrb	r3, [r7, #5]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	7dbb      	ldrb	r3, [r7, #22]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005cb0:	fb11 f303 	smulbb	r3, r1, r3
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	b299      	uxth	r1, r3
 8005cba:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8005cbc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005cbe:	887b      	ldrh	r3, [r7, #2]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	f000 fc1a 	bl	80064fc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005cc8:	7dbb      	ldrb	r3, [r7, #22]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	75bb      	strb	r3, [r7, #22]
 8005cce:	7dbb      	ldrb	r3, [r7, #22]
 8005cd0:	2b07      	cmp	r3, #7
 8005cd2:	d9bc      	bls.n	8005c4e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005cd4:	7d7b      	ldrb	r3, [r7, #21]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	757b      	strb	r3, [r7, #21]
 8005cda:	7d7b      	ldrb	r3, [r7, #21]
 8005cdc:	2b05      	cmp	r3, #5
 8005cde:	d9b3      	bls.n	8005c48 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd90      	pop	{r4, r7, pc}
 8005cea:	bf00      	nop
 8005cec:	0800ecf8 	.word	0x0800ecf8

08005cf0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	70fb      	strb	r3, [r7, #3]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70bb      	strb	r3, [r7, #2]
 8005d06:	4613      	mov	r3, r2
 8005d08:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8005d0a:	e017      	b.n	8005d3c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	7818      	ldrb	r0, [r3, #0]
 8005d14:	883c      	ldrh	r4, [r7, #0]
 8005d16:	78ba      	ldrb	r2, [r7, #2]
 8005d18:	78f9      	ldrb	r1, [r7, #3]
 8005d1a:	8bbb      	ldrh	r3, [r7, #28]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	8b3b      	ldrh	r3, [r7, #24]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4623      	mov	r3, r4
 8005d24:	f7ff ff48 	bl	8005bb8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8005d28:	8b3b      	ldrh	r3, [r7, #24]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	0052      	lsls	r2, r2, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	4413      	add	r3, r2
 8005d3a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e3      	bne.n	8005d0c <ILI9341_Draw_Text+0x1c>
    }
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}
	...

08005d50 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8005d54:	f7ff f82c 	bl	8004db0 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8005d58:	f7fa fe64 	bl	8000a24 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d62:	4802      	ldr	r0, [pc, #8]	; (8005d6c <ILI9341_SPI_Init+0x1c>)
 8005d64:	f001 fc02 	bl	800756c <HAL_GPIO_WritePin>
}
 8005d68:	bf00      	nop
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40020800 	.word	0x40020800

08005d70 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005d7a:	1df9      	adds	r1, r7, #7
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4803      	ldr	r0, [pc, #12]	; (8005d90 <ILI9341_SPI_Send+0x20>)
 8005d82:	f003 fdfa 	bl	800997a <HAL_SPI_Transmit>
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200004f0 	.word	0x200004f0

08005d94 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005da4:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <ILI9341_Write_Command+0x40>)
 8005da6:	f001 fbe1 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005daa:	2200      	movs	r2, #0
 8005dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005db0:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <ILI9341_Write_Command+0x40>)
 8005db2:	f001 fbdb 	bl	800756c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ffd9 	bl	8005d70 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dc4:	4803      	ldr	r0, [pc, #12]	; (8005dd4 <ILI9341_Write_Command+0x40>)
 8005dc6:	f001 fbd1 	bl	800756c <HAL_GPIO_WritePin>
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40020800 	.word	0x40020800

08005dd8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005de2:	2201      	movs	r2, #1
 8005de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005de8:	480b      	ldr	r0, [pc, #44]	; (8005e18 <ILI9341_Write_Data+0x40>)
 8005dea:	f001 fbbf 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005dee:	2200      	movs	r2, #0
 8005df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005df4:	4808      	ldr	r0, [pc, #32]	; (8005e18 <ILI9341_Write_Data+0x40>)
 8005df6:	f001 fbb9 	bl	800756c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ffb7 	bl	8005d70 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005e02:	2201      	movs	r2, #1
 8005e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e08:	4803      	ldr	r0, [pc, #12]	; (8005e18 <ILI9341_Write_Data+0x40>)
 8005e0a:	f001 fbaf 	bl	800756c <HAL_GPIO_WritePin>
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40020800 	.word	0x40020800

08005e1c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	80fb      	strh	r3, [r7, #6]
 8005e2e:	4603      	mov	r3, r0
 8005e30:	80bb      	strh	r3, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	807b      	strh	r3, [r7, #2]
 8005e36:	4613      	mov	r3, r2
 8005e38:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8005e3a:	202a      	movs	r0, #42	; 0x2a
 8005e3c:	f7ff ffaa 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8005e40:	88fb      	ldrh	r3, [r7, #6]
 8005e42:	0a1b      	lsrs	r3, r3, #8
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff ffc5 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff ffc0 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ffb9 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8005e66:	887b      	ldrh	r3, [r7, #2]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ffb4 	bl	8005dd8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8005e70:	202b      	movs	r0, #43	; 0x2b
 8005e72:	f7ff ff8f 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8005e76:	88bb      	ldrh	r3, [r7, #4]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff ffaa 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8005e84:	88bb      	ldrh	r3, [r7, #4]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff ffa5 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8005e8e:	883b      	ldrh	r3, [r7, #0]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff ff9e 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8005e9c:	883b      	ldrh	r3, [r7, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff99 	bl	8005dd8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8005ea6:	202c      	movs	r0, #44	; 0x2c
 8005ea8:	f7ff ff74 	bl	8005d94 <ILI9341_Write_Command>
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}

08005eb4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ebe:	480b      	ldr	r0, [pc, #44]	; (8005eec <ILI9341_Reset+0x38>)
 8005ec0:	f001 fb54 	bl	800756c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005ec4:	20c8      	movs	r0, #200	; 0xc8
 8005ec6:	f000 fc69 	bl	800679c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ed0:	4806      	ldr	r0, [pc, #24]	; (8005eec <ILI9341_Reset+0x38>)
 8005ed2:	f001 fb4b 	bl	800756c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005ed6:	20c8      	movs	r0, #200	; 0xc8
 8005ed8:	f000 fc60 	bl	800679c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8005edc:	2201      	movs	r2, #1
 8005ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ee2:	4802      	ldr	r0, [pc, #8]	; (8005eec <ILI9341_Reset+0x38>)
 8005ee4:	f001 fb42 	bl	800756c <HAL_GPIO_WritePin>
}
 8005ee8:	bf00      	nop
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40020800 	.word	0x40020800

08005ef0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8005efe:	2036      	movs	r0, #54	; 0x36
 8005f00:	f7ff ff48 	bl	8005d94 <ILI9341_Write_Command>
HAL_Delay(1);
 8005f04:	2001      	movs	r0, #1
 8005f06:	f000 fc49 	bl	800679c <HAL_Delay>
	
switch(screen_rotation) 
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d837      	bhi.n	8005f80 <ILI9341_Set_Rotation+0x90>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <ILI9341_Set_Rotation+0x28>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f3f 	.word	0x08005f3f
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f6b 	.word	0x08005f6b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8005f28:	2048      	movs	r0, #72	; 0x48
 8005f2a:	f7ff ff55 	bl	8005dd8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8005f2e:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <ILI9341_Set_Rotation+0x9c>)
 8005f30:	22f0      	movs	r2, #240	; 0xf0
 8005f32:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005f34:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <ILI9341_Set_Rotation+0xa0>)
 8005f36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f3a:	801a      	strh	r2, [r3, #0]
			break;
 8005f3c:	e021      	b.n	8005f82 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8005f3e:	2028      	movs	r0, #40	; 0x28
 8005f40:	f7ff ff4a 	bl	8005dd8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005f44:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <ILI9341_Set_Rotation+0x9c>)
 8005f46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <ILI9341_Set_Rotation+0xa0>)
 8005f4e:	22f0      	movs	r2, #240	; 0xf0
 8005f50:	801a      	strh	r2, [r3, #0]
			break;
 8005f52:	e016      	b.n	8005f82 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8005f54:	2088      	movs	r0, #136	; 0x88
 8005f56:	f7ff ff3f 	bl	8005dd8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <ILI9341_Set_Rotation+0x9c>)
 8005f5c:	22f0      	movs	r2, #240	; 0xf0
 8005f5e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <ILI9341_Set_Rotation+0xa0>)
 8005f62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f66:	801a      	strh	r2, [r3, #0]
			break;
 8005f68:	e00b      	b.n	8005f82 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8005f6a:	20e8      	movs	r0, #232	; 0xe8
 8005f6c:	f7ff ff34 	bl	8005dd8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <ILI9341_Set_Rotation+0x9c>)
 8005f72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <ILI9341_Set_Rotation+0xa0>)
 8005f7a:	22f0      	movs	r2, #240	; 0xf0
 8005f7c:	801a      	strh	r2, [r3, #0]
			break;
 8005f7e:	e000      	b.n	8005f82 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8005f80:	bf00      	nop
	}
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200000d2 	.word	0x200000d2
 8005f90:	200000d0 	.word	0x200000d0

08005f94 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f9e:	4802      	ldr	r0, [pc, #8]	; (8005fa8 <ILI9341_Enable+0x14>)
 8005fa0:	f001 fae4 	bl	800756c <HAL_GPIO_WritePin>
}
 8005fa4:	bf00      	nop
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40020800 	.word	0x40020800

08005fac <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8005fb0:	f7ff fff0 	bl	8005f94 <ILI9341_Enable>
ILI9341_SPI_Init();
 8005fb4:	f7ff fecc 	bl	8005d50 <ILI9341_SPI_Init>
ILI9341_Reset();
 8005fb8:	f7ff ff7c 	bl	8005eb4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	f7ff fee9 	bl	8005d94 <ILI9341_Write_Command>
HAL_Delay(1000);
 8005fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fc6:	f000 fbe9 	bl	800679c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8005fca:	20cb      	movs	r0, #203	; 0xcb
 8005fcc:	f7ff fee2 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8005fd0:	2039      	movs	r0, #57	; 0x39
 8005fd2:	f7ff ff01 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8005fd6:	202c      	movs	r0, #44	; 0x2c
 8005fd8:	f7ff fefe 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005fdc:	2000      	movs	r0, #0
 8005fde:	f7ff fefb 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8005fe2:	2034      	movs	r0, #52	; 0x34
 8005fe4:	f7ff fef8 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8005fe8:	2002      	movs	r0, #2
 8005fea:	f7ff fef5 	bl	8005dd8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8005fee:	20cf      	movs	r0, #207	; 0xcf
 8005ff0:	f7ff fed0 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f7ff feef 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005ffa:	20c1      	movs	r0, #193	; 0xc1
 8005ffc:	f7ff feec 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8006000:	2030      	movs	r0, #48	; 0x30
 8006002:	f7ff fee9 	bl	8005dd8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8006006:	20e8      	movs	r0, #232	; 0xe8
 8006008:	f7ff fec4 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800600c:	2085      	movs	r0, #133	; 0x85
 800600e:	f7ff fee3 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006012:	2000      	movs	r0, #0
 8006014:	f7ff fee0 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8006018:	2078      	movs	r0, #120	; 0x78
 800601a:	f7ff fedd 	bl	8005dd8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800601e:	20ea      	movs	r0, #234	; 0xea
 8006020:	f7ff feb8 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006024:	2000      	movs	r0, #0
 8006026:	f7ff fed7 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800602a:	2000      	movs	r0, #0
 800602c:	f7ff fed4 	bl	8005dd8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8006030:	20ed      	movs	r0, #237	; 0xed
 8006032:	f7ff feaf 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8006036:	2064      	movs	r0, #100	; 0x64
 8006038:	f7ff fece 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800603c:	2003      	movs	r0, #3
 800603e:	f7ff fecb 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8006042:	2012      	movs	r0, #18
 8006044:	f7ff fec8 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8006048:	2081      	movs	r0, #129	; 0x81
 800604a:	f7ff fec5 	bl	8005dd8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800604e:	20f7      	movs	r0, #247	; 0xf7
 8006050:	f7ff fea0 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8006054:	2020      	movs	r0, #32
 8006056:	f7ff febf 	bl	8005dd8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800605a:	20c0      	movs	r0, #192	; 0xc0
 800605c:	f7ff fe9a 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8006060:	2023      	movs	r0, #35	; 0x23
 8006062:	f7ff feb9 	bl	8005dd8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8006066:	20c1      	movs	r0, #193	; 0xc1
 8006068:	f7ff fe94 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800606c:	2010      	movs	r0, #16
 800606e:	f7ff feb3 	bl	8005dd8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8006072:	20c5      	movs	r0, #197	; 0xc5
 8006074:	f7ff fe8e 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8006078:	203e      	movs	r0, #62	; 0x3e
 800607a:	f7ff fead 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800607e:	2028      	movs	r0, #40	; 0x28
 8006080:	f7ff feaa 	bl	8005dd8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8006084:	20c7      	movs	r0, #199	; 0xc7
 8006086:	f7ff fe85 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800608a:	2086      	movs	r0, #134	; 0x86
 800608c:	f7ff fea4 	bl	8005dd8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8006090:	2036      	movs	r0, #54	; 0x36
 8006092:	f7ff fe7f 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8006096:	2048      	movs	r0, #72	; 0x48
 8006098:	f7ff fe9e 	bl	8005dd8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800609c:	203a      	movs	r0, #58	; 0x3a
 800609e:	f7ff fe79 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80060a2:	2055      	movs	r0, #85	; 0x55
 80060a4:	f7ff fe98 	bl	8005dd8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80060a8:	20b1      	movs	r0, #177	; 0xb1
 80060aa:	f7ff fe73 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80060ae:	2000      	movs	r0, #0
 80060b0:	f7ff fe92 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80060b4:	2018      	movs	r0, #24
 80060b6:	f7ff fe8f 	bl	8005dd8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80060ba:	20b6      	movs	r0, #182	; 0xb6
 80060bc:	f7ff fe6a 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80060c0:	2008      	movs	r0, #8
 80060c2:	f7ff fe89 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80060c6:	2082      	movs	r0, #130	; 0x82
 80060c8:	f7ff fe86 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80060cc:	2027      	movs	r0, #39	; 0x27
 80060ce:	f7ff fe83 	bl	8005dd8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80060d2:	20f2      	movs	r0, #242	; 0xf2
 80060d4:	f7ff fe5e 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80060d8:	2000      	movs	r0, #0
 80060da:	f7ff fe7d 	bl	8005dd8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80060de:	2026      	movs	r0, #38	; 0x26
 80060e0:	f7ff fe58 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7ff fe77 	bl	8005dd8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80060ea:	20e0      	movs	r0, #224	; 0xe0
 80060ec:	f7ff fe52 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80060f0:	200f      	movs	r0, #15
 80060f2:	f7ff fe71 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80060f6:	2031      	movs	r0, #49	; 0x31
 80060f8:	f7ff fe6e 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80060fc:	202b      	movs	r0, #43	; 0x2b
 80060fe:	f7ff fe6b 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8006102:	200c      	movs	r0, #12
 8006104:	f7ff fe68 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006108:	200e      	movs	r0, #14
 800610a:	f7ff fe65 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800610e:	2008      	movs	r0, #8
 8006110:	f7ff fe62 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8006114:	204e      	movs	r0, #78	; 0x4e
 8006116:	f7ff fe5f 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800611a:	20f1      	movs	r0, #241	; 0xf1
 800611c:	f7ff fe5c 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8006120:	2037      	movs	r0, #55	; 0x37
 8006122:	f7ff fe59 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8006126:	2007      	movs	r0, #7
 8006128:	f7ff fe56 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800612c:	2010      	movs	r0, #16
 800612e:	f7ff fe53 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006132:	2003      	movs	r0, #3
 8006134:	f7ff fe50 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006138:	200e      	movs	r0, #14
 800613a:	f7ff fe4d 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800613e:	2009      	movs	r0, #9
 8006140:	f7ff fe4a 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006144:	2000      	movs	r0, #0
 8006146:	f7ff fe47 	bl	8005dd8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800614a:	20e1      	movs	r0, #225	; 0xe1
 800614c:	f7ff fe22 	bl	8005d94 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006150:	2000      	movs	r0, #0
 8006152:	f7ff fe41 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006156:	200e      	movs	r0, #14
 8006158:	f7ff fe3e 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800615c:	2014      	movs	r0, #20
 800615e:	f7ff fe3b 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006162:	2003      	movs	r0, #3
 8006164:	f7ff fe38 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8006168:	2011      	movs	r0, #17
 800616a:	f7ff fe35 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800616e:	2007      	movs	r0, #7
 8006170:	f7ff fe32 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006174:	2031      	movs	r0, #49	; 0x31
 8006176:	f7ff fe2f 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800617a:	20c1      	movs	r0, #193	; 0xc1
 800617c:	f7ff fe2c 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8006180:	2048      	movs	r0, #72	; 0x48
 8006182:	f7ff fe29 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8006186:	2008      	movs	r0, #8
 8006188:	f7ff fe26 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800618c:	200f      	movs	r0, #15
 800618e:	f7ff fe23 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8006192:	200c      	movs	r0, #12
 8006194:	f7ff fe20 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006198:	2031      	movs	r0, #49	; 0x31
 800619a:	f7ff fe1d 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800619e:	2036      	movs	r0, #54	; 0x36
 80061a0:	f7ff fe1a 	bl	8005dd8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80061a4:	200f      	movs	r0, #15
 80061a6:	f7ff fe17 	bl	8005dd8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80061aa:	2011      	movs	r0, #17
 80061ac:	f7ff fdf2 	bl	8005d94 <ILI9341_Write_Command>
HAL_Delay(120);
 80061b0:	2078      	movs	r0, #120	; 0x78
 80061b2:	f000 faf3 	bl	800679c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80061b6:	2029      	movs	r0, #41	; 0x29
 80061b8:	f7ff fdec 	bl	8005d94 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80061bc:	2000      	movs	r0, #0
 80061be:	f7ff fe97 	bl	8005ef0 <ILI9341_Set_Rotation>
}
 80061c2:	bf00      	nop
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b08c      	sub	sp, #48	; 0x30
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	80fb      	strh	r3, [r7, #6]
 80061d4:	466b      	mov	r3, sp
 80061d6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80061e4:	d202      	bcs.n	80061ec <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ea:	e002      	b.n	80061f2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80061ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80061f2:	2201      	movs	r2, #1
 80061f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061f8:	483e      	ldr	r0, [pc, #248]	; (80062f4 <ILI9341_Draw_Colour_Burst+0x12c>)
 80061fa:	f001 f9b7 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80061fe:	2200      	movs	r2, #0
 8006200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006204:	483b      	ldr	r0, [pc, #236]	; (80062f4 <ILI9341_Draw_Colour_Burst+0x12c>)
 8006206:	f001 f9b1 	bl	800756c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	b29b      	uxth	r3, r3
 8006210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8006214:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006216:	4623      	mov	r3, r4
 8006218:	3b01      	subs	r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	4620      	mov	r0, r4
 800621e:	f04f 0100 	mov.w	r1, #0
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	f04f 0300 	mov.w	r3, #0
 800622a:	00cb      	lsls	r3, r1, #3
 800622c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006230:	00c2      	lsls	r2, r0, #3
 8006232:	4620      	mov	r0, r4
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	00cb      	lsls	r3, r1, #3
 8006242:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006246:	00c2      	lsls	r2, r0, #3
 8006248:	1de3      	adds	r3, r4, #7
 800624a:	08db      	lsrs	r3, r3, #3
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	ebad 0d03 	sub.w	sp, sp, r3
 8006252:	466b      	mov	r3, sp
 8006254:	3300      	adds	r3, #0
 8006256:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8006258:	2300      	movs	r3, #0
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
 800625c:	e00e      	b.n	800627c <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	4413      	add	r3, r2
 8006264:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006268:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	3301      	adds	r3, #1
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	b2d1      	uxtb	r1, r2
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	3302      	adds	r3, #2
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
 800627c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	429a      	cmp	r2, r3
 8006282:	d3ec      	bcc.n	800625e <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006298:	fbb3 f2f2 	udiv	r2, r3, r2
 800629c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800629e:	fb01 f202 	mul.w	r2, r1, r2
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d010      	beq.n	80062ce <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b0:	e009      	b.n	80062c6 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	230a      	movs	r3, #10
 80062ba:	480f      	ldr	r0, [pc, #60]	; (80062f8 <ILI9341_Draw_Colour_Burst+0x130>)
 80062bc:	f003 fb5d 	bl	800997a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	3301      	adds	r3, #1
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d3f1      	bcc.n	80062b2 <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80062ce:	69b9      	ldr	r1, [r7, #24]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	230a      	movs	r3, #10
 80062d6:	4808      	ldr	r0, [pc, #32]	; (80062f8 <ILI9341_Draw_Colour_Burst+0x130>)
 80062d8:	f003 fb4f 	bl	800997a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80062dc:	2201      	movs	r2, #1
 80062de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062e2:	4804      	ldr	r0, [pc, #16]	; (80062f4 <ILI9341_Draw_Colour_Burst+0x12c>)
 80062e4:	f001 f942 	bl	800756c <HAL_GPIO_WritePin>
 80062e8:	46ad      	mov	sp, r5
}
 80062ea:	bf00      	nop
 80062ec:	3730      	adds	r7, #48	; 0x30
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bdb0      	pop	{r4, r5, r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40020800 	.word	0x40020800
 80062f8:	200004f0 	.word	0x200004f0

080062fc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8006306:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <ILI9341_Fill_Screen+0x44>)
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29a      	uxth	r2, r3
 800630c:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <ILI9341_Fill_Screen+0x48>)
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	2100      	movs	r1, #0
 8006314:	2000      	movs	r0, #0
 8006316:	f7ff fd81 	bl	8005e1c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <ILI9341_Fill_Screen+0x44>)
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	4b08      	ldr	r3, [pc, #32]	; (8006344 <ILI9341_Fill_Screen+0x48>)
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	fb03 f302 	mul.w	r3, r3, r2
 800632c:	461a      	mov	r2, r3
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff ff48 	bl	80061c8 <ILI9341_Draw_Colour_Burst>
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200000d2 	.word	0x200000d2
 8006344:	200000d0 	.word	0x200000d0

08006348 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	80fb      	strh	r3, [r7, #6]
 8006352:	460b      	mov	r3, r1
 8006354:	80bb      	strh	r3, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800635a:	4b64      	ldr	r3, [pc, #400]	; (80064ec <ILI9341_Draw_Pixel+0x1a4>)
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	88fa      	ldrh	r2, [r7, #6]
 8006362:	429a      	cmp	r2, r3
 8006364:	f080 80be 	bcs.w	80064e4 <ILI9341_Draw_Pixel+0x19c>
 8006368:	4b61      	ldr	r3, [pc, #388]	; (80064f0 <ILI9341_Draw_Pixel+0x1a8>)
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	88ba      	ldrh	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	f080 80b7 	bcs.w	80064e4 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006376:	2200      	movs	r2, #0
 8006378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800637c:	485d      	ldr	r0, [pc, #372]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800637e:	f001 f8f5 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006382:	2200      	movs	r2, #0
 8006384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006388:	485a      	ldr	r0, [pc, #360]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800638a:	f001 f8ef 	bl	800756c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800638e:	202a      	movs	r0, #42	; 0x2a
 8006390:	f7ff fcee 	bl	8005d70 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8006394:	2201      	movs	r2, #1
 8006396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800639a:	4856      	ldr	r0, [pc, #344]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800639c:	f001 f8e6 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80063a0:	2201      	movs	r2, #1
 80063a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a6:	4853      	ldr	r0, [pc, #332]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 80063a8:	f001 f8e0 	bl	800756c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063b2:	4850      	ldr	r0, [pc, #320]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 80063b4:	f001 f8da 	bl	800756c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	b29b      	uxth	r3, r3
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	753b      	strb	r3, [r7, #20]
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	757b      	strb	r3, [r7, #21]
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	3301      	adds	r3, #1
 80063cc:	121b      	asrs	r3, r3, #8
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	75bb      	strb	r3, [r7, #22]
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80063dc:	f107 0114 	add.w	r1, r7, #20
 80063e0:	2301      	movs	r3, #1
 80063e2:	2204      	movs	r2, #4
 80063e4:	4844      	ldr	r0, [pc, #272]	; (80064f8 <ILI9341_Draw_Pixel+0x1b0>)
 80063e6:	f003 fac8 	bl	800997a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80063ea:	2201      	movs	r2, #1
 80063ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063f0:	4840      	ldr	r0, [pc, #256]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 80063f2:	f001 f8bb 	bl	800756c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80063f6:	2200      	movs	r2, #0
 80063f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063fc:	483d      	ldr	r0, [pc, #244]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 80063fe:	f001 f8b5 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006402:	2200      	movs	r2, #0
 8006404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006408:	483a      	ldr	r0, [pc, #232]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800640a:	f001 f8af 	bl	800756c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800640e:	202b      	movs	r0, #43	; 0x2b
 8006410:	f7ff fcae 	bl	8005d70 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006414:	2201      	movs	r2, #1
 8006416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800641a:	4836      	ldr	r0, [pc, #216]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800641c:	f001 f8a6 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006420:	2201      	movs	r2, #1
 8006422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006426:	4833      	ldr	r0, [pc, #204]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 8006428:	f001 f8a0 	bl	800756c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800642c:	2200      	movs	r2, #0
 800642e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006432:	4830      	ldr	r0, [pc, #192]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 8006434:	f001 f89a 	bl	800756c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8006438:	88bb      	ldrh	r3, [r7, #4]
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	b29b      	uxth	r3, r3
 800643e:	b2db      	uxtb	r3, r3
 8006440:	743b      	strb	r3, [r7, #16]
 8006442:	88bb      	ldrh	r3, [r7, #4]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	747b      	strb	r3, [r7, #17]
 8006448:	88bb      	ldrh	r3, [r7, #4]
 800644a:	3301      	adds	r3, #1
 800644c:	121b      	asrs	r3, r3, #8
 800644e:	b2db      	uxtb	r3, r3
 8006450:	74bb      	strb	r3, [r7, #18]
 8006452:	88bb      	ldrh	r3, [r7, #4]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	3301      	adds	r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800645c:	f107 0110 	add.w	r1, r7, #16
 8006460:	2301      	movs	r3, #1
 8006462:	2204      	movs	r2, #4
 8006464:	4824      	ldr	r0, [pc, #144]	; (80064f8 <ILI9341_Draw_Pixel+0x1b0>)
 8006466:	f003 fa88 	bl	800997a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800646a:	2201      	movs	r2, #1
 800646c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006470:	4820      	ldr	r0, [pc, #128]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 8006472:	f001 f87b 	bl	800756c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006476:	2200      	movs	r2, #0
 8006478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800647c:	481d      	ldr	r0, [pc, #116]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800647e:	f001 f875 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006482:	2200      	movs	r2, #0
 8006484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006488:	481a      	ldr	r0, [pc, #104]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800648a:	f001 f86f 	bl	800756c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800648e:	202c      	movs	r0, #44	; 0x2c
 8006490:	f7ff fc6e 	bl	8005d70 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006494:	2201      	movs	r2, #1
 8006496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800649a:	4816      	ldr	r0, [pc, #88]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 800649c:	f001 f866 	bl	800756c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80064a0:	2201      	movs	r2, #1
 80064a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064a6:	4813      	ldr	r0, [pc, #76]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 80064a8:	f001 f860 	bl	800756c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064b2:	4810      	ldr	r0, [pc, #64]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 80064b4:	f001 f85a 	bl	800756c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80064b8:	887b      	ldrh	r3, [r7, #2]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	733b      	strb	r3, [r7, #12]
 80064c2:	887b      	ldrh	r3, [r7, #2]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80064c8:	f107 010c 	add.w	r1, r7, #12
 80064cc:	2301      	movs	r3, #1
 80064ce:	2202      	movs	r2, #2
 80064d0:	4809      	ldr	r0, [pc, #36]	; (80064f8 <ILI9341_Draw_Pixel+0x1b0>)
 80064d2:	f003 fa52 	bl	800997a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80064d6:	2201      	movs	r2, #1
 80064d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064dc:	4805      	ldr	r0, [pc, #20]	; (80064f4 <ILI9341_Draw_Pixel+0x1ac>)
 80064de:	f001 f845 	bl	800756c <HAL_GPIO_WritePin>
 80064e2:	e000      	b.n	80064e6 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80064e4:	bf00      	nop
	
}
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	200000d2 	.word	0x200000d2
 80064f0:	200000d0 	.word	0x200000d0
 80064f4:	40020800 	.word	0x40020800
 80064f8:	200004f0 	.word	0x200004f0

080064fc <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80064fc:	b590      	push	{r4, r7, lr}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4623      	mov	r3, r4
 800650c:	80fb      	strh	r3, [r7, #6]
 800650e:	4603      	mov	r3, r0
 8006510:	80bb      	strh	r3, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	807b      	strh	r3, [r7, #2]
 8006516:	4613      	mov	r3, r2
 8006518:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <ILI9341_Draw_Rectangle+0xb0>)
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	429a      	cmp	r2, r3
 8006524:	d23d      	bcs.n	80065a2 <ILI9341_Draw_Rectangle+0xa6>
 8006526:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <ILI9341_Draw_Rectangle+0xb4>)
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	88ba      	ldrh	r2, [r7, #4]
 800652e:	429a      	cmp	r2, r3
 8006530:	d237      	bcs.n	80065a2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	887b      	ldrh	r3, [r7, #2]
 8006536:	4413      	add	r3, r2
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <ILI9341_Draw_Rectangle+0xb0>)
 800653a:	8812      	ldrh	r2, [r2, #0]
 800653c:	b292      	uxth	r2, r2
 800653e:	4293      	cmp	r3, r2
 8006540:	dd05      	ble.n	800654e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <ILI9341_Draw_Rectangle+0xb0>)
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29a      	uxth	r2, r3
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800654e:	88ba      	ldrh	r2, [r7, #4]
 8006550:	883b      	ldrh	r3, [r7, #0]
 8006552:	4413      	add	r3, r2
 8006554:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <ILI9341_Draw_Rectangle+0xb4>)
 8006556:	8812      	ldrh	r2, [r2, #0]
 8006558:	b292      	uxth	r2, r2
 800655a:	4293      	cmp	r3, r2
 800655c:	dd05      	ble.n	800656a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800655e:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <ILI9341_Draw_Rectangle+0xb4>)
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29a      	uxth	r2, r3
 8006564:	88bb      	ldrh	r3, [r7, #4]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	4413      	add	r3, r2
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29c      	uxth	r4, r3
 8006576:	88ba      	ldrh	r2, [r7, #4]
 8006578:	883b      	ldrh	r3, [r7, #0]
 800657a:	4413      	add	r3, r2
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29b      	uxth	r3, r3
 8006582:	88b9      	ldrh	r1, [r7, #4]
 8006584:	88f8      	ldrh	r0, [r7, #6]
 8006586:	4622      	mov	r2, r4
 8006588:	f7ff fc48 	bl	8005e1c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800658c:	883b      	ldrh	r3, [r7, #0]
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	461a      	mov	r2, r3
 8006596:	8b3b      	ldrh	r3, [r7, #24]
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fe14 	bl	80061c8 <ILI9341_Draw_Colour_Burst>
 80065a0:	e000      	b.n	80065a4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80065a2:	bf00      	nop
}
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd90      	pop	{r4, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200000d2 	.word	0x200000d2
 80065b0:	200000d0 	.word	0x200000d0

080065b4 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4604      	mov	r4, r0
 80065bc:	4608      	mov	r0, r1
 80065be:	4611      	mov	r1, r2
 80065c0:	461a      	mov	r2, r3
 80065c2:	4623      	mov	r3, r4
 80065c4:	80fb      	strh	r3, [r7, #6]
 80065c6:	4603      	mov	r3, r0
 80065c8:	80bb      	strh	r3, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	807b      	strh	r3, [r7, #2]
 80065ce:	4613      	mov	r3, r2
 80065d0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80065d2:	4b18      	ldr	r3, [pc, #96]	; (8006634 <ILI9341_Draw_Horizontal_Line+0x80>)
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	88fa      	ldrh	r2, [r7, #6]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d225      	bcs.n	800662a <ILI9341_Draw_Horizontal_Line+0x76>
 80065de:	4b16      	ldr	r3, [pc, #88]	; (8006638 <ILI9341_Draw_Horizontal_Line+0x84>)
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	88ba      	ldrh	r2, [r7, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d21f      	bcs.n	800662a <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 80065ea:	88fa      	ldrh	r2, [r7, #6]
 80065ec:	887b      	ldrh	r3, [r7, #2]
 80065ee:	4413      	add	r3, r2
 80065f0:	4a10      	ldr	r2, [pc, #64]	; (8006634 <ILI9341_Draw_Horizontal_Line+0x80>)
 80065f2:	8812      	ldrh	r2, [r2, #0]
 80065f4:	b292      	uxth	r2, r2
 80065f6:	4293      	cmp	r3, r2
 80065f8:	dd05      	ble.n	8006606 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 80065fa:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <ILI9341_Draw_Horizontal_Line+0x80>)
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	887b      	ldrh	r3, [r7, #2]
 800660a:	4413      	add	r3, r2
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	88bb      	ldrh	r3, [r7, #4]
 8006614:	88b9      	ldrh	r1, [r7, #4]
 8006616:	88f8      	ldrh	r0, [r7, #6]
 8006618:	f7ff fc00 	bl	8005e1c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 800661c:	887a      	ldrh	r2, [r7, #2]
 800661e:	883b      	ldrh	r3, [r7, #0]
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fdd0 	bl	80061c8 <ILI9341_Draw_Colour_Burst>
 8006628:	e000      	b.n	800662c <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800662a:	bf00      	nop
}
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bd90      	pop	{r4, r7, pc}
 8006632:	bf00      	nop
 8006634:	200000d2 	.word	0x200000d2
 8006638:	200000d0 	.word	0x200000d0

0800663c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4623      	mov	r3, r4
 800664c:	80fb      	strh	r3, [r7, #6]
 800664e:	4603      	mov	r3, r0
 8006650:	80bb      	strh	r3, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	807b      	strh	r3, [r7, #2]
 8006656:	4613      	mov	r3, r2
 8006658:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800665a:	4b18      	ldr	r3, [pc, #96]	; (80066bc <ILI9341_Draw_Vertical_Line+0x80>)
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	88fa      	ldrh	r2, [r7, #6]
 8006662:	429a      	cmp	r2, r3
 8006664:	d225      	bcs.n	80066b2 <ILI9341_Draw_Vertical_Line+0x76>
 8006666:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <ILI9341_Draw_Vertical_Line+0x84>)
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	88ba      	ldrh	r2, [r7, #4]
 800666e:	429a      	cmp	r2, r3
 8006670:	d21f      	bcs.n	80066b2 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8006672:	88ba      	ldrh	r2, [r7, #4]
 8006674:	887b      	ldrh	r3, [r7, #2]
 8006676:	4413      	add	r3, r2
 8006678:	4a11      	ldr	r2, [pc, #68]	; (80066c0 <ILI9341_Draw_Vertical_Line+0x84>)
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	b292      	uxth	r2, r2
 800667e:	4293      	cmp	r3, r2
 8006680:	dd05      	ble.n	800668e <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8006682:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <ILI9341_Draw_Vertical_Line+0x84>)
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29a      	uxth	r2, r3
 8006688:	88bb      	ldrh	r3, [r7, #4]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800668e:	88ba      	ldrh	r2, [r7, #4]
 8006690:	887b      	ldrh	r3, [r7, #2]
 8006692:	4413      	add	r3, r2
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	88fa      	ldrh	r2, [r7, #6]
 800669c:	88b9      	ldrh	r1, [r7, #4]
 800669e:	88f8      	ldrh	r0, [r7, #6]
 80066a0:	f7ff fbbc 	bl	8005e1c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80066a4:	887a      	ldrh	r2, [r7, #2]
 80066a6:	883b      	ldrh	r3, [r7, #0]
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fd8c 	bl	80061c8 <ILI9341_Draw_Colour_Burst>
 80066b0:	e000      	b.n	80066b4 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80066b2:	bf00      	nop
}
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	bf00      	nop
 80066bc:	200000d2 	.word	0x200000d2
 80066c0:	200000d0 	.word	0x200000d0

080066c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80066c8:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <HAL_Init+0x34>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <HAL_Init+0x34>)
 80066ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066d2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066d4:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <HAL_Init+0x34>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a07      	ldr	r2, [pc, #28]	; (80066f8 <HAL_Init+0x34>)
 80066da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066e0:	2003      	movs	r0, #3
 80066e2:	f000 fd3d 	bl	8007160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066e6:	2000      	movs	r0, #0
 80066e8:	f000 f808 	bl	80066fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80066ec:	f7fe fbe2 	bl	8004eb4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40023c00 	.word	0x40023c00

080066fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006704:	4b12      	ldr	r3, [pc, #72]	; (8006750 <HAL_InitTick+0x54>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b12      	ldr	r3, [pc, #72]	; (8006754 <HAL_InitTick+0x58>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006712:	fbb3 f3f1 	udiv	r3, r3, r1
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fd55 	bl	80071ca <HAL_SYSTICK_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e00e      	b.n	8006748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b0f      	cmp	r3, #15
 800672e:	d80a      	bhi.n	8006746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006730:	2200      	movs	r2, #0
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	f000 fd1d 	bl	8007176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800673c:	4a06      	ldr	r2, [pc, #24]	; (8006758 <HAL_InitTick+0x5c>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	200000cc 	.word	0x200000cc
 8006754:	200000d8 	.word	0x200000d8
 8006758:	200000d4 	.word	0x200000d4

0800675c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_IncTick+0x20>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <HAL_IncTick+0x24>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4413      	add	r3, r2
 800676c:	4a04      	ldr	r2, [pc, #16]	; (8006780 <HAL_IncTick+0x24>)
 800676e:	6013      	str	r3, [r2, #0]
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	200000d8 	.word	0x200000d8
 8006780:	20000810 	.word	0x20000810

08006784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  return uwTick;
 8006788:	4b03      	ldr	r3, [pc, #12]	; (8006798 <HAL_GetTick+0x14>)
 800678a:	681b      	ldr	r3, [r3, #0]
}
 800678c:	4618      	mov	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000810 	.word	0x20000810

0800679c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067a4:	f7ff ffee 	bl	8006784 <HAL_GetTick>
 80067a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d005      	beq.n	80067c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067b6:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <HAL_Delay+0x44>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067c2:	bf00      	nop
 80067c4:	f7ff ffde 	bl	8006784 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d8f7      	bhi.n	80067c4 <HAL_Delay+0x28>
  {
  }
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200000d8 	.word	0x200000d8

080067e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e031      	b.n	800685e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fa f8ce 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	d116      	bne.n	8006850 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <HAL_ADC_Init+0x84>)
 8006828:	4013      	ands	r3, r2
 800682a:	f043 0202 	orr.w	r2, r3, #2
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 faca 	bl	8006dcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	f043 0201 	orr.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
 800684e:	e001      	b.n	8006854 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	ffffeefd 	.word	0xffffeefd

0800686c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_ADC_Start+0x1a>
 8006882:	2302      	movs	r3, #2
 8006884:	e0ad      	b.n	80069e2 <HAL_ADC_Start+0x176>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	d018      	beq.n	80068ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068ac:	4b50      	ldr	r3, [pc, #320]	; (80069f0 <HAL_ADC_Start+0x184>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a50      	ldr	r2, [pc, #320]	; (80069f4 <HAL_ADC_Start+0x188>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	0c9a      	lsrs	r2, r3, #18
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068c0:	e002      	b.n	80068c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f9      	bne.n	80068c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d175      	bne.n	80069c8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e0:	4b45      	ldr	r3, [pc, #276]	; (80069f8 <HAL_ADC_Start+0x18c>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006902:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006916:	d106      	bne.n	8006926 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	f023 0206 	bic.w	r2, r3, #6
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	645a      	str	r2, [r3, #68]	; 0x44
 8006924:	e002      	b.n	800692c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800693c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800693e:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <HAL_ADC_Start+0x190>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10f      	bne.n	800696a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d143      	bne.n	80069e0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006966:	609a      	str	r2, [r3, #8]
 8006968:	e03a      	b.n	80069e0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <HAL_ADC_Start+0x194>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d10e      	bne.n	8006992 <HAL_ADC_Start+0x126>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d107      	bne.n	8006992 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006990:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006992:	4b1a      	ldr	r3, [pc, #104]	; (80069fc <HAL_ADC_Start+0x190>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b00      	cmp	r3, #0
 800699c:	d120      	bne.n	80069e0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <HAL_ADC_Start+0x198>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d11b      	bne.n	80069e0 <HAL_ADC_Start+0x174>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d114      	bne.n	80069e0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069c4:	609a      	str	r2, [r3, #8]
 80069c6:	e00b      	b.n	80069e0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	f043 0210 	orr.w	r2, r3, #16
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d8:	f043 0201 	orr.w	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200000cc 	.word	0x200000cc
 80069f4:	431bde83 	.word	0x431bde83
 80069f8:	fffff8fe 	.word	0xfffff8fe
 80069fc:	40012300 	.word	0x40012300
 8006a00:	40012000 	.word	0x40012000
 8006a04:	40012200 	.word	0x40012200

08006a08 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a24:	d113      	bne.n	8006a4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a34:	d10b      	bne.n	8006a4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e063      	b.n	8006b16 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006a4e:	f7ff fe99 	bl	8006784 <HAL_GetTick>
 8006a52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a54:	e021      	b.n	8006a9a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d01d      	beq.n	8006a9a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <HAL_ADC_PollForConversion+0x6c>
 8006a64:	f7ff fe8e 	bl	8006784 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d212      	bcs.n	8006a9a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d00b      	beq.n	8006a9a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e03d      	b.n	8006b16 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d1d6      	bne.n	8006a56 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0212 	mvn.w	r2, #18
 8006ab0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d123      	bne.n	8006b14 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11f      	bne.n	8006b14 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d006      	beq.n	8006af0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d111      	bne.n	8006b14 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	f043 0201 	orr.w	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_ADC_ConfigChannel+0x1c>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e12a      	b.n	8006daa <HAL_ADC_ConfigChannel+0x272>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b09      	cmp	r3, #9
 8006b62:	d93a      	bls.n	8006bda <HAL_ADC_ConfigChannel+0xa2>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b6c:	d035      	beq.n	8006bda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68d9      	ldr	r1, [r3, #12]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	4413      	add	r3, r2
 8006b82:	3b1e      	subs	r3, #30
 8006b84:	2207      	movs	r2, #7
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43da      	mvns	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	400a      	ands	r2, r1
 8006b92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a87      	ldr	r2, [pc, #540]	; (8006db8 <HAL_ADC_ConfigChannel+0x280>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68d9      	ldr	r1, [r3, #12]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	061a      	lsls	r2, r3, #24
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bb2:	e035      	b.n	8006c20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68d9      	ldr	r1, [r3, #12]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4403      	add	r3, r0
 8006bcc:	3b1e      	subs	r3, #30
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bd8:	e022      	b.n	8006c20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6919      	ldr	r1, [r3, #16]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	2207      	movs	r2, #7
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43da      	mvns	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	400a      	ands	r2, r1
 8006bfc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6919      	ldr	r1, [r3, #16]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4618      	mov	r0, r3
 8006c10:	4603      	mov	r3, r0
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	4403      	add	r3, r0
 8006c16:	409a      	lsls	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b06      	cmp	r3, #6
 8006c26:	d824      	bhi.n	8006c72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	3b05      	subs	r3, #5
 8006c3a:	221f      	movs	r2, #31
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	43da      	mvns	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	400a      	ands	r2, r1
 8006c48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4618      	mov	r0, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	3b05      	subs	r3, #5
 8006c64:	fa00 f203 	lsl.w	r2, r0, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8006c70:	e04c      	b.n	8006d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b0c      	cmp	r3, #12
 8006c78:	d824      	bhi.n	8006cc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	3b23      	subs	r3, #35	; 0x23
 8006c8c:	221f      	movs	r2, #31
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	43da      	mvns	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	400a      	ands	r2, r1
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4618      	mov	r0, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3b23      	subs	r3, #35	; 0x23
 8006cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc2:	e023      	b.n	8006d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3b41      	subs	r3, #65	; 0x41
 8006cd6:	221f      	movs	r2, #31
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	43da      	mvns	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	400a      	ands	r2, r1
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3b41      	subs	r3, #65	; 0x41
 8006d00:	fa00 f203 	lsl.w	r2, r0, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2a      	ldr	r2, [pc, #168]	; (8006dbc <HAL_ADC_ConfigChannel+0x284>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d10a      	bne.n	8006d2c <HAL_ADC_ConfigChannel+0x1f4>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d1e:	d105      	bne.n	8006d2c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006d20:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <HAL_ADC_ConfigChannel+0x288>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <HAL_ADC_ConfigChannel+0x288>)
 8006d26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006d2a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a22      	ldr	r2, [pc, #136]	; (8006dbc <HAL_ADC_ConfigChannel+0x284>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d109      	bne.n	8006d4a <HAL_ADC_ConfigChannel+0x212>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b12      	cmp	r3, #18
 8006d3c:	d105      	bne.n	8006d4a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <HAL_ADC_ConfigChannel+0x288>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <HAL_ADC_ConfigChannel+0x288>)
 8006d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1b      	ldr	r2, [pc, #108]	; (8006dbc <HAL_ADC_ConfigChannel+0x284>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d125      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x268>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_ADC_ConfigChannel+0x280>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <HAL_ADC_ConfigChannel+0x22e>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b11      	cmp	r3, #17
 8006d64:	d11c      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006d66:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <HAL_ADC_ConfigChannel+0x288>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <HAL_ADC_ConfigChannel+0x288>)
 8006d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d70:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <HAL_ADC_ConfigChannel+0x280>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d111      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006d7c:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <HAL_ADC_ConfigChannel+0x28c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a11      	ldr	r2, [pc, #68]	; (8006dc8 <HAL_ADC_ConfigChannel+0x290>)
 8006d82:	fba2 2303 	umull	r2, r3, r2, r3
 8006d86:	0c9a      	lsrs	r2, r3, #18
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006d92:	e002      	b.n	8006d9a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f9      	bne.n	8006d94 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	10000012 	.word	0x10000012
 8006dbc:	40012000 	.word	0x40012000
 8006dc0:	40012300 	.word	0x40012300
 8006dc4:	200000cc 	.word	0x200000cc
 8006dc8:	431bde83 	.word	0x431bde83

08006dcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006dd4:	4b78      	ldr	r3, [pc, #480]	; (8006fb8 <ADC_Init+0x1ec>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4a77      	ldr	r2, [pc, #476]	; (8006fb8 <ADC_Init+0x1ec>)
 8006dda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006dde:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006de0:	4b75      	ldr	r3, [pc, #468]	; (8006fb8 <ADC_Init+0x1ec>)
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4973      	ldr	r1, [pc, #460]	; (8006fb8 <ADC_Init+0x1ec>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6859      	ldr	r1, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	021a      	lsls	r2, r3, #8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6859      	ldr	r1, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6899      	ldr	r1, [r3, #8]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	4a58      	ldr	r2, [pc, #352]	; (8006fbc <ADC_Init+0x1f0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d022      	beq.n	8006ea6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6899      	ldr	r1, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6899      	ldr	r1, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	609a      	str	r2, [r3, #8]
 8006ea4:	e00f      	b.n	8006ec6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ec4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0202 	bic.w	r2, r2, #2
 8006ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6899      	ldr	r1, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	005a      	lsls	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01b      	beq.n	8006f2c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6859      	ldr	r1, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	035a      	lsls	r2, r3, #13
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	e007      	b.n	8006f3c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	051a      	lsls	r2, r3, #20
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6899      	ldr	r1, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f7e:	025a      	lsls	r2, r3, #9
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6899      	ldr	r1, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	029a      	lsls	r2, r3, #10
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	609a      	str	r2, [r3, #8]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40012300 	.word	0x40012300
 8006fbc:	0f000001 	.word	0x0f000001

08006fc0 <__NVIC_SetPriorityGrouping>:
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <__NVIC_SetPriorityGrouping+0x40>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fdc:	4013      	ands	r3, r2
 8006fde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <__NVIC_SetPriorityGrouping+0x44>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fee:	4a04      	ldr	r2, [pc, #16]	; (8007000 <__NVIC_SetPriorityGrouping+0x40>)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	60d3      	str	r3, [r2, #12]
}
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	e000ed00 	.word	0xe000ed00
 8007004:	05fa0000 	.word	0x05fa0000

08007008 <__NVIC_GetPriorityGrouping>:
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <__NVIC_GetPriorityGrouping+0x18>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	f003 0307 	and.w	r3, r3, #7
}
 8007016:	4618      	mov	r0, r3
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	e000ed00 	.word	0xe000ed00

08007024 <__NVIC_EnableIRQ>:
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800702e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	db0b      	blt.n	800704e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	f003 021f 	and.w	r2, r3, #31
 800703c:	4907      	ldr	r1, [pc, #28]	; (800705c <__NVIC_EnableIRQ+0x38>)
 800703e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	2001      	movs	r0, #1
 8007046:	fa00 f202 	lsl.w	r2, r0, r2
 800704a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	e000e100 	.word	0xe000e100

08007060 <__NVIC_SetPriority>:
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800706c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007070:	2b00      	cmp	r3, #0
 8007072:	db0a      	blt.n	800708a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	b2da      	uxtb	r2, r3
 8007078:	490c      	ldr	r1, [pc, #48]	; (80070ac <__NVIC_SetPriority+0x4c>)
 800707a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707e:	0112      	lsls	r2, r2, #4
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	440b      	add	r3, r1
 8007084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007088:	e00a      	b.n	80070a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	4908      	ldr	r1, [pc, #32]	; (80070b0 <__NVIC_SetPriority+0x50>)
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	3b04      	subs	r3, #4
 8007098:	0112      	lsls	r2, r2, #4
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	440b      	add	r3, r1
 800709e:	761a      	strb	r2, [r3, #24]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	e000e100 	.word	0xe000e100
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <NVIC_EncodePriority>:
{
 80070b4:	b480      	push	{r7}
 80070b6:	b089      	sub	sp, #36	; 0x24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f1c3 0307 	rsb	r3, r3, #7
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	bf28      	it	cs
 80070d2:	2304      	movcs	r3, #4
 80070d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3304      	adds	r3, #4
 80070da:	2b06      	cmp	r3, #6
 80070dc:	d902      	bls.n	80070e4 <NVIC_EncodePriority+0x30>
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	3b03      	subs	r3, #3
 80070e2:	e000      	b.n	80070e6 <NVIC_EncodePriority+0x32>
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070e8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43da      	mvns	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	401a      	ands	r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	fa01 f303 	lsl.w	r3, r1, r3
 8007106:	43d9      	mvns	r1, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800710c:	4313      	orrs	r3, r2
}
 800710e:	4618      	mov	r0, r3
 8007110:	3724      	adds	r7, #36	; 0x24
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3b01      	subs	r3, #1
 8007128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800712c:	d301      	bcc.n	8007132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800712e:	2301      	movs	r3, #1
 8007130:	e00f      	b.n	8007152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007132:	4a0a      	ldr	r2, [pc, #40]	; (800715c <SysTick_Config+0x40>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3b01      	subs	r3, #1
 8007138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800713a:	210f      	movs	r1, #15
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	f7ff ff8e 	bl	8007060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <SysTick_Config+0x40>)
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800714a:	4b04      	ldr	r3, [pc, #16]	; (800715c <SysTick_Config+0x40>)
 800714c:	2207      	movs	r2, #7
 800714e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	e000e010 	.word	0xe000e010

08007160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff29 	bl	8006fc0 <__NVIC_SetPriorityGrouping>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	4603      	mov	r3, r0
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007188:	f7ff ff3e 	bl	8007008 <__NVIC_GetPriorityGrouping>
 800718c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	f7ff ff8e 	bl	80070b4 <NVIC_EncodePriority>
 8007198:	4602      	mov	r2, r0
 800719a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ff5d 	bl	8007060 <__NVIC_SetPriority>
}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	4603      	mov	r3, r0
 80071b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff ff31 	bl	8007024 <__NVIC_EnableIRQ>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff ffa2 	bl	800711c <SysTick_Config>
 80071d8:	4603      	mov	r3, r0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b089      	sub	sp, #36	; 0x24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e175      	b.n	80074f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007204:	2201      	movs	r2, #1
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4013      	ands	r3, r2
 8007216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	429a      	cmp	r2, r3
 800721e:	f040 8164 	bne.w	80074ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d00b      	beq.n	8007242 <HAL_GPIO_Init+0x5e>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d007      	beq.n	8007242 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007236:	2b11      	cmp	r3, #17
 8007238:	d003      	beq.n	8007242 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b12      	cmp	r3, #18
 8007240:	d130      	bne.n	80072a4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	2203      	movs	r2, #3
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	43db      	mvns	r3, r3
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	4013      	ands	r3, r2
 8007258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	fa02 f303 	lsl.w	r3, r2, r3
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	4313      	orrs	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007278:	2201      	movs	r2, #1
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	fa02 f303 	lsl.w	r3, r2, r3
 8007280:	43db      	mvns	r3, r3
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	4013      	ands	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	091b      	lsrs	r3, r3, #4
 800728e:	f003 0201 	and.w	r2, r3, #1
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	fa02 f303 	lsl.w	r3, r2, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4313      	orrs	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	2203      	movs	r2, #3
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	43db      	mvns	r3, r3
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	4013      	ands	r3, r2
 80072ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d003      	beq.n	80072e4 <HAL_GPIO_Init+0x100>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b12      	cmp	r3, #18
 80072e2:	d123      	bne.n	800732c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	08da      	lsrs	r2, r3, #3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3208      	adds	r2, #8
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	220f      	movs	r2, #15
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	43db      	mvns	r3, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4013      	ands	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	4313      	orrs	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	08da      	lsrs	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3208      	adds	r2, #8
 8007326:	69b9      	ldr	r1, [r7, #24]
 8007328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	2203      	movs	r2, #3
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	4013      	ands	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 0203 	and.w	r2, r3, #3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4313      	orrs	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80be 	beq.w	80074ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800736e:	4b66      	ldr	r3, [pc, #408]	; (8007508 <HAL_GPIO_Init+0x324>)
 8007370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007372:	4a65      	ldr	r2, [pc, #404]	; (8007508 <HAL_GPIO_Init+0x324>)
 8007374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007378:	6453      	str	r3, [r2, #68]	; 0x44
 800737a:	4b63      	ldr	r3, [pc, #396]	; (8007508 <HAL_GPIO_Init+0x324>)
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007386:	4a61      	ldr	r2, [pc, #388]	; (800750c <HAL_GPIO_Init+0x328>)
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	3302      	adds	r3, #2
 800738e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007392:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	220f      	movs	r2, #15
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	43db      	mvns	r3, r3
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	4013      	ands	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a58      	ldr	r2, [pc, #352]	; (8007510 <HAL_GPIO_Init+0x32c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d037      	beq.n	8007422 <HAL_GPIO_Init+0x23e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a57      	ldr	r2, [pc, #348]	; (8007514 <HAL_GPIO_Init+0x330>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d031      	beq.n	800741e <HAL_GPIO_Init+0x23a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a56      	ldr	r2, [pc, #344]	; (8007518 <HAL_GPIO_Init+0x334>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d02b      	beq.n	800741a <HAL_GPIO_Init+0x236>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a55      	ldr	r2, [pc, #340]	; (800751c <HAL_GPIO_Init+0x338>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d025      	beq.n	8007416 <HAL_GPIO_Init+0x232>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a54      	ldr	r2, [pc, #336]	; (8007520 <HAL_GPIO_Init+0x33c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01f      	beq.n	8007412 <HAL_GPIO_Init+0x22e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a53      	ldr	r2, [pc, #332]	; (8007524 <HAL_GPIO_Init+0x340>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d019      	beq.n	800740e <HAL_GPIO_Init+0x22a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a52      	ldr	r2, [pc, #328]	; (8007528 <HAL_GPIO_Init+0x344>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_GPIO_Init+0x226>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a51      	ldr	r2, [pc, #324]	; (800752c <HAL_GPIO_Init+0x348>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00d      	beq.n	8007406 <HAL_GPIO_Init+0x222>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a50      	ldr	r2, [pc, #320]	; (8007530 <HAL_GPIO_Init+0x34c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d007      	beq.n	8007402 <HAL_GPIO_Init+0x21e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a4f      	ldr	r2, [pc, #316]	; (8007534 <HAL_GPIO_Init+0x350>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d101      	bne.n	80073fe <HAL_GPIO_Init+0x21a>
 80073fa:	2309      	movs	r3, #9
 80073fc:	e012      	b.n	8007424 <HAL_GPIO_Init+0x240>
 80073fe:	230a      	movs	r3, #10
 8007400:	e010      	b.n	8007424 <HAL_GPIO_Init+0x240>
 8007402:	2308      	movs	r3, #8
 8007404:	e00e      	b.n	8007424 <HAL_GPIO_Init+0x240>
 8007406:	2307      	movs	r3, #7
 8007408:	e00c      	b.n	8007424 <HAL_GPIO_Init+0x240>
 800740a:	2306      	movs	r3, #6
 800740c:	e00a      	b.n	8007424 <HAL_GPIO_Init+0x240>
 800740e:	2305      	movs	r3, #5
 8007410:	e008      	b.n	8007424 <HAL_GPIO_Init+0x240>
 8007412:	2304      	movs	r3, #4
 8007414:	e006      	b.n	8007424 <HAL_GPIO_Init+0x240>
 8007416:	2303      	movs	r3, #3
 8007418:	e004      	b.n	8007424 <HAL_GPIO_Init+0x240>
 800741a:	2302      	movs	r3, #2
 800741c:	e002      	b.n	8007424 <HAL_GPIO_Init+0x240>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <HAL_GPIO_Init+0x240>
 8007422:	2300      	movs	r3, #0
 8007424:	69fa      	ldr	r2, [r7, #28]
 8007426:	f002 0203 	and.w	r2, r2, #3
 800742a:	0092      	lsls	r2, r2, #2
 800742c:	4093      	lsls	r3, r2
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4313      	orrs	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007434:	4935      	ldr	r1, [pc, #212]	; (800750c <HAL_GPIO_Init+0x328>)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	089b      	lsrs	r3, r3, #2
 800743a:	3302      	adds	r3, #2
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007442:	4b3d      	ldr	r3, [pc, #244]	; (8007538 <HAL_GPIO_Init+0x354>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	43db      	mvns	r3, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4013      	ands	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007466:	4a34      	ldr	r2, [pc, #208]	; (8007538 <HAL_GPIO_Init+0x354>)
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800746c:	4b32      	ldr	r3, [pc, #200]	; (8007538 <HAL_GPIO_Init+0x354>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	43db      	mvns	r3, r3
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	4013      	ands	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007490:	4a29      	ldr	r2, [pc, #164]	; (8007538 <HAL_GPIO_Init+0x354>)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007496:	4b28      	ldr	r3, [pc, #160]	; (8007538 <HAL_GPIO_Init+0x354>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074ba:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <HAL_GPIO_Init+0x354>)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074c0:	4b1d      	ldr	r3, [pc, #116]	; (8007538 <HAL_GPIO_Init+0x354>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	43db      	mvns	r3, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074e4:	4a14      	ldr	r2, [pc, #80]	; (8007538 <HAL_GPIO_Init+0x354>)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	3301      	adds	r3, #1
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	2b0f      	cmp	r3, #15
 80074f4:	f67f ae86 	bls.w	8007204 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	3724      	adds	r7, #36	; 0x24
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40023800 	.word	0x40023800
 800750c:	40013800 	.word	0x40013800
 8007510:	40020000 	.word	0x40020000
 8007514:	40020400 	.word	0x40020400
 8007518:	40020800 	.word	0x40020800
 800751c:	40020c00 	.word	0x40020c00
 8007520:	40021000 	.word	0x40021000
 8007524:	40021400 	.word	0x40021400
 8007528:	40021800 	.word	0x40021800
 800752c:	40021c00 	.word	0x40021c00
 8007530:	40022000 	.word	0x40022000
 8007534:	40022400 	.word	0x40022400
 8007538:	40013c00 	.word	0x40013c00

0800753c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	887b      	ldrh	r3, [r7, #2]
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
 8007558:	e001      	b.n	800755e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
 8007578:	4613      	mov	r3, r2
 800757a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800757c:	787b      	ldrb	r3, [r7, #1]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007582:	887a      	ldrh	r2, [r7, #2]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007588:	e003      	b.n	8007592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800758a:	887b      	ldrh	r3, [r7, #2]
 800758c:	041a      	lsls	r2, r3, #16
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	619a      	str	r2, [r3, #24]
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
	...

080075a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80075aa:	4b08      	ldr	r3, [pc, #32]	; (80075cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	4013      	ands	r3, r2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d006      	beq.n	80075c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075b6:	4a05      	ldr	r2, [pc, #20]	; (80075cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fd fb98 	bl	8004cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40013c00 	.word	0x40013c00

080075d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e07f      	b.n	80076e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7f9 fb9e 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2224      	movs	r2, #36	; 0x24
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0201 	bic.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d107      	bne.n	800764a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007646:	609a      	str	r2, [r3, #8]
 8007648:	e006      	b.n	8007658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d104      	bne.n	800766a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6859      	ldr	r1, [r3, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	4b1d      	ldr	r3, [pc, #116]	; (80076ec <HAL_I2C_Init+0x11c>)
 8007676:	430b      	orrs	r3, r1
 8007678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	ea42 0103 	orr.w	r1, r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	69d9      	ldr	r1, [r3, #28]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a1a      	ldr	r2, [r3, #32]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	02008000 	.word	0x02008000

080076f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	461a      	mov	r2, r3
 80076fc:	460b      	mov	r3, r1
 80076fe:	817b      	strh	r3, [r7, #10]
 8007700:	4613      	mov	r3, r2
 8007702:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b20      	cmp	r3, #32
 800770e:	f040 80da 	bne.w	80078c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_I2C_Master_Transmit+0x30>
 800771c:	2302      	movs	r3, #2
 800771e:	e0d3      	b.n	80078c8 <HAL_I2C_Master_Transmit+0x1d8>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007728:	f7ff f82c 	bl	8006784 <HAL_GetTick>
 800772c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	2319      	movs	r3, #25
 8007734:	2201      	movs	r2, #1
 8007736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fcbc 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e0be      	b.n	80078c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2221      	movs	r2, #33	; 0x21
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2210      	movs	r2, #16
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	893a      	ldrh	r2, [r7, #8]
 800776a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	2bff      	cmp	r3, #255	; 0xff
 800777a:	d90e      	bls.n	800779a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	22ff      	movs	r2, #255	; 0xff
 8007780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	b2da      	uxtb	r2, r3
 8007788:	8979      	ldrh	r1, [r7, #10]
 800778a:	4b51      	ldr	r3, [pc, #324]	; (80078d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fe1e 	bl	80083d4 <I2C_TransferConfig>
 8007798:	e06c      	b.n	8007874 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	8979      	ldrh	r1, [r7, #10]
 80077ac:	4b48      	ldr	r3, [pc, #288]	; (80078d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fe0d 	bl	80083d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80077ba:	e05b      	b.n	8007874 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	6a39      	ldr	r1, [r7, #32]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fcb9 	bl	8008138 <I2C_WaitOnTXISFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e07b      	b.n	80078c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	781a      	ldrb	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d034      	beq.n	8007874 <HAL_I2C_Master_Transmit+0x184>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	d130      	bne.n	8007874 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	2200      	movs	r2, #0
 800781a:	2180      	movs	r1, #128	; 0x80
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fc4b 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e04d      	b.n	80078c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2bff      	cmp	r3, #255	; 0xff
 8007834:	d90e      	bls.n	8007854 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	22ff      	movs	r2, #255	; 0xff
 800783a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007840:	b2da      	uxtb	r2, r3
 8007842:	8979      	ldrh	r1, [r7, #10]
 8007844:	2300      	movs	r3, #0
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fdc1 	bl	80083d4 <I2C_TransferConfig>
 8007852:	e00f      	b.n	8007874 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007862:	b2da      	uxtb	r2, r3
 8007864:	8979      	ldrh	r1, [r7, #10]
 8007866:	2300      	movs	r3, #0
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fdb0 	bl	80083d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d19e      	bne.n	80077bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	6a39      	ldr	r1, [r7, #32]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fc98 	bl	80081b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e01a      	b.n	80078c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2220      	movs	r2, #32
 8007898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6859      	ldr	r1, [r3, #4]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80078a6:	400b      	ands	r3, r1
 80078a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e000      	b.n	80078c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80078c6:	2302      	movs	r3, #2
  }
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	80002000 	.word	0x80002000
 80078d4:	fe00e800 	.word	0xfe00e800

080078d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	461a      	mov	r2, r3
 80078e4:	460b      	mov	r3, r1
 80078e6:	817b      	strh	r3, [r7, #10]
 80078e8:	4613      	mov	r3, r2
 80078ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	f040 80db 	bne.w	8007ab0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_I2C_Master_Receive+0x30>
 8007904:	2302      	movs	r3, #2
 8007906:	e0d4      	b.n	8007ab2 <HAL_I2C_Master_Receive+0x1da>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007910:	f7fe ff38 	bl	8006784 <HAL_GetTick>
 8007914:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	2319      	movs	r3, #25
 800791c:	2201      	movs	r2, #1
 800791e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fbc8 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e0bf      	b.n	8007ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2222      	movs	r2, #34	; 0x22
 8007936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2210      	movs	r2, #16
 800793e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	893a      	ldrh	r2, [r7, #8]
 8007952:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795e:	b29b      	uxth	r3, r3
 8007960:	2bff      	cmp	r3, #255	; 0xff
 8007962:	d90e      	bls.n	8007982 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	22ff      	movs	r2, #255	; 0xff
 8007968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796e:	b2da      	uxtb	r2, r3
 8007970:	8979      	ldrh	r1, [r7, #10]
 8007972:	4b52      	ldr	r3, [pc, #328]	; (8007abc <HAL_I2C_Master_Receive+0x1e4>)
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fd2a 	bl	80083d4 <I2C_TransferConfig>
 8007980:	e06d      	b.n	8007a5e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007990:	b2da      	uxtb	r2, r3
 8007992:	8979      	ldrh	r1, [r7, #10]
 8007994:	4b49      	ldr	r3, [pc, #292]	; (8007abc <HAL_I2C_Master_Receive+0x1e4>)
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fd19 	bl	80083d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80079a2:	e05c      	b.n	8007a5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	6a39      	ldr	r1, [r7, #32]
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fc41 	bl	8008230 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e07c      	b.n	8007ab2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d034      	beq.n	8007a5e <HAL_I2C_Master_Receive+0x186>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d130      	bne.n	8007a5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	2200      	movs	r2, #0
 8007a04:	2180      	movs	r1, #128	; 0x80
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fb56 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e04d      	b.n	8007ab2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2bff      	cmp	r3, #255	; 0xff
 8007a1e:	d90e      	bls.n	8007a3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	22ff      	movs	r2, #255	; 0xff
 8007a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	8979      	ldrh	r1, [r7, #10]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fccc 	bl	80083d4 <I2C_TransferConfig>
 8007a3c:	e00f      	b.n	8007a5e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	8979      	ldrh	r1, [r7, #10]
 8007a50:	2300      	movs	r3, #0
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fcbb 	bl	80083d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d19d      	bne.n	80079a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	6a39      	ldr	r1, [r7, #32]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fba3 	bl	80081b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e01a      	b.n	8007ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2220      	movs	r2, #32
 8007a82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6859      	ldr	r1, [r3, #4]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <HAL_I2C_Master_Receive+0x1e8>)
 8007a90:	400b      	ands	r3, r1
 8007a92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	80002400 	.word	0x80002400
 8007ac0:	fe00e800 	.word	0xfe00e800

08007ac4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	817b      	strh	r3, [r7, #10]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	813b      	strh	r3, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	f040 80f9 	bne.w	8007cde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <HAL_I2C_Mem_Write+0x34>
 8007af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e0ed      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_I2C_Mem_Write+0x4e>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e0e6      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b1a:	f7fe fe33 	bl	8006784 <HAL_GetTick>
 8007b1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	2319      	movs	r3, #25
 8007b26:	2201      	movs	r2, #1
 8007b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fac3 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0d1      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2221      	movs	r2, #33	; 0x21
 8007b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2240      	movs	r2, #64	; 0x40
 8007b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a3a      	ldr	r2, [r7, #32]
 8007b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b64:	88f8      	ldrh	r0, [r7, #6]
 8007b66:	893a      	ldrh	r2, [r7, #8]
 8007b68:	8979      	ldrh	r1, [r7, #10]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	4603      	mov	r3, r0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f9d3 	bl	8007f20 <I2C_RequestMemoryWrite>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0a9      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2bff      	cmp	r3, #255	; 0xff
 8007b94:	d90e      	bls.n	8007bb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	22ff      	movs	r2, #255	; 0xff
 8007b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	8979      	ldrh	r1, [r7, #10]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 fc11 	bl	80083d4 <I2C_TransferConfig>
 8007bb2:	e00f      	b.n	8007bd4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	8979      	ldrh	r1, [r7, #10]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fc00 	bl	80083d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 faad 	bl	8008138 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e07b      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d034      	beq.n	8007c8c <HAL_I2C_Mem_Write+0x1c8>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d130      	bne.n	8007c8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	2200      	movs	r2, #0
 8007c32:	2180      	movs	r1, #128	; 0x80
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fa3f 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e04d      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2bff      	cmp	r3, #255	; 0xff
 8007c4c:	d90e      	bls.n	8007c6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	8979      	ldrh	r1, [r7, #10]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fbb5 	bl	80083d4 <I2C_TransferConfig>
 8007c6a:	e00f      	b.n	8007c8c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	8979      	ldrh	r1, [r7, #10]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fba4 	bl	80083d4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d19e      	bne.n	8007bd4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fa8c 	bl	80081b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e01a      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6859      	ldr	r1, [r3, #4]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <HAL_I2C_Mem_Write+0x224>)
 8007cbe:	400b      	ands	r3, r1
 8007cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e000      	b.n	8007ce0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007cde:	2302      	movs	r3, #2
  }
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	fe00e800 	.word	0xfe00e800

08007cec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af02      	add	r7, sp, #8
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	817b      	strh	r3, [r7, #10]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	813b      	strh	r3, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	f040 80fd 	bne.w	8007f0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <HAL_I2C_Mem_Read+0x34>
 8007d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d105      	bne.n	8007d2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e0f1      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_I2C_Mem_Read+0x4e>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e0ea      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d42:	f7fe fd1f 	bl	8006784 <HAL_GetTick>
 8007d46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2319      	movs	r3, #25
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f9af 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0d5      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2222      	movs	r2, #34	; 0x22
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2240      	movs	r2, #64	; 0x40
 8007d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d8c:	88f8      	ldrh	r0, [r7, #6]
 8007d8e:	893a      	ldrh	r2, [r7, #8]
 8007d90:	8979      	ldrh	r1, [r7, #10]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f913 	bl	8007fc8 <I2C_RequestMemoryRead>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0ad      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2bff      	cmp	r3, #255	; 0xff
 8007dbc:	d90e      	bls.n	8007ddc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	22ff      	movs	r2, #255	; 0xff
 8007dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	8979      	ldrh	r1, [r7, #10]
 8007dcc:	4b52      	ldr	r3, [pc, #328]	; (8007f18 <HAL_I2C_Mem_Read+0x22c>)
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 fafd 	bl	80083d4 <I2C_TransferConfig>
 8007dda:	e00f      	b.n	8007dfc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	8979      	ldrh	r1, [r7, #10]
 8007dee:	4b4a      	ldr	r3, [pc, #296]	; (8007f18 <HAL_I2C_Mem_Read+0x22c>)
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 faec 	bl	80083d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	2200      	movs	r2, #0
 8007e04:	2104      	movs	r1, #4
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f956 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e07c      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d034      	beq.n	8007ebc <HAL_I2C_Mem_Read+0x1d0>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d130      	bne.n	8007ebc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2200      	movs	r2, #0
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f927 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e04d      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2bff      	cmp	r3, #255	; 0xff
 8007e7c:	d90e      	bls.n	8007e9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	22ff      	movs	r2, #255	; 0xff
 8007e82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	8979      	ldrh	r1, [r7, #10]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fa9d 	bl	80083d4 <I2C_TransferConfig>
 8007e9a:	e00f      	b.n	8007ebc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	8979      	ldrh	r1, [r7, #10]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fa8c 	bl	80083d4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d19a      	bne.n	8007dfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f974 	bl	80081b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e01a      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6859      	ldr	r1, [r3, #4]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <HAL_I2C_Mem_Read+0x230>)
 8007eee:	400b      	ands	r3, r1
 8007ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	80002400 	.word	0x80002400
 8007f1c:	fe00e800 	.word	0xfe00e800

08007f20 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	817b      	strh	r3, [r7, #10]
 8007f32:	460b      	mov	r3, r1
 8007f34:	813b      	strh	r3, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	8979      	ldrh	r1, [r7, #10]
 8007f40:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <I2C_RequestMemoryWrite+0xa4>)
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fa43 	bl	80083d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	69b9      	ldr	r1, [r7, #24]
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f8f0 	bl	8008138 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e02c      	b.n	8007fbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d105      	bne.n	8007f74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f68:	893b      	ldrh	r3, [r7, #8]
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	629a      	str	r2, [r3, #40]	; 0x28
 8007f72:	e015      	b.n	8007fa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f74:	893b      	ldrh	r3, [r7, #8]
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	69b9      	ldr	r1, [r7, #24]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f8d6 	bl	8008138 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e012      	b.n	8007fbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f96:	893b      	ldrh	r3, [r7, #8]
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f884 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	80002000 	.word	0x80002000

08007fc8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	817b      	strh	r3, [r7, #10]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	813b      	strh	r3, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	8979      	ldrh	r1, [r7, #10]
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <I2C_RequestMemoryRead+0xa4>)
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2300      	movs	r3, #0
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f9f0 	bl	80083d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	69b9      	ldr	r1, [r7, #24]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f89d 	bl	8008138 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e02c      	b.n	8008062 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d105      	bne.n	800801a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800800e:	893b      	ldrh	r3, [r7, #8]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
 8008018:	e015      	b.n	8008046 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800801a:	893b      	ldrh	r3, [r7, #8]
 800801c:	0a1b      	lsrs	r3, r3, #8
 800801e:	b29b      	uxth	r3, r3
 8008020:	b2da      	uxtb	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	69b9      	ldr	r1, [r7, #24]
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f883 	bl	8008138 <I2C_WaitOnTXISFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e012      	b.n	8008062 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800803c:	893b      	ldrh	r3, [r7, #8]
 800803e:	b2da      	uxtb	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2200      	movs	r2, #0
 800804e:	2140      	movs	r1, #64	; 0x40
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f831 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e000      	b.n	8008062 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	80002000 	.word	0x80002000

08008070 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b02      	cmp	r3, #2
 8008084:	d103      	bne.n	800808e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b01      	cmp	r3, #1
 800809a:	d007      	beq.n	80080ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	619a      	str	r2, [r3, #24]
  }
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080c8:	e022      	b.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d01e      	beq.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d2:	f7fe fb57 	bl	8006784 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d302      	bcc.n	80080e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d113      	bne.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e00f      	b.n	8008130 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	4013      	ands	r3, r2
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	bf0c      	ite	eq
 8008120:	2301      	moveq	r3, #1
 8008122:	2300      	movne	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	429a      	cmp	r2, r3
 800812c:	d0cd      	beq.n	80080ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008144:	e02c      	b.n	80081a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f8dc 	bl	8008308 <I2C_IsAcknowledgeFailed>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e02a      	b.n	80081b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d01e      	beq.n	80081a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008162:	f7fe fb0f 	bl	8006784 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d113      	bne.n	80081a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817c:	f043 0220 	orr.w	r2, r3, #32
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e007      	b.n	80081b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d1cb      	bne.n	8008146 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c4:	e028      	b.n	8008218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 f89c 	bl	8008308 <I2C_IsAcknowledgeFailed>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e026      	b.n	8008228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081da:	f7fe fad3 	bl	8006784 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d113      	bne.n	8008218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f4:	f043 0220 	orr.w	r2, r3, #32
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e007      	b.n	8008228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f003 0320 	and.w	r3, r3, #32
 8008222:	2b20      	cmp	r3, #32
 8008224:	d1cf      	bne.n	80081c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800823c:	e055      	b.n	80082ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f860 	bl	8008308 <I2C_IsAcknowledgeFailed>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e053      	b.n	80082fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b20      	cmp	r3, #32
 800825e:	d129      	bne.n	80082b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d105      	bne.n	800827a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	e03f      	b.n	80082fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2220      	movs	r2, #32
 8008280:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6859      	ldr	r1, [r3, #4]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800828e:	400b      	ands	r3, r1
 8008290:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e022      	b.n	80082fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b4:	f7fe fa66 	bl	8006784 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d302      	bcc.n	80082ca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10f      	bne.n	80082ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ce:	f043 0220 	orr.w	r2, r3, #32
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e007      	b.n	80082fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d1a2      	bne.n	800823e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	fe00e800 	.word	0xfe00e800

08008308 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	f003 0310 	and.w	r3, r3, #16
 800831e:	2b10      	cmp	r3, #16
 8008320:	d151      	bne.n	80083c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008322:	e022      	b.n	800836a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d01e      	beq.n	800836a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800832c:	f7fe fa2a 	bl	8006784 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	429a      	cmp	r2, r3
 800833a:	d302      	bcc.n	8008342 <I2C_IsAcknowledgeFailed+0x3a>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d113      	bne.n	800836a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	f043 0220 	orr.w	r2, r3, #32
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2220      	movs	r2, #32
 8008352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e02e      	b.n	80083c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b20      	cmp	r3, #32
 8008376:	d1d5      	bne.n	8008324 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2210      	movs	r2, #16
 800837e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2220      	movs	r2, #32
 8008386:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7ff fe71 	bl	8008070 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6859      	ldr	r1, [r3, #4]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800839a:	400b      	ands	r3, r1
 800839c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	f043 0204 	orr.w	r2, r3, #4
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	fe00e800 	.word	0xfe00e800

080083d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	817b      	strh	r3, [r7, #10]
 80083e2:	4613      	mov	r3, r2
 80083e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	0d5b      	lsrs	r3, r3, #21
 80083f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083f4:	4b0d      	ldr	r3, [pc, #52]	; (800842c <I2C_TransferConfig+0x58>)
 80083f6:	430b      	orrs	r3, r1
 80083f8:	43db      	mvns	r3, r3
 80083fa:	ea02 0103 	and.w	r1, r2, r3
 80083fe:	897b      	ldrh	r3, [r7, #10]
 8008400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008404:	7a7b      	ldrb	r3, [r7, #9]
 8008406:	041b      	lsls	r3, r3, #16
 8008408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	431a      	orrs	r2, r3
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	431a      	orrs	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	03ff63ff 	.word	0x03ff63ff

08008430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b20      	cmp	r3, #32
 8008444:	d138      	bne.n	80084b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008450:	2302      	movs	r3, #2
 8008452:	e032      	b.n	80084ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2224      	movs	r2, #36	; 0x24
 8008460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0201 	bic.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e000      	b.n	80084ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084b8:	2302      	movs	r3, #2
  }
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b20      	cmp	r3, #32
 80084da:	d139      	bne.n	8008550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d101      	bne.n	80084ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084e6:	2302      	movs	r3, #2
 80084e8:	e033      	b.n	8008552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2224      	movs	r2, #36	; 0x24
 80084f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0201 	bic.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0201 	orr.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	e000      	b.n	8008552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008550:	2302      	movs	r3, #2
  }
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a04      	ldr	r2, [pc, #16]	; (800857c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800856a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856e:	6013      	str	r3, [r2, #0]
}
 8008570:	bf00      	nop
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	40007000 	.word	0x40007000

08008580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800858a:	4b23      	ldr	r3, [pc, #140]	; (8008618 <HAL_PWREx_EnableOverDrive+0x98>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	4a22      	ldr	r2, [pc, #136]	; (8008618 <HAL_PWREx_EnableOverDrive+0x98>)
 8008590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008594:	6413      	str	r3, [r2, #64]	; 0x40
 8008596:	4b20      	ldr	r3, [pc, #128]	; (8008618 <HAL_PWREx_EnableOverDrive+0x98>)
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80085a2:	4b1e      	ldr	r3, [pc, #120]	; (800861c <HAL_PWREx_EnableOverDrive+0x9c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1d      	ldr	r2, [pc, #116]	; (800861c <HAL_PWREx_EnableOverDrive+0x9c>)
 80085a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085ae:	f7fe f8e9 	bl	8006784 <HAL_GetTick>
 80085b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80085b4:	e009      	b.n	80085ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80085b6:	f7fe f8e5 	bl	8006784 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085c4:	d901      	bls.n	80085ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e022      	b.n	8008610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80085ca:	4b14      	ldr	r3, [pc, #80]	; (800861c <HAL_PWREx_EnableOverDrive+0x9c>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d6:	d1ee      	bne.n	80085b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80085d8:	4b10      	ldr	r3, [pc, #64]	; (800861c <HAL_PWREx_EnableOverDrive+0x9c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a0f      	ldr	r2, [pc, #60]	; (800861c <HAL_PWREx_EnableOverDrive+0x9c>)
 80085de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085e4:	f7fe f8ce 	bl	8006784 <HAL_GetTick>
 80085e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80085ea:	e009      	b.n	8008600 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80085ec:	f7fe f8ca 	bl	8006784 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085fa:	d901      	bls.n	8008600 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e007      	b.n	8008610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800860c:	d1ee      	bne.n	80085ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40023800 	.word	0x40023800
 800861c:	40007000 	.word	0x40007000

08008620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008628:	2300      	movs	r3, #0
 800862a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e29b      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8087 	beq.w	8008752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008644:	4b96      	ldr	r3, [pc, #600]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 030c 	and.w	r3, r3, #12
 800864c:	2b04      	cmp	r3, #4
 800864e:	d00c      	beq.n	800866a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008650:	4b93      	ldr	r3, [pc, #588]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 030c 	and.w	r3, r3, #12
 8008658:	2b08      	cmp	r3, #8
 800865a:	d112      	bne.n	8008682 <HAL_RCC_OscConfig+0x62>
 800865c:	4b90      	ldr	r3, [pc, #576]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008668:	d10b      	bne.n	8008682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800866a:	4b8d      	ldr	r3, [pc, #564]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d06c      	beq.n	8008750 <HAL_RCC_OscConfig+0x130>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d168      	bne.n	8008750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e275      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868a:	d106      	bne.n	800869a <HAL_RCC_OscConfig+0x7a>
 800868c:	4b84      	ldr	r3, [pc, #528]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a83      	ldr	r2, [pc, #524]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	e02e      	b.n	80086f8 <HAL_RCC_OscConfig+0xd8>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10c      	bne.n	80086bc <HAL_RCC_OscConfig+0x9c>
 80086a2:	4b7f      	ldr	r3, [pc, #508]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a7e      	ldr	r2, [pc, #504]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	4b7c      	ldr	r3, [pc, #496]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a7b      	ldr	r2, [pc, #492]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	e01d      	b.n	80086f8 <HAL_RCC_OscConfig+0xd8>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086c4:	d10c      	bne.n	80086e0 <HAL_RCC_OscConfig+0xc0>
 80086c6:	4b76      	ldr	r3, [pc, #472]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a75      	ldr	r2, [pc, #468]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	4b73      	ldr	r3, [pc, #460]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a72      	ldr	r2, [pc, #456]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	e00b      	b.n	80086f8 <HAL_RCC_OscConfig+0xd8>
 80086e0:	4b6f      	ldr	r3, [pc, #444]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a6e      	ldr	r2, [pc, #440]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	4b6c      	ldr	r3, [pc, #432]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a6b      	ldr	r2, [pc, #428]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80086f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d013      	beq.n	8008728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008700:	f7fe f840 	bl	8006784 <HAL_GetTick>
 8008704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008708:	f7fe f83c 	bl	8006784 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b64      	cmp	r3, #100	; 0x64
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e229      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800871a:	4b61      	ldr	r3, [pc, #388]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0f0      	beq.n	8008708 <HAL_RCC_OscConfig+0xe8>
 8008726:	e014      	b.n	8008752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008728:	f7fe f82c 	bl	8006784 <HAL_GetTick>
 800872c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008730:	f7fe f828 	bl	8006784 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b64      	cmp	r3, #100	; 0x64
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e215      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008742:	4b57      	ldr	r3, [pc, #348]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1f0      	bne.n	8008730 <HAL_RCC_OscConfig+0x110>
 800874e:	e000      	b.n	8008752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d069      	beq.n	8008832 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800875e:	4b50      	ldr	r3, [pc, #320]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 030c 	and.w	r3, r3, #12
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800876a:	4b4d      	ldr	r3, [pc, #308]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 030c 	and.w	r3, r3, #12
 8008772:	2b08      	cmp	r3, #8
 8008774:	d11c      	bne.n	80087b0 <HAL_RCC_OscConfig+0x190>
 8008776:	4b4a      	ldr	r3, [pc, #296]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d116      	bne.n	80087b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008782:	4b47      	ldr	r3, [pc, #284]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <HAL_RCC_OscConfig+0x17a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d001      	beq.n	800879a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e1e9      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800879a:	4b41      	ldr	r3, [pc, #260]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	493d      	ldr	r1, [pc, #244]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087ae:	e040      	b.n	8008832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d023      	beq.n	8008800 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087b8:	4b39      	ldr	r3, [pc, #228]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a38      	ldr	r2, [pc, #224]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80087be:	f043 0301 	orr.w	r3, r3, #1
 80087c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c4:	f7fd ffde 	bl	8006784 <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087cc:	f7fd ffda 	bl	8006784 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e1c7      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087de:	4b30      	ldr	r3, [pc, #192]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f0      	beq.n	80087cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ea:	4b2d      	ldr	r3, [pc, #180]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	4929      	ldr	r1, [pc, #164]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	600b      	str	r3, [r1, #0]
 80087fe:	e018      	b.n	8008832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008806:	f023 0301 	bic.w	r3, r3, #1
 800880a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7fd ffba 	bl	8006784 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008814:	f7fd ffb6 	bl	8006784 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e1a3      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008826:	4b1e      	ldr	r3, [pc, #120]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f0      	bne.n	8008814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d038      	beq.n	80088b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d019      	beq.n	800887a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008846:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884a:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800884c:	f043 0301 	orr.w	r3, r3, #1
 8008850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008852:	f7fd ff97 	bl	8006784 <HAL_GetTick>
 8008856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008858:	e008      	b.n	800886c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800885a:	f7fd ff93 	bl	8006784 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e180      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800886e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0f0      	beq.n	800885a <HAL_RCC_OscConfig+0x23a>
 8008878:	e01a      	b.n	80088b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800887a:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 800887c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887e:	4a08      	ldr	r2, [pc, #32]	; (80088a0 <HAL_RCC_OscConfig+0x280>)
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008886:	f7fd ff7d 	bl	8006784 <HAL_GetTick>
 800888a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800888c:	e00a      	b.n	80088a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800888e:	f7fd ff79 	bl	8006784 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d903      	bls.n	80088a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e166      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
 80088a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088a4:	4b92      	ldr	r3, [pc, #584]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80088a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1ee      	bne.n	800888e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80a4 	beq.w	8008a06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088be:	4b8c      	ldr	r3, [pc, #560]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10d      	bne.n	80088e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ca:	4b89      	ldr	r3, [pc, #548]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	4a88      	ldr	r2, [pc, #544]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80088d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d4:	6413      	str	r3, [r2, #64]	; 0x40
 80088d6:	4b86      	ldr	r3, [pc, #536]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088e6:	4b83      	ldr	r3, [pc, #524]	; (8008af4 <HAL_RCC_OscConfig+0x4d4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d118      	bne.n	8008924 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80088f2:	4b80      	ldr	r3, [pc, #512]	; (8008af4 <HAL_RCC_OscConfig+0x4d4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a7f      	ldr	r2, [pc, #508]	; (8008af4 <HAL_RCC_OscConfig+0x4d4>)
 80088f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088fe:	f7fd ff41 	bl	8006784 <HAL_GetTick>
 8008902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008904:	e008      	b.n	8008918 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008906:	f7fd ff3d 	bl	8006784 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b64      	cmp	r3, #100	; 0x64
 8008912:	d901      	bls.n	8008918 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e12a      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008918:	4b76      	ldr	r3, [pc, #472]	; (8008af4 <HAL_RCC_OscConfig+0x4d4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0f0      	beq.n	8008906 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d106      	bne.n	800893a <HAL_RCC_OscConfig+0x31a>
 800892c:	4b70      	ldr	r3, [pc, #448]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	4a6f      	ldr	r2, [pc, #444]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	6713      	str	r3, [r2, #112]	; 0x70
 8008938:	e02d      	b.n	8008996 <HAL_RCC_OscConfig+0x376>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10c      	bne.n	800895c <HAL_RCC_OscConfig+0x33c>
 8008942:	4b6b      	ldr	r3, [pc, #428]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	4a6a      	ldr	r2, [pc, #424]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008948:	f023 0301 	bic.w	r3, r3, #1
 800894c:	6713      	str	r3, [r2, #112]	; 0x70
 800894e:	4b68      	ldr	r3, [pc, #416]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	4a67      	ldr	r2, [pc, #412]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008954:	f023 0304 	bic.w	r3, r3, #4
 8008958:	6713      	str	r3, [r2, #112]	; 0x70
 800895a:	e01c      	b.n	8008996 <HAL_RCC_OscConfig+0x376>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b05      	cmp	r3, #5
 8008962:	d10c      	bne.n	800897e <HAL_RCC_OscConfig+0x35e>
 8008964:	4b62      	ldr	r3, [pc, #392]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008968:	4a61      	ldr	r2, [pc, #388]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 800896a:	f043 0304 	orr.w	r3, r3, #4
 800896e:	6713      	str	r3, [r2, #112]	; 0x70
 8008970:	4b5f      	ldr	r3, [pc, #380]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008974:	4a5e      	ldr	r2, [pc, #376]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	6713      	str	r3, [r2, #112]	; 0x70
 800897c:	e00b      	b.n	8008996 <HAL_RCC_OscConfig+0x376>
 800897e:	4b5c      	ldr	r3, [pc, #368]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008982:	4a5b      	ldr	r2, [pc, #364]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008984:	f023 0301 	bic.w	r3, r3, #1
 8008988:	6713      	str	r3, [r2, #112]	; 0x70
 800898a:	4b59      	ldr	r3, [pc, #356]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898e:	4a58      	ldr	r2, [pc, #352]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008990:	f023 0304 	bic.w	r3, r3, #4
 8008994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d015      	beq.n	80089ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800899e:	f7fd fef1 	bl	8006784 <HAL_GetTick>
 80089a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089a4:	e00a      	b.n	80089bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089a6:	f7fd feed 	bl	8006784 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e0d8      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089bc:	4b4c      	ldr	r3, [pc, #304]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0ee      	beq.n	80089a6 <HAL_RCC_OscConfig+0x386>
 80089c8:	e014      	b.n	80089f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ca:	f7fd fedb 	bl	8006784 <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089d0:	e00a      	b.n	80089e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d2:	f7fd fed7 	bl	8006784 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e0c2      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089e8:	4b41      	ldr	r3, [pc, #260]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80089ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1ee      	bne.n	80089d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d105      	bne.n	8008a06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089fa:	4b3d      	ldr	r3, [pc, #244]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	4a3c      	ldr	r2, [pc, #240]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 80ae 	beq.w	8008b6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a10:	4b37      	ldr	r3, [pc, #220]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 030c 	and.w	r3, r3, #12
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d06d      	beq.n	8008af8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d14b      	bne.n	8008abc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a24:	4b32      	ldr	r3, [pc, #200]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a31      	ldr	r2, [pc, #196]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a30:	f7fd fea8 	bl	8006784 <HAL_GetTick>
 8008a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a36:	e008      	b.n	8008a4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a38:	f7fd fea4 	bl	8006784 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e091      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a4a:	4b29      	ldr	r3, [pc, #164]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1f0      	bne.n	8008a38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	69da      	ldr	r2, [r3, #28]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	019b      	lsls	r3, r3, #6
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	041b      	lsls	r3, r3, #16
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	061b      	lsls	r3, r3, #24
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	071b      	lsls	r3, r3, #28
 8008a82:	491b      	ldr	r1, [pc, #108]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a88:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a94:	f7fd fe76 	bl	8006784 <HAL_GetTick>
 8008a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a9c:	f7fd fe72 	bl	8006784 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e05f      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aae:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f0      	beq.n	8008a9c <HAL_RCC_OscConfig+0x47c>
 8008aba:	e057      	b.n	8008b6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008abc:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a0b      	ldr	r2, [pc, #44]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac8:	f7fd fe5c 	bl	8006784 <HAL_GetTick>
 8008acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ad0:	f7fd fe58 	bl	8006784 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e045      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ae2:	4b03      	ldr	r3, [pc, #12]	; (8008af0 <HAL_RCC_OscConfig+0x4d0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f0      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x4b0>
 8008aee:	e03d      	b.n	8008b6c <HAL_RCC_OscConfig+0x54c>
 8008af0:	40023800 	.word	0x40023800
 8008af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008af8:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <HAL_RCC_OscConfig+0x558>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d030      	beq.n	8008b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d129      	bne.n	8008b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d122      	bne.n	8008b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b28:	4013      	ands	r3, r2
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d119      	bne.n	8008b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	3b01      	subs	r3, #1
 8008b42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d10f      	bne.n	8008b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d107      	bne.n	8008b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d001      	beq.n	8008b6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e000      	b.n	8008b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40023800 	.word	0x40023800

08008b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e0d0      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b94:	4b6a      	ldr	r3, [pc, #424]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d910      	bls.n	8008bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba2:	4b67      	ldr	r3, [pc, #412]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f023 020f 	bic.w	r2, r3, #15
 8008baa:	4965      	ldr	r1, [pc, #404]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb2:	4b63      	ldr	r3, [pc, #396]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0b8      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bdc:	4b59      	ldr	r3, [pc, #356]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	4a58      	ldr	r2, [pc, #352]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008be6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bf4:	4b53      	ldr	r3, [pc, #332]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	4a52      	ldr	r2, [pc, #328]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c00:	4b50      	ldr	r3, [pc, #320]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	494d      	ldr	r1, [pc, #308]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d040      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d107      	bne.n	8008c36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c26:	4b47      	ldr	r3, [pc, #284]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d115      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e07f      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d107      	bne.n	8008c4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c3e:	4b41      	ldr	r3, [pc, #260]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e073      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c4e:	4b3d      	ldr	r3, [pc, #244]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e06b      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f023 0203 	bic.w	r2, r3, #3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4936      	ldr	r1, [pc, #216]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c70:	f7fd fd88 	bl	8006784 <HAL_GetTick>
 8008c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c76:	e00a      	b.n	8008c8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c78:	f7fd fd84 	bl	8006784 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e053      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c8e:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 020c 	and.w	r2, r3, #12
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d1eb      	bne.n	8008c78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d210      	bcs.n	8008cd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cae:	4b24      	ldr	r3, [pc, #144]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f023 020f 	bic.w	r2, r3, #15
 8008cb6:	4922      	ldr	r1, [pc, #136]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbe:	4b20      	ldr	r3, [pc, #128]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e032      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cdc:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4916      	ldr	r1, [pc, #88]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0308 	and.w	r3, r3, #8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008cfa:	4b12      	ldr	r3, [pc, #72]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	490e      	ldr	r1, [pc, #56]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d0e:	f000 f821 	bl	8008d54 <HAL_RCC_GetSysClockFreq>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	091b      	lsrs	r3, r3, #4
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	490a      	ldr	r1, [pc, #40]	; (8008d48 <HAL_RCC_ClockConfig+0x1cc>)
 8008d20:	5ccb      	ldrb	r3, [r1, r3]
 8008d22:	fa22 f303 	lsr.w	r3, r2, r3
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <HAL_RCC_ClockConfig+0x1d0>)
 8008d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <HAL_RCC_ClockConfig+0x1d4>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fd fce4 	bl	80066fc <HAL_InitTick>

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	40023c00 	.word	0x40023c00
 8008d44:	40023800 	.word	0x40023800
 8008d48:	0800ece0 	.word	0x0800ece0
 8008d4c:	200000cc 	.word	0x200000cc
 8008d50:	200000d4 	.word	0x200000d4

08008d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	607b      	str	r3, [r7, #4]
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	2300      	movs	r3, #0
 8008d66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d6c:	4b67      	ldr	r3, [pc, #412]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f003 030c 	and.w	r3, r3, #12
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d00d      	beq.n	8008d94 <HAL_RCC_GetSysClockFreq+0x40>
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	f200 80bd 	bhi.w	8008ef8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0x34>
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d003      	beq.n	8008d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d86:	e0b7      	b.n	8008ef8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d88:	4b61      	ldr	r3, [pc, #388]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008d8a:	60bb      	str	r3, [r7, #8]
      break;
 8008d8c:	e0b7      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d8e:	4b61      	ldr	r3, [pc, #388]	; (8008f14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008d90:	60bb      	str	r3, [r7, #8]
      break;
 8008d92:	e0b4      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d94:	4b5d      	ldr	r3, [pc, #372]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d9c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008d9e:	4b5b      	ldr	r3, [pc, #364]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d04d      	beq.n	8008e46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008daa:	4b58      	ldr	r3, [pc, #352]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	099b      	lsrs	r3, r3, #6
 8008db0:	461a      	mov	r2, r3
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008dba:	f04f 0100 	mov.w	r1, #0
 8008dbe:	ea02 0800 	and.w	r8, r2, r0
 8008dc2:	ea03 0901 	and.w	r9, r3, r1
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	4649      	mov	r1, r9
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	014b      	lsls	r3, r1, #5
 8008dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008dd8:	0142      	lsls	r2, r0, #5
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	ebb0 0008 	subs.w	r0, r0, r8
 8008de2:	eb61 0109 	sbc.w	r1, r1, r9
 8008de6:	f04f 0200 	mov.w	r2, #0
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	018b      	lsls	r3, r1, #6
 8008df0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008df4:	0182      	lsls	r2, r0, #6
 8008df6:	1a12      	subs	r2, r2, r0
 8008df8:	eb63 0301 	sbc.w	r3, r3, r1
 8008dfc:	f04f 0000 	mov.w	r0, #0
 8008e00:	f04f 0100 	mov.w	r1, #0
 8008e04:	00d9      	lsls	r1, r3, #3
 8008e06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e0a:	00d0      	lsls	r0, r2, #3
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	eb12 0208 	adds.w	r2, r2, r8
 8008e14:	eb43 0309 	adc.w	r3, r3, r9
 8008e18:	f04f 0000 	mov.w	r0, #0
 8008e1c:	f04f 0100 	mov.w	r1, #0
 8008e20:	0259      	lsls	r1, r3, #9
 8008e22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008e26:	0250      	lsls	r0, r2, #9
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4619      	mov	r1, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	f7f7 fa5a 	bl	80002f0 <__aeabi_uldivmod>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4613      	mov	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e04a      	b.n	8008edc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e46:	4b31      	ldr	r3, [pc, #196]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	099b      	lsrs	r3, r3, #6
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008e56:	f04f 0100 	mov.w	r1, #0
 8008e5a:	ea02 0400 	and.w	r4, r2, r0
 8008e5e:	ea03 0501 	and.w	r5, r3, r1
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	f04f 0200 	mov.w	r2, #0
 8008e6a:	f04f 0300 	mov.w	r3, #0
 8008e6e:	014b      	lsls	r3, r1, #5
 8008e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008e74:	0142      	lsls	r2, r0, #5
 8008e76:	4610      	mov	r0, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	1b00      	subs	r0, r0, r4
 8008e7c:	eb61 0105 	sbc.w	r1, r1, r5
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	018b      	lsls	r3, r1, #6
 8008e8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008e8e:	0182      	lsls	r2, r0, #6
 8008e90:	1a12      	subs	r2, r2, r0
 8008e92:	eb63 0301 	sbc.w	r3, r3, r1
 8008e96:	f04f 0000 	mov.w	r0, #0
 8008e9a:	f04f 0100 	mov.w	r1, #0
 8008e9e:	00d9      	lsls	r1, r3, #3
 8008ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ea4:	00d0      	lsls	r0, r2, #3
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	1912      	adds	r2, r2, r4
 8008eac:	eb45 0303 	adc.w	r3, r5, r3
 8008eb0:	f04f 0000 	mov.w	r0, #0
 8008eb4:	f04f 0100 	mov.w	r1, #0
 8008eb8:	0299      	lsls	r1, r3, #10
 8008eba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008ebe:	0290      	lsls	r0, r2, #10
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	f7f7 fa0e 	bl	80002f0 <__aeabi_uldivmod>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4613      	mov	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008edc:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	0c1b      	lsrs	r3, r3, #16
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef4:	60bb      	str	r3, [r7, #8]
      break;
 8008ef6:	e002      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008efa:	60bb      	str	r3, [r7, #8]
      break;
 8008efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008efe:	68bb      	ldr	r3, [r7, #8]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40023800 	.word	0x40023800
 8008f10:	00f42400 	.word	0x00f42400
 8008f14:	007a1200 	.word	0x007a1200

08008f18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f1c:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	200000cc 	.word	0x200000cc

08008f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f34:	f7ff fff0 	bl	8008f18 <HAL_RCC_GetHCLKFreq>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	0a9b      	lsrs	r3, r3, #10
 8008f40:	f003 0307 	and.w	r3, r3, #7
 8008f44:	4903      	ldr	r1, [pc, #12]	; (8008f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f46:	5ccb      	ldrb	r3, [r1, r3]
 8008f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40023800 	.word	0x40023800
 8008f54:	0800ecf0 	.word	0x0800ecf0

08008f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f5c:	f7ff ffdc 	bl	8008f18 <HAL_RCC_GetHCLKFreq>
 8008f60:	4602      	mov	r2, r0
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	0b5b      	lsrs	r3, r3, #13
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	4903      	ldr	r1, [pc, #12]	; (8008f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f6e:	5ccb      	ldrb	r3, [r1, r3]
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	40023800 	.word	0x40023800
 8008f7c:	0800ecf0 	.word	0x0800ecf0

08008f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d012      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fa8:	4b69      	ldr	r3, [pc, #420]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	4a68      	ldr	r2, [pc, #416]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008fb2:	6093      	str	r3, [r2, #8]
 8008fb4:	4b66      	ldr	r3, [pc, #408]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbc:	4964      	ldr	r1, [pc, #400]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d017      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fda:	4b5d      	ldr	r3, [pc, #372]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe8:	4959      	ldr	r1, [pc, #356]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ff8:	d101      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009006:	2301      	movs	r3, #1
 8009008:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d017      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009016:	4b4e      	ldr	r3, [pc, #312]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	494a      	ldr	r1, [pc, #296]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009026:	4313      	orrs	r3, r2
 8009028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009034:	d101      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009036:	2301      	movs	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009042:	2301      	movs	r3, #1
 8009044:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 808b 	beq.w	800917a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009064:	4b3a      	ldr	r3, [pc, #232]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009068:	4a39      	ldr	r2, [pc, #228]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800906a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800906e:	6413      	str	r3, [r2, #64]	; 0x40
 8009070:	4b37      	ldr	r3, [pc, #220]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009078:	60bb      	str	r3, [r7, #8]
 800907a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800907c:	4b35      	ldr	r3, [pc, #212]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a34      	ldr	r2, [pc, #208]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009088:	f7fd fb7c 	bl	8006784 <HAL_GetTick>
 800908c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800908e:	e008      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009090:	f7fd fb78 	bl	8006784 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	2b64      	cmp	r3, #100	; 0x64
 800909c:	d901      	bls.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e38f      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090a2:	4b2c      	ldr	r3, [pc, #176]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0f0      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80090ae:	4b28      	ldr	r3, [pc, #160]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d035      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d02e      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80090d6:	4b1e      	ldr	r3, [pc, #120]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090e2:	4b1b      	ldr	r3, [pc, #108]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e6:	4a1a      	ldr	r2, [pc, #104]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80090ee:	4a18      	ldr	r2, [pc, #96]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80090f4:	4b16      	ldr	r3, [pc, #88]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d114      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009100:	f7fd fb40 	bl	8006784 <HAL_GetTick>
 8009104:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009106:	e00a      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009108:	f7fd fb3c 	bl	8006784 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f241 3288 	movw	r2, #5000	; 0x1388
 8009116:	4293      	cmp	r3, r2
 8009118:	d901      	bls.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e351      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800911e:	4b0c      	ldr	r3, [pc, #48]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0ee      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009136:	d111      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009144:	4b04      	ldr	r3, [pc, #16]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009146:	400b      	ands	r3, r1
 8009148:	4901      	ldr	r1, [pc, #4]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800914a:	4313      	orrs	r3, r2
 800914c:	608b      	str	r3, [r1, #8]
 800914e:	e00b      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009150:	40023800 	.word	0x40023800
 8009154:	40007000 	.word	0x40007000
 8009158:	0ffffcff 	.word	0x0ffffcff
 800915c:	4bb3      	ldr	r3, [pc, #716]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	4ab2      	ldr	r2, [pc, #712]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009162:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009166:	6093      	str	r3, [r2, #8]
 8009168:	4bb0      	ldr	r3, [pc, #704]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800916a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009174:	49ad      	ldr	r1, [pc, #692]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009176:	4313      	orrs	r3, r2
 8009178:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b00      	cmp	r3, #0
 8009184:	d010      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009186:	4ba9      	ldr	r3, [pc, #676]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918c:	4aa7      	ldr	r2, [pc, #668]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800918e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009192:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009196:	4ba5      	ldr	r3, [pc, #660]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009198:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	49a2      	ldr	r1, [pc, #648]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091b4:	4b9d      	ldr	r3, [pc, #628]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091c2:	499a      	ldr	r1, [pc, #616]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091d6:	4b95      	ldr	r3, [pc, #596]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091e4:	4991      	ldr	r1, [pc, #580]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091f8:	4b8c      	ldr	r3, [pc, #560]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009206:	4989      	ldr	r1, [pc, #548]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009208:	4313      	orrs	r3, r2
 800920a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800921a:	4b84      	ldr	r3, [pc, #528]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800921c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009220:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009228:	4980      	ldr	r1, [pc, #512]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800922a:	4313      	orrs	r3, r2
 800922c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800923c:	4b7b      	ldr	r3, [pc, #492]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800923e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009242:	f023 0203 	bic.w	r2, r3, #3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924a:	4978      	ldr	r1, [pc, #480]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800924c:	4313      	orrs	r3, r2
 800924e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800925e:	4b73      	ldr	r3, [pc, #460]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009264:	f023 020c 	bic.w	r2, r3, #12
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800926c:	496f      	ldr	r1, [pc, #444]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009280:	4b6a      	ldr	r3, [pc, #424]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009286:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928e:	4967      	ldr	r1, [pc, #412]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009290:	4313      	orrs	r3, r2
 8009292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092a2:	4b62      	ldr	r3, [pc, #392]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b0:	495e      	ldr	r1, [pc, #376]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092c4:	4b59      	ldr	r3, [pc, #356]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d2:	4956      	ldr	r1, [pc, #344]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80092e6:	4b51      	ldr	r3, [pc, #324]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	494d      	ldr	r1, [pc, #308]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009308:	4b48      	ldr	r3, [pc, #288]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800930a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800930e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009316:	4945      	ldr	r1, [pc, #276]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800932a:	4b40      	ldr	r3, [pc, #256]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009330:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009338:	493c      	ldr	r1, [pc, #240]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800934c:	4b37      	ldr	r3, [pc, #220]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009352:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800935a:	4934      	ldr	r1, [pc, #208]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800936e:	4b2f      	ldr	r3, [pc, #188]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009374:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937c:	492b      	ldr	r1, [pc, #172]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800938c:	d101      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800938e:	2301      	movs	r3, #1
 8009390:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800939e:	2301      	movs	r3, #1
 80093a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093ae:	4b1f      	ldr	r3, [pc, #124]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093bc:	491b      	ldr	r1, [pc, #108]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80093d0:	4b16      	ldr	r3, [pc, #88]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093e0:	4912      	ldr	r1, [pc, #72]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80093f4:	4b0d      	ldr	r3, [pc, #52]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009404:	4909      	ldr	r1, [pc, #36]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00f      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009418:	4b04      	ldr	r3, [pc, #16]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800941a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800941e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009428:	e002      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800942a:	bf00      	nop
 800942c:	40023800 	.word	0x40023800
 8009430:	4986      	ldr	r1, [pc, #536]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009432:	4313      	orrs	r3, r2
 8009434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00b      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009444:	4b81      	ldr	r3, [pc, #516]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800944a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009454:	497d      	ldr	r1, [pc, #500]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009456:	4313      	orrs	r3, r2
 8009458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d006      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 80d6 	beq.w	800961c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009470:	4b76      	ldr	r3, [pc, #472]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a75      	ldr	r2, [pc, #468]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800947a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800947c:	f7fd f982 	bl	8006784 <HAL_GetTick>
 8009480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009482:	e008      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009484:	f7fd f97e 	bl	8006784 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b64      	cmp	r3, #100	; 0x64
 8009490:	d901      	bls.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e195      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009496:	4b6d      	ldr	r3, [pc, #436]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f0      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d021      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d11d      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80094b6:	4b65      	ldr	r3, [pc, #404]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094bc:	0c1b      	lsrs	r3, r3, #16
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80094c4:	4b61      	ldr	r3, [pc, #388]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ca:	0e1b      	lsrs	r3, r3, #24
 80094cc:	f003 030f 	and.w	r3, r3, #15
 80094d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	019a      	lsls	r2, r3, #6
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	431a      	orrs	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	061b      	lsls	r3, r3, #24
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	071b      	lsls	r3, r3, #28
 80094ea:	4958      	ldr	r1, [pc, #352]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009506:	d00a      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009510:	2b00      	cmp	r3, #0
 8009512:	d02e      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800951c:	d129      	bne.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800951e:	4b4b      	ldr	r3, [pc, #300]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800952c:	4b47      	ldr	r3, [pc, #284]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800952e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009532:	0f1b      	lsrs	r3, r3, #28
 8009534:	f003 0307 	and.w	r3, r3, #7
 8009538:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	019a      	lsls	r2, r3, #6
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	041b      	lsls	r3, r3, #16
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	061b      	lsls	r3, r3, #24
 800954c:	431a      	orrs	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	071b      	lsls	r3, r3, #28
 8009552:	493e      	ldr	r1, [pc, #248]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009554:	4313      	orrs	r3, r2
 8009556:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800955a:	4b3c      	ldr	r3, [pc, #240]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800955c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009560:	f023 021f 	bic.w	r2, r3, #31
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	3b01      	subs	r3, #1
 800956a:	4938      	ldr	r1, [pc, #224]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800956c:	4313      	orrs	r3, r2
 800956e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d01d      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800957e:	4b33      	ldr	r3, [pc, #204]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009584:	0e1b      	lsrs	r3, r3, #24
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800958c:	4b2f      	ldr	r3, [pc, #188]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800958e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009592:	0f1b      	lsrs	r3, r3, #28
 8009594:	f003 0307 	and.w	r3, r3, #7
 8009598:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	019a      	lsls	r2, r3, #6
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	041b      	lsls	r3, r3, #16
 80095a6:	431a      	orrs	r2, r3
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	061b      	lsls	r3, r3, #24
 80095ac:	431a      	orrs	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	071b      	lsls	r3, r3, #28
 80095b2:	4926      	ldr	r1, [pc, #152]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d011      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	019a      	lsls	r2, r3, #6
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	041b      	lsls	r3, r3, #16
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	061b      	lsls	r3, r3, #24
 80095da:	431a      	orrs	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	071b      	lsls	r3, r3, #28
 80095e2:	491a      	ldr	r1, [pc, #104]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80095ea:	4b18      	ldr	r3, [pc, #96]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a17      	ldr	r2, [pc, #92]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095f6:	f7fd f8c5 	bl	8006784 <HAL_GetTick>
 80095fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80095fc:	e008      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80095fe:	f7fd f8c1 	bl	8006784 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b64      	cmp	r3, #100	; 0x64
 800960a:	d901      	bls.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e0d8      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009610:	4b0e      	ldr	r3, [pc, #56]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0f0      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	2b01      	cmp	r3, #1
 8009620:	f040 80ce 	bne.w	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009624:	4b09      	ldr	r3, [pc, #36]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a08      	ldr	r2, [pc, #32]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800962a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800962e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009630:	f7fd f8a8 	bl	8006784 <HAL_GetTick>
 8009634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009636:	e00b      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009638:	f7fd f8a4 	bl	8006784 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	2b64      	cmp	r3, #100	; 0x64
 8009644:	d904      	bls.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e0bb      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800964a:	bf00      	nop
 800964c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009650:	4b5e      	ldr	r3, [pc, #376]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800965c:	d0ec      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800967a:	2b00      	cmp	r3, #0
 800967c:	d02e      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	d12a      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009686:	4b51      	ldr	r3, [pc, #324]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009694:	4b4d      	ldr	r3, [pc, #308]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969a:	0f1b      	lsrs	r3, r3, #28
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	019a      	lsls	r2, r3, #6
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	041b      	lsls	r3, r3, #16
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	061b      	lsls	r3, r3, #24
 80096b4:	431a      	orrs	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	071b      	lsls	r3, r3, #28
 80096ba:	4944      	ldr	r1, [pc, #272]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80096c2:	4b42      	ldr	r3, [pc, #264]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	3b01      	subs	r3, #1
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	493d      	ldr	r1, [pc, #244]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d022      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096f0:	d11d      	bne.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80096f2:	4b36      	ldr	r3, [pc, #216]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f8:	0e1b      	lsrs	r3, r3, #24
 80096fa:	f003 030f 	and.w	r3, r3, #15
 80096fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009700:	4b32      	ldr	r3, [pc, #200]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009706:	0f1b      	lsrs	r3, r3, #28
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	019a      	lsls	r2, r3, #6
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	431a      	orrs	r2, r3
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	061b      	lsls	r3, r3, #24
 8009720:	431a      	orrs	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	071b      	lsls	r3, r3, #28
 8009726:	4929      	ldr	r1, [pc, #164]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009728:	4313      	orrs	r3, r2
 800972a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d028      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800973a:	4b24      	ldr	r3, [pc, #144]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800973c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009740:	0e1b      	lsrs	r3, r3, #24
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009748:	4b20      	ldr	r3, [pc, #128]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800974a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974e:	0c1b      	lsrs	r3, r3, #16
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	019a      	lsls	r2, r3, #6
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	041b      	lsls	r3, r3, #16
 8009760:	431a      	orrs	r2, r3
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	061b      	lsls	r3, r3, #24
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	071b      	lsls	r3, r3, #28
 800976e:	4917      	ldr	r1, [pc, #92]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009770:	4313      	orrs	r3, r2
 8009772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009776:	4b15      	ldr	r3, [pc, #84]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800977c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	4911      	ldr	r1, [pc, #68]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009786:	4313      	orrs	r3, r2
 8009788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800978c:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a0e      	ldr	r2, [pc, #56]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009798:	f7fc fff4 	bl	8006784 <HAL_GetTick>
 800979c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800979e:	e008      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80097a0:	f7fc fff0 	bl	8006784 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b64      	cmp	r3, #100	; 0x64
 80097ac:	d901      	bls.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e007      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097b2:	4b06      	ldr	r3, [pc, #24]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097be:	d1ef      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40023800 	.word	0x40023800

080097d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e01c      	b.n	800981c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	795b      	ldrb	r3, [r3, #5]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7fb fabc 	bl	8004d70 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0204 	orr.w	r2, r2, #4
 800980c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e09d      	b.n	8009972 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	2b00      	cmp	r3, #0
 800983c:	d108      	bne.n	8009850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009846:	d009      	beq.n	800985c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	61da      	str	r2, [r3, #28]
 800984e:	e005      	b.n	800985c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d106      	bne.n	800987c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fb fad8 	bl	8004e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2202      	movs	r2, #2
 8009880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009892:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800989c:	d902      	bls.n	80098a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	e002      	b.n	80098aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80098b2:	d007      	beq.n	80098c4 <HAL_SPI_Init+0xa0>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098bc:	d002      	beq.n	80098c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80098d4:	431a      	orrs	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f003 0302 	and.w	r3, r3, #2
 80098de:	431a      	orrs	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098f2:	431a      	orrs	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098fc:	431a      	orrs	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009906:	ea42 0103 	orr.w	r1, r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	0c1b      	lsrs	r3, r3, #16
 8009920:	f003 0204 	and.w	r2, r3, #4
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	f003 0310 	and.w	r3, r3, #16
 800992c:	431a      	orrs	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009932:	f003 0308 	and.w	r3, r3, #8
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009940:	ea42 0103 	orr.w	r1, r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009960:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b088      	sub	sp, #32
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	603b      	str	r3, [r7, #0]
 8009986:	4613      	mov	r3, r2
 8009988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009994:	2b01      	cmp	r3, #1
 8009996:	d101      	bne.n	800999c <HAL_SPI_Transmit+0x22>
 8009998:	2302      	movs	r3, #2
 800999a:	e158      	b.n	8009c4e <HAL_SPI_Transmit+0x2d4>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099a4:	f7fc feee 	bl	8006784 <HAL_GetTick>
 80099a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d002      	beq.n	80099c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80099ba:	2302      	movs	r3, #2
 80099bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099be:	e13d      	b.n	8009c3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <HAL_SPI_Transmit+0x52>
 80099c6:	88fb      	ldrh	r3, [r7, #6]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d102      	bne.n	80099d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099d0:	e134      	b.n	8009c3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2203      	movs	r2, #3
 80099d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	88fa      	ldrh	r2, [r7, #6]
 80099ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	88fa      	ldrh	r2, [r7, #6]
 80099f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a1c:	d10f      	bne.n	8009a3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a48:	2b40      	cmp	r3, #64	; 0x40
 8009a4a:	d007      	beq.n	8009a5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a64:	d94b      	bls.n	8009afe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <HAL_SPI_Transmit+0xfa>
 8009a6e:	8afb      	ldrh	r3, [r7, #22]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d13e      	bne.n	8009af2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	881a      	ldrh	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	1c9a      	adds	r2, r3, #2
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009a98:	e02b      	b.n	8009af2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d112      	bne.n	8009ace <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	881a      	ldrh	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab8:	1c9a      	adds	r2, r3, #2
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009acc:	e011      	b.n	8009af2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ace:	f7fc fe59 	bl	8006784 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d803      	bhi.n	8009ae6 <HAL_SPI_Transmit+0x16c>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d102      	bne.n	8009aec <HAL_SPI_Transmit+0x172>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009af0:	e0a4      	b.n	8009c3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1ce      	bne.n	8009a9a <HAL_SPI_Transmit+0x120>
 8009afc:	e07c      	b.n	8009bf8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <HAL_SPI_Transmit+0x192>
 8009b06:	8afb      	ldrh	r3, [r7, #22]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d170      	bne.n	8009bee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d912      	bls.n	8009b3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	881a      	ldrh	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	1c9a      	adds	r2, r3, #2
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b02      	subs	r3, #2
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b3a:	e058      	b.n	8009bee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	330c      	adds	r3, #12
 8009b46:	7812      	ldrb	r2, [r2, #0]
 8009b48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009b62:	e044      	b.n	8009bee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d12b      	bne.n	8009bca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d912      	bls.n	8009ba2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	881a      	ldrh	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8c:	1c9a      	adds	r2, r3, #2
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	3b02      	subs	r3, #2
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ba0:	e025      	b.n	8009bee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	330c      	adds	r3, #12
 8009bac:	7812      	ldrb	r2, [r2, #0]
 8009bae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bc8:	e011      	b.n	8009bee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bca:	f7fc fddb 	bl	8006784 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d803      	bhi.n	8009be2 <HAL_SPI_Transmit+0x268>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be0:	d102      	bne.n	8009be8 <HAL_SPI_Transmit+0x26e>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009bec:	e026      	b.n	8009c3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1b5      	bne.n	8009b64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f945 	bl	8009e8c <SPI_EndRxTxTransaction>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	613b      	str	r3, [r7, #16]
 8009c2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	77fb      	strb	r3, [r7, #31]
 8009c38:	e000      	b.n	8009c3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	4613      	mov	r3, r2
 8009c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009c68:	f7fc fd8c 	bl	8006784 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	1a9b      	subs	r3, r3, r2
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4413      	add	r3, r2
 8009c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c78:	f7fc fd84 	bl	8006784 <HAL_GetTick>
 8009c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c7e:	4b39      	ldr	r3, [pc, #228]	; (8009d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	015b      	lsls	r3, r3, #5
 8009c84:	0d1b      	lsrs	r3, r3, #20
 8009c86:	69fa      	ldr	r2, [r7, #28]
 8009c88:	fb02 f303 	mul.w	r3, r2, r3
 8009c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c8e:	e054      	b.n	8009d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d050      	beq.n	8009d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c98:	f7fc fd74 	bl	8006784 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	69fa      	ldr	r2, [r7, #28]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d902      	bls.n	8009cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d13d      	bne.n	8009d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cc6:	d111      	bne.n	8009cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd0:	d004      	beq.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cda:	d107      	bne.n	8009cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf4:	d10f      	bne.n	8009d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e017      	b.n	8009d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4013      	ands	r3, r2
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	bf0c      	ite	eq
 8009d4a:	2301      	moveq	r3, #1
 8009d4c:	2300      	movne	r3, #0
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	461a      	mov	r2, r3
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d19b      	bne.n	8009c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3720      	adds	r7, #32
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	200000cc 	.word	0x200000cc

08009d68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009d76:	f7fc fd05 	bl	8006784 <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	4413      	add	r3, r2
 8009d84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d86:	f7fc fcfd 	bl	8006784 <HAL_GetTick>
 8009d8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d8c:	4b3e      	ldr	r3, [pc, #248]	; (8009e88 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	00da      	lsls	r2, r3, #3
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	0d1b      	lsrs	r3, r3, #20
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	fb02 f303 	mul.w	r3, r2, r3
 8009da2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8009da4:	e062      	b.n	8009e6c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009dac:	d109      	bne.n	8009dc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d106      	bne.n	8009dc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	330c      	adds	r3, #12
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8009dc0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d050      	beq.n	8009e6c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009dca:	f7fc fcdb 	bl	8006784 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d902      	bls.n	8009de0 <SPI_WaitFifoStateUntilTimeout+0x78>
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d13d      	bne.n	8009e5c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009dee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009df8:	d111      	bne.n	8009e1e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e02:	d004      	beq.n	8009e0e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e0c:	d107      	bne.n	8009e1e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e26:	d10f      	bne.n	8009e48 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e010      	b.n	8009e7e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689a      	ldr	r2, [r3, #8]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4013      	ands	r3, r2
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d194      	bne.n	8009da6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3720      	adds	r7, #32
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	200000cc 	.word	0x200000cc

08009e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff ff5f 	bl	8009d68 <SPI_WaitFifoStateUntilTimeout>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d007      	beq.n	8009ec0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eb4:	f043 0220 	orr.w	r2, r3, #32
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e027      	b.n	8009f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2180      	movs	r1, #128	; 0x80
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff fec4 	bl	8009c58 <SPI_WaitFlagStateUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eda:	f043 0220 	orr.w	r2, r3, #32
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e014      	b.n	8009f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7ff ff38 	bl	8009d68 <SPI_WaitFifoStateUntilTimeout>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f02:	f043 0220 	orr.w	r2, r3, #32
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e000      	b.n	8009f10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e049      	b.n	8009fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fb fa9c 	bl	800547c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f000 fdb2 	bl	800aac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d001      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e054      	b.n	800a08a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f042 0201 	orr.w	r2, r2, #1
 8009ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a26      	ldr	r2, [pc, #152]	; (800a098 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d022      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x80>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a00a:	d01d      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x80>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a22      	ldr	r2, [pc, #136]	; (800a09c <HAL_TIM_Base_Start_IT+0xd4>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d018      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x80>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a21      	ldr	r2, [pc, #132]	; (800a0a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d013      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x80>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a1f      	ldr	r2, [pc, #124]	; (800a0a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00e      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x80>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a1e      	ldr	r2, [pc, #120]	; (800a0a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d009      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x80>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a1c      	ldr	r2, [pc, #112]	; (800a0ac <HAL_TIM_Base_Start_IT+0xe4>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d004      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x80>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a1b      	ldr	r2, [pc, #108]	; (800a0b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d115      	bne.n	800a074 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689a      	ldr	r2, [r3, #8]
 800a04e:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <HAL_TIM_Base_Start_IT+0xec>)
 800a050:	4013      	ands	r3, r2
 800a052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2b06      	cmp	r3, #6
 800a058:	d015      	beq.n	800a086 <HAL_TIM_Base_Start_IT+0xbe>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a060:	d011      	beq.n	800a086 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f042 0201 	orr.w	r2, r2, #1
 800a070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a072:	e008      	b.n	800a086 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	e000      	b.n	800a088 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	40010000 	.word	0x40010000
 800a09c:	40000400 	.word	0x40000400
 800a0a0:	40000800 	.word	0x40000800
 800a0a4:	40000c00 	.word	0x40000c00
 800a0a8:	40010400 	.word	0x40010400
 800a0ac:	40014000 	.word	0x40014000
 800a0b0:	40001800 	.word	0x40001800
 800a0b4:	00010007 	.word	0x00010007

0800a0b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e049      	b.n	800a15e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d106      	bne.n	800a0e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f841 	bl	800a166 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	f000 fce2 	bl	800aac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
	...

0800a17c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d109      	bne.n	800a1a0 <HAL_TIM_PWM_Start+0x24>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b01      	cmp	r3, #1
 800a196:	bf14      	ite	ne
 800a198:	2301      	movne	r3, #1
 800a19a:	2300      	moveq	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	e03c      	b.n	800a21a <HAL_TIM_PWM_Start+0x9e>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d109      	bne.n	800a1ba <HAL_TIM_PWM_Start+0x3e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	bf14      	ite	ne
 800a1b2:	2301      	movne	r3, #1
 800a1b4:	2300      	moveq	r3, #0
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	e02f      	b.n	800a21a <HAL_TIM_PWM_Start+0x9e>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d109      	bne.n	800a1d4 <HAL_TIM_PWM_Start+0x58>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	bf14      	ite	ne
 800a1cc:	2301      	movne	r3, #1
 800a1ce:	2300      	moveq	r3, #0
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	e022      	b.n	800a21a <HAL_TIM_PWM_Start+0x9e>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b0c      	cmp	r3, #12
 800a1d8:	d109      	bne.n	800a1ee <HAL_TIM_PWM_Start+0x72>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	bf14      	ite	ne
 800a1e6:	2301      	movne	r3, #1
 800a1e8:	2300      	moveq	r3, #0
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	e015      	b.n	800a21a <HAL_TIM_PWM_Start+0x9e>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b10      	cmp	r3, #16
 800a1f2:	d109      	bne.n	800a208 <HAL_TIM_PWM_Start+0x8c>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	bf14      	ite	ne
 800a200:	2301      	movne	r3, #1
 800a202:	2300      	moveq	r3, #0
 800a204:	b2db      	uxtb	r3, r3
 800a206:	e008      	b.n	800a21a <HAL_TIM_PWM_Start+0x9e>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b01      	cmp	r3, #1
 800a212:	bf14      	ite	ne
 800a214:	2301      	movne	r3, #1
 800a216:	2300      	moveq	r3, #0
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e092      	b.n	800a348 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <HAL_TIM_PWM_Start+0xb6>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a230:	e023      	b.n	800a27a <HAL_TIM_PWM_Start+0xfe>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b04      	cmp	r3, #4
 800a236:	d104      	bne.n	800a242 <HAL_TIM_PWM_Start+0xc6>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a240:	e01b      	b.n	800a27a <HAL_TIM_PWM_Start+0xfe>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b08      	cmp	r3, #8
 800a246:	d104      	bne.n	800a252 <HAL_TIM_PWM_Start+0xd6>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a250:	e013      	b.n	800a27a <HAL_TIM_PWM_Start+0xfe>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b0c      	cmp	r3, #12
 800a256:	d104      	bne.n	800a262 <HAL_TIM_PWM_Start+0xe6>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a260:	e00b      	b.n	800a27a <HAL_TIM_PWM_Start+0xfe>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b10      	cmp	r3, #16
 800a266:	d104      	bne.n	800a272 <HAL_TIM_PWM_Start+0xf6>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a270:	e003      	b.n	800a27a <HAL_TIM_PWM_Start+0xfe>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2201      	movs	r2, #1
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 ffb4 	bl	800b1f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a30      	ldr	r2, [pc, #192]	; (800a350 <HAL_TIM_PWM_Start+0x1d4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d004      	beq.n	800a29c <HAL_TIM_PWM_Start+0x120>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a2f      	ldr	r2, [pc, #188]	; (800a354 <HAL_TIM_PWM_Start+0x1d8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d101      	bne.n	800a2a0 <HAL_TIM_PWM_Start+0x124>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <HAL_TIM_PWM_Start+0x126>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d007      	beq.n	800a2b6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a25      	ldr	r2, [pc, #148]	; (800a350 <HAL_TIM_PWM_Start+0x1d4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d022      	beq.n	800a306 <HAL_TIM_PWM_Start+0x18a>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c8:	d01d      	beq.n	800a306 <HAL_TIM_PWM_Start+0x18a>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a22      	ldr	r2, [pc, #136]	; (800a358 <HAL_TIM_PWM_Start+0x1dc>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d018      	beq.n	800a306 <HAL_TIM_PWM_Start+0x18a>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a20      	ldr	r2, [pc, #128]	; (800a35c <HAL_TIM_PWM_Start+0x1e0>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d013      	beq.n	800a306 <HAL_TIM_PWM_Start+0x18a>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a1f      	ldr	r2, [pc, #124]	; (800a360 <HAL_TIM_PWM_Start+0x1e4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00e      	beq.n	800a306 <HAL_TIM_PWM_Start+0x18a>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a19      	ldr	r2, [pc, #100]	; (800a354 <HAL_TIM_PWM_Start+0x1d8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d009      	beq.n	800a306 <HAL_TIM_PWM_Start+0x18a>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a1b      	ldr	r2, [pc, #108]	; (800a364 <HAL_TIM_PWM_Start+0x1e8>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d004      	beq.n	800a306 <HAL_TIM_PWM_Start+0x18a>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a19      	ldr	r2, [pc, #100]	; (800a368 <HAL_TIM_PWM_Start+0x1ec>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d115      	bne.n	800a332 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	4b17      	ldr	r3, [pc, #92]	; (800a36c <HAL_TIM_PWM_Start+0x1f0>)
 800a30e:	4013      	ands	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b06      	cmp	r3, #6
 800a316:	d015      	beq.n	800a344 <HAL_TIM_PWM_Start+0x1c8>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a31e:	d011      	beq.n	800a344 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0201 	orr.w	r2, r2, #1
 800a32e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a330:	e008      	b.n	800a344 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0201 	orr.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	e000      	b.n	800a346 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a344:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	40010000 	.word	0x40010000
 800a354:	40010400 	.word	0x40010400
 800a358:	40000400 	.word	0x40000400
 800a35c:	40000800 	.word	0x40000800
 800a360:	40000c00 	.word	0x40000c00
 800a364:	40014000 	.word	0x40014000
 800a368:	40001800 	.word	0x40001800
 800a36c:	00010007 	.word	0x00010007

0800a370 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2200      	movs	r2, #0
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f000 ff34 	bl	800b1f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a36      	ldr	r2, [pc, #216]	; (800a468 <HAL_TIM_PWM_Stop+0xf8>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d004      	beq.n	800a39c <HAL_TIM_PWM_Stop+0x2c>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a35      	ldr	r2, [pc, #212]	; (800a46c <HAL_TIM_PWM_Stop+0xfc>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d101      	bne.n	800a3a0 <HAL_TIM_PWM_Stop+0x30>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e000      	b.n	800a3a2 <HAL_TIM_PWM_Stop+0x32>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d017      	beq.n	800a3d6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6a1a      	ldr	r2, [r3, #32]
 800a3ac:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10f      	bne.n	800a3d6 <HAL_TIM_PWM_Stop+0x66>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	6a1a      	ldr	r2, [r3, #32]
 800a3bc:	f240 4344 	movw	r3, #1092	; 0x444
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d107      	bne.n	800a3d6 <HAL_TIM_PWM_Stop+0x66>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6a1a      	ldr	r2, [r3, #32]
 800a3dc:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10f      	bne.n	800a406 <HAL_TIM_PWM_Stop+0x96>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6a1a      	ldr	r2, [r3, #32]
 800a3ec:	f240 4344 	movw	r3, #1092	; 0x444
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d107      	bne.n	800a406 <HAL_TIM_PWM_Stop+0x96>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f022 0201 	bic.w	r2, r2, #1
 800a404:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d104      	bne.n	800a416 <HAL_TIM_PWM_Stop+0xa6>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a414:	e023      	b.n	800a45e <HAL_TIM_PWM_Stop+0xee>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2b04      	cmp	r3, #4
 800a41a:	d104      	bne.n	800a426 <HAL_TIM_PWM_Stop+0xb6>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a424:	e01b      	b.n	800a45e <HAL_TIM_PWM_Stop+0xee>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d104      	bne.n	800a436 <HAL_TIM_PWM_Stop+0xc6>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a434:	e013      	b.n	800a45e <HAL_TIM_PWM_Stop+0xee>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b0c      	cmp	r3, #12
 800a43a:	d104      	bne.n	800a446 <HAL_TIM_PWM_Stop+0xd6>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a444:	e00b      	b.n	800a45e <HAL_TIM_PWM_Stop+0xee>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d104      	bne.n	800a456 <HAL_TIM_PWM_Stop+0xe6>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a454:	e003      	b.n	800a45e <HAL_TIM_PWM_Stop+0xee>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40010000 	.word	0x40010000
 800a46c:	40010400 	.word	0x40010400

0800a470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b02      	cmp	r3, #2
 800a484:	d122      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b02      	cmp	r3, #2
 800a492:	d11b      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f06f 0202 	mvn.w	r2, #2
 800a49c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fae6 	bl	800aa84 <HAL_TIM_IC_CaptureCallback>
 800a4b8:	e005      	b.n	800a4c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fad8 	bl	800aa70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fae9 	bl	800aa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0304 	and.w	r3, r3, #4
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d122      	bne.n	800a520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d11b      	bne.n	800a520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0204 	mvn.w	r2, #4
 800a4f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fabc 	bl	800aa84 <HAL_TIM_IC_CaptureCallback>
 800a50c:	e005      	b.n	800a51a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 faae 	bl	800aa70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fabf 	bl	800aa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0308 	and.w	r3, r3, #8
 800a52a:	2b08      	cmp	r3, #8
 800a52c:	d122      	bne.n	800a574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0308 	and.w	r3, r3, #8
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d11b      	bne.n	800a574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f06f 0208 	mvn.w	r2, #8
 800a544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2204      	movs	r2, #4
 800a54a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	f003 0303 	and.w	r3, r3, #3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa92 	bl	800aa84 <HAL_TIM_IC_CaptureCallback>
 800a560:	e005      	b.n	800a56e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fa84 	bl	800aa70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fa95 	bl	800aa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	f003 0310 	and.w	r3, r3, #16
 800a57e:	2b10      	cmp	r3, #16
 800a580:	d122      	bne.n	800a5c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f003 0310 	and.w	r3, r3, #16
 800a58c:	2b10      	cmp	r3, #16
 800a58e:	d11b      	bne.n	800a5c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f06f 0210 	mvn.w	r2, #16
 800a598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2208      	movs	r2, #8
 800a59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fa68 	bl	800aa84 <HAL_TIM_IC_CaptureCallback>
 800a5b4:	e005      	b.n	800a5c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa5a 	bl	800aa70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fa6b 	bl	800aa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d10e      	bne.n	800a5f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d107      	bne.n	800a5f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f06f 0201 	mvn.w	r2, #1
 800a5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fa34 	bl	800aa5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5fe:	2b80      	cmp	r3, #128	; 0x80
 800a600:	d10e      	bne.n	800a620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60c:	2b80      	cmp	r3, #128	; 0x80
 800a60e:	d107      	bne.n	800a620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fea6 	bl	800b36c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a62e:	d10e      	bne.n	800a64e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a63a:	2b80      	cmp	r3, #128	; 0x80
 800a63c:	d107      	bne.n	800a64e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fe99 	bl	800b380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a658:	2b40      	cmp	r3, #64	; 0x40
 800a65a:	d10e      	bne.n	800a67a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a666:	2b40      	cmp	r3, #64	; 0x40
 800a668:	d107      	bne.n	800a67a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fa19 	bl	800aaac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b20      	cmp	r3, #32
 800a686:	d10e      	bne.n	800a6a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f003 0320 	and.w	r3, r3, #32
 800a692:	2b20      	cmp	r3, #32
 800a694:	d107      	bne.n	800a6a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f06f 0220 	mvn.w	r2, #32
 800a69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fe59 	bl	800b358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d101      	bne.n	800a6ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	e0fd      	b.n	800a8c6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b14      	cmp	r3, #20
 800a6d6:	f200 80f0 	bhi.w	800a8ba <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a6da:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a735 	.word	0x0800a735
 800a6e4:	0800a8bb 	.word	0x0800a8bb
 800a6e8:	0800a8bb 	.word	0x0800a8bb
 800a6ec:	0800a8bb 	.word	0x0800a8bb
 800a6f0:	0800a775 	.word	0x0800a775
 800a6f4:	0800a8bb 	.word	0x0800a8bb
 800a6f8:	0800a8bb 	.word	0x0800a8bb
 800a6fc:	0800a8bb 	.word	0x0800a8bb
 800a700:	0800a7b7 	.word	0x0800a7b7
 800a704:	0800a8bb 	.word	0x0800a8bb
 800a708:	0800a8bb 	.word	0x0800a8bb
 800a70c:	0800a8bb 	.word	0x0800a8bb
 800a710:	0800a7f7 	.word	0x0800a7f7
 800a714:	0800a8bb 	.word	0x0800a8bb
 800a718:	0800a8bb 	.word	0x0800a8bb
 800a71c:	0800a8bb 	.word	0x0800a8bb
 800a720:	0800a839 	.word	0x0800a839
 800a724:	0800a8bb 	.word	0x0800a8bb
 800a728:	0800a8bb 	.word	0x0800a8bb
 800a72c:	0800a8bb 	.word	0x0800a8bb
 800a730:	0800a879 	.word	0x0800a879
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68b9      	ldr	r1, [r7, #8]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fa60 	bl	800ac00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	699a      	ldr	r2, [r3, #24]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0208 	orr.w	r2, r2, #8
 800a74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 0204 	bic.w	r2, r2, #4
 800a75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6999      	ldr	r1, [r3, #24]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	691a      	ldr	r2, [r3, #16]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	619a      	str	r2, [r3, #24]
      break;
 800a772:	e0a3      	b.n	800a8bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fab2 	bl	800ace4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699a      	ldr	r2, [r3, #24]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a78e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699a      	ldr	r2, [r3, #24]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a79e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6999      	ldr	r1, [r3, #24]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	021a      	lsls	r2, r3, #8
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	619a      	str	r2, [r3, #24]
      break;
 800a7b4:	e082      	b.n	800a8bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68b9      	ldr	r1, [r7, #8]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 fb09 	bl	800add4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69da      	ldr	r2, [r3, #28]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f042 0208 	orr.w	r2, r2, #8
 800a7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69da      	ldr	r2, [r3, #28]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f022 0204 	bic.w	r2, r2, #4
 800a7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69d9      	ldr	r1, [r3, #28]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	691a      	ldr	r2, [r3, #16]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	61da      	str	r2, [r3, #28]
      break;
 800a7f4:	e062      	b.n	800a8bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 fb5f 	bl	800aec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	69da      	ldr	r2, [r3, #28]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	69da      	ldr	r2, [r3, #28]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69d9      	ldr	r1, [r3, #28]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	021a      	lsls	r2, r3, #8
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	61da      	str	r2, [r3, #28]
      break;
 800a836:	e041      	b.n	800a8bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fb96 	bl	800af70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f042 0208 	orr.w	r2, r2, #8
 800a852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0204 	bic.w	r2, r2, #4
 800a862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691a      	ldr	r2, [r3, #16]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a876:	e021      	b.n	800a8bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fbc8 	bl	800b014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	021a      	lsls	r2, r3, #8
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8b8:	e000      	b.n	800a8bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a8ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop

0800a8d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d101      	bne.n	800a8e8 <HAL_TIM_ConfigClockSource+0x18>
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e0b3      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x180>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4b55      	ldr	r3, [pc, #340]	; (800aa58 <HAL_TIM_ConfigClockSource+0x188>)
 800a904:	4013      	ands	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a90e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a920:	d03e      	beq.n	800a9a0 <HAL_TIM_ConfigClockSource+0xd0>
 800a922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a926:	f200 8087 	bhi.w	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a92a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92e:	f000 8085 	beq.w	800aa3c <HAL_TIM_ConfigClockSource+0x16c>
 800a932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a936:	d87f      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a938:	2b70      	cmp	r3, #112	; 0x70
 800a93a:	d01a      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0xa2>
 800a93c:	2b70      	cmp	r3, #112	; 0x70
 800a93e:	d87b      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a940:	2b60      	cmp	r3, #96	; 0x60
 800a942:	d050      	beq.n	800a9e6 <HAL_TIM_ConfigClockSource+0x116>
 800a944:	2b60      	cmp	r3, #96	; 0x60
 800a946:	d877      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a948:	2b50      	cmp	r3, #80	; 0x50
 800a94a:	d03c      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0xf6>
 800a94c:	2b50      	cmp	r3, #80	; 0x50
 800a94e:	d873      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a950:	2b40      	cmp	r3, #64	; 0x40
 800a952:	d058      	beq.n	800aa06 <HAL_TIM_ConfigClockSource+0x136>
 800a954:	2b40      	cmp	r3, #64	; 0x40
 800a956:	d86f      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a958:	2b30      	cmp	r3, #48	; 0x30
 800a95a:	d064      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x156>
 800a95c:	2b30      	cmp	r3, #48	; 0x30
 800a95e:	d86b      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a960:	2b20      	cmp	r3, #32
 800a962:	d060      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x156>
 800a964:	2b20      	cmp	r3, #32
 800a966:	d867      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d05c      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x156>
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d05a      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a970:	e062      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6818      	ldr	r0, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	6899      	ldr	r1, [r3, #8]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	f000 fc15 	bl	800b1b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a994:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	609a      	str	r2, [r3, #8]
      break;
 800a99e:	e04e      	b.n	800aa3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6818      	ldr	r0, [r3, #0]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	6899      	ldr	r1, [r3, #8]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f000 fbfe 	bl	800b1b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9c2:	609a      	str	r2, [r3, #8]
      break;
 800a9c4:	e03b      	b.n	800aa3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6818      	ldr	r0, [r3, #0]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	6859      	ldr	r1, [r3, #4]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f000 fb72 	bl	800b0bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2150      	movs	r1, #80	; 0x50
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 fbcb 	bl	800b17a <TIM_ITRx_SetConfig>
      break;
 800a9e4:	e02b      	b.n	800aa3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	6859      	ldr	r1, [r3, #4]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f000 fb91 	bl	800b11a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2160      	movs	r1, #96	; 0x60
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 fbbb 	bl	800b17a <TIM_ITRx_SetConfig>
      break;
 800aa04:	e01b      	b.n	800aa3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6859      	ldr	r1, [r3, #4]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f000 fb52 	bl	800b0bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2140      	movs	r1, #64	; 0x40
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fbab 	bl	800b17a <TIM_ITRx_SetConfig>
      break;
 800aa24:	e00b      	b.n	800aa3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4610      	mov	r0, r2
 800aa32:	f000 fba2 	bl	800b17a <TIM_ITRx_SetConfig>
        break;
 800aa36:	e002      	b.n	800aa3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aa38:	bf00      	nop
 800aa3a:	e000      	b.n	800aa3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aa3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	fffeff88 	.word	0xfffeff88

0800aa5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a40      	ldr	r2, [pc, #256]	; (800abd4 <TIM_Base_SetConfig+0x114>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d013      	beq.n	800ab00 <TIM_Base_SetConfig+0x40>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aade:	d00f      	beq.n	800ab00 <TIM_Base_SetConfig+0x40>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a3d      	ldr	r2, [pc, #244]	; (800abd8 <TIM_Base_SetConfig+0x118>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d00b      	beq.n	800ab00 <TIM_Base_SetConfig+0x40>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a3c      	ldr	r2, [pc, #240]	; (800abdc <TIM_Base_SetConfig+0x11c>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d007      	beq.n	800ab00 <TIM_Base_SetConfig+0x40>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a3b      	ldr	r2, [pc, #236]	; (800abe0 <TIM_Base_SetConfig+0x120>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d003      	beq.n	800ab00 <TIM_Base_SetConfig+0x40>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a3a      	ldr	r2, [pc, #232]	; (800abe4 <TIM_Base_SetConfig+0x124>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d108      	bne.n	800ab12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a2f      	ldr	r2, [pc, #188]	; (800abd4 <TIM_Base_SetConfig+0x114>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d02b      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab20:	d027      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a2c      	ldr	r2, [pc, #176]	; (800abd8 <TIM_Base_SetConfig+0x118>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d023      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a2b      	ldr	r2, [pc, #172]	; (800abdc <TIM_Base_SetConfig+0x11c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d01f      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a2a      	ldr	r2, [pc, #168]	; (800abe0 <TIM_Base_SetConfig+0x120>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d01b      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a29      	ldr	r2, [pc, #164]	; (800abe4 <TIM_Base_SetConfig+0x124>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d017      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a28      	ldr	r2, [pc, #160]	; (800abe8 <TIM_Base_SetConfig+0x128>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d013      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a27      	ldr	r2, [pc, #156]	; (800abec <TIM_Base_SetConfig+0x12c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00f      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a26      	ldr	r2, [pc, #152]	; (800abf0 <TIM_Base_SetConfig+0x130>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d00b      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a25      	ldr	r2, [pc, #148]	; (800abf4 <TIM_Base_SetConfig+0x134>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d007      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a24      	ldr	r2, [pc, #144]	; (800abf8 <TIM_Base_SetConfig+0x138>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d003      	beq.n	800ab72 <TIM_Base_SetConfig+0xb2>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a23      	ldr	r2, [pc, #140]	; (800abfc <TIM_Base_SetConfig+0x13c>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d108      	bne.n	800ab84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a0a      	ldr	r2, [pc, #40]	; (800abd4 <TIM_Base_SetConfig+0x114>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d003      	beq.n	800abb8 <TIM_Base_SetConfig+0xf8>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a0c      	ldr	r2, [pc, #48]	; (800abe4 <TIM_Base_SetConfig+0x124>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d103      	bne.n	800abc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	691a      	ldr	r2, [r3, #16]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	615a      	str	r2, [r3, #20]
}
 800abc6:	bf00      	nop
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	40010000 	.word	0x40010000
 800abd8:	40000400 	.word	0x40000400
 800abdc:	40000800 	.word	0x40000800
 800abe0:	40000c00 	.word	0x40000c00
 800abe4:	40010400 	.word	0x40010400
 800abe8:	40014000 	.word	0x40014000
 800abec:	40014400 	.word	0x40014400
 800abf0:	40014800 	.word	0x40014800
 800abf4:	40001800 	.word	0x40001800
 800abf8:	40001c00 	.word	0x40001c00
 800abfc:	40002000 	.word	0x40002000

0800ac00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	f023 0201 	bic.w	r2, r3, #1
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4b2b      	ldr	r3, [pc, #172]	; (800acd8 <TIM_OC1_SetConfig+0xd8>)
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f023 0303 	bic.w	r3, r3, #3
 800ac36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f023 0302 	bic.w	r3, r3, #2
 800ac48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a21      	ldr	r2, [pc, #132]	; (800acdc <TIM_OC1_SetConfig+0xdc>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d003      	beq.n	800ac64 <TIM_OC1_SetConfig+0x64>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a20      	ldr	r2, [pc, #128]	; (800ace0 <TIM_OC1_SetConfig+0xe0>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d10c      	bne.n	800ac7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f023 0308 	bic.w	r3, r3, #8
 800ac6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f023 0304 	bic.w	r3, r3, #4
 800ac7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a16      	ldr	r2, [pc, #88]	; (800acdc <TIM_OC1_SetConfig+0xdc>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d003      	beq.n	800ac8e <TIM_OC1_SetConfig+0x8e>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a15      	ldr	r2, [pc, #84]	; (800ace0 <TIM_OC1_SetConfig+0xe0>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d111      	bne.n	800acb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	4313      	orrs	r3, r2
 800acb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	621a      	str	r2, [r3, #32]
}
 800accc:	bf00      	nop
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	fffeff8f 	.word	0xfffeff8f
 800acdc:	40010000 	.word	0x40010000
 800ace0:	40010400 	.word	0x40010400

0800ace4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f023 0210 	bic.w	r2, r3, #16
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	4b2e      	ldr	r3, [pc, #184]	; (800adc8 <TIM_OC2_SetConfig+0xe4>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	021b      	lsls	r3, r3, #8
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f023 0320 	bic.w	r3, r3, #32
 800ad2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	011b      	lsls	r3, r3, #4
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a23      	ldr	r2, [pc, #140]	; (800adcc <TIM_OC2_SetConfig+0xe8>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d003      	beq.n	800ad4c <TIM_OC2_SetConfig+0x68>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a22      	ldr	r2, [pc, #136]	; (800add0 <TIM_OC2_SetConfig+0xec>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d10d      	bne.n	800ad68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a18      	ldr	r2, [pc, #96]	; (800adcc <TIM_OC2_SetConfig+0xe8>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d003      	beq.n	800ad78 <TIM_OC2_SetConfig+0x94>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a17      	ldr	r2, [pc, #92]	; (800add0 <TIM_OC2_SetConfig+0xec>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d113      	bne.n	800ada0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	621a      	str	r2, [r3, #32]
}
 800adba:	bf00      	nop
 800adbc:	371c      	adds	r7, #28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	feff8fff 	.word	0xfeff8fff
 800adcc:	40010000 	.word	0x40010000
 800add0:	40010400 	.word	0x40010400

0800add4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	4b2d      	ldr	r3, [pc, #180]	; (800aeb4 <TIM_OC3_SetConfig+0xe0>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 0303 	bic.w	r3, r3, #3
 800ae0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a22      	ldr	r2, [pc, #136]	; (800aeb8 <TIM_OC3_SetConfig+0xe4>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d003      	beq.n	800ae3a <TIM_OC3_SetConfig+0x66>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a21      	ldr	r2, [pc, #132]	; (800aebc <TIM_OC3_SetConfig+0xe8>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d10d      	bne.n	800ae56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	021b      	lsls	r3, r3, #8
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a17      	ldr	r2, [pc, #92]	; (800aeb8 <TIM_OC3_SetConfig+0xe4>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d003      	beq.n	800ae66 <TIM_OC3_SetConfig+0x92>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a16      	ldr	r2, [pc, #88]	; (800aebc <TIM_OC3_SetConfig+0xe8>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d113      	bne.n	800ae8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	011b      	lsls	r3, r3, #4
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	621a      	str	r2, [r3, #32]
}
 800aea8:	bf00      	nop
 800aeaa:	371c      	adds	r7, #28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	fffeff8f 	.word	0xfffeff8f
 800aeb8:	40010000 	.word	0x40010000
 800aebc:	40010400 	.word	0x40010400

0800aec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <TIM_OC4_SetConfig+0xa4>)
 800aeec:	4013      	ands	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	021b      	lsls	r3, r3, #8
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4313      	orrs	r3, r2
 800af02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	031b      	lsls	r3, r3, #12
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	4313      	orrs	r3, r2
 800af16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a13      	ldr	r2, [pc, #76]	; (800af68 <TIM_OC4_SetConfig+0xa8>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d003      	beq.n	800af28 <TIM_OC4_SetConfig+0x68>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a12      	ldr	r2, [pc, #72]	; (800af6c <TIM_OC4_SetConfig+0xac>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d109      	bne.n	800af3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	019b      	lsls	r3, r3, #6
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4313      	orrs	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	621a      	str	r2, [r3, #32]
}
 800af56:	bf00      	nop
 800af58:	371c      	adds	r7, #28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	feff8fff 	.word	0xfeff8fff
 800af68:	40010000 	.word	0x40010000
 800af6c:	40010400 	.word	0x40010400

0800af70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	4b1b      	ldr	r3, [pc, #108]	; (800b008 <TIM_OC5_SetConfig+0x98>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800afb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	041b      	lsls	r3, r3, #16
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a12      	ldr	r2, [pc, #72]	; (800b00c <TIM_OC5_SetConfig+0x9c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d003      	beq.n	800afce <TIM_OC5_SetConfig+0x5e>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a11      	ldr	r2, [pc, #68]	; (800b010 <TIM_OC5_SetConfig+0xa0>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d109      	bne.n	800afe2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	695b      	ldr	r3, [r3, #20]
 800afda:	021b      	lsls	r3, r3, #8
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	4313      	orrs	r3, r2
 800afe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	621a      	str	r2, [r3, #32]
}
 800affc:	bf00      	nop
 800affe:	371c      	adds	r7, #28
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	fffeff8f 	.word	0xfffeff8f
 800b00c:	40010000 	.word	0x40010000
 800b010:	40010400 	.word	0x40010400

0800b014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	4b1c      	ldr	r3, [pc, #112]	; (800b0b0 <TIM_OC6_SetConfig+0x9c>)
 800b040:	4013      	ands	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	021b      	lsls	r3, r3, #8
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	051b      	lsls	r3, r3, #20
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	4313      	orrs	r3, r2
 800b062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a13      	ldr	r2, [pc, #76]	; (800b0b4 <TIM_OC6_SetConfig+0xa0>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d003      	beq.n	800b074 <TIM_OC6_SetConfig+0x60>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a12      	ldr	r2, [pc, #72]	; (800b0b8 <TIM_OC6_SetConfig+0xa4>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d109      	bne.n	800b088 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b07a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	029b      	lsls	r3, r3, #10
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	4313      	orrs	r3, r2
 800b086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	621a      	str	r2, [r3, #32]
}
 800b0a2:	bf00      	nop
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	feff8fff 	.word	0xfeff8fff
 800b0b4:	40010000 	.word	0x40010000
 800b0b8:	40010400 	.word	0x40010400

0800b0bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	f023 0201 	bic.w	r2, r3, #1
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f023 030a 	bic.w	r3, r3, #10
 800b0f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	621a      	str	r2, [r3, #32]
}
 800b10e:	bf00      	nop
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b087      	sub	sp, #28
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	f023 0210 	bic.w	r2, r3, #16
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	031b      	lsls	r3, r3, #12
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	011b      	lsls	r3, r3, #4
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	4313      	orrs	r3, r2
 800b160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	621a      	str	r2, [r3, #32]
}
 800b16e:	bf00      	nop
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4313      	orrs	r3, r2
 800b198:	f043 0307 	orr.w	r3, r3, #7
 800b19c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	609a      	str	r2, [r3, #8]
}
 800b1a4:	bf00      	nop
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
 800b1bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	021a      	lsls	r2, r3, #8
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	609a      	str	r2, [r3, #8]
}
 800b1e4:	bf00      	nop
 800b1e6:	371c      	adds	r7, #28
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	f003 031f 	and.w	r3, r3, #31
 800b202:	2201      	movs	r2, #1
 800b204:	fa02 f303 	lsl.w	r3, r2, r3
 800b208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6a1a      	ldr	r2, [r3, #32]
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	43db      	mvns	r3, r3
 800b212:	401a      	ands	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a1a      	ldr	r2, [r3, #32]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	f003 031f 	and.w	r3, r3, #31
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	fa01 f303 	lsl.w	r3, r1, r3
 800b228:	431a      	orrs	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	621a      	str	r2, [r3, #32]
}
 800b22e:	bf00      	nop
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
	...

0800b23c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d101      	bne.n	800b254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b250:	2302      	movs	r3, #2
 800b252:	e06d      	b.n	800b330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a30      	ldr	r2, [pc, #192]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d004      	beq.n	800b288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a2f      	ldr	r2, [pc, #188]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d108      	bne.n	800b29a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b28e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a20      	ldr	r2, [pc, #128]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d022      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c6:	d01d      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a1d      	ldr	r2, [pc, #116]	; (800b344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d018      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a1c      	ldr	r2, [pc, #112]	; (800b348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d013      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a1a      	ldr	r2, [pc, #104]	; (800b34c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d00e      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a15      	ldr	r2, [pc, #84]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d009      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a16      	ldr	r2, [pc, #88]	; (800b350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d004      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a15      	ldr	r2, [pc, #84]	; (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d10c      	bne.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	4313      	orrs	r3, r2
 800b314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	40010000 	.word	0x40010000
 800b340:	40010400 	.word	0x40010400
 800b344:	40000400 	.word	0x40000400
 800b348:	40000800 	.word	0x40000800
 800b34c:	40000c00 	.word	0x40000c00
 800b350:	40014000 	.word	0x40014000
 800b354:	40001800 	.word	0x40001800

0800b358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e040      	b.n	800b428 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7fa f9b6 	bl	8005728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2224      	movs	r2, #36	; 0x24
 800b3c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0201 	bic.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f990 	bl	800b6f8 <UART_SetConfig>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e022      	b.n	800b428 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fbe6 	bl	800bbbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689a      	ldr	r2, [r3, #8]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b40e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f042 0201 	orr.w	r2, r2, #1
 800b41e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fc6d 	bl	800bd00 <UART_CheckIdleState>
 800b426:	4603      	mov	r3, r0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08a      	sub	sp, #40	; 0x28
 800b434:	af02      	add	r7, sp, #8
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	4613      	mov	r3, r2
 800b43e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b444:	2b20      	cmp	r3, #32
 800b446:	f040 8081 	bne.w	800b54c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <HAL_UART_Transmit+0x26>
 800b450:	88fb      	ldrh	r3, [r7, #6]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e079      	b.n	800b54e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UART_Transmit+0x38>
 800b464:	2302      	movs	r3, #2
 800b466:	e072      	b.n	800b54e <HAL_UART_Transmit+0x11e>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2221      	movs	r2, #33	; 0x21
 800b47c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b47e:	f7fb f981 	bl	8006784 <HAL_GetTick>
 800b482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	88fa      	ldrh	r2, [r7, #6]
 800b488:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	88fa      	ldrh	r2, [r7, #6]
 800b490:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b49c:	d108      	bne.n	800b4b0 <HAL_UART_Transmit+0x80>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d104      	bne.n	800b4b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	61bb      	str	r3, [r7, #24]
 800b4ae:	e003      	b.n	800b4b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b4c0:	e02c      	b.n	800b51c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	2180      	movs	r1, #128	; 0x80
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 fc60 	bl	800bd92 <UART_WaitOnFlagUntilTimeout>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	e038      	b.n	800b54e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10b      	bne.n	800b4fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	3302      	adds	r3, #2
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	e007      	b.n	800b50a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	781a      	ldrb	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	3301      	adds	r3, #1
 800b508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b510:	b29b      	uxth	r3, r3
 800b512:	3b01      	subs	r3, #1
 800b514:	b29a      	uxth	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b522:	b29b      	uxth	r3, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1cc      	bne.n	800b4c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2200      	movs	r2, #0
 800b530:	2140      	movs	r1, #64	; 0x40
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 fc2d 	bl	800bd92 <UART_WaitOnFlagUntilTimeout>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e005      	b.n	800b54e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2220      	movs	r2, #32
 800b546:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	e000      	b.n	800b54e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b54c:	2302      	movs	r3, #2
  }
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b08a      	sub	sp, #40	; 0x28
 800b55a:	af02      	add	r7, sp, #8
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	60b9      	str	r1, [r7, #8]
 800b560:	603b      	str	r3, [r7, #0]
 800b562:	4613      	mov	r3, r2
 800b564:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b56a:	2b20      	cmp	r3, #32
 800b56c:	f040 80be 	bne.w	800b6ec <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <HAL_UART_Receive+0x26>
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0b6      	b.n	800b6ee <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b586:	2b01      	cmp	r3, #1
 800b588:	d101      	bne.n	800b58e <HAL_UART_Receive+0x38>
 800b58a:	2302      	movs	r3, #2
 800b58c:	e0af      	b.n	800b6ee <HAL_UART_Receive+0x198>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2222      	movs	r2, #34	; 0x22
 800b5a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5aa:	f7fb f8eb 	bl	8006784 <HAL_GetTick>
 800b5ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	88fa      	ldrh	r2, [r7, #6]
 800b5b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	88fa      	ldrh	r2, [r7, #6]
 800b5bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c8:	d10e      	bne.n	800b5e8 <HAL_UART_Receive+0x92>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d105      	bne.n	800b5de <HAL_UART_Receive+0x88>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b5d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b5dc:	e02d      	b.n	800b63a <HAL_UART_Receive+0xe4>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	22ff      	movs	r2, #255	; 0xff
 800b5e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b5e6:	e028      	b.n	800b63a <HAL_UART_Receive+0xe4>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10d      	bne.n	800b60c <HAL_UART_Receive+0xb6>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <HAL_UART_Receive+0xac>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	22ff      	movs	r2, #255	; 0xff
 800b5fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b600:	e01b      	b.n	800b63a <HAL_UART_Receive+0xe4>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	227f      	movs	r2, #127	; 0x7f
 800b606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b60a:	e016      	b.n	800b63a <HAL_UART_Receive+0xe4>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b614:	d10d      	bne.n	800b632 <HAL_UART_Receive+0xdc>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d104      	bne.n	800b628 <HAL_UART_Receive+0xd2>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	227f      	movs	r2, #127	; 0x7f
 800b622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b626:	e008      	b.n	800b63a <HAL_UART_Receive+0xe4>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	223f      	movs	r2, #63	; 0x3f
 800b62c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b630:	e003      	b.n	800b63a <HAL_UART_Receive+0xe4>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b640:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64a:	d108      	bne.n	800b65e <HAL_UART_Receive+0x108>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d104      	bne.n	800b65e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b654:	2300      	movs	r3, #0
 800b656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	61bb      	str	r3, [r7, #24]
 800b65c:	e003      	b.n	800b666 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b662:	2300      	movs	r3, #0
 800b664:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b66e:	e032      	b.n	800b6d6 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2200      	movs	r2, #0
 800b678:	2120      	movs	r1, #32
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fb89 	bl	800bd92 <UART_WaitOnFlagUntilTimeout>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e031      	b.n	800b6ee <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10c      	bne.n	800b6aa <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	b29a      	uxth	r2, r3
 800b698:	8a7b      	ldrh	r3, [r7, #18]
 800b69a:	4013      	ands	r3, r2
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	3302      	adds	r3, #2
 800b6a6:	61bb      	str	r3, [r7, #24]
 800b6a8:	e00c      	b.n	800b6c4 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	8a7b      	ldrh	r3, [r7, #18]
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1c6      	bne.n	800b670 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	e000      	b.n	800b6ee <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800b6ec:	2302      	movs	r3, #2
  }
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3720      	adds	r7, #32
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689a      	ldr	r2, [r3, #8]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	431a      	orrs	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	431a      	orrs	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	4313      	orrs	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	4ba7      	ldr	r3, [pc, #668]	; (800b9c0 <UART_SetConfig+0x2c8>)
 800b724:	4013      	ands	r3, r2
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	6812      	ldr	r2, [r2, #0]
 800b72a:	6979      	ldr	r1, [r7, #20]
 800b72c:	430b      	orrs	r3, r1
 800b72e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	4313      	orrs	r3, r2
 800b754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	430a      	orrs	r2, r1
 800b768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a95      	ldr	r2, [pc, #596]	; (800b9c4 <UART_SetConfig+0x2cc>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d120      	bne.n	800b7b6 <UART_SetConfig+0xbe>
 800b774:	4b94      	ldr	r3, [pc, #592]	; (800b9c8 <UART_SetConfig+0x2d0>)
 800b776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d816      	bhi.n	800b7b0 <UART_SetConfig+0xb8>
 800b782:	a201      	add	r2, pc, #4	; (adr r2, 800b788 <UART_SetConfig+0x90>)
 800b784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b788:	0800b799 	.word	0x0800b799
 800b78c:	0800b7a5 	.word	0x0800b7a5
 800b790:	0800b79f 	.word	0x0800b79f
 800b794:	0800b7ab 	.word	0x0800b7ab
 800b798:	2301      	movs	r3, #1
 800b79a:	77fb      	strb	r3, [r7, #31]
 800b79c:	e14f      	b.n	800ba3e <UART_SetConfig+0x346>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	77fb      	strb	r3, [r7, #31]
 800b7a2:	e14c      	b.n	800ba3e <UART_SetConfig+0x346>
 800b7a4:	2304      	movs	r3, #4
 800b7a6:	77fb      	strb	r3, [r7, #31]
 800b7a8:	e149      	b.n	800ba3e <UART_SetConfig+0x346>
 800b7aa:	2308      	movs	r3, #8
 800b7ac:	77fb      	strb	r3, [r7, #31]
 800b7ae:	e146      	b.n	800ba3e <UART_SetConfig+0x346>
 800b7b0:	2310      	movs	r3, #16
 800b7b2:	77fb      	strb	r3, [r7, #31]
 800b7b4:	e143      	b.n	800ba3e <UART_SetConfig+0x346>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a84      	ldr	r2, [pc, #528]	; (800b9cc <UART_SetConfig+0x2d4>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d132      	bne.n	800b826 <UART_SetConfig+0x12e>
 800b7c0:	4b81      	ldr	r3, [pc, #516]	; (800b9c8 <UART_SetConfig+0x2d0>)
 800b7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c6:	f003 030c 	and.w	r3, r3, #12
 800b7ca:	2b0c      	cmp	r3, #12
 800b7cc:	d828      	bhi.n	800b820 <UART_SetConfig+0x128>
 800b7ce:	a201      	add	r2, pc, #4	; (adr r2, 800b7d4 <UART_SetConfig+0xdc>)
 800b7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d4:	0800b809 	.word	0x0800b809
 800b7d8:	0800b821 	.word	0x0800b821
 800b7dc:	0800b821 	.word	0x0800b821
 800b7e0:	0800b821 	.word	0x0800b821
 800b7e4:	0800b815 	.word	0x0800b815
 800b7e8:	0800b821 	.word	0x0800b821
 800b7ec:	0800b821 	.word	0x0800b821
 800b7f0:	0800b821 	.word	0x0800b821
 800b7f4:	0800b80f 	.word	0x0800b80f
 800b7f8:	0800b821 	.word	0x0800b821
 800b7fc:	0800b821 	.word	0x0800b821
 800b800:	0800b821 	.word	0x0800b821
 800b804:	0800b81b 	.word	0x0800b81b
 800b808:	2300      	movs	r3, #0
 800b80a:	77fb      	strb	r3, [r7, #31]
 800b80c:	e117      	b.n	800ba3e <UART_SetConfig+0x346>
 800b80e:	2302      	movs	r3, #2
 800b810:	77fb      	strb	r3, [r7, #31]
 800b812:	e114      	b.n	800ba3e <UART_SetConfig+0x346>
 800b814:	2304      	movs	r3, #4
 800b816:	77fb      	strb	r3, [r7, #31]
 800b818:	e111      	b.n	800ba3e <UART_SetConfig+0x346>
 800b81a:	2308      	movs	r3, #8
 800b81c:	77fb      	strb	r3, [r7, #31]
 800b81e:	e10e      	b.n	800ba3e <UART_SetConfig+0x346>
 800b820:	2310      	movs	r3, #16
 800b822:	77fb      	strb	r3, [r7, #31]
 800b824:	e10b      	b.n	800ba3e <UART_SetConfig+0x346>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a69      	ldr	r2, [pc, #420]	; (800b9d0 <UART_SetConfig+0x2d8>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d120      	bne.n	800b872 <UART_SetConfig+0x17a>
 800b830:	4b65      	ldr	r3, [pc, #404]	; (800b9c8 <UART_SetConfig+0x2d0>)
 800b832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b836:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b83a:	2b30      	cmp	r3, #48	; 0x30
 800b83c:	d013      	beq.n	800b866 <UART_SetConfig+0x16e>
 800b83e:	2b30      	cmp	r3, #48	; 0x30
 800b840:	d814      	bhi.n	800b86c <UART_SetConfig+0x174>
 800b842:	2b20      	cmp	r3, #32
 800b844:	d009      	beq.n	800b85a <UART_SetConfig+0x162>
 800b846:	2b20      	cmp	r3, #32
 800b848:	d810      	bhi.n	800b86c <UART_SetConfig+0x174>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <UART_SetConfig+0x15c>
 800b84e:	2b10      	cmp	r3, #16
 800b850:	d006      	beq.n	800b860 <UART_SetConfig+0x168>
 800b852:	e00b      	b.n	800b86c <UART_SetConfig+0x174>
 800b854:	2300      	movs	r3, #0
 800b856:	77fb      	strb	r3, [r7, #31]
 800b858:	e0f1      	b.n	800ba3e <UART_SetConfig+0x346>
 800b85a:	2302      	movs	r3, #2
 800b85c:	77fb      	strb	r3, [r7, #31]
 800b85e:	e0ee      	b.n	800ba3e <UART_SetConfig+0x346>
 800b860:	2304      	movs	r3, #4
 800b862:	77fb      	strb	r3, [r7, #31]
 800b864:	e0eb      	b.n	800ba3e <UART_SetConfig+0x346>
 800b866:	2308      	movs	r3, #8
 800b868:	77fb      	strb	r3, [r7, #31]
 800b86a:	e0e8      	b.n	800ba3e <UART_SetConfig+0x346>
 800b86c:	2310      	movs	r3, #16
 800b86e:	77fb      	strb	r3, [r7, #31]
 800b870:	e0e5      	b.n	800ba3e <UART_SetConfig+0x346>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a57      	ldr	r2, [pc, #348]	; (800b9d4 <UART_SetConfig+0x2dc>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d120      	bne.n	800b8be <UART_SetConfig+0x1c6>
 800b87c:	4b52      	ldr	r3, [pc, #328]	; (800b9c8 <UART_SetConfig+0x2d0>)
 800b87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b882:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b886:	2bc0      	cmp	r3, #192	; 0xc0
 800b888:	d013      	beq.n	800b8b2 <UART_SetConfig+0x1ba>
 800b88a:	2bc0      	cmp	r3, #192	; 0xc0
 800b88c:	d814      	bhi.n	800b8b8 <UART_SetConfig+0x1c0>
 800b88e:	2b80      	cmp	r3, #128	; 0x80
 800b890:	d009      	beq.n	800b8a6 <UART_SetConfig+0x1ae>
 800b892:	2b80      	cmp	r3, #128	; 0x80
 800b894:	d810      	bhi.n	800b8b8 <UART_SetConfig+0x1c0>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <UART_SetConfig+0x1a8>
 800b89a:	2b40      	cmp	r3, #64	; 0x40
 800b89c:	d006      	beq.n	800b8ac <UART_SetConfig+0x1b4>
 800b89e:	e00b      	b.n	800b8b8 <UART_SetConfig+0x1c0>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	77fb      	strb	r3, [r7, #31]
 800b8a4:	e0cb      	b.n	800ba3e <UART_SetConfig+0x346>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	77fb      	strb	r3, [r7, #31]
 800b8aa:	e0c8      	b.n	800ba3e <UART_SetConfig+0x346>
 800b8ac:	2304      	movs	r3, #4
 800b8ae:	77fb      	strb	r3, [r7, #31]
 800b8b0:	e0c5      	b.n	800ba3e <UART_SetConfig+0x346>
 800b8b2:	2308      	movs	r3, #8
 800b8b4:	77fb      	strb	r3, [r7, #31]
 800b8b6:	e0c2      	b.n	800ba3e <UART_SetConfig+0x346>
 800b8b8:	2310      	movs	r3, #16
 800b8ba:	77fb      	strb	r3, [r7, #31]
 800b8bc:	e0bf      	b.n	800ba3e <UART_SetConfig+0x346>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a45      	ldr	r2, [pc, #276]	; (800b9d8 <UART_SetConfig+0x2e0>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d125      	bne.n	800b914 <UART_SetConfig+0x21c>
 800b8c8:	4b3f      	ldr	r3, [pc, #252]	; (800b9c8 <UART_SetConfig+0x2d0>)
 800b8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8d6:	d017      	beq.n	800b908 <UART_SetConfig+0x210>
 800b8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8dc:	d817      	bhi.n	800b90e <UART_SetConfig+0x216>
 800b8de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8e2:	d00b      	beq.n	800b8fc <UART_SetConfig+0x204>
 800b8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8e8:	d811      	bhi.n	800b90e <UART_SetConfig+0x216>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d003      	beq.n	800b8f6 <UART_SetConfig+0x1fe>
 800b8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f2:	d006      	beq.n	800b902 <UART_SetConfig+0x20a>
 800b8f4:	e00b      	b.n	800b90e <UART_SetConfig+0x216>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	77fb      	strb	r3, [r7, #31]
 800b8fa:	e0a0      	b.n	800ba3e <UART_SetConfig+0x346>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	77fb      	strb	r3, [r7, #31]
 800b900:	e09d      	b.n	800ba3e <UART_SetConfig+0x346>
 800b902:	2304      	movs	r3, #4
 800b904:	77fb      	strb	r3, [r7, #31]
 800b906:	e09a      	b.n	800ba3e <UART_SetConfig+0x346>
 800b908:	2308      	movs	r3, #8
 800b90a:	77fb      	strb	r3, [r7, #31]
 800b90c:	e097      	b.n	800ba3e <UART_SetConfig+0x346>
 800b90e:	2310      	movs	r3, #16
 800b910:	77fb      	strb	r3, [r7, #31]
 800b912:	e094      	b.n	800ba3e <UART_SetConfig+0x346>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a30      	ldr	r2, [pc, #192]	; (800b9dc <UART_SetConfig+0x2e4>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d125      	bne.n	800b96a <UART_SetConfig+0x272>
 800b91e:	4b2a      	ldr	r3, [pc, #168]	; (800b9c8 <UART_SetConfig+0x2d0>)
 800b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b928:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b92c:	d017      	beq.n	800b95e <UART_SetConfig+0x266>
 800b92e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b932:	d817      	bhi.n	800b964 <UART_SetConfig+0x26c>
 800b934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b938:	d00b      	beq.n	800b952 <UART_SetConfig+0x25a>
 800b93a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b93e:	d811      	bhi.n	800b964 <UART_SetConfig+0x26c>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d003      	beq.n	800b94c <UART_SetConfig+0x254>
 800b944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b948:	d006      	beq.n	800b958 <UART_SetConfig+0x260>
 800b94a:	e00b      	b.n	800b964 <UART_SetConfig+0x26c>
 800b94c:	2301      	movs	r3, #1
 800b94e:	77fb      	strb	r3, [r7, #31]
 800b950:	e075      	b.n	800ba3e <UART_SetConfig+0x346>
 800b952:	2302      	movs	r3, #2
 800b954:	77fb      	strb	r3, [r7, #31]
 800b956:	e072      	b.n	800ba3e <UART_SetConfig+0x346>
 800b958:	2304      	movs	r3, #4
 800b95a:	77fb      	strb	r3, [r7, #31]
 800b95c:	e06f      	b.n	800ba3e <UART_SetConfig+0x346>
 800b95e:	2308      	movs	r3, #8
 800b960:	77fb      	strb	r3, [r7, #31]
 800b962:	e06c      	b.n	800ba3e <UART_SetConfig+0x346>
 800b964:	2310      	movs	r3, #16
 800b966:	77fb      	strb	r3, [r7, #31]
 800b968:	e069      	b.n	800ba3e <UART_SetConfig+0x346>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a1c      	ldr	r2, [pc, #112]	; (800b9e0 <UART_SetConfig+0x2e8>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d137      	bne.n	800b9e4 <UART_SetConfig+0x2ec>
 800b974:	4b14      	ldr	r3, [pc, #80]	; (800b9c8 <UART_SetConfig+0x2d0>)
 800b976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b97a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b97e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b982:	d017      	beq.n	800b9b4 <UART_SetConfig+0x2bc>
 800b984:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b988:	d817      	bhi.n	800b9ba <UART_SetConfig+0x2c2>
 800b98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b98e:	d00b      	beq.n	800b9a8 <UART_SetConfig+0x2b0>
 800b990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b994:	d811      	bhi.n	800b9ba <UART_SetConfig+0x2c2>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <UART_SetConfig+0x2aa>
 800b99a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b99e:	d006      	beq.n	800b9ae <UART_SetConfig+0x2b6>
 800b9a0:	e00b      	b.n	800b9ba <UART_SetConfig+0x2c2>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	77fb      	strb	r3, [r7, #31]
 800b9a6:	e04a      	b.n	800ba3e <UART_SetConfig+0x346>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	77fb      	strb	r3, [r7, #31]
 800b9ac:	e047      	b.n	800ba3e <UART_SetConfig+0x346>
 800b9ae:	2304      	movs	r3, #4
 800b9b0:	77fb      	strb	r3, [r7, #31]
 800b9b2:	e044      	b.n	800ba3e <UART_SetConfig+0x346>
 800b9b4:	2308      	movs	r3, #8
 800b9b6:	77fb      	strb	r3, [r7, #31]
 800b9b8:	e041      	b.n	800ba3e <UART_SetConfig+0x346>
 800b9ba:	2310      	movs	r3, #16
 800b9bc:	77fb      	strb	r3, [r7, #31]
 800b9be:	e03e      	b.n	800ba3e <UART_SetConfig+0x346>
 800b9c0:	efff69f3 	.word	0xefff69f3
 800b9c4:	40011000 	.word	0x40011000
 800b9c8:	40023800 	.word	0x40023800
 800b9cc:	40004400 	.word	0x40004400
 800b9d0:	40004800 	.word	0x40004800
 800b9d4:	40004c00 	.word	0x40004c00
 800b9d8:	40005000 	.word	0x40005000
 800b9dc:	40011400 	.word	0x40011400
 800b9e0:	40007800 	.word	0x40007800
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a71      	ldr	r2, [pc, #452]	; (800bbb0 <UART_SetConfig+0x4b8>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d125      	bne.n	800ba3a <UART_SetConfig+0x342>
 800b9ee:	4b71      	ldr	r3, [pc, #452]	; (800bbb4 <UART_SetConfig+0x4bc>)
 800b9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b9f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b9fc:	d017      	beq.n	800ba2e <UART_SetConfig+0x336>
 800b9fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ba02:	d817      	bhi.n	800ba34 <UART_SetConfig+0x33c>
 800ba04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba08:	d00b      	beq.n	800ba22 <UART_SetConfig+0x32a>
 800ba0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba0e:	d811      	bhi.n	800ba34 <UART_SetConfig+0x33c>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <UART_SetConfig+0x324>
 800ba14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba18:	d006      	beq.n	800ba28 <UART_SetConfig+0x330>
 800ba1a:	e00b      	b.n	800ba34 <UART_SetConfig+0x33c>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	77fb      	strb	r3, [r7, #31]
 800ba20:	e00d      	b.n	800ba3e <UART_SetConfig+0x346>
 800ba22:	2302      	movs	r3, #2
 800ba24:	77fb      	strb	r3, [r7, #31]
 800ba26:	e00a      	b.n	800ba3e <UART_SetConfig+0x346>
 800ba28:	2304      	movs	r3, #4
 800ba2a:	77fb      	strb	r3, [r7, #31]
 800ba2c:	e007      	b.n	800ba3e <UART_SetConfig+0x346>
 800ba2e:	2308      	movs	r3, #8
 800ba30:	77fb      	strb	r3, [r7, #31]
 800ba32:	e004      	b.n	800ba3e <UART_SetConfig+0x346>
 800ba34:	2310      	movs	r3, #16
 800ba36:	77fb      	strb	r3, [r7, #31]
 800ba38:	e001      	b.n	800ba3e <UART_SetConfig+0x346>
 800ba3a:	2310      	movs	r3, #16
 800ba3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba46:	d15b      	bne.n	800bb00 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800ba48:	7ffb      	ldrb	r3, [r7, #31]
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	d827      	bhi.n	800ba9e <UART_SetConfig+0x3a6>
 800ba4e:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <UART_SetConfig+0x35c>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800ba79 	.word	0x0800ba79
 800ba58:	0800ba81 	.word	0x0800ba81
 800ba5c:	0800ba89 	.word	0x0800ba89
 800ba60:	0800ba9f 	.word	0x0800ba9f
 800ba64:	0800ba8f 	.word	0x0800ba8f
 800ba68:	0800ba9f 	.word	0x0800ba9f
 800ba6c:	0800ba9f 	.word	0x0800ba9f
 800ba70:	0800ba9f 	.word	0x0800ba9f
 800ba74:	0800ba97 	.word	0x0800ba97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba78:	f7fd fa5a 	bl	8008f30 <HAL_RCC_GetPCLK1Freq>
 800ba7c:	61b8      	str	r0, [r7, #24]
        break;
 800ba7e:	e013      	b.n	800baa8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba80:	f7fd fa6a 	bl	8008f58 <HAL_RCC_GetPCLK2Freq>
 800ba84:	61b8      	str	r0, [r7, #24]
        break;
 800ba86:	e00f      	b.n	800baa8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba88:	4b4b      	ldr	r3, [pc, #300]	; (800bbb8 <UART_SetConfig+0x4c0>)
 800ba8a:	61bb      	str	r3, [r7, #24]
        break;
 800ba8c:	e00c      	b.n	800baa8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba8e:	f7fd f961 	bl	8008d54 <HAL_RCC_GetSysClockFreq>
 800ba92:	61b8      	str	r0, [r7, #24]
        break;
 800ba94:	e008      	b.n	800baa8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba9a:	61bb      	str	r3, [r7, #24]
        break;
 800ba9c:	e004      	b.n	800baa8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	77bb      	strb	r3, [r7, #30]
        break;
 800baa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d074      	beq.n	800bb98 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	005a      	lsls	r2, r3, #1
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	085b      	lsrs	r3, r3, #1
 800bab8:	441a      	add	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2b0f      	cmp	r3, #15
 800baca:	d916      	bls.n	800bafa <UART_SetConfig+0x402>
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bad2:	d212      	bcs.n	800bafa <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	f023 030f 	bic.w	r3, r3, #15
 800badc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	085b      	lsrs	r3, r3, #1
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	f003 0307 	and.w	r3, r3, #7
 800bae8:	b29a      	uxth	r2, r3
 800baea:	89fb      	ldrh	r3, [r7, #14]
 800baec:	4313      	orrs	r3, r2
 800baee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	89fa      	ldrh	r2, [r7, #14]
 800baf6:	60da      	str	r2, [r3, #12]
 800baf8:	e04e      	b.n	800bb98 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	77bb      	strb	r3, [r7, #30]
 800bafe:	e04b      	b.n	800bb98 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb00:	7ffb      	ldrb	r3, [r7, #31]
 800bb02:	2b08      	cmp	r3, #8
 800bb04:	d827      	bhi.n	800bb56 <UART_SetConfig+0x45e>
 800bb06:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <UART_SetConfig+0x414>)
 800bb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0c:	0800bb31 	.word	0x0800bb31
 800bb10:	0800bb39 	.word	0x0800bb39
 800bb14:	0800bb41 	.word	0x0800bb41
 800bb18:	0800bb57 	.word	0x0800bb57
 800bb1c:	0800bb47 	.word	0x0800bb47
 800bb20:	0800bb57 	.word	0x0800bb57
 800bb24:	0800bb57 	.word	0x0800bb57
 800bb28:	0800bb57 	.word	0x0800bb57
 800bb2c:	0800bb4f 	.word	0x0800bb4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb30:	f7fd f9fe 	bl	8008f30 <HAL_RCC_GetPCLK1Freq>
 800bb34:	61b8      	str	r0, [r7, #24]
        break;
 800bb36:	e013      	b.n	800bb60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb38:	f7fd fa0e 	bl	8008f58 <HAL_RCC_GetPCLK2Freq>
 800bb3c:	61b8      	str	r0, [r7, #24]
        break;
 800bb3e:	e00f      	b.n	800bb60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb40:	4b1d      	ldr	r3, [pc, #116]	; (800bbb8 <UART_SetConfig+0x4c0>)
 800bb42:	61bb      	str	r3, [r7, #24]
        break;
 800bb44:	e00c      	b.n	800bb60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb46:	f7fd f905 	bl	8008d54 <HAL_RCC_GetSysClockFreq>
 800bb4a:	61b8      	str	r0, [r7, #24]
        break;
 800bb4c:	e008      	b.n	800bb60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb52:	61bb      	str	r3, [r7, #24]
        break;
 800bb54:	e004      	b.n	800bb60 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	77bb      	strb	r3, [r7, #30]
        break;
 800bb5e:	bf00      	nop
    }

    if (pclk != 0U)
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d018      	beq.n	800bb98 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	085a      	lsrs	r2, r3, #1
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	441a      	add	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2b0f      	cmp	r3, #15
 800bb80:	d908      	bls.n	800bb94 <UART_SetConfig+0x49c>
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb88:	d204      	bcs.n	800bb94 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	60da      	str	r2, [r3, #12]
 800bb92:	e001      	b.n	800bb98 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bba4:	7fbb      	ldrb	r3, [r7, #30]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3720      	adds	r7, #32
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	40007c00 	.word	0x40007c00
 800bbb4:	40023800 	.word	0x40023800
 800bbb8:	00f42400 	.word	0x00f42400

0800bbbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00a      	beq.n	800bbe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	f003 0302 	and.w	r3, r3, #2
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	430a      	orrs	r2, r1
 800bc06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00a      	beq.n	800bc2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2e:	f003 0308 	and.w	r3, r3, #8
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00a      	beq.n	800bc4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	f003 0310 	and.w	r3, r3, #16
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01a      	beq.n	800bcd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcba:	d10a      	bne.n	800bcd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00a      	beq.n	800bcf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	605a      	str	r2, [r3, #4]
  }
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af02      	add	r7, sp, #8
 800bd06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd10:	f7fa fd38 	bl	8006784 <HAL_GetTick>
 800bd14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0308 	and.w	r3, r3, #8
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	d10e      	bne.n	800bd42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f82d 	bl	800bd92 <UART_WaitOnFlagUntilTimeout>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e023      	b.n	800bd8a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d10e      	bne.n	800bd6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f817 	bl	800bd92 <UART_WaitOnFlagUntilTimeout>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	e00d      	b.n	800bd8a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2220      	movs	r2, #32
 800bd78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	603b      	str	r3, [r7, #0]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bda2:	e05e      	b.n	800be62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdaa:	d05a      	beq.n	800be62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdac:	f7fa fcea 	bl	8006784 <HAL_GetTick>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d302      	bcc.n	800bdc2 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d11b      	bne.n	800bdfa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	689a      	ldr	r2, [r3, #8]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 0201 	bic.w	r2, r2, #1
 800bde0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2220      	movs	r2, #32
 800bde6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2220      	movs	r2, #32
 800bdec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e043      	b.n	800be82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 0304 	and.w	r3, r3, #4
 800be04:	2b00      	cmp	r3, #0
 800be06:	d02c      	beq.n	800be62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be16:	d124      	bne.n	800be62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be30:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689a      	ldr	r2, [r3, #8]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f022 0201 	bic.w	r2, r2, #1
 800be40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2220      	movs	r2, #32
 800be46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2220      	movs	r2, #32
 800be4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2220      	movs	r2, #32
 800be52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e00f      	b.n	800be82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69da      	ldr	r2, [r3, #28]
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	4013      	ands	r3, r2
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	429a      	cmp	r2, r3
 800be70:	bf0c      	ite	eq
 800be72:	2301      	moveq	r3, #1
 800be74:	2300      	movne	r3, #0
 800be76:	b2db      	uxtb	r3, r3
 800be78:	461a      	mov	r2, r3
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d091      	beq.n	800bda4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <__errno>:
 800be8c:	4b01      	ldr	r3, [pc, #4]	; (800be94 <__errno+0x8>)
 800be8e:	6818      	ldr	r0, [r3, #0]
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	200000dc 	.word	0x200000dc

0800be98 <__libc_init_array>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	4d0d      	ldr	r5, [pc, #52]	; (800bed0 <__libc_init_array+0x38>)
 800be9c:	4c0d      	ldr	r4, [pc, #52]	; (800bed4 <__libc_init_array+0x3c>)
 800be9e:	1b64      	subs	r4, r4, r5
 800bea0:	10a4      	asrs	r4, r4, #2
 800bea2:	2600      	movs	r6, #0
 800bea4:	42a6      	cmp	r6, r4
 800bea6:	d109      	bne.n	800bebc <__libc_init_array+0x24>
 800bea8:	4d0b      	ldr	r5, [pc, #44]	; (800bed8 <__libc_init_array+0x40>)
 800beaa:	4c0c      	ldr	r4, [pc, #48]	; (800bedc <__libc_init_array+0x44>)
 800beac:	f002 fe24 	bl	800eaf8 <_init>
 800beb0:	1b64      	subs	r4, r4, r5
 800beb2:	10a4      	asrs	r4, r4, #2
 800beb4:	2600      	movs	r6, #0
 800beb6:	42a6      	cmp	r6, r4
 800beb8:	d105      	bne.n	800bec6 <__libc_init_array+0x2e>
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec0:	4798      	blx	r3
 800bec2:	3601      	adds	r6, #1
 800bec4:	e7ee      	b.n	800bea4 <__libc_init_array+0xc>
 800bec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800beca:	4798      	blx	r3
 800becc:	3601      	adds	r6, #1
 800bece:	e7f2      	b.n	800beb6 <__libc_init_array+0x1e>
 800bed0:	0800f324 	.word	0x0800f324
 800bed4:	0800f324 	.word	0x0800f324
 800bed8:	0800f324 	.word	0x0800f324
 800bedc:	0800f328 	.word	0x0800f328

0800bee0 <memset>:
 800bee0:	4402      	add	r2, r0
 800bee2:	4603      	mov	r3, r0
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d100      	bne.n	800beea <memset+0xa>
 800bee8:	4770      	bx	lr
 800beea:	f803 1b01 	strb.w	r1, [r3], #1
 800beee:	e7f9      	b.n	800bee4 <memset+0x4>

0800bef0 <__cvt>:
 800bef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bef2:	ed2d 8b02 	vpush	{d8}
 800bef6:	eeb0 8b40 	vmov.f64	d8, d0
 800befa:	b085      	sub	sp, #20
 800befc:	4617      	mov	r7, r2
 800befe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bf00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bf02:	ee18 2a90 	vmov	r2, s17
 800bf06:	f025 0520 	bic.w	r5, r5, #32
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	bfb6      	itet	lt
 800bf0e:	222d      	movlt	r2, #45	; 0x2d
 800bf10:	2200      	movge	r2, #0
 800bf12:	eeb1 8b40 	vneglt.f64	d8, d0
 800bf16:	2d46      	cmp	r5, #70	; 0x46
 800bf18:	460c      	mov	r4, r1
 800bf1a:	701a      	strb	r2, [r3, #0]
 800bf1c:	d004      	beq.n	800bf28 <__cvt+0x38>
 800bf1e:	2d45      	cmp	r5, #69	; 0x45
 800bf20:	d100      	bne.n	800bf24 <__cvt+0x34>
 800bf22:	3401      	adds	r4, #1
 800bf24:	2102      	movs	r1, #2
 800bf26:	e000      	b.n	800bf2a <__cvt+0x3a>
 800bf28:	2103      	movs	r1, #3
 800bf2a:	ab03      	add	r3, sp, #12
 800bf2c:	9301      	str	r3, [sp, #4]
 800bf2e:	ab02      	add	r3, sp, #8
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	4622      	mov	r2, r4
 800bf34:	4633      	mov	r3, r6
 800bf36:	eeb0 0b48 	vmov.f64	d0, d8
 800bf3a:	f000 fcc9 	bl	800c8d0 <_dtoa_r>
 800bf3e:	2d47      	cmp	r5, #71	; 0x47
 800bf40:	d109      	bne.n	800bf56 <__cvt+0x66>
 800bf42:	07fb      	lsls	r3, r7, #31
 800bf44:	d407      	bmi.n	800bf56 <__cvt+0x66>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf4a:	1a1b      	subs	r3, r3, r0
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	b005      	add	sp, #20
 800bf50:	ecbd 8b02 	vpop	{d8}
 800bf54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf56:	2d46      	cmp	r5, #70	; 0x46
 800bf58:	eb00 0204 	add.w	r2, r0, r4
 800bf5c:	d10c      	bne.n	800bf78 <__cvt+0x88>
 800bf5e:	7803      	ldrb	r3, [r0, #0]
 800bf60:	2b30      	cmp	r3, #48	; 0x30
 800bf62:	d107      	bne.n	800bf74 <__cvt+0x84>
 800bf64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6c:	bf1c      	itt	ne
 800bf6e:	f1c4 0401 	rsbne	r4, r4, #1
 800bf72:	6034      	strne	r4, [r6, #0]
 800bf74:	6833      	ldr	r3, [r6, #0]
 800bf76:	441a      	add	r2, r3
 800bf78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	bf08      	it	eq
 800bf82:	9203      	streq	r2, [sp, #12]
 800bf84:	2130      	movs	r1, #48	; 0x30
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d2dc      	bcs.n	800bf46 <__cvt+0x56>
 800bf8c:	1c5c      	adds	r4, r3, #1
 800bf8e:	9403      	str	r4, [sp, #12]
 800bf90:	7019      	strb	r1, [r3, #0]
 800bf92:	e7f8      	b.n	800bf86 <__cvt+0x96>

0800bf94 <__exponent>:
 800bf94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf96:	4603      	mov	r3, r0
 800bf98:	2900      	cmp	r1, #0
 800bf9a:	bfb8      	it	lt
 800bf9c:	4249      	neglt	r1, r1
 800bf9e:	f803 2b02 	strb.w	r2, [r3], #2
 800bfa2:	bfb4      	ite	lt
 800bfa4:	222d      	movlt	r2, #45	; 0x2d
 800bfa6:	222b      	movge	r2, #43	; 0x2b
 800bfa8:	2909      	cmp	r1, #9
 800bfaa:	7042      	strb	r2, [r0, #1]
 800bfac:	dd2a      	ble.n	800c004 <__exponent+0x70>
 800bfae:	f10d 0407 	add.w	r4, sp, #7
 800bfb2:	46a4      	mov	ip, r4
 800bfb4:	270a      	movs	r7, #10
 800bfb6:	46a6      	mov	lr, r4
 800bfb8:	460a      	mov	r2, r1
 800bfba:	fb91 f6f7 	sdiv	r6, r1, r7
 800bfbe:	fb07 1516 	mls	r5, r7, r6, r1
 800bfc2:	3530      	adds	r5, #48	; 0x30
 800bfc4:	2a63      	cmp	r2, #99	; 0x63
 800bfc6:	f104 34ff 	add.w	r4, r4, #4294967295
 800bfca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bfce:	4631      	mov	r1, r6
 800bfd0:	dcf1      	bgt.n	800bfb6 <__exponent+0x22>
 800bfd2:	3130      	adds	r1, #48	; 0x30
 800bfd4:	f1ae 0502 	sub.w	r5, lr, #2
 800bfd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bfdc:	1c44      	adds	r4, r0, #1
 800bfde:	4629      	mov	r1, r5
 800bfe0:	4561      	cmp	r1, ip
 800bfe2:	d30a      	bcc.n	800bffa <__exponent+0x66>
 800bfe4:	f10d 0209 	add.w	r2, sp, #9
 800bfe8:	eba2 020e 	sub.w	r2, r2, lr
 800bfec:	4565      	cmp	r5, ip
 800bfee:	bf88      	it	hi
 800bff0:	2200      	movhi	r2, #0
 800bff2:	4413      	add	r3, r2
 800bff4:	1a18      	subs	r0, r3, r0
 800bff6:	b003      	add	sp, #12
 800bff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bffe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c002:	e7ed      	b.n	800bfe0 <__exponent+0x4c>
 800c004:	2330      	movs	r3, #48	; 0x30
 800c006:	3130      	adds	r1, #48	; 0x30
 800c008:	7083      	strb	r3, [r0, #2]
 800c00a:	70c1      	strb	r1, [r0, #3]
 800c00c:	1d03      	adds	r3, r0, #4
 800c00e:	e7f1      	b.n	800bff4 <__exponent+0x60>

0800c010 <_printf_float>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	b08b      	sub	sp, #44	; 0x2c
 800c016:	460c      	mov	r4, r1
 800c018:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c01c:	4616      	mov	r6, r2
 800c01e:	461f      	mov	r7, r3
 800c020:	4605      	mov	r5, r0
 800c022:	f001 f9d7 	bl	800d3d4 <_localeconv_r>
 800c026:	f8d0 b000 	ldr.w	fp, [r0]
 800c02a:	4658      	mov	r0, fp
 800c02c:	f7f4 f908 	bl	8000240 <strlen>
 800c030:	2300      	movs	r3, #0
 800c032:	9308      	str	r3, [sp, #32]
 800c034:	f8d8 3000 	ldr.w	r3, [r8]
 800c038:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c03c:	6822      	ldr	r2, [r4, #0]
 800c03e:	3307      	adds	r3, #7
 800c040:	f023 0307 	bic.w	r3, r3, #7
 800c044:	f103 0108 	add.w	r1, r3, #8
 800c048:	f8c8 1000 	str.w	r1, [r8]
 800c04c:	4682      	mov	sl, r0
 800c04e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c052:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c056:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c2b8 <_printf_float+0x2a8>
 800c05a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c05e:	eeb0 6bc0 	vabs.f64	d6, d0
 800c062:	eeb4 6b47 	vcmp.f64	d6, d7
 800c066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06a:	dd24      	ble.n	800c0b6 <_printf_float+0xa6>
 800c06c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c074:	d502      	bpl.n	800c07c <_printf_float+0x6c>
 800c076:	232d      	movs	r3, #45	; 0x2d
 800c078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c07c:	4b90      	ldr	r3, [pc, #576]	; (800c2c0 <_printf_float+0x2b0>)
 800c07e:	4891      	ldr	r0, [pc, #580]	; (800c2c4 <_printf_float+0x2b4>)
 800c080:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c084:	bf94      	ite	ls
 800c086:	4698      	movls	r8, r3
 800c088:	4680      	movhi	r8, r0
 800c08a:	2303      	movs	r3, #3
 800c08c:	6123      	str	r3, [r4, #16]
 800c08e:	f022 0204 	bic.w	r2, r2, #4
 800c092:	2300      	movs	r3, #0
 800c094:	6022      	str	r2, [r4, #0]
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	9700      	str	r7, [sp, #0]
 800c09a:	4633      	mov	r3, r6
 800c09c:	aa09      	add	r2, sp, #36	; 0x24
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f000 f9d3 	bl	800c44c <_printf_common>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f040 808a 	bne.w	800c1c0 <_printf_float+0x1b0>
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b0:	b00b      	add	sp, #44	; 0x2c
 800c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b6:	eeb4 0b40 	vcmp.f64	d0, d0
 800c0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0be:	d709      	bvc.n	800c0d4 <_printf_float+0xc4>
 800c0c0:	ee10 3a90 	vmov	r3, s1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	bfbc      	itt	lt
 800c0c8:	232d      	movlt	r3, #45	; 0x2d
 800c0ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c0ce:	487e      	ldr	r0, [pc, #504]	; (800c2c8 <_printf_float+0x2b8>)
 800c0d0:	4b7e      	ldr	r3, [pc, #504]	; (800c2cc <_printf_float+0x2bc>)
 800c0d2:	e7d5      	b.n	800c080 <_printf_float+0x70>
 800c0d4:	6863      	ldr	r3, [r4, #4]
 800c0d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c0da:	9104      	str	r1, [sp, #16]
 800c0dc:	1c59      	adds	r1, r3, #1
 800c0de:	d13c      	bne.n	800c15a <_printf_float+0x14a>
 800c0e0:	2306      	movs	r3, #6
 800c0e2:	6063      	str	r3, [r4, #4]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	ab08      	add	r3, sp, #32
 800c0ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c0ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c0f2:	ab07      	add	r3, sp, #28
 800c0f4:	6861      	ldr	r1, [r4, #4]
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	6022      	str	r2, [r4, #0]
 800c0fa:	f10d 031b 	add.w	r3, sp, #27
 800c0fe:	4628      	mov	r0, r5
 800c100:	f7ff fef6 	bl	800bef0 <__cvt>
 800c104:	9b04      	ldr	r3, [sp, #16]
 800c106:	9907      	ldr	r1, [sp, #28]
 800c108:	2b47      	cmp	r3, #71	; 0x47
 800c10a:	4680      	mov	r8, r0
 800c10c:	d108      	bne.n	800c120 <_printf_float+0x110>
 800c10e:	1cc8      	adds	r0, r1, #3
 800c110:	db02      	blt.n	800c118 <_printf_float+0x108>
 800c112:	6863      	ldr	r3, [r4, #4]
 800c114:	4299      	cmp	r1, r3
 800c116:	dd41      	ble.n	800c19c <_printf_float+0x18c>
 800c118:	f1a9 0902 	sub.w	r9, r9, #2
 800c11c:	fa5f f989 	uxtb.w	r9, r9
 800c120:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c124:	d820      	bhi.n	800c168 <_printf_float+0x158>
 800c126:	3901      	subs	r1, #1
 800c128:	464a      	mov	r2, r9
 800c12a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c12e:	9107      	str	r1, [sp, #28]
 800c130:	f7ff ff30 	bl	800bf94 <__exponent>
 800c134:	9a08      	ldr	r2, [sp, #32]
 800c136:	9004      	str	r0, [sp, #16]
 800c138:	1813      	adds	r3, r2, r0
 800c13a:	2a01      	cmp	r2, #1
 800c13c:	6123      	str	r3, [r4, #16]
 800c13e:	dc02      	bgt.n	800c146 <_printf_float+0x136>
 800c140:	6822      	ldr	r2, [r4, #0]
 800c142:	07d2      	lsls	r2, r2, #31
 800c144:	d501      	bpl.n	800c14a <_printf_float+0x13a>
 800c146:	3301      	adds	r3, #1
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0a2      	beq.n	800c098 <_printf_float+0x88>
 800c152:	232d      	movs	r3, #45	; 0x2d
 800c154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c158:	e79e      	b.n	800c098 <_printf_float+0x88>
 800c15a:	9904      	ldr	r1, [sp, #16]
 800c15c:	2947      	cmp	r1, #71	; 0x47
 800c15e:	d1c1      	bne.n	800c0e4 <_printf_float+0xd4>
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1bf      	bne.n	800c0e4 <_printf_float+0xd4>
 800c164:	2301      	movs	r3, #1
 800c166:	e7bc      	b.n	800c0e2 <_printf_float+0xd2>
 800c168:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c16c:	d118      	bne.n	800c1a0 <_printf_float+0x190>
 800c16e:	2900      	cmp	r1, #0
 800c170:	6863      	ldr	r3, [r4, #4]
 800c172:	dd0b      	ble.n	800c18c <_printf_float+0x17c>
 800c174:	6121      	str	r1, [r4, #16]
 800c176:	b913      	cbnz	r3, 800c17e <_printf_float+0x16e>
 800c178:	6822      	ldr	r2, [r4, #0]
 800c17a:	07d0      	lsls	r0, r2, #31
 800c17c:	d502      	bpl.n	800c184 <_printf_float+0x174>
 800c17e:	3301      	adds	r3, #1
 800c180:	440b      	add	r3, r1
 800c182:	6123      	str	r3, [r4, #16]
 800c184:	2300      	movs	r3, #0
 800c186:	65a1      	str	r1, [r4, #88]	; 0x58
 800c188:	9304      	str	r3, [sp, #16]
 800c18a:	e7de      	b.n	800c14a <_printf_float+0x13a>
 800c18c:	b913      	cbnz	r3, 800c194 <_printf_float+0x184>
 800c18e:	6822      	ldr	r2, [r4, #0]
 800c190:	07d2      	lsls	r2, r2, #31
 800c192:	d501      	bpl.n	800c198 <_printf_float+0x188>
 800c194:	3302      	adds	r3, #2
 800c196:	e7f4      	b.n	800c182 <_printf_float+0x172>
 800c198:	2301      	movs	r3, #1
 800c19a:	e7f2      	b.n	800c182 <_printf_float+0x172>
 800c19c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c1a0:	9b08      	ldr	r3, [sp, #32]
 800c1a2:	4299      	cmp	r1, r3
 800c1a4:	db05      	blt.n	800c1b2 <_printf_float+0x1a2>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	6121      	str	r1, [r4, #16]
 800c1aa:	07d8      	lsls	r0, r3, #31
 800c1ac:	d5ea      	bpl.n	800c184 <_printf_float+0x174>
 800c1ae:	1c4b      	adds	r3, r1, #1
 800c1b0:	e7e7      	b.n	800c182 <_printf_float+0x172>
 800c1b2:	2900      	cmp	r1, #0
 800c1b4:	bfd4      	ite	le
 800c1b6:	f1c1 0202 	rsble	r2, r1, #2
 800c1ba:	2201      	movgt	r2, #1
 800c1bc:	4413      	add	r3, r2
 800c1be:	e7e0      	b.n	800c182 <_printf_float+0x172>
 800c1c0:	6823      	ldr	r3, [r4, #0]
 800c1c2:	055a      	lsls	r2, r3, #21
 800c1c4:	d407      	bmi.n	800c1d6 <_printf_float+0x1c6>
 800c1c6:	6923      	ldr	r3, [r4, #16]
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d12a      	bne.n	800c22a <_printf_float+0x21a>
 800c1d4:	e76a      	b.n	800c0ac <_printf_float+0x9c>
 800c1d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c1da:	f240 80e2 	bls.w	800c3a2 <_printf_float+0x392>
 800c1de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c1e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ea:	d133      	bne.n	800c254 <_printf_float+0x244>
 800c1ec:	4a38      	ldr	r2, [pc, #224]	; (800c2d0 <_printf_float+0x2c0>)
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	47b8      	blx	r7
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	f43f af58 	beq.w	800c0ac <_printf_float+0x9c>
 800c1fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c200:	429a      	cmp	r2, r3
 800c202:	db02      	blt.n	800c20a <_printf_float+0x1fa>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	07d8      	lsls	r0, r3, #31
 800c208:	d50f      	bpl.n	800c22a <_printf_float+0x21a>
 800c20a:	4653      	mov	r3, sl
 800c20c:	465a      	mov	r2, fp
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	f43f af49 	beq.w	800c0ac <_printf_float+0x9c>
 800c21a:	f04f 0800 	mov.w	r8, #0
 800c21e:	f104 091a 	add.w	r9, r4, #26
 800c222:	9b08      	ldr	r3, [sp, #32]
 800c224:	3b01      	subs	r3, #1
 800c226:	4543      	cmp	r3, r8
 800c228:	dc09      	bgt.n	800c23e <_printf_float+0x22e>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	079b      	lsls	r3, r3, #30
 800c22e:	f100 8108 	bmi.w	800c442 <_printf_float+0x432>
 800c232:	68e0      	ldr	r0, [r4, #12]
 800c234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c236:	4298      	cmp	r0, r3
 800c238:	bfb8      	it	lt
 800c23a:	4618      	movlt	r0, r3
 800c23c:	e738      	b.n	800c0b0 <_printf_float+0xa0>
 800c23e:	2301      	movs	r3, #1
 800c240:	464a      	mov	r2, r9
 800c242:	4631      	mov	r1, r6
 800c244:	4628      	mov	r0, r5
 800c246:	47b8      	blx	r7
 800c248:	3001      	adds	r0, #1
 800c24a:	f43f af2f 	beq.w	800c0ac <_printf_float+0x9c>
 800c24e:	f108 0801 	add.w	r8, r8, #1
 800c252:	e7e6      	b.n	800c222 <_printf_float+0x212>
 800c254:	9b07      	ldr	r3, [sp, #28]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dc3c      	bgt.n	800c2d4 <_printf_float+0x2c4>
 800c25a:	4a1d      	ldr	r2, [pc, #116]	; (800c2d0 <_printf_float+0x2c0>)
 800c25c:	2301      	movs	r3, #1
 800c25e:	4631      	mov	r1, r6
 800c260:	4628      	mov	r0, r5
 800c262:	47b8      	blx	r7
 800c264:	3001      	adds	r0, #1
 800c266:	f43f af21 	beq.w	800c0ac <_printf_float+0x9c>
 800c26a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c26e:	4313      	orrs	r3, r2
 800c270:	d102      	bne.n	800c278 <_printf_float+0x268>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	07d9      	lsls	r1, r3, #31
 800c276:	d5d8      	bpl.n	800c22a <_printf_float+0x21a>
 800c278:	4653      	mov	r3, sl
 800c27a:	465a      	mov	r2, fp
 800c27c:	4631      	mov	r1, r6
 800c27e:	4628      	mov	r0, r5
 800c280:	47b8      	blx	r7
 800c282:	3001      	adds	r0, #1
 800c284:	f43f af12 	beq.w	800c0ac <_printf_float+0x9c>
 800c288:	f04f 0900 	mov.w	r9, #0
 800c28c:	f104 0a1a 	add.w	sl, r4, #26
 800c290:	9b07      	ldr	r3, [sp, #28]
 800c292:	425b      	negs	r3, r3
 800c294:	454b      	cmp	r3, r9
 800c296:	dc01      	bgt.n	800c29c <_printf_float+0x28c>
 800c298:	9b08      	ldr	r3, [sp, #32]
 800c29a:	e795      	b.n	800c1c8 <_printf_float+0x1b8>
 800c29c:	2301      	movs	r3, #1
 800c29e:	4652      	mov	r2, sl
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f af00 	beq.w	800c0ac <_printf_float+0x9c>
 800c2ac:	f109 0901 	add.w	r9, r9, #1
 800c2b0:	e7ee      	b.n	800c290 <_printf_float+0x280>
 800c2b2:	bf00      	nop
 800c2b4:	f3af 8000 	nop.w
 800c2b8:	ffffffff 	.word	0xffffffff
 800c2bc:	7fefffff 	.word	0x7fefffff
 800c2c0:	0800ef3c 	.word	0x0800ef3c
 800c2c4:	0800ef40 	.word	0x0800ef40
 800c2c8:	0800ef48 	.word	0x0800ef48
 800c2cc:	0800ef44 	.word	0x0800ef44
 800c2d0:	0800ef4c 	.word	0x0800ef4c
 800c2d4:	9a08      	ldr	r2, [sp, #32]
 800c2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	bfa8      	it	ge
 800c2dc:	461a      	movge	r2, r3
 800c2de:	2a00      	cmp	r2, #0
 800c2e0:	4691      	mov	r9, r2
 800c2e2:	dc38      	bgt.n	800c356 <_printf_float+0x346>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9305      	str	r3, [sp, #20]
 800c2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2ec:	f104 021a 	add.w	r2, r4, #26
 800c2f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2f2:	9905      	ldr	r1, [sp, #20]
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	eba3 0309 	sub.w	r3, r3, r9
 800c2fa:	428b      	cmp	r3, r1
 800c2fc:	dc33      	bgt.n	800c366 <_printf_float+0x356>
 800c2fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c302:	429a      	cmp	r2, r3
 800c304:	db3c      	blt.n	800c380 <_printf_float+0x370>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	07da      	lsls	r2, r3, #31
 800c30a:	d439      	bmi.n	800c380 <_printf_float+0x370>
 800c30c:	9a08      	ldr	r2, [sp, #32]
 800c30e:	9b04      	ldr	r3, [sp, #16]
 800c310:	9907      	ldr	r1, [sp, #28]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	eba2 0901 	sub.w	r9, r2, r1
 800c318:	4599      	cmp	r9, r3
 800c31a:	bfa8      	it	ge
 800c31c:	4699      	movge	r9, r3
 800c31e:	f1b9 0f00 	cmp.w	r9, #0
 800c322:	dc35      	bgt.n	800c390 <_printf_float+0x380>
 800c324:	f04f 0800 	mov.w	r8, #0
 800c328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c32c:	f104 0a1a 	add.w	sl, r4, #26
 800c330:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c334:	1a9b      	subs	r3, r3, r2
 800c336:	eba3 0309 	sub.w	r3, r3, r9
 800c33a:	4543      	cmp	r3, r8
 800c33c:	f77f af75 	ble.w	800c22a <_printf_float+0x21a>
 800c340:	2301      	movs	r3, #1
 800c342:	4652      	mov	r2, sl
 800c344:	4631      	mov	r1, r6
 800c346:	4628      	mov	r0, r5
 800c348:	47b8      	blx	r7
 800c34a:	3001      	adds	r0, #1
 800c34c:	f43f aeae 	beq.w	800c0ac <_printf_float+0x9c>
 800c350:	f108 0801 	add.w	r8, r8, #1
 800c354:	e7ec      	b.n	800c330 <_printf_float+0x320>
 800c356:	4613      	mov	r3, r2
 800c358:	4631      	mov	r1, r6
 800c35a:	4642      	mov	r2, r8
 800c35c:	4628      	mov	r0, r5
 800c35e:	47b8      	blx	r7
 800c360:	3001      	adds	r0, #1
 800c362:	d1bf      	bne.n	800c2e4 <_printf_float+0x2d4>
 800c364:	e6a2      	b.n	800c0ac <_printf_float+0x9c>
 800c366:	2301      	movs	r3, #1
 800c368:	4631      	mov	r1, r6
 800c36a:	4628      	mov	r0, r5
 800c36c:	9204      	str	r2, [sp, #16]
 800c36e:	47b8      	blx	r7
 800c370:	3001      	adds	r0, #1
 800c372:	f43f ae9b 	beq.w	800c0ac <_printf_float+0x9c>
 800c376:	9b05      	ldr	r3, [sp, #20]
 800c378:	9a04      	ldr	r2, [sp, #16]
 800c37a:	3301      	adds	r3, #1
 800c37c:	9305      	str	r3, [sp, #20]
 800c37e:	e7b7      	b.n	800c2f0 <_printf_float+0x2e0>
 800c380:	4653      	mov	r3, sl
 800c382:	465a      	mov	r2, fp
 800c384:	4631      	mov	r1, r6
 800c386:	4628      	mov	r0, r5
 800c388:	47b8      	blx	r7
 800c38a:	3001      	adds	r0, #1
 800c38c:	d1be      	bne.n	800c30c <_printf_float+0x2fc>
 800c38e:	e68d      	b.n	800c0ac <_printf_float+0x9c>
 800c390:	9a04      	ldr	r2, [sp, #16]
 800c392:	464b      	mov	r3, r9
 800c394:	4442      	add	r2, r8
 800c396:	4631      	mov	r1, r6
 800c398:	4628      	mov	r0, r5
 800c39a:	47b8      	blx	r7
 800c39c:	3001      	adds	r0, #1
 800c39e:	d1c1      	bne.n	800c324 <_printf_float+0x314>
 800c3a0:	e684      	b.n	800c0ac <_printf_float+0x9c>
 800c3a2:	9a08      	ldr	r2, [sp, #32]
 800c3a4:	2a01      	cmp	r2, #1
 800c3a6:	dc01      	bgt.n	800c3ac <_printf_float+0x39c>
 800c3a8:	07db      	lsls	r3, r3, #31
 800c3aa:	d537      	bpl.n	800c41c <_printf_float+0x40c>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	4642      	mov	r2, r8
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	47b8      	blx	r7
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	f43f ae78 	beq.w	800c0ac <_printf_float+0x9c>
 800c3bc:	4653      	mov	r3, sl
 800c3be:	465a      	mov	r2, fp
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	47b8      	blx	r7
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	f43f ae70 	beq.w	800c0ac <_printf_float+0x9c>
 800c3cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c3d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d8:	d01b      	beq.n	800c412 <_printf_float+0x402>
 800c3da:	9b08      	ldr	r3, [sp, #32]
 800c3dc:	f108 0201 	add.w	r2, r8, #1
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	4631      	mov	r1, r6
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	47b8      	blx	r7
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d10e      	bne.n	800c40a <_printf_float+0x3fa>
 800c3ec:	e65e      	b.n	800c0ac <_printf_float+0x9c>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	464a      	mov	r2, r9
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	47b8      	blx	r7
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	f43f ae57 	beq.w	800c0ac <_printf_float+0x9c>
 800c3fe:	f108 0801 	add.w	r8, r8, #1
 800c402:	9b08      	ldr	r3, [sp, #32]
 800c404:	3b01      	subs	r3, #1
 800c406:	4543      	cmp	r3, r8
 800c408:	dcf1      	bgt.n	800c3ee <_printf_float+0x3de>
 800c40a:	9b04      	ldr	r3, [sp, #16]
 800c40c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c410:	e6db      	b.n	800c1ca <_printf_float+0x1ba>
 800c412:	f04f 0800 	mov.w	r8, #0
 800c416:	f104 091a 	add.w	r9, r4, #26
 800c41a:	e7f2      	b.n	800c402 <_printf_float+0x3f2>
 800c41c:	2301      	movs	r3, #1
 800c41e:	4642      	mov	r2, r8
 800c420:	e7df      	b.n	800c3e2 <_printf_float+0x3d2>
 800c422:	2301      	movs	r3, #1
 800c424:	464a      	mov	r2, r9
 800c426:	4631      	mov	r1, r6
 800c428:	4628      	mov	r0, r5
 800c42a:	47b8      	blx	r7
 800c42c:	3001      	adds	r0, #1
 800c42e:	f43f ae3d 	beq.w	800c0ac <_printf_float+0x9c>
 800c432:	f108 0801 	add.w	r8, r8, #1
 800c436:	68e3      	ldr	r3, [r4, #12]
 800c438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c43a:	1a5b      	subs	r3, r3, r1
 800c43c:	4543      	cmp	r3, r8
 800c43e:	dcf0      	bgt.n	800c422 <_printf_float+0x412>
 800c440:	e6f7      	b.n	800c232 <_printf_float+0x222>
 800c442:	f04f 0800 	mov.w	r8, #0
 800c446:	f104 0919 	add.w	r9, r4, #25
 800c44a:	e7f4      	b.n	800c436 <_printf_float+0x426>

0800c44c <_printf_common>:
 800c44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c450:	4616      	mov	r6, r2
 800c452:	4699      	mov	r9, r3
 800c454:	688a      	ldr	r2, [r1, #8]
 800c456:	690b      	ldr	r3, [r1, #16]
 800c458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c45c:	4293      	cmp	r3, r2
 800c45e:	bfb8      	it	lt
 800c460:	4613      	movlt	r3, r2
 800c462:	6033      	str	r3, [r6, #0]
 800c464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c468:	4607      	mov	r7, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	b10a      	cbz	r2, 800c472 <_printf_common+0x26>
 800c46e:	3301      	adds	r3, #1
 800c470:	6033      	str	r3, [r6, #0]
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	0699      	lsls	r1, r3, #26
 800c476:	bf42      	ittt	mi
 800c478:	6833      	ldrmi	r3, [r6, #0]
 800c47a:	3302      	addmi	r3, #2
 800c47c:	6033      	strmi	r3, [r6, #0]
 800c47e:	6825      	ldr	r5, [r4, #0]
 800c480:	f015 0506 	ands.w	r5, r5, #6
 800c484:	d106      	bne.n	800c494 <_printf_common+0x48>
 800c486:	f104 0a19 	add.w	sl, r4, #25
 800c48a:	68e3      	ldr	r3, [r4, #12]
 800c48c:	6832      	ldr	r2, [r6, #0]
 800c48e:	1a9b      	subs	r3, r3, r2
 800c490:	42ab      	cmp	r3, r5
 800c492:	dc26      	bgt.n	800c4e2 <_printf_common+0x96>
 800c494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c498:	1e13      	subs	r3, r2, #0
 800c49a:	6822      	ldr	r2, [r4, #0]
 800c49c:	bf18      	it	ne
 800c49e:	2301      	movne	r3, #1
 800c4a0:	0692      	lsls	r2, r2, #26
 800c4a2:	d42b      	bmi.n	800c4fc <_printf_common+0xb0>
 800c4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	47c0      	blx	r8
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	d01e      	beq.n	800c4f0 <_printf_common+0xa4>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	68e5      	ldr	r5, [r4, #12]
 800c4b6:	6832      	ldr	r2, [r6, #0]
 800c4b8:	f003 0306 	and.w	r3, r3, #6
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	bf08      	it	eq
 800c4c0:	1aad      	subeq	r5, r5, r2
 800c4c2:	68a3      	ldr	r3, [r4, #8]
 800c4c4:	6922      	ldr	r2, [r4, #16]
 800c4c6:	bf0c      	ite	eq
 800c4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4cc:	2500      	movne	r5, #0
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	bfc4      	itt	gt
 800c4d2:	1a9b      	subgt	r3, r3, r2
 800c4d4:	18ed      	addgt	r5, r5, r3
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	341a      	adds	r4, #26
 800c4da:	42b5      	cmp	r5, r6
 800c4dc:	d11a      	bne.n	800c514 <_printf_common+0xc8>
 800c4de:	2000      	movs	r0, #0
 800c4e0:	e008      	b.n	800c4f4 <_printf_common+0xa8>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	4652      	mov	r2, sl
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	47c0      	blx	r8
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d103      	bne.n	800c4f8 <_printf_common+0xac>
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f8:	3501      	adds	r5, #1
 800c4fa:	e7c6      	b.n	800c48a <_printf_common+0x3e>
 800c4fc:	18e1      	adds	r1, r4, r3
 800c4fe:	1c5a      	adds	r2, r3, #1
 800c500:	2030      	movs	r0, #48	; 0x30
 800c502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c506:	4422      	add	r2, r4
 800c508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c50c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c510:	3302      	adds	r3, #2
 800c512:	e7c7      	b.n	800c4a4 <_printf_common+0x58>
 800c514:	2301      	movs	r3, #1
 800c516:	4622      	mov	r2, r4
 800c518:	4649      	mov	r1, r9
 800c51a:	4638      	mov	r0, r7
 800c51c:	47c0      	blx	r8
 800c51e:	3001      	adds	r0, #1
 800c520:	d0e6      	beq.n	800c4f0 <_printf_common+0xa4>
 800c522:	3601      	adds	r6, #1
 800c524:	e7d9      	b.n	800c4da <_printf_common+0x8e>
	...

0800c528 <_printf_i>:
 800c528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c52c:	460c      	mov	r4, r1
 800c52e:	4691      	mov	r9, r2
 800c530:	7e27      	ldrb	r7, [r4, #24]
 800c532:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c534:	2f78      	cmp	r7, #120	; 0x78
 800c536:	4680      	mov	r8, r0
 800c538:	469a      	mov	sl, r3
 800c53a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c53e:	d807      	bhi.n	800c550 <_printf_i+0x28>
 800c540:	2f62      	cmp	r7, #98	; 0x62
 800c542:	d80a      	bhi.n	800c55a <_printf_i+0x32>
 800c544:	2f00      	cmp	r7, #0
 800c546:	f000 80d8 	beq.w	800c6fa <_printf_i+0x1d2>
 800c54a:	2f58      	cmp	r7, #88	; 0x58
 800c54c:	f000 80a3 	beq.w	800c696 <_printf_i+0x16e>
 800c550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c558:	e03a      	b.n	800c5d0 <_printf_i+0xa8>
 800c55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c55e:	2b15      	cmp	r3, #21
 800c560:	d8f6      	bhi.n	800c550 <_printf_i+0x28>
 800c562:	a001      	add	r0, pc, #4	; (adr r0, 800c568 <_printf_i+0x40>)
 800c564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c568:	0800c5c1 	.word	0x0800c5c1
 800c56c:	0800c5d5 	.word	0x0800c5d5
 800c570:	0800c551 	.word	0x0800c551
 800c574:	0800c551 	.word	0x0800c551
 800c578:	0800c551 	.word	0x0800c551
 800c57c:	0800c551 	.word	0x0800c551
 800c580:	0800c5d5 	.word	0x0800c5d5
 800c584:	0800c551 	.word	0x0800c551
 800c588:	0800c551 	.word	0x0800c551
 800c58c:	0800c551 	.word	0x0800c551
 800c590:	0800c551 	.word	0x0800c551
 800c594:	0800c6e1 	.word	0x0800c6e1
 800c598:	0800c605 	.word	0x0800c605
 800c59c:	0800c6c3 	.word	0x0800c6c3
 800c5a0:	0800c551 	.word	0x0800c551
 800c5a4:	0800c551 	.word	0x0800c551
 800c5a8:	0800c703 	.word	0x0800c703
 800c5ac:	0800c551 	.word	0x0800c551
 800c5b0:	0800c605 	.word	0x0800c605
 800c5b4:	0800c551 	.word	0x0800c551
 800c5b8:	0800c551 	.word	0x0800c551
 800c5bc:	0800c6cb 	.word	0x0800c6cb
 800c5c0:	680b      	ldr	r3, [r1, #0]
 800c5c2:	1d1a      	adds	r2, r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	600a      	str	r2, [r1, #0]
 800c5c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e0a3      	b.n	800c71c <_printf_i+0x1f4>
 800c5d4:	6825      	ldr	r5, [r4, #0]
 800c5d6:	6808      	ldr	r0, [r1, #0]
 800c5d8:	062e      	lsls	r6, r5, #24
 800c5da:	f100 0304 	add.w	r3, r0, #4
 800c5de:	d50a      	bpl.n	800c5f6 <_printf_i+0xce>
 800c5e0:	6805      	ldr	r5, [r0, #0]
 800c5e2:	600b      	str	r3, [r1, #0]
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	da03      	bge.n	800c5f0 <_printf_i+0xc8>
 800c5e8:	232d      	movs	r3, #45	; 0x2d
 800c5ea:	426d      	negs	r5, r5
 800c5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5f0:	485e      	ldr	r0, [pc, #376]	; (800c76c <_printf_i+0x244>)
 800c5f2:	230a      	movs	r3, #10
 800c5f4:	e019      	b.n	800c62a <_printf_i+0x102>
 800c5f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c5fa:	6805      	ldr	r5, [r0, #0]
 800c5fc:	600b      	str	r3, [r1, #0]
 800c5fe:	bf18      	it	ne
 800c600:	b22d      	sxthne	r5, r5
 800c602:	e7ef      	b.n	800c5e4 <_printf_i+0xbc>
 800c604:	680b      	ldr	r3, [r1, #0]
 800c606:	6825      	ldr	r5, [r4, #0]
 800c608:	1d18      	adds	r0, r3, #4
 800c60a:	6008      	str	r0, [r1, #0]
 800c60c:	0628      	lsls	r0, r5, #24
 800c60e:	d501      	bpl.n	800c614 <_printf_i+0xec>
 800c610:	681d      	ldr	r5, [r3, #0]
 800c612:	e002      	b.n	800c61a <_printf_i+0xf2>
 800c614:	0669      	lsls	r1, r5, #25
 800c616:	d5fb      	bpl.n	800c610 <_printf_i+0xe8>
 800c618:	881d      	ldrh	r5, [r3, #0]
 800c61a:	4854      	ldr	r0, [pc, #336]	; (800c76c <_printf_i+0x244>)
 800c61c:	2f6f      	cmp	r7, #111	; 0x6f
 800c61e:	bf0c      	ite	eq
 800c620:	2308      	moveq	r3, #8
 800c622:	230a      	movne	r3, #10
 800c624:	2100      	movs	r1, #0
 800c626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c62a:	6866      	ldr	r6, [r4, #4]
 800c62c:	60a6      	str	r6, [r4, #8]
 800c62e:	2e00      	cmp	r6, #0
 800c630:	bfa2      	ittt	ge
 800c632:	6821      	ldrge	r1, [r4, #0]
 800c634:	f021 0104 	bicge.w	r1, r1, #4
 800c638:	6021      	strge	r1, [r4, #0]
 800c63a:	b90d      	cbnz	r5, 800c640 <_printf_i+0x118>
 800c63c:	2e00      	cmp	r6, #0
 800c63e:	d04d      	beq.n	800c6dc <_printf_i+0x1b4>
 800c640:	4616      	mov	r6, r2
 800c642:	fbb5 f1f3 	udiv	r1, r5, r3
 800c646:	fb03 5711 	mls	r7, r3, r1, r5
 800c64a:	5dc7      	ldrb	r7, [r0, r7]
 800c64c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c650:	462f      	mov	r7, r5
 800c652:	42bb      	cmp	r3, r7
 800c654:	460d      	mov	r5, r1
 800c656:	d9f4      	bls.n	800c642 <_printf_i+0x11a>
 800c658:	2b08      	cmp	r3, #8
 800c65a:	d10b      	bne.n	800c674 <_printf_i+0x14c>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	07df      	lsls	r7, r3, #31
 800c660:	d508      	bpl.n	800c674 <_printf_i+0x14c>
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	6861      	ldr	r1, [r4, #4]
 800c666:	4299      	cmp	r1, r3
 800c668:	bfde      	ittt	le
 800c66a:	2330      	movle	r3, #48	; 0x30
 800c66c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c670:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c674:	1b92      	subs	r2, r2, r6
 800c676:	6122      	str	r2, [r4, #16]
 800c678:	f8cd a000 	str.w	sl, [sp]
 800c67c:	464b      	mov	r3, r9
 800c67e:	aa03      	add	r2, sp, #12
 800c680:	4621      	mov	r1, r4
 800c682:	4640      	mov	r0, r8
 800c684:	f7ff fee2 	bl	800c44c <_printf_common>
 800c688:	3001      	adds	r0, #1
 800c68a:	d14c      	bne.n	800c726 <_printf_i+0x1fe>
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295
 800c690:	b004      	add	sp, #16
 800c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c696:	4835      	ldr	r0, [pc, #212]	; (800c76c <_printf_i+0x244>)
 800c698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	680e      	ldr	r6, [r1, #0]
 800c6a0:	061f      	lsls	r7, r3, #24
 800c6a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c6a6:	600e      	str	r6, [r1, #0]
 800c6a8:	d514      	bpl.n	800c6d4 <_printf_i+0x1ac>
 800c6aa:	07d9      	lsls	r1, r3, #31
 800c6ac:	bf44      	itt	mi
 800c6ae:	f043 0320 	orrmi.w	r3, r3, #32
 800c6b2:	6023      	strmi	r3, [r4, #0]
 800c6b4:	b91d      	cbnz	r5, 800c6be <_printf_i+0x196>
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	f023 0320 	bic.w	r3, r3, #32
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	2310      	movs	r3, #16
 800c6c0:	e7b0      	b.n	800c624 <_printf_i+0xfc>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	f043 0320 	orr.w	r3, r3, #32
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	2378      	movs	r3, #120	; 0x78
 800c6cc:	4828      	ldr	r0, [pc, #160]	; (800c770 <_printf_i+0x248>)
 800c6ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6d2:	e7e3      	b.n	800c69c <_printf_i+0x174>
 800c6d4:	065e      	lsls	r6, r3, #25
 800c6d6:	bf48      	it	mi
 800c6d8:	b2ad      	uxthmi	r5, r5
 800c6da:	e7e6      	b.n	800c6aa <_printf_i+0x182>
 800c6dc:	4616      	mov	r6, r2
 800c6de:	e7bb      	b.n	800c658 <_printf_i+0x130>
 800c6e0:	680b      	ldr	r3, [r1, #0]
 800c6e2:	6826      	ldr	r6, [r4, #0]
 800c6e4:	6960      	ldr	r0, [r4, #20]
 800c6e6:	1d1d      	adds	r5, r3, #4
 800c6e8:	600d      	str	r5, [r1, #0]
 800c6ea:	0635      	lsls	r5, r6, #24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	d501      	bpl.n	800c6f4 <_printf_i+0x1cc>
 800c6f0:	6018      	str	r0, [r3, #0]
 800c6f2:	e002      	b.n	800c6fa <_printf_i+0x1d2>
 800c6f4:	0671      	lsls	r1, r6, #25
 800c6f6:	d5fb      	bpl.n	800c6f0 <_printf_i+0x1c8>
 800c6f8:	8018      	strh	r0, [r3, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6123      	str	r3, [r4, #16]
 800c6fe:	4616      	mov	r6, r2
 800c700:	e7ba      	b.n	800c678 <_printf_i+0x150>
 800c702:	680b      	ldr	r3, [r1, #0]
 800c704:	1d1a      	adds	r2, r3, #4
 800c706:	600a      	str	r2, [r1, #0]
 800c708:	681e      	ldr	r6, [r3, #0]
 800c70a:	6862      	ldr	r2, [r4, #4]
 800c70c:	2100      	movs	r1, #0
 800c70e:	4630      	mov	r0, r6
 800c710:	f7f3 fd9e 	bl	8000250 <memchr>
 800c714:	b108      	cbz	r0, 800c71a <_printf_i+0x1f2>
 800c716:	1b80      	subs	r0, r0, r6
 800c718:	6060      	str	r0, [r4, #4]
 800c71a:	6863      	ldr	r3, [r4, #4]
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	2300      	movs	r3, #0
 800c720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c724:	e7a8      	b.n	800c678 <_printf_i+0x150>
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	4632      	mov	r2, r6
 800c72a:	4649      	mov	r1, r9
 800c72c:	4640      	mov	r0, r8
 800c72e:	47d0      	blx	sl
 800c730:	3001      	adds	r0, #1
 800c732:	d0ab      	beq.n	800c68c <_printf_i+0x164>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	079b      	lsls	r3, r3, #30
 800c738:	d413      	bmi.n	800c762 <_printf_i+0x23a>
 800c73a:	68e0      	ldr	r0, [r4, #12]
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	4298      	cmp	r0, r3
 800c740:	bfb8      	it	lt
 800c742:	4618      	movlt	r0, r3
 800c744:	e7a4      	b.n	800c690 <_printf_i+0x168>
 800c746:	2301      	movs	r3, #1
 800c748:	4632      	mov	r2, r6
 800c74a:	4649      	mov	r1, r9
 800c74c:	4640      	mov	r0, r8
 800c74e:	47d0      	blx	sl
 800c750:	3001      	adds	r0, #1
 800c752:	d09b      	beq.n	800c68c <_printf_i+0x164>
 800c754:	3501      	adds	r5, #1
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	9903      	ldr	r1, [sp, #12]
 800c75a:	1a5b      	subs	r3, r3, r1
 800c75c:	42ab      	cmp	r3, r5
 800c75e:	dcf2      	bgt.n	800c746 <_printf_i+0x21e>
 800c760:	e7eb      	b.n	800c73a <_printf_i+0x212>
 800c762:	2500      	movs	r5, #0
 800c764:	f104 0619 	add.w	r6, r4, #25
 800c768:	e7f5      	b.n	800c756 <_printf_i+0x22e>
 800c76a:	bf00      	nop
 800c76c:	0800ef4e 	.word	0x0800ef4e
 800c770:	0800ef5f 	.word	0x0800ef5f

0800c774 <siprintf>:
 800c774:	b40e      	push	{r1, r2, r3}
 800c776:	b500      	push	{lr}
 800c778:	b09c      	sub	sp, #112	; 0x70
 800c77a:	ab1d      	add	r3, sp, #116	; 0x74
 800c77c:	9002      	str	r0, [sp, #8]
 800c77e:	9006      	str	r0, [sp, #24]
 800c780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c784:	4809      	ldr	r0, [pc, #36]	; (800c7ac <siprintf+0x38>)
 800c786:	9107      	str	r1, [sp, #28]
 800c788:	9104      	str	r1, [sp, #16]
 800c78a:	4909      	ldr	r1, [pc, #36]	; (800c7b0 <siprintf+0x3c>)
 800c78c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c790:	9105      	str	r1, [sp, #20]
 800c792:	6800      	ldr	r0, [r0, #0]
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	a902      	add	r1, sp, #8
 800c798:	f001 faca 	bl	800dd30 <_svfiprintf_r>
 800c79c:	9b02      	ldr	r3, [sp, #8]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	701a      	strb	r2, [r3, #0]
 800c7a2:	b01c      	add	sp, #112	; 0x70
 800c7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a8:	b003      	add	sp, #12
 800c7aa:	4770      	bx	lr
 800c7ac:	200000dc 	.word	0x200000dc
 800c7b0:	ffff0208 	.word	0xffff0208

0800c7b4 <quorem>:
 800c7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	6903      	ldr	r3, [r0, #16]
 800c7ba:	690c      	ldr	r4, [r1, #16]
 800c7bc:	42a3      	cmp	r3, r4
 800c7be:	4607      	mov	r7, r0
 800c7c0:	f2c0 8081 	blt.w	800c8c6 <quorem+0x112>
 800c7c4:	3c01      	subs	r4, #1
 800c7c6:	f101 0814 	add.w	r8, r1, #20
 800c7ca:	f100 0514 	add.w	r5, r0, #20
 800c7ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c7e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c7ec:	d331      	bcc.n	800c852 <quorem+0x9e>
 800c7ee:	f04f 0e00 	mov.w	lr, #0
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	46ac      	mov	ip, r5
 800c7f6:	46f2      	mov	sl, lr
 800c7f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7fc:	b293      	uxth	r3, r2
 800c7fe:	fb06 e303 	mla	r3, r6, r3, lr
 800c802:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c806:	b29b      	uxth	r3, r3
 800c808:	ebaa 0303 	sub.w	r3, sl, r3
 800c80c:	0c12      	lsrs	r2, r2, #16
 800c80e:	f8dc a000 	ldr.w	sl, [ip]
 800c812:	fb06 e202 	mla	r2, r6, r2, lr
 800c816:	fa13 f38a 	uxtah	r3, r3, sl
 800c81a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c81e:	fa1f fa82 	uxth.w	sl, r2
 800c822:	f8dc 2000 	ldr.w	r2, [ip]
 800c826:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c82a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c82e:	b29b      	uxth	r3, r3
 800c830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c834:	4581      	cmp	r9, r0
 800c836:	f84c 3b04 	str.w	r3, [ip], #4
 800c83a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c83e:	d2db      	bcs.n	800c7f8 <quorem+0x44>
 800c840:	f855 300b 	ldr.w	r3, [r5, fp]
 800c844:	b92b      	cbnz	r3, 800c852 <quorem+0x9e>
 800c846:	9b01      	ldr	r3, [sp, #4]
 800c848:	3b04      	subs	r3, #4
 800c84a:	429d      	cmp	r5, r3
 800c84c:	461a      	mov	r2, r3
 800c84e:	d32e      	bcc.n	800c8ae <quorem+0xfa>
 800c850:	613c      	str	r4, [r7, #16]
 800c852:	4638      	mov	r0, r7
 800c854:	f001 f856 	bl	800d904 <__mcmp>
 800c858:	2800      	cmp	r0, #0
 800c85a:	db24      	blt.n	800c8a6 <quorem+0xf2>
 800c85c:	3601      	adds	r6, #1
 800c85e:	4628      	mov	r0, r5
 800c860:	f04f 0c00 	mov.w	ip, #0
 800c864:	f858 2b04 	ldr.w	r2, [r8], #4
 800c868:	f8d0 e000 	ldr.w	lr, [r0]
 800c86c:	b293      	uxth	r3, r2
 800c86e:	ebac 0303 	sub.w	r3, ip, r3
 800c872:	0c12      	lsrs	r2, r2, #16
 800c874:	fa13 f38e 	uxtah	r3, r3, lr
 800c878:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c87c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c880:	b29b      	uxth	r3, r3
 800c882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c886:	45c1      	cmp	r9, r8
 800c888:	f840 3b04 	str.w	r3, [r0], #4
 800c88c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c890:	d2e8      	bcs.n	800c864 <quorem+0xb0>
 800c892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c89a:	b922      	cbnz	r2, 800c8a6 <quorem+0xf2>
 800c89c:	3b04      	subs	r3, #4
 800c89e:	429d      	cmp	r5, r3
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	d30a      	bcc.n	800c8ba <quorem+0x106>
 800c8a4:	613c      	str	r4, [r7, #16]
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	b003      	add	sp, #12
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ae:	6812      	ldr	r2, [r2, #0]
 800c8b0:	3b04      	subs	r3, #4
 800c8b2:	2a00      	cmp	r2, #0
 800c8b4:	d1cc      	bne.n	800c850 <quorem+0x9c>
 800c8b6:	3c01      	subs	r4, #1
 800c8b8:	e7c7      	b.n	800c84a <quorem+0x96>
 800c8ba:	6812      	ldr	r2, [r2, #0]
 800c8bc:	3b04      	subs	r3, #4
 800c8be:	2a00      	cmp	r2, #0
 800c8c0:	d1f0      	bne.n	800c8a4 <quorem+0xf0>
 800c8c2:	3c01      	subs	r4, #1
 800c8c4:	e7eb      	b.n	800c89e <quorem+0xea>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	e7ee      	b.n	800c8a8 <quorem+0xf4>
 800c8ca:	0000      	movs	r0, r0
 800c8cc:	0000      	movs	r0, r0
	...

0800c8d0 <_dtoa_r>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	ec59 8b10 	vmov	r8, r9, d0
 800c8d8:	b095      	sub	sp, #84	; 0x54
 800c8da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8dc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c8de:	9107      	str	r1, [sp, #28]
 800c8e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c8e8:	9310      	str	r3, [sp, #64]	; 0x40
 800c8ea:	b975      	cbnz	r5, 800c90a <_dtoa_r+0x3a>
 800c8ec:	2010      	movs	r0, #16
 800c8ee:	f000 fd75 	bl	800d3dc <malloc>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	6270      	str	r0, [r6, #36]	; 0x24
 800c8f6:	b920      	cbnz	r0, 800c902 <_dtoa_r+0x32>
 800c8f8:	4bab      	ldr	r3, [pc, #684]	; (800cba8 <_dtoa_r+0x2d8>)
 800c8fa:	21ea      	movs	r1, #234	; 0xea
 800c8fc:	48ab      	ldr	r0, [pc, #684]	; (800cbac <_dtoa_r+0x2dc>)
 800c8fe:	f001 fb27 	bl	800df50 <__assert_func>
 800c902:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c906:	6005      	str	r5, [r0, #0]
 800c908:	60c5      	str	r5, [r0, #12]
 800c90a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c90c:	6819      	ldr	r1, [r3, #0]
 800c90e:	b151      	cbz	r1, 800c926 <_dtoa_r+0x56>
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	604a      	str	r2, [r1, #4]
 800c914:	2301      	movs	r3, #1
 800c916:	4093      	lsls	r3, r2
 800c918:	608b      	str	r3, [r1, #8]
 800c91a:	4630      	mov	r0, r6
 800c91c:	f000 fdb4 	bl	800d488 <_Bfree>
 800c920:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c922:	2200      	movs	r2, #0
 800c924:	601a      	str	r2, [r3, #0]
 800c926:	f1b9 0300 	subs.w	r3, r9, #0
 800c92a:	bfbb      	ittet	lt
 800c92c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c930:	9303      	strlt	r3, [sp, #12]
 800c932:	2300      	movge	r3, #0
 800c934:	2201      	movlt	r2, #1
 800c936:	bfac      	ite	ge
 800c938:	6023      	strge	r3, [r4, #0]
 800c93a:	6022      	strlt	r2, [r4, #0]
 800c93c:	4b9c      	ldr	r3, [pc, #624]	; (800cbb0 <_dtoa_r+0x2e0>)
 800c93e:	9c03      	ldr	r4, [sp, #12]
 800c940:	43a3      	bics	r3, r4
 800c942:	d11a      	bne.n	800c97a <_dtoa_r+0xaa>
 800c944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c946:	f242 730f 	movw	r3, #9999	; 0x270f
 800c94a:	6013      	str	r3, [r2, #0]
 800c94c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c950:	ea53 0308 	orrs.w	r3, r3, r8
 800c954:	f000 8512 	beq.w	800d37c <_dtoa_r+0xaac>
 800c958:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c95a:	b953      	cbnz	r3, 800c972 <_dtoa_r+0xa2>
 800c95c:	4b95      	ldr	r3, [pc, #596]	; (800cbb4 <_dtoa_r+0x2e4>)
 800c95e:	e01f      	b.n	800c9a0 <_dtoa_r+0xd0>
 800c960:	4b95      	ldr	r3, [pc, #596]	; (800cbb8 <_dtoa_r+0x2e8>)
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	3308      	adds	r3, #8
 800c966:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c968:	6013      	str	r3, [r2, #0]
 800c96a:	9800      	ldr	r0, [sp, #0]
 800c96c:	b015      	add	sp, #84	; 0x54
 800c96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c972:	4b90      	ldr	r3, [pc, #576]	; (800cbb4 <_dtoa_r+0x2e4>)
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	3303      	adds	r3, #3
 800c978:	e7f5      	b.n	800c966 <_dtoa_r+0x96>
 800c97a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c97e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c986:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c98a:	d10b      	bne.n	800c9a4 <_dtoa_r+0xd4>
 800c98c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c98e:	2301      	movs	r3, #1
 800c990:	6013      	str	r3, [r2, #0]
 800c992:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 84ee 	beq.w	800d376 <_dtoa_r+0xaa6>
 800c99a:	4888      	ldr	r0, [pc, #544]	; (800cbbc <_dtoa_r+0x2ec>)
 800c99c:	6018      	str	r0, [r3, #0]
 800c99e:	1e43      	subs	r3, r0, #1
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	e7e2      	b.n	800c96a <_dtoa_r+0x9a>
 800c9a4:	a913      	add	r1, sp, #76	; 0x4c
 800c9a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c9aa:	aa12      	add	r2, sp, #72	; 0x48
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f001 f84d 	bl	800da4c <__d2b>
 800c9b2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c9ba:	2900      	cmp	r1, #0
 800c9bc:	d047      	beq.n	800ca4e <_dtoa_r+0x17e>
 800c9be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c9c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c9c8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c9cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c9d0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c9d4:	2400      	movs	r4, #0
 800c9d6:	ec43 2b16 	vmov	d6, r2, r3
 800c9da:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c9de:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800cb90 <_dtoa_r+0x2c0>
 800c9e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c9e6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800cb98 <_dtoa_r+0x2c8>
 800c9ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c9ee:	eeb0 7b46 	vmov.f64	d7, d6
 800c9f2:	ee06 1a90 	vmov	s13, r1
 800c9f6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800c9fa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800cba0 <_dtoa_r+0x2d0>
 800c9fe:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ca02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ca06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ca0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca0e:	ee16 ba90 	vmov	fp, s13
 800ca12:	9411      	str	r4, [sp, #68]	; 0x44
 800ca14:	d508      	bpl.n	800ca28 <_dtoa_r+0x158>
 800ca16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ca1a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca22:	bf18      	it	ne
 800ca24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ca28:	f1bb 0f16 	cmp.w	fp, #22
 800ca2c:	d832      	bhi.n	800ca94 <_dtoa_r+0x1c4>
 800ca2e:	4b64      	ldr	r3, [pc, #400]	; (800cbc0 <_dtoa_r+0x2f0>)
 800ca30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca34:	ed93 7b00 	vldr	d7, [r3]
 800ca38:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ca3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca44:	d501      	bpl.n	800ca4a <_dtoa_r+0x17a>
 800ca46:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e023      	b.n	800ca96 <_dtoa_r+0x1c6>
 800ca4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ca50:	4401      	add	r1, r0
 800ca52:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ca56:	2b20      	cmp	r3, #32
 800ca58:	bfc3      	ittte	gt
 800ca5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ca5e:	fa04 f303 	lslgt.w	r3, r4, r3
 800ca62:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ca66:	f1c3 0320 	rsble	r3, r3, #32
 800ca6a:	bfc6      	itte	gt
 800ca6c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ca70:	ea43 0308 	orrgt.w	r3, r3, r8
 800ca74:	fa08 f303 	lslle.w	r3, r8, r3
 800ca78:	ee07 3a90 	vmov	s15, r3
 800ca7c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ca80:	3901      	subs	r1, #1
 800ca82:	ed8d 7b00 	vstr	d7, [sp]
 800ca86:	9c01      	ldr	r4, [sp, #4]
 800ca88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ca90:	2401      	movs	r4, #1
 800ca92:	e7a0      	b.n	800c9d6 <_dtoa_r+0x106>
 800ca94:	2301      	movs	r3, #1
 800ca96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca98:	1a43      	subs	r3, r0, r1
 800ca9a:	1e5a      	subs	r2, r3, #1
 800ca9c:	bf45      	ittet	mi
 800ca9e:	f1c3 0301 	rsbmi	r3, r3, #1
 800caa2:	9305      	strmi	r3, [sp, #20]
 800caa4:	2300      	movpl	r3, #0
 800caa6:	2300      	movmi	r3, #0
 800caa8:	9206      	str	r2, [sp, #24]
 800caaa:	bf54      	ite	pl
 800caac:	9305      	strpl	r3, [sp, #20]
 800caae:	9306      	strmi	r3, [sp, #24]
 800cab0:	f1bb 0f00 	cmp.w	fp, #0
 800cab4:	db18      	blt.n	800cae8 <_dtoa_r+0x218>
 800cab6:	9b06      	ldr	r3, [sp, #24]
 800cab8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800cabc:	445b      	add	r3, fp
 800cabe:	9306      	str	r3, [sp, #24]
 800cac0:	2300      	movs	r3, #0
 800cac2:	9a07      	ldr	r2, [sp, #28]
 800cac4:	2a09      	cmp	r2, #9
 800cac6:	d849      	bhi.n	800cb5c <_dtoa_r+0x28c>
 800cac8:	2a05      	cmp	r2, #5
 800caca:	bfc4      	itt	gt
 800cacc:	3a04      	subgt	r2, #4
 800cace:	9207      	strgt	r2, [sp, #28]
 800cad0:	9a07      	ldr	r2, [sp, #28]
 800cad2:	f1a2 0202 	sub.w	r2, r2, #2
 800cad6:	bfcc      	ite	gt
 800cad8:	2400      	movgt	r4, #0
 800cada:	2401      	movle	r4, #1
 800cadc:	2a03      	cmp	r2, #3
 800cade:	d848      	bhi.n	800cb72 <_dtoa_r+0x2a2>
 800cae0:	e8df f002 	tbb	[pc, r2]
 800cae4:	3a2c2e0b 	.word	0x3a2c2e0b
 800cae8:	9b05      	ldr	r3, [sp, #20]
 800caea:	2200      	movs	r2, #0
 800caec:	eba3 030b 	sub.w	r3, r3, fp
 800caf0:	9305      	str	r3, [sp, #20]
 800caf2:	920e      	str	r2, [sp, #56]	; 0x38
 800caf4:	f1cb 0300 	rsb	r3, fp, #0
 800caf8:	e7e3      	b.n	800cac2 <_dtoa_r+0x1f2>
 800cafa:	2200      	movs	r2, #0
 800cafc:	9208      	str	r2, [sp, #32]
 800cafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	dc39      	bgt.n	800cb78 <_dtoa_r+0x2a8>
 800cb04:	f04f 0a01 	mov.w	sl, #1
 800cb08:	46d1      	mov	r9, sl
 800cb0a:	4652      	mov	r2, sl
 800cb0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cb10:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cb12:	2100      	movs	r1, #0
 800cb14:	6079      	str	r1, [r7, #4]
 800cb16:	2004      	movs	r0, #4
 800cb18:	f100 0c14 	add.w	ip, r0, #20
 800cb1c:	4594      	cmp	ip, r2
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	d92f      	bls.n	800cb82 <_dtoa_r+0x2b2>
 800cb22:	4630      	mov	r0, r6
 800cb24:	930c      	str	r3, [sp, #48]	; 0x30
 800cb26:	f000 fc6f 	bl	800d408 <_Balloc>
 800cb2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb2c:	9000      	str	r0, [sp, #0]
 800cb2e:	4602      	mov	r2, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d149      	bne.n	800cbc8 <_dtoa_r+0x2f8>
 800cb34:	4b23      	ldr	r3, [pc, #140]	; (800cbc4 <_dtoa_r+0x2f4>)
 800cb36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb3a:	e6df      	b.n	800c8fc <_dtoa_r+0x2c>
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	e7dd      	b.n	800cafc <_dtoa_r+0x22c>
 800cb40:	2200      	movs	r2, #0
 800cb42:	9208      	str	r2, [sp, #32]
 800cb44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb46:	eb0b 0a02 	add.w	sl, fp, r2
 800cb4a:	f10a 0901 	add.w	r9, sl, #1
 800cb4e:	464a      	mov	r2, r9
 800cb50:	2a01      	cmp	r2, #1
 800cb52:	bfb8      	it	lt
 800cb54:	2201      	movlt	r2, #1
 800cb56:	e7db      	b.n	800cb10 <_dtoa_r+0x240>
 800cb58:	2201      	movs	r2, #1
 800cb5a:	e7f2      	b.n	800cb42 <_dtoa_r+0x272>
 800cb5c:	2401      	movs	r4, #1
 800cb5e:	2200      	movs	r2, #0
 800cb60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cb64:	f04f 3aff 	mov.w	sl, #4294967295
 800cb68:	2100      	movs	r1, #0
 800cb6a:	46d1      	mov	r9, sl
 800cb6c:	2212      	movs	r2, #18
 800cb6e:	9109      	str	r1, [sp, #36]	; 0x24
 800cb70:	e7ce      	b.n	800cb10 <_dtoa_r+0x240>
 800cb72:	2201      	movs	r2, #1
 800cb74:	9208      	str	r2, [sp, #32]
 800cb76:	e7f5      	b.n	800cb64 <_dtoa_r+0x294>
 800cb78:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800cb7c:	46d1      	mov	r9, sl
 800cb7e:	4652      	mov	r2, sl
 800cb80:	e7c6      	b.n	800cb10 <_dtoa_r+0x240>
 800cb82:	3101      	adds	r1, #1
 800cb84:	6079      	str	r1, [r7, #4]
 800cb86:	0040      	lsls	r0, r0, #1
 800cb88:	e7c6      	b.n	800cb18 <_dtoa_r+0x248>
 800cb8a:	bf00      	nop
 800cb8c:	f3af 8000 	nop.w
 800cb90:	636f4361 	.word	0x636f4361
 800cb94:	3fd287a7 	.word	0x3fd287a7
 800cb98:	8b60c8b3 	.word	0x8b60c8b3
 800cb9c:	3fc68a28 	.word	0x3fc68a28
 800cba0:	509f79fb 	.word	0x509f79fb
 800cba4:	3fd34413 	.word	0x3fd34413
 800cba8:	0800ef7d 	.word	0x0800ef7d
 800cbac:	0800ef94 	.word	0x0800ef94
 800cbb0:	7ff00000 	.word	0x7ff00000
 800cbb4:	0800ef79 	.word	0x0800ef79
 800cbb8:	0800ef70 	.word	0x0800ef70
 800cbbc:	0800ef4d 	.word	0x0800ef4d
 800cbc0:	0800f090 	.word	0x0800f090
 800cbc4:	0800eff3 	.word	0x0800eff3
 800cbc8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cbca:	9900      	ldr	r1, [sp, #0]
 800cbcc:	6011      	str	r1, [r2, #0]
 800cbce:	f1b9 0f0e 	cmp.w	r9, #14
 800cbd2:	d872      	bhi.n	800ccba <_dtoa_r+0x3ea>
 800cbd4:	2c00      	cmp	r4, #0
 800cbd6:	d070      	beq.n	800ccba <_dtoa_r+0x3ea>
 800cbd8:	f1bb 0f00 	cmp.w	fp, #0
 800cbdc:	f340 80a6 	ble.w	800cd2c <_dtoa_r+0x45c>
 800cbe0:	49ca      	ldr	r1, [pc, #808]	; (800cf0c <_dtoa_r+0x63c>)
 800cbe2:	f00b 020f 	and.w	r2, fp, #15
 800cbe6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cbea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cbee:	ed92 7b00 	vldr	d7, [r2]
 800cbf2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800cbf6:	f000 808d 	beq.w	800cd14 <_dtoa_r+0x444>
 800cbfa:	4ac5      	ldr	r2, [pc, #788]	; (800cf10 <_dtoa_r+0x640>)
 800cbfc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800cc00:	ed92 6b08 	vldr	d6, [r2, #32]
 800cc04:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800cc08:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cc0c:	f001 010f 	and.w	r1, r1, #15
 800cc10:	2203      	movs	r2, #3
 800cc12:	48bf      	ldr	r0, [pc, #764]	; (800cf10 <_dtoa_r+0x640>)
 800cc14:	2900      	cmp	r1, #0
 800cc16:	d17f      	bne.n	800cd18 <_dtoa_r+0x448>
 800cc18:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cc1c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cc20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cc26:	2900      	cmp	r1, #0
 800cc28:	f000 80b2 	beq.w	800cd90 <_dtoa_r+0x4c0>
 800cc2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cc30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3c:	f140 80a8 	bpl.w	800cd90 <_dtoa_r+0x4c0>
 800cc40:	f1b9 0f00 	cmp.w	r9, #0
 800cc44:	f000 80a4 	beq.w	800cd90 <_dtoa_r+0x4c0>
 800cc48:	f1ba 0f00 	cmp.w	sl, #0
 800cc4c:	dd31      	ble.n	800ccb2 <_dtoa_r+0x3e2>
 800cc4e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cc52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc5a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cc5e:	3201      	adds	r2, #1
 800cc60:	4650      	mov	r0, sl
 800cc62:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cc66:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cc6a:	ee07 2a90 	vmov	s15, r2
 800cc6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cc72:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cc76:	ed8d 5b02 	vstr	d5, [sp, #8]
 800cc7a:	9c03      	ldr	r4, [sp, #12]
 800cc7c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cc80:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f040 8086 	bne.w	800cd96 <_dtoa_r+0x4c6>
 800cc8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cc8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cc92:	ec42 1b17 	vmov	d7, r1, r2
 800cc96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9e:	f300 8272 	bgt.w	800d186 <_dtoa_r+0x8b6>
 800cca2:	eeb1 7b47 	vneg.f64	d7, d7
 800cca6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccae:	f100 8267 	bmi.w	800d180 <_dtoa_r+0x8b0>
 800ccb2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ccb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ccba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ccbc:	2a00      	cmp	r2, #0
 800ccbe:	f2c0 8129 	blt.w	800cf14 <_dtoa_r+0x644>
 800ccc2:	f1bb 0f0e 	cmp.w	fp, #14
 800ccc6:	f300 8125 	bgt.w	800cf14 <_dtoa_r+0x644>
 800ccca:	4b90      	ldr	r3, [pc, #576]	; (800cf0c <_dtoa_r+0x63c>)
 800cccc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ccd0:	ed93 6b00 	vldr	d6, [r3]
 800ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f280 80c3 	bge.w	800ce62 <_dtoa_r+0x592>
 800ccdc:	f1b9 0f00 	cmp.w	r9, #0
 800cce0:	f300 80bf 	bgt.w	800ce62 <_dtoa_r+0x592>
 800cce4:	f040 824c 	bne.w	800d180 <_dtoa_r+0x8b0>
 800cce8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ccec:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ccf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfc:	464c      	mov	r4, r9
 800ccfe:	464f      	mov	r7, r9
 800cd00:	f280 8222 	bge.w	800d148 <_dtoa_r+0x878>
 800cd04:	f8dd 8000 	ldr.w	r8, [sp]
 800cd08:	2331      	movs	r3, #49	; 0x31
 800cd0a:	f808 3b01 	strb.w	r3, [r8], #1
 800cd0e:	f10b 0b01 	add.w	fp, fp, #1
 800cd12:	e21e      	b.n	800d152 <_dtoa_r+0x882>
 800cd14:	2202      	movs	r2, #2
 800cd16:	e77c      	b.n	800cc12 <_dtoa_r+0x342>
 800cd18:	07cc      	lsls	r4, r1, #31
 800cd1a:	d504      	bpl.n	800cd26 <_dtoa_r+0x456>
 800cd1c:	ed90 6b00 	vldr	d6, [r0]
 800cd20:	3201      	adds	r2, #1
 800cd22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd26:	1049      	asrs	r1, r1, #1
 800cd28:	3008      	adds	r0, #8
 800cd2a:	e773      	b.n	800cc14 <_dtoa_r+0x344>
 800cd2c:	d02e      	beq.n	800cd8c <_dtoa_r+0x4bc>
 800cd2e:	f1cb 0100 	rsb	r1, fp, #0
 800cd32:	4a76      	ldr	r2, [pc, #472]	; (800cf0c <_dtoa_r+0x63c>)
 800cd34:	f001 000f 	and.w	r0, r1, #15
 800cd38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cd3c:	ed92 7b00 	vldr	d7, [r2]
 800cd40:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800cd44:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cd48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cd4c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800cd50:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800cd54:	486e      	ldr	r0, [pc, #440]	; (800cf10 <_dtoa_r+0x640>)
 800cd56:	1109      	asrs	r1, r1, #4
 800cd58:	2400      	movs	r4, #0
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	b939      	cbnz	r1, 800cd6e <_dtoa_r+0x49e>
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	f43f af60 	beq.w	800cc24 <_dtoa_r+0x354>
 800cd64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd6c:	e75a      	b.n	800cc24 <_dtoa_r+0x354>
 800cd6e:	07cf      	lsls	r7, r1, #31
 800cd70:	d509      	bpl.n	800cd86 <_dtoa_r+0x4b6>
 800cd72:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800cd76:	ed90 7b00 	vldr	d7, [r0]
 800cd7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cd7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cd82:	3201      	adds	r2, #1
 800cd84:	2401      	movs	r4, #1
 800cd86:	1049      	asrs	r1, r1, #1
 800cd88:	3008      	adds	r0, #8
 800cd8a:	e7e7      	b.n	800cd5c <_dtoa_r+0x48c>
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	e749      	b.n	800cc24 <_dtoa_r+0x354>
 800cd90:	465f      	mov	r7, fp
 800cd92:	4648      	mov	r0, r9
 800cd94:	e765      	b.n	800cc62 <_dtoa_r+0x392>
 800cd96:	ec42 1b17 	vmov	d7, r1, r2
 800cd9a:	4a5c      	ldr	r2, [pc, #368]	; (800cf0c <_dtoa_r+0x63c>)
 800cd9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cda0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cda4:	9a00      	ldr	r2, [sp, #0]
 800cda6:	1814      	adds	r4, r2, r0
 800cda8:	9a08      	ldr	r2, [sp, #32]
 800cdaa:	b352      	cbz	r2, 800ce02 <_dtoa_r+0x532>
 800cdac:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cdb0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cdb4:	f8dd 8000 	ldr.w	r8, [sp]
 800cdb8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cdbc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cdc0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cdc4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cdc8:	ee14 2a90 	vmov	r2, s9
 800cdcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cdd0:	3230      	adds	r2, #48	; 0x30
 800cdd2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cdd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdde:	f808 2b01 	strb.w	r2, [r8], #1
 800cde2:	d439      	bmi.n	800ce58 <_dtoa_r+0x588>
 800cde4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cde8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf0:	d472      	bmi.n	800ced8 <_dtoa_r+0x608>
 800cdf2:	45a0      	cmp	r8, r4
 800cdf4:	f43f af5d 	beq.w	800ccb2 <_dtoa_r+0x3e2>
 800cdf8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cdfc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ce00:	e7e0      	b.n	800cdc4 <_dtoa_r+0x4f4>
 800ce02:	f8dd 8000 	ldr.w	r8, [sp]
 800ce06:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce14:	ee14 2a90 	vmov	r2, s9
 800ce18:	3230      	adds	r2, #48	; 0x30
 800ce1a:	f808 2b01 	strb.w	r2, [r8], #1
 800ce1e:	45a0      	cmp	r8, r4
 800ce20:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce24:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce28:	d118      	bne.n	800ce5c <_dtoa_r+0x58c>
 800ce2a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ce2e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ce32:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ce36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce3a:	dc4d      	bgt.n	800ced8 <_dtoa_r+0x608>
 800ce3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce48:	f57f af33 	bpl.w	800ccb2 <_dtoa_r+0x3e2>
 800ce4c:	4688      	mov	r8, r1
 800ce4e:	3901      	subs	r1, #1
 800ce50:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ce54:	2b30      	cmp	r3, #48	; 0x30
 800ce56:	d0f9      	beq.n	800ce4c <_dtoa_r+0x57c>
 800ce58:	46bb      	mov	fp, r7
 800ce5a:	e02a      	b.n	800ceb2 <_dtoa_r+0x5e2>
 800ce5c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ce60:	e7d6      	b.n	800ce10 <_dtoa_r+0x540>
 800ce62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce66:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ce6a:	f8dd 8000 	ldr.w	r8, [sp]
 800ce6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ce72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ce76:	ee15 3a10 	vmov	r3, s10
 800ce7a:	3330      	adds	r3, #48	; 0x30
 800ce7c:	f808 3b01 	strb.w	r3, [r8], #1
 800ce80:	9b00      	ldr	r3, [sp, #0]
 800ce82:	eba8 0303 	sub.w	r3, r8, r3
 800ce86:	4599      	cmp	r9, r3
 800ce88:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ce8c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ce90:	d133      	bne.n	800cefa <_dtoa_r+0x62a>
 800ce92:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ce96:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	dc1a      	bgt.n	800ced6 <_dtoa_r+0x606>
 800cea0:	eeb4 7b46 	vcmp.f64	d7, d6
 800cea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea8:	d103      	bne.n	800ceb2 <_dtoa_r+0x5e2>
 800ceaa:	ee15 3a10 	vmov	r3, s10
 800ceae:	07d9      	lsls	r1, r3, #31
 800ceb0:	d411      	bmi.n	800ced6 <_dtoa_r+0x606>
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f000 fae7 	bl	800d488 <_Bfree>
 800ceba:	2300      	movs	r3, #0
 800cebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cebe:	f888 3000 	strb.w	r3, [r8]
 800cec2:	f10b 0301 	add.w	r3, fp, #1
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f43f ad4d 	beq.w	800c96a <_dtoa_r+0x9a>
 800ced0:	f8c3 8000 	str.w	r8, [r3]
 800ced4:	e549      	b.n	800c96a <_dtoa_r+0x9a>
 800ced6:	465f      	mov	r7, fp
 800ced8:	4643      	mov	r3, r8
 800ceda:	4698      	mov	r8, r3
 800cedc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cee0:	2a39      	cmp	r2, #57	; 0x39
 800cee2:	d106      	bne.n	800cef2 <_dtoa_r+0x622>
 800cee4:	9a00      	ldr	r2, [sp, #0]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d1f7      	bne.n	800ceda <_dtoa_r+0x60a>
 800ceea:	9900      	ldr	r1, [sp, #0]
 800ceec:	2230      	movs	r2, #48	; 0x30
 800ceee:	3701      	adds	r7, #1
 800cef0:	700a      	strb	r2, [r1, #0]
 800cef2:	781a      	ldrb	r2, [r3, #0]
 800cef4:	3201      	adds	r2, #1
 800cef6:	701a      	strb	r2, [r3, #0]
 800cef8:	e7ae      	b.n	800ce58 <_dtoa_r+0x588>
 800cefa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cefe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf06:	d1b2      	bne.n	800ce6e <_dtoa_r+0x59e>
 800cf08:	e7d3      	b.n	800ceb2 <_dtoa_r+0x5e2>
 800cf0a:	bf00      	nop
 800cf0c:	0800f090 	.word	0x0800f090
 800cf10:	0800f068 	.word	0x0800f068
 800cf14:	9908      	ldr	r1, [sp, #32]
 800cf16:	2900      	cmp	r1, #0
 800cf18:	f000 80d1 	beq.w	800d0be <_dtoa_r+0x7ee>
 800cf1c:	9907      	ldr	r1, [sp, #28]
 800cf1e:	2901      	cmp	r1, #1
 800cf20:	f300 80b4 	bgt.w	800d08c <_dtoa_r+0x7bc>
 800cf24:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cf26:	2900      	cmp	r1, #0
 800cf28:	f000 80ac 	beq.w	800d084 <_dtoa_r+0x7b4>
 800cf2c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cf30:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cf34:	461c      	mov	r4, r3
 800cf36:	930a      	str	r3, [sp, #40]	; 0x28
 800cf38:	9b05      	ldr	r3, [sp, #20]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	9305      	str	r3, [sp, #20]
 800cf3e:	9b06      	ldr	r3, [sp, #24]
 800cf40:	2101      	movs	r1, #1
 800cf42:	4413      	add	r3, r2
 800cf44:	4630      	mov	r0, r6
 800cf46:	9306      	str	r3, [sp, #24]
 800cf48:	f000 fb5a 	bl	800d600 <__i2b>
 800cf4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf4e:	4607      	mov	r7, r0
 800cf50:	f1b8 0f00 	cmp.w	r8, #0
 800cf54:	dd0d      	ble.n	800cf72 <_dtoa_r+0x6a2>
 800cf56:	9a06      	ldr	r2, [sp, #24]
 800cf58:	2a00      	cmp	r2, #0
 800cf5a:	dd0a      	ble.n	800cf72 <_dtoa_r+0x6a2>
 800cf5c:	4542      	cmp	r2, r8
 800cf5e:	9905      	ldr	r1, [sp, #20]
 800cf60:	bfa8      	it	ge
 800cf62:	4642      	movge	r2, r8
 800cf64:	1a89      	subs	r1, r1, r2
 800cf66:	9105      	str	r1, [sp, #20]
 800cf68:	9906      	ldr	r1, [sp, #24]
 800cf6a:	eba8 0802 	sub.w	r8, r8, r2
 800cf6e:	1a8a      	subs	r2, r1, r2
 800cf70:	9206      	str	r2, [sp, #24]
 800cf72:	b303      	cbz	r3, 800cfb6 <_dtoa_r+0x6e6>
 800cf74:	9a08      	ldr	r2, [sp, #32]
 800cf76:	2a00      	cmp	r2, #0
 800cf78:	f000 80a6 	beq.w	800d0c8 <_dtoa_r+0x7f8>
 800cf7c:	2c00      	cmp	r4, #0
 800cf7e:	dd13      	ble.n	800cfa8 <_dtoa_r+0x6d8>
 800cf80:	4639      	mov	r1, r7
 800cf82:	4622      	mov	r2, r4
 800cf84:	4630      	mov	r0, r6
 800cf86:	930c      	str	r3, [sp, #48]	; 0x30
 800cf88:	f000 fbf6 	bl	800d778 <__pow5mult>
 800cf8c:	462a      	mov	r2, r5
 800cf8e:	4601      	mov	r1, r0
 800cf90:	4607      	mov	r7, r0
 800cf92:	4630      	mov	r0, r6
 800cf94:	f000 fb4a 	bl	800d62c <__multiply>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	900a      	str	r0, [sp, #40]	; 0x28
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f000 fa73 	bl	800d488 <_Bfree>
 800cfa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfa6:	4615      	mov	r5, r2
 800cfa8:	1b1a      	subs	r2, r3, r4
 800cfaa:	d004      	beq.n	800cfb6 <_dtoa_r+0x6e6>
 800cfac:	4629      	mov	r1, r5
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f000 fbe2 	bl	800d778 <__pow5mult>
 800cfb4:	4605      	mov	r5, r0
 800cfb6:	2101      	movs	r1, #1
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f000 fb21 	bl	800d600 <__i2b>
 800cfbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	f340 8082 	ble.w	800d0cc <_dtoa_r+0x7fc>
 800cfc8:	461a      	mov	r2, r3
 800cfca:	4601      	mov	r1, r0
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f000 fbd3 	bl	800d778 <__pow5mult>
 800cfd2:	9b07      	ldr	r3, [sp, #28]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	dd7b      	ble.n	800d0d2 <_dtoa_r+0x802>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	930a      	str	r3, [sp, #40]	; 0x28
 800cfde:	6922      	ldr	r2, [r4, #16]
 800cfe0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cfe4:	6910      	ldr	r0, [r2, #16]
 800cfe6:	f000 fabb 	bl	800d560 <__hi0bits>
 800cfea:	f1c0 0020 	rsb	r0, r0, #32
 800cfee:	9b06      	ldr	r3, [sp, #24]
 800cff0:	4418      	add	r0, r3
 800cff2:	f010 001f 	ands.w	r0, r0, #31
 800cff6:	f000 808d 	beq.w	800d114 <_dtoa_r+0x844>
 800cffa:	f1c0 0220 	rsb	r2, r0, #32
 800cffe:	2a04      	cmp	r2, #4
 800d000:	f340 8086 	ble.w	800d110 <_dtoa_r+0x840>
 800d004:	f1c0 001c 	rsb	r0, r0, #28
 800d008:	9b05      	ldr	r3, [sp, #20]
 800d00a:	4403      	add	r3, r0
 800d00c:	9305      	str	r3, [sp, #20]
 800d00e:	9b06      	ldr	r3, [sp, #24]
 800d010:	4403      	add	r3, r0
 800d012:	4480      	add	r8, r0
 800d014:	9306      	str	r3, [sp, #24]
 800d016:	9b05      	ldr	r3, [sp, #20]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	dd05      	ble.n	800d028 <_dtoa_r+0x758>
 800d01c:	4629      	mov	r1, r5
 800d01e:	461a      	mov	r2, r3
 800d020:	4630      	mov	r0, r6
 800d022:	f000 fc03 	bl	800d82c <__lshift>
 800d026:	4605      	mov	r5, r0
 800d028:	9b06      	ldr	r3, [sp, #24]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	dd05      	ble.n	800d03a <_dtoa_r+0x76a>
 800d02e:	4621      	mov	r1, r4
 800d030:	461a      	mov	r2, r3
 800d032:	4630      	mov	r0, r6
 800d034:	f000 fbfa 	bl	800d82c <__lshift>
 800d038:	4604      	mov	r4, r0
 800d03a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d06b      	beq.n	800d118 <_dtoa_r+0x848>
 800d040:	4621      	mov	r1, r4
 800d042:	4628      	mov	r0, r5
 800d044:	f000 fc5e 	bl	800d904 <__mcmp>
 800d048:	2800      	cmp	r0, #0
 800d04a:	da65      	bge.n	800d118 <_dtoa_r+0x848>
 800d04c:	2300      	movs	r3, #0
 800d04e:	4629      	mov	r1, r5
 800d050:	220a      	movs	r2, #10
 800d052:	4630      	mov	r0, r6
 800d054:	f000 fa3a 	bl	800d4cc <__multadd>
 800d058:	9b08      	ldr	r3, [sp, #32]
 800d05a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d05e:	4605      	mov	r5, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 8192 	beq.w	800d38a <_dtoa_r+0xaba>
 800d066:	4639      	mov	r1, r7
 800d068:	2300      	movs	r3, #0
 800d06a:	220a      	movs	r2, #10
 800d06c:	4630      	mov	r0, r6
 800d06e:	f000 fa2d 	bl	800d4cc <__multadd>
 800d072:	f1ba 0f00 	cmp.w	sl, #0
 800d076:	4607      	mov	r7, r0
 800d078:	f300 808e 	bgt.w	800d198 <_dtoa_r+0x8c8>
 800d07c:	9b07      	ldr	r3, [sp, #28]
 800d07e:	2b02      	cmp	r3, #2
 800d080:	dc51      	bgt.n	800d126 <_dtoa_r+0x856>
 800d082:	e089      	b.n	800d198 <_dtoa_r+0x8c8>
 800d084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d086:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d08a:	e751      	b.n	800cf30 <_dtoa_r+0x660>
 800d08c:	f109 34ff 	add.w	r4, r9, #4294967295
 800d090:	42a3      	cmp	r3, r4
 800d092:	bfbf      	itttt	lt
 800d094:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d096:	1ae3      	sublt	r3, r4, r3
 800d098:	18d2      	addlt	r2, r2, r3
 800d09a:	4613      	movlt	r3, r2
 800d09c:	bfb7      	itett	lt
 800d09e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d0a0:	1b1c      	subge	r4, r3, r4
 800d0a2:	4623      	movlt	r3, r4
 800d0a4:	2400      	movlt	r4, #0
 800d0a6:	f1b9 0f00 	cmp.w	r9, #0
 800d0aa:	bfb5      	itete	lt
 800d0ac:	9a05      	ldrlt	r2, [sp, #20]
 800d0ae:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d0b2:	eba2 0809 	sublt.w	r8, r2, r9
 800d0b6:	464a      	movge	r2, r9
 800d0b8:	bfb8      	it	lt
 800d0ba:	2200      	movlt	r2, #0
 800d0bc:	e73b      	b.n	800cf36 <_dtoa_r+0x666>
 800d0be:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d0c2:	9f08      	ldr	r7, [sp, #32]
 800d0c4:	461c      	mov	r4, r3
 800d0c6:	e743      	b.n	800cf50 <_dtoa_r+0x680>
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	e76f      	b.n	800cfac <_dtoa_r+0x6dc>
 800d0cc:	9b07      	ldr	r3, [sp, #28]
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	dc18      	bgt.n	800d104 <_dtoa_r+0x834>
 800d0d2:	9b02      	ldr	r3, [sp, #8]
 800d0d4:	b9b3      	cbnz	r3, 800d104 <_dtoa_r+0x834>
 800d0d6:	9b03      	ldr	r3, [sp, #12]
 800d0d8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d0dc:	b9a2      	cbnz	r2, 800d108 <_dtoa_r+0x838>
 800d0de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d0e2:	0d12      	lsrs	r2, r2, #20
 800d0e4:	0512      	lsls	r2, r2, #20
 800d0e6:	b18a      	cbz	r2, 800d10c <_dtoa_r+0x83c>
 800d0e8:	9b05      	ldr	r3, [sp, #20]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	9305      	str	r3, [sp, #20]
 800d0ee:	9b06      	ldr	r3, [sp, #24]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	9306      	str	r3, [sp, #24]
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f47f af6f 	bne.w	800cfde <_dtoa_r+0x70e>
 800d100:	2001      	movs	r0, #1
 800d102:	e774      	b.n	800cfee <_dtoa_r+0x71e>
 800d104:	2300      	movs	r3, #0
 800d106:	e7f6      	b.n	800d0f6 <_dtoa_r+0x826>
 800d108:	9b02      	ldr	r3, [sp, #8]
 800d10a:	e7f4      	b.n	800d0f6 <_dtoa_r+0x826>
 800d10c:	920a      	str	r2, [sp, #40]	; 0x28
 800d10e:	e7f3      	b.n	800d0f8 <_dtoa_r+0x828>
 800d110:	d081      	beq.n	800d016 <_dtoa_r+0x746>
 800d112:	4610      	mov	r0, r2
 800d114:	301c      	adds	r0, #28
 800d116:	e777      	b.n	800d008 <_dtoa_r+0x738>
 800d118:	f1b9 0f00 	cmp.w	r9, #0
 800d11c:	dc37      	bgt.n	800d18e <_dtoa_r+0x8be>
 800d11e:	9b07      	ldr	r3, [sp, #28]
 800d120:	2b02      	cmp	r3, #2
 800d122:	dd34      	ble.n	800d18e <_dtoa_r+0x8be>
 800d124:	46ca      	mov	sl, r9
 800d126:	f1ba 0f00 	cmp.w	sl, #0
 800d12a:	d10d      	bne.n	800d148 <_dtoa_r+0x878>
 800d12c:	4621      	mov	r1, r4
 800d12e:	4653      	mov	r3, sl
 800d130:	2205      	movs	r2, #5
 800d132:	4630      	mov	r0, r6
 800d134:	f000 f9ca 	bl	800d4cc <__multadd>
 800d138:	4601      	mov	r1, r0
 800d13a:	4604      	mov	r4, r0
 800d13c:	4628      	mov	r0, r5
 800d13e:	f000 fbe1 	bl	800d904 <__mcmp>
 800d142:	2800      	cmp	r0, #0
 800d144:	f73f adde 	bgt.w	800cd04 <_dtoa_r+0x434>
 800d148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d14a:	f8dd 8000 	ldr.w	r8, [sp]
 800d14e:	ea6f 0b03 	mvn.w	fp, r3
 800d152:	f04f 0900 	mov.w	r9, #0
 800d156:	4621      	mov	r1, r4
 800d158:	4630      	mov	r0, r6
 800d15a:	f000 f995 	bl	800d488 <_Bfree>
 800d15e:	2f00      	cmp	r7, #0
 800d160:	f43f aea7 	beq.w	800ceb2 <_dtoa_r+0x5e2>
 800d164:	f1b9 0f00 	cmp.w	r9, #0
 800d168:	d005      	beq.n	800d176 <_dtoa_r+0x8a6>
 800d16a:	45b9      	cmp	r9, r7
 800d16c:	d003      	beq.n	800d176 <_dtoa_r+0x8a6>
 800d16e:	4649      	mov	r1, r9
 800d170:	4630      	mov	r0, r6
 800d172:	f000 f989 	bl	800d488 <_Bfree>
 800d176:	4639      	mov	r1, r7
 800d178:	4630      	mov	r0, r6
 800d17a:	f000 f985 	bl	800d488 <_Bfree>
 800d17e:	e698      	b.n	800ceb2 <_dtoa_r+0x5e2>
 800d180:	2400      	movs	r4, #0
 800d182:	4627      	mov	r7, r4
 800d184:	e7e0      	b.n	800d148 <_dtoa_r+0x878>
 800d186:	46bb      	mov	fp, r7
 800d188:	4604      	mov	r4, r0
 800d18a:	4607      	mov	r7, r0
 800d18c:	e5ba      	b.n	800cd04 <_dtoa_r+0x434>
 800d18e:	9b08      	ldr	r3, [sp, #32]
 800d190:	46ca      	mov	sl, r9
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 8100 	beq.w	800d398 <_dtoa_r+0xac8>
 800d198:	f1b8 0f00 	cmp.w	r8, #0
 800d19c:	dd05      	ble.n	800d1aa <_dtoa_r+0x8da>
 800d19e:	4639      	mov	r1, r7
 800d1a0:	4642      	mov	r2, r8
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f000 fb42 	bl	800d82c <__lshift>
 800d1a8:	4607      	mov	r7, r0
 800d1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d05d      	beq.n	800d26c <_dtoa_r+0x99c>
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f000 f928 	bl	800d408 <_Balloc>
 800d1b8:	4680      	mov	r8, r0
 800d1ba:	b928      	cbnz	r0, 800d1c8 <_dtoa_r+0x8f8>
 800d1bc:	4b82      	ldr	r3, [pc, #520]	; (800d3c8 <_dtoa_r+0xaf8>)
 800d1be:	4602      	mov	r2, r0
 800d1c0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d1c4:	f7ff bb9a 	b.w	800c8fc <_dtoa_r+0x2c>
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	3202      	adds	r2, #2
 800d1cc:	0092      	lsls	r2, r2, #2
 800d1ce:	f107 010c 	add.w	r1, r7, #12
 800d1d2:	300c      	adds	r0, #12
 800d1d4:	f000 f90a 	bl	800d3ec <memcpy>
 800d1d8:	2201      	movs	r2, #1
 800d1da:	4641      	mov	r1, r8
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f000 fb25 	bl	800d82c <__lshift>
 800d1e2:	9b00      	ldr	r3, [sp, #0]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	9305      	str	r3, [sp, #20]
 800d1e8:	9b00      	ldr	r3, [sp, #0]
 800d1ea:	4453      	add	r3, sl
 800d1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ee:	9b02      	ldr	r3, [sp, #8]
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	46b9      	mov	r9, r7
 800d1f6:	9308      	str	r3, [sp, #32]
 800d1f8:	4607      	mov	r7, r0
 800d1fa:	9b05      	ldr	r3, [sp, #20]
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	3b01      	subs	r3, #1
 800d200:	4628      	mov	r0, r5
 800d202:	9302      	str	r3, [sp, #8]
 800d204:	f7ff fad6 	bl	800c7b4 <quorem>
 800d208:	4603      	mov	r3, r0
 800d20a:	3330      	adds	r3, #48	; 0x30
 800d20c:	9006      	str	r0, [sp, #24]
 800d20e:	4649      	mov	r1, r9
 800d210:	4628      	mov	r0, r5
 800d212:	930a      	str	r3, [sp, #40]	; 0x28
 800d214:	f000 fb76 	bl	800d904 <__mcmp>
 800d218:	463a      	mov	r2, r7
 800d21a:	4682      	mov	sl, r0
 800d21c:	4621      	mov	r1, r4
 800d21e:	4630      	mov	r0, r6
 800d220:	f000 fb8c 	bl	800d93c <__mdiff>
 800d224:	68c2      	ldr	r2, [r0, #12]
 800d226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d228:	4680      	mov	r8, r0
 800d22a:	bb0a      	cbnz	r2, 800d270 <_dtoa_r+0x9a0>
 800d22c:	4601      	mov	r1, r0
 800d22e:	4628      	mov	r0, r5
 800d230:	f000 fb68 	bl	800d904 <__mcmp>
 800d234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d236:	4602      	mov	r2, r0
 800d238:	4641      	mov	r1, r8
 800d23a:	4630      	mov	r0, r6
 800d23c:	920e      	str	r2, [sp, #56]	; 0x38
 800d23e:	930a      	str	r3, [sp, #40]	; 0x28
 800d240:	f000 f922 	bl	800d488 <_Bfree>
 800d244:	9b07      	ldr	r3, [sp, #28]
 800d246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d248:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d24c:	ea43 0102 	orr.w	r1, r3, r2
 800d250:	9b08      	ldr	r3, [sp, #32]
 800d252:	430b      	orrs	r3, r1
 800d254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d256:	d10d      	bne.n	800d274 <_dtoa_r+0x9a4>
 800d258:	2b39      	cmp	r3, #57	; 0x39
 800d25a:	d029      	beq.n	800d2b0 <_dtoa_r+0x9e0>
 800d25c:	f1ba 0f00 	cmp.w	sl, #0
 800d260:	dd01      	ble.n	800d266 <_dtoa_r+0x996>
 800d262:	9b06      	ldr	r3, [sp, #24]
 800d264:	3331      	adds	r3, #49	; 0x31
 800d266:	9a02      	ldr	r2, [sp, #8]
 800d268:	7013      	strb	r3, [r2, #0]
 800d26a:	e774      	b.n	800d156 <_dtoa_r+0x886>
 800d26c:	4638      	mov	r0, r7
 800d26e:	e7b8      	b.n	800d1e2 <_dtoa_r+0x912>
 800d270:	2201      	movs	r2, #1
 800d272:	e7e1      	b.n	800d238 <_dtoa_r+0x968>
 800d274:	f1ba 0f00 	cmp.w	sl, #0
 800d278:	db06      	blt.n	800d288 <_dtoa_r+0x9b8>
 800d27a:	9907      	ldr	r1, [sp, #28]
 800d27c:	ea41 0a0a 	orr.w	sl, r1, sl
 800d280:	9908      	ldr	r1, [sp, #32]
 800d282:	ea5a 0101 	orrs.w	r1, sl, r1
 800d286:	d120      	bne.n	800d2ca <_dtoa_r+0x9fa>
 800d288:	2a00      	cmp	r2, #0
 800d28a:	ddec      	ble.n	800d266 <_dtoa_r+0x996>
 800d28c:	4629      	mov	r1, r5
 800d28e:	2201      	movs	r2, #1
 800d290:	4630      	mov	r0, r6
 800d292:	9305      	str	r3, [sp, #20]
 800d294:	f000 faca 	bl	800d82c <__lshift>
 800d298:	4621      	mov	r1, r4
 800d29a:	4605      	mov	r5, r0
 800d29c:	f000 fb32 	bl	800d904 <__mcmp>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	9b05      	ldr	r3, [sp, #20]
 800d2a4:	dc02      	bgt.n	800d2ac <_dtoa_r+0x9dc>
 800d2a6:	d1de      	bne.n	800d266 <_dtoa_r+0x996>
 800d2a8:	07da      	lsls	r2, r3, #31
 800d2aa:	d5dc      	bpl.n	800d266 <_dtoa_r+0x996>
 800d2ac:	2b39      	cmp	r3, #57	; 0x39
 800d2ae:	d1d8      	bne.n	800d262 <_dtoa_r+0x992>
 800d2b0:	9a02      	ldr	r2, [sp, #8]
 800d2b2:	2339      	movs	r3, #57	; 0x39
 800d2b4:	7013      	strb	r3, [r2, #0]
 800d2b6:	4643      	mov	r3, r8
 800d2b8:	4698      	mov	r8, r3
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d2c0:	2a39      	cmp	r2, #57	; 0x39
 800d2c2:	d051      	beq.n	800d368 <_dtoa_r+0xa98>
 800d2c4:	3201      	adds	r2, #1
 800d2c6:	701a      	strb	r2, [r3, #0]
 800d2c8:	e745      	b.n	800d156 <_dtoa_r+0x886>
 800d2ca:	2a00      	cmp	r2, #0
 800d2cc:	dd03      	ble.n	800d2d6 <_dtoa_r+0xa06>
 800d2ce:	2b39      	cmp	r3, #57	; 0x39
 800d2d0:	d0ee      	beq.n	800d2b0 <_dtoa_r+0x9e0>
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	e7c7      	b.n	800d266 <_dtoa_r+0x996>
 800d2d6:	9a05      	ldr	r2, [sp, #20]
 800d2d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2da:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d2de:	428a      	cmp	r2, r1
 800d2e0:	d02b      	beq.n	800d33a <_dtoa_r+0xa6a>
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	220a      	movs	r2, #10
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f000 f8ef 	bl	800d4cc <__multadd>
 800d2ee:	45b9      	cmp	r9, r7
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	f04f 0300 	mov.w	r3, #0
 800d2f6:	f04f 020a 	mov.w	r2, #10
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	d107      	bne.n	800d310 <_dtoa_r+0xa40>
 800d300:	f000 f8e4 	bl	800d4cc <__multadd>
 800d304:	4681      	mov	r9, r0
 800d306:	4607      	mov	r7, r0
 800d308:	9b05      	ldr	r3, [sp, #20]
 800d30a:	3301      	adds	r3, #1
 800d30c:	9305      	str	r3, [sp, #20]
 800d30e:	e774      	b.n	800d1fa <_dtoa_r+0x92a>
 800d310:	f000 f8dc 	bl	800d4cc <__multadd>
 800d314:	4639      	mov	r1, r7
 800d316:	4681      	mov	r9, r0
 800d318:	2300      	movs	r3, #0
 800d31a:	220a      	movs	r2, #10
 800d31c:	4630      	mov	r0, r6
 800d31e:	f000 f8d5 	bl	800d4cc <__multadd>
 800d322:	4607      	mov	r7, r0
 800d324:	e7f0      	b.n	800d308 <_dtoa_r+0xa38>
 800d326:	f1ba 0f00 	cmp.w	sl, #0
 800d32a:	9a00      	ldr	r2, [sp, #0]
 800d32c:	bfcc      	ite	gt
 800d32e:	46d0      	movgt	r8, sl
 800d330:	f04f 0801 	movle.w	r8, #1
 800d334:	4490      	add	r8, r2
 800d336:	f04f 0900 	mov.w	r9, #0
 800d33a:	4629      	mov	r1, r5
 800d33c:	2201      	movs	r2, #1
 800d33e:	4630      	mov	r0, r6
 800d340:	9302      	str	r3, [sp, #8]
 800d342:	f000 fa73 	bl	800d82c <__lshift>
 800d346:	4621      	mov	r1, r4
 800d348:	4605      	mov	r5, r0
 800d34a:	f000 fadb 	bl	800d904 <__mcmp>
 800d34e:	2800      	cmp	r0, #0
 800d350:	dcb1      	bgt.n	800d2b6 <_dtoa_r+0x9e6>
 800d352:	d102      	bne.n	800d35a <_dtoa_r+0xa8a>
 800d354:	9b02      	ldr	r3, [sp, #8]
 800d356:	07db      	lsls	r3, r3, #31
 800d358:	d4ad      	bmi.n	800d2b6 <_dtoa_r+0x9e6>
 800d35a:	4643      	mov	r3, r8
 800d35c:	4698      	mov	r8, r3
 800d35e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d362:	2a30      	cmp	r2, #48	; 0x30
 800d364:	d0fa      	beq.n	800d35c <_dtoa_r+0xa8c>
 800d366:	e6f6      	b.n	800d156 <_dtoa_r+0x886>
 800d368:	9a00      	ldr	r2, [sp, #0]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d1a4      	bne.n	800d2b8 <_dtoa_r+0x9e8>
 800d36e:	f10b 0b01 	add.w	fp, fp, #1
 800d372:	2331      	movs	r3, #49	; 0x31
 800d374:	e778      	b.n	800d268 <_dtoa_r+0x998>
 800d376:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <_dtoa_r+0xafc>)
 800d378:	f7ff bb12 	b.w	800c9a0 <_dtoa_r+0xd0>
 800d37c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f47f aaee 	bne.w	800c960 <_dtoa_r+0x90>
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <_dtoa_r+0xb00>)
 800d386:	f7ff bb0b 	b.w	800c9a0 <_dtoa_r+0xd0>
 800d38a:	f1ba 0f00 	cmp.w	sl, #0
 800d38e:	dc03      	bgt.n	800d398 <_dtoa_r+0xac8>
 800d390:	9b07      	ldr	r3, [sp, #28]
 800d392:	2b02      	cmp	r3, #2
 800d394:	f73f aec7 	bgt.w	800d126 <_dtoa_r+0x856>
 800d398:	f8dd 8000 	ldr.w	r8, [sp]
 800d39c:	4621      	mov	r1, r4
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f7ff fa08 	bl	800c7b4 <quorem>
 800d3a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d3a8:	f808 3b01 	strb.w	r3, [r8], #1
 800d3ac:	9a00      	ldr	r2, [sp, #0]
 800d3ae:	eba8 0202 	sub.w	r2, r8, r2
 800d3b2:	4592      	cmp	sl, r2
 800d3b4:	ddb7      	ble.n	800d326 <_dtoa_r+0xa56>
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	220a      	movs	r2, #10
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f000 f885 	bl	800d4cc <__multadd>
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	e7ea      	b.n	800d39c <_dtoa_r+0xacc>
 800d3c6:	bf00      	nop
 800d3c8:	0800eff3 	.word	0x0800eff3
 800d3cc:	0800ef4c 	.word	0x0800ef4c
 800d3d0:	0800ef70 	.word	0x0800ef70

0800d3d4 <_localeconv_r>:
 800d3d4:	4800      	ldr	r0, [pc, #0]	; (800d3d8 <_localeconv_r+0x4>)
 800d3d6:	4770      	bx	lr
 800d3d8:	20000230 	.word	0x20000230

0800d3dc <malloc>:
 800d3dc:	4b02      	ldr	r3, [pc, #8]	; (800d3e8 <malloc+0xc>)
 800d3de:	4601      	mov	r1, r0
 800d3e0:	6818      	ldr	r0, [r3, #0]
 800d3e2:	f000 bbef 	b.w	800dbc4 <_malloc_r>
 800d3e6:	bf00      	nop
 800d3e8:	200000dc 	.word	0x200000dc

0800d3ec <memcpy>:
 800d3ec:	440a      	add	r2, r1
 800d3ee:	4291      	cmp	r1, r2
 800d3f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3f4:	d100      	bne.n	800d3f8 <memcpy+0xc>
 800d3f6:	4770      	bx	lr
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d402:	4291      	cmp	r1, r2
 800d404:	d1f9      	bne.n	800d3fa <memcpy+0xe>
 800d406:	bd10      	pop	{r4, pc}

0800d408 <_Balloc>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d40c:	4604      	mov	r4, r0
 800d40e:	460d      	mov	r5, r1
 800d410:	b976      	cbnz	r6, 800d430 <_Balloc+0x28>
 800d412:	2010      	movs	r0, #16
 800d414:	f7ff ffe2 	bl	800d3dc <malloc>
 800d418:	4602      	mov	r2, r0
 800d41a:	6260      	str	r0, [r4, #36]	; 0x24
 800d41c:	b920      	cbnz	r0, 800d428 <_Balloc+0x20>
 800d41e:	4b18      	ldr	r3, [pc, #96]	; (800d480 <_Balloc+0x78>)
 800d420:	4818      	ldr	r0, [pc, #96]	; (800d484 <_Balloc+0x7c>)
 800d422:	2166      	movs	r1, #102	; 0x66
 800d424:	f000 fd94 	bl	800df50 <__assert_func>
 800d428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d42c:	6006      	str	r6, [r0, #0]
 800d42e:	60c6      	str	r6, [r0, #12]
 800d430:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d432:	68f3      	ldr	r3, [r6, #12]
 800d434:	b183      	cbz	r3, 800d458 <_Balloc+0x50>
 800d436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d43e:	b9b8      	cbnz	r0, 800d470 <_Balloc+0x68>
 800d440:	2101      	movs	r1, #1
 800d442:	fa01 f605 	lsl.w	r6, r1, r5
 800d446:	1d72      	adds	r2, r6, #5
 800d448:	0092      	lsls	r2, r2, #2
 800d44a:	4620      	mov	r0, r4
 800d44c:	f000 fb5a 	bl	800db04 <_calloc_r>
 800d450:	b160      	cbz	r0, 800d46c <_Balloc+0x64>
 800d452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d456:	e00e      	b.n	800d476 <_Balloc+0x6e>
 800d458:	2221      	movs	r2, #33	; 0x21
 800d45a:	2104      	movs	r1, #4
 800d45c:	4620      	mov	r0, r4
 800d45e:	f000 fb51 	bl	800db04 <_calloc_r>
 800d462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d464:	60f0      	str	r0, [r6, #12]
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1e4      	bne.n	800d436 <_Balloc+0x2e>
 800d46c:	2000      	movs	r0, #0
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	6802      	ldr	r2, [r0, #0]
 800d472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d476:	2300      	movs	r3, #0
 800d478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d47c:	e7f7      	b.n	800d46e <_Balloc+0x66>
 800d47e:	bf00      	nop
 800d480:	0800ef7d 	.word	0x0800ef7d
 800d484:	0800f004 	.word	0x0800f004

0800d488 <_Bfree>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d48c:	4605      	mov	r5, r0
 800d48e:	460c      	mov	r4, r1
 800d490:	b976      	cbnz	r6, 800d4b0 <_Bfree+0x28>
 800d492:	2010      	movs	r0, #16
 800d494:	f7ff ffa2 	bl	800d3dc <malloc>
 800d498:	4602      	mov	r2, r0
 800d49a:	6268      	str	r0, [r5, #36]	; 0x24
 800d49c:	b920      	cbnz	r0, 800d4a8 <_Bfree+0x20>
 800d49e:	4b09      	ldr	r3, [pc, #36]	; (800d4c4 <_Bfree+0x3c>)
 800d4a0:	4809      	ldr	r0, [pc, #36]	; (800d4c8 <_Bfree+0x40>)
 800d4a2:	218a      	movs	r1, #138	; 0x8a
 800d4a4:	f000 fd54 	bl	800df50 <__assert_func>
 800d4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4ac:	6006      	str	r6, [r0, #0]
 800d4ae:	60c6      	str	r6, [r0, #12]
 800d4b0:	b13c      	cbz	r4, 800d4c2 <_Bfree+0x3a>
 800d4b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4b4:	6862      	ldr	r2, [r4, #4]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4bc:	6021      	str	r1, [r4, #0]
 800d4be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}
 800d4c4:	0800ef7d 	.word	0x0800ef7d
 800d4c8:	0800f004 	.word	0x0800f004

0800d4cc <__multadd>:
 800d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d0:	690e      	ldr	r6, [r1, #16]
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	4698      	mov	r8, r3
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	f101 0014 	add.w	r0, r1, #20
 800d4dc:	2300      	movs	r3, #0
 800d4de:	6805      	ldr	r5, [r0, #0]
 800d4e0:	b2a9      	uxth	r1, r5
 800d4e2:	fb02 8101 	mla	r1, r2, r1, r8
 800d4e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d4ea:	0c2d      	lsrs	r5, r5, #16
 800d4ec:	fb02 c505 	mla	r5, r2, r5, ip
 800d4f0:	b289      	uxth	r1, r1
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d4f8:	429e      	cmp	r6, r3
 800d4fa:	f840 1b04 	str.w	r1, [r0], #4
 800d4fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d502:	dcec      	bgt.n	800d4de <__multadd+0x12>
 800d504:	f1b8 0f00 	cmp.w	r8, #0
 800d508:	d022      	beq.n	800d550 <__multadd+0x84>
 800d50a:	68a3      	ldr	r3, [r4, #8]
 800d50c:	42b3      	cmp	r3, r6
 800d50e:	dc19      	bgt.n	800d544 <__multadd+0x78>
 800d510:	6861      	ldr	r1, [r4, #4]
 800d512:	4638      	mov	r0, r7
 800d514:	3101      	adds	r1, #1
 800d516:	f7ff ff77 	bl	800d408 <_Balloc>
 800d51a:	4605      	mov	r5, r0
 800d51c:	b928      	cbnz	r0, 800d52a <__multadd+0x5e>
 800d51e:	4602      	mov	r2, r0
 800d520:	4b0d      	ldr	r3, [pc, #52]	; (800d558 <__multadd+0x8c>)
 800d522:	480e      	ldr	r0, [pc, #56]	; (800d55c <__multadd+0x90>)
 800d524:	21b5      	movs	r1, #181	; 0xb5
 800d526:	f000 fd13 	bl	800df50 <__assert_func>
 800d52a:	6922      	ldr	r2, [r4, #16]
 800d52c:	3202      	adds	r2, #2
 800d52e:	f104 010c 	add.w	r1, r4, #12
 800d532:	0092      	lsls	r2, r2, #2
 800d534:	300c      	adds	r0, #12
 800d536:	f7ff ff59 	bl	800d3ec <memcpy>
 800d53a:	4621      	mov	r1, r4
 800d53c:	4638      	mov	r0, r7
 800d53e:	f7ff ffa3 	bl	800d488 <_Bfree>
 800d542:	462c      	mov	r4, r5
 800d544:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d548:	3601      	adds	r6, #1
 800d54a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d54e:	6126      	str	r6, [r4, #16]
 800d550:	4620      	mov	r0, r4
 800d552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d556:	bf00      	nop
 800d558:	0800eff3 	.word	0x0800eff3
 800d55c:	0800f004 	.word	0x0800f004

0800d560 <__hi0bits>:
 800d560:	0c03      	lsrs	r3, r0, #16
 800d562:	041b      	lsls	r3, r3, #16
 800d564:	b9d3      	cbnz	r3, 800d59c <__hi0bits+0x3c>
 800d566:	0400      	lsls	r0, r0, #16
 800d568:	2310      	movs	r3, #16
 800d56a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d56e:	bf04      	itt	eq
 800d570:	0200      	lsleq	r0, r0, #8
 800d572:	3308      	addeq	r3, #8
 800d574:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d578:	bf04      	itt	eq
 800d57a:	0100      	lsleq	r0, r0, #4
 800d57c:	3304      	addeq	r3, #4
 800d57e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d582:	bf04      	itt	eq
 800d584:	0080      	lsleq	r0, r0, #2
 800d586:	3302      	addeq	r3, #2
 800d588:	2800      	cmp	r0, #0
 800d58a:	db05      	blt.n	800d598 <__hi0bits+0x38>
 800d58c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d590:	f103 0301 	add.w	r3, r3, #1
 800d594:	bf08      	it	eq
 800d596:	2320      	moveq	r3, #32
 800d598:	4618      	mov	r0, r3
 800d59a:	4770      	bx	lr
 800d59c:	2300      	movs	r3, #0
 800d59e:	e7e4      	b.n	800d56a <__hi0bits+0xa>

0800d5a0 <__lo0bits>:
 800d5a0:	6803      	ldr	r3, [r0, #0]
 800d5a2:	f013 0207 	ands.w	r2, r3, #7
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	d00b      	beq.n	800d5c2 <__lo0bits+0x22>
 800d5aa:	07da      	lsls	r2, r3, #31
 800d5ac:	d424      	bmi.n	800d5f8 <__lo0bits+0x58>
 800d5ae:	0798      	lsls	r0, r3, #30
 800d5b0:	bf49      	itett	mi
 800d5b2:	085b      	lsrmi	r3, r3, #1
 800d5b4:	089b      	lsrpl	r3, r3, #2
 800d5b6:	2001      	movmi	r0, #1
 800d5b8:	600b      	strmi	r3, [r1, #0]
 800d5ba:	bf5c      	itt	pl
 800d5bc:	600b      	strpl	r3, [r1, #0]
 800d5be:	2002      	movpl	r0, #2
 800d5c0:	4770      	bx	lr
 800d5c2:	b298      	uxth	r0, r3
 800d5c4:	b9b0      	cbnz	r0, 800d5f4 <__lo0bits+0x54>
 800d5c6:	0c1b      	lsrs	r3, r3, #16
 800d5c8:	2010      	movs	r0, #16
 800d5ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d5ce:	bf04      	itt	eq
 800d5d0:	0a1b      	lsreq	r3, r3, #8
 800d5d2:	3008      	addeq	r0, #8
 800d5d4:	071a      	lsls	r2, r3, #28
 800d5d6:	bf04      	itt	eq
 800d5d8:	091b      	lsreq	r3, r3, #4
 800d5da:	3004      	addeq	r0, #4
 800d5dc:	079a      	lsls	r2, r3, #30
 800d5de:	bf04      	itt	eq
 800d5e0:	089b      	lsreq	r3, r3, #2
 800d5e2:	3002      	addeq	r0, #2
 800d5e4:	07da      	lsls	r2, r3, #31
 800d5e6:	d403      	bmi.n	800d5f0 <__lo0bits+0x50>
 800d5e8:	085b      	lsrs	r3, r3, #1
 800d5ea:	f100 0001 	add.w	r0, r0, #1
 800d5ee:	d005      	beq.n	800d5fc <__lo0bits+0x5c>
 800d5f0:	600b      	str	r3, [r1, #0]
 800d5f2:	4770      	bx	lr
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	e7e8      	b.n	800d5ca <__lo0bits+0x2a>
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	4770      	bx	lr
 800d5fc:	2020      	movs	r0, #32
 800d5fe:	4770      	bx	lr

0800d600 <__i2b>:
 800d600:	b510      	push	{r4, lr}
 800d602:	460c      	mov	r4, r1
 800d604:	2101      	movs	r1, #1
 800d606:	f7ff feff 	bl	800d408 <_Balloc>
 800d60a:	4602      	mov	r2, r0
 800d60c:	b928      	cbnz	r0, 800d61a <__i2b+0x1a>
 800d60e:	4b05      	ldr	r3, [pc, #20]	; (800d624 <__i2b+0x24>)
 800d610:	4805      	ldr	r0, [pc, #20]	; (800d628 <__i2b+0x28>)
 800d612:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d616:	f000 fc9b 	bl	800df50 <__assert_func>
 800d61a:	2301      	movs	r3, #1
 800d61c:	6144      	str	r4, [r0, #20]
 800d61e:	6103      	str	r3, [r0, #16]
 800d620:	bd10      	pop	{r4, pc}
 800d622:	bf00      	nop
 800d624:	0800eff3 	.word	0x0800eff3
 800d628:	0800f004 	.word	0x0800f004

0800d62c <__multiply>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	4614      	mov	r4, r2
 800d632:	690a      	ldr	r2, [r1, #16]
 800d634:	6923      	ldr	r3, [r4, #16]
 800d636:	429a      	cmp	r2, r3
 800d638:	bfb8      	it	lt
 800d63a:	460b      	movlt	r3, r1
 800d63c:	460d      	mov	r5, r1
 800d63e:	bfbc      	itt	lt
 800d640:	4625      	movlt	r5, r4
 800d642:	461c      	movlt	r4, r3
 800d644:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d648:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d64c:	68ab      	ldr	r3, [r5, #8]
 800d64e:	6869      	ldr	r1, [r5, #4]
 800d650:	eb0a 0709 	add.w	r7, sl, r9
 800d654:	42bb      	cmp	r3, r7
 800d656:	b085      	sub	sp, #20
 800d658:	bfb8      	it	lt
 800d65a:	3101      	addlt	r1, #1
 800d65c:	f7ff fed4 	bl	800d408 <_Balloc>
 800d660:	b930      	cbnz	r0, 800d670 <__multiply+0x44>
 800d662:	4602      	mov	r2, r0
 800d664:	4b42      	ldr	r3, [pc, #264]	; (800d770 <__multiply+0x144>)
 800d666:	4843      	ldr	r0, [pc, #268]	; (800d774 <__multiply+0x148>)
 800d668:	f240 115d 	movw	r1, #349	; 0x15d
 800d66c:	f000 fc70 	bl	800df50 <__assert_func>
 800d670:	f100 0614 	add.w	r6, r0, #20
 800d674:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d678:	4633      	mov	r3, r6
 800d67a:	2200      	movs	r2, #0
 800d67c:	4543      	cmp	r3, r8
 800d67e:	d31e      	bcc.n	800d6be <__multiply+0x92>
 800d680:	f105 0c14 	add.w	ip, r5, #20
 800d684:	f104 0314 	add.w	r3, r4, #20
 800d688:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d68c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d690:	9202      	str	r2, [sp, #8]
 800d692:	ebac 0205 	sub.w	r2, ip, r5
 800d696:	3a15      	subs	r2, #21
 800d698:	f022 0203 	bic.w	r2, r2, #3
 800d69c:	3204      	adds	r2, #4
 800d69e:	f105 0115 	add.w	r1, r5, #21
 800d6a2:	458c      	cmp	ip, r1
 800d6a4:	bf38      	it	cc
 800d6a6:	2204      	movcc	r2, #4
 800d6a8:	9201      	str	r2, [sp, #4]
 800d6aa:	9a02      	ldr	r2, [sp, #8]
 800d6ac:	9303      	str	r3, [sp, #12]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d808      	bhi.n	800d6c4 <__multiply+0x98>
 800d6b2:	2f00      	cmp	r7, #0
 800d6b4:	dc55      	bgt.n	800d762 <__multiply+0x136>
 800d6b6:	6107      	str	r7, [r0, #16]
 800d6b8:	b005      	add	sp, #20
 800d6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6be:	f843 2b04 	str.w	r2, [r3], #4
 800d6c2:	e7db      	b.n	800d67c <__multiply+0x50>
 800d6c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6c8:	f1ba 0f00 	cmp.w	sl, #0
 800d6cc:	d020      	beq.n	800d710 <__multiply+0xe4>
 800d6ce:	f105 0e14 	add.w	lr, r5, #20
 800d6d2:	46b1      	mov	r9, r6
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d6da:	f8d9 b000 	ldr.w	fp, [r9]
 800d6de:	b2a1      	uxth	r1, r4
 800d6e0:	fa1f fb8b 	uxth.w	fp, fp
 800d6e4:	fb0a b101 	mla	r1, sl, r1, fp
 800d6e8:	4411      	add	r1, r2
 800d6ea:	f8d9 2000 	ldr.w	r2, [r9]
 800d6ee:	0c24      	lsrs	r4, r4, #16
 800d6f0:	0c12      	lsrs	r2, r2, #16
 800d6f2:	fb0a 2404 	mla	r4, sl, r4, r2
 800d6f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d6fa:	b289      	uxth	r1, r1
 800d6fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d700:	45f4      	cmp	ip, lr
 800d702:	f849 1b04 	str.w	r1, [r9], #4
 800d706:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d70a:	d8e4      	bhi.n	800d6d6 <__multiply+0xaa>
 800d70c:	9901      	ldr	r1, [sp, #4]
 800d70e:	5072      	str	r2, [r6, r1]
 800d710:	9a03      	ldr	r2, [sp, #12]
 800d712:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d716:	3304      	adds	r3, #4
 800d718:	f1b9 0f00 	cmp.w	r9, #0
 800d71c:	d01f      	beq.n	800d75e <__multiply+0x132>
 800d71e:	6834      	ldr	r4, [r6, #0]
 800d720:	f105 0114 	add.w	r1, r5, #20
 800d724:	46b6      	mov	lr, r6
 800d726:	f04f 0a00 	mov.w	sl, #0
 800d72a:	880a      	ldrh	r2, [r1, #0]
 800d72c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d730:	fb09 b202 	mla	r2, r9, r2, fp
 800d734:	4492      	add	sl, r2
 800d736:	b2a4      	uxth	r4, r4
 800d738:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d73c:	f84e 4b04 	str.w	r4, [lr], #4
 800d740:	f851 4b04 	ldr.w	r4, [r1], #4
 800d744:	f8be 2000 	ldrh.w	r2, [lr]
 800d748:	0c24      	lsrs	r4, r4, #16
 800d74a:	fb09 2404 	mla	r4, r9, r4, r2
 800d74e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d752:	458c      	cmp	ip, r1
 800d754:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d758:	d8e7      	bhi.n	800d72a <__multiply+0xfe>
 800d75a:	9a01      	ldr	r2, [sp, #4]
 800d75c:	50b4      	str	r4, [r6, r2]
 800d75e:	3604      	adds	r6, #4
 800d760:	e7a3      	b.n	800d6aa <__multiply+0x7e>
 800d762:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1a5      	bne.n	800d6b6 <__multiply+0x8a>
 800d76a:	3f01      	subs	r7, #1
 800d76c:	e7a1      	b.n	800d6b2 <__multiply+0x86>
 800d76e:	bf00      	nop
 800d770:	0800eff3 	.word	0x0800eff3
 800d774:	0800f004 	.word	0x0800f004

0800d778 <__pow5mult>:
 800d778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d77c:	4615      	mov	r5, r2
 800d77e:	f012 0203 	ands.w	r2, r2, #3
 800d782:	4606      	mov	r6, r0
 800d784:	460f      	mov	r7, r1
 800d786:	d007      	beq.n	800d798 <__pow5mult+0x20>
 800d788:	4c25      	ldr	r4, [pc, #148]	; (800d820 <__pow5mult+0xa8>)
 800d78a:	3a01      	subs	r2, #1
 800d78c:	2300      	movs	r3, #0
 800d78e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d792:	f7ff fe9b 	bl	800d4cc <__multadd>
 800d796:	4607      	mov	r7, r0
 800d798:	10ad      	asrs	r5, r5, #2
 800d79a:	d03d      	beq.n	800d818 <__pow5mult+0xa0>
 800d79c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d79e:	b97c      	cbnz	r4, 800d7c0 <__pow5mult+0x48>
 800d7a0:	2010      	movs	r0, #16
 800d7a2:	f7ff fe1b 	bl	800d3dc <malloc>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	6270      	str	r0, [r6, #36]	; 0x24
 800d7aa:	b928      	cbnz	r0, 800d7b8 <__pow5mult+0x40>
 800d7ac:	4b1d      	ldr	r3, [pc, #116]	; (800d824 <__pow5mult+0xac>)
 800d7ae:	481e      	ldr	r0, [pc, #120]	; (800d828 <__pow5mult+0xb0>)
 800d7b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d7b4:	f000 fbcc 	bl	800df50 <__assert_func>
 800d7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7bc:	6004      	str	r4, [r0, #0]
 800d7be:	60c4      	str	r4, [r0, #12]
 800d7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7c8:	b94c      	cbnz	r4, 800d7de <__pow5mult+0x66>
 800d7ca:	f240 2171 	movw	r1, #625	; 0x271
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f7ff ff16 	bl	800d600 <__i2b>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7da:	4604      	mov	r4, r0
 800d7dc:	6003      	str	r3, [r0, #0]
 800d7de:	f04f 0900 	mov.w	r9, #0
 800d7e2:	07eb      	lsls	r3, r5, #31
 800d7e4:	d50a      	bpl.n	800d7fc <__pow5mult+0x84>
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f7ff ff1e 	bl	800d62c <__multiply>
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	4680      	mov	r8, r0
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f7ff fe47 	bl	800d488 <_Bfree>
 800d7fa:	4647      	mov	r7, r8
 800d7fc:	106d      	asrs	r5, r5, #1
 800d7fe:	d00b      	beq.n	800d818 <__pow5mult+0xa0>
 800d800:	6820      	ldr	r0, [r4, #0]
 800d802:	b938      	cbnz	r0, 800d814 <__pow5mult+0x9c>
 800d804:	4622      	mov	r2, r4
 800d806:	4621      	mov	r1, r4
 800d808:	4630      	mov	r0, r6
 800d80a:	f7ff ff0f 	bl	800d62c <__multiply>
 800d80e:	6020      	str	r0, [r4, #0]
 800d810:	f8c0 9000 	str.w	r9, [r0]
 800d814:	4604      	mov	r4, r0
 800d816:	e7e4      	b.n	800d7e2 <__pow5mult+0x6a>
 800d818:	4638      	mov	r0, r7
 800d81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81e:	bf00      	nop
 800d820:	0800f158 	.word	0x0800f158
 800d824:	0800ef7d 	.word	0x0800ef7d
 800d828:	0800f004 	.word	0x0800f004

0800d82c <__lshift>:
 800d82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d830:	460c      	mov	r4, r1
 800d832:	6849      	ldr	r1, [r1, #4]
 800d834:	6923      	ldr	r3, [r4, #16]
 800d836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d83a:	68a3      	ldr	r3, [r4, #8]
 800d83c:	4607      	mov	r7, r0
 800d83e:	4691      	mov	r9, r2
 800d840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d844:	f108 0601 	add.w	r6, r8, #1
 800d848:	42b3      	cmp	r3, r6
 800d84a:	db0b      	blt.n	800d864 <__lshift+0x38>
 800d84c:	4638      	mov	r0, r7
 800d84e:	f7ff fddb 	bl	800d408 <_Balloc>
 800d852:	4605      	mov	r5, r0
 800d854:	b948      	cbnz	r0, 800d86a <__lshift+0x3e>
 800d856:	4602      	mov	r2, r0
 800d858:	4b28      	ldr	r3, [pc, #160]	; (800d8fc <__lshift+0xd0>)
 800d85a:	4829      	ldr	r0, [pc, #164]	; (800d900 <__lshift+0xd4>)
 800d85c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d860:	f000 fb76 	bl	800df50 <__assert_func>
 800d864:	3101      	adds	r1, #1
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	e7ee      	b.n	800d848 <__lshift+0x1c>
 800d86a:	2300      	movs	r3, #0
 800d86c:	f100 0114 	add.w	r1, r0, #20
 800d870:	f100 0210 	add.w	r2, r0, #16
 800d874:	4618      	mov	r0, r3
 800d876:	4553      	cmp	r3, sl
 800d878:	db33      	blt.n	800d8e2 <__lshift+0xb6>
 800d87a:	6920      	ldr	r0, [r4, #16]
 800d87c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d880:	f104 0314 	add.w	r3, r4, #20
 800d884:	f019 091f 	ands.w	r9, r9, #31
 800d888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d88c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d890:	d02b      	beq.n	800d8ea <__lshift+0xbe>
 800d892:	f1c9 0e20 	rsb	lr, r9, #32
 800d896:	468a      	mov	sl, r1
 800d898:	2200      	movs	r2, #0
 800d89a:	6818      	ldr	r0, [r3, #0]
 800d89c:	fa00 f009 	lsl.w	r0, r0, r9
 800d8a0:	4302      	orrs	r2, r0
 800d8a2:	f84a 2b04 	str.w	r2, [sl], #4
 800d8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8aa:	459c      	cmp	ip, r3
 800d8ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8b0:	d8f3      	bhi.n	800d89a <__lshift+0x6e>
 800d8b2:	ebac 0304 	sub.w	r3, ip, r4
 800d8b6:	3b15      	subs	r3, #21
 800d8b8:	f023 0303 	bic.w	r3, r3, #3
 800d8bc:	3304      	adds	r3, #4
 800d8be:	f104 0015 	add.w	r0, r4, #21
 800d8c2:	4584      	cmp	ip, r0
 800d8c4:	bf38      	it	cc
 800d8c6:	2304      	movcc	r3, #4
 800d8c8:	50ca      	str	r2, [r1, r3]
 800d8ca:	b10a      	cbz	r2, 800d8d0 <__lshift+0xa4>
 800d8cc:	f108 0602 	add.w	r6, r8, #2
 800d8d0:	3e01      	subs	r6, #1
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	612e      	str	r6, [r5, #16]
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	f7ff fdd6 	bl	800d488 <_Bfree>
 800d8dc:	4628      	mov	r0, r5
 800d8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	e7c5      	b.n	800d876 <__lshift+0x4a>
 800d8ea:	3904      	subs	r1, #4
 800d8ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8f4:	459c      	cmp	ip, r3
 800d8f6:	d8f9      	bhi.n	800d8ec <__lshift+0xc0>
 800d8f8:	e7ea      	b.n	800d8d0 <__lshift+0xa4>
 800d8fa:	bf00      	nop
 800d8fc:	0800eff3 	.word	0x0800eff3
 800d900:	0800f004 	.word	0x0800f004

0800d904 <__mcmp>:
 800d904:	b530      	push	{r4, r5, lr}
 800d906:	6902      	ldr	r2, [r0, #16]
 800d908:	690c      	ldr	r4, [r1, #16]
 800d90a:	1b12      	subs	r2, r2, r4
 800d90c:	d10e      	bne.n	800d92c <__mcmp+0x28>
 800d90e:	f100 0314 	add.w	r3, r0, #20
 800d912:	3114      	adds	r1, #20
 800d914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d91c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d924:	42a5      	cmp	r5, r4
 800d926:	d003      	beq.n	800d930 <__mcmp+0x2c>
 800d928:	d305      	bcc.n	800d936 <__mcmp+0x32>
 800d92a:	2201      	movs	r2, #1
 800d92c:	4610      	mov	r0, r2
 800d92e:	bd30      	pop	{r4, r5, pc}
 800d930:	4283      	cmp	r3, r0
 800d932:	d3f3      	bcc.n	800d91c <__mcmp+0x18>
 800d934:	e7fa      	b.n	800d92c <__mcmp+0x28>
 800d936:	f04f 32ff 	mov.w	r2, #4294967295
 800d93a:	e7f7      	b.n	800d92c <__mcmp+0x28>

0800d93c <__mdiff>:
 800d93c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d940:	460c      	mov	r4, r1
 800d942:	4606      	mov	r6, r0
 800d944:	4611      	mov	r1, r2
 800d946:	4620      	mov	r0, r4
 800d948:	4617      	mov	r7, r2
 800d94a:	f7ff ffdb 	bl	800d904 <__mcmp>
 800d94e:	1e05      	subs	r5, r0, #0
 800d950:	d110      	bne.n	800d974 <__mdiff+0x38>
 800d952:	4629      	mov	r1, r5
 800d954:	4630      	mov	r0, r6
 800d956:	f7ff fd57 	bl	800d408 <_Balloc>
 800d95a:	b930      	cbnz	r0, 800d96a <__mdiff+0x2e>
 800d95c:	4b39      	ldr	r3, [pc, #228]	; (800da44 <__mdiff+0x108>)
 800d95e:	4602      	mov	r2, r0
 800d960:	f240 2132 	movw	r1, #562	; 0x232
 800d964:	4838      	ldr	r0, [pc, #224]	; (800da48 <__mdiff+0x10c>)
 800d966:	f000 faf3 	bl	800df50 <__assert_func>
 800d96a:	2301      	movs	r3, #1
 800d96c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d974:	bfa4      	itt	ge
 800d976:	463b      	movge	r3, r7
 800d978:	4627      	movge	r7, r4
 800d97a:	4630      	mov	r0, r6
 800d97c:	6879      	ldr	r1, [r7, #4]
 800d97e:	bfa6      	itte	ge
 800d980:	461c      	movge	r4, r3
 800d982:	2500      	movge	r5, #0
 800d984:	2501      	movlt	r5, #1
 800d986:	f7ff fd3f 	bl	800d408 <_Balloc>
 800d98a:	b920      	cbnz	r0, 800d996 <__mdiff+0x5a>
 800d98c:	4b2d      	ldr	r3, [pc, #180]	; (800da44 <__mdiff+0x108>)
 800d98e:	4602      	mov	r2, r0
 800d990:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d994:	e7e6      	b.n	800d964 <__mdiff+0x28>
 800d996:	693e      	ldr	r6, [r7, #16]
 800d998:	60c5      	str	r5, [r0, #12]
 800d99a:	6925      	ldr	r5, [r4, #16]
 800d99c:	f107 0114 	add.w	r1, r7, #20
 800d9a0:	f104 0914 	add.w	r9, r4, #20
 800d9a4:	f100 0e14 	add.w	lr, r0, #20
 800d9a8:	f107 0210 	add.w	r2, r7, #16
 800d9ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d9b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d9b4:	46f2      	mov	sl, lr
 800d9b6:	2700      	movs	r7, #0
 800d9b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9c0:	fa1f f883 	uxth.w	r8, r3
 800d9c4:	fa17 f78b 	uxtah	r7, r7, fp
 800d9c8:	0c1b      	lsrs	r3, r3, #16
 800d9ca:	eba7 0808 	sub.w	r8, r7, r8
 800d9ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9d6:	fa1f f888 	uxth.w	r8, r8
 800d9da:	141f      	asrs	r7, r3, #16
 800d9dc:	454d      	cmp	r5, r9
 800d9de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9e2:	f84a 3b04 	str.w	r3, [sl], #4
 800d9e6:	d8e7      	bhi.n	800d9b8 <__mdiff+0x7c>
 800d9e8:	1b2b      	subs	r3, r5, r4
 800d9ea:	3b15      	subs	r3, #21
 800d9ec:	f023 0303 	bic.w	r3, r3, #3
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	3415      	adds	r4, #21
 800d9f4:	42a5      	cmp	r5, r4
 800d9f6:	bf38      	it	cc
 800d9f8:	2304      	movcc	r3, #4
 800d9fa:	4419      	add	r1, r3
 800d9fc:	4473      	add	r3, lr
 800d9fe:	469e      	mov	lr, r3
 800da00:	460d      	mov	r5, r1
 800da02:	4565      	cmp	r5, ip
 800da04:	d30e      	bcc.n	800da24 <__mdiff+0xe8>
 800da06:	f10c 0203 	add.w	r2, ip, #3
 800da0a:	1a52      	subs	r2, r2, r1
 800da0c:	f022 0203 	bic.w	r2, r2, #3
 800da10:	3903      	subs	r1, #3
 800da12:	458c      	cmp	ip, r1
 800da14:	bf38      	it	cc
 800da16:	2200      	movcc	r2, #0
 800da18:	441a      	add	r2, r3
 800da1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da1e:	b17b      	cbz	r3, 800da40 <__mdiff+0x104>
 800da20:	6106      	str	r6, [r0, #16]
 800da22:	e7a5      	b.n	800d970 <__mdiff+0x34>
 800da24:	f855 8b04 	ldr.w	r8, [r5], #4
 800da28:	fa17 f488 	uxtah	r4, r7, r8
 800da2c:	1422      	asrs	r2, r4, #16
 800da2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800da32:	b2a4      	uxth	r4, r4
 800da34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800da38:	f84e 4b04 	str.w	r4, [lr], #4
 800da3c:	1417      	asrs	r7, r2, #16
 800da3e:	e7e0      	b.n	800da02 <__mdiff+0xc6>
 800da40:	3e01      	subs	r6, #1
 800da42:	e7ea      	b.n	800da1a <__mdiff+0xde>
 800da44:	0800eff3 	.word	0x0800eff3
 800da48:	0800f004 	.word	0x0800f004

0800da4c <__d2b>:
 800da4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da50:	4689      	mov	r9, r1
 800da52:	2101      	movs	r1, #1
 800da54:	ec57 6b10 	vmov	r6, r7, d0
 800da58:	4690      	mov	r8, r2
 800da5a:	f7ff fcd5 	bl	800d408 <_Balloc>
 800da5e:	4604      	mov	r4, r0
 800da60:	b930      	cbnz	r0, 800da70 <__d2b+0x24>
 800da62:	4602      	mov	r2, r0
 800da64:	4b25      	ldr	r3, [pc, #148]	; (800dafc <__d2b+0xb0>)
 800da66:	4826      	ldr	r0, [pc, #152]	; (800db00 <__d2b+0xb4>)
 800da68:	f240 310a 	movw	r1, #778	; 0x30a
 800da6c:	f000 fa70 	bl	800df50 <__assert_func>
 800da70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da78:	bb35      	cbnz	r5, 800dac8 <__d2b+0x7c>
 800da7a:	2e00      	cmp	r6, #0
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	d028      	beq.n	800dad2 <__d2b+0x86>
 800da80:	4668      	mov	r0, sp
 800da82:	9600      	str	r6, [sp, #0]
 800da84:	f7ff fd8c 	bl	800d5a0 <__lo0bits>
 800da88:	9900      	ldr	r1, [sp, #0]
 800da8a:	b300      	cbz	r0, 800dace <__d2b+0x82>
 800da8c:	9a01      	ldr	r2, [sp, #4]
 800da8e:	f1c0 0320 	rsb	r3, r0, #32
 800da92:	fa02 f303 	lsl.w	r3, r2, r3
 800da96:	430b      	orrs	r3, r1
 800da98:	40c2      	lsrs	r2, r0
 800da9a:	6163      	str	r3, [r4, #20]
 800da9c:	9201      	str	r2, [sp, #4]
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	61a3      	str	r3, [r4, #24]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	bf14      	ite	ne
 800daa6:	2202      	movne	r2, #2
 800daa8:	2201      	moveq	r2, #1
 800daaa:	6122      	str	r2, [r4, #16]
 800daac:	b1d5      	cbz	r5, 800dae4 <__d2b+0x98>
 800daae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dab2:	4405      	add	r5, r0
 800dab4:	f8c9 5000 	str.w	r5, [r9]
 800dab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dabc:	f8c8 0000 	str.w	r0, [r8]
 800dac0:	4620      	mov	r0, r4
 800dac2:	b003      	add	sp, #12
 800dac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dacc:	e7d5      	b.n	800da7a <__d2b+0x2e>
 800dace:	6161      	str	r1, [r4, #20]
 800dad0:	e7e5      	b.n	800da9e <__d2b+0x52>
 800dad2:	a801      	add	r0, sp, #4
 800dad4:	f7ff fd64 	bl	800d5a0 <__lo0bits>
 800dad8:	9b01      	ldr	r3, [sp, #4]
 800dada:	6163      	str	r3, [r4, #20]
 800dadc:	2201      	movs	r2, #1
 800dade:	6122      	str	r2, [r4, #16]
 800dae0:	3020      	adds	r0, #32
 800dae2:	e7e3      	b.n	800daac <__d2b+0x60>
 800dae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800daec:	f8c9 0000 	str.w	r0, [r9]
 800daf0:	6918      	ldr	r0, [r3, #16]
 800daf2:	f7ff fd35 	bl	800d560 <__hi0bits>
 800daf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dafa:	e7df      	b.n	800dabc <__d2b+0x70>
 800dafc:	0800eff3 	.word	0x0800eff3
 800db00:	0800f004 	.word	0x0800f004

0800db04 <_calloc_r>:
 800db04:	b513      	push	{r0, r1, r4, lr}
 800db06:	434a      	muls	r2, r1
 800db08:	4611      	mov	r1, r2
 800db0a:	9201      	str	r2, [sp, #4]
 800db0c:	f000 f85a 	bl	800dbc4 <_malloc_r>
 800db10:	4604      	mov	r4, r0
 800db12:	b118      	cbz	r0, 800db1c <_calloc_r+0x18>
 800db14:	9a01      	ldr	r2, [sp, #4]
 800db16:	2100      	movs	r1, #0
 800db18:	f7fe f9e2 	bl	800bee0 <memset>
 800db1c:	4620      	mov	r0, r4
 800db1e:	b002      	add	sp, #8
 800db20:	bd10      	pop	{r4, pc}
	...

0800db24 <_free_r>:
 800db24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db26:	2900      	cmp	r1, #0
 800db28:	d048      	beq.n	800dbbc <_free_r+0x98>
 800db2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db2e:	9001      	str	r0, [sp, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	f1a1 0404 	sub.w	r4, r1, #4
 800db36:	bfb8      	it	lt
 800db38:	18e4      	addlt	r4, r4, r3
 800db3a:	f000 fa65 	bl	800e008 <__malloc_lock>
 800db3e:	4a20      	ldr	r2, [pc, #128]	; (800dbc0 <_free_r+0x9c>)
 800db40:	9801      	ldr	r0, [sp, #4]
 800db42:	6813      	ldr	r3, [r2, #0]
 800db44:	4615      	mov	r5, r2
 800db46:	b933      	cbnz	r3, 800db56 <_free_r+0x32>
 800db48:	6063      	str	r3, [r4, #4]
 800db4a:	6014      	str	r4, [r2, #0]
 800db4c:	b003      	add	sp, #12
 800db4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db52:	f000 ba5f 	b.w	800e014 <__malloc_unlock>
 800db56:	42a3      	cmp	r3, r4
 800db58:	d90b      	bls.n	800db72 <_free_r+0x4e>
 800db5a:	6821      	ldr	r1, [r4, #0]
 800db5c:	1862      	adds	r2, r4, r1
 800db5e:	4293      	cmp	r3, r2
 800db60:	bf04      	itt	eq
 800db62:	681a      	ldreq	r2, [r3, #0]
 800db64:	685b      	ldreq	r3, [r3, #4]
 800db66:	6063      	str	r3, [r4, #4]
 800db68:	bf04      	itt	eq
 800db6a:	1852      	addeq	r2, r2, r1
 800db6c:	6022      	streq	r2, [r4, #0]
 800db6e:	602c      	str	r4, [r5, #0]
 800db70:	e7ec      	b.n	800db4c <_free_r+0x28>
 800db72:	461a      	mov	r2, r3
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	b10b      	cbz	r3, 800db7c <_free_r+0x58>
 800db78:	42a3      	cmp	r3, r4
 800db7a:	d9fa      	bls.n	800db72 <_free_r+0x4e>
 800db7c:	6811      	ldr	r1, [r2, #0]
 800db7e:	1855      	adds	r5, r2, r1
 800db80:	42a5      	cmp	r5, r4
 800db82:	d10b      	bne.n	800db9c <_free_r+0x78>
 800db84:	6824      	ldr	r4, [r4, #0]
 800db86:	4421      	add	r1, r4
 800db88:	1854      	adds	r4, r2, r1
 800db8a:	42a3      	cmp	r3, r4
 800db8c:	6011      	str	r1, [r2, #0]
 800db8e:	d1dd      	bne.n	800db4c <_free_r+0x28>
 800db90:	681c      	ldr	r4, [r3, #0]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	6053      	str	r3, [r2, #4]
 800db96:	4421      	add	r1, r4
 800db98:	6011      	str	r1, [r2, #0]
 800db9a:	e7d7      	b.n	800db4c <_free_r+0x28>
 800db9c:	d902      	bls.n	800dba4 <_free_r+0x80>
 800db9e:	230c      	movs	r3, #12
 800dba0:	6003      	str	r3, [r0, #0]
 800dba2:	e7d3      	b.n	800db4c <_free_r+0x28>
 800dba4:	6825      	ldr	r5, [r4, #0]
 800dba6:	1961      	adds	r1, r4, r5
 800dba8:	428b      	cmp	r3, r1
 800dbaa:	bf04      	itt	eq
 800dbac:	6819      	ldreq	r1, [r3, #0]
 800dbae:	685b      	ldreq	r3, [r3, #4]
 800dbb0:	6063      	str	r3, [r4, #4]
 800dbb2:	bf04      	itt	eq
 800dbb4:	1949      	addeq	r1, r1, r5
 800dbb6:	6021      	streq	r1, [r4, #0]
 800dbb8:	6054      	str	r4, [r2, #4]
 800dbba:	e7c7      	b.n	800db4c <_free_r+0x28>
 800dbbc:	b003      	add	sp, #12
 800dbbe:	bd30      	pop	{r4, r5, pc}
 800dbc0:	2000039c 	.word	0x2000039c

0800dbc4 <_malloc_r>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	1ccd      	adds	r5, r1, #3
 800dbc8:	f025 0503 	bic.w	r5, r5, #3
 800dbcc:	3508      	adds	r5, #8
 800dbce:	2d0c      	cmp	r5, #12
 800dbd0:	bf38      	it	cc
 800dbd2:	250c      	movcc	r5, #12
 800dbd4:	2d00      	cmp	r5, #0
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	db01      	blt.n	800dbde <_malloc_r+0x1a>
 800dbda:	42a9      	cmp	r1, r5
 800dbdc:	d903      	bls.n	800dbe6 <_malloc_r+0x22>
 800dbde:	230c      	movs	r3, #12
 800dbe0:	6033      	str	r3, [r6, #0]
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe6:	f000 fa0f 	bl	800e008 <__malloc_lock>
 800dbea:	4921      	ldr	r1, [pc, #132]	; (800dc70 <_malloc_r+0xac>)
 800dbec:	680a      	ldr	r2, [r1, #0]
 800dbee:	4614      	mov	r4, r2
 800dbf0:	b99c      	cbnz	r4, 800dc1a <_malloc_r+0x56>
 800dbf2:	4f20      	ldr	r7, [pc, #128]	; (800dc74 <_malloc_r+0xb0>)
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	b923      	cbnz	r3, 800dc02 <_malloc_r+0x3e>
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f000 f998 	bl	800df30 <_sbrk_r>
 800dc00:	6038      	str	r0, [r7, #0]
 800dc02:	4629      	mov	r1, r5
 800dc04:	4630      	mov	r0, r6
 800dc06:	f000 f993 	bl	800df30 <_sbrk_r>
 800dc0a:	1c43      	adds	r3, r0, #1
 800dc0c:	d123      	bne.n	800dc56 <_malloc_r+0x92>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	6033      	str	r3, [r6, #0]
 800dc12:	4630      	mov	r0, r6
 800dc14:	f000 f9fe 	bl	800e014 <__malloc_unlock>
 800dc18:	e7e3      	b.n	800dbe2 <_malloc_r+0x1e>
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	1b5b      	subs	r3, r3, r5
 800dc1e:	d417      	bmi.n	800dc50 <_malloc_r+0x8c>
 800dc20:	2b0b      	cmp	r3, #11
 800dc22:	d903      	bls.n	800dc2c <_malloc_r+0x68>
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	441c      	add	r4, r3
 800dc28:	6025      	str	r5, [r4, #0]
 800dc2a:	e004      	b.n	800dc36 <_malloc_r+0x72>
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	42a2      	cmp	r2, r4
 800dc30:	bf0c      	ite	eq
 800dc32:	600b      	streq	r3, [r1, #0]
 800dc34:	6053      	strne	r3, [r2, #4]
 800dc36:	4630      	mov	r0, r6
 800dc38:	f000 f9ec 	bl	800e014 <__malloc_unlock>
 800dc3c:	f104 000b 	add.w	r0, r4, #11
 800dc40:	1d23      	adds	r3, r4, #4
 800dc42:	f020 0007 	bic.w	r0, r0, #7
 800dc46:	1ac2      	subs	r2, r0, r3
 800dc48:	d0cc      	beq.n	800dbe4 <_malloc_r+0x20>
 800dc4a:	1a1b      	subs	r3, r3, r0
 800dc4c:	50a3      	str	r3, [r4, r2]
 800dc4e:	e7c9      	b.n	800dbe4 <_malloc_r+0x20>
 800dc50:	4622      	mov	r2, r4
 800dc52:	6864      	ldr	r4, [r4, #4]
 800dc54:	e7cc      	b.n	800dbf0 <_malloc_r+0x2c>
 800dc56:	1cc4      	adds	r4, r0, #3
 800dc58:	f024 0403 	bic.w	r4, r4, #3
 800dc5c:	42a0      	cmp	r0, r4
 800dc5e:	d0e3      	beq.n	800dc28 <_malloc_r+0x64>
 800dc60:	1a21      	subs	r1, r4, r0
 800dc62:	4630      	mov	r0, r6
 800dc64:	f000 f964 	bl	800df30 <_sbrk_r>
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d1dd      	bne.n	800dc28 <_malloc_r+0x64>
 800dc6c:	e7cf      	b.n	800dc0e <_malloc_r+0x4a>
 800dc6e:	bf00      	nop
 800dc70:	2000039c 	.word	0x2000039c
 800dc74:	200003a0 	.word	0x200003a0

0800dc78 <__ssputs_r>:
 800dc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7c:	688e      	ldr	r6, [r1, #8]
 800dc7e:	429e      	cmp	r6, r3
 800dc80:	4682      	mov	sl, r0
 800dc82:	460c      	mov	r4, r1
 800dc84:	4690      	mov	r8, r2
 800dc86:	461f      	mov	r7, r3
 800dc88:	d838      	bhi.n	800dcfc <__ssputs_r+0x84>
 800dc8a:	898a      	ldrh	r2, [r1, #12]
 800dc8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc90:	d032      	beq.n	800dcf8 <__ssputs_r+0x80>
 800dc92:	6825      	ldr	r5, [r4, #0]
 800dc94:	6909      	ldr	r1, [r1, #16]
 800dc96:	eba5 0901 	sub.w	r9, r5, r1
 800dc9a:	6965      	ldr	r5, [r4, #20]
 800dc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dca4:	3301      	adds	r3, #1
 800dca6:	444b      	add	r3, r9
 800dca8:	106d      	asrs	r5, r5, #1
 800dcaa:	429d      	cmp	r5, r3
 800dcac:	bf38      	it	cc
 800dcae:	461d      	movcc	r5, r3
 800dcb0:	0553      	lsls	r3, r2, #21
 800dcb2:	d531      	bpl.n	800dd18 <__ssputs_r+0xa0>
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	f7ff ff85 	bl	800dbc4 <_malloc_r>
 800dcba:	4606      	mov	r6, r0
 800dcbc:	b950      	cbnz	r0, 800dcd4 <__ssputs_r+0x5c>
 800dcbe:	230c      	movs	r3, #12
 800dcc0:	f8ca 3000 	str.w	r3, [sl]
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd4:	6921      	ldr	r1, [r4, #16]
 800dcd6:	464a      	mov	r2, r9
 800dcd8:	f7ff fb88 	bl	800d3ec <memcpy>
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	6126      	str	r6, [r4, #16]
 800dcea:	6165      	str	r5, [r4, #20]
 800dcec:	444e      	add	r6, r9
 800dcee:	eba5 0509 	sub.w	r5, r5, r9
 800dcf2:	6026      	str	r6, [r4, #0]
 800dcf4:	60a5      	str	r5, [r4, #8]
 800dcf6:	463e      	mov	r6, r7
 800dcf8:	42be      	cmp	r6, r7
 800dcfa:	d900      	bls.n	800dcfe <__ssputs_r+0x86>
 800dcfc:	463e      	mov	r6, r7
 800dcfe:	4632      	mov	r2, r6
 800dd00:	6820      	ldr	r0, [r4, #0]
 800dd02:	4641      	mov	r1, r8
 800dd04:	f000 f966 	bl	800dfd4 <memmove>
 800dd08:	68a3      	ldr	r3, [r4, #8]
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	1b9b      	subs	r3, r3, r6
 800dd0e:	4432      	add	r2, r6
 800dd10:	60a3      	str	r3, [r4, #8]
 800dd12:	6022      	str	r2, [r4, #0]
 800dd14:	2000      	movs	r0, #0
 800dd16:	e7db      	b.n	800dcd0 <__ssputs_r+0x58>
 800dd18:	462a      	mov	r2, r5
 800dd1a:	f000 f981 	bl	800e020 <_realloc_r>
 800dd1e:	4606      	mov	r6, r0
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d1e1      	bne.n	800dce8 <__ssputs_r+0x70>
 800dd24:	6921      	ldr	r1, [r4, #16]
 800dd26:	4650      	mov	r0, sl
 800dd28:	f7ff fefc 	bl	800db24 <_free_r>
 800dd2c:	e7c7      	b.n	800dcbe <__ssputs_r+0x46>
	...

0800dd30 <_svfiprintf_r>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	4698      	mov	r8, r3
 800dd36:	898b      	ldrh	r3, [r1, #12]
 800dd38:	061b      	lsls	r3, r3, #24
 800dd3a:	b09d      	sub	sp, #116	; 0x74
 800dd3c:	4607      	mov	r7, r0
 800dd3e:	460d      	mov	r5, r1
 800dd40:	4614      	mov	r4, r2
 800dd42:	d50e      	bpl.n	800dd62 <_svfiprintf_r+0x32>
 800dd44:	690b      	ldr	r3, [r1, #16]
 800dd46:	b963      	cbnz	r3, 800dd62 <_svfiprintf_r+0x32>
 800dd48:	2140      	movs	r1, #64	; 0x40
 800dd4a:	f7ff ff3b 	bl	800dbc4 <_malloc_r>
 800dd4e:	6028      	str	r0, [r5, #0]
 800dd50:	6128      	str	r0, [r5, #16]
 800dd52:	b920      	cbnz	r0, 800dd5e <_svfiprintf_r+0x2e>
 800dd54:	230c      	movs	r3, #12
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	e0d1      	b.n	800df02 <_svfiprintf_r+0x1d2>
 800dd5e:	2340      	movs	r3, #64	; 0x40
 800dd60:	616b      	str	r3, [r5, #20]
 800dd62:	2300      	movs	r3, #0
 800dd64:	9309      	str	r3, [sp, #36]	; 0x24
 800dd66:	2320      	movs	r3, #32
 800dd68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd70:	2330      	movs	r3, #48	; 0x30
 800dd72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df1c <_svfiprintf_r+0x1ec>
 800dd76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd7a:	f04f 0901 	mov.w	r9, #1
 800dd7e:	4623      	mov	r3, r4
 800dd80:	469a      	mov	sl, r3
 800dd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd86:	b10a      	cbz	r2, 800dd8c <_svfiprintf_r+0x5c>
 800dd88:	2a25      	cmp	r2, #37	; 0x25
 800dd8a:	d1f9      	bne.n	800dd80 <_svfiprintf_r+0x50>
 800dd8c:	ebba 0b04 	subs.w	fp, sl, r4
 800dd90:	d00b      	beq.n	800ddaa <_svfiprintf_r+0x7a>
 800dd92:	465b      	mov	r3, fp
 800dd94:	4622      	mov	r2, r4
 800dd96:	4629      	mov	r1, r5
 800dd98:	4638      	mov	r0, r7
 800dd9a:	f7ff ff6d 	bl	800dc78 <__ssputs_r>
 800dd9e:	3001      	adds	r0, #1
 800dda0:	f000 80aa 	beq.w	800def8 <_svfiprintf_r+0x1c8>
 800dda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda6:	445a      	add	r2, fp
 800dda8:	9209      	str	r2, [sp, #36]	; 0x24
 800ddaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f000 80a2 	beq.w	800def8 <_svfiprintf_r+0x1c8>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddbe:	f10a 0a01 	add.w	sl, sl, #1
 800ddc2:	9304      	str	r3, [sp, #16]
 800ddc4:	9307      	str	r3, [sp, #28]
 800ddc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddca:	931a      	str	r3, [sp, #104]	; 0x68
 800ddcc:	4654      	mov	r4, sl
 800ddce:	2205      	movs	r2, #5
 800ddd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd4:	4851      	ldr	r0, [pc, #324]	; (800df1c <_svfiprintf_r+0x1ec>)
 800ddd6:	f7f2 fa3b 	bl	8000250 <memchr>
 800ddda:	9a04      	ldr	r2, [sp, #16]
 800dddc:	b9d8      	cbnz	r0, 800de16 <_svfiprintf_r+0xe6>
 800ddde:	06d0      	lsls	r0, r2, #27
 800dde0:	bf44      	itt	mi
 800dde2:	2320      	movmi	r3, #32
 800dde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dde8:	0711      	lsls	r1, r2, #28
 800ddea:	bf44      	itt	mi
 800ddec:	232b      	movmi	r3, #43	; 0x2b
 800ddee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddf2:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf6:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf8:	d015      	beq.n	800de26 <_svfiprintf_r+0xf6>
 800ddfa:	9a07      	ldr	r2, [sp, #28]
 800ddfc:	4654      	mov	r4, sl
 800ddfe:	2000      	movs	r0, #0
 800de00:	f04f 0c0a 	mov.w	ip, #10
 800de04:	4621      	mov	r1, r4
 800de06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de0a:	3b30      	subs	r3, #48	; 0x30
 800de0c:	2b09      	cmp	r3, #9
 800de0e:	d94e      	bls.n	800deae <_svfiprintf_r+0x17e>
 800de10:	b1b0      	cbz	r0, 800de40 <_svfiprintf_r+0x110>
 800de12:	9207      	str	r2, [sp, #28]
 800de14:	e014      	b.n	800de40 <_svfiprintf_r+0x110>
 800de16:	eba0 0308 	sub.w	r3, r0, r8
 800de1a:	fa09 f303 	lsl.w	r3, r9, r3
 800de1e:	4313      	orrs	r3, r2
 800de20:	9304      	str	r3, [sp, #16]
 800de22:	46a2      	mov	sl, r4
 800de24:	e7d2      	b.n	800ddcc <_svfiprintf_r+0x9c>
 800de26:	9b03      	ldr	r3, [sp, #12]
 800de28:	1d19      	adds	r1, r3, #4
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	9103      	str	r1, [sp, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfbb      	ittet	lt
 800de32:	425b      	neglt	r3, r3
 800de34:	f042 0202 	orrlt.w	r2, r2, #2
 800de38:	9307      	strge	r3, [sp, #28]
 800de3a:	9307      	strlt	r3, [sp, #28]
 800de3c:	bfb8      	it	lt
 800de3e:	9204      	strlt	r2, [sp, #16]
 800de40:	7823      	ldrb	r3, [r4, #0]
 800de42:	2b2e      	cmp	r3, #46	; 0x2e
 800de44:	d10c      	bne.n	800de60 <_svfiprintf_r+0x130>
 800de46:	7863      	ldrb	r3, [r4, #1]
 800de48:	2b2a      	cmp	r3, #42	; 0x2a
 800de4a:	d135      	bne.n	800deb8 <_svfiprintf_r+0x188>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	1d1a      	adds	r2, r3, #4
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	9203      	str	r2, [sp, #12]
 800de54:	2b00      	cmp	r3, #0
 800de56:	bfb8      	it	lt
 800de58:	f04f 33ff 	movlt.w	r3, #4294967295
 800de5c:	3402      	adds	r4, #2
 800de5e:	9305      	str	r3, [sp, #20]
 800de60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df2c <_svfiprintf_r+0x1fc>
 800de64:	7821      	ldrb	r1, [r4, #0]
 800de66:	2203      	movs	r2, #3
 800de68:	4650      	mov	r0, sl
 800de6a:	f7f2 f9f1 	bl	8000250 <memchr>
 800de6e:	b140      	cbz	r0, 800de82 <_svfiprintf_r+0x152>
 800de70:	2340      	movs	r3, #64	; 0x40
 800de72:	eba0 000a 	sub.w	r0, r0, sl
 800de76:	fa03 f000 	lsl.w	r0, r3, r0
 800de7a:	9b04      	ldr	r3, [sp, #16]
 800de7c:	4303      	orrs	r3, r0
 800de7e:	3401      	adds	r4, #1
 800de80:	9304      	str	r3, [sp, #16]
 800de82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de86:	4826      	ldr	r0, [pc, #152]	; (800df20 <_svfiprintf_r+0x1f0>)
 800de88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de8c:	2206      	movs	r2, #6
 800de8e:	f7f2 f9df 	bl	8000250 <memchr>
 800de92:	2800      	cmp	r0, #0
 800de94:	d038      	beq.n	800df08 <_svfiprintf_r+0x1d8>
 800de96:	4b23      	ldr	r3, [pc, #140]	; (800df24 <_svfiprintf_r+0x1f4>)
 800de98:	bb1b      	cbnz	r3, 800dee2 <_svfiprintf_r+0x1b2>
 800de9a:	9b03      	ldr	r3, [sp, #12]
 800de9c:	3307      	adds	r3, #7
 800de9e:	f023 0307 	bic.w	r3, r3, #7
 800dea2:	3308      	adds	r3, #8
 800dea4:	9303      	str	r3, [sp, #12]
 800dea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea8:	4433      	add	r3, r6
 800deaa:	9309      	str	r3, [sp, #36]	; 0x24
 800deac:	e767      	b.n	800dd7e <_svfiprintf_r+0x4e>
 800deae:	fb0c 3202 	mla	r2, ip, r2, r3
 800deb2:	460c      	mov	r4, r1
 800deb4:	2001      	movs	r0, #1
 800deb6:	e7a5      	b.n	800de04 <_svfiprintf_r+0xd4>
 800deb8:	2300      	movs	r3, #0
 800deba:	3401      	adds	r4, #1
 800debc:	9305      	str	r3, [sp, #20]
 800debe:	4619      	mov	r1, r3
 800dec0:	f04f 0c0a 	mov.w	ip, #10
 800dec4:	4620      	mov	r0, r4
 800dec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deca:	3a30      	subs	r2, #48	; 0x30
 800decc:	2a09      	cmp	r2, #9
 800dece:	d903      	bls.n	800ded8 <_svfiprintf_r+0x1a8>
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d0c5      	beq.n	800de60 <_svfiprintf_r+0x130>
 800ded4:	9105      	str	r1, [sp, #20]
 800ded6:	e7c3      	b.n	800de60 <_svfiprintf_r+0x130>
 800ded8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dedc:	4604      	mov	r4, r0
 800dede:	2301      	movs	r3, #1
 800dee0:	e7f0      	b.n	800dec4 <_svfiprintf_r+0x194>
 800dee2:	ab03      	add	r3, sp, #12
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	462a      	mov	r2, r5
 800dee8:	4b0f      	ldr	r3, [pc, #60]	; (800df28 <_svfiprintf_r+0x1f8>)
 800deea:	a904      	add	r1, sp, #16
 800deec:	4638      	mov	r0, r7
 800deee:	f7fe f88f 	bl	800c010 <_printf_float>
 800def2:	1c42      	adds	r2, r0, #1
 800def4:	4606      	mov	r6, r0
 800def6:	d1d6      	bne.n	800dea6 <_svfiprintf_r+0x176>
 800def8:	89ab      	ldrh	r3, [r5, #12]
 800defa:	065b      	lsls	r3, r3, #25
 800defc:	f53f af2c 	bmi.w	800dd58 <_svfiprintf_r+0x28>
 800df00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df02:	b01d      	add	sp, #116	; 0x74
 800df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	ab03      	add	r3, sp, #12
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	462a      	mov	r2, r5
 800df0e:	4b06      	ldr	r3, [pc, #24]	; (800df28 <_svfiprintf_r+0x1f8>)
 800df10:	a904      	add	r1, sp, #16
 800df12:	4638      	mov	r0, r7
 800df14:	f7fe fb08 	bl	800c528 <_printf_i>
 800df18:	e7eb      	b.n	800def2 <_svfiprintf_r+0x1c2>
 800df1a:	bf00      	nop
 800df1c:	0800f164 	.word	0x0800f164
 800df20:	0800f16e 	.word	0x0800f16e
 800df24:	0800c011 	.word	0x0800c011
 800df28:	0800dc79 	.word	0x0800dc79
 800df2c:	0800f16a 	.word	0x0800f16a

0800df30 <_sbrk_r>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	4d06      	ldr	r5, [pc, #24]	; (800df4c <_sbrk_r+0x1c>)
 800df34:	2300      	movs	r3, #0
 800df36:	4604      	mov	r4, r0
 800df38:	4608      	mov	r0, r1
 800df3a:	602b      	str	r3, [r5, #0]
 800df3c:	f7f7 f8a2 	bl	8005084 <_sbrk>
 800df40:	1c43      	adds	r3, r0, #1
 800df42:	d102      	bne.n	800df4a <_sbrk_r+0x1a>
 800df44:	682b      	ldr	r3, [r5, #0]
 800df46:	b103      	cbz	r3, 800df4a <_sbrk_r+0x1a>
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	20000814 	.word	0x20000814

0800df50 <__assert_func>:
 800df50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df52:	4614      	mov	r4, r2
 800df54:	461a      	mov	r2, r3
 800df56:	4b09      	ldr	r3, [pc, #36]	; (800df7c <__assert_func+0x2c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4605      	mov	r5, r0
 800df5c:	68d8      	ldr	r0, [r3, #12]
 800df5e:	b14c      	cbz	r4, 800df74 <__assert_func+0x24>
 800df60:	4b07      	ldr	r3, [pc, #28]	; (800df80 <__assert_func+0x30>)
 800df62:	9100      	str	r1, [sp, #0]
 800df64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df68:	4906      	ldr	r1, [pc, #24]	; (800df84 <__assert_func+0x34>)
 800df6a:	462b      	mov	r3, r5
 800df6c:	f000 f80e 	bl	800df8c <fiprintf>
 800df70:	f000 faa4 	bl	800e4bc <abort>
 800df74:	4b04      	ldr	r3, [pc, #16]	; (800df88 <__assert_func+0x38>)
 800df76:	461c      	mov	r4, r3
 800df78:	e7f3      	b.n	800df62 <__assert_func+0x12>
 800df7a:	bf00      	nop
 800df7c:	200000dc 	.word	0x200000dc
 800df80:	0800f175 	.word	0x0800f175
 800df84:	0800f182 	.word	0x0800f182
 800df88:	0800f1b0 	.word	0x0800f1b0

0800df8c <fiprintf>:
 800df8c:	b40e      	push	{r1, r2, r3}
 800df8e:	b503      	push	{r0, r1, lr}
 800df90:	4601      	mov	r1, r0
 800df92:	ab03      	add	r3, sp, #12
 800df94:	4805      	ldr	r0, [pc, #20]	; (800dfac <fiprintf+0x20>)
 800df96:	f853 2b04 	ldr.w	r2, [r3], #4
 800df9a:	6800      	ldr	r0, [r0, #0]
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	f000 f88f 	bl	800e0c0 <_vfiprintf_r>
 800dfa2:	b002      	add	sp, #8
 800dfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfa8:	b003      	add	sp, #12
 800dfaa:	4770      	bx	lr
 800dfac:	200000dc 	.word	0x200000dc

0800dfb0 <__ascii_mbtowc>:
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	b901      	cbnz	r1, 800dfb6 <__ascii_mbtowc+0x6>
 800dfb4:	a901      	add	r1, sp, #4
 800dfb6:	b142      	cbz	r2, 800dfca <__ascii_mbtowc+0x1a>
 800dfb8:	b14b      	cbz	r3, 800dfce <__ascii_mbtowc+0x1e>
 800dfba:	7813      	ldrb	r3, [r2, #0]
 800dfbc:	600b      	str	r3, [r1, #0]
 800dfbe:	7812      	ldrb	r2, [r2, #0]
 800dfc0:	1e10      	subs	r0, r2, #0
 800dfc2:	bf18      	it	ne
 800dfc4:	2001      	movne	r0, #1
 800dfc6:	b002      	add	sp, #8
 800dfc8:	4770      	bx	lr
 800dfca:	4610      	mov	r0, r2
 800dfcc:	e7fb      	b.n	800dfc6 <__ascii_mbtowc+0x16>
 800dfce:	f06f 0001 	mvn.w	r0, #1
 800dfd2:	e7f8      	b.n	800dfc6 <__ascii_mbtowc+0x16>

0800dfd4 <memmove>:
 800dfd4:	4288      	cmp	r0, r1
 800dfd6:	b510      	push	{r4, lr}
 800dfd8:	eb01 0402 	add.w	r4, r1, r2
 800dfdc:	d902      	bls.n	800dfe4 <memmove+0x10>
 800dfde:	4284      	cmp	r4, r0
 800dfe0:	4623      	mov	r3, r4
 800dfe2:	d807      	bhi.n	800dff4 <memmove+0x20>
 800dfe4:	1e43      	subs	r3, r0, #1
 800dfe6:	42a1      	cmp	r1, r4
 800dfe8:	d008      	beq.n	800dffc <memmove+0x28>
 800dfea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dff2:	e7f8      	b.n	800dfe6 <memmove+0x12>
 800dff4:	4402      	add	r2, r0
 800dff6:	4601      	mov	r1, r0
 800dff8:	428a      	cmp	r2, r1
 800dffa:	d100      	bne.n	800dffe <memmove+0x2a>
 800dffc:	bd10      	pop	{r4, pc}
 800dffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e006:	e7f7      	b.n	800dff8 <memmove+0x24>

0800e008 <__malloc_lock>:
 800e008:	4801      	ldr	r0, [pc, #4]	; (800e010 <__malloc_lock+0x8>)
 800e00a:	f000 bc17 	b.w	800e83c <__retarget_lock_acquire_recursive>
 800e00e:	bf00      	nop
 800e010:	2000081c 	.word	0x2000081c

0800e014 <__malloc_unlock>:
 800e014:	4801      	ldr	r0, [pc, #4]	; (800e01c <__malloc_unlock+0x8>)
 800e016:	f000 bc12 	b.w	800e83e <__retarget_lock_release_recursive>
 800e01a:	bf00      	nop
 800e01c:	2000081c 	.word	0x2000081c

0800e020 <_realloc_r>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	4607      	mov	r7, r0
 800e024:	4614      	mov	r4, r2
 800e026:	460e      	mov	r6, r1
 800e028:	b921      	cbnz	r1, 800e034 <_realloc_r+0x14>
 800e02a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e02e:	4611      	mov	r1, r2
 800e030:	f7ff bdc8 	b.w	800dbc4 <_malloc_r>
 800e034:	b922      	cbnz	r2, 800e040 <_realloc_r+0x20>
 800e036:	f7ff fd75 	bl	800db24 <_free_r>
 800e03a:	4625      	mov	r5, r4
 800e03c:	4628      	mov	r0, r5
 800e03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e040:	f000 fc62 	bl	800e908 <_malloc_usable_size_r>
 800e044:	42a0      	cmp	r0, r4
 800e046:	d20f      	bcs.n	800e068 <_realloc_r+0x48>
 800e048:	4621      	mov	r1, r4
 800e04a:	4638      	mov	r0, r7
 800e04c:	f7ff fdba 	bl	800dbc4 <_malloc_r>
 800e050:	4605      	mov	r5, r0
 800e052:	2800      	cmp	r0, #0
 800e054:	d0f2      	beq.n	800e03c <_realloc_r+0x1c>
 800e056:	4631      	mov	r1, r6
 800e058:	4622      	mov	r2, r4
 800e05a:	f7ff f9c7 	bl	800d3ec <memcpy>
 800e05e:	4631      	mov	r1, r6
 800e060:	4638      	mov	r0, r7
 800e062:	f7ff fd5f 	bl	800db24 <_free_r>
 800e066:	e7e9      	b.n	800e03c <_realloc_r+0x1c>
 800e068:	4635      	mov	r5, r6
 800e06a:	e7e7      	b.n	800e03c <_realloc_r+0x1c>

0800e06c <__sfputc_r>:
 800e06c:	6893      	ldr	r3, [r2, #8]
 800e06e:	3b01      	subs	r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	b410      	push	{r4}
 800e074:	6093      	str	r3, [r2, #8]
 800e076:	da08      	bge.n	800e08a <__sfputc_r+0x1e>
 800e078:	6994      	ldr	r4, [r2, #24]
 800e07a:	42a3      	cmp	r3, r4
 800e07c:	db01      	blt.n	800e082 <__sfputc_r+0x16>
 800e07e:	290a      	cmp	r1, #10
 800e080:	d103      	bne.n	800e08a <__sfputc_r+0x1e>
 800e082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e086:	f000 b94b 	b.w	800e320 <__swbuf_r>
 800e08a:	6813      	ldr	r3, [r2, #0]
 800e08c:	1c58      	adds	r0, r3, #1
 800e08e:	6010      	str	r0, [r2, #0]
 800e090:	7019      	strb	r1, [r3, #0]
 800e092:	4608      	mov	r0, r1
 800e094:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <__sfputs_r>:
 800e09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09c:	4606      	mov	r6, r0
 800e09e:	460f      	mov	r7, r1
 800e0a0:	4614      	mov	r4, r2
 800e0a2:	18d5      	adds	r5, r2, r3
 800e0a4:	42ac      	cmp	r4, r5
 800e0a6:	d101      	bne.n	800e0ac <__sfputs_r+0x12>
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	e007      	b.n	800e0bc <__sfputs_r+0x22>
 800e0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b0:	463a      	mov	r2, r7
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f7ff ffda 	bl	800e06c <__sfputc_r>
 800e0b8:	1c43      	adds	r3, r0, #1
 800e0ba:	d1f3      	bne.n	800e0a4 <__sfputs_r+0xa>
 800e0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0c0 <_vfiprintf_r>:
 800e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c4:	460d      	mov	r5, r1
 800e0c6:	b09d      	sub	sp, #116	; 0x74
 800e0c8:	4614      	mov	r4, r2
 800e0ca:	4698      	mov	r8, r3
 800e0cc:	4606      	mov	r6, r0
 800e0ce:	b118      	cbz	r0, 800e0d8 <_vfiprintf_r+0x18>
 800e0d0:	6983      	ldr	r3, [r0, #24]
 800e0d2:	b90b      	cbnz	r3, 800e0d8 <_vfiprintf_r+0x18>
 800e0d4:	f000 fb14 	bl	800e700 <__sinit>
 800e0d8:	4b89      	ldr	r3, [pc, #548]	; (800e300 <_vfiprintf_r+0x240>)
 800e0da:	429d      	cmp	r5, r3
 800e0dc:	d11b      	bne.n	800e116 <_vfiprintf_r+0x56>
 800e0de:	6875      	ldr	r5, [r6, #4]
 800e0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0e2:	07d9      	lsls	r1, r3, #31
 800e0e4:	d405      	bmi.n	800e0f2 <_vfiprintf_r+0x32>
 800e0e6:	89ab      	ldrh	r3, [r5, #12]
 800e0e8:	059a      	lsls	r2, r3, #22
 800e0ea:	d402      	bmi.n	800e0f2 <_vfiprintf_r+0x32>
 800e0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0ee:	f000 fba5 	bl	800e83c <__retarget_lock_acquire_recursive>
 800e0f2:	89ab      	ldrh	r3, [r5, #12]
 800e0f4:	071b      	lsls	r3, r3, #28
 800e0f6:	d501      	bpl.n	800e0fc <_vfiprintf_r+0x3c>
 800e0f8:	692b      	ldr	r3, [r5, #16]
 800e0fa:	b9eb      	cbnz	r3, 800e138 <_vfiprintf_r+0x78>
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	4630      	mov	r0, r6
 800e100:	f000 f96e 	bl	800e3e0 <__swsetup_r>
 800e104:	b1c0      	cbz	r0, 800e138 <_vfiprintf_r+0x78>
 800e106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e108:	07dc      	lsls	r4, r3, #31
 800e10a:	d50e      	bpl.n	800e12a <_vfiprintf_r+0x6a>
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295
 800e110:	b01d      	add	sp, #116	; 0x74
 800e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	4b7b      	ldr	r3, [pc, #492]	; (800e304 <_vfiprintf_r+0x244>)
 800e118:	429d      	cmp	r5, r3
 800e11a:	d101      	bne.n	800e120 <_vfiprintf_r+0x60>
 800e11c:	68b5      	ldr	r5, [r6, #8]
 800e11e:	e7df      	b.n	800e0e0 <_vfiprintf_r+0x20>
 800e120:	4b79      	ldr	r3, [pc, #484]	; (800e308 <_vfiprintf_r+0x248>)
 800e122:	429d      	cmp	r5, r3
 800e124:	bf08      	it	eq
 800e126:	68f5      	ldreq	r5, [r6, #12]
 800e128:	e7da      	b.n	800e0e0 <_vfiprintf_r+0x20>
 800e12a:	89ab      	ldrh	r3, [r5, #12]
 800e12c:	0598      	lsls	r0, r3, #22
 800e12e:	d4ed      	bmi.n	800e10c <_vfiprintf_r+0x4c>
 800e130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e132:	f000 fb84 	bl	800e83e <__retarget_lock_release_recursive>
 800e136:	e7e9      	b.n	800e10c <_vfiprintf_r+0x4c>
 800e138:	2300      	movs	r3, #0
 800e13a:	9309      	str	r3, [sp, #36]	; 0x24
 800e13c:	2320      	movs	r3, #32
 800e13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e142:	f8cd 800c 	str.w	r8, [sp, #12]
 800e146:	2330      	movs	r3, #48	; 0x30
 800e148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e30c <_vfiprintf_r+0x24c>
 800e14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e150:	f04f 0901 	mov.w	r9, #1
 800e154:	4623      	mov	r3, r4
 800e156:	469a      	mov	sl, r3
 800e158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e15c:	b10a      	cbz	r2, 800e162 <_vfiprintf_r+0xa2>
 800e15e:	2a25      	cmp	r2, #37	; 0x25
 800e160:	d1f9      	bne.n	800e156 <_vfiprintf_r+0x96>
 800e162:	ebba 0b04 	subs.w	fp, sl, r4
 800e166:	d00b      	beq.n	800e180 <_vfiprintf_r+0xc0>
 800e168:	465b      	mov	r3, fp
 800e16a:	4622      	mov	r2, r4
 800e16c:	4629      	mov	r1, r5
 800e16e:	4630      	mov	r0, r6
 800e170:	f7ff ff93 	bl	800e09a <__sfputs_r>
 800e174:	3001      	adds	r0, #1
 800e176:	f000 80aa 	beq.w	800e2ce <_vfiprintf_r+0x20e>
 800e17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e17c:	445a      	add	r2, fp
 800e17e:	9209      	str	r2, [sp, #36]	; 0x24
 800e180:	f89a 3000 	ldrb.w	r3, [sl]
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 80a2 	beq.w	800e2ce <_vfiprintf_r+0x20e>
 800e18a:	2300      	movs	r3, #0
 800e18c:	f04f 32ff 	mov.w	r2, #4294967295
 800e190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e194:	f10a 0a01 	add.w	sl, sl, #1
 800e198:	9304      	str	r3, [sp, #16]
 800e19a:	9307      	str	r3, [sp, #28]
 800e19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800e1a2:	4654      	mov	r4, sl
 800e1a4:	2205      	movs	r2, #5
 800e1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1aa:	4858      	ldr	r0, [pc, #352]	; (800e30c <_vfiprintf_r+0x24c>)
 800e1ac:	f7f2 f850 	bl	8000250 <memchr>
 800e1b0:	9a04      	ldr	r2, [sp, #16]
 800e1b2:	b9d8      	cbnz	r0, 800e1ec <_vfiprintf_r+0x12c>
 800e1b4:	06d1      	lsls	r1, r2, #27
 800e1b6:	bf44      	itt	mi
 800e1b8:	2320      	movmi	r3, #32
 800e1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1be:	0713      	lsls	r3, r2, #28
 800e1c0:	bf44      	itt	mi
 800e1c2:	232b      	movmi	r3, #43	; 0x2b
 800e1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ce:	d015      	beq.n	800e1fc <_vfiprintf_r+0x13c>
 800e1d0:	9a07      	ldr	r2, [sp, #28]
 800e1d2:	4654      	mov	r4, sl
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	f04f 0c0a 	mov.w	ip, #10
 800e1da:	4621      	mov	r1, r4
 800e1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1e0:	3b30      	subs	r3, #48	; 0x30
 800e1e2:	2b09      	cmp	r3, #9
 800e1e4:	d94e      	bls.n	800e284 <_vfiprintf_r+0x1c4>
 800e1e6:	b1b0      	cbz	r0, 800e216 <_vfiprintf_r+0x156>
 800e1e8:	9207      	str	r2, [sp, #28]
 800e1ea:	e014      	b.n	800e216 <_vfiprintf_r+0x156>
 800e1ec:	eba0 0308 	sub.w	r3, r0, r8
 800e1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	9304      	str	r3, [sp, #16]
 800e1f8:	46a2      	mov	sl, r4
 800e1fa:	e7d2      	b.n	800e1a2 <_vfiprintf_r+0xe2>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1d19      	adds	r1, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9103      	str	r1, [sp, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	bfbb      	ittet	lt
 800e208:	425b      	neglt	r3, r3
 800e20a:	f042 0202 	orrlt.w	r2, r2, #2
 800e20e:	9307      	strge	r3, [sp, #28]
 800e210:	9307      	strlt	r3, [sp, #28]
 800e212:	bfb8      	it	lt
 800e214:	9204      	strlt	r2, [sp, #16]
 800e216:	7823      	ldrb	r3, [r4, #0]
 800e218:	2b2e      	cmp	r3, #46	; 0x2e
 800e21a:	d10c      	bne.n	800e236 <_vfiprintf_r+0x176>
 800e21c:	7863      	ldrb	r3, [r4, #1]
 800e21e:	2b2a      	cmp	r3, #42	; 0x2a
 800e220:	d135      	bne.n	800e28e <_vfiprintf_r+0x1ce>
 800e222:	9b03      	ldr	r3, [sp, #12]
 800e224:	1d1a      	adds	r2, r3, #4
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	9203      	str	r2, [sp, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	bfb8      	it	lt
 800e22e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e232:	3402      	adds	r4, #2
 800e234:	9305      	str	r3, [sp, #20]
 800e236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e31c <_vfiprintf_r+0x25c>
 800e23a:	7821      	ldrb	r1, [r4, #0]
 800e23c:	2203      	movs	r2, #3
 800e23e:	4650      	mov	r0, sl
 800e240:	f7f2 f806 	bl	8000250 <memchr>
 800e244:	b140      	cbz	r0, 800e258 <_vfiprintf_r+0x198>
 800e246:	2340      	movs	r3, #64	; 0x40
 800e248:	eba0 000a 	sub.w	r0, r0, sl
 800e24c:	fa03 f000 	lsl.w	r0, r3, r0
 800e250:	9b04      	ldr	r3, [sp, #16]
 800e252:	4303      	orrs	r3, r0
 800e254:	3401      	adds	r4, #1
 800e256:	9304      	str	r3, [sp, #16]
 800e258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e25c:	482c      	ldr	r0, [pc, #176]	; (800e310 <_vfiprintf_r+0x250>)
 800e25e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e262:	2206      	movs	r2, #6
 800e264:	f7f1 fff4 	bl	8000250 <memchr>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d03f      	beq.n	800e2ec <_vfiprintf_r+0x22c>
 800e26c:	4b29      	ldr	r3, [pc, #164]	; (800e314 <_vfiprintf_r+0x254>)
 800e26e:	bb1b      	cbnz	r3, 800e2b8 <_vfiprintf_r+0x1f8>
 800e270:	9b03      	ldr	r3, [sp, #12]
 800e272:	3307      	adds	r3, #7
 800e274:	f023 0307 	bic.w	r3, r3, #7
 800e278:	3308      	adds	r3, #8
 800e27a:	9303      	str	r3, [sp, #12]
 800e27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e27e:	443b      	add	r3, r7
 800e280:	9309      	str	r3, [sp, #36]	; 0x24
 800e282:	e767      	b.n	800e154 <_vfiprintf_r+0x94>
 800e284:	fb0c 3202 	mla	r2, ip, r2, r3
 800e288:	460c      	mov	r4, r1
 800e28a:	2001      	movs	r0, #1
 800e28c:	e7a5      	b.n	800e1da <_vfiprintf_r+0x11a>
 800e28e:	2300      	movs	r3, #0
 800e290:	3401      	adds	r4, #1
 800e292:	9305      	str	r3, [sp, #20]
 800e294:	4619      	mov	r1, r3
 800e296:	f04f 0c0a 	mov.w	ip, #10
 800e29a:	4620      	mov	r0, r4
 800e29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2a0:	3a30      	subs	r2, #48	; 0x30
 800e2a2:	2a09      	cmp	r2, #9
 800e2a4:	d903      	bls.n	800e2ae <_vfiprintf_r+0x1ee>
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d0c5      	beq.n	800e236 <_vfiprintf_r+0x176>
 800e2aa:	9105      	str	r1, [sp, #20]
 800e2ac:	e7c3      	b.n	800e236 <_vfiprintf_r+0x176>
 800e2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e7f0      	b.n	800e29a <_vfiprintf_r+0x1da>
 800e2b8:	ab03      	add	r3, sp, #12
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	462a      	mov	r2, r5
 800e2be:	4b16      	ldr	r3, [pc, #88]	; (800e318 <_vfiprintf_r+0x258>)
 800e2c0:	a904      	add	r1, sp, #16
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7fd fea4 	bl	800c010 <_printf_float>
 800e2c8:	4607      	mov	r7, r0
 800e2ca:	1c78      	adds	r0, r7, #1
 800e2cc:	d1d6      	bne.n	800e27c <_vfiprintf_r+0x1bc>
 800e2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2d0:	07d9      	lsls	r1, r3, #31
 800e2d2:	d405      	bmi.n	800e2e0 <_vfiprintf_r+0x220>
 800e2d4:	89ab      	ldrh	r3, [r5, #12]
 800e2d6:	059a      	lsls	r2, r3, #22
 800e2d8:	d402      	bmi.n	800e2e0 <_vfiprintf_r+0x220>
 800e2da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2dc:	f000 faaf 	bl	800e83e <__retarget_lock_release_recursive>
 800e2e0:	89ab      	ldrh	r3, [r5, #12]
 800e2e2:	065b      	lsls	r3, r3, #25
 800e2e4:	f53f af12 	bmi.w	800e10c <_vfiprintf_r+0x4c>
 800e2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ea:	e711      	b.n	800e110 <_vfiprintf_r+0x50>
 800e2ec:	ab03      	add	r3, sp, #12
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	4b09      	ldr	r3, [pc, #36]	; (800e318 <_vfiprintf_r+0x258>)
 800e2f4:	a904      	add	r1, sp, #16
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f7fe f916 	bl	800c528 <_printf_i>
 800e2fc:	e7e4      	b.n	800e2c8 <_vfiprintf_r+0x208>
 800e2fe:	bf00      	nop
 800e300:	0800f2dc 	.word	0x0800f2dc
 800e304:	0800f2fc 	.word	0x0800f2fc
 800e308:	0800f2bc 	.word	0x0800f2bc
 800e30c:	0800f164 	.word	0x0800f164
 800e310:	0800f16e 	.word	0x0800f16e
 800e314:	0800c011 	.word	0x0800c011
 800e318:	0800e09b 	.word	0x0800e09b
 800e31c:	0800f16a 	.word	0x0800f16a

0800e320 <__swbuf_r>:
 800e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e322:	460e      	mov	r6, r1
 800e324:	4614      	mov	r4, r2
 800e326:	4605      	mov	r5, r0
 800e328:	b118      	cbz	r0, 800e332 <__swbuf_r+0x12>
 800e32a:	6983      	ldr	r3, [r0, #24]
 800e32c:	b90b      	cbnz	r3, 800e332 <__swbuf_r+0x12>
 800e32e:	f000 f9e7 	bl	800e700 <__sinit>
 800e332:	4b21      	ldr	r3, [pc, #132]	; (800e3b8 <__swbuf_r+0x98>)
 800e334:	429c      	cmp	r4, r3
 800e336:	d12b      	bne.n	800e390 <__swbuf_r+0x70>
 800e338:	686c      	ldr	r4, [r5, #4]
 800e33a:	69a3      	ldr	r3, [r4, #24]
 800e33c:	60a3      	str	r3, [r4, #8]
 800e33e:	89a3      	ldrh	r3, [r4, #12]
 800e340:	071a      	lsls	r2, r3, #28
 800e342:	d52f      	bpl.n	800e3a4 <__swbuf_r+0x84>
 800e344:	6923      	ldr	r3, [r4, #16]
 800e346:	b36b      	cbz	r3, 800e3a4 <__swbuf_r+0x84>
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	6820      	ldr	r0, [r4, #0]
 800e34c:	1ac0      	subs	r0, r0, r3
 800e34e:	6963      	ldr	r3, [r4, #20]
 800e350:	b2f6      	uxtb	r6, r6
 800e352:	4283      	cmp	r3, r0
 800e354:	4637      	mov	r7, r6
 800e356:	dc04      	bgt.n	800e362 <__swbuf_r+0x42>
 800e358:	4621      	mov	r1, r4
 800e35a:	4628      	mov	r0, r5
 800e35c:	f000 f93c 	bl	800e5d8 <_fflush_r>
 800e360:	bb30      	cbnz	r0, 800e3b0 <__swbuf_r+0x90>
 800e362:	68a3      	ldr	r3, [r4, #8]
 800e364:	3b01      	subs	r3, #1
 800e366:	60a3      	str	r3, [r4, #8]
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	6022      	str	r2, [r4, #0]
 800e36e:	701e      	strb	r6, [r3, #0]
 800e370:	6963      	ldr	r3, [r4, #20]
 800e372:	3001      	adds	r0, #1
 800e374:	4283      	cmp	r3, r0
 800e376:	d004      	beq.n	800e382 <__swbuf_r+0x62>
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	07db      	lsls	r3, r3, #31
 800e37c:	d506      	bpl.n	800e38c <__swbuf_r+0x6c>
 800e37e:	2e0a      	cmp	r6, #10
 800e380:	d104      	bne.n	800e38c <__swbuf_r+0x6c>
 800e382:	4621      	mov	r1, r4
 800e384:	4628      	mov	r0, r5
 800e386:	f000 f927 	bl	800e5d8 <_fflush_r>
 800e38a:	b988      	cbnz	r0, 800e3b0 <__swbuf_r+0x90>
 800e38c:	4638      	mov	r0, r7
 800e38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e390:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <__swbuf_r+0x9c>)
 800e392:	429c      	cmp	r4, r3
 800e394:	d101      	bne.n	800e39a <__swbuf_r+0x7a>
 800e396:	68ac      	ldr	r4, [r5, #8]
 800e398:	e7cf      	b.n	800e33a <__swbuf_r+0x1a>
 800e39a:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <__swbuf_r+0xa0>)
 800e39c:	429c      	cmp	r4, r3
 800e39e:	bf08      	it	eq
 800e3a0:	68ec      	ldreq	r4, [r5, #12]
 800e3a2:	e7ca      	b.n	800e33a <__swbuf_r+0x1a>
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	f000 f81a 	bl	800e3e0 <__swsetup_r>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d0cb      	beq.n	800e348 <__swbuf_r+0x28>
 800e3b0:	f04f 37ff 	mov.w	r7, #4294967295
 800e3b4:	e7ea      	b.n	800e38c <__swbuf_r+0x6c>
 800e3b6:	bf00      	nop
 800e3b8:	0800f2dc 	.word	0x0800f2dc
 800e3bc:	0800f2fc 	.word	0x0800f2fc
 800e3c0:	0800f2bc 	.word	0x0800f2bc

0800e3c4 <__ascii_wctomb>:
 800e3c4:	b149      	cbz	r1, 800e3da <__ascii_wctomb+0x16>
 800e3c6:	2aff      	cmp	r2, #255	; 0xff
 800e3c8:	bf85      	ittet	hi
 800e3ca:	238a      	movhi	r3, #138	; 0x8a
 800e3cc:	6003      	strhi	r3, [r0, #0]
 800e3ce:	700a      	strbls	r2, [r1, #0]
 800e3d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3d4:	bf98      	it	ls
 800e3d6:	2001      	movls	r0, #1
 800e3d8:	4770      	bx	lr
 800e3da:	4608      	mov	r0, r1
 800e3dc:	4770      	bx	lr
	...

0800e3e0 <__swsetup_r>:
 800e3e0:	4b32      	ldr	r3, [pc, #200]	; (800e4ac <__swsetup_r+0xcc>)
 800e3e2:	b570      	push	{r4, r5, r6, lr}
 800e3e4:	681d      	ldr	r5, [r3, #0]
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	b125      	cbz	r5, 800e3f6 <__swsetup_r+0x16>
 800e3ec:	69ab      	ldr	r3, [r5, #24]
 800e3ee:	b913      	cbnz	r3, 800e3f6 <__swsetup_r+0x16>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f000 f985 	bl	800e700 <__sinit>
 800e3f6:	4b2e      	ldr	r3, [pc, #184]	; (800e4b0 <__swsetup_r+0xd0>)
 800e3f8:	429c      	cmp	r4, r3
 800e3fa:	d10f      	bne.n	800e41c <__swsetup_r+0x3c>
 800e3fc:	686c      	ldr	r4, [r5, #4]
 800e3fe:	89a3      	ldrh	r3, [r4, #12]
 800e400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e404:	0719      	lsls	r1, r3, #28
 800e406:	d42c      	bmi.n	800e462 <__swsetup_r+0x82>
 800e408:	06dd      	lsls	r5, r3, #27
 800e40a:	d411      	bmi.n	800e430 <__swsetup_r+0x50>
 800e40c:	2309      	movs	r3, #9
 800e40e:	6033      	str	r3, [r6, #0]
 800e410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e414:	81a3      	strh	r3, [r4, #12]
 800e416:	f04f 30ff 	mov.w	r0, #4294967295
 800e41a:	e03e      	b.n	800e49a <__swsetup_r+0xba>
 800e41c:	4b25      	ldr	r3, [pc, #148]	; (800e4b4 <__swsetup_r+0xd4>)
 800e41e:	429c      	cmp	r4, r3
 800e420:	d101      	bne.n	800e426 <__swsetup_r+0x46>
 800e422:	68ac      	ldr	r4, [r5, #8]
 800e424:	e7eb      	b.n	800e3fe <__swsetup_r+0x1e>
 800e426:	4b24      	ldr	r3, [pc, #144]	; (800e4b8 <__swsetup_r+0xd8>)
 800e428:	429c      	cmp	r4, r3
 800e42a:	bf08      	it	eq
 800e42c:	68ec      	ldreq	r4, [r5, #12]
 800e42e:	e7e6      	b.n	800e3fe <__swsetup_r+0x1e>
 800e430:	0758      	lsls	r0, r3, #29
 800e432:	d512      	bpl.n	800e45a <__swsetup_r+0x7a>
 800e434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e436:	b141      	cbz	r1, 800e44a <__swsetup_r+0x6a>
 800e438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e43c:	4299      	cmp	r1, r3
 800e43e:	d002      	beq.n	800e446 <__swsetup_r+0x66>
 800e440:	4630      	mov	r0, r6
 800e442:	f7ff fb6f 	bl	800db24 <_free_r>
 800e446:	2300      	movs	r3, #0
 800e448:	6363      	str	r3, [r4, #52]	; 0x34
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e450:	81a3      	strh	r3, [r4, #12]
 800e452:	2300      	movs	r3, #0
 800e454:	6063      	str	r3, [r4, #4]
 800e456:	6923      	ldr	r3, [r4, #16]
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f043 0308 	orr.w	r3, r3, #8
 800e460:	81a3      	strh	r3, [r4, #12]
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	b94b      	cbnz	r3, 800e47a <__swsetup_r+0x9a>
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e470:	d003      	beq.n	800e47a <__swsetup_r+0x9a>
 800e472:	4621      	mov	r1, r4
 800e474:	4630      	mov	r0, r6
 800e476:	f000 fa07 	bl	800e888 <__smakebuf_r>
 800e47a:	89a0      	ldrh	r0, [r4, #12]
 800e47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e480:	f010 0301 	ands.w	r3, r0, #1
 800e484:	d00a      	beq.n	800e49c <__swsetup_r+0xbc>
 800e486:	2300      	movs	r3, #0
 800e488:	60a3      	str	r3, [r4, #8]
 800e48a:	6963      	ldr	r3, [r4, #20]
 800e48c:	425b      	negs	r3, r3
 800e48e:	61a3      	str	r3, [r4, #24]
 800e490:	6923      	ldr	r3, [r4, #16]
 800e492:	b943      	cbnz	r3, 800e4a6 <__swsetup_r+0xc6>
 800e494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e498:	d1ba      	bne.n	800e410 <__swsetup_r+0x30>
 800e49a:	bd70      	pop	{r4, r5, r6, pc}
 800e49c:	0781      	lsls	r1, r0, #30
 800e49e:	bf58      	it	pl
 800e4a0:	6963      	ldrpl	r3, [r4, #20]
 800e4a2:	60a3      	str	r3, [r4, #8]
 800e4a4:	e7f4      	b.n	800e490 <__swsetup_r+0xb0>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	e7f7      	b.n	800e49a <__swsetup_r+0xba>
 800e4aa:	bf00      	nop
 800e4ac:	200000dc 	.word	0x200000dc
 800e4b0:	0800f2dc 	.word	0x0800f2dc
 800e4b4:	0800f2fc 	.word	0x0800f2fc
 800e4b8:	0800f2bc 	.word	0x0800f2bc

0800e4bc <abort>:
 800e4bc:	b508      	push	{r3, lr}
 800e4be:	2006      	movs	r0, #6
 800e4c0:	f000 fa52 	bl	800e968 <raise>
 800e4c4:	2001      	movs	r0, #1
 800e4c6:	f7f6 fd65 	bl	8004f94 <_exit>
	...

0800e4cc <__sflush_r>:
 800e4cc:	898a      	ldrh	r2, [r1, #12]
 800e4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d2:	4605      	mov	r5, r0
 800e4d4:	0710      	lsls	r0, r2, #28
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	d458      	bmi.n	800e58c <__sflush_r+0xc0>
 800e4da:	684b      	ldr	r3, [r1, #4]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	dc05      	bgt.n	800e4ec <__sflush_r+0x20>
 800e4e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	dc02      	bgt.n	800e4ec <__sflush_r+0x20>
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4ee:	2e00      	cmp	r6, #0
 800e4f0:	d0f9      	beq.n	800e4e6 <__sflush_r+0x1a>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4f8:	682f      	ldr	r7, [r5, #0]
 800e4fa:	602b      	str	r3, [r5, #0]
 800e4fc:	d032      	beq.n	800e564 <__sflush_r+0x98>
 800e4fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	075a      	lsls	r2, r3, #29
 800e504:	d505      	bpl.n	800e512 <__sflush_r+0x46>
 800e506:	6863      	ldr	r3, [r4, #4]
 800e508:	1ac0      	subs	r0, r0, r3
 800e50a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e50c:	b10b      	cbz	r3, 800e512 <__sflush_r+0x46>
 800e50e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e510:	1ac0      	subs	r0, r0, r3
 800e512:	2300      	movs	r3, #0
 800e514:	4602      	mov	r2, r0
 800e516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e518:	6a21      	ldr	r1, [r4, #32]
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b0      	blx	r6
 800e51e:	1c43      	adds	r3, r0, #1
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	d106      	bne.n	800e532 <__sflush_r+0x66>
 800e524:	6829      	ldr	r1, [r5, #0]
 800e526:	291d      	cmp	r1, #29
 800e528:	d82c      	bhi.n	800e584 <__sflush_r+0xb8>
 800e52a:	4a2a      	ldr	r2, [pc, #168]	; (800e5d4 <__sflush_r+0x108>)
 800e52c:	40ca      	lsrs	r2, r1
 800e52e:	07d6      	lsls	r6, r2, #31
 800e530:	d528      	bpl.n	800e584 <__sflush_r+0xb8>
 800e532:	2200      	movs	r2, #0
 800e534:	6062      	str	r2, [r4, #4]
 800e536:	04d9      	lsls	r1, r3, #19
 800e538:	6922      	ldr	r2, [r4, #16]
 800e53a:	6022      	str	r2, [r4, #0]
 800e53c:	d504      	bpl.n	800e548 <__sflush_r+0x7c>
 800e53e:	1c42      	adds	r2, r0, #1
 800e540:	d101      	bne.n	800e546 <__sflush_r+0x7a>
 800e542:	682b      	ldr	r3, [r5, #0]
 800e544:	b903      	cbnz	r3, 800e548 <__sflush_r+0x7c>
 800e546:	6560      	str	r0, [r4, #84]	; 0x54
 800e548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e54a:	602f      	str	r7, [r5, #0]
 800e54c:	2900      	cmp	r1, #0
 800e54e:	d0ca      	beq.n	800e4e6 <__sflush_r+0x1a>
 800e550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e554:	4299      	cmp	r1, r3
 800e556:	d002      	beq.n	800e55e <__sflush_r+0x92>
 800e558:	4628      	mov	r0, r5
 800e55a:	f7ff fae3 	bl	800db24 <_free_r>
 800e55e:	2000      	movs	r0, #0
 800e560:	6360      	str	r0, [r4, #52]	; 0x34
 800e562:	e7c1      	b.n	800e4e8 <__sflush_r+0x1c>
 800e564:	6a21      	ldr	r1, [r4, #32]
 800e566:	2301      	movs	r3, #1
 800e568:	4628      	mov	r0, r5
 800e56a:	47b0      	blx	r6
 800e56c:	1c41      	adds	r1, r0, #1
 800e56e:	d1c7      	bne.n	800e500 <__sflush_r+0x34>
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d0c4      	beq.n	800e500 <__sflush_r+0x34>
 800e576:	2b1d      	cmp	r3, #29
 800e578:	d001      	beq.n	800e57e <__sflush_r+0xb2>
 800e57a:	2b16      	cmp	r3, #22
 800e57c:	d101      	bne.n	800e582 <__sflush_r+0xb6>
 800e57e:	602f      	str	r7, [r5, #0]
 800e580:	e7b1      	b.n	800e4e6 <__sflush_r+0x1a>
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e588:	81a3      	strh	r3, [r4, #12]
 800e58a:	e7ad      	b.n	800e4e8 <__sflush_r+0x1c>
 800e58c:	690f      	ldr	r7, [r1, #16]
 800e58e:	2f00      	cmp	r7, #0
 800e590:	d0a9      	beq.n	800e4e6 <__sflush_r+0x1a>
 800e592:	0793      	lsls	r3, r2, #30
 800e594:	680e      	ldr	r6, [r1, #0]
 800e596:	bf08      	it	eq
 800e598:	694b      	ldreq	r3, [r1, #20]
 800e59a:	600f      	str	r7, [r1, #0]
 800e59c:	bf18      	it	ne
 800e59e:	2300      	movne	r3, #0
 800e5a0:	eba6 0807 	sub.w	r8, r6, r7
 800e5a4:	608b      	str	r3, [r1, #8]
 800e5a6:	f1b8 0f00 	cmp.w	r8, #0
 800e5aa:	dd9c      	ble.n	800e4e6 <__sflush_r+0x1a>
 800e5ac:	6a21      	ldr	r1, [r4, #32]
 800e5ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5b0:	4643      	mov	r3, r8
 800e5b2:	463a      	mov	r2, r7
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	47b0      	blx	r6
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	dc06      	bgt.n	800e5ca <__sflush_r+0xfe>
 800e5bc:	89a3      	ldrh	r3, [r4, #12]
 800e5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c2:	81a3      	strh	r3, [r4, #12]
 800e5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c8:	e78e      	b.n	800e4e8 <__sflush_r+0x1c>
 800e5ca:	4407      	add	r7, r0
 800e5cc:	eba8 0800 	sub.w	r8, r8, r0
 800e5d0:	e7e9      	b.n	800e5a6 <__sflush_r+0xda>
 800e5d2:	bf00      	nop
 800e5d4:	20400001 	.word	0x20400001

0800e5d8 <_fflush_r>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	690b      	ldr	r3, [r1, #16]
 800e5dc:	4605      	mov	r5, r0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	b913      	cbnz	r3, 800e5e8 <_fflush_r+0x10>
 800e5e2:	2500      	movs	r5, #0
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	b118      	cbz	r0, 800e5f2 <_fflush_r+0x1a>
 800e5ea:	6983      	ldr	r3, [r0, #24]
 800e5ec:	b90b      	cbnz	r3, 800e5f2 <_fflush_r+0x1a>
 800e5ee:	f000 f887 	bl	800e700 <__sinit>
 800e5f2:	4b14      	ldr	r3, [pc, #80]	; (800e644 <_fflush_r+0x6c>)
 800e5f4:	429c      	cmp	r4, r3
 800e5f6:	d11b      	bne.n	800e630 <_fflush_r+0x58>
 800e5f8:	686c      	ldr	r4, [r5, #4]
 800e5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0ef      	beq.n	800e5e2 <_fflush_r+0xa>
 800e602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e604:	07d0      	lsls	r0, r2, #31
 800e606:	d404      	bmi.n	800e612 <_fflush_r+0x3a>
 800e608:	0599      	lsls	r1, r3, #22
 800e60a:	d402      	bmi.n	800e612 <_fflush_r+0x3a>
 800e60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e60e:	f000 f915 	bl	800e83c <__retarget_lock_acquire_recursive>
 800e612:	4628      	mov	r0, r5
 800e614:	4621      	mov	r1, r4
 800e616:	f7ff ff59 	bl	800e4cc <__sflush_r>
 800e61a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e61c:	07da      	lsls	r2, r3, #31
 800e61e:	4605      	mov	r5, r0
 800e620:	d4e0      	bmi.n	800e5e4 <_fflush_r+0xc>
 800e622:	89a3      	ldrh	r3, [r4, #12]
 800e624:	059b      	lsls	r3, r3, #22
 800e626:	d4dd      	bmi.n	800e5e4 <_fflush_r+0xc>
 800e628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e62a:	f000 f908 	bl	800e83e <__retarget_lock_release_recursive>
 800e62e:	e7d9      	b.n	800e5e4 <_fflush_r+0xc>
 800e630:	4b05      	ldr	r3, [pc, #20]	; (800e648 <_fflush_r+0x70>)
 800e632:	429c      	cmp	r4, r3
 800e634:	d101      	bne.n	800e63a <_fflush_r+0x62>
 800e636:	68ac      	ldr	r4, [r5, #8]
 800e638:	e7df      	b.n	800e5fa <_fflush_r+0x22>
 800e63a:	4b04      	ldr	r3, [pc, #16]	; (800e64c <_fflush_r+0x74>)
 800e63c:	429c      	cmp	r4, r3
 800e63e:	bf08      	it	eq
 800e640:	68ec      	ldreq	r4, [r5, #12]
 800e642:	e7da      	b.n	800e5fa <_fflush_r+0x22>
 800e644:	0800f2dc 	.word	0x0800f2dc
 800e648:	0800f2fc 	.word	0x0800f2fc
 800e64c:	0800f2bc 	.word	0x0800f2bc

0800e650 <std>:
 800e650:	2300      	movs	r3, #0
 800e652:	b510      	push	{r4, lr}
 800e654:	4604      	mov	r4, r0
 800e656:	e9c0 3300 	strd	r3, r3, [r0]
 800e65a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e65e:	6083      	str	r3, [r0, #8]
 800e660:	8181      	strh	r1, [r0, #12]
 800e662:	6643      	str	r3, [r0, #100]	; 0x64
 800e664:	81c2      	strh	r2, [r0, #14]
 800e666:	6183      	str	r3, [r0, #24]
 800e668:	4619      	mov	r1, r3
 800e66a:	2208      	movs	r2, #8
 800e66c:	305c      	adds	r0, #92	; 0x5c
 800e66e:	f7fd fc37 	bl	800bee0 <memset>
 800e672:	4b05      	ldr	r3, [pc, #20]	; (800e688 <std+0x38>)
 800e674:	6263      	str	r3, [r4, #36]	; 0x24
 800e676:	4b05      	ldr	r3, [pc, #20]	; (800e68c <std+0x3c>)
 800e678:	62a3      	str	r3, [r4, #40]	; 0x28
 800e67a:	4b05      	ldr	r3, [pc, #20]	; (800e690 <std+0x40>)
 800e67c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e67e:	4b05      	ldr	r3, [pc, #20]	; (800e694 <std+0x44>)
 800e680:	6224      	str	r4, [r4, #32]
 800e682:	6323      	str	r3, [r4, #48]	; 0x30
 800e684:	bd10      	pop	{r4, pc}
 800e686:	bf00      	nop
 800e688:	0800e9a1 	.word	0x0800e9a1
 800e68c:	0800e9c3 	.word	0x0800e9c3
 800e690:	0800e9fb 	.word	0x0800e9fb
 800e694:	0800ea1f 	.word	0x0800ea1f

0800e698 <_cleanup_r>:
 800e698:	4901      	ldr	r1, [pc, #4]	; (800e6a0 <_cleanup_r+0x8>)
 800e69a:	f000 b8af 	b.w	800e7fc <_fwalk_reent>
 800e69e:	bf00      	nop
 800e6a0:	0800e5d9 	.word	0x0800e5d9

0800e6a4 <__sfmoreglue>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	1e4a      	subs	r2, r1, #1
 800e6a8:	2568      	movs	r5, #104	; 0x68
 800e6aa:	4355      	muls	r5, r2
 800e6ac:	460e      	mov	r6, r1
 800e6ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6b2:	f7ff fa87 	bl	800dbc4 <_malloc_r>
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	b140      	cbz	r0, 800e6cc <__sfmoreglue+0x28>
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	e9c0 1600 	strd	r1, r6, [r0]
 800e6c0:	300c      	adds	r0, #12
 800e6c2:	60a0      	str	r0, [r4, #8]
 800e6c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6c8:	f7fd fc0a 	bl	800bee0 <memset>
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	bd70      	pop	{r4, r5, r6, pc}

0800e6d0 <__sfp_lock_acquire>:
 800e6d0:	4801      	ldr	r0, [pc, #4]	; (800e6d8 <__sfp_lock_acquire+0x8>)
 800e6d2:	f000 b8b3 	b.w	800e83c <__retarget_lock_acquire_recursive>
 800e6d6:	bf00      	nop
 800e6d8:	20000820 	.word	0x20000820

0800e6dc <__sfp_lock_release>:
 800e6dc:	4801      	ldr	r0, [pc, #4]	; (800e6e4 <__sfp_lock_release+0x8>)
 800e6de:	f000 b8ae 	b.w	800e83e <__retarget_lock_release_recursive>
 800e6e2:	bf00      	nop
 800e6e4:	20000820 	.word	0x20000820

0800e6e8 <__sinit_lock_acquire>:
 800e6e8:	4801      	ldr	r0, [pc, #4]	; (800e6f0 <__sinit_lock_acquire+0x8>)
 800e6ea:	f000 b8a7 	b.w	800e83c <__retarget_lock_acquire_recursive>
 800e6ee:	bf00      	nop
 800e6f0:	2000081b 	.word	0x2000081b

0800e6f4 <__sinit_lock_release>:
 800e6f4:	4801      	ldr	r0, [pc, #4]	; (800e6fc <__sinit_lock_release+0x8>)
 800e6f6:	f000 b8a2 	b.w	800e83e <__retarget_lock_release_recursive>
 800e6fa:	bf00      	nop
 800e6fc:	2000081b 	.word	0x2000081b

0800e700 <__sinit>:
 800e700:	b510      	push	{r4, lr}
 800e702:	4604      	mov	r4, r0
 800e704:	f7ff fff0 	bl	800e6e8 <__sinit_lock_acquire>
 800e708:	69a3      	ldr	r3, [r4, #24]
 800e70a:	b11b      	cbz	r3, 800e714 <__sinit+0x14>
 800e70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e710:	f7ff bff0 	b.w	800e6f4 <__sinit_lock_release>
 800e714:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e718:	6523      	str	r3, [r4, #80]	; 0x50
 800e71a:	4b13      	ldr	r3, [pc, #76]	; (800e768 <__sinit+0x68>)
 800e71c:	4a13      	ldr	r2, [pc, #76]	; (800e76c <__sinit+0x6c>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	62a2      	str	r2, [r4, #40]	; 0x28
 800e722:	42a3      	cmp	r3, r4
 800e724:	bf04      	itt	eq
 800e726:	2301      	moveq	r3, #1
 800e728:	61a3      	streq	r3, [r4, #24]
 800e72a:	4620      	mov	r0, r4
 800e72c:	f000 f820 	bl	800e770 <__sfp>
 800e730:	6060      	str	r0, [r4, #4]
 800e732:	4620      	mov	r0, r4
 800e734:	f000 f81c 	bl	800e770 <__sfp>
 800e738:	60a0      	str	r0, [r4, #8]
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 f818 	bl	800e770 <__sfp>
 800e740:	2200      	movs	r2, #0
 800e742:	60e0      	str	r0, [r4, #12]
 800e744:	2104      	movs	r1, #4
 800e746:	6860      	ldr	r0, [r4, #4]
 800e748:	f7ff ff82 	bl	800e650 <std>
 800e74c:	68a0      	ldr	r0, [r4, #8]
 800e74e:	2201      	movs	r2, #1
 800e750:	2109      	movs	r1, #9
 800e752:	f7ff ff7d 	bl	800e650 <std>
 800e756:	68e0      	ldr	r0, [r4, #12]
 800e758:	2202      	movs	r2, #2
 800e75a:	2112      	movs	r1, #18
 800e75c:	f7ff ff78 	bl	800e650 <std>
 800e760:	2301      	movs	r3, #1
 800e762:	61a3      	str	r3, [r4, #24]
 800e764:	e7d2      	b.n	800e70c <__sinit+0xc>
 800e766:	bf00      	nop
 800e768:	0800ef38 	.word	0x0800ef38
 800e76c:	0800e699 	.word	0x0800e699

0800e770 <__sfp>:
 800e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e772:	4607      	mov	r7, r0
 800e774:	f7ff ffac 	bl	800e6d0 <__sfp_lock_acquire>
 800e778:	4b1e      	ldr	r3, [pc, #120]	; (800e7f4 <__sfp+0x84>)
 800e77a:	681e      	ldr	r6, [r3, #0]
 800e77c:	69b3      	ldr	r3, [r6, #24]
 800e77e:	b913      	cbnz	r3, 800e786 <__sfp+0x16>
 800e780:	4630      	mov	r0, r6
 800e782:	f7ff ffbd 	bl	800e700 <__sinit>
 800e786:	3648      	adds	r6, #72	; 0x48
 800e788:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e78c:	3b01      	subs	r3, #1
 800e78e:	d503      	bpl.n	800e798 <__sfp+0x28>
 800e790:	6833      	ldr	r3, [r6, #0]
 800e792:	b30b      	cbz	r3, 800e7d8 <__sfp+0x68>
 800e794:	6836      	ldr	r6, [r6, #0]
 800e796:	e7f7      	b.n	800e788 <__sfp+0x18>
 800e798:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e79c:	b9d5      	cbnz	r5, 800e7d4 <__sfp+0x64>
 800e79e:	4b16      	ldr	r3, [pc, #88]	; (800e7f8 <__sfp+0x88>)
 800e7a0:	60e3      	str	r3, [r4, #12]
 800e7a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7a6:	6665      	str	r5, [r4, #100]	; 0x64
 800e7a8:	f000 f847 	bl	800e83a <__retarget_lock_init_recursive>
 800e7ac:	f7ff ff96 	bl	800e6dc <__sfp_lock_release>
 800e7b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7b8:	6025      	str	r5, [r4, #0]
 800e7ba:	61a5      	str	r5, [r4, #24]
 800e7bc:	2208      	movs	r2, #8
 800e7be:	4629      	mov	r1, r5
 800e7c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7c4:	f7fd fb8c 	bl	800bee0 <memset>
 800e7c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d4:	3468      	adds	r4, #104	; 0x68
 800e7d6:	e7d9      	b.n	800e78c <__sfp+0x1c>
 800e7d8:	2104      	movs	r1, #4
 800e7da:	4638      	mov	r0, r7
 800e7dc:	f7ff ff62 	bl	800e6a4 <__sfmoreglue>
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	6030      	str	r0, [r6, #0]
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d1d5      	bne.n	800e794 <__sfp+0x24>
 800e7e8:	f7ff ff78 	bl	800e6dc <__sfp_lock_release>
 800e7ec:	230c      	movs	r3, #12
 800e7ee:	603b      	str	r3, [r7, #0]
 800e7f0:	e7ee      	b.n	800e7d0 <__sfp+0x60>
 800e7f2:	bf00      	nop
 800e7f4:	0800ef38 	.word	0x0800ef38
 800e7f8:	ffff0001 	.word	0xffff0001

0800e7fc <_fwalk_reent>:
 800e7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e800:	4606      	mov	r6, r0
 800e802:	4688      	mov	r8, r1
 800e804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e808:	2700      	movs	r7, #0
 800e80a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e80e:	f1b9 0901 	subs.w	r9, r9, #1
 800e812:	d505      	bpl.n	800e820 <_fwalk_reent+0x24>
 800e814:	6824      	ldr	r4, [r4, #0]
 800e816:	2c00      	cmp	r4, #0
 800e818:	d1f7      	bne.n	800e80a <_fwalk_reent+0xe>
 800e81a:	4638      	mov	r0, r7
 800e81c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e820:	89ab      	ldrh	r3, [r5, #12]
 800e822:	2b01      	cmp	r3, #1
 800e824:	d907      	bls.n	800e836 <_fwalk_reent+0x3a>
 800e826:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e82a:	3301      	adds	r3, #1
 800e82c:	d003      	beq.n	800e836 <_fwalk_reent+0x3a>
 800e82e:	4629      	mov	r1, r5
 800e830:	4630      	mov	r0, r6
 800e832:	47c0      	blx	r8
 800e834:	4307      	orrs	r7, r0
 800e836:	3568      	adds	r5, #104	; 0x68
 800e838:	e7e9      	b.n	800e80e <_fwalk_reent+0x12>

0800e83a <__retarget_lock_init_recursive>:
 800e83a:	4770      	bx	lr

0800e83c <__retarget_lock_acquire_recursive>:
 800e83c:	4770      	bx	lr

0800e83e <__retarget_lock_release_recursive>:
 800e83e:	4770      	bx	lr

0800e840 <__swhatbuf_r>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	460e      	mov	r6, r1
 800e844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e848:	2900      	cmp	r1, #0
 800e84a:	b096      	sub	sp, #88	; 0x58
 800e84c:	4614      	mov	r4, r2
 800e84e:	461d      	mov	r5, r3
 800e850:	da07      	bge.n	800e862 <__swhatbuf_r+0x22>
 800e852:	2300      	movs	r3, #0
 800e854:	602b      	str	r3, [r5, #0]
 800e856:	89b3      	ldrh	r3, [r6, #12]
 800e858:	061a      	lsls	r2, r3, #24
 800e85a:	d410      	bmi.n	800e87e <__swhatbuf_r+0x3e>
 800e85c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e860:	e00e      	b.n	800e880 <__swhatbuf_r+0x40>
 800e862:	466a      	mov	r2, sp
 800e864:	f000 f902 	bl	800ea6c <_fstat_r>
 800e868:	2800      	cmp	r0, #0
 800e86a:	dbf2      	blt.n	800e852 <__swhatbuf_r+0x12>
 800e86c:	9a01      	ldr	r2, [sp, #4]
 800e86e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e876:	425a      	negs	r2, r3
 800e878:	415a      	adcs	r2, r3
 800e87a:	602a      	str	r2, [r5, #0]
 800e87c:	e7ee      	b.n	800e85c <__swhatbuf_r+0x1c>
 800e87e:	2340      	movs	r3, #64	; 0x40
 800e880:	2000      	movs	r0, #0
 800e882:	6023      	str	r3, [r4, #0]
 800e884:	b016      	add	sp, #88	; 0x58
 800e886:	bd70      	pop	{r4, r5, r6, pc}

0800e888 <__smakebuf_r>:
 800e888:	898b      	ldrh	r3, [r1, #12]
 800e88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e88c:	079d      	lsls	r5, r3, #30
 800e88e:	4606      	mov	r6, r0
 800e890:	460c      	mov	r4, r1
 800e892:	d507      	bpl.n	800e8a4 <__smakebuf_r+0x1c>
 800e894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	6123      	str	r3, [r4, #16]
 800e89c:	2301      	movs	r3, #1
 800e89e:	6163      	str	r3, [r4, #20]
 800e8a0:	b002      	add	sp, #8
 800e8a2:	bd70      	pop	{r4, r5, r6, pc}
 800e8a4:	ab01      	add	r3, sp, #4
 800e8a6:	466a      	mov	r2, sp
 800e8a8:	f7ff ffca 	bl	800e840 <__swhatbuf_r>
 800e8ac:	9900      	ldr	r1, [sp, #0]
 800e8ae:	4605      	mov	r5, r0
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	f7ff f987 	bl	800dbc4 <_malloc_r>
 800e8b6:	b948      	cbnz	r0, 800e8cc <__smakebuf_r+0x44>
 800e8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8bc:	059a      	lsls	r2, r3, #22
 800e8be:	d4ef      	bmi.n	800e8a0 <__smakebuf_r+0x18>
 800e8c0:	f023 0303 	bic.w	r3, r3, #3
 800e8c4:	f043 0302 	orr.w	r3, r3, #2
 800e8c8:	81a3      	strh	r3, [r4, #12]
 800e8ca:	e7e3      	b.n	800e894 <__smakebuf_r+0xc>
 800e8cc:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <__smakebuf_r+0x7c>)
 800e8ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	6020      	str	r0, [r4, #0]
 800e8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8d8:	81a3      	strh	r3, [r4, #12]
 800e8da:	9b00      	ldr	r3, [sp, #0]
 800e8dc:	6163      	str	r3, [r4, #20]
 800e8de:	9b01      	ldr	r3, [sp, #4]
 800e8e0:	6120      	str	r0, [r4, #16]
 800e8e2:	b15b      	cbz	r3, 800e8fc <__smakebuf_r+0x74>
 800e8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f000 f8d1 	bl	800ea90 <_isatty_r>
 800e8ee:	b128      	cbz	r0, 800e8fc <__smakebuf_r+0x74>
 800e8f0:	89a3      	ldrh	r3, [r4, #12]
 800e8f2:	f023 0303 	bic.w	r3, r3, #3
 800e8f6:	f043 0301 	orr.w	r3, r3, #1
 800e8fa:	81a3      	strh	r3, [r4, #12]
 800e8fc:	89a0      	ldrh	r0, [r4, #12]
 800e8fe:	4305      	orrs	r5, r0
 800e900:	81a5      	strh	r5, [r4, #12]
 800e902:	e7cd      	b.n	800e8a0 <__smakebuf_r+0x18>
 800e904:	0800e699 	.word	0x0800e699

0800e908 <_malloc_usable_size_r>:
 800e908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e90c:	1f18      	subs	r0, r3, #4
 800e90e:	2b00      	cmp	r3, #0
 800e910:	bfbc      	itt	lt
 800e912:	580b      	ldrlt	r3, [r1, r0]
 800e914:	18c0      	addlt	r0, r0, r3
 800e916:	4770      	bx	lr

0800e918 <_raise_r>:
 800e918:	291f      	cmp	r1, #31
 800e91a:	b538      	push	{r3, r4, r5, lr}
 800e91c:	4604      	mov	r4, r0
 800e91e:	460d      	mov	r5, r1
 800e920:	d904      	bls.n	800e92c <_raise_r+0x14>
 800e922:	2316      	movs	r3, #22
 800e924:	6003      	str	r3, [r0, #0]
 800e926:	f04f 30ff 	mov.w	r0, #4294967295
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e92e:	b112      	cbz	r2, 800e936 <_raise_r+0x1e>
 800e930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e934:	b94b      	cbnz	r3, 800e94a <_raise_r+0x32>
 800e936:	4620      	mov	r0, r4
 800e938:	f000 f830 	bl	800e99c <_getpid_r>
 800e93c:	462a      	mov	r2, r5
 800e93e:	4601      	mov	r1, r0
 800e940:	4620      	mov	r0, r4
 800e942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e946:	f000 b817 	b.w	800e978 <_kill_r>
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d00a      	beq.n	800e964 <_raise_r+0x4c>
 800e94e:	1c59      	adds	r1, r3, #1
 800e950:	d103      	bne.n	800e95a <_raise_r+0x42>
 800e952:	2316      	movs	r3, #22
 800e954:	6003      	str	r3, [r0, #0]
 800e956:	2001      	movs	r0, #1
 800e958:	e7e7      	b.n	800e92a <_raise_r+0x12>
 800e95a:	2400      	movs	r4, #0
 800e95c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e960:	4628      	mov	r0, r5
 800e962:	4798      	blx	r3
 800e964:	2000      	movs	r0, #0
 800e966:	e7e0      	b.n	800e92a <_raise_r+0x12>

0800e968 <raise>:
 800e968:	4b02      	ldr	r3, [pc, #8]	; (800e974 <raise+0xc>)
 800e96a:	4601      	mov	r1, r0
 800e96c:	6818      	ldr	r0, [r3, #0]
 800e96e:	f7ff bfd3 	b.w	800e918 <_raise_r>
 800e972:	bf00      	nop
 800e974:	200000dc 	.word	0x200000dc

0800e978 <_kill_r>:
 800e978:	b538      	push	{r3, r4, r5, lr}
 800e97a:	4d07      	ldr	r5, [pc, #28]	; (800e998 <_kill_r+0x20>)
 800e97c:	2300      	movs	r3, #0
 800e97e:	4604      	mov	r4, r0
 800e980:	4608      	mov	r0, r1
 800e982:	4611      	mov	r1, r2
 800e984:	602b      	str	r3, [r5, #0]
 800e986:	f7f6 faf5 	bl	8004f74 <_kill>
 800e98a:	1c43      	adds	r3, r0, #1
 800e98c:	d102      	bne.n	800e994 <_kill_r+0x1c>
 800e98e:	682b      	ldr	r3, [r5, #0]
 800e990:	b103      	cbz	r3, 800e994 <_kill_r+0x1c>
 800e992:	6023      	str	r3, [r4, #0]
 800e994:	bd38      	pop	{r3, r4, r5, pc}
 800e996:	bf00      	nop
 800e998:	20000814 	.word	0x20000814

0800e99c <_getpid_r>:
 800e99c:	f7f6 bae2 	b.w	8004f64 <_getpid>

0800e9a0 <__sread>:
 800e9a0:	b510      	push	{r4, lr}
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a8:	f000 f894 	bl	800ead4 <_read_r>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	bfab      	itete	ge
 800e9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9b2:	89a3      	ldrhlt	r3, [r4, #12]
 800e9b4:	181b      	addge	r3, r3, r0
 800e9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9ba:	bfac      	ite	ge
 800e9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9be:	81a3      	strhlt	r3, [r4, #12]
 800e9c0:	bd10      	pop	{r4, pc}

0800e9c2 <__swrite>:
 800e9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c6:	461f      	mov	r7, r3
 800e9c8:	898b      	ldrh	r3, [r1, #12]
 800e9ca:	05db      	lsls	r3, r3, #23
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	460c      	mov	r4, r1
 800e9d0:	4616      	mov	r6, r2
 800e9d2:	d505      	bpl.n	800e9e0 <__swrite+0x1e>
 800e9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9d8:	2302      	movs	r3, #2
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f000 f868 	bl	800eab0 <_lseek_r>
 800e9e0:	89a3      	ldrh	r3, [r4, #12]
 800e9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9ea:	81a3      	strh	r3, [r4, #12]
 800e9ec:	4632      	mov	r2, r6
 800e9ee:	463b      	mov	r3, r7
 800e9f0:	4628      	mov	r0, r5
 800e9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f6:	f000 b817 	b.w	800ea28 <_write_r>

0800e9fa <__sseek>:
 800e9fa:	b510      	push	{r4, lr}
 800e9fc:	460c      	mov	r4, r1
 800e9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea02:	f000 f855 	bl	800eab0 <_lseek_r>
 800ea06:	1c43      	adds	r3, r0, #1
 800ea08:	89a3      	ldrh	r3, [r4, #12]
 800ea0a:	bf15      	itete	ne
 800ea0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea16:	81a3      	strheq	r3, [r4, #12]
 800ea18:	bf18      	it	ne
 800ea1a:	81a3      	strhne	r3, [r4, #12]
 800ea1c:	bd10      	pop	{r4, pc}

0800ea1e <__sclose>:
 800ea1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea22:	f000 b813 	b.w	800ea4c <_close_r>
	...

0800ea28 <_write_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4d07      	ldr	r5, [pc, #28]	; (800ea48 <_write_r+0x20>)
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	4608      	mov	r0, r1
 800ea30:	4611      	mov	r1, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	602a      	str	r2, [r5, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	f7f6 fad3 	bl	8004fe2 <_write>
 800ea3c:	1c43      	adds	r3, r0, #1
 800ea3e:	d102      	bne.n	800ea46 <_write_r+0x1e>
 800ea40:	682b      	ldr	r3, [r5, #0]
 800ea42:	b103      	cbz	r3, 800ea46 <_write_r+0x1e>
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
 800ea48:	20000814 	.word	0x20000814

0800ea4c <_close_r>:
 800ea4c:	b538      	push	{r3, r4, r5, lr}
 800ea4e:	4d06      	ldr	r5, [pc, #24]	; (800ea68 <_close_r+0x1c>)
 800ea50:	2300      	movs	r3, #0
 800ea52:	4604      	mov	r4, r0
 800ea54:	4608      	mov	r0, r1
 800ea56:	602b      	str	r3, [r5, #0]
 800ea58:	f7f6 fadf 	bl	800501a <_close>
 800ea5c:	1c43      	adds	r3, r0, #1
 800ea5e:	d102      	bne.n	800ea66 <_close_r+0x1a>
 800ea60:	682b      	ldr	r3, [r5, #0]
 800ea62:	b103      	cbz	r3, 800ea66 <_close_r+0x1a>
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	bd38      	pop	{r3, r4, r5, pc}
 800ea68:	20000814 	.word	0x20000814

0800ea6c <_fstat_r>:
 800ea6c:	b538      	push	{r3, r4, r5, lr}
 800ea6e:	4d07      	ldr	r5, [pc, #28]	; (800ea8c <_fstat_r+0x20>)
 800ea70:	2300      	movs	r3, #0
 800ea72:	4604      	mov	r4, r0
 800ea74:	4608      	mov	r0, r1
 800ea76:	4611      	mov	r1, r2
 800ea78:	602b      	str	r3, [r5, #0]
 800ea7a:	f7f6 fada 	bl	8005032 <_fstat>
 800ea7e:	1c43      	adds	r3, r0, #1
 800ea80:	d102      	bne.n	800ea88 <_fstat_r+0x1c>
 800ea82:	682b      	ldr	r3, [r5, #0]
 800ea84:	b103      	cbz	r3, 800ea88 <_fstat_r+0x1c>
 800ea86:	6023      	str	r3, [r4, #0]
 800ea88:	bd38      	pop	{r3, r4, r5, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20000814 	.word	0x20000814

0800ea90 <_isatty_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	4d06      	ldr	r5, [pc, #24]	; (800eaac <_isatty_r+0x1c>)
 800ea94:	2300      	movs	r3, #0
 800ea96:	4604      	mov	r4, r0
 800ea98:	4608      	mov	r0, r1
 800ea9a:	602b      	str	r3, [r5, #0]
 800ea9c:	f7f6 fad9 	bl	8005052 <_isatty>
 800eaa0:	1c43      	adds	r3, r0, #1
 800eaa2:	d102      	bne.n	800eaaa <_isatty_r+0x1a>
 800eaa4:	682b      	ldr	r3, [r5, #0]
 800eaa6:	b103      	cbz	r3, 800eaaa <_isatty_r+0x1a>
 800eaa8:	6023      	str	r3, [r4, #0]
 800eaaa:	bd38      	pop	{r3, r4, r5, pc}
 800eaac:	20000814 	.word	0x20000814

0800eab0 <_lseek_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4d07      	ldr	r5, [pc, #28]	; (800ead0 <_lseek_r+0x20>)
 800eab4:	4604      	mov	r4, r0
 800eab6:	4608      	mov	r0, r1
 800eab8:	4611      	mov	r1, r2
 800eaba:	2200      	movs	r2, #0
 800eabc:	602a      	str	r2, [r5, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	f7f6 fad2 	bl	8005068 <_lseek>
 800eac4:	1c43      	adds	r3, r0, #1
 800eac6:	d102      	bne.n	800eace <_lseek_r+0x1e>
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	b103      	cbz	r3, 800eace <_lseek_r+0x1e>
 800eacc:	6023      	str	r3, [r4, #0]
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	20000814 	.word	0x20000814

0800ead4 <_read_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	4d07      	ldr	r5, [pc, #28]	; (800eaf4 <_read_r+0x20>)
 800ead8:	4604      	mov	r4, r0
 800eada:	4608      	mov	r0, r1
 800eadc:	4611      	mov	r1, r2
 800eade:	2200      	movs	r2, #0
 800eae0:	602a      	str	r2, [r5, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	f7f6 fa60 	bl	8004fa8 <_read>
 800eae8:	1c43      	adds	r3, r0, #1
 800eaea:	d102      	bne.n	800eaf2 <_read_r+0x1e>
 800eaec:	682b      	ldr	r3, [r5, #0]
 800eaee:	b103      	cbz	r3, 800eaf2 <_read_r+0x1e>
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	bd38      	pop	{r3, r4, r5, pc}
 800eaf4:	20000814 	.word	0x20000814

0800eaf8 <_init>:
 800eaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafa:	bf00      	nop
 800eafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eafe:	bc08      	pop	{r3}
 800eb00:	469e      	mov	lr, r3
 800eb02:	4770      	bx	lr

0800eb04 <_fini>:
 800eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb06:	bf00      	nop
 800eb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0a:	bc08      	pop	{r3}
 800eb0c:	469e      	mov	lr, r3
 800eb0e:	4770      	bx	lr


PBL2_SmartClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800e6d0  0800e6d0  0001e6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee94  0800ee94  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee94  0800ee94  0001ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee9c  0800ee9c  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee9c  0800ee9c  0001ee9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eea0  0800eea0  0001eea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800eea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200002b0  0800f150  000202b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800f150  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df0f  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004061  00000000  00000000  0003e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00042250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00043a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2d3  00000000  00000000  00045108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4f6  00000000  00000000  000713db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010735e  00000000  00000000  0008f8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007440  00000000  00000000  00196c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b0 	.word	0x200002b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e6b8 	.word	0x0800e6b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b4 	.word	0x200002b4
 800023c:	0800e6b8 	.word	0x0800e6b8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f006 ffeb 	bl	8007680 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f005 fe47 	bl	8006358 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200003e4 	.word	0x200003e4

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000398 	.word	0x20000398

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f007 f81b 	bl	80078a8 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200003e4 	.word	0x200003e4

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00b f8e6 	bl	800ba9c <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f006 fec9 	bl	8007680 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f005 fd32 	bl	8006358 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200003e4 	.word	0x200003e4

08000900 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_ADC1_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC1_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800091e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ADC1_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ADC1_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_ADC1_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_ADC1_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_ADC1_Init+0x98>)
 8000962:	f005 fd1d 	bl	80063a0 <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800096c:	f004 f876 	bl	8004a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000970:	230a      	movs	r3, #10
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC1_Init+0x98>)
 8000982:	f005 feb7 	bl	80066f4 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800098c:	f004 f866 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000039c 	.word	0x2000039c
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d123      	bne.n	8000a0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x7c>)
 8000a0a:	f006 f9c9 	bl	8006da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800

08000a24 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b97      	ldr	r3, [pc, #604]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a96      	ldr	r2, [pc, #600]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b94      	ldr	r3, [pc, #592]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b91      	ldr	r3, [pc, #580]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b8b      	ldr	r3, [pc, #556]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a8a      	ldr	r2, [pc, #552]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b88      	ldr	r3, [pc, #544]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b85      	ldr	r3, [pc, #532]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a84      	ldr	r2, [pc, #528]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7e      	ldr	r2, [pc, #504]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a78      	ldr	r2, [pc, #480]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a72      	ldr	r2, [pc, #456]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6c      	ldr	r2, [pc, #432]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2168      	movs	r1, #104	; 0x68
 8000afe:	4867      	ldr	r0, [pc, #412]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b00:	f006 fb12 	bl	8007128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b0a:	4865      	ldr	r0, [pc, #404]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000b0c:	f006 fb0c 	bl	8007128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4863      	ldr	r0, [pc, #396]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000b16:	f006 fb07 	bl	8007128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b20:	4861      	ldr	r0, [pc, #388]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b22:	f006 fb01 	bl	8007128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000b26:	2314      	movs	r3, #20
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4858      	ldr	r0, [pc, #352]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b3a:	f006 f931 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000b3e:	2368      	movs	r3, #104	; 0x68
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4851      	ldr	r0, [pc, #324]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000b56:	f006 f923 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <MX_GPIO_Init+0x288>)
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	484e      	ldr	r0, [pc, #312]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b70:	f006 f916 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b74:	2332      	movs	r3, #50	; 0x32
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4846      	ldr	r0, [pc, #280]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000b90:	f006 f906 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b94:	2386      	movs	r3, #134	; 0x86
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4840      	ldr	r0, [pc, #256]	; (8000cb0 <MX_GPIO_Init+0x28c>)
 8000bb0:	f006 f8f6 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4833      	ldr	r0, [pc, #204]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bd2:	f006 f8e5 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bd6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <MX_GPIO_Init+0x27c>)
 8000bf0:	f006 f8d6 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c0c:	f006 f8c8 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c24:	f006 f8bc 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000c28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000c42:	f006 f8ad 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23f0      	movs	r3, #240	; 0xf0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000c5a:	f006 f8a1 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <MX_GPIO_Init+0x280>)
 8000c7c:	f006 f890 	bl	8006da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2103      	movs	r1, #3
 8000c84:	2028      	movs	r0, #40	; 0x28
 8000c86:	f006 f854 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8a:	2028      	movs	r0, #40	; 0x28
 8000c8c:	f006 f86d 	bl	8006d6a <HAL_NVIC_EnableIRQ>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020c00 	.word	0x40020c00

08000cb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f006 fa4a 	bl	800718c <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f003 fead 	bl	8004a5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f007 f971 	bl	8007fec <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f003 fea4 	bl	8004a5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f007 f9b3 	bl	8008082 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f003 fe9b 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003e4 	.word	0x200003e4
 8000d30:	40005400 	.word	0x40005400
 8000d34:	00c0eaff 	.word	0x00c0eaff

08000d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_I2C_MspInit+0x7c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d128      	bne.n	8000dac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d90:	f006 f806 	bl	8006da0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_I2C_MspInit+0x80>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
}
 8000dc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dca:	f3bf 8f6f 	isb	sy
}
 8000dce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd8:	f3bf 8f4f 	dsb	sy
}
 8000ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dde:	f3bf 8f6f 	isb	sy
}
 8000de2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SCB_EnableICache+0x48>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df0:	f3bf 8f4f 	dsb	sy
}
 8000df4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000df6:	f3bf 8f6f 	isb	sy
}
 8000dfa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
}
 8000e1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e26:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0b5b      	lsrs	r3, r3, #13
 8000e2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	015a      	lsls	r2, r3, #5
 8000e40:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e44:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4a:	4911      	ldr	r1, [pc, #68]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ef      	bne.n	8000e3c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	60fa      	str	r2, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e5      	bne.n	8000e32 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e66:	f3bf 8f4f 	dsb	sy
}
 8000e6a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e78:	f3bf 8f4f 	dsb	sy
}
 8000e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e7e:	f3bf 8f6f 	isb	sy
}
 8000e82:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <println>:
uint8_t SerialNumber[] = {0x00, 0x00, 0x7E, 0x00, 0xD0, 0x01, 0x03, 0x2B, 0x7E};
static int pre_define_data_size = 70;

// Utility function
void println(char input[])
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	char stringBuffer[30];
	sprintf(stringBuffer, "%s\r\n", input);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <println+0x38>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00b fa45 	bl	800c334 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f9c6 	bl	8000240 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 0108 	add.w	r1, r7, #8
 8000ebc:	23c8      	movs	r3, #200	; 0xc8
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <println+0x3c>)
 8000ec0:	f00a f894 	bl	800afec <HAL_UART_Transmit>
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0800e6d0 	.word	0x0800e6d0
 8000ed0:	2000062c 	.word	0x2000062c

08000ed4 <sensirion_bytes_to_float>:
	HAL_UART_Transmit(&huart3, (uint8_t *)data, pre_define_data_size, 1000);
}

// For convert concatenate hex to float ieee754
float sensirion_bytes_to_float(const uint32_t bytes)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32_value;
		float float32;
	} tmp;

	tmp.u32_value = bytes;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
	return tmp.float32;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	ee07 3a90 	vmov	s15, r3
}
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <wake_sensirion>:

// Wake up SPS30 by sent start frame
uint8_t *wake_sensirion()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent start frame");

	static uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e007      	b.n	8000f10 <wake_sensirion+0x1c>
	{
		data[i] = 0x00;
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <wake_sensirion+0x68>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b45      	cmp	r3, #69	; 0x45
 8000f14:	d9f4      	bls.n	8000f00 <wake_sensirion+0xc>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f16:	bf00      	nop
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <wake_sensirion+0x6c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	2b40      	cmp	r3, #64	; 0x40
 8000f24:	d1f8      	bne.n	8000f18 <wake_sensirion+0x24>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)start, sizeof(start), 1000);
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	490d      	ldr	r1, [pc, #52]	; (8000f64 <wake_sensirion+0x70>)
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <wake_sensirion+0x6c>)
 8000f30:	f00a f85c 	bl	800afec <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f34:	bf00      	nop
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <wake_sensirion+0x6c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	2b40      	cmp	r3, #64	; 0x40
 8000f42:	d1f8      	bne.n	8000f36 <wake_sensirion+0x42>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	2246      	movs	r2, #70	; 0x46
 8000f4a:	4904      	ldr	r1, [pc, #16]	; (8000f5c <wake_sensirion+0x68>)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <wake_sensirion+0x6c>)
 8000f4e:	f00a f8e0 	bl	800b112 <HAL_UART_Receive>
	//HAL_Delay(1000);
	return data;
 8000f52:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <wake_sensirion+0x68>)
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000031c 	.word	0x2000031c
 8000f60:	200006b0 	.word	0x200006b0
 8000f64:	20000000 	.word	0x20000000

08000f68 <read_sensirion>:

// Read from SPS30 by sent read frame
float *read_sensirion()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0a8      	sub	sp, #160	; 0xa0
 8000f6c:	af00      	add	r7, sp, #0
	// ! For debug only
	//println("Sent read frame");

	uint8_t data[70];
	// Populate an array
	for (int i = 0; i < sizeof(data); i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f74:	e00b      	b.n	8000f8e <read_sensirion+0x26>
	{
		data[i] = 0x00;
 8000f76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f7e:	4413      	add	r3, r2
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(data); i++)
 8000f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f92:	2b45      	cmp	r3, #69	; 0x45
 8000f94:	d9ef      	bls.n	8000f76 <read_sensirion+0xe>
	}
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000f96:	bf00      	nop
 8000f98:	4b67      	ldr	r3, [pc, #412]	; (8001138 <read_sensirion+0x1d0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d1f8      	bne.n	8000f98 <read_sensirion+0x30>
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)read, sizeof(read), 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	2208      	movs	r2, #8
 8000fac:	4963      	ldr	r1, [pc, #396]	; (800113c <read_sensirion+0x1d4>)
 8000fae:	4862      	ldr	r0, [pc, #392]	; (8001138 <read_sensirion+0x1d0>)
 8000fb0:	f00a f81c 	bl	800afec <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 8000fb4:	bf00      	nop
 8000fb6:	4b60      	ldr	r3, [pc, #384]	; (8001138 <read_sensirion+0x1d0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc0:	2b40      	cmp	r3, #64	; 0x40
 8000fc2:	d1f8      	bne.n	8000fb6 <read_sensirion+0x4e>
	{
	}
	HAL_UART_Receive(&huart1, (uint8_t *)data, sizeof(data), 100); // from 1000 to 100
 8000fc4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	2246      	movs	r2, #70	; 0x46
 8000fcc:	485a      	ldr	r0, [pc, #360]	; (8001138 <read_sensirion+0x1d0>)
 8000fce:	f00a f8a0 	bl	800b112 <HAL_UART_Receive>

	// Check for start frame
	if (data[0] == 0x7E && data[1] == 0x00)
 8000fd2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fd6:	2b7e      	cmp	r3, #126	; 0x7e
 8000fd8:	f040 80a8 	bne.w	800112c <read_sensirion+0x1c4>
 8000fdc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 80a3 	bne.w	800112c <read_sensirion+0x1c4>
	{
		// Header frame
		uint8_t command = data[2];
 8000fe6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000fea:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t errorcode = data[3];
 8000fee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ff2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		uint8_t length = data[4];
 8000ff6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ffa:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		uint8_t state = data[5];
 8000ffe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001002:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

		uint8_t checksum;
		// Find checksum frame by start from the back of the array
		for (uint8_t i = sizeof(data); i > 0; i--)
 8001006:	2346      	movs	r3, #70	; 0x46
 8001008:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800100c:	e017      	b.n	800103e <read_sensirion+0xd6>
		{
			if (data[i] == 0x7E)
 800100e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001012:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001016:	4413      	add	r3, r2
 8001018:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800101c:	2b7e      	cmp	r3, #126	; 0x7e
 800101e:	d109      	bne.n	8001034 <read_sensirion+0xcc>
			{
				data[i - 1] = checksum;
 8001020:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001024:	3b01      	subs	r3, #1
 8001026:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800102a:	4413      	add	r3, r2
 800102c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001030:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (uint8_t i = sizeof(data); i > 0; i--)
 8001034:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001038:	3b01      	subs	r3, #1
 800103a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800103e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1e3      	bne.n	800100e <read_sensirion+0xa6>
		}

		uint32_t concatenateHex[10];
		static float actualValue[10];
		// Concatenate HEX(2,2,2,2) into HEX(8) and convert concatenate hex to float ieee754
		for (int i = 0; i < 10; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800104c:	e068      	b.n	8001120 <read_sensirion+0x1b8>
		{
			// 40 HEX(2) into 10 Groups
			// Skip first 5 bits (header)
			concatenateHex[i] = ((data[4 * i + 5]) << 24) + ((data[(4 * i) + 1 + 5]) << 16) + ((data[(4 * i) + 2 + 5]) << 8) + (data[(4 * i) + 3 + 5]);
 800104e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	3305      	adds	r3, #5
 8001056:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800105a:	4413      	add	r3, r2
 800105c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001060:	061a      	lsls	r2, r3, #24
 8001062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	3306      	adds	r3, #6
 800106a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800106e:	440b      	add	r3, r1
 8001070:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	441a      	add	r2, r3
 8001078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	3307      	adds	r3, #7
 8001080:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001084:	440b      	add	r3, r1
 8001086:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	4413      	add	r3, r2
 800108e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001092:	3202      	adds	r2, #2
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800109a:	440a      	add	r2, r1
 800109c:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 80010a0:	4413      	add	r3, r2
 80010a2:	461a      	mov	r2, r3
 80010a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010ae:	440b      	add	r3, r1
 80010b0:	f843 2ca0 	str.w	r2, [r3, #-160]

			// Convert sensirion bytes to float
			actualValue[i] = sensirion_bytes_to_float(concatenateHex[i]);
 80010b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80010be:	4413      	add	r3, r2
 80010c0:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff05 	bl	8000ed4 <sensirion_bytes_to_float>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <read_sensirion+0x1d8>)
 80010d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	edc3 7a00 	vstr	s15, [r3]

			// ! For debug only
			char stringBuffer[30];
			sprintf(stringBuffer, "%.4f\r\n", actualValue[i]);
 80010dc:	4a18      	ldr	r2, [pc, #96]	; (8001140 <read_sensirion+0x1d8>)
 80010de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010f2:	ec53 2b17 	vmov	r2, r3, d7
 80010f6:	4913      	ldr	r1, [pc, #76]	; (8001144 <read_sensirion+0x1dc>)
 80010f8:	f00b f91c 	bl	800c334 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)stringBuffer, strlen(stringBuffer), 200);
 80010fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f89d 	bl	8000240 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800110e:	23c8      	movs	r3, #200	; 0xc8
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <read_sensirion+0x1e0>)
 8001112:	f009 ff6b 	bl	800afec <HAL_UART_Transmit>
		for (int i = 0; i < 10; i++)
 8001116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800111a:	3301      	adds	r3, #1
 800111c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001124:	2b09      	cmp	r3, #9
 8001126:	dd92      	ble.n	800104e <read_sensirion+0xe6>
		}
		//HAL_Delay(1000);
		return actualValue;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <read_sensirion+0x1d8>)
 800112a:	e000      	b.n	800112e <read_sensirion+0x1c6>
	}
	else
	{
		//HAL_Delay(1000);
		return NULL;
 800112c:	2300      	movs	r3, #0
	}
}
 800112e:	4618      	mov	r0, r3
 8001130:	37a0      	adds	r7, #160	; 0xa0
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200006b0 	.word	0x200006b0
 800113c:	2000000c 	.word	0x2000000c
 8001140:	20000364 	.word	0x20000364
 8001144:	0800e6d8 	.word	0x0800e6d8
 8001148:	2000062c 	.word	0x2000062c

0800114c <sent_string_to_mcu>:
#include "string.h"
#include "stdio.h"

void sent_string_to_mcu(char data[]){
 800114c:	b580      	push	{r7, lr}
 800114e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001152:	af00      	add	r7, sp, #0
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	6018      	str	r0, [r3, #0]
	char stringBuffer[500];
	sprintf(stringBuffer, "%s\n" , data);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	f107 000c 	add.w	r0, r7, #12
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	490a      	ldr	r1, [pc, #40]	; (800118c <sent_string_to_mcu+0x40>)
 8001162:	f00b f8e7 	bl	800c334 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f868 	bl	8000240 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	23c8      	movs	r3, #200	; 0xc8
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <sent_string_to_mcu+0x44>)
 800117c:	f009 ff36 	bl	800afec <HAL_UART_Transmit>
}
 8001180:	bf00      	nop
 8001182:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	0800e6e0 	.word	0x0800e6e0
 8001190:	20000734 	.word	0x20000734

08001194 <saveData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Save EEPROM
void saveData(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	//Clock
	EEPROM_Write_NUM (1, 0, hourNum);
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <saveData+0x100>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	2100      	movs	r1, #0
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fae2 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (2, 0, minuteNum);
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <saveData+0x104>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	eeb0 0a67 	vmov.f32	s0, s15
 80011c0:	2100      	movs	r1, #0
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff fad6 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (3, 0, secondNum);
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <saveData+0x108>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	2100      	movs	r1, #0
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff faca 	bl	8000774 <EEPROM_Write_NUM>

	//Date
	EEPROM_Write_NUM (4, 0, dayIndex);
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <saveData+0x10c>)
 80011e2:	f993 3000 	ldrsb.w	r3, [r3]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	2100      	movs	r1, #0
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff fabd 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (5, 0, date);
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <saveData+0x110>)
 80011fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	2100      	movs	r1, #0
 800120e:	2005      	movs	r0, #5
 8001210:	f7ff fab0 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (6, 0, monthIndex);
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <saveData+0x114>)
 8001216:	f993 3000 	ldrsb.w	r3, [r3]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	eeb0 0a67 	vmov.f32	s0, s15
 8001226:	2100      	movs	r1, #0
 8001228:	2006      	movs	r0, #6
 800122a:	f7ff faa3 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (7, 0, year);
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <saveData+0x118>)
 8001230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	2100      	movs	r1, #0
 8001242:	2007      	movs	r0, #7
 8001244:	f7ff fa96 	bl	8000774 <EEPROM_Write_NUM>

	//Alarm
	EEPROM_Write_NUM (8, 0, alarmHour);
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <saveData+0x11c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	2100      	movs	r1, #0
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fa8a 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (9, 0, alarmMinute);
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <saveData+0x120>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	2100      	movs	r1, #0
 8001272:	2009      	movs	r0, #9
 8001274:	f7ff fa7e 	bl	8000774 <EEPROM_Write_NUM>
	EEPROM_Write_NUM (10, 0, alarmIsOn);
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <saveData+0x124>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	2100      	movs	r1, #0
 800128a:	200a      	movs	r0, #10
 800128c:	f7ff fa72 	bl	8000774 <EEPROM_Write_NUM>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000040 	.word	0x20000040
 8001298:	2000003c 	.word	0x2000003c
 800129c:	20000038 	.word	0x20000038
 80012a0:	200000b0 	.word	0x200000b0
 80012a4:	20000061 	.word	0x20000061
 80012a8:	200000b1 	.word	0x200000b1
 80012ac:	200000b2 	.word	0x200000b2
 80012b0:	200002d0 	.word	0x200002d0
 80012b4:	200002cc 	.word	0x200002cc
 80012b8:	20000060 	.word	0x20000060

080012bc <readData>:
// Read EEPROM
void readData(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
	//Clock
	hourNum = EEPROM_Read_NUM (1, 0);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fa71 	bl	80007ac <EEPROM_Read_NUM>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d2:	ee17 2a90 	vmov	r2, s15
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <readData+0x114>)
 80012d8:	601a      	str	r2, [r3, #0]
	minuteNum = EEPROM_Read_NUM (2, 0);
 80012da:	2100      	movs	r1, #0
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fa65 	bl	80007ac <EEPROM_Read_NUM>
 80012e2:	eef0 7a40 	vmov.f32	s15, s0
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 2a90 	vmov	r2, s15
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <readData+0x118>)
 80012f0:	601a      	str	r2, [r3, #0]
	secondNum = EEPROM_Read_NUM (3, 0);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff fa59 	bl	80007ac <EEPROM_Read_NUM>
 80012fa:	eef0 7a40 	vmov.f32	s15, s0
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <readData+0x11c>)
 8001308:	601a      	str	r2, [r3, #0]

	//Date
	dayIndex = EEPROM_Read_NUM (4, 0);
 800130a:	2100      	movs	r1, #0
 800130c:	2004      	movs	r0, #4
 800130e:	f7ff fa4d 	bl	80007ac <EEPROM_Read_NUM>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131a:	edc7 7a01 	vstr	s15, [r7, #4]
 800131e:	793b      	ldrb	r3, [r7, #4]
 8001320:	b25a      	sxtb	r2, r3
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <readData+0x120>)
 8001324:	701a      	strb	r2, [r3, #0]
	date = EEPROM_Read_NUM (5, 0);
 8001326:	2100      	movs	r1, #0
 8001328:	2005      	movs	r0, #5
 800132a:	f7ff fa3f 	bl	80007ac <EEPROM_Read_NUM>
 800132e:	eef0 7a40 	vmov.f32	s15, s0
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	edc7 7a01 	vstr	s15, [r7, #4]
 800133a:	793b      	ldrb	r3, [r7, #4]
 800133c:	b25a      	sxtb	r2, r3
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <readData+0x124>)
 8001340:	701a      	strb	r2, [r3, #0]
	monthIndex = EEPROM_Read_NUM (6, 0);
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f7ff fa31 	bl	80007ac <EEPROM_Read_NUM>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	edc7 7a01 	vstr	s15, [r7, #4]
 8001356:	793b      	ldrb	r3, [r7, #4]
 8001358:	b25a      	sxtb	r2, r3
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <readData+0x128>)
 800135c:	701a      	strb	r2, [r3, #0]
	year = EEPROM_Read_NUM (7, 0);
 800135e:	2100      	movs	r1, #0
 8001360:	2007      	movs	r0, #7
 8001362:	f7ff fa23 	bl	80007ac <EEPROM_Read_NUM>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <readData+0x12c>)
 8001376:	801a      	strh	r2, [r3, #0]

	//Alarm
	alarmHour = EEPROM_Read_NUM (8, 0);
 8001378:	2100      	movs	r1, #0
 800137a:	2008      	movs	r0, #8
 800137c:	f7ff fa16 	bl	80007ac <EEPROM_Read_NUM>
 8001380:	eef0 7a40 	vmov.f32	s15, s0
 8001384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001388:	ee17 2a90 	vmov	r2, s15
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <readData+0x130>)
 800138e:	601a      	str	r2, [r3, #0]
	alarmMinute = EEPROM_Read_NUM (9, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	2009      	movs	r0, #9
 8001394:	f7ff fa0a 	bl	80007ac <EEPROM_Read_NUM>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
 800139c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a0:	ee17 2a90 	vmov	r2, s15
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <readData+0x134>)
 80013a6:	601a      	str	r2, [r3, #0]
	alarmIsOn = EEPROM_Read_NUM (10, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	200a      	movs	r0, #10
 80013ac:	f7ff f9fe 	bl	80007ac <EEPROM_Read_NUM>
 80013b0:	eef0 7a40 	vmov.f32	s15, s0
 80013b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <readData+0x138>)
 80013c6:	701a      	strb	r2, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000040 	.word	0x20000040
 80013d4:	2000003c 	.word	0x2000003c
 80013d8:	20000038 	.word	0x20000038
 80013dc:	200000b0 	.word	0x200000b0
 80013e0:	20000061 	.word	0x20000061
 80013e4:	200000b1 	.word	0x200000b1
 80013e8:	200000b2 	.word	0x200000b2
 80013ec:	200002d0 	.word	0x200002d0
 80013f0:	200002cc 	.word	0x200002cc
 80013f4:	20000060 	.word	0x20000060

080013f8 <eraseAllData>:

// Erase EERPOM
void eraseAllData(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	e007      	b.n	8001414 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fa4d 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800141a:	dbf3      	blt.n	8001404 <eraseAllData+0xc>
	}
	year = 2021;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <eraseAllData+0x54>)
 800141e:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8001422:	801a      	strh	r2, [r3, #0]
	EEPROM_Write_NUM (7, 0, year); // override year
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <eraseAllData+0x54>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	2100      	movs	r1, #0
 8001438:	2007      	movs	r0, #7
 800143a:	f7ff f99b 	bl	8000774 <EEPROM_Write_NUM>
	readData(); // Read from Clean EEPROM
 800143e:	f7ff ff3d 	bl	80012bc <readData>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000b2 	.word	0x200000b2

08001450 <checkResetData>:

void checkResetData(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	if(userResetButton == 1){
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <checkResetData+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <checkResetData+0x16>
		eraseAllData();
 800145c:	f7ff ffcc 	bl	80013f8 <eraseAllData>
		userResetButton = 0;
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <checkResetData+0x1c>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	}
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200002ee 	.word	0x200002ee

08001470 <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fd1b 	bl	8005eb8 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001482:	2001      	movs	r0, #1
 8001484:	f004 fb12 	bl	8005aac <ILI9341_Set_Rotation>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <check31Days>:

bool check31Days(){
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	if(monthIndex == 0 || monthIndex == 2 || monthIndex == 4 || monthIndex == 6 || monthIndex == 7 || monthIndex == 9 || monthIndex == 11){
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <check31Days+0x5c>)
 8001496:	f993 3000 	ldrsb.w	r3, [r3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01d      	beq.n	80014da <check31Days+0x4a>
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <check31Days+0x5c>)
 80014a0:	f993 3000 	ldrsb.w	r3, [r3]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d018      	beq.n	80014da <check31Days+0x4a>
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <check31Days+0x5c>)
 80014aa:	f993 3000 	ldrsb.w	r3, [r3]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d013      	beq.n	80014da <check31Days+0x4a>
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <check31Days+0x5c>)
 80014b4:	f993 3000 	ldrsb.w	r3, [r3]
 80014b8:	2b06      	cmp	r3, #6
 80014ba:	d00e      	beq.n	80014da <check31Days+0x4a>
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <check31Days+0x5c>)
 80014be:	f993 3000 	ldrsb.w	r3, [r3]
 80014c2:	2b07      	cmp	r3, #7
 80014c4:	d009      	beq.n	80014da <check31Days+0x4a>
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <check31Days+0x5c>)
 80014c8:	f993 3000 	ldrsb.w	r3, [r3]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	d004      	beq.n	80014da <check31Days+0x4a>
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <check31Days+0x5c>)
 80014d2:	f993 3000 	ldrsb.w	r3, [r3]
 80014d6:	2b0b      	cmp	r3, #11
 80014d8:	d101      	bne.n	80014de <check31Days+0x4e>
		return true;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <check31Days+0x50>
	}else{
		return false;
 80014de:	2300      	movs	r3, #0
	}
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200000b1 	.word	0x200000b1

080014f0 <setDayOneIncrementMonth>:
void setDayOneIncrementMonth(uint8_t num){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	if(date > num){
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <setDayOneIncrementMonth+0x48>)
 80014fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001500:	461a      	mov	r2, r3
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	429a      	cmp	r2, r3
 8001506:	dd10      	ble.n	800152a <setDayOneIncrementMonth+0x3a>
		date = 1;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <setDayOneIncrementMonth+0x48>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
		if(mode != 100){
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <setDayOneIncrementMonth+0x4c>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d008      	beq.n	800152a <setDayOneIncrementMonth+0x3a>
			monthIndex++;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <setDayOneIncrementMonth+0x50>)
 800151a:	f993 3000 	ldrsb.w	r3, [r3]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25a      	sxtb	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <setDayOneIncrementMonth+0x50>)
 8001528:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000061 	.word	0x20000061
 800153c:	200002e4 	.word	0x200002e4
 8001540:	200000b1 	.word	0x200000b1

08001544 <setDayX>:
void setDayX(uint8_t num){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	date = num;
 800154e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <setDayX+0x20>)
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000061 	.word	0x20000061

08001568 <compareAlarmClock>:

void compareAlarmClock(){ //Check If alarmIsOn and equal to alarm setting, alert!
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	if(alarmIsOn == true && hourNum == alarmHour && minuteNum == alarmMinute){
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <compareAlarmClock+0x4c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01a      	beq.n	80015ac <compareAlarmClock+0x44>
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <compareAlarmClock+0x50>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <compareAlarmClock+0x54>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d114      	bne.n	80015ac <compareAlarmClock+0x44>
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <compareAlarmClock+0x58>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <compareAlarmClock+0x5c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d10e      	bne.n	80015ac <compareAlarmClock+0x44>
		for(uint8_t i = 0; i < 4; i++){
 800158e:	2300      	movs	r3, #0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	e008      	b.n	80015a6 <compareAlarmClock+0x3e>
			buzzerSound(40); // waiting for test
 8001594:	2028      	movs	r0, #40	; 0x28
 8001596:	f001 fccb 	bl	8002f30 <buzzerSound>
			HAL_Delay(40);
 800159a:	2028      	movs	r0, #40	; 0x28
 800159c:	f004 fedc 	bl	8006358 <HAL_Delay>
		for(uint8_t i = 0; i < 4; i++){
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	3301      	adds	r3, #1
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d9f3      	bls.n	8001594 <compareAlarmClock+0x2c>
		}
	}
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000060 	.word	0x20000060
 80015b8:	20000040 	.word	0x20000040
 80015bc:	200002d0 	.word	0x200002d0
 80015c0:	2000003c 	.word	0x2000003c
 80015c4:	200002cc 	.word	0x200002cc

080015c8 <calculationClock>:

//Calculation
void calculationClock(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0

	millisecondHAL = HAL_GetTick();
 80015cc:	f004 feb8 	bl	8006340 <HAL_GetTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	498b      	ldr	r1, [pc, #556]	; (8001808 <calculationClock+0x240>)
 80015da:	e9c1 2300 	strd	r2, r3, [r1]

	//Normal Clock
	if (millisecond >= 1000){
 80015de:	4b8b      	ldr	r3, [pc, #556]	; (800180c <calculationClock+0x244>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e6:	d309      	bcc.n	80015fc <calculationClock+0x34>
		millisecond = 0;
 80015e8:	4b88      	ldr	r3, [pc, #544]	; (800180c <calculationClock+0x244>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
		secondNum++;
 80015ee:	4b88      	ldr	r3, [pc, #544]	; (8001810 <calculationClock+0x248>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a86      	ldr	r2, [pc, #536]	; (8001810 <calculationClock+0x248>)
 80015f6:	6013      	str	r3, [r2, #0]
		compareAlarmClock();
 80015f8:	f7ff ffb6 	bl	8001568 <compareAlarmClock>
	}
	if (secondNum >= 60){
 80015fc:	4b84      	ldr	r3, [pc, #528]	; (8001810 <calculationClock+0x248>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b3b      	cmp	r3, #59	; 0x3b
 8001602:	dd0c      	ble.n	800161e <calculationClock+0x56>
		secondNum = 0;
 8001604:	4b82      	ldr	r3, [pc, #520]	; (8001810 <calculationClock+0x248>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <calculationClock+0x24c>)
 800160c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d004      	beq.n	800161e <calculationClock+0x56>
			minuteNum++;
 8001614:	4b80      	ldr	r3, [pc, #512]	; (8001818 <calculationClock+0x250>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a7f      	ldr	r2, [pc, #508]	; (8001818 <calculationClock+0x250>)
 800161c:	6013      	str	r3, [r2, #0]
		}
	}
	if (minuteNum >= 60){
 800161e:	4b7e      	ldr	r3, [pc, #504]	; (8001818 <calculationClock+0x250>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b3b      	cmp	r3, #59	; 0x3b
 8001624:	dd0c      	ble.n	8001640 <calculationClock+0x78>
		minuteNum = 0;
 8001626:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <calculationClock+0x250>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800162c:	4b79      	ldr	r3, [pc, #484]	; (8001814 <calculationClock+0x24c>)
 800162e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d004      	beq.n	8001640 <calculationClock+0x78>
			hourNum++;
 8001636:	4b79      	ldr	r3, [pc, #484]	; (800181c <calculationClock+0x254>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4a77      	ldr	r2, [pc, #476]	; (800181c <calculationClock+0x254>)
 800163e:	6013      	str	r3, [r2, #0]
		}
	}
	if (hourNum >= 24){
 8001640:	4b76      	ldr	r3, [pc, #472]	; (800181c <calculationClock+0x254>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b17      	cmp	r3, #23
 8001646:	dd19      	ble.n	800167c <calculationClock+0xb4>
		hourNum = 0;
 8001648:	4b74      	ldr	r3, [pc, #464]	; (800181c <calculationClock+0x254>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
		if (mode != 100){
 800164e:	4b71      	ldr	r3, [pc, #452]	; (8001814 <calculationClock+0x24c>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d011      	beq.n	800167c <calculationClock+0xb4>
			dayIndex++;
 8001658:	4b71      	ldr	r3, [pc, #452]	; (8001820 <calculationClock+0x258>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	3301      	adds	r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b25a      	sxtb	r2, r3
 8001666:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <calculationClock+0x258>)
 8001668:	701a      	strb	r2, [r3, #0]
			date++;
 800166a:	4b6e      	ldr	r3, [pc, #440]	; (8001824 <calculationClock+0x25c>)
 800166c:	f993 3000 	ldrsb.w	r3, [r3]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	b25a      	sxtb	r2, r3
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <calculationClock+0x25c>)
 800167a:	701a      	strb	r2, [r3, #0]
		}
	}
	//Normal Date
	if (dayIndex >= 7){
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <calculationClock+0x258>)
 800167e:	f993 3000 	ldrsb.w	r3, [r3]
 8001682:	2b06      	cmp	r3, #6
 8001684:	dd02      	ble.n	800168c <calculationClock+0xc4>
		dayIndex = 0;
 8001686:	4b66      	ldr	r3, [pc, #408]	; (8001820 <calculationClock+0x258>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
	}
	if (year % 4 == 0){ //check for FEB 29 days
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <calculationClock+0x260>)
 800168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001692:	b29b      	uxth	r3, r3
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	b29b      	uxth	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d115      	bne.n	80016ca <calculationClock+0x102>
		if(monthIndex == 1){
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <calculationClock+0x264>)
 80016a0:	f993 3000 	ldrsb.w	r3, [r3]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d103      	bne.n	80016b0 <calculationClock+0xe8>
			setDayOneIncrementMonth(29); // 29 days
 80016a8:	201d      	movs	r0, #29
 80016aa:	f7ff ff21 	bl	80014f0 <setDayOneIncrementMonth>
 80016ae:	e021      	b.n	80016f4 <calculationClock+0x12c>
		}else if(check31Days() == true){
 80016b0:	f7ff feee 	bl	8001490 <check31Days>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <calculationClock+0xfa>
			setDayOneIncrementMonth(31); // 31 days
 80016ba:	201f      	movs	r0, #31
 80016bc:	f7ff ff18 	bl	80014f0 <setDayOneIncrementMonth>
 80016c0:	e018      	b.n	80016f4 <calculationClock+0x12c>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 80016c2:	201e      	movs	r0, #30
 80016c4:	f7ff ff14 	bl	80014f0 <setDayOneIncrementMonth>
 80016c8:	e014      	b.n	80016f4 <calculationClock+0x12c>
		}
	}else{
		if(monthIndex == 1){
 80016ca:	4b58      	ldr	r3, [pc, #352]	; (800182c <calculationClock+0x264>)
 80016cc:	f993 3000 	ldrsb.w	r3, [r3]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d103      	bne.n	80016dc <calculationClock+0x114>
			setDayOneIncrementMonth(28); // 28 days
 80016d4:	201c      	movs	r0, #28
 80016d6:	f7ff ff0b 	bl	80014f0 <setDayOneIncrementMonth>
 80016da:	e00b      	b.n	80016f4 <calculationClock+0x12c>
		}else if(check31Days() == true){
 80016dc:	f7ff fed8 	bl	8001490 <check31Days>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <calculationClock+0x126>
			setDayOneIncrementMonth(31); // 31 days
 80016e6:	201f      	movs	r0, #31
 80016e8:	f7ff ff02 	bl	80014f0 <setDayOneIncrementMonth>
 80016ec:	e002      	b.n	80016f4 <calculationClock+0x12c>
		}else{
			setDayOneIncrementMonth(30); // 30 days
 80016ee:	201e      	movs	r0, #30
 80016f0:	f7ff fefe 	bl	80014f0 <setDayOneIncrementMonth>
		}
	}
	if (monthIndex >= 12){
 80016f4:	4b4d      	ldr	r3, [pc, #308]	; (800182c <calculationClock+0x264>)
 80016f6:	f993 3000 	ldrsb.w	r3, [r3]
 80016fa:	2b0b      	cmp	r3, #11
 80016fc:	dd10      	ble.n	8001720 <calculationClock+0x158>
		monthIndex = 0;
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <calculationClock+0x264>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
		if (mode != 100){
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <calculationClock+0x24c>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d008      	beq.n	8001720 <calculationClock+0x158>
			year++;
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <calculationClock+0x260>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	b29b      	uxth	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <calculationClock+0x260>)
 800171e:	801a      	strh	r2, [r3, #0]
		}
	}
	if (year >= 10000){
 8001720:	4b41      	ldr	r3, [pc, #260]	; (8001828 <calculationClock+0x260>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	f242 720f 	movw	r2, #9999	; 0x270f
 800172a:	4293      	cmp	r3, r2
 800172c:	dd02      	ble.n	8001734 <calculationClock+0x16c>
		year = 1;
 800172e:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <calculationClock+0x260>)
 8001730:	2201      	movs	r2, #1
 8001732:	801a      	strh	r2, [r3, #0]
	}

	//check for editMode
	if(mode == 100){
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <calculationClock+0x24c>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d15f      	bne.n	80017fe <calculationClock+0x236>
		if (minuteNum < 0){
 800173e:	4b36      	ldr	r3, [pc, #216]	; (8001818 <calculationClock+0x250>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	da02      	bge.n	800174c <calculationClock+0x184>
			minuteNum = 59;
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <calculationClock+0x250>)
 8001748:	223b      	movs	r2, #59	; 0x3b
 800174a:	601a      	str	r2, [r3, #0]
		}
		if (hourNum < 0){
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <calculationClock+0x254>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	da02      	bge.n	800175a <calculationClock+0x192>
			hourNum = 23;
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <calculationClock+0x254>)
 8001756:	2217      	movs	r2, #23
 8001758:	601a      	str	r2, [r3, #0]
		}
		if (dayIndex < 0){
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <calculationClock+0x258>)
 800175c:	f993 3000 	ldrsb.w	r3, [r3]
 8001760:	2b00      	cmp	r3, #0
 8001762:	da02      	bge.n	800176a <calculationClock+0x1a2>
			dayIndex = 6;
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <calculationClock+0x258>)
 8001766:	2206      	movs	r2, #6
 8001768:	701a      	strb	r2, [r3, #0]
		}
		if (date < 1){
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <calculationClock+0x25c>)
 800176c:	f993 3000 	ldrsb.w	r3, [r3]
 8001770:	2b00      	cmp	r3, #0
 8001772:	dc33      	bgt.n	80017dc <calculationClock+0x214>
			if (year % 4 == 0){ //check for FEB 29 days
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <calculationClock+0x260>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	b29b      	uxth	r3, r3
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	b29b      	uxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d115      	bne.n	80017b2 <calculationClock+0x1ea>
				if(monthIndex == 1){
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <calculationClock+0x264>)
 8001788:	f993 3000 	ldrsb.w	r3, [r3]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d103      	bne.n	8001798 <calculationClock+0x1d0>
					setDayX(29); // 29 days
 8001790:	201d      	movs	r0, #29
 8001792:	f7ff fed7 	bl	8001544 <setDayX>
 8001796:	e021      	b.n	80017dc <calculationClock+0x214>
				}else if(check31Days() == true){
 8001798:	f7ff fe7a 	bl	8001490 <check31Days>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <calculationClock+0x1e2>
					setDayX(31); // 31 days
 80017a2:	201f      	movs	r0, #31
 80017a4:	f7ff fece 	bl	8001544 <setDayX>
 80017a8:	e018      	b.n	80017dc <calculationClock+0x214>
				}else{
					setDayX(30); // 30 days
 80017aa:	201e      	movs	r0, #30
 80017ac:	f7ff feca 	bl	8001544 <setDayX>
 80017b0:	e014      	b.n	80017dc <calculationClock+0x214>
				}
			}else{
				if(monthIndex == 1){
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <calculationClock+0x264>)
 80017b4:	f993 3000 	ldrsb.w	r3, [r3]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d103      	bne.n	80017c4 <calculationClock+0x1fc>
					setDayX(28); // 28 days
 80017bc:	201c      	movs	r0, #28
 80017be:	f7ff fec1 	bl	8001544 <setDayX>
 80017c2:	e00b      	b.n	80017dc <calculationClock+0x214>
				}else if(check31Days() == true){
 80017c4:	f7ff fe64 	bl	8001490 <check31Days>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <calculationClock+0x20e>
					setDayX(31); // 31 days
 80017ce:	201f      	movs	r0, #31
 80017d0:	f7ff feb8 	bl	8001544 <setDayX>
 80017d4:	e002      	b.n	80017dc <calculationClock+0x214>
				}else{
					setDayX(30); // 30 days
 80017d6:	201e      	movs	r0, #30
 80017d8:	f7ff feb4 	bl	8001544 <setDayX>
				}
			}
		}
		if (monthIndex < 0){
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <calculationClock+0x264>)
 80017de:	f993 3000 	ldrsb.w	r3, [r3]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da02      	bge.n	80017ec <calculationClock+0x224>
			monthIndex = 11;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <calculationClock+0x264>)
 80017e8:	220b      	movs	r2, #11
 80017ea:	701a      	strb	r2, [r3, #0]
		}
		if (year < 1){
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <calculationClock+0x260>)
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dc03      	bgt.n	80017fe <calculationClock+0x236>
			year = 9999;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <calculationClock+0x260>)
 80017f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80017fc:	801a      	strh	r2, [r3, #0]
		}
	}

	saveData();
 80017fe:	f7ff fcc9 	bl	8001194 <saveData>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200002f8 	.word	0x200002f8
 800180c:	200002d4 	.word	0x200002d4
 8001810:	20000038 	.word	0x20000038
 8001814:	200002e4 	.word	0x200002e4
 8001818:	2000003c 	.word	0x2000003c
 800181c:	20000040 	.word	0x20000040
 8001820:	200000b0 	.word	0x200000b0
 8001824:	20000061 	.word	0x20000061
 8001828:	200000b2 	.word	0x200000b2
 800182c:	200000b1 	.word	0x200000b1

08001830 <dayScreen>:
//	}
//}


//Date Clock Atomic
void dayScreen(bool status, bool isEdit){
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]

	if (prevDayIndex != dayIndex || isEdit == true){
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <dayScreen+0xe0>)
 8001842:	f993 2000 	ldrsb.w	r2, [r3]
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <dayScreen+0xe4>)
 8001848:	f993 3000 	ldrsb.w	r3, [r3]
 800184c:	429a      	cmp	r2, r3
 800184e:	d102      	bne.n	8001856 <dayScreen+0x26>
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d054      	beq.n	8001900 <dayScreen+0xd0>
		if (status == true){
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d02a      	beq.n	80018b2 <dayScreen+0x82>
			sprintf(Temp_Buffer_text, "%s", dayText[dayIndex]);
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <dayScreen+0xe4>)
 800185e:	f993 3000 	ldrsb.w	r3, [r3]
 8001862:	461a      	mov	r2, r3
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <dayScreen+0xe8>)
 8001866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186a:	461a      	mov	r2, r3
 800186c:	492b      	ldr	r1, [pc, #172]	; (800191c <dayScreen+0xec>)
 800186e:	482c      	ldr	r0, [pc, #176]	; (8001920 <dayScreen+0xf0>)
 8001870:	f00a fd60 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <dayScreen+0xf4>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3b05      	subs	r3, #5
 800187c:	b2d9      	uxtb	r1, r3
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <dayScreen+0xf8>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800188a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001908 <dayScreen+0xd8>
 800188e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001892:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001896:	edc7 7a00 	vstr	s15, [r7]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	2300      	movs	r3, #0
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	2302      	movs	r3, #2
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018aa:	481d      	ldr	r0, [pc, #116]	; (8001920 <dayScreen+0xf0>)
 80018ac:	f003 fffe 	bl	80058ac <ILI9341_Draw_Text>
 80018b0:	e021      	b.n	80018f6 <dayScreen+0xc6>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 80018b2:	491e      	ldr	r1, [pc, #120]	; (800192c <dayScreen+0xfc>)
 80018b4:	481a      	ldr	r0, [pc, #104]	; (8001920 <dayScreen+0xf0>)
 80018b6:	f00a fd3d 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <dayScreen+0xf4>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	3b05      	subs	r3, #5
 80018c2:	b2d9      	uxtb	r1, r3
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <dayScreen+0xf8>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018d0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001908 <dayScreen+0xd8>
 80018d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018dc:	edc7 7a00 	vstr	s15, [r7]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	2300      	movs	r3, #0
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2302      	movs	r3, #2
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <dayScreen+0xf0>)
 80018f2:	f003 ffdb 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevDayIndex = dayIndex;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <dayScreen+0xe4>)
 80018f8:	f993 2000 	ldrsb.w	r2, [r3]
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <dayScreen+0xe0>)
 80018fe:	701a      	strb	r2, [r3, #0]
	}
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	9999999a 	.word	0x9999999a
 800190c:	3fb99999 	.word	0x3fb99999
 8001910:	200000b5 	.word	0x200000b5
 8001914:	200000b0 	.word	0x200000b0
 8001918:	20000064 	.word	0x20000064
 800191c:	0800e730 	.word	0x0800e730
 8001920:	20000470 	.word	0x20000470
 8001924:	20000054 	.word	0x20000054
 8001928:	20000056 	.word	0x20000056
 800192c:	0800e734 	.word	0x0800e734

08001930 <dateScreen>:
void dateScreen(bool status, bool isEdit){
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af02      	add	r7, sp, #8
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	if (prevDate != date || isEdit == true){
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <dateScreen+0xf0>)
 8001942:	f993 2000 	ldrsb.w	r2, [r3]
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <dateScreen+0xf4>)
 8001948:	f993 3000 	ldrsb.w	r3, [r3]
 800194c:	429a      	cmp	r2, r3
 800194e:	d102      	bne.n	8001956 <dateScreen+0x26>
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d05a      	beq.n	8001a0c <dateScreen+0xdc>
		if (status == true){
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02b      	beq.n	80019b4 <dateScreen+0x84>
			sprintf(Temp_Buffer_text, "%02d", (int)date);
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <dateScreen+0xf4>)
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	461a      	mov	r2, r3
 8001964:	4930      	ldr	r1, [pc, #192]	; (8001a28 <dateScreen+0xf8>)
 8001966:	4831      	ldr	r0, [pc, #196]	; (8001a2c <dateScreen+0xfc>)
 8001968:	f00a fce4 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 800196c:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <dateScreen+0x100>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <dateScreen+0x104>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4413      	add	r3, r2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3303      	adds	r3, #3
 800197e:	b2d9      	uxtb	r1, r3
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <dateScreen+0x108>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800198c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001a18 <dateScreen+0xe8>
 8001990:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001994:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001998:	edc7 7a00 	vstr	s15, [r7]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2302      	movs	r3, #2
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ac:	481f      	ldr	r0, [pc, #124]	; (8001a2c <dateScreen+0xfc>)
 80019ae:	f003 ff7d 	bl	80058ac <ILI9341_Draw_Text>
 80019b2:	e026      	b.n	8001a02 <dateScreen+0xd2>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80019b4:	4921      	ldr	r1, [pc, #132]	; (8001a3c <dateScreen+0x10c>)
 80019b6:	481d      	ldr	r0, [pc, #116]	; (8001a2c <dateScreen+0xfc>)
 80019b8:	f00a fcbc 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*1+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <dateScreen+0x100>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <dateScreen+0x104>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3303      	adds	r3, #3
 80019ce:	b2d9      	uxtb	r1, r3
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <dateScreen+0x108>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019dc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001a18 <dateScreen+0xe8>
 80019e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019e8:	edc7 7a00 	vstr	s15, [r7]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	2300      	movs	r3, #0
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	2302      	movs	r3, #2
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <dateScreen+0xfc>)
 80019fe:	f003 ff55 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevDate = date;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <dateScreen+0xf4>)
 8001a04:	f993 2000 	ldrsb.w	r2, [r3]
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <dateScreen+0xf0>)
 8001a0a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	f3af 8000 	nop.w
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fb99999 	.word	0x3fb99999
 8001a20:	200000b4 	.word	0x200000b4
 8001a24:	20000061 	.word	0x20000061
 8001a28:	0800e738 	.word	0x0800e738
 8001a2c:	20000470 	.word	0x20000470
 8001a30:	20000054 	.word	0x20000054
 8001a34:	20000058 	.word	0x20000058
 8001a38:	20000056 	.word	0x20000056
 8001a3c:	0800e740 	.word	0x0800e740

08001a40 <monthScreen>:
void monthScreen(bool status, bool isEdit){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4603      	mov	r3, r0
 8001a48:	460a      	mov	r2, r1
 8001a4a:	71fb      	strb	r3, [r7, #7]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	71bb      	strb	r3, [r7, #6]
	if (prevMonthIndex != monthIndex || isEdit == true){
 8001a50:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <monthScreen+0x100>)
 8001a52:	f993 2000 	ldrsb.w	r2, [r3]
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <monthScreen+0x104>)
 8001a58:	f993 3000 	ldrsb.w	r3, [r3]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d102      	bne.n	8001a66 <monthScreen+0x26>
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d062      	beq.n	8001b2c <monthScreen+0xec>
		if (status == true){
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d031      	beq.n	8001ad0 <monthScreen+0x90>
			sprintf(Temp_Buffer_text, "%s", monthText[monthIndex]);
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <monthScreen+0x104>)
 8001a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <monthScreen+0x108>)
 8001a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4933      	ldr	r1, [pc, #204]	; (8001b4c <monthScreen+0x10c>)
 8001a7e:	4834      	ldr	r0, [pc, #208]	; (8001b50 <monthScreen+0x110>)
 8001a80:	f00a fc58 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <monthScreen+0x114>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <monthScreen+0x118>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3b05      	subs	r3, #5
 8001a9a:	b2d9      	uxtb	r1, r3
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <monthScreen+0x11c>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001aa8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001b38 <monthScreen+0xf8>
 8001aac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ab0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ab4:	edc7 7a00 	vstr	s15, [r7]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	4821      	ldr	r0, [pc, #132]	; (8001b50 <monthScreen+0x110>)
 8001aca:	f003 feef 	bl	80058ac <ILI9341_Draw_Text>
 8001ace:	e028      	b.n	8001b22 <monthScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "   ");
 8001ad0:	4923      	ldr	r1, [pc, #140]	; (8001b60 <monthScreen+0x120>)
 8001ad2:	481f      	ldr	r0, [pc, #124]	; (8001b50 <monthScreen+0x110>)
 8001ad4:	f00a fc2e 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*2 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <monthScreen+0x114>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <monthScreen+0x118>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3b05      	subs	r3, #5
 8001aee:	b2d9      	uxtb	r1, r3
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <monthScreen+0x11c>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001afc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001b38 <monthScreen+0xf8>
 8001b00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b08:	edc7 7a00 	vstr	s15, [r7]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	2302      	movs	r3, #2
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <monthScreen+0x110>)
 8001b1e:	f003 fec5 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevMonthIndex = monthIndex;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <monthScreen+0x104>)
 8001b24:	f993 2000 	ldrsb.w	r2, [r3]
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <monthScreen+0x100>)
 8001b2a:	701a      	strb	r2, [r3, #0]
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	f3af 8000 	nop.w
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	3fb99999 	.word	0x3fb99999
 8001b40:	200000b6 	.word	0x200000b6
 8001b44:	200000b1 	.word	0x200000b1
 8001b48:	20000080 	.word	0x20000080
 8001b4c:	0800e730 	.word	0x0800e730
 8001b50:	20000470 	.word	0x20000470
 8001b54:	20000054 	.word	0x20000054
 8001b58:	20000058 	.word	0x20000058
 8001b5c:	20000056 	.word	0x20000056
 8001b60:	0800e734 	.word	0x0800e734
 8001b64:	00000000 	.word	0x00000000

08001b68 <yearScreen>:
void yearScreen(bool status, bool isEdit){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	if (prevYear != year || isEdit == true){
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <yearScreen+0x100>)
 8001b7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <yearScreen+0x104>)
 8001b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d102      	bne.n	8001b8e <yearScreen+0x26>
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d062      	beq.n	8001c54 <yearScreen+0xec>
		if (status == true){
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d02f      	beq.n	8001bf4 <yearScreen+0x8c>
			sprintf(Temp_Buffer_text, "%04d", (int)year);
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <yearScreen+0x104>)
 8001b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4934      	ldr	r1, [pc, #208]	; (8001c70 <yearScreen+0x108>)
 8001b9e:	4835      	ldr	r0, [pc, #212]	; (8001c74 <yearScreen+0x10c>)
 8001ba0:	f00a fbc8 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <yearScreen+0x110>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <yearScreen+0x114>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	0049      	lsls	r1, r1, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	b2d9      	uxtb	r1, r3
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <yearScreen+0x118>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bcc:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001c60 <yearScreen+0xf8>
 8001bd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bd8:	edc7 7a00 	vstr	s15, [r7]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bec:	4821      	ldr	r0, [pc, #132]	; (8001c74 <yearScreen+0x10c>)
 8001bee:	f003 fe5d 	bl	80058ac <ILI9341_Draw_Text>
 8001bf2:	e02a      	b.n	8001c4a <yearScreen+0xe2>
		}
		else{
			sprintf(Temp_Buffer_text, "    ");
 8001bf4:	4923      	ldr	r1, [pc, #140]	; (8001c84 <yearScreen+0x11c>)
 8001bf6:	481f      	ldr	r0, [pc, #124]	; (8001c74 <yearScreen+0x10c>)
 8001bf8:	f00a fb9c 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*3+8 -5, maxHeight * 0.1, WHITE, 2, BLACK);
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <yearScreen+0x110>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <yearScreen+0x114>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	0049      	lsls	r1, r1, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3303      	adds	r3, #3
 8001c16:	b2d9      	uxtb	r1, r3
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <yearScreen+0x118>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c24:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001c60 <yearScreen+0xf8>
 8001c28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c30:	edc7 7a00 	vstr	s15, [r7]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <yearScreen+0x10c>)
 8001c46:	f003 fe31 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevYear = year;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <yearScreen+0x104>)
 8001c4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <yearScreen+0x100>)
 8001c52:	801a      	strh	r2, [r3, #0]
	}
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fb99999 	.word	0x3fb99999
 8001c68:	200000b8 	.word	0x200000b8
 8001c6c:	200000b2 	.word	0x200000b2
 8001c70:	0800e744 	.word	0x0800e744
 8001c74:	20000470 	.word	0x20000470
 8001c78:	20000054 	.word	0x20000054
 8001c7c:	20000058 	.word	0x20000058
 8001c80:	20000056 	.word	0x20000056
 8001c84:	0800e74c 	.word	0x0800e74c

08001c88 <displayDateScreen>:

//Display Date Clock Screen
void displayDateScreen(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff fdce 	bl	8001830 <dayScreen>
	dateScreen(true, false);
 8001c94:	2100      	movs	r1, #0
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff fe4a 	bl	8001930 <dateScreen>
	monthScreen(true, false);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff fece 	bl	8001a40 <monthScreen>
	yearScreen(true, false);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff ff5e 	bl	8001b68 <yearScreen>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <displayAlarmIcon>:

void displayAlarmIcon(bool on){
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	if(on == true){
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8139 	beq.w	8001f34 <displayAlarmIcon+0x284>
		//Alarm
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, YELLOW);
 8001cc2:	4b99      	ldr	r3, [pc, #612]	; (8001f28 <displayAlarmIcon+0x278>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cce:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8001f00 <displayAlarmIcon+0x250>
 8001cd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cd6:	4b95      	ldr	r3, [pc, #596]	; (8001f2c <displayAlarmIcon+0x27c>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ce2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ce6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cea:	ee17 3a90 	vmov	r3, s15
 8001cee:	b298      	uxth	r0, r3
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <displayAlarmIcon+0x280>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cfc:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8001f08 <displayAlarmIcon+0x258>
 8001d00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d08:	ee17 3a90 	vmov	r3, s15
 8001d0c:	b299      	uxth	r1, r3
 8001d0e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d12:	2206      	movs	r2, #6
 8001d14:	f003 fbc7 	bl	80054a6 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, YELLOW);
 8001d18:	4b83      	ldr	r3, [pc, #524]	; (8001f28 <displayAlarmIcon+0x278>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d24:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8001f00 <displayAlarmIcon+0x250>
 8001d28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d2c:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <displayAlarmIcon+0x27c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d40:	ee17 3a90 	vmov	r3, s15
 8001d44:	b298      	uxth	r0, r3
 8001d46:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <displayAlarmIcon+0x280>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d52:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8001f10 <displayAlarmIcon+0x260>
 8001d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d66:	ee17 3a90 	vmov	r3, s15
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d70:	2203      	movs	r2, #3
 8001d72:	f003 fb98 	bl	80054a6 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, YELLOW);
 8001d76:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <displayAlarmIcon+0x278>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d82:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001f18 <displayAlarmIcon+0x268>
 8001d86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d8a:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <displayAlarmIcon+0x27c>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d9a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001da2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001da6:	ee17 3a90 	vmov	r3, s15
 8001daa:	b298      	uxth	r0, r3
 8001dac:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <displayAlarmIcon+0x280>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001db8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001f20 <displayAlarmIcon+0x270>
 8001dbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dc0:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001dc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dc8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dcc:	ee17 3a90 	vmov	r3, s15
 8001dd0:	b299      	uxth	r1, r3
 8001dd2:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <displayAlarmIcon+0x278>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001dde:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001f18 <displayAlarmIcon+0x268>
 8001de2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <displayAlarmIcon+0x27c>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001df2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001df6:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001dfa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dfe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e02:	ee17 3a90 	vmov	r3, s15
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <displayAlarmIcon+0x280>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e14:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001f20 <displayAlarmIcon+0x270>
 8001e18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e1c:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001e20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e28:	ee17 3a90 	vmov	r3, s15
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8001e32:	9400      	str	r4, [sp, #0]
 8001e34:	f003 fc40 	bl	80056b8 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8001e38:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <displayAlarmIcon+0x278>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e44:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001f18 <displayAlarmIcon+0x268>
 8001e48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <displayAlarmIcon+0x27c>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e5c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e68:	ee17 3a90 	vmov	r3, s15
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <displayAlarmIcon+0x280>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e7a:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001f20 <displayAlarmIcon+0x270>
 8001e7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e82:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001e86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e8e:	ee17 3a90 	vmov	r3, s15
 8001e92:	b299      	uxth	r1, r3
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <displayAlarmIcon+0x278>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ea0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8001f18 <displayAlarmIcon+0x268>
 8001ea4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <displayAlarmIcon+0x27c>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001eb8:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8001ebc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ec0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ec4:	ee17 3a90 	vmov	r3, s15
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <displayAlarmIcon+0x280>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ed6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001f20 <displayAlarmIcon+0x270>
 8001eda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ede:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 8001ee2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ee6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2400      	movs	r4, #0
 8001ef2:	9400      	str	r4, [sp, #0]
 8001ef4:	f003 fb5f 	bl	80055b6 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
	}
}
 8001ef8:	e134      	b.n	8002164 <displayAlarmIcon+0x4b4>
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	d70a3d71 	.word	0xd70a3d71
 8001f04:	3fed70a3 	.word	0x3fed70a3
 8001f08:	0a3d70a4 	.word	0x0a3d70a4
 8001f0c:	3fc0a3d7 	.word	0x3fc0a3d7
 8001f10:	47ae147b 	.word	0x47ae147b
 8001f14:	3fc47ae1 	.word	0x3fc47ae1
 8001f18:	cccccccd 	.word	0xcccccccd
 8001f1c:	3feccccc 	.word	0x3feccccc
 8001f20:	9999999a 	.word	0x9999999a
 8001f24:	3fb99999 	.word	0x3fb99999
 8001f28:	20000052 	.word	0x20000052
 8001f2c:	20000054 	.word	0x20000054
 8001f30:	20000056 	.word	0x20000056
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.13, 6, BLACK);
 8001f34:	4b98      	ldr	r3, [pc, #608]	; (8002198 <displayAlarmIcon+0x4e8>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f40:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002170 <displayAlarmIcon+0x4c0>
 8001f44:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f48:	4b94      	ldr	r3, [pc, #592]	; (800219c <displayAlarmIcon+0x4ec>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	b298      	uxth	r0, r3
 8001f62:	4b8f      	ldr	r3, [pc, #572]	; (80021a0 <displayAlarmIcon+0x4f0>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f6e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002178 <displayAlarmIcon+0x4c8>
 8001f72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f7a:	ee17 3a90 	vmov	r3, s15
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	2206      	movs	r2, #6
 8001f84:	f003 fa8f 	bl	80054a6 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(maxWidth * 0.92 + offsetWidth, maxHeight * 0.16-1, 3, BLACK);
 8001f88:	4b83      	ldr	r3, [pc, #524]	; (8002198 <displayAlarmIcon+0x4e8>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f94:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002170 <displayAlarmIcon+0x4c0>
 8001f98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f9c:	4b7f      	ldr	r3, [pc, #508]	; (800219c <displayAlarmIcon+0x4ec>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fa8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	b298      	uxth	r0, r3
 8001fb6:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <displayAlarmIcon+0x4f0>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fc2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8002180 <displayAlarmIcon+0x4d0>
 8001fc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001fce:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd6:	ee17 3a90 	vmov	r3, s15
 8001fda:	b299      	uxth	r1, r3
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2203      	movs	r2, #3
 8001fe0:	f003 fa61 	bl	80054a6 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 8001fe4:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <displayAlarmIcon+0x4e8>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ff0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002188 <displayAlarmIcon+0x4d8>
 8001ff4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <displayAlarmIcon+0x4ec>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002004:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002008:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800200c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002010:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	b298      	uxth	r0, r3
 800201a:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <displayAlarmIcon+0x4f0>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002026:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8002190 <displayAlarmIcon+0x4e0>
 800202a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800202e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002032:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002036:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800203a:	ee17 3a90 	vmov	r3, s15
 800203e:	b299      	uxth	r1, r3
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <displayAlarmIcon+0x4e8>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800204c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8002188 <displayAlarmIcon+0x4d8>
 8002050:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002054:	4b51      	ldr	r3, [pc, #324]	; (800219c <displayAlarmIcon+0x4ec>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002060:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002064:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002068:	ee37 7b06 	vadd.f64	d7, d7, d6
 800206c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b4a      	ldr	r3, [pc, #296]	; (80021a0 <displayAlarmIcon+0x4f0>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002082:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8002190 <displayAlarmIcon+0x4e0>
 8002086:	ee27 7b06 	vmul.f64	d7, d7, d6
 800208a:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 800208e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002092:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002096:	ee17 3a90 	vmov	r3, s15
 800209a:	b29b      	uxth	r3, r3
 800209c:	2400      	movs	r4, #0
 800209e:	9400      	str	r4, [sp, #0]
 80020a0:	f003 fb0a 	bl	80056b8 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(maxWidth*0.9 +offsetWidth-6, maxHeight * 0.1 +9, maxWidth*0.9 +offsetWidth+14, maxHeight * 0.1 +13, BLACK);
 80020a4:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <displayAlarmIcon+0x4e8>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020b0:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002188 <displayAlarmIcon+0x4d8>
 80020b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <displayAlarmIcon+0x4ec>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020c8:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80020cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020d4:	ee17 3a90 	vmov	r3, s15
 80020d8:	b298      	uxth	r0, r3
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <displayAlarmIcon+0x4f0>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020e6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002190 <displayAlarmIcon+0x4e0>
 80020ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020ee:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80020f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020fa:	ee17 3a90 	vmov	r3, s15
 80020fe:	b299      	uxth	r1, r3
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <displayAlarmIcon+0x4e8>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800210c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002188 <displayAlarmIcon+0x4d8>
 8002110:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <displayAlarmIcon+0x4ec>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002120:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002124:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002128:	ee37 7b06 	vadd.f64	d7, d7, d6
 800212c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002130:	ee17 3a90 	vmov	r3, s15
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <displayAlarmIcon+0x4f0>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002142:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002190 <displayAlarmIcon+0x4e0>
 8002146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800214a:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 800214e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002152:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002156:	ee17 3a90 	vmov	r3, s15
 800215a:	b29b      	uxth	r3, r3
 800215c:	2400      	movs	r4, #0
 800215e:	9400      	str	r4, [sp, #0]
 8002160:	f003 fa29 	bl	80055b6 <ILI9341_Draw_Hollow_Rectangle_Coord>
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}
 800216c:	f3af 8000 	nop.w
 8002170:	d70a3d71 	.word	0xd70a3d71
 8002174:	3fed70a3 	.word	0x3fed70a3
 8002178:	0a3d70a4 	.word	0x0a3d70a4
 800217c:	3fc0a3d7 	.word	0x3fc0a3d7
 8002180:	47ae147b 	.word	0x47ae147b
 8002184:	3fc47ae1 	.word	0x3fc47ae1
 8002188:	cccccccd 	.word	0xcccccccd
 800218c:	3feccccc 	.word	0x3feccccc
 8002190:	9999999a 	.word	0x9999999a
 8002194:	3fb99999 	.word	0x3fb99999
 8002198:	20000052 	.word	0x20000052
 800219c:	20000054 	.word	0x20000054
 80021a0:	20000056 	.word	0x20000056

080021a4 <topBarScreen>:

//Top Screen
void topBarScreen(){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	displayDateScreen();
 80021a8:	f7ff fd6e 	bl	8001c88 <displayDateScreen>

	displayAlarmIcon(alarmIsOn);
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <topBarScreen+0x18>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd7d 	bl	8001cb0 <displayAlarmIcon>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000060 	.word	0x20000060

080021c0 <resetPrevNum>:

//Reset Prev Values
void resetPrevNum(){
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <resetPrevNum+0x54>)
 80021c6:	f04f 32ff 	mov.w	r2, #4294967295
 80021ca:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <resetPrevNum+0x58>)
 80021ce:	f04f 32ff 	mov.w	r2, #4294967295
 80021d2:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <resetPrevNum+0x5c>)
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295
 80021da:	601a      	str	r2, [r3, #0]

	prevDayIndex = -1;
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <resetPrevNum+0x60>)
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	701a      	strb	r2, [r3, #0]
	prevDate = -1;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <resetPrevNum+0x64>)
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	701a      	strb	r2, [r3, #0]
	prevMonthIndex = -1;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <resetPrevNum+0x68>)
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	701a      	strb	r2, [r3, #0]
	prevYear = -1;
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <resetPrevNum+0x6c>)
 80021f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f4:	801a      	strh	r2, [r3, #0]

	prevTemp = -1.0;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <resetPrevNum+0x70>)
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <resetPrevNum+0x74>)
 80021fa:	601a      	str	r2, [r3, #0]
	prevHumid = -1.0;
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <resetPrevNum+0x78>)
 80021fe:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <resetPrevNum+0x74>)
 8002200:	601a      	str	r2, [r3, #0]
	prevPmTwoPointFive = -1.0;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <resetPrevNum+0x7c>)
 8002204:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <resetPrevNum+0x74>)
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000044 	.word	0x20000044
 8002218:	20000048 	.word	0x20000048
 800221c:	2000004c 	.word	0x2000004c
 8002220:	200000b5 	.word	0x200000b5
 8002224:	200000b4 	.word	0x200000b4
 8002228:	200000b6 	.word	0x200000b6
 800222c:	200000b8 	.word	0x200000b8
 8002230:	20000024 	.word	0x20000024
 8002234:	bf800000 	.word	0xbf800000
 8002238:	20000028 	.word	0x20000028
 800223c:	2000002c 	.word	0x2000002c

08002240 <hourScreen>:

//Clock Screen Atomic
void hourScreen(bool status, bool isEdit){
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af02      	add	r7, sp, #8
 8002246:	4603      	mov	r3, r0
 8002248:	460a      	mov	r2, r1
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
	if (prevHourNum != hourNum || isEdit == true){
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <hourScreen+0xd0>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <hourScreen+0xd4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d102      	bne.n	8002262 <hourScreen+0x22>
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d04e      	beq.n	8002300 <hourScreen+0xc0>
		if (status == true){
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d025      	beq.n	80022b4 <hourScreen+0x74>
			sprintf(Temp_Buffer_text, "%02d", (int)hourNum);
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <hourScreen+0xd4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	492a      	ldr	r1, [pc, #168]	; (8002318 <hourScreen+0xd8>)
 8002270:	482a      	ldr	r0, [pc, #168]	; (800231c <hourScreen+0xdc>)
 8002272:	f00a f85f 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <hourScreen+0xe0>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3b05      	subs	r3, #5
 800227e:	b2d9      	uxtb	r1, r3
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <hourScreen+0xe4>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800228c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002308 <hourScreen+0xc8>
 8002290:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002294:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002298:	edc7 7a00 	vstr	s15, [r7]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2306      	movs	r3, #6
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ac:	481b      	ldr	r0, [pc, #108]	; (800231c <hourScreen+0xdc>)
 80022ae:	f003 fafd 	bl	80058ac <ILI9341_Draw_Text>
 80022b2:	e021      	b.n	80022f8 <hourScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 80022b4:	491c      	ldr	r1, [pc, #112]	; (8002328 <hourScreen+0xe8>)
 80022b6:	4819      	ldr	r0, [pc, #100]	; (800231c <hourScreen+0xdc>)
 80022b8:	f00a f83c 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth - 5, maxHeight * 0.3, WHITE, 6, BLACK);
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <hourScreen+0xe0>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3b05      	subs	r3, #5
 80022c4:	b2d9      	uxtb	r1, r3
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <hourScreen+0xe4>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022d2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002308 <hourScreen+0xc8>
 80022d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022de:	edc7 7a00 	vstr	s15, [r7]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	2300      	movs	r3, #0
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2306      	movs	r3, #6
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f2:	480a      	ldr	r0, [pc, #40]	; (800231c <hourScreen+0xdc>)
 80022f4:	f003 fada 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevHourNum = hourNum;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <hourScreen+0xd4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <hourScreen+0xd0>)
 80022fe:	6013      	str	r3, [r2, #0]
	}
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	33333333 	.word	0x33333333
 800230c:	3fd33333 	.word	0x3fd33333
 8002310:	2000004c 	.word	0x2000004c
 8002314:	20000040 	.word	0x20000040
 8002318:	0800e738 	.word	0x0800e738
 800231c:	20000470 	.word	0x20000470
 8002320:	20000054 	.word	0x20000054
 8002324:	20000056 	.word	0x20000056
 8002328:	0800e740 	.word	0x0800e740
 800232c:	00000000 	.word	0x00000000

08002330 <colonScreen>:

void colonScreen(bool status){
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af02      	add	r7, sp, #8
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
	if (status == true){
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d022      	beq.n	8002386 <colonScreen+0x56>
		sprintf(Temp_Buffer_text, ":");
 8002340:	4927      	ldr	r1, [pc, #156]	; (80023e0 <colonScreen+0xb0>)
 8002342:	4828      	ldr	r0, [pc, #160]	; (80023e4 <colonScreen+0xb4>)
 8002344:	f009 fff6 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <colonScreen+0xb8>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3349      	adds	r3, #73	; 0x49
 8002350:	b2d9      	uxtb	r1, r3
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <colonScreen+0xbc>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800235e:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80023d8 <colonScreen+0xa8>
 8002362:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002366:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800236a:	edc7 7a00 	vstr	s15, [r7]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2304      	movs	r3, #4
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237e:	4819      	ldr	r0, [pc, #100]	; (80023e4 <colonScreen+0xb4>)
 8002380:	f003 fa94 	bl	80058ac <ILI9341_Draw_Text>
	}
	else{
		sprintf(Temp_Buffer_text, " ");
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
	}
}
 8002384:	e021      	b.n	80023ca <colonScreen+0x9a>
		sprintf(Temp_Buffer_text, " ");
 8002386:	491a      	ldr	r1, [pc, #104]	; (80023f0 <colonScreen+0xc0>)
 8002388:	4816      	ldr	r0, [pc, #88]	; (80023e4 <colonScreen+0xb4>)
 800238a:	f009 ffd3 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 73, maxHeight * 0.35, WHITE, 4, BLACK);
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <colonScreen+0xb8>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3349      	adds	r3, #73	; 0x49
 8002396:	b2d9      	uxtb	r1, r3
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <colonScreen+0xbc>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023a4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80023d8 <colonScreen+0xa8>
 80023a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023b0:	edc7 7a00 	vstr	s15, [r7]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	2304      	movs	r3, #4
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c4:	4807      	ldr	r0, [pc, #28]	; (80023e4 <colonScreen+0xb4>)
 80023c6:	f003 fa71 	bl	80058ac <ILI9341_Draw_Text>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	f3af 8000 	nop.w
 80023d8:	66666666 	.word	0x66666666
 80023dc:	3fd66666 	.word	0x3fd66666
 80023e0:	0800e754 	.word	0x0800e754
 80023e4:	20000470 	.word	0x20000470
 80023e8:	20000054 	.word	0x20000054
 80023ec:	20000056 	.word	0x20000056
 80023f0:	0800e758 	.word	0x0800e758
 80023f4:	00000000 	.word	0x00000000

080023f8 <minuteScreen>:
void minuteScreen(bool status, bool isEdit){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	4603      	mov	r3, r0
 8002400:	460a      	mov	r2, r1
 8002402:	71fb      	strb	r3, [r7, #7]
 8002404:	4613      	mov	r3, r2
 8002406:	71bb      	strb	r3, [r7, #6]
	if (prevMinuteNum != minuteNum || isEdit == true){
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <minuteScreen+0xd0>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <minuteScreen+0xd4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d102      	bne.n	800241a <minuteScreen+0x22>
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d04e      	beq.n	80024b8 <minuteScreen+0xc0>
		if (status == true){
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d025      	beq.n	800246c <minuteScreen+0x74>

			sprintf(Temp_Buffer_text, "%02d", (int)minuteNum);
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <minuteScreen+0xd4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	492a      	ldr	r1, [pc, #168]	; (80024d0 <minuteScreen+0xd8>)
 8002428:	482a      	ldr	r0, [pc, #168]	; (80024d4 <minuteScreen+0xdc>)
 800242a:	f009 ff83 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <minuteScreen+0xe0>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3361      	adds	r3, #97	; 0x61
 8002436:	b2d9      	uxtb	r1, r3
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <minuteScreen+0xe4>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002444:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80024c0 <minuteScreen+0xc8>
 8002448:	ee27 7b06 	vmul.f64	d7, d7, d6
 800244c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002450:	edc7 7a00 	vstr	s15, [r7]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	2300      	movs	r3, #0
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	2306      	movs	r3, #6
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002464:	481b      	ldr	r0, [pc, #108]	; (80024d4 <minuteScreen+0xdc>)
 8002466:	f003 fa21 	bl	80058ac <ILI9341_Draw_Text>
 800246a:	e021      	b.n	80024b0 <minuteScreen+0xb8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 800246c:	491c      	ldr	r1, [pc, #112]	; (80024e0 <minuteScreen+0xe8>)
 800246e:	4819      	ldr	r0, [pc, #100]	; (80024d4 <minuteScreen+0xdc>)
 8002470:	f009 ff60 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 97, maxHeight * 0.3, WHITE, 6, BLACK);
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <minuteScreen+0xe0>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3361      	adds	r3, #97	; 0x61
 800247c:	b2d9      	uxtb	r1, r3
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <minuteScreen+0xe4>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800248a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80024c0 <minuteScreen+0xc8>
 800248e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002492:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002496:	edc7 7a00 	vstr	s15, [r7]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	2300      	movs	r3, #0
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	2306      	movs	r3, #6
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024aa:	480a      	ldr	r0, [pc, #40]	; (80024d4 <minuteScreen+0xdc>)
 80024ac:	f003 f9fe 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevMinuteNum = minuteNum;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <minuteScreen+0xd4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <minuteScreen+0xd0>)
 80024b6:	6013      	str	r3, [r2, #0]
	}
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	33333333 	.word	0x33333333
 80024c4:	3fd33333 	.word	0x3fd33333
 80024c8:	20000048 	.word	0x20000048
 80024cc:	2000003c 	.word	0x2000003c
 80024d0:	0800e738 	.word	0x0800e738
 80024d4:	20000470 	.word	0x20000470
 80024d8:	20000054 	.word	0x20000054
 80024dc:	20000056 	.word	0x20000056
 80024e0:	0800e740 	.word	0x0800e740
 80024e4:	00000000 	.word	0x00000000

080024e8 <secondScreen>:
void secondScreen(bool status, bool isEdit){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	460a      	mov	r2, r1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71bb      	strb	r3, [r7, #6]
	if (prevSecondNum != secondNum || isEdit == true){
 80024f8:	4b49      	ldr	r3, [pc, #292]	; (8002620 <secondScreen+0x138>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b49      	ldr	r3, [pc, #292]	; (8002624 <secondScreen+0x13c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d102      	bne.n	800250a <secondScreen+0x22>
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d07c      	beq.n	8002604 <secondScreen+0x11c>
		if (status == true){
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d03c      	beq.n	800258a <secondScreen+0xa2>
			sprintf(Temp_Buffer_text, "%02d", (int)secondNum);
 8002510:	4b44      	ldr	r3, [pc, #272]	; (8002624 <secondScreen+0x13c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4944      	ldr	r1, [pc, #272]	; (8002628 <secondScreen+0x140>)
 8002518:	4844      	ldr	r0, [pc, #272]	; (800262c <secondScreen+0x144>)
 800251a:	f009 ff0b 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <secondScreen+0x148>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800252a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002610 <secondScreen+0x128>
 800252e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002532:	4b40      	ldr	r3, [pc, #256]	; (8002634 <secondScreen+0x14c>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800253e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002542:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002546:	ee37 7b46 	vsub.f64	d7, d7, d6
 800254a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800254e:	edc7 7a00 	vstr	s15, [r7]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2d9      	uxtb	r1, r3
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <secondScreen+0x150>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002562:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002618 <secondScreen+0x130>
 8002566:	ee27 7b06 	vmul.f64	d7, d7, d6
 800256a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800256e:	edc7 7a00 	vstr	s15, [r7]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	2300      	movs	r3, #0
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2302      	movs	r3, #2
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002582:	482a      	ldr	r0, [pc, #168]	; (800262c <secondScreen+0x144>)
 8002584:	f003 f992 	bl	80058ac <ILI9341_Draw_Text>
 8002588:	e038      	b.n	80025fc <secondScreen+0x114>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 800258a:	492c      	ldr	r1, [pc, #176]	; (800263c <secondScreen+0x154>)
 800258c:	4827      	ldr	r0, [pc, #156]	; (800262c <secondScreen+0x144>)
 800258e:	f009 fed1 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.90 + offsetWidth -3, maxHeight * 0.42, WHITE, 2, BLACK);
 8002592:	4b27      	ldr	r3, [pc, #156]	; (8002630 <secondScreen+0x148>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800259e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002610 <secondScreen+0x128>
 80025a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <secondScreen+0x14c>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025b6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80025ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025c2:	edc7 7a00 	vstr	s15, [r7]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2d9      	uxtb	r1, r3
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <secondScreen+0x150>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025d6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002618 <secondScreen+0x130>
 80025da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025e2:	edc7 7a00 	vstr	s15, [r7]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <secondScreen+0x144>)
 80025f8:	f003 f958 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevSecondNum = secondNum;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <secondScreen+0x13c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <secondScreen+0x138>)
 8002602:	6013      	str	r3, [r2, #0]
	}
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	f3af 8000 	nop.w
 8002610:	cccccccd 	.word	0xcccccccd
 8002614:	3feccccc 	.word	0x3feccccc
 8002618:	ae147ae1 	.word	0xae147ae1
 800261c:	3fdae147 	.word	0x3fdae147
 8002620:	20000044 	.word	0x20000044
 8002624:	20000038 	.word	0x20000038
 8002628:	0800e738 	.word	0x0800e738
 800262c:	20000470 	.word	0x20000470
 8002630:	20000052 	.word	0x20000052
 8002634:	20000054 	.word	0x20000054
 8002638:	20000056 	.word	0x20000056
 800263c:	0800e740 	.word	0x0800e740

08002640 <displayClockScreen>:

//Display Clock Screen
void displayClockScreen(){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0

	if (halfsecondState == false){ // colon behaviour
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <displayClockScreen+0x3c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f083 0301 	eor.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <displayClockScreen+0x1a>
		colonScreen(true);
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff fe6c 	bl	8002330 <colonScreen>
 8002658:	e002      	b.n	8002660 <displayClockScreen+0x20>
	}
	else{
		colonScreen(false);
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff fe68 	bl	8002330 <colonScreen>
	}

	secondScreen(true, false);
 8002660:	2100      	movs	r1, #0
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff ff40 	bl	80024e8 <secondScreen>
	minuteScreen(true, false);
 8002668:	2100      	movs	r1, #0
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff fec4 	bl	80023f8 <minuteScreen>
	hourScreen(true, false);
 8002670:	2100      	movs	r1, #0
 8002672:	2001      	movs	r0, #1
 8002674:	f7ff fde4 	bl	8002240 <hourScreen>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000050 	.word	0x20000050

08002680 <staticClockScreen>:

void staticClockScreen(){
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	colonScreen(true);
 8002684:	2001      	movs	r0, #1
 8002686:	f7ff fe53 	bl	8002330 <colonScreen>
	hourScreen(true, false);
 800268a:	2100      	movs	r1, #0
 800268c:	2001      	movs	r0, #1
 800268e:	f7ff fdd7 	bl	8002240 <hourScreen>
	minuteScreen(true, false);
 8002692:	2100      	movs	r1, #0
 8002694:	2001      	movs	r0, #1
 8002696:	f7ff feaf 	bl	80023f8 <minuteScreen>
	secondScreen(true, false);
 800269a:	2100      	movs	r1, #0
 800269c:	2001      	movs	r0, #1
 800269e:	f7ff ff23 	bl	80024e8 <secondScreen>
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <editHourScreen>:

//Edit Clock Screen
void editHourScreen()
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	displayDateScreen(); // Init first
 80026ac:	f7ff faec 	bl	8001c88 <displayDateScreen>
	colonScreen(true);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff fe3d 	bl	8002330 <colonScreen>
	minuteScreen(true, false);
 80026b6:	2100      	movs	r1, #0
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7ff fe9d 	bl	80023f8 <minuteScreen>
	secondScreen(true, false);
 80026be:	2100      	movs	r1, #0
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff ff11 	bl	80024e8 <secondScreen>

	if (halfsecondState == false){ // hour
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <editHourScreen+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <editHourScreen+0x36>
		hourScreen(false, true);
 80026d4:	2101      	movs	r1, #1
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff fdb2 	bl	8002240 <hourScreen>
	}
	else{
		hourScreen(true, true);
	}
}
 80026dc:	e003      	b.n	80026e6 <editHourScreen+0x3e>
		hourScreen(true, true);
 80026de:	2101      	movs	r1, #1
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7ff fdad 	bl	8002240 <hourScreen>
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000050 	.word	0x20000050

080026f0 <editMinuteScreen>:
void editMinuteScreen(){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

	colonScreen(true);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff fe1b 	bl	8002330 <colonScreen>
	hourScreen(true, false);
 80026fa:	2100      	movs	r1, #0
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff fd9f 	bl	8002240 <hourScreen>
	secondScreen(true, false);
 8002702:	2100      	movs	r1, #0
 8002704:	2001      	movs	r0, #1
 8002706:	f7ff feef 	bl	80024e8 <secondScreen>

	if (halfsecondState == false){ //minute
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <editMinuteScreen+0x40>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <editMinuteScreen+0x32>
		minuteScreen(false, true);
 8002718:	2101      	movs	r1, #1
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fe6c 	bl	80023f8 <minuteScreen>
	}
	else{
		minuteScreen(true, true);
	}
}
 8002720:	e003      	b.n	800272a <editMinuteScreen+0x3a>
		minuteScreen(true, true);
 8002722:	2101      	movs	r1, #1
 8002724:	2001      	movs	r0, #1
 8002726:	f7ff fe67 	bl	80023f8 <minuteScreen>
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000050 	.word	0x20000050

08002734 <editSecondScreen>:
void editSecondScreen(){
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0

	colonScreen(true);
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff fdf9 	bl	8002330 <colonScreen>
	hourScreen(true, false);
 800273e:	2100      	movs	r1, #0
 8002740:	2001      	movs	r0, #1
 8002742:	f7ff fd7d 	bl	8002240 <hourScreen>
	minuteScreen(true, false);
 8002746:	2100      	movs	r1, #0
 8002748:	2001      	movs	r0, #1
 800274a:	f7ff fe55 	bl	80023f8 <minuteScreen>

	if (halfsecondState == false){ //second
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <editSecondScreen+0x40>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f083 0301 	eor.w	r3, r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <editSecondScreen+0x32>
		secondScreen(false, true);
 800275c:	2101      	movs	r1, #1
 800275e:	2000      	movs	r0, #0
 8002760:	f7ff fec2 	bl	80024e8 <secondScreen>
	}
	else{
		secondScreen(true, true);
	}
}
 8002764:	e003      	b.n	800276e <editSecondScreen+0x3a>
		secondScreen(true, true);
 8002766:	2101      	movs	r1, #1
 8002768:	2001      	movs	r0, #1
 800276a:	f7ff febd 	bl	80024e8 <secondScreen>
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000050 	.word	0x20000050

08002778 <editDayScreen>:

//Edit Date Clock Screen
void editDayScreen()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	dateScreen(true, false);
 800277c:	2100      	movs	r1, #0
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff f8d6 	bl	8001930 <dateScreen>
	monthScreen(true, false);
 8002784:	2100      	movs	r1, #0
 8002786:	2001      	movs	r0, #1
 8002788:	f7ff f95a 	bl	8001a40 <monthScreen>
	yearScreen(true, false);
 800278c:	2100      	movs	r1, #0
 800278e:	2001      	movs	r0, #1
 8002790:	f7ff f9ea 	bl	8001b68 <yearScreen>

	if (halfsecondState == false){ // day
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <editDayScreen+0x40>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <editDayScreen+0x34>
		dayScreen(false, true);
 80027a2:	2101      	movs	r1, #1
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff f843 	bl	8001830 <dayScreen>
	}
	else{
		dayScreen(true, true);
	}
}
 80027aa:	e003      	b.n	80027b4 <editDayScreen+0x3c>
		dayScreen(true, true);
 80027ac:	2101      	movs	r1, #1
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff f83e 	bl	8001830 <dayScreen>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000050 	.word	0x20000050

080027bc <editDateScreen>:
void editDateScreen()
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 80027c0:	2100      	movs	r1, #0
 80027c2:	2001      	movs	r0, #1
 80027c4:	f7ff f834 	bl	8001830 <dayScreen>
	monthScreen(true, false);
 80027c8:	2100      	movs	r1, #0
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7ff f938 	bl	8001a40 <monthScreen>
	yearScreen(true, false);
 80027d0:	2100      	movs	r1, #0
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7ff f9c8 	bl	8001b68 <yearScreen>

	if (halfsecondState == false){ // date
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <editDateScreen+0x40>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	f083 0301 	eor.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <editDateScreen+0x34>
		dateScreen(false, true);
 80027e6:	2101      	movs	r1, #1
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7ff f8a1 	bl	8001930 <dateScreen>
	}
	else{
		dateScreen(true, true);
	}
}
 80027ee:	e003      	b.n	80027f8 <editDateScreen+0x3c>
		dateScreen(true, true);
 80027f0:	2101      	movs	r1, #1
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7ff f89c 	bl	8001930 <dateScreen>
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000050 	.word	0x20000050

08002800 <editMonthScreen>:
void editMonthScreen()
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	dayScreen(true, false);
 8002804:	2100      	movs	r1, #0
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff f812 	bl	8001830 <dayScreen>
	dateScreen(true, false);
 800280c:	2100      	movs	r1, #0
 800280e:	2001      	movs	r0, #1
 8002810:	f7ff f88e 	bl	8001930 <dateScreen>
	yearScreen(true, false);
 8002814:	2100      	movs	r1, #0
 8002816:	2001      	movs	r0, #1
 8002818:	f7ff f9a6 	bl	8001b68 <yearScreen>

	if (halfsecondState == false){ // month
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <editMonthScreen+0x40>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f083 0301 	eor.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <editMonthScreen+0x34>
		monthScreen(false, true);
 800282a:	2101      	movs	r1, #1
 800282c:	2000      	movs	r0, #0
 800282e:	f7ff f907 	bl	8001a40 <monthScreen>
	}
	else{
		monthScreen(true, true);
	}
}
 8002832:	e003      	b.n	800283c <editMonthScreen+0x3c>
		monthScreen(true, true);
 8002834:	2101      	movs	r1, #1
 8002836:	2001      	movs	r0, #1
 8002838:	f7ff f902 	bl	8001a40 <monthScreen>
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000050 	.word	0x20000050

08002844 <editYearScreen>:
void editYearScreen()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	staticClockScreen(); // init Clock first in editing mode
 8002848:	f7ff ff1a 	bl	8002680 <staticClockScreen>
	dayScreen(true, false);
 800284c:	2100      	movs	r1, #0
 800284e:	2001      	movs	r0, #1
 8002850:	f7fe ffee 	bl	8001830 <dayScreen>
	dateScreen(true, false);
 8002854:	2100      	movs	r1, #0
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff f86a 	bl	8001930 <dateScreen>
	monthScreen(true, false);
 800285c:	2100      	movs	r1, #0
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff f8ee 	bl	8001a40 <monthScreen>

	if (halfsecondState == false){ // day
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <editYearScreen+0x44>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <editYearScreen+0x38>
		yearScreen(false, true);
 8002872:	2101      	movs	r1, #1
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff f977 	bl	8001b68 <yearScreen>
	}
	else{
		yearScreen(true, true);
	}
}
 800287a:	e003      	b.n	8002884 <editYearScreen+0x40>
		yearScreen(true, true);
 800287c:	2101      	movs	r1, #1
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff f972 	bl	8001b68 <yearScreen>
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000050 	.word	0x20000050
 800288c:	00000000 	.word	0x00000000

08002890 <bottomBarScreen>:

//Bottom Screen
void bottomBarScreen(){
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b087      	sub	sp, #28
 8002894:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 8002896:	2302      	movs	r3, #2
 8002898:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomHeight = maxHeight * 0.87;
 800289a:	4bb3      	ldr	r3, [pc, #716]	; (8002b68 <bottomBarScreen+0x2d8>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028a6:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002b50 <bottomBarScreen+0x2c0>
 80028aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80028b6:	793b      	ldrb	r3, [r7, #4]
 80028b8:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 80028ba:	2333      	movs	r3, #51	; 0x33
 80028bc:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth2 = maxWidth * 0.25 + 51;
 80028be:	4bab      	ldr	r3, [pc, #684]	; (8002b6c <bottomBarScreen+0x2dc>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028ca:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80028ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028d2:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002b58 <bottomBarScreen+0x2c8>
 80028d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028de:	edc7 7a01 	vstr	s15, [r7, #4]
 80028e2:	793b      	ldrb	r3, [r7, #4]
 80028e4:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth3 = maxWidth * 0.50 + 51;
 80028e6:	4ba1      	ldr	r3, [pc, #644]	; (8002b6c <bottomBarScreen+0x2dc>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028f2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80028f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028fa:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002b58 <bottomBarScreen+0x2c8>
 80028fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002902:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002906:	edc7 7a01 	vstr	s15, [r7, #4]
 800290a:	793b      	ldrb	r3, [r7, #4]
 800290c:	72fb      	strb	r3, [r7, #11]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 800290e:	4b97      	ldr	r3, [pc, #604]	; (8002b6c <bottomBarScreen+0x2dc>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800291a:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 800291e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002922:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002b58 <bottomBarScreen+0x2c8>
 8002926:	ee37 7b06 	vadd.f64	d7, d7, d6
 800292a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800292e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002932:	793b      	ldrb	r3, [r7, #4]
 8002934:	72bb      	strb	r3, [r7, #10]
	uint8_t bottomWidth = 55;
 8002936:	2337      	movs	r3, #55	; 0x37
 8002938:	727b      	strb	r3, [r7, #9]

	//Rectangle Background Color
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth1, bottomHeight, bottomWidth1 + bottomWidth, maxHeight, RED);
 800293a:	7b7b      	ldrb	r3, [r7, #13]
 800293c:	b298      	uxth	r0, r3
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	b299      	uxth	r1, r3
 8002942:	7b7b      	ldrb	r3, [r7, #13]
 8002944:	b29a      	uxth	r2, r3
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	b29b      	uxth	r3, r3
 800294a:	4413      	add	r3, r2
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b86      	ldr	r3, [pc, #536]	; (8002b68 <bottomBarScreen+0x2d8>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002956:	9400      	str	r4, [sp, #0]
 8002958:	f002 feae 	bl	80056b8 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth2, bottomHeight, bottomWidth2 + bottomWidth, maxHeight, YELLOW);
 800295c:	7b3b      	ldrb	r3, [r7, #12]
 800295e:	b298      	uxth	r0, r3
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	b299      	uxth	r1, r3
 8002964:	7b3b      	ldrb	r3, [r7, #12]
 8002966:	b29a      	uxth	r2, r3
 8002968:	7a7b      	ldrb	r3, [r7, #9]
 800296a:	b29b      	uxth	r3, r3
 800296c:	4413      	add	r3, r2
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b7d      	ldr	r3, [pc, #500]	; (8002b68 <bottomBarScreen+0x2d8>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8002978:	9400      	str	r4, [sp, #0]
 800297a:	f002 fe9d 	bl	80056b8 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth3, bottomHeight, bottomWidth3 + bottomWidth, maxHeight, CYAN);
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	b298      	uxth	r0, r3
 8002982:	7bbb      	ldrb	r3, [r7, #14]
 8002984:	b299      	uxth	r1, r3
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	b29a      	uxth	r2, r3
 800298a:	7a7b      	ldrb	r3, [r7, #9]
 800298c:	b29b      	uxth	r3, r3
 800298e:	4413      	add	r3, r2
 8002990:	b29a      	uxth	r2, r3
 8002992:	4b75      	ldr	r3, [pc, #468]	; (8002b68 <bottomBarScreen+0x2d8>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	f240 74ff 	movw	r4, #2047	; 0x7ff
 800299a:	9400      	str	r4, [sp, #0]
 800299c:	f002 fe8c 	bl	80056b8 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(bottomWidth4, bottomHeight, bottomWidth4 + bottomWidth, maxHeight, GREEN);
 80029a0:	7abb      	ldrb	r3, [r7, #10]
 80029a2:	b298      	uxth	r0, r3
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	b299      	uxth	r1, r3
 80029a8:	7abb      	ldrb	r3, [r7, #10]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <bottomBarScreen+0x2d8>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80029bc:	9400      	str	r4, [sp, #0]
 80029be:	f002 fe7b 	bl	80056b8 <ILI9341_Draw_Filled_Rectangle_Coord>

	//Text Layout
	sprintf(Temp_Buffer_text, "MOD");
 80029c2:	496b      	ldr	r1, [pc, #428]	; (8002b70 <bottomBarScreen+0x2e0>)
 80029c4:	486b      	ldr	r0, [pc, #428]	; (8002b74 <bottomBarScreen+0x2e4>)
 80029c6:	f009 fcb5 	bl	800c334 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.9, BLACK, size, RED);
 80029ca:	4b6b      	ldr	r3, [pc, #428]	; (8002b78 <bottomBarScreen+0x2e8>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b2d9      	uxtb	r1, r3
 80029d0:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <bottomBarScreen+0x2d8>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029dc:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002b60 <bottomBarScreen+0x2d0>
 80029e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80029ec:	793b      	ldrb	r3, [r7, #4]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80029f8:	9001      	str	r0, [sp, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2300      	movs	r3, #0
 80029fe:	485d      	ldr	r0, [pc, #372]	; (8002b74 <bottomBarScreen+0x2e4>)
 8002a00:	f002 ff54 	bl	80058ac <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "ADJ");
 8002a04:	495d      	ldr	r1, [pc, #372]	; (8002b7c <bottomBarScreen+0x2ec>)
 8002a06:	485b      	ldr	r0, [pc, #364]	; (8002b74 <bottomBarScreen+0x2e4>)
 8002a08:	f009 fc94 	bl	800c334 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.25 + offsetWidth, maxHeight * 0.9, BLACK, size, YELLOW);
 8002a0c:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <bottomBarScreen+0x2dc>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a18:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002a1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a20:	4b55      	ldr	r3, [pc, #340]	; (8002b78 <bottomBarScreen+0x2e8>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a34:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a38:	793b      	ldrb	r3, [r7, #4]
 8002a3a:	b2d9      	uxtb	r1, r3
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <bottomBarScreen+0x2d8>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a48:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002b60 <bottomBarScreen+0x2d0>
 8002a4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a50:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a54:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a58:	793b      	ldrb	r3, [r7, #4]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002a64:	9001      	str	r0, [sp, #4]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	4842      	ldr	r0, [pc, #264]	; (8002b74 <bottomBarScreen+0x2e4>)
 8002a6c:	f002 ff1e 	bl	80058ac <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "FWD");
 8002a70:	4943      	ldr	r1, [pc, #268]	; (8002b80 <bottomBarScreen+0x2f0>)
 8002a72:	4840      	ldr	r0, [pc, #256]	; (8002b74 <bottomBarScreen+0x2e4>)
 8002a74:	f009 fc5e 	bl	800c334 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.5 + offsetWidth, maxHeight * 0.9, BLACK, size, CYAN);
 8002a78:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <bottomBarScreen+0x2dc>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a84:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002a88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a8c:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <bottomBarScreen+0x2e8>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002aa0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002aa4:	793b      	ldrb	r3, [r7, #4]
 8002aa6:	b2d9      	uxtb	r1, r3
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <bottomBarScreen+0x2d8>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ab4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002b60 <bottomBarScreen+0x2d0>
 8002ab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002abc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ac0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ac4:	793b      	ldrb	r3, [r7, #4]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002ad0:	9001      	str	r0, [sp, #4]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	4827      	ldr	r0, [pc, #156]	; (8002b74 <bottomBarScreen+0x2e4>)
 8002ad8:	f002 fee8 	bl	80058ac <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "BWD");
 8002adc:	4929      	ldr	r1, [pc, #164]	; (8002b84 <bottomBarScreen+0x2f4>)
 8002ade:	4825      	ldr	r0, [pc, #148]	; (8002b74 <bottomBarScreen+0x2e4>)
 8002ae0:	f009 fc28 	bl	800c334 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.75 + offsetWidth, maxHeight * 0.9, BLACK, size, GREEN);
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <bottomBarScreen+0x2dc>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002af0:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002af4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <bottomBarScreen+0x2e8>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b10:	793b      	ldrb	r3, [r7, #4]
 8002b12:	b2d9      	uxtb	r1, r3
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <bottomBarScreen+0x2d8>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b20:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002b60 <bottomBarScreen+0x2d0>
 8002b24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b30:	793b      	ldrb	r3, [r7, #4]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002b3c:	9001      	str	r0, [sp, #4]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2300      	movs	r3, #0
 8002b42:	480c      	ldr	r0, [pc, #48]	; (8002b74 <bottomBarScreen+0x2e4>)
 8002b44:	f002 feb2 	bl	80058ac <ILI9341_Draw_Text>
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	3d70a3d7 	.word	0x3d70a3d7
 8002b54:	3febd70a 	.word	0x3febd70a
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40498000 	.word	0x40498000
 8002b60:	cccccccd 	.word	0xcccccccd
 8002b64:	3feccccc 	.word	0x3feccccc
 8002b68:	20000056 	.word	0x20000056
 8002b6c:	20000052 	.word	0x20000052
 8002b70:	0800e75c 	.word	0x0800e75c
 8002b74:	20000470 	.word	0x20000470
 8002b78:	20000054 	.word	0x20000054
 8002b7c:	0800e760 	.word	0x0800e760
 8002b80:	0800e764 	.word	0x0800e764
 8002b84:	0800e768 	.word	0x0800e768

08002b88 <bottomBarScreenUpdate>:
void bottomBarScreenUpdate(){
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af02      	add	r7, sp, #8

	uint8_t size = 2;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	73fb      	strb	r3, [r7, #15]
	uint8_t bottomWidth1 = maxWidth * 0 + 51;
 8002b92:	2333      	movs	r3, #51	; 0x33
 8002b94:	73bb      	strb	r3, [r7, #14]
	uint8_t bottomHeight = maxHeight * 0.87;
 8002b96:	4bc6      	ldr	r3, [pc, #792]	; (8002eb0 <bottomBarScreenUpdate+0x328>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ba2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8002e88 <bottomBarScreenUpdate+0x300>
 8002ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002baa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bae:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bb2:	793b      	ldrb	r3, [r7, #4]
 8002bb4:	737b      	strb	r3, [r7, #13]
	uint8_t bottomWidth4 = maxWidth * 0.75 + 51;
 8002bb6:	4bbf      	ldr	r3, [pc, #764]	; (8002eb4 <bottomBarScreenUpdate+0x32c>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bc2:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8002bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bca:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8002e90 <bottomBarScreenUpdate+0x308>
 8002bce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bda:	793b      	ldrb	r3, [r7, #4]
 8002bdc:	733b      	strb	r3, [r7, #12]
	uint8_t bottomWidth = 55;
 8002bde:	2337      	movs	r3, #55	; 0x37
 8002be0:	72fb      	strb	r3, [r7, #11]

	//Update Temperature
	if(prevTemp != temp){
 8002be2:	4bb5      	ldr	r3, [pc, #724]	; (8002eb8 <bottomBarScreenUpdate+0x330>)
 8002be4:	ed93 7a00 	vldr	s14, [r3]
 8002be8:	4bb4      	ldr	r3, [pc, #720]	; (8002ebc <bottomBarScreenUpdate+0x334>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	eeb4 7a67 	vcmp.f32	s14, s15
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	d059      	beq.n	8002cac <bottomBarScreenUpdate+0x124>
		sprintf(Temp_Buffer_text, "%0.1f 'C", temp);
 8002bf8:	4bb0      	ldr	r3, [pc, #704]	; (8002ebc <bottomBarScreenUpdate+0x334>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c02:	ec53 2b17 	vmov	r2, r3, d7
 8002c06:	49ae      	ldr	r1, [pc, #696]	; (8002ec0 <bottomBarScreenUpdate+0x338>)
 8002c08:	48ae      	ldr	r0, [pc, #696]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002c0a:	f009 fb93 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002c0e:	4ba9      	ldr	r3, [pc, #676]	; (8002eb4 <bottomBarScreenUpdate+0x32c>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c1a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8002e98 <bottomBarScreenUpdate+0x310>
 8002c1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c22:	4ba9      	ldr	r3, [pc, #676]	; (8002ec8 <bottomBarScreenUpdate+0x340>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c36:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c3a:	793b      	ldrb	r3, [r7, #4]
 8002c3c:	b2d9      	uxtb	r1, r3
 8002c3e:	4b9c      	ldr	r3, [pc, #624]	; (8002eb0 <bottomBarScreenUpdate+0x328>)
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c4a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002ea0 <bottomBarScreenUpdate+0x318>
 8002c4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002c56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c62:	793b      	ldrb	r3, [r7, #4]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	9001      	str	r0, [sp, #4]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c74:	4893      	ldr	r0, [pc, #588]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002c76:	f002 fe19 	bl	80058ac <ILI9341_Draw_Text>
		prevTemp = temp;
 8002c7a:	4b90      	ldr	r3, [pc, #576]	; (8002ebc <bottomBarScreenUpdate+0x334>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a8e      	ldr	r2, [pc, #568]	; (8002eb8 <bottomBarScreenUpdate+0x330>)
 8002c80:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002c82:	7bbb      	ldrb	r3, [r7, #14]
 8002c84:	b298      	uxth	r0, r3
 8002c86:	7b7b      	ldrb	r3, [r7, #13]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b37      	subs	r3, #55	; 0x37
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	7b3b      	ldrb	r3, [r7, #12]
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	7afb      	ldrb	r3, [r7, #11]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <bottomBarScreenUpdate+0x328>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	3b3e      	subs	r3, #62	; 0x3e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002ca6:	9400      	str	r4, [sp, #0]
 8002ca8:	f002 fc85 	bl	80055b6 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update Humidity
	if(prevHumid != humid){
 8002cac:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <bottomBarScreenUpdate+0x344>)
 8002cae:	ed93 7a00 	vldr	s14, [r3]
 8002cb2:	4b87      	ldr	r3, [pc, #540]	; (8002ed0 <bottomBarScreenUpdate+0x348>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d059      	beq.n	8002d76 <bottomBarScreenUpdate+0x1ee>
		sprintf(Temp_Buffer_text, "%0.1f %%", humid);
 8002cc2:	4b83      	ldr	r3, [pc, #524]	; (8002ed0 <bottomBarScreenUpdate+0x348>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ccc:	ec53 2b17 	vmov	r2, r3, d7
 8002cd0:	4980      	ldr	r1, [pc, #512]	; (8002ed4 <bottomBarScreenUpdate+0x34c>)
 8002cd2:	487c      	ldr	r0, [pc, #496]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002cd4:	f009 fb2e 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.55 + offsetWidth, maxHeight * 0.7-10, WHITE, size, BLACK);
 8002cd8:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <bottomBarScreenUpdate+0x32c>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ce4:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002ea8 <bottomBarScreenUpdate+0x320>
 8002ce8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002cec:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <bottomBarScreenUpdate+0x340>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cf8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cfc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d00:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d04:	793b      	ldrb	r3, [r7, #4]
 8002d06:	b2d9      	uxtb	r1, r3
 8002d08:	4b69      	ldr	r3, [pc, #420]	; (8002eb0 <bottomBarScreenUpdate+0x328>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d14:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002ea0 <bottomBarScreenUpdate+0x318>
 8002d18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d1c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002d20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d28:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d2c:	793b      	ldrb	r3, [r7, #4]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2000      	movs	r0, #0
 8002d36:	9001      	str	r0, [sp, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3e:	4861      	ldr	r0, [pc, #388]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002d40:	f002 fdb4 	bl	80058ac <ILI9341_Draw_Text>
		prevHumid = humid;
 8002d44:	4b62      	ldr	r3, [pc, #392]	; (8002ed0 <bottomBarScreenUpdate+0x348>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <bottomBarScreenUpdate+0x344>)
 8002d4a:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45-10, bottomWidth4 + bottomWidth, maxHeight-52-10, WHITE);
 8002d4c:	7bbb      	ldrb	r3, [r7, #14]
 8002d4e:	b298      	uxth	r0, r3
 8002d50:	7b7b      	ldrb	r3, [r7, #13]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b37      	subs	r3, #55	; 0x37
 8002d56:	b299      	uxth	r1, r3
 8002d58:	7b3b      	ldrb	r3, [r7, #12]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <bottomBarScreenUpdate+0x328>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	3b3e      	subs	r3, #62	; 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002d70:	9400      	str	r4, [sp, #0]
 8002d72:	f002 fc20 	bl	80055b6 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
	//Update PM2.5
	if(prevPmTwoPointFive != pmTwoPointFive){ // update this value please
 8002d76:	4b58      	ldr	r3, [pc, #352]	; (8002ed8 <bottomBarScreenUpdate+0x350>)
 8002d78:	ed93 7a00 	vldr	s14, [r3]
 8002d7c:	4b57      	ldr	r3, [pc, #348]	; (8002edc <bottomBarScreenUpdate+0x354>)
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	f000 80c6 	beq.w	8002f1a <bottomBarScreenUpdate+0x392>
		sprintf(Temp_Buffer_text, "      %03d ug/m^3", (int)pmTwoPointFive);
 8002d8e:	4b53      	ldr	r3, [pc, #332]	; (8002edc <bottomBarScreenUpdate+0x354>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d98:	ee17 2a90 	vmov	r2, s15
 8002d9c:	4950      	ldr	r1, [pc, #320]	; (8002ee0 <bottomBarScreenUpdate+0x358>)
 8002d9e:	4849      	ldr	r0, [pc, #292]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002da0:	f009 fac8 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK); // Change color
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <bottomBarScreenUpdate+0x32c>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002db0:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8002e98 <bottomBarScreenUpdate+0x310>
 8002db4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002db8:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <bottomBarScreenUpdate+0x340>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002dc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002dc8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002dcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002dd0:	793b      	ldrb	r3, [r7, #4]
 8002dd2:	b2d9      	uxtb	r1, r3
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <bottomBarScreenUpdate+0x328>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002de0:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8002ea0 <bottomBarScreenUpdate+0x318>
 8002de4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002de8:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002dec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002df0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002df4:	edc7 7a01 	vstr	s15, [r7, #4]
 8002df8:	793b      	ldrb	r3, [r7, #4]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2000      	movs	r0, #0
 8002e02:	9001      	str	r0, [sp, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e0a:	482e      	ldr	r0, [pc, #184]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002e0c:	f002 fd4e 	bl	80058ac <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, "PM2.5");
 8002e10:	4934      	ldr	r1, [pc, #208]	; (8002ee4 <bottomBarScreenUpdate+0x35c>)
 8002e12:	482c      	ldr	r0, [pc, #176]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002e14:	f009 fa8e 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0.0 + offsetWidth, maxHeight * 0.7+18, WHITE, size, BLACK);
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <bottomBarScreenUpdate+0x32c>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e24:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002e98 <bottomBarScreenUpdate+0x310>
 8002e28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <bottomBarScreenUpdate+0x340>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e40:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e44:	793b      	ldrb	r3, [r7, #4]
 8002e46:	b2d9      	uxtb	r1, r3
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <bottomBarScreenUpdate+0x328>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e54:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002ea0 <bottomBarScreenUpdate+0x318>
 8002e58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e5c:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8002e60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e68:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e6c:	793b      	ldrb	r3, [r7, #4]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2000      	movs	r0, #0
 8002e76:	9001      	str	r0, [sp, #4]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e7e:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <bottomBarScreenUpdate+0x33c>)
 8002e80:	f002 fd14 	bl	80058ac <ILI9341_Draw_Text>
 8002e84:	e030      	b.n	8002ee8 <bottomBarScreenUpdate+0x360>
 8002e86:	bf00      	nop
 8002e88:	3d70a3d7 	.word	0x3d70a3d7
 8002e8c:	3febd70a 	.word	0x3febd70a
 8002e90:	00000000 	.word	0x00000000
 8002e94:	40498000 	.word	0x40498000
	...
 8002ea0:	66666666 	.word	0x66666666
 8002ea4:	3fe66666 	.word	0x3fe66666
 8002ea8:	9999999a 	.word	0x9999999a
 8002eac:	3fe19999 	.word	0x3fe19999
 8002eb0:	20000056 	.word	0x20000056
 8002eb4:	20000052 	.word	0x20000052
 8002eb8:	20000024 	.word	0x20000024
 8002ebc:	20000018 	.word	0x20000018
 8002ec0:	0800e76c 	.word	0x0800e76c
 8002ec4:	20000470 	.word	0x20000470
 8002ec8:	20000054 	.word	0x20000054
 8002ecc:	20000028 	.word	0x20000028
 8002ed0:	2000001c 	.word	0x2000001c
 8002ed4:	0800e778 	.word	0x0800e778
 8002ed8:	2000002c 	.word	0x2000002c
 8002edc:	20000020 	.word	0x20000020
 8002ee0:	0800e784 	.word	0x0800e784
 8002ee4:	0800e798 	.word	0x0800e798

		prevPmTwoPointFive = pmTwoPointFive;
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <bottomBarScreenUpdate+0x39c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <bottomBarScreenUpdate+0x3a0>)
 8002eee:	6013      	str	r3, [r2, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(bottomWidth1, bottomHeight-45+18, bottomWidth4 + bottomWidth, maxHeight-52+18, WHITE);
 8002ef0:	7bbb      	ldrb	r3, [r7, #14]
 8002ef2:	b298      	uxth	r0, r3
 8002ef4:	7b7b      	ldrb	r3, [r7, #13]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b1b      	subs	r3, #27
 8002efa:	b299      	uxth	r1, r3
 8002efc:	7b3b      	ldrb	r3, [r7, #12]
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <bottomBarScreenUpdate+0x3a4>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	3b22      	subs	r3, #34	; 0x22
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002f14:	9400      	str	r4, [sp, #0]
 8002f16:	f002 fb4e 	bl	80055b6 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000020 	.word	0x20000020
 8002f28:	2000002c 	.word	0x2000002c
 8002f2c:	20000056 	.word	0x20000056

08002f30 <buzzerSound>:

//Buzzer Sound
void buzzerSound(uint32_t delay){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR1 = (1000 - 1) * 0.5;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <buzzerSound+0x30>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f42:	2100      	movs	r1, #0
 8002f44:	4806      	ldr	r0, [pc, #24]	; (8002f60 <buzzerSound+0x30>)
 8002f46:	f006 fef7 	bl	8009d38 <HAL_TIM_PWM_Start>
	HAL_Delay(delay);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f003 fa04 	bl	8006358 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002f50:	2100      	movs	r1, #0
 8002f52:	4803      	ldr	r0, [pc, #12]	; (8002f60 <buzzerSound+0x30>)
 8002f54:	f006 ffea 	bl	8009f2c <HAL_TIM_PWM_Stop>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000548 	.word	0x20000548

08002f64 <notifyPm>:

void notifyPm(){
 8002f64:	b5b0      	push	{r4, r5, r7, lr}
 8002f66:	ed2d 8b06 	vpush	{d8-d10}
 8002f6a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8002f6e:	af14      	add	r7, sp, #80	; 0x50
	float *respondRead;
	respondRead = read_sensirion();
 8002f70:	f7fd fffa 	bl	8000f68 <read_sensirion>
 8002f74:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002f78:	4b72      	ldr	r3, [pc, #456]	; (8003144 <notifyPm+0x1e0>)
 8002f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f7e:	4b72      	ldr	r3, [pc, #456]	; (8003148 <notifyPm+0x1e4>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	1a84      	subs	r4, r0, r2
 8002f86:	eb61 0503 	sbc.w	r5, r1, r3
 8002f8a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	42ab      	cmp	r3, r5
 8002f94:	bf08      	it	eq
 8002f96:	42a2      	cmpeq	r2, r4
 8002f98:	f080 80cd 	bcs.w	8003136 <notifyPm+0x1d2>
 8002f9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	da00      	bge.n	8002fb2 <notifyPm+0x4e>
			println("Normal Air");
		}

		pmPrevMillisecondHAL = millisecondHAL;
	}
}
 8002fb0:	e0c1      	b.n	8003136 <notifyPm+0x1d2>
	if(millisecondHAL - pmPrevMillisecondHAL >= 20000 && respondRead[1] >= 0 && respondRead[1] <= 9999){
 8002fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800314c <notifyPm+0x1e8>
 8002fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc8:	d900      	bls.n	8002fcc <notifyPm+0x68>
}
 8002fca:	e0b4      	b.n	8003136 <notifyPm+0x1d2>
		if(respondRead[1]>=250){
 8002fcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003150 <notifyPm+0x1ec>
 8002fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	db03      	blt.n	8002fec <notifyPm+0x88>
			sent_string_to_mcu("HAZ");
 8002fe4:	485b      	ldr	r0, [pc, #364]	; (8003154 <notifyPm+0x1f0>)
 8002fe6:	f7fe f8b1 	bl	800114c <sent_string_to_mcu>
 8002fea:	e01e      	b.n	800302a <notifyPm+0xc6>
		else if(respondRead[1]>=150){
 8002fec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003158 <notifyPm+0x1f4>
 8002ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	db03      	blt.n	800300c <notifyPm+0xa8>
			sent_string_to_mcu("VUH");
 8003004:	4855      	ldr	r0, [pc, #340]	; (800315c <notifyPm+0x1f8>)
 8003006:	f7fe f8a1 	bl	800114c <sent_string_to_mcu>
 800300a:	e00e      	b.n	800302a <notifyPm+0xc6>
		else if(respondRead[1]>=55){
 800300c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003010:	3304      	adds	r3, #4
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003160 <notifyPm+0x1fc>
 800301a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	db02      	blt.n	800302a <notifyPm+0xc6>
			sent_string_to_mcu("UHT");
 8003024:	484f      	ldr	r0, [pc, #316]	; (8003164 <notifyPm+0x200>)
 8003026:	f7fe f891 	bl	800114c <sent_string_to_mcu>
		if(respondRead[1]>=55){
 800302a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800302e:	3304      	adds	r3, #4
 8003030:	edd3 7a00 	vldr	s15, [r3]
 8003034:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003160 <notifyPm+0x1fc>
 8003038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	db70      	blt.n	8003124 <notifyPm+0x1c0>
			println("Danger Air");
 8003042:	4849      	ldr	r0, [pc, #292]	; (8003168 <notifyPm+0x204>)
 8003044:	f7fd ff26 	bl	8000e94 <println>
			println("Sending");
 8003048:	4848      	ldr	r0, [pc, #288]	; (800316c <notifyPm+0x208>)
 800304a:	f7fd ff23 	bl	8000e94 <println>
			sprintf(stringBuffer, "EXC %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f" , respondRead[0], respondRead[1], respondRead[2], respondRead[3], respondRead[4], respondRead[5], respondRead[6], respondRead[7], respondRead[8], respondRead[9], respondRead[10]);
 800304e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800305a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800305e:	3304      	adds	r3, #4
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003068:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800306c:	3308      	adds	r3, #8
 800306e:	edd3 6a00 	vldr	s13, [r3]
 8003072:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003076:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800307a:	330c      	adds	r3, #12
 800307c:	edd3 5a00 	vldr	s11, [r3]
 8003080:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8003084:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003088:	3310      	adds	r3, #16
 800308a:	edd3 4a00 	vldr	s9, [r3]
 800308e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8003092:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003096:	3314      	adds	r3, #20
 8003098:	edd3 3a00 	vldr	s7, [r3]
 800309c:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80030a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030a4:	3318      	adds	r3, #24
 80030a6:	edd3 2a00 	vldr	s5, [r3]
 80030aa:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80030ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030b2:	331c      	adds	r3, #28
 80030b4:	edd3 1a00 	vldr	s3, [r3]
 80030b8:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80030bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030c0:	3320      	adds	r3, #32
 80030c2:	edd3 0a00 	vldr	s1, [r3]
 80030c6:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80030ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030ce:	3324      	adds	r3, #36	; 0x24
 80030d0:	ed93 8a00 	vldr	s16, [r3]
 80030d4:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80030d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030dc:	3328      	adds	r3, #40	; 0x28
 80030de:	ed93 9a00 	vldr	s18, [r3]
 80030e2:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 80030e6:	4638      	mov	r0, r7
 80030e8:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 80030ec:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 80030f0:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 80030f4:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 80030f8:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 80030fc:	ed8d 3b08 	vstr	d3, [sp, #32]
 8003100:	ed8d 4b06 	vstr	d4, [sp, #24]
 8003104:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003108:	ed8d 6b02 	vstr	d6, [sp, #8]
 800310c:	ed8d 7b00 	vstr	d7, [sp]
 8003110:	ec53 2b1a 	vmov	r2, r3, d10
 8003114:	4916      	ldr	r1, [pc, #88]	; (8003170 <notifyPm+0x20c>)
 8003116:	f009 f90d 	bl	800c334 <siprintf>
			sent_string_to_mcu(stringBuffer);
 800311a:	463b      	mov	r3, r7
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f815 	bl	800114c <sent_string_to_mcu>
 8003122:	e002      	b.n	800312a <notifyPm+0x1c6>
			println("Normal Air");
 8003124:	4813      	ldr	r0, [pc, #76]	; (8003174 <notifyPm+0x210>)
 8003126:	f7fd feb5 	bl	8000e94 <println>
		pmPrevMillisecondHAL = millisecondHAL;
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <notifyPm+0x1e0>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	4905      	ldr	r1, [pc, #20]	; (8003148 <notifyPm+0x1e4>)
 8003132:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003136:	bf00      	nop
 8003138:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 800313c:	46bd      	mov	sp, r7
 800313e:	ecbd 8b06 	vpop	{d8-d10}
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	200002f8 	.word	0x200002f8
 8003148:	20000300 	.word	0x20000300
 800314c:	461c3c00 	.word	0x461c3c00
 8003150:	437a0000 	.word	0x437a0000
 8003154:	0800e7a0 	.word	0x0800e7a0
 8003158:	43160000 	.word	0x43160000
 800315c:	0800e7a4 	.word	0x0800e7a4
 8003160:	425c0000 	.word	0x425c0000
 8003164:	0800e7a8 	.word	0x0800e7a8
 8003168:	0800e7ac 	.word	0x0800e7ac
 800316c:	0800e7b8 	.word	0x0800e7b8
 8003170:	0800e7c0 	.word	0x0800e7c0
 8003174:	0800e7f8 	.word	0x0800e7f8

08003178 <resisterMonitor>:

void resisterMonitor(){
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0

	  float dutyCycleScreen = 0.0;
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	607b      	str	r3, [r7, #4]
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 8003184:	bf00      	nop
 8003186:	2164      	movs	r1, #100	; 0x64
 8003188:	4829      	ldr	r0, [pc, #164]	; (8003230 <resisterMonitor+0xb8>)
 800318a:	f003 fa1b 	bl	80065c4 <HAL_ADC_PollForConversion>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f8      	bne.n	8003186 <resisterMonitor+0xe>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 8003194:	4826      	ldr	r0, [pc, #152]	; (8003230 <resisterMonitor+0xb8>)
 8003196:	f003 faa0 	bl	80066da <HAL_ADC_GetValue>
 800319a:	4603      	mov	r3, r0
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <resisterMonitor+0xbc>)
 800319e:	6013      	str	r3, [r2, #0]
	  lightPercent = adc_val*100 / 4095;
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <resisterMonitor+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2264      	movs	r2, #100	; 0x64
 80031a6:	fb02 f203 	mul.w	r2, r2, r3
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <resisterMonitor+0xc0>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	0852      	lsrs	r2, r2, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	0adb      	lsrs	r3, r3, #11
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <resisterMonitor+0xc4>)
 80031bc:	601a      	str	r2, [r3, #0]

	  //Change Screen Light Output
	  //PWM
	  dutyCycleScreen = ((adc_val/4095.0) * 0.8) + 0.2;
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <resisterMonitor+0xbc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80031ca:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8003218 <resisterMonitor+0xa0>
 80031ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80031d2:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003220 <resisterMonitor+0xa8>
 80031d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031da:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003228 <resisterMonitor+0xb0>
 80031de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031e6:	edc7 7a01 	vstr	s15, [r7, #4]
	  //No. 2
	  htim3.Instance -> CCR1 = (1000-1) * dutyCycleScreen;
 80031ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003240 <resisterMonitor+0xc8>
 80031f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <resisterMonitor+0xcc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fe:	ee17 2a90 	vmov	r2, s15
 8003202:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003204:	2100      	movs	r1, #0
 8003206:	480f      	ldr	r0, [pc, #60]	; (8003244 <resisterMonitor+0xcc>)
 8003208:	f006 fd96 	bl	8009d38 <HAL_TIM_PWM_Start>
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	f3af 8000 	nop.w
 8003218:	00000000 	.word	0x00000000
 800321c:	40affe00 	.word	0x40affe00
 8003220:	9999999a 	.word	0x9999999a
 8003224:	3fe99999 	.word	0x3fe99999
 8003228:	9999999a 	.word	0x9999999a
 800322c:	3fc99999 	.word	0x3fc99999
 8003230:	2000039c 	.word	0x2000039c
 8003234:	200002e0 	.word	0x200002e0
 8003238:	00100101 	.word	0x00100101
 800323c:	20000014 	.word	0x20000014
 8003240:	4479c000 	.word	0x4479c000
 8003244:	20000548 	.word	0x20000548

08003248 <resetPrevStopWatch>:
//State
bool initialStopWatchScreen = false;
bool isStopWatchRunning = false;


void resetPrevStopWatch(){
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
	prevStopWatchHour = -1;
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <resetPrevStopWatch+0x30>)
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	601a      	str	r2, [r3, #0]
	prevStopWatchMinute = -1;
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <resetPrevStopWatch+0x34>)
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	601a      	str	r2, [r3, #0]
	prevStopWatchSecond = -1;
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <resetPrevStopWatch+0x38>)
 800325e:	f04f 32ff 	mov.w	r2, #4294967295
 8003262:	601a      	str	r2, [r3, #0]
	prevStopWatchMillisecond = -1;
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <resetPrevStopWatch+0x3c>)
 8003266:	f04f 32ff 	mov.w	r2, #4294967295
 800326a:	601a      	str	r2, [r3, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	200000bc 	.word	0x200000bc
 800327c:	200000c0 	.word	0x200000c0
 8003280:	200000c4 	.word	0x200000c4
 8003284:	200000c8 	.word	0x200000c8

08003288 <resetStopWatch>:
void resetStopWatch(){
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	stopWatchHour = 0;
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <resetStopWatch+0x24>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
	stopWatchMinute = 0;
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <resetStopWatch+0x28>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
	stopWatchSecond = 0;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <resetStopWatch+0x2c>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
	stopWatchMillisecond = 0;
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <resetStopWatch+0x30>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
	resetPrevStopWatch();
 80032a4:	f7ff ffd0 	bl	8003248 <resetPrevStopWatch>
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000308 	.word	0x20000308
 80032b0:	2000030c 	.word	0x2000030c
 80032b4:	20000310 	.word	0x20000310
 80032b8:	20000314 	.word	0x20000314
 80032bc:	00000000 	.word	0x00000000

080032c0 <displayStopWatchScreen>:

void displayStopWatchScreen(){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af02      	add	r7, sp, #8
	if(stopWatchHour < 1){ // Normal StopWatch Mode
 80032c6:	4ba8      	ldr	r3, [pc, #672]	; (8003568 <displayStopWatchScreen+0x2a8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f300 80a8 	bgt.w	8003420 <displayStopWatchScreen+0x160>
		if(prevStopWatchMinute != stopWatchMinute){
 80032d0:	4ba6      	ldr	r3, [pc, #664]	; (800356c <displayStopWatchScreen+0x2ac>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4ba6      	ldr	r3, [pc, #664]	; (8003570 <displayStopWatchScreen+0x2b0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d02a      	beq.n	8003332 <displayStopWatchScreen+0x72>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 80032dc:	4ba4      	ldr	r3, [pc, #656]	; (8003570 <displayStopWatchScreen+0x2b0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	49a4      	ldr	r1, [pc, #656]	; (8003574 <displayStopWatchScreen+0x2b4>)
 80032e4:	48a4      	ldr	r0, [pc, #656]	; (8003578 <displayStopWatchScreen+0x2b8>)
 80032e6:	f009 f825 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80032ea:	4ba4      	ldr	r3, [pc, #656]	; (800357c <displayStopWatchScreen+0x2bc>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b2d9      	uxtb	r1, r3
 80032f0:	4ba3      	ldr	r3, [pc, #652]	; (8003580 <displayStopWatchScreen+0x2c0>)
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80032fc:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8003560 <displayStopWatchScreen+0x2a0>
 8003300:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003304:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003308:	ee37 7b06 	vadd.f64	d7, d7, d6
 800330c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003310:	edc7 7a01 	vstr	s15, [r7, #4]
 8003314:	793b      	ldrb	r3, [r7, #4]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	2300      	movs	r3, #0
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	2305      	movs	r3, #5
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003324:	4894      	ldr	r0, [pc, #592]	; (8003578 <displayStopWatchScreen+0x2b8>)
 8003326:	f002 fac1 	bl	80058ac <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 800332a:	4b91      	ldr	r3, [pc, #580]	; (8003570 <displayStopWatchScreen+0x2b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a8f      	ldr	r2, [pc, #572]	; (800356c <displayStopWatchScreen+0x2ac>)
 8003330:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchSecond != stopWatchSecond){
 8003332:	4b94      	ldr	r3, [pc, #592]	; (8003584 <displayStopWatchScreen+0x2c4>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b94      	ldr	r3, [pc, #592]	; (8003588 <displayStopWatchScreen+0x2c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d02c      	beq.n	8003398 <displayStopWatchScreen+0xd8>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 800333e:	4b92      	ldr	r3, [pc, #584]	; (8003588 <displayStopWatchScreen+0x2c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	498b      	ldr	r1, [pc, #556]	; (8003574 <displayStopWatchScreen+0x2b4>)
 8003346:	488c      	ldr	r0, [pc, #560]	; (8003578 <displayStopWatchScreen+0x2b8>)
 8003348:	f008 fff4 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800334c:	4b8b      	ldr	r3, [pc, #556]	; (800357c <displayStopWatchScreen+0x2bc>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	3346      	adds	r3, #70	; 0x46
 8003354:	b2d9      	uxtb	r1, r3
 8003356:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <displayStopWatchScreen+0x2c0>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003362:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8003560 <displayStopWatchScreen+0x2a0>
 8003366:	ee27 7b06 	vmul.f64	d7, d7, d6
 800336a:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800336e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003372:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003376:	edc7 7a01 	vstr	s15, [r7, #4]
 800337a:	793b      	ldrb	r3, [r7, #4]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	2300      	movs	r3, #0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2305      	movs	r3, #5
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800338a:	487b      	ldr	r0, [pc, #492]	; (8003578 <displayStopWatchScreen+0x2b8>)
 800338c:	f002 fa8e 	bl	80058ac <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8003390:	4b7d      	ldr	r3, [pc, #500]	; (8003588 <displayStopWatchScreen+0x2c8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7b      	ldr	r2, [pc, #492]	; (8003584 <displayStopWatchScreen+0x2c4>)
 8003396:	6013      	str	r3, [r2, #0]
		}
		if(prevStopWatchMillisecond != stopWatchMillisecond){
 8003398:	4b7c      	ldr	r3, [pc, #496]	; (800358c <displayStopWatchScreen+0x2cc>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <displayStopWatchScreen+0x2d0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f000 80d9 	beq.w	8003558 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)((stopWatchMillisecond/10)%100));
 80033a6:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <displayStopWatchScreen+0x2d0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7a      	ldr	r2, [pc, #488]	; (8003594 <displayStopWatchScreen+0x2d4>)
 80033ac:	fb82 1203 	smull	r1, r2, r2, r3
 80033b0:	1092      	asrs	r2, r2, #2
 80033b2:	17db      	asrs	r3, r3, #31
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	4a78      	ldr	r2, [pc, #480]	; (8003598 <displayStopWatchScreen+0x2d8>)
 80033b8:	fb82 1203 	smull	r1, r2, r2, r3
 80033bc:	1151      	asrs	r1, r2, #5
 80033be:	17da      	asrs	r2, r3, #31
 80033c0:	1a8a      	subs	r2, r1, r2
 80033c2:	2164      	movs	r1, #100	; 0x64
 80033c4:	fb01 f202 	mul.w	r2, r1, r2
 80033c8:	1a9a      	subs	r2, r3, r2
 80033ca:	496a      	ldr	r1, [pc, #424]	; (8003574 <displayStopWatchScreen+0x2b4>)
 80033cc:	486a      	ldr	r0, [pc, #424]	; (8003578 <displayStopWatchScreen+0x2b8>)
 80033ce:	f008 ffb1 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80033d2:	4b6a      	ldr	r3, [pc, #424]	; (800357c <displayStopWatchScreen+0x2bc>)
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3b74      	subs	r3, #116	; 0x74
 80033da:	b2d9      	uxtb	r1, r3
 80033dc:	4b68      	ldr	r3, [pc, #416]	; (8003580 <displayStopWatchScreen+0x2c0>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033e8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8003560 <displayStopWatchScreen+0x2a0>
 80033ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033f0:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80033f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8003400:	793b      	ldrb	r3, [r7, #4]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	2300      	movs	r3, #0
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	2305      	movs	r3, #5
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003410:	4859      	ldr	r0, [pc, #356]	; (8003578 <displayStopWatchScreen+0x2b8>)
 8003412:	f002 fa4b 	bl	80058ac <ILI9341_Draw_Text>
			prevStopWatchMillisecond = stopWatchMillisecond;
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <displayStopWatchScreen+0x2d0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5c      	ldr	r2, [pc, #368]	; (800358c <displayStopWatchScreen+0x2cc>)
 800341c:	6013      	str	r3, [r2, #0]
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
			prevStopWatchSecond = stopWatchSecond;
		}
	}
}
 800341e:	e09b      	b.n	8003558 <displayStopWatchScreen+0x298>
	}else if (stopWatchHour >= 1){ // counting more than equal to 1 hour
 8003420:	4b51      	ldr	r3, [pc, #324]	; (8003568 <displayStopWatchScreen+0x2a8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f340 8097 	ble.w	8003558 <displayStopWatchScreen+0x298>
		if(prevStopWatchHour != stopWatchHour){
 800342a:	4b5c      	ldr	r3, [pc, #368]	; (800359c <displayStopWatchScreen+0x2dc>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <displayStopWatchScreen+0x2a8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d02a      	beq.n	800348c <displayStopWatchScreen+0x1cc>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchHour);
 8003436:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <displayStopWatchScreen+0x2a8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	494d      	ldr	r1, [pc, #308]	; (8003574 <displayStopWatchScreen+0x2b4>)
 800343e:	484e      	ldr	r0, [pc, #312]	; (8003578 <displayStopWatchScreen+0x2b8>)
 8003440:	f008 ff78 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth, maxHeight * 0.35+16, WHITE, 5, BLACK);
 8003444:	4b4d      	ldr	r3, [pc, #308]	; (800357c <displayStopWatchScreen+0x2bc>)
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b2d9      	uxtb	r1, r3
 800344a:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <displayStopWatchScreen+0x2c0>)
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003456:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8003560 <displayStopWatchScreen+0x2a0>
 800345a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800345e:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003462:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003466:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800346a:	edc7 7a01 	vstr	s15, [r7, #4]
 800346e:	793b      	ldrb	r3, [r7, #4]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	2300      	movs	r3, #0
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2305      	movs	r3, #5
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800347e:	483e      	ldr	r0, [pc, #248]	; (8003578 <displayStopWatchScreen+0x2b8>)
 8003480:	f002 fa14 	bl	80058ac <ILI9341_Draw_Text>
			prevStopWatchHour = stopWatchHour;
 8003484:	4b38      	ldr	r3, [pc, #224]	; (8003568 <displayStopWatchScreen+0x2a8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a44      	ldr	r2, [pc, #272]	; (800359c <displayStopWatchScreen+0x2dc>)
 800348a:	6013      	str	r3, [r2, #0]
		if(prevStopWatchMinute != stopWatchMinute){
 800348c:	4b37      	ldr	r3, [pc, #220]	; (800356c <displayStopWatchScreen+0x2ac>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b37      	ldr	r3, [pc, #220]	; (8003570 <displayStopWatchScreen+0x2b0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d02c      	beq.n	80034f2 <displayStopWatchScreen+0x232>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchMinute);
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <displayStopWatchScreen+0x2b0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4935      	ldr	r1, [pc, #212]	; (8003574 <displayStopWatchScreen+0x2b4>)
 80034a0:	4835      	ldr	r0, [pc, #212]	; (8003578 <displayStopWatchScreen+0x2b8>)
 80034a2:	f008 ff47 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+70, maxHeight * 0.35+16, WHITE, 5, BLACK);
 80034a6:	4b35      	ldr	r3, [pc, #212]	; (800357c <displayStopWatchScreen+0x2bc>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3346      	adds	r3, #70	; 0x46
 80034ae:	b2d9      	uxtb	r1, r3
 80034b0:	4b33      	ldr	r3, [pc, #204]	; (8003580 <displayStopWatchScreen+0x2c0>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034bc:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8003560 <displayStopWatchScreen+0x2a0>
 80034c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034c4:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80034c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80034d4:	793b      	ldrb	r3, [r7, #4]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	2300      	movs	r3, #0
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	2305      	movs	r3, #5
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034e4:	4824      	ldr	r0, [pc, #144]	; (8003578 <displayStopWatchScreen+0x2b8>)
 80034e6:	f002 f9e1 	bl	80058ac <ILI9341_Draw_Text>
			prevStopWatchMinute = stopWatchMinute;
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <displayStopWatchScreen+0x2b0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <displayStopWatchScreen+0x2ac>)
 80034f0:	6013      	str	r3, [r2, #0]
		if(prevStopWatchSecond != stopWatchSecond){
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <displayStopWatchScreen+0x2c4>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <displayStopWatchScreen+0x2c8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d02c      	beq.n	8003558 <displayStopWatchScreen+0x298>
			sprintf(Temp_Buffer_text, "%02d", (int)stopWatchSecond);
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <displayStopWatchScreen+0x2c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	491b      	ldr	r1, [pc, #108]	; (8003574 <displayStopWatchScreen+0x2b4>)
 8003506:	481c      	ldr	r0, [pc, #112]	; (8003578 <displayStopWatchScreen+0x2b8>)
 8003508:	f008 ff14 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+140, maxHeight * 0.35+16, WHITE, 5, BLACK);
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <displayStopWatchScreen+0x2bc>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3b74      	subs	r3, #116	; 0x74
 8003514:	b2d9      	uxtb	r1, r3
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <displayStopWatchScreen+0x2c0>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003522:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003560 <displayStopWatchScreen+0x2a0>
 8003526:	ee27 7b06 	vmul.f64	d7, d7, d6
 800352a:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800352e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003532:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003536:	edc7 7a01 	vstr	s15, [r7, #4]
 800353a:	793b      	ldrb	r3, [r7, #4]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2305      	movs	r3, #5
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354a:	480b      	ldr	r0, [pc, #44]	; (8003578 <displayStopWatchScreen+0x2b8>)
 800354c:	f002 f9ae 	bl	80058ac <ILI9341_Draw_Text>
			prevStopWatchSecond = stopWatchSecond;
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <displayStopWatchScreen+0x2c8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <displayStopWatchScreen+0x2c4>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	66666666 	.word	0x66666666
 8003564:	3fd66666 	.word	0x3fd66666
 8003568:	20000308 	.word	0x20000308
 800356c:	200000c0 	.word	0x200000c0
 8003570:	2000030c 	.word	0x2000030c
 8003574:	0800e738 	.word	0x0800e738
 8003578:	20000470 	.word	0x20000470
 800357c:	20000054 	.word	0x20000054
 8003580:	20000056 	.word	0x20000056
 8003584:	200000c4 	.word	0x200000c4
 8003588:	20000310 	.word	0x20000310
 800358c:	200000c8 	.word	0x200000c8
 8003590:	20000314 	.word	0x20000314
 8003594:	66666667 	.word	0x66666667
 8003598:	51eb851f 	.word	0x51eb851f
 800359c:	200000bc 	.word	0x200000bc

080035a0 <stopWatchScreen>:

void stopWatchScreen(){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af02      	add	r7, sp, #8

	if(initialStopWatchScreen == false){
 80035a6:	4b66      	ldr	r3, [pc, #408]	; (8003740 <stopWatchScreen+0x1a0>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f083 0301 	eor.w	r3, r3, #1
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d075      	beq.n	80036a0 <stopWatchScreen+0x100>
		resetPrevStopWatch();
 80035b4:	f7ff fe48 	bl	8003248 <resetPrevStopWatch>
		//Statics
		displayAlarmIcon(alarmIsOn);
 80035b8:	4b62      	ldr	r3, [pc, #392]	; (8003744 <stopWatchScreen+0x1a4>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fb77 	bl	8001cb0 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Stopwatch");
 80035c2:	4961      	ldr	r1, [pc, #388]	; (8003748 <stopWatchScreen+0x1a8>)
 80035c4:	4861      	ldr	r0, [pc, #388]	; (800374c <stopWatchScreen+0x1ac>)
 80035c6:	f008 feb5 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 80035ca:	4b61      	ldr	r3, [pc, #388]	; (8003750 <stopWatchScreen+0x1b0>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b2d9      	uxtb	r1, r3
 80035d0:	4b60      	ldr	r3, [pc, #384]	; (8003754 <stopWatchScreen+0x1b4>)
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035dc:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8003730 <stopWatchScreen+0x190>
 80035e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80035ec:	793b      	ldrb	r3, [r7, #4]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	2300      	movs	r3, #0
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	2302      	movs	r3, #2
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035fc:	4853      	ldr	r0, [pc, #332]	; (800374c <stopWatchScreen+0x1ac>)
 80035fe:	f002 f955 	bl	80058ac <ILI9341_Draw_Text>

		sprintf(Temp_Buffer_text, ":");
 8003602:	4955      	ldr	r1, [pc, #340]	; (8003758 <stopWatchScreen+0x1b8>)
 8003604:	4851      	ldr	r0, [pc, #324]	; (800374c <stopWatchScreen+0x1ac>)
 8003606:	f008 fe95 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+60, maxHeight * 0.37+16, WHITE, 4, BLACK);
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <stopWatchScreen+0x1b0>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	333c      	adds	r3, #60	; 0x3c
 8003612:	b2d9      	uxtb	r1, r3
 8003614:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <stopWatchScreen+0x1b4>)
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003620:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003738 <stopWatchScreen+0x198>
 8003624:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003628:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 800362c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003630:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003634:	edc7 7a01 	vstr	s15, [r7, #4]
 8003638:	793b      	ldrb	r3, [r7, #4]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	2300      	movs	r3, #0
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	2304      	movs	r3, #4
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003648:	4840      	ldr	r0, [pc, #256]	; (800374c <stopWatchScreen+0x1ac>)
 800364a:	f002 f92f 	bl	80058ac <ILI9341_Draw_Text>
		sprintf(Temp_Buffer_text, ":");
 800364e:	4942      	ldr	r1, [pc, #264]	; (8003758 <stopWatchScreen+0x1b8>)
 8003650:	483e      	ldr	r0, [pc, #248]	; (800374c <stopWatchScreen+0x1ac>)
 8003652:	f008 fe6f 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth+130, maxHeight * 0.37+16, WHITE, 4, BLACK);
 8003656:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <stopWatchScreen+0x1b0>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3b7e      	subs	r3, #126	; 0x7e
 800365e:	b2d9      	uxtb	r1, r3
 8003660:	4b3c      	ldr	r3, [pc, #240]	; (8003754 <stopWatchScreen+0x1b4>)
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800366c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003738 <stopWatchScreen+0x198>
 8003670:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003674:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8003678:	ee37 7b06 	vadd.f64	d7, d7, d6
 800367c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003680:	edc7 7a01 	vstr	s15, [r7, #4]
 8003684:	793b      	ldrb	r3, [r7, #4]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	2300      	movs	r3, #0
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	2304      	movs	r3, #4
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003694:	482d      	ldr	r0, [pc, #180]	; (800374c <stopWatchScreen+0x1ac>)
 8003696:	f002 f909 	bl	80058ac <ILI9341_Draw_Text>

		initialStopWatchScreen = true;
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <stopWatchScreen+0x1a0>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
	}

	//Time running
	if(isStopWatchRunning == true){
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <stopWatchScreen+0x1bc>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <stopWatchScreen+0x120>
		stopWatchMillisecond += millisecondStopWatch;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <stopWatchScreen+0x1c0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <stopWatchScreen+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <stopWatchScreen+0x1c0>)
 80036b8:	601a      	str	r2, [r3, #0]
		millisecondStopWatch = 0;
 80036ba:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <stopWatchScreen+0x1c4>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
	}

	//Normal Clock
	if (stopWatchMillisecond >= 1000){
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <stopWatchScreen+0x1c0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c8:	db0a      	blt.n	80036e0 <stopWatchScreen+0x140>
		stopWatchMillisecond = stopWatchMillisecond - 1000; //Keep remainder of millisecondStopWatch
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <stopWatchScreen+0x1c0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80036d2:	4a23      	ldr	r2, [pc, #140]	; (8003760 <stopWatchScreen+0x1c0>)
 80036d4:	6013      	str	r3, [r2, #0]
		stopWatchSecond++;
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <stopWatchScreen+0x1c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a22      	ldr	r2, [pc, #136]	; (8003768 <stopWatchScreen+0x1c8>)
 80036de:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchSecond >= 60){
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <stopWatchScreen+0x1c8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b3b      	cmp	r3, #59	; 0x3b
 80036e6:	dd07      	ble.n	80036f8 <stopWatchScreen+0x158>
		stopWatchSecond = 0;
 80036e8:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <stopWatchScreen+0x1c8>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
		stopWatchMinute++;
 80036ee:	4b1f      	ldr	r3, [pc, #124]	; (800376c <stopWatchScreen+0x1cc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <stopWatchScreen+0x1cc>)
 80036f6:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchMinute >= 60){
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <stopWatchScreen+0x1cc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b3b      	cmp	r3, #59	; 0x3b
 80036fe:	dd07      	ble.n	8003710 <stopWatchScreen+0x170>
		stopWatchMinute = 0;
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <stopWatchScreen+0x1cc>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
		stopWatchHour++;
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <stopWatchScreen+0x1d0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <stopWatchScreen+0x1d0>)
 800370e:	6013      	str	r3, [r2, #0]
	}
	if (stopWatchHour >= 99){
 8003710:	4b17      	ldr	r3, [pc, #92]	; (8003770 <stopWatchScreen+0x1d0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b62      	cmp	r3, #98	; 0x62
 8003716:	dd02      	ble.n	800371e <stopWatchScreen+0x17e>
		stopWatchHour = 0;
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <stopWatchScreen+0x1d0>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
	}

	//Running
	displayStopWatchScreen();
 800371e:	f7ff fdcf 	bl	80032c0 <displayStopWatchScreen>

//	char hexString[30];
//	sprintf(hexString,"%d %d\r\n",prevStopWatchHour,stopWatchHour);
//	HAL_UART_Transmit(&huart3, (uint8_t*) hexString, strlen(hexString), 1000);

}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	f3af 8000 	nop.w
 8003730:	9999999a 	.word	0x9999999a
 8003734:	3fb99999 	.word	0x3fb99999
 8003738:	7ae147ae 	.word	0x7ae147ae
 800373c:	3fd7ae14 	.word	0x3fd7ae14
 8003740:	20000318 	.word	0x20000318
 8003744:	20000060 	.word	0x20000060
 8003748:	0800e804 	.word	0x0800e804
 800374c:	20000470 	.word	0x20000470
 8003750:	20000054 	.word	0x20000054
 8003754:	20000056 	.word	0x20000056
 8003758:	0800e754 	.word	0x0800e754
 800375c:	20000319 	.word	0x20000319
 8003760:	20000314 	.word	0x20000314
 8003764:	200002d8 	.word	0x200002d8
 8003768:	20000310 	.word	0x20000310
 800376c:	2000030c 	.word	0x2000030c
 8003770:	20000308 	.word	0x20000308

08003774 <resetPrevAlarm>:

//State
bool initialAlarmClockScreen = false;
bool initialEditAlarmClockScreen = false;

void resetPrevAlarm(){
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
	prevAlarmMinute = -1;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <resetPrevAlarm+0x20>)
 800377a:	f04f 32ff 	mov.w	r2, #4294967295
 800377e:	601a      	str	r2, [r3, #0]
	prevAlarmHour = -1;
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <resetPrevAlarm+0x24>)
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000030 	.word	0x20000030
 8003798:	20000034 	.word	0x20000034
 800379c:	00000000 	.word	0x00000000

080037a0 <hourAlarmScreen>:

void hourAlarmScreen(bool status, bool isEdit){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	4603      	mov	r3, r0
 80037a8:	460a      	mov	r2, r1
 80037aa:	71fb      	strb	r3, [r7, #7]
 80037ac:	4613      	mov	r3, r2
 80037ae:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmHour != alarmHour || isEdit == true){
 80037b0:	4b31      	ldr	r3, [pc, #196]	; (8003878 <hourAlarmScreen+0xd8>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <hourAlarmScreen+0xdc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d102      	bne.n	80037c2 <hourAlarmScreen+0x22>
 80037bc:	79bb      	ldrb	r3, [r7, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d052      	beq.n	8003868 <hourAlarmScreen+0xc8>
		if (status == true){
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d027      	beq.n	8003818 <hourAlarmScreen+0x78>
			sprintf(Temp_Buffer_text, "%02d", (int)alarmHour);
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <hourAlarmScreen+0xdc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	492c      	ldr	r1, [pc, #176]	; (8003880 <hourAlarmScreen+0xe0>)
 80037d0:	482c      	ldr	r0, [pc, #176]	; (8003884 <hourAlarmScreen+0xe4>)
 80037d2:	f008 fdaf 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <hourAlarmScreen+0xe8>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b2d9      	uxtb	r1, r3
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <hourAlarmScreen+0xec>)
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80037e8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8003870 <hourAlarmScreen+0xd0>
 80037ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037f0:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80037f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80037fc:	edc7 7a00 	vstr	s15, [r7]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	2300      	movs	r3, #0
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	2306      	movs	r3, #6
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003810:	481c      	ldr	r0, [pc, #112]	; (8003884 <hourAlarmScreen+0xe4>)
 8003812:	f002 f84b 	bl	80058ac <ILI9341_Draw_Text>
 8003816:	e023      	b.n	8003860 <hourAlarmScreen+0xc0>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003818:	491d      	ldr	r1, [pc, #116]	; (8003890 <hourAlarmScreen+0xf0>)
 800381a:	481a      	ldr	r0, [pc, #104]	; (8003884 <hourAlarmScreen+0xe4>)
 800381c:	f008 fd8a 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <hourAlarmScreen+0xe8>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b2d9      	uxtb	r1, r3
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <hourAlarmScreen+0xec>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003832:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003870 <hourAlarmScreen+0xd0>
 8003836:	ee27 7b06 	vmul.f64	d7, d7, d6
 800383a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800383e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003842:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003846:	edc7 7a00 	vstr	s15, [r7]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	2300      	movs	r3, #0
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	2306      	movs	r3, #6
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800385a:	480a      	ldr	r0, [pc, #40]	; (8003884 <hourAlarmScreen+0xe4>)
 800385c:	f002 f826 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevAlarmHour = alarmHour;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <hourAlarmScreen+0xdc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <hourAlarmScreen+0xd8>)
 8003866:	6013      	str	r3, [r2, #0]
	}
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	33333333 	.word	0x33333333
 8003874:	3fd33333 	.word	0x3fd33333
 8003878:	20000034 	.word	0x20000034
 800387c:	200002d0 	.word	0x200002d0
 8003880:	0800e738 	.word	0x0800e738
 8003884:	20000470 	.word	0x20000470
 8003888:	20000054 	.word	0x20000054
 800388c:	20000056 	.word	0x20000056
 8003890:	0800e740 	.word	0x0800e740
 8003894:	00000000 	.word	0x00000000

08003898 <minuteAlarmScreen>:

void minuteAlarmScreen(bool status, bool isEdit){
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af02      	add	r7, sp, #8
 800389e:	4603      	mov	r3, r0
 80038a0:	460a      	mov	r2, r1
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71bb      	strb	r3, [r7, #6]
	if (prevAlarmMinute != alarmMinute || isEdit == true){
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <minuteAlarmScreen+0xe0>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b33      	ldr	r3, [pc, #204]	; (800397c <minuteAlarmScreen+0xe4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d102      	bne.n	80038ba <minuteAlarmScreen+0x22>
 80038b4:	79bb      	ldrb	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d056      	beq.n	8003968 <minuteAlarmScreen+0xd0>
		if (status == true){
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d029      	beq.n	8003914 <minuteAlarmScreen+0x7c>

			sprintf(Temp_Buffer_text, "%02d", (int)alarmMinute);
 80038c0:	4b2e      	ldr	r3, [pc, #184]	; (800397c <minuteAlarmScreen+0xe4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	492e      	ldr	r1, [pc, #184]	; (8003980 <minuteAlarmScreen+0xe8>)
 80038c8:	482e      	ldr	r0, [pc, #184]	; (8003984 <minuteAlarmScreen+0xec>)
 80038ca:	f008 fd33 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <minuteAlarmScreen+0xf0>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	336e      	adds	r3, #110	; 0x6e
 80038d6:	b2d9      	uxtb	r1, r3
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <minuteAlarmScreen+0xf4>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038e4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8003970 <minuteAlarmScreen+0xd8>
 80038e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038ec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80038f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038f8:	edc7 7a00 	vstr	s15, [r7]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	2300      	movs	r3, #0
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	2306      	movs	r3, #6
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800390c:	481d      	ldr	r0, [pc, #116]	; (8003984 <minuteAlarmScreen+0xec>)
 800390e:	f001 ffcd 	bl	80058ac <ILI9341_Draw_Text>
 8003912:	e025      	b.n	8003960 <minuteAlarmScreen+0xc8>
		}
		else{
			sprintf(Temp_Buffer_text, "  ");
 8003914:	491e      	ldr	r1, [pc, #120]	; (8003990 <minuteAlarmScreen+0xf8>)
 8003916:	481b      	ldr	r0, [pc, #108]	; (8003984 <minuteAlarmScreen+0xec>)
 8003918:	f008 fd0c 	bl	800c334 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 110, maxHeight * 0.3 +10, WHITE, 6, BLACK);
 800391c:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <minuteAlarmScreen+0xf0>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	336e      	adds	r3, #110	; 0x6e
 8003924:	b2d9      	uxtb	r1, r3
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <minuteAlarmScreen+0xf4>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003932:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003970 <minuteAlarmScreen+0xd8>
 8003936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800393a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800393e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003942:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003946:	edc7 7a00 	vstr	s15, [r7]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	2306      	movs	r3, #6
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800395a:	480a      	ldr	r0, [pc, #40]	; (8003984 <minuteAlarmScreen+0xec>)
 800395c:	f001 ffa6 	bl	80058ac <ILI9341_Draw_Text>
		}
		prevAlarmMinute = alarmMinute;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <minuteAlarmScreen+0xe4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <minuteAlarmScreen+0xe0>)
 8003966:	6013      	str	r3, [r2, #0]
	}
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	33333333 	.word	0x33333333
 8003974:	3fd33333 	.word	0x3fd33333
 8003978:	20000030 	.word	0x20000030
 800397c:	200002cc 	.word	0x200002cc
 8003980:	0800e738 	.word	0x0800e738
 8003984:	20000470 	.word	0x20000470
 8003988:	20000054 	.word	0x20000054
 800398c:	20000056 	.word	0x20000056
 8003990:	0800e740 	.word	0x0800e740
 8003994:	00000000 	.word	0x00000000

08003998 <colonAlarmScreen>:
void colonAlarmScreen(){
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af02      	add	r7, sp, #8
	sprintf(Temp_Buffer_text, ":");
 800399e:	4918      	ldr	r1, [pc, #96]	; (8003a00 <colonAlarmScreen+0x68>)
 80039a0:	4818      	ldr	r0, [pc, #96]	; (8003a04 <colonAlarmScreen+0x6c>)
 80039a2:	f008 fcc7 	bl	800c334 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth * 0 + offsetWidth + 80, maxHeight * 0.35 +10, WHITE, 4, BLACK);
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <colonAlarmScreen+0x70>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	3350      	adds	r3, #80	; 0x50
 80039ae:	b2d9      	uxtb	r1, r3
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <colonAlarmScreen+0x74>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80039bc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80039f8 <colonAlarmScreen+0x60>
 80039c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039c4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80039c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80039d4:	793b      	ldrb	r3, [r7, #4]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	2304      	movs	r3, #4
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039e4:	4807      	ldr	r0, [pc, #28]	; (8003a04 <colonAlarmScreen+0x6c>)
 80039e6:	f001 ff61 	bl	80058ac <ILI9341_Draw_Text>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	f3af 8000 	nop.w
 80039f8:	66666666 	.word	0x66666666
 80039fc:	3fd66666 	.word	0x3fd66666
 8003a00:	0800e754 	.word	0x0800e754
 8003a04:	20000470 	.word	0x20000470
 8003a08:	20000054 	.word	0x20000054
 8003a0c:	20000056 	.word	0x20000056

08003a10 <alarmClockScreen>:

void alarmClockScreen(){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af02      	add	r7, sp, #8
	if(initialAlarmClockScreen == false){
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <alarmClockScreen+0x90>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	f083 0301 	eor.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d033      	beq.n	8003a8c <alarmClockScreen+0x7c>
		resetPrevAlarm();
 8003a24:	f7ff fea6 	bl	8003774 <resetPrevAlarm>

		//Statics
		sprintf(Temp_Buffer_text, "Alarm");
 8003a28:	491e      	ldr	r1, [pc, #120]	; (8003aa4 <alarmClockScreen+0x94>)
 8003a2a:	481f      	ldr	r0, [pc, #124]	; (8003aa8 <alarmClockScreen+0x98>)
 8003a2c:	f008 fc82 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003a30:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <alarmClockScreen+0x9c>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b2d9      	uxtb	r1, r3
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <alarmClockScreen+0xa0>)
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a42:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8003a98 <alarmClockScreen+0x88>
 8003a46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a4e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a52:	793b      	ldrb	r3, [r7, #4]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a62:	4811      	ldr	r0, [pc, #68]	; (8003aa8 <alarmClockScreen+0x98>)
 8003a64:	f001 ff22 	bl	80058ac <ILI9341_Draw_Text>

		displayAlarmIcon(alarmIsOn);
 8003a68:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <alarmClockScreen+0xa4>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f91f 	bl	8001cb0 <displayAlarmIcon>

		colonAlarmScreen();
 8003a72:	f7ff ff91 	bl	8003998 <colonAlarmScreen>
		hourAlarmScreen(true,false);
 8003a76:	2100      	movs	r1, #0
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7ff fe91 	bl	80037a0 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003a7e:	2100      	movs	r1, #0
 8003a80:	2001      	movs	r0, #1
 8003a82:	f7ff ff09 	bl	8003898 <minuteAlarmScreen>

		initialAlarmClockScreen = true;
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <alarmClockScreen+0x90>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
	}
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	f3af 8000 	nop.w
 8003a98:	9999999a 	.word	0x9999999a
 8003a9c:	3fb99999 	.word	0x3fb99999
 8003aa0:	2000031a 	.word	0x2000031a
 8003aa4:	0800e810 	.word	0x0800e810
 8003aa8:	20000470 	.word	0x20000470
 8003aac:	20000054 	.word	0x20000054
 8003ab0:	20000056 	.word	0x20000056
 8003ab4:	20000060 	.word	0x20000060

08003ab8 <editScreen>:

void editScreen(){
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
	if(modeEdit == 1){
 8003abc:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <editScreen+0x78>)
 8003abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d102      	bne.n	8003acc <editScreen+0x14>
		editYearScreen();
 8003ac6:	f7fe febd 	bl	8002844 <editYearScreen>
	}else if (modeEdit == 6){
		editMinuteScreen();
	}else if (modeEdit == 7){
		editSecondScreen();
	}
}
 8003aca:	e02e      	b.n	8003b2a <editScreen+0x72>
	}else if (modeEdit == 2){
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <editScreen+0x78>)
 8003ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d102      	bne.n	8003adc <editScreen+0x24>
		editMonthScreen();
 8003ad6:	f7fe fe93 	bl	8002800 <editMonthScreen>
}
 8003ada:	e026      	b.n	8003b2a <editScreen+0x72>
	}else if (modeEdit == 3){
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <editScreen+0x78>)
 8003ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d102      	bne.n	8003aec <editScreen+0x34>
		editDateScreen();
 8003ae6:	f7fe fe69 	bl	80027bc <editDateScreen>
}
 8003aea:	e01e      	b.n	8003b2a <editScreen+0x72>
	}else if (modeEdit == 4){
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <editScreen+0x78>)
 8003aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d102      	bne.n	8003afc <editScreen+0x44>
		editDayScreen();
 8003af6:	f7fe fe3f 	bl	8002778 <editDayScreen>
}
 8003afa:	e016      	b.n	8003b2a <editScreen+0x72>
	}else if (modeEdit == 5){
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <editScreen+0x78>)
 8003afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	d102      	bne.n	8003b0c <editScreen+0x54>
		editHourScreen();
 8003b06:	f7fe fdcf 	bl	80026a8 <editHourScreen>
}
 8003b0a:	e00e      	b.n	8003b2a <editScreen+0x72>
	}else if (modeEdit == 6){
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <editScreen+0x78>)
 8003b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d102      	bne.n	8003b1c <editScreen+0x64>
		editMinuteScreen();
 8003b16:	f7fe fdeb 	bl	80026f0 <editMinuteScreen>
}
 8003b1a:	e006      	b.n	8003b2a <editScreen+0x72>
	}else if (modeEdit == 7){
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <editScreen+0x78>)
 8003b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b22:	2b07      	cmp	r3, #7
 8003b24:	d101      	bne.n	8003b2a <editScreen+0x72>
		editSecondScreen();
 8003b26:	f7fe fe05 	bl	8002734 <editSecondScreen>
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000005a 	.word	0x2000005a

08003b34 <editAlarmHourScreen>:
void editAlarmHourScreen(){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0

	minuteAlarmScreen(true,false);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f7ff feac 	bl	8003898 <minuteAlarmScreen>

	if (halfsecondState == false){ // Hour
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <editAlarmHourScreen+0x30>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	f083 0301 	eor.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <editAlarmHourScreen+0x24>
		hourAlarmScreen(false, true);
 8003b4e:	2101      	movs	r1, #1
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7ff fe25 	bl	80037a0 <hourAlarmScreen>
	}
	else{
		hourAlarmScreen(true, true);
	}
}
 8003b56:	e003      	b.n	8003b60 <editAlarmHourScreen+0x2c>
		hourAlarmScreen(true, true);
 8003b58:	2101      	movs	r1, #1
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	f7ff fe20 	bl	80037a0 <hourAlarmScreen>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000050 	.word	0x20000050

08003b68 <editAlarmMinuteScreen>:

void editAlarmMinuteScreen(){
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
	hourAlarmScreen(true,false);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f7ff fe16 	bl	80037a0 <hourAlarmScreen>

	if (halfsecondState == false){ // Minute
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <editAlarmMinuteScreen+0x30>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	f083 0301 	eor.w	r3, r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <editAlarmMinuteScreen+0x24>
		minuteAlarmScreen(false, true);
 8003b82:	2101      	movs	r1, #1
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7ff fe87 	bl	8003898 <minuteAlarmScreen>
	}
	else{
		minuteAlarmScreen(true, true);
	}
}
 8003b8a:	e003      	b.n	8003b94 <editAlarmMinuteScreen+0x2c>
		minuteAlarmScreen(true, true);
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f7ff fe82 	bl	8003898 <minuteAlarmScreen>
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000050 	.word	0x20000050
 8003b9c:	00000000 	.word	0x00000000

08003ba0 <editAlarmScreen>:
void editAlarmScreen(){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af02      	add	r7, sp, #8
	if(initialEditAlarmClockScreen == false){
 8003ba6:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <editAlarmScreen+0xe8>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	f083 0301 	eor.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d031      	beq.n	8003c18 <editAlarmScreen+0x78>
		resetPrevAlarm();
 8003bb4:	f7ff fdde 	bl	8003774 <resetPrevAlarm>
		displayAlarmIcon(alarmIsOn);
 8003bb8:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <editAlarmScreen+0xec>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe f877 	bl	8001cb0 <displayAlarmIcon>

		sprintf(Temp_Buffer_text, "Alarm");
 8003bc2:	4933      	ldr	r1, [pc, #204]	; (8003c90 <editAlarmScreen+0xf0>)
 8003bc4:	4833      	ldr	r0, [pc, #204]	; (8003c94 <editAlarmScreen+0xf4>)
 8003bc6:	f008 fbb5 	bl	800c334 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, offsetWidth + offsetWidthDate*0, maxHeight * 0.1, WHITE, 2, BLACK);
 8003bca:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <editAlarmScreen+0xf8>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b2d9      	uxtb	r1, r3
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <editAlarmScreen+0xfc>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003bdc:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8003c80 <editAlarmScreen+0xe0>
 8003be0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003be4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003be8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003bec:	793b      	ldrb	r3, [r7, #4]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfc:	4825      	ldr	r0, [pc, #148]	; (8003c94 <editAlarmScreen+0xf4>)
 8003bfe:	f001 fe55 	bl	80058ac <ILI9341_Draw_Text>

		hourAlarmScreen(true,false);
 8003c02:	2100      	movs	r1, #0
 8003c04:	2001      	movs	r0, #1
 8003c06:	f7ff fdcb 	bl	80037a0 <hourAlarmScreen>
		minuteAlarmScreen(true,false);
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f7ff fe43 	bl	8003898 <minuteAlarmScreen>

		initialEditAlarmClockScreen = true;
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <editAlarmScreen+0xe8>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
	}

	//Algorithm Calculation
	if (alarmMinute >= 60){
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <editAlarmScreen+0x100>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b3b      	cmp	r3, #59	; 0x3b
 8003c1e:	dd03      	ble.n	8003c28 <editAlarmScreen+0x88>
		alarmMinute = 0;
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <editAlarmScreen+0x100>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e006      	b.n	8003c36 <editAlarmScreen+0x96>
	}
	else if(alarmMinute < 0){
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <editAlarmScreen+0x100>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	da02      	bge.n	8003c36 <editAlarmScreen+0x96>
		alarmMinute = 59;
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <editAlarmScreen+0x100>)
 8003c32:	223b      	movs	r2, #59	; 0x3b
 8003c34:	601a      	str	r2, [r3, #0]
	}
	if (alarmHour >= 24){
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <editAlarmScreen+0x104>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b17      	cmp	r3, #23
 8003c3c:	dd03      	ble.n	8003c46 <editAlarmScreen+0xa6>
		alarmHour = 0;
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <editAlarmScreen+0x104>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e006      	b.n	8003c54 <editAlarmScreen+0xb4>
	}
	else if(alarmHour < 0){
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <editAlarmScreen+0x104>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da02      	bge.n	8003c54 <editAlarmScreen+0xb4>
		alarmHour = 23;
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <editAlarmScreen+0x104>)
 8003c50:	2217      	movs	r2, #23
 8003c52:	601a      	str	r2, [r3, #0]
	}

	if(modeEdit == 1){
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <editAlarmScreen+0x108>)
 8003c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <editAlarmScreen+0xc4>
		editAlarmHourScreen();
 8003c5e:	f7ff ff69 	bl	8003b34 <editAlarmHourScreen>
	}else if (modeEdit == 2){
		editAlarmMinuteScreen();
	}
}
 8003c62:	e006      	b.n	8003c72 <editAlarmScreen+0xd2>
	}else if (modeEdit == 2){
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <editAlarmScreen+0x108>)
 8003c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d101      	bne.n	8003c72 <editAlarmScreen+0xd2>
		editAlarmMinuteScreen();
 8003c6e:	f7ff ff7b 	bl	8003b68 <editAlarmMinuteScreen>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	f3af 8000 	nop.w
 8003c80:	9999999a 	.word	0x9999999a
 8003c84:	3fb99999 	.word	0x3fb99999
 8003c88:	2000031b 	.word	0x2000031b
 8003c8c:	20000060 	.word	0x20000060
 8003c90:	0800e810 	.word	0x0800e810
 8003c94:	20000470 	.word	0x20000470
 8003c98:	20000054 	.word	0x20000054
 8003c9c:	20000056 	.word	0x20000056
 8003ca0:	200002cc 	.word	0x200002cc
 8003ca4:	200002d0 	.word	0x200002d0
 8003ca8:	2000005a 	.word	0x2000005a

08003cac <tempMonitor>:

char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];

void tempMonitor(){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af02      	add	r7, sp, #8
	//Temperature
	cmdBuffer[0] = 0x03;
 8003cb2:	4b52      	ldr	r3, [pc, #328]	; (8003dfc <tempMonitor+0x150>)
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <tempMonitor+0x150>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003cbe:	4b4f      	ldr	r3, [pc, #316]	; (8003dfc <tempMonitor+0x150>)
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	709a      	strb	r2, [r3, #2]

	//Send Temp & Humid via UART3
	sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", temp, humid);
 8003cc4:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <tempMonitor+0x154>)
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003cce:	4b4d      	ldr	r3, [pc, #308]	; (8003e04 <tempMonitor+0x158>)
 8003cd0:	edd3 7a00 	vldr	s15, [r3]
 8003cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd8:	ed8d 7b00 	vstr	d7, [sp]
 8003cdc:	ec53 2b16 	vmov	r2, r3, d6
 8003ce0:	4949      	ldr	r1, [pc, #292]	; (8003e08 <tempMonitor+0x15c>)
 8003ce2:	484a      	ldr	r0, [pc, #296]	; (8003e0c <tempMonitor+0x160>)
 8003ce4:	f008 fb26 	bl	800c334 <siprintf>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8003ce8:	bf00      	nop
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <tempMonitor+0x164>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d1f8      	bne.n	8003cea <tempMonitor+0x3e>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8003cf8:	4844      	ldr	r0, [pc, #272]	; (8003e0c <tempMonitor+0x160>)
 8003cfa:	f7fc faa1 	bl	8000240 <strlen>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	23c8      	movs	r3, #200	; 0xc8
 8003d04:	4941      	ldr	r1, [pc, #260]	; (8003e0c <tempMonitor+0x160>)
 8003d06:	4842      	ldr	r0, [pc, #264]	; (8003e10 <tempMonitor+0x164>)
 8003d08:	f007 f970 	bl	800afec <HAL_UART_Transmit>

	//HAL_Delay(5000); //>3000 ms
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003d0c:	23c8      	movs	r3, #200	; 0xc8
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2303      	movs	r3, #3
 8003d12:	4a3a      	ldr	r2, [pc, #232]	; (8003dfc <tempMonitor+0x150>)
 8003d14:	21b8      	movs	r1, #184	; 0xb8
 8003d16:	483f      	ldr	r0, [pc, #252]	; (8003e14 <tempMonitor+0x168>)
 8003d18:	f003 fac8 	bl	80072ac <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8003d1c:	23c8      	movs	r3, #200	; 0xc8
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2303      	movs	r3, #3
 8003d22:	4a36      	ldr	r2, [pc, #216]	; (8003dfc <tempMonitor+0x150>)
 8003d24:	21b8      	movs	r1, #184	; 0xb8
 8003d26:	483b      	ldr	r0, [pc, #236]	; (8003e14 <tempMonitor+0x168>)
 8003d28:	f003 fac0 	bl	80072ac <HAL_I2C_Master_Transmit>

	HAL_Delay(80); // 50 is too low, 80 is okay
 8003d2c:	2050      	movs	r0, #80	; 0x50
 8003d2e:	f002 fb13 	bl	8006358 <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8003d32:	23c8      	movs	r3, #200	; 0xc8
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2308      	movs	r3, #8
 8003d38:	4a37      	ldr	r2, [pc, #220]	; (8003e18 <tempMonitor+0x16c>)
 8003d3a:	21b8      	movs	r1, #184	; 0xb8
 8003d3c:	4835      	ldr	r0, [pc, #212]	; (8003e14 <tempMonitor+0x168>)
 8003d3e:	f003 fba9 	bl	8007494 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 8003d42:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <tempMonitor+0x16c>)
 8003d44:	79db      	ldrb	r3, [r3, #7]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8003d4c:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <tempMonitor+0x16c>)
 8003d4e:	799b      	ldrb	r3, [r3, #6]
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	4413      	add	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8003d58:	2106      	movs	r1, #6
 8003d5a:	482f      	ldr	r0, [pc, #188]	; (8003e18 <tempMonitor+0x16c>)
 8003d5c:	f000 fe1c 	bl	8004998 <CRC16_2>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d143      	bne.n	8003df2 <tempMonitor+0x146>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <tempMonitor+0x16c>)
 8003d6c:	791b      	ldrb	r3, [r3, #4]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <tempMonitor+0x16c>)
 8003d7a:	795b      	ldrb	r3, [r3, #5]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 8003d82:	88bb      	ldrh	r3, [r7, #4]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d8c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003d90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003d94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <tempMonitor+0x154>)
 8003d9a:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <tempMonitor+0x16c>)
 8003da0:	791b      	ldrb	r3, [r3, #4]
 8003da2:	09db      	lsrs	r3, r3, #7
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <tempMonitor+0x10a>
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <tempMonitor+0x154>)
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	eef1 7a67 	vneg.f32	s15, s15
 8003db4:	e002      	b.n	8003dbc <tempMonitor+0x110>
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <tempMonitor+0x154>)
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <tempMonitor+0x154>)
 8003dbe:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <tempMonitor+0x16c>)
 8003dc4:	789b      	ldrb	r3, [r3, #2]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <tempMonitor+0x16c>)
 8003dce:	78db      	ldrb	r3, [r3, #3]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003de0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003de4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003de8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <tempMonitor+0x158>)
 8003dee:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000430 	.word	0x20000430
 8003e00:	20000018 	.word	0x20000018
 8003e04:	2000001c 	.word	0x2000001c
 8003e08:	0800e818 	.word	0x0800e818
 8003e0c:	2000043c 	.word	0x2000043c
 8003e10:	2000062c 	.word	0x2000062c
 8003e14:	200003e4 	.word	0x200003e4
 8003e18:	20000434 	.word	0x20000434

08003e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003e24:	f7fc ffcc 	bl	8000dc0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003e28:	f7fc fff0 	bl	8000e0c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e2c:	f002 fa28 	bl	8006280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e30:	f000 fd14 	bl	800485c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e34:	f7fc fdf6 	bl	8000a24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003e38:	f001 fa24 	bl	8005284 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8003e3c:	f000 fe46 	bl	8004acc <MX_SPI5_Init>
  MX_TIM1_Init();
 8003e40:	f001 f81a 	bl	8004e78 <MX_TIM1_Init>
  MX_RNG_Init();
 8003e44:	f000 fe0e 	bl	8004a64 <MX_RNG_Init>
  MX_I2C1_Init();
 8003e48:	f7fc ff36 	bl	8000cb8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003e4c:	f001 f868 	bl	8004f20 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e50:	f001 f8b4 	bl	8004fbc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003e54:	f001 f9e6 	bl	8005224 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8003e58:	f001 f9b4 	bl	80051c4 <MX_UART4_Init>
  MX_ADC1_Init();
 8003e5c:	f7fc fd50 	bl	8000900 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	//Temp but not has code in here yet
	cmdBuffer[0] = 0x03;
 8003e60:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <main+0x1a4>)
 8003e62:	2203      	movs	r2, #3
 8003e64:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8003e66:	4b56      	ldr	r3, [pc, #344]	; (8003fc0 <main+0x1a4>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8003e6c:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <main+0x1a4>)
 8003e6e:	2204      	movs	r2, #4
 8003e70:	709a      	strb	r2, [r3, #2]

	//initial driver setup to drive ili9341
	ILI9341_Init();
 8003e72:	f001 fe79 	bl	8005b68 <ILI9341_Init>

	//Interrupt millisecond
	HAL_TIM_Base_Start_IT(&htim1);
 8003e76:	4853      	ldr	r0, [pc, #332]	; (8003fc4 <main+0x1a8>)
 8003e78:	f005 fe84 	bl	8009b84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8003e7c:	4852      	ldr	r0, [pc, #328]	; (8003fc8 <main+0x1ac>)
 8003e7e:	f005 fe81 	bl	8009b84 <HAL_TIM_Base_Start_IT>

	//Reset Screen
	setHorizontalScreen(BLACK);
 8003e82:	2000      	movs	r0, #0
 8003e84:	f7fd faf4 	bl	8001470 <setHorizontalScreen>

	//Read EEPROM First Time
	readData();
 8003e88:	f7fd fa18 	bl	80012bc <readData>

	//ADC Input variable Resister(Light)
	HAL_ADC_Start(&hadc1);
 8003e8c:	484f      	ldr	r0, [pc, #316]	; (8003fcc <main+0x1b0>)
 8003e8e:	f002 facb 	bl	8006428 <HAL_ADC_Start>

	// Setup PM Sensor
	uint8_t* respondStart;
	respondStart = wake_sensirion();
 8003e92:	f7fd f82f 	bl	8000ef4 <wake_sensirion>
 8003e96:	60f8      	str	r0, [r7, #12]
	sent_string_to_mcu("STA");
 8003e98:	484d      	ldr	r0, [pc, #308]	; (8003fd0 <main+0x1b4>)
 8003e9a:	f7fd f957 	bl	800114c <sent_string_to_mcu>

		// REAL CODE BEGIN



		calculationClock();
 8003e9e:	f7fd fb93 	bl	80015c8 <calculationClock>
		checkResetData();
 8003ea2:	f7fd fad5 	bl	8001450 <checkResetData>
		resisterMonitor(); //light screen
 8003ea6:	f7ff f967 	bl	8003178 <resisterMonitor>

		if (prevMode != mode || prevModeEdit != modeEdit){
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <main+0x1b8>)
 8003eac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003eb0:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <main+0x1bc>)
 8003eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d107      	bne.n	8003eca <main+0xae>
 8003eba:	4b48      	ldr	r3, [pc, #288]	; (8003fdc <main+0x1c0>)
 8003ebc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ec0:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <main+0x1c4>)
 8003ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d008      	beq.n	8003edc <main+0xc0>
			prevModeEdit = modeEdit;
 8003eca:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <main+0x1c4>)
 8003ecc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <main+0x1c0>)
 8003ed2:	801a      	strh	r2, [r3, #0]
			resetPrevNum();
 8003ed4:	f7fe f974 	bl	80021c0 <resetPrevNum>
			resetPrevAlarm();
 8003ed8:	f7ff fc4c 	bl	8003774 <resetPrevAlarm>
		}
		// When Change Mode
		if (prevMode != mode){
 8003edc:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <main+0x1b8>)
 8003ede:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ee2:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <main+0x1bc>)
 8003ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d012      	beq.n	8003f12 <main+0xf6>
			prevMode = mode;
 8003eec:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <main+0x1bc>)
 8003eee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ef2:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <main+0x1b8>)
 8003ef4:	801a      	strh	r2, [r3, #0]
			setHorizontalScreen(BLACK);
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fd faba 	bl	8001470 <setHorizontalScreen>
			bottomBarScreen();
 8003efc:	f7fe fcc8 	bl	8002890 <bottomBarScreen>

			//For Mode 1 StopWatch
			initialStopWatchScreen = false;
 8003f00:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <main+0x1c8>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
			//For Mode 2 Alarm
			initialAlarmClockScreen = false;
 8003f06:	4b38      	ldr	r3, [pc, #224]	; (8003fe8 <main+0x1cc>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
			//For mode 200 Edit Alarm
			initialEditAlarmClockScreen = false;
 8003f0c:	4b37      	ldr	r3, [pc, #220]	; (8003fec <main+0x1d0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 0){
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <main+0x1bc>)
 8003f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d121      	bne.n	8003f60 <main+0x144>
			if (halfsecond == 1){	// render every 500 ms
 8003f1c:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <main+0x1d4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	f040 8088 	bne.w	8004036 <main+0x21a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8003f26:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <main+0x1d8>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bf14      	ite	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	2300      	moveq	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f083 0301 	eor.w	r3, r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b2c      	ldr	r3, [pc, #176]	; (8003ff4 <main+0x1d8>)
 8003f42:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8003f44:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <main+0x1d4>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

				tempMonitor(); // read every 500 ms
 8003f4a:	f7ff feaf 	bl	8003cac <tempMonitor>
				notifyPm(); // read every 500 ms
 8003f4e:	f7ff f809 	bl	8002f64 <notifyPm>

				topBarScreen();
 8003f52:	f7fe f927 	bl	80021a4 <topBarScreen>
				displayClockScreen();
 8003f56:	f7fe fb73 	bl	8002640 <displayClockScreen>
				bottomBarScreenUpdate();
 8003f5a:	f7fe fe15 	bl	8002b88 <bottomBarScreenUpdate>
 8003f5e:	e06a      	b.n	8004036 <main+0x21a>
			}
		}else if(mode == 1){	// No Notify Line at this mode because has delay
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <main+0x1bc>)
 8003f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d102      	bne.n	8003f70 <main+0x154>
			stopWatchScreen();
 8003f6a:	f7ff fb19 	bl	80035a0 <stopWatchScreen>
 8003f6e:	e062      	b.n	8004036 <main+0x21a>
		}else if(mode == 2){
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <main+0x1bc>)
 8003f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d102      	bne.n	8003f80 <main+0x164>
			alarmClockScreen();
 8003f7a:	f7ff fd49 	bl	8003a10 <alarmClockScreen>
 8003f7e:	e05a      	b.n	8004036 <main+0x21a>
		}else if (mode == 100){ // Adjust modeEdit 1-year, 2-month, 3-date, 4-day, 5-hour, 6-minute, 7-second
 8003f80:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <main+0x1bc>)
 8003f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d136      	bne.n	8003ff8 <main+0x1dc>

			if(halfsecond == 1){ // render every 500 ms
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <main+0x1d4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d151      	bne.n	8004036 <main+0x21a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <main+0x1d8>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f083 0301 	eor.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <main+0x1d8>)
 8003fae:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <main+0x1d4>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 8003fb6:	f7fe ffd5 	bl	8002f64 <notifyPm>
				editScreen();
 8003fba:	f7ff fd7d 	bl	8003ab8 <editScreen>
 8003fbe:	e03a      	b.n	8004036 <main+0x21a>
 8003fc0:	20000430 	.word	0x20000430
 8003fc4:	20000594 	.word	0x20000594
 8003fc8:	200005e0 	.word	0x200005e0
 8003fcc:	2000039c 	.word	0x2000039c
 8003fd0:	0800e840 	.word	0x0800e840
 8003fd4:	2000005c 	.word	0x2000005c
 8003fd8:	200002e4 	.word	0x200002e4
 8003fdc:	2000005e 	.word	0x2000005e
 8003fe0:	2000005a 	.word	0x2000005a
 8003fe4:	20000318 	.word	0x20000318
 8003fe8:	2000031a 	.word	0x2000031a
 8003fec:	2000031b 	.word	0x2000031b
 8003ff0:	200002dc 	.word	0x200002dc
 8003ff4:	20000050 	.word	0x20000050
			}
		}else if (mode == 200){
 8003ff8:	4b80      	ldr	r3, [pc, #512]	; (80041fc <main+0x3e0>)
 8003ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffe:	2bc8      	cmp	r3, #200	; 0xc8
 8004000:	d119      	bne.n	8004036 <main+0x21a>
			if(halfsecond == 1){ // render every 500 ms
 8004002:	4b7f      	ldr	r3, [pc, #508]	; (8004200 <main+0x3e4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d115      	bne.n	8004036 <main+0x21a>
				halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 800400a:	4b7e      	ldr	r3, [pc, #504]	; (8004204 <main+0x3e8>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f083 0301 	eor.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	4b77      	ldr	r3, [pc, #476]	; (8004204 <main+0x3e8>)
 8004026:	701a      	strb	r2, [r3, #0]
				halfsecond = 0;
 8004028:	4b75      	ldr	r3, [pc, #468]	; (8004200 <main+0x3e4>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

				notifyPm(); // read every 500 ms
 800402e:	f7fe ff99 	bl	8002f64 <notifyPm>
				editAlarmScreen();
 8004032:	f7ff fdb5 	bl	8003ba0 <editAlarmScreen>
			}
		}


		pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	4873      	ldr	r0, [pc, #460]	; (8004208 <main+0x3ec>)
 800403a:	f003 f85d 	bl	80070f8 <HAL_GPIO_ReadPin>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4b70      	ldr	r3, [pc, #448]	; (800420c <main+0x3f0>)
 800404c:	701a      	strb	r2, [r3, #0]
		pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 800404e:	2140      	movs	r1, #64	; 0x40
 8004050:	486d      	ldr	r0, [pc, #436]	; (8004208 <main+0x3ec>)
 8004052:	f003 f851 	bl	80070f8 <HAL_GPIO_ReadPin>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <main+0x3f4>)
 8004064:	701a      	strb	r2, [r3, #0]
		pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8004066:	2120      	movs	r1, #32
 8004068:	4867      	ldr	r0, [pc, #412]	; (8004208 <main+0x3ec>)
 800406a:	f003 f845 	bl	80070f8 <HAL_GPIO_ReadPin>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b66      	ldr	r3, [pc, #408]	; (8004214 <main+0x3f8>)
 800407c:	701a      	strb	r2, [r3, #0]
		pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 800407e:	2110      	movs	r1, #16
 8004080:	4861      	ldr	r0, [pc, #388]	; (8004208 <main+0x3ec>)
 8004082:	f003 f839 	bl	80070f8 <HAL_GPIO_ReadPin>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2da      	uxtb	r2, r3
 8004092:	4b61      	ldr	r3, [pc, #388]	; (8004218 <main+0x3fc>)
 8004094:	701a      	strb	r2, [r3, #0]
//		pressButton2 = 0;
//		pressButton3 = 0;
//		pressButton4 = 0;

		//Buzzer
		if ((pressButton1 == true && isPressButton1 == false) ||
 8004096:	4b5d      	ldr	r3, [pc, #372]	; (800420c <main+0x3f0>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <main+0x290>
 800409e:	4b5f      	ldr	r3, [pc, #380]	; (800421c <main+0x400>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f083 0301 	eor.w	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d120      	bne.n	80040ee <main+0x2d2>
			(pressButton2 == true && isPressButton2 == false) ||
 80040ac:	4b58      	ldr	r3, [pc, #352]	; (8004210 <main+0x3f4>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
		if ((pressButton1 == true && isPressButton1 == false) ||
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <main+0x2a6>
			(pressButton2 == true && isPressButton2 == false) ||
 80040b4:	4b5a      	ldr	r3, [pc, #360]	; (8004220 <main+0x404>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	f083 0301 	eor.w	r3, r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d115      	bne.n	80040ee <main+0x2d2>
			(pressButton3 == true && isPressButton3 == false) ||
 80040c2:	4b54      	ldr	r3, [pc, #336]	; (8004214 <main+0x3f8>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
			(pressButton2 == true && isPressButton2 == false) ||
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <main+0x2bc>
			(pressButton3 == true && isPressButton3 == false) ||
 80040ca:	4b56      	ldr	r3, [pc, #344]	; (8004224 <main+0x408>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f083 0301 	eor.w	r3, r3, #1
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <main+0x2d2>
			(pressButton4 == true && isPressButton4 == false)){
 80040d8:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <main+0x3fc>)
 80040da:	781b      	ldrb	r3, [r3, #0]
			(pressButton3 == true && isPressButton3 == false) ||
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <main+0x2d8>
			(pressButton4 == true && isPressButton4 == false)){
 80040e0:	4b51      	ldr	r3, [pc, #324]	; (8004228 <main+0x40c>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <main+0x2d8>
			buzzerSound(70);
 80040ee:	2046      	movs	r0, #70	; 0x46
 80040f0:	f7fe ff1e 	bl	8002f30 <buzzerSound>
		}

		//General Mode
		if (pressButton1 == true && isPressButton1 == false && !(mode == 100 || mode == 200)){ // increase mode only once
 80040f4:	4b45      	ldr	r3, [pc, #276]	; (800420c <main+0x3f0>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d024      	beq.n	8004146 <main+0x32a>
 80040fc:	4b47      	ldr	r3, [pc, #284]	; (800421c <main+0x400>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	f083 0301 	eor.w	r3, r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01d      	beq.n	8004146 <main+0x32a>
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <main+0x3e0>)
 800410c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004110:	2b64      	cmp	r3, #100	; 0x64
 8004112:	d018      	beq.n	8004146 <main+0x32a>
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <main+0x3e0>)
 8004116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800411a:	2bc8      	cmp	r3, #200	; 0xc8
 800411c:	d013      	beq.n	8004146 <main+0x32a>
			mode++;
 800411e:	4b37      	ldr	r3, [pc, #220]	; (80041fc <main+0x3e0>)
 8004120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004124:	b29b      	uxth	r3, r3
 8004126:	3301      	adds	r3, #1
 8004128:	b29b      	uxth	r3, r3
 800412a:	b21a      	sxth	r2, r3
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <main+0x3e0>)
 800412e:	801a      	strh	r2, [r3, #0]
			if(mode == 3){
 8004130:	4b32      	ldr	r3, [pc, #200]	; (80041fc <main+0x3e0>)
 8004132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d102      	bne.n	8004140 <main+0x324>
				mode = 0;
 800413a:	4b30      	ldr	r3, [pc, #192]	; (80041fc <main+0x3e0>)
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]
			}
			isPressButton1 = true;
 8004140:	4b36      	ldr	r3, [pc, #216]	; (800421c <main+0x400>)
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
		}
		//StopWatch Mode
		if (pressButton2 == true && isPressButton2 == false && mode == 1 && isStopWatchRunning != true){ //Reset StopWatch
 8004146:	4b32      	ldr	r3, [pc, #200]	; (8004210 <main+0x3f4>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <main+0x362>
 800414e:	4b34      	ldr	r3, [pc, #208]	; (8004220 <main+0x404>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f083 0301 	eor.w	r3, r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <main+0x362>
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <main+0x3e0>)
 800415e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d10b      	bne.n	800417e <main+0x362>
 8004166:	4b31      	ldr	r3, [pc, #196]	; (800422c <main+0x410>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	f083 0301 	eor.w	r3, r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <main+0x362>
			isPressButton2 = true;
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <main+0x404>)
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
			resetStopWatch();
 800417a:	f7ff f885 	bl	8003288 <resetStopWatch>
		}
		if (pressButton3 == true && isPressButton3 == false && mode == 1){ //Running/Stop StopWatch
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <main+0x3f8>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01f      	beq.n	80041c6 <main+0x3aa>
 8004186:	4b27      	ldr	r3, [pc, #156]	; (8004224 <main+0x408>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d018      	beq.n	80041c6 <main+0x3aa>
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <main+0x3e0>)
 8004196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d113      	bne.n	80041c6 <main+0x3aa>
			isPressButton3 = true;
 800419e:	4b21      	ldr	r3, [pc, #132]	; (8004224 <main+0x408>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
			if(isStopWatchRunning == false){ // press button
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <main+0x410>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f083 0301 	eor.w	r3, r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <main+0x3a4>
				millisecondStopWatch = 0;
 80041b2:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <main+0x414>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
				isStopWatchRunning = true;
 80041b8:	4b1c      	ldr	r3, [pc, #112]	; (800422c <main+0x410>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e002      	b.n	80041c6 <main+0x3aa>
			}else{
				isStopWatchRunning = false;
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <main+0x410>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Adjust Time Mode For Mode 0 and 100
		if (pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <main+0x3f4>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d036      	beq.n	800423c <main+0x420>
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <main+0x404>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f083 0301 	eor.w	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d02f      	beq.n	800423c <main+0x420>
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <main+0x3e0>)
 80041de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d12a      	bne.n	800423c <main+0x420>
			isPressButton2 = true;
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <main+0x404>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <main+0x418>)
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	4911      	ldr	r1, [pc, #68]	; (8004238 <main+0x41c>)
 80041f4:	e9c1 2300 	strd	r2, r3, [r1]
 80041f8:	e04d      	b.n	8004296 <main+0x47a>
 80041fa:	bf00      	nop
 80041fc:	200002e4 	.word	0x200002e4
 8004200:	200002dc 	.word	0x200002dc
 8004204:	20000050 	.word	0x20000050
 8004208:	40020c00 	.word	0x40020c00
 800420c:	200002e6 	.word	0x200002e6
 8004210:	200002e7 	.word	0x200002e7
 8004214:	200002e8 	.word	0x200002e8
 8004218:	200002e9 	.word	0x200002e9
 800421c:	200002ea 	.word	0x200002ea
 8004220:	200002eb 	.word	0x200002eb
 8004224:	200002ec 	.word	0x200002ec
 8004228:	200002ed 	.word	0x200002ed
 800422c:	20000319 	.word	0x20000319
 8004230:	200002d8 	.word	0x200002d8
 8004234:	200002f8 	.word	0x200002f8
 8004238:	200002f0 	.word	0x200002f0
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 800423c:	4ba8      	ldr	r3, [pc, #672]	; (80044e0 <main+0x6c4>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d028      	beq.n	8004296 <main+0x47a>
 8004244:	4ba7      	ldr	r3, [pc, #668]	; (80044e4 <main+0x6c8>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d024      	beq.n	8004296 <main+0x47a>
 800424c:	4ba6      	ldr	r3, [pc, #664]	; (80044e8 <main+0x6cc>)
 800424e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11f      	bne.n	8004296 <main+0x47a>
 8004256:	4ba5      	ldr	r3, [pc, #660]	; (80044ec <main+0x6d0>)
 8004258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800425c:	4ba4      	ldr	r3, [pc, #656]	; (80044f0 <main+0x6d4>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	1a84      	subs	r4, r0, r2
 8004264:	eb61 0503 	sbc.w	r5, r1, r3
 8004268:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	42ab      	cmp	r3, r5
 8004272:	bf08      	it	eq
 8004274:	42a2      	cmpeq	r2, r4
 8004276:	d20e      	bcs.n	8004296 <main+0x47a>
			buzzerSound(70);
 8004278:	2046      	movs	r0, #70	; 0x46
 800427a:	f7fe fe59 	bl	8002f30 <buzzerSound>
			modeEdit = 1; // Reset to Year First time
 800427e:	4b9d      	ldr	r3, [pc, #628]	; (80044f4 <main+0x6d8>)
 8004280:	2201      	movs	r2, #1
 8004282:	801a      	strh	r2, [r3, #0]
			mode = 100;
 8004284:	4b98      	ldr	r3, [pc, #608]	; (80044e8 <main+0x6cc>)
 8004286:	2264      	movs	r2, #100	; 0x64
 8004288:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 800428a:	4b98      	ldr	r3, [pc, #608]	; (80044ec <main+0x6d0>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	4997      	ldr	r1, [pc, #604]	; (80044f0 <main+0x6d4>)
 8004292:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Adjust Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 8004296:	4b92      	ldr	r3, [pc, #584]	; (80044e0 <main+0x6c4>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d02c      	beq.n	80042f8 <main+0x4dc>
 800429e:	4b91      	ldr	r3, [pc, #580]	; (80044e4 <main+0x6c8>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	f083 0301 	eor.w	r3, r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d025      	beq.n	80042f8 <main+0x4dc>
 80042ac:	4b8f      	ldr	r3, [pc, #572]	; (80044ec <main+0x6d0>)
 80042ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042b2:	4b8f      	ldr	r3, [pc, #572]	; (80044f0 <main+0x6d4>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	ebb0 0802 	subs.w	r8, r0, r2
 80042bc:	eb61 0903 	sbc.w	r9, r1, r3
 80042c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	454b      	cmp	r3, r9
 80042ca:	bf08      	it	eq
 80042cc:	4542      	cmpeq	r2, r8
 80042ce:	d213      	bcs.n	80042f8 <main+0x4dc>
 80042d0:	4b85      	ldr	r3, [pc, #532]	; (80044e8 <main+0x6cc>)
 80042d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d10e      	bne.n	80042f8 <main+0x4dc>
			isPressButton2 = true;
 80042da:	4b82      	ldr	r3, [pc, #520]	; (80044e4 <main+0x6c8>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Year First time
 80042e0:	4b84      	ldr	r3, [pc, #528]	; (80044f4 <main+0x6d8>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	801a      	strh	r2, [r3, #0]
			mode = 0;
 80042e6:	4b80      	ldr	r3, [pc, #512]	; (80044e8 <main+0x6cc>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 80042ec:	4b7f      	ldr	r3, [pc, #508]	; (80044ec <main+0x6d0>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	497f      	ldr	r1, [pc, #508]	; (80044f0 <main+0x6d4>)
 80042f4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 80042f8:	4b7f      	ldr	r3, [pc, #508]	; (80044f8 <main+0x6dc>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d022      	beq.n	8004346 <main+0x52a>
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <main+0x6e0>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	f083 0301 	eor.w	r3, r3, #1
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01b      	beq.n	8004346 <main+0x52a>
 800430e:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <main+0x6cc>)
 8004310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004314:	2b64      	cmp	r3, #100	; 0x64
 8004316:	d116      	bne.n	8004346 <main+0x52a>
			modeEdit++;
 8004318:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <main+0x6d8>)
 800431a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800431e:	b29b      	uxth	r3, r3
 8004320:	3301      	adds	r3, #1
 8004322:	b29b      	uxth	r3, r3
 8004324:	b21a      	sxth	r2, r3
 8004326:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <main+0x6d8>)
 8004328:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 800432a:	4b74      	ldr	r3, [pc, #464]	; (80044fc <main+0x6e0>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 8){	 // finish loop edit
 8004330:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <main+0x6d8>)
 8004332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d105      	bne.n	8004346 <main+0x52a>
				modeEdit = 1; // Reset to Year
 800433a:	4b6e      	ldr	r3, [pc, #440]	; (80044f4 <main+0x6d8>)
 800433c:	2201      	movs	r2, #1
 800433e:	801a      	strh	r2, [r3, #0]
				mode = 0;	  // Back to General Mode
 8004340:	4b69      	ldr	r3, [pc, #420]	; (80044e8 <main+0x6cc>)
 8004342:	2200      	movs	r2, #0
 8004344:	801a      	strh	r2, [r3, #0]
			}
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 8004346:	4b6e      	ldr	r3, [pc, #440]	; (8004500 <main+0x6e4>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06d      	beq.n	800442a <main+0x60e>
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <main+0x6e8>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	f083 0301 	eor.w	r3, r3, #1
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d066      	beq.n	800442a <main+0x60e>
 800435c:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <main+0x6cc>)
 800435e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d161      	bne.n	800442a <main+0x60e>
			if (modeEdit == 1){
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <main+0x6d8>)
 8004368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d109      	bne.n	8004384 <main+0x568>
				year--;
 8004370:	4b65      	ldr	r3, [pc, #404]	; (8004508 <main+0x6ec>)
 8004372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29b      	uxth	r3, r3
 800437c:	b21a      	sxth	r2, r3
 800437e:	4b62      	ldr	r3, [pc, #392]	; (8004508 <main+0x6ec>)
 8004380:	801a      	strh	r2, [r3, #0]
 8004382:	e04a      	b.n	800441a <main+0x5fe>
			}else if (modeEdit == 2){
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <main+0x6d8>)
 8004386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d109      	bne.n	80043a2 <main+0x586>
				monthIndex--;
 800438e:	4b5f      	ldr	r3, [pc, #380]	; (800450c <main+0x6f0>)
 8004390:	f993 3000 	ldrsb.w	r3, [r3]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	b25a      	sxtb	r2, r3
 800439c:	4b5b      	ldr	r3, [pc, #364]	; (800450c <main+0x6f0>)
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e03b      	b.n	800441a <main+0x5fe>
			}else if (modeEdit == 3){
 80043a2:	4b54      	ldr	r3, [pc, #336]	; (80044f4 <main+0x6d8>)
 80043a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d109      	bne.n	80043c0 <main+0x5a4>
				date--;
 80043ac:	4b58      	ldr	r3, [pc, #352]	; (8004510 <main+0x6f4>)
 80043ae:	f993 3000 	ldrsb.w	r3, [r3]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	b25a      	sxtb	r2, r3
 80043ba:	4b55      	ldr	r3, [pc, #340]	; (8004510 <main+0x6f4>)
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e02c      	b.n	800441a <main+0x5fe>
			}else if (modeEdit == 4){
 80043c0:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <main+0x6d8>)
 80043c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d109      	bne.n	80043de <main+0x5c2>
				dayIndex--;
 80043ca:	4b52      	ldr	r3, [pc, #328]	; (8004514 <main+0x6f8>)
 80043cc:	f993 3000 	ldrsb.w	r3, [r3]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	b25a      	sxtb	r2, r3
 80043d8:	4b4e      	ldr	r3, [pc, #312]	; (8004514 <main+0x6f8>)
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e01d      	b.n	800441a <main+0x5fe>
			}else if (modeEdit == 5){
 80043de:	4b45      	ldr	r3, [pc, #276]	; (80044f4 <main+0x6d8>)
 80043e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	d105      	bne.n	80043f4 <main+0x5d8>
				hourNum--;
 80043e8:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <main+0x6fc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <main+0x6fc>)
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e012      	b.n	800441a <main+0x5fe>
			}else if (modeEdit == 6){
 80043f4:	4b3f      	ldr	r3, [pc, #252]	; (80044f4 <main+0x6d8>)
 80043f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d105      	bne.n	800440a <main+0x5ee>
				minuteNum--;
 80043fe:	4b47      	ldr	r3, [pc, #284]	; (800451c <main+0x700>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3b01      	subs	r3, #1
 8004404:	4a45      	ldr	r2, [pc, #276]	; (800451c <main+0x700>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e007      	b.n	800441a <main+0x5fe>
			}else if (modeEdit == 7){
 800440a:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <main+0x6d8>)
 800440c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004410:	2b07      	cmp	r3, #7
 8004412:	d102      	bne.n	800441a <main+0x5fe>
				secondNum = 0;
 8004414:	4b42      	ldr	r3, [pc, #264]	; (8004520 <main+0x704>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 800441a:	4b42      	ldr	r3, [pc, #264]	; (8004524 <main+0x708>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 8004420:	f7fd fece 	bl	80021c0 <resetPrevNum>
			isPressButton3 = true;
 8004424:	4b37      	ldr	r3, [pc, #220]	; (8004504 <main+0x6e8>)
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 800442a:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <main+0x70c>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8099 	beq.w	8004566 <main+0x74a>
 8004434:	4b3d      	ldr	r3, [pc, #244]	; (800452c <main+0x710>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	f083 0301 	eor.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8091 	beq.w	8004566 <main+0x74a>
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <main+0x6cc>)
 8004446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	f040 808b 	bne.w	8004566 <main+0x74a>
			if (modeEdit == 1){
 8004450:	4b28      	ldr	r3, [pc, #160]	; (80044f4 <main+0x6d8>)
 8004452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d109      	bne.n	800446e <main+0x652>
				year++;
 800445a:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <main+0x6ec>)
 800445c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004460:	b29b      	uxth	r3, r3
 8004462:	3301      	adds	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	b21a      	sxth	r2, r3
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <main+0x6ec>)
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	e073      	b.n	8004556 <main+0x73a>
			}else if (modeEdit == 2){
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <main+0x6d8>)
 8004470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d109      	bne.n	800448c <main+0x670>
				monthIndex++;
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <main+0x6f0>)
 800447a:	f993 3000 	ldrsb.w	r3, [r3]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3301      	adds	r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	b25a      	sxtb	r2, r3
 8004486:	4b21      	ldr	r3, [pc, #132]	; (800450c <main+0x6f0>)
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e064      	b.n	8004556 <main+0x73a>
			}else if (modeEdit == 3){
 800448c:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <main+0x6d8>)
 800448e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d109      	bne.n	80044aa <main+0x68e>
				date++;
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <main+0x6f4>)
 8004498:	f993 3000 	ldrsb.w	r3, [r3]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <main+0x6f4>)
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e055      	b.n	8004556 <main+0x73a>
			}else if (modeEdit == 4){
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <main+0x6d8>)
 80044ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d109      	bne.n	80044c8 <main+0x6ac>
				dayIndex++;
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <main+0x6f8>)
 80044b6:	f993 3000 	ldrsb.w	r3, [r3]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	3301      	adds	r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	b25a      	sxtb	r2, r3
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <main+0x6f8>)
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e046      	b.n	8004556 <main+0x73a>
			}else if (modeEdit == 5){
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <main+0x6d8>)
 80044ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d12e      	bne.n	8004530 <main+0x714>
				hourNum++;
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <main+0x6fc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <main+0x6fc>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e03b      	b.n	8004556 <main+0x73a>
 80044de:	bf00      	nop
 80044e0:	200002e7 	.word	0x200002e7
 80044e4:	200002eb 	.word	0x200002eb
 80044e8:	200002e4 	.word	0x200002e4
 80044ec:	200002f8 	.word	0x200002f8
 80044f0:	200002f0 	.word	0x200002f0
 80044f4:	2000005a 	.word	0x2000005a
 80044f8:	200002e6 	.word	0x200002e6
 80044fc:	200002ea 	.word	0x200002ea
 8004500:	200002e8 	.word	0x200002e8
 8004504:	200002ec 	.word	0x200002ec
 8004508:	200000b2 	.word	0x200000b2
 800450c:	200000b1 	.word	0x200000b1
 8004510:	20000061 	.word	0x20000061
 8004514:	200000b0 	.word	0x200000b0
 8004518:	20000040 	.word	0x20000040
 800451c:	2000003c 	.word	0x2000003c
 8004520:	20000038 	.word	0x20000038
 8004524:	20000050 	.word	0x20000050
 8004528:	200002e9 	.word	0x200002e9
 800452c:	200002ed 	.word	0x200002ed
			}else if (modeEdit == 6){
 8004530:	4b8e      	ldr	r3, [pc, #568]	; (800476c <main+0x950>)
 8004532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004536:	2b06      	cmp	r3, #6
 8004538:	d105      	bne.n	8004546 <main+0x72a>
				minuteNum++;
 800453a:	4b8d      	ldr	r3, [pc, #564]	; (8004770 <main+0x954>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	4a8b      	ldr	r2, [pc, #556]	; (8004770 <main+0x954>)
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e007      	b.n	8004556 <main+0x73a>
			}else if (modeEdit == 7){
 8004546:	4b89      	ldr	r3, [pc, #548]	; (800476c <main+0x950>)
 8004548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800454c:	2b07      	cmp	r3, #7
 800454e:	d102      	bne.n	8004556 <main+0x73a>
				secondNum = 0;
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <main+0x958>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
			}
			halfsecondState = false;
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <main+0x95c>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
			resetPrevNum();
 800455c:	f7fd fe30 	bl	80021c0 <resetPrevNum>
			isPressButton4 = true;
 8004560:	4b86      	ldr	r3, [pc, #536]	; (800477c <main+0x960>)
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
		}



		//Adjust Alarm Mode For Mode 2 and 200
		if (pressButton2 == true && isPressButton2 == false && mode == 2){ // initial time when pressButton2
 8004566:	4b86      	ldr	r3, [pc, #536]	; (8004780 <main+0x964>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d029      	beq.n	80045c2 <main+0x7a6>
 800456e:	4b85      	ldr	r3, [pc, #532]	; (8004784 <main+0x968>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	f083 0301 	eor.w	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d022      	beq.n	80045c2 <main+0x7a6>
 800457c:	4b82      	ldr	r3, [pc, #520]	; (8004788 <main+0x96c>)
 800457e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d11d      	bne.n	80045c2 <main+0x7a6>
			isPressButton2 = true;
 8004586:	4b7f      	ldr	r3, [pc, #508]	; (8004784 <main+0x968>)
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
			alarmIsOn = !alarmIsOn;
 800458c:	4b7f      	ldr	r3, [pc, #508]	; (800478c <main+0x970>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f083 0301 	eor.w	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b79      	ldr	r3, [pc, #484]	; (800478c <main+0x970>)
 80045a8:	701a      	strb	r2, [r3, #0]
			displayAlarmIcon(alarmIsOn);
 80045aa:	4b78      	ldr	r3, [pc, #480]	; (800478c <main+0x970>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd fb7e 	bl	8001cb0 <displayAlarmIcon>
			prevSecondCounter = millisecondHAL;
 80045b4:	4b76      	ldr	r3, [pc, #472]	; (8004790 <main+0x974>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	4976      	ldr	r1, [pc, #472]	; (8004794 <main+0x978>)
 80045bc:	e9c1 2300 	strd	r2, r3, [r1]
 80045c0:	e030      	b.n	8004624 <main+0x808>
		}
		else if (pressButton2 == true && isPressButton2 == true && mode == 2 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 80045c2:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <main+0x964>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d02c      	beq.n	8004624 <main+0x808>
 80045ca:	4b6e      	ldr	r3, [pc, #440]	; (8004784 <main+0x968>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d028      	beq.n	8004624 <main+0x808>
 80045d2:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <main+0x96c>)
 80045d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d123      	bne.n	8004624 <main+0x808>
 80045dc:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <main+0x974>)
 80045de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045e2:	4b6c      	ldr	r3, [pc, #432]	; (8004794 <main+0x978>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	ebb0 0a02 	subs.w	sl, r0, r2
 80045ec:	eb61 0b03 	sbc.w	fp, r1, r3
 80045f0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	455b      	cmp	r3, fp
 80045fa:	bf08      	it	eq
 80045fc:	4552      	cmpeq	r2, sl
 80045fe:	d211      	bcs.n	8004624 <main+0x808>
			buzzerSound(70);
 8004600:	2046      	movs	r0, #70	; 0x46
 8004602:	f7fe fc95 	bl	8002f30 <buzzerSound>
			modeEdit = 1; // Reset to Hour First time
 8004606:	4b59      	ldr	r3, [pc, #356]	; (800476c <main+0x950>)
 8004608:	2201      	movs	r2, #1
 800460a:	801a      	strh	r2, [r3, #0]
			mode = 200;
 800460c:	4b5e      	ldr	r3, [pc, #376]	; (8004788 <main+0x96c>)
 800460e:	22c8      	movs	r2, #200	; 0xc8
 8004610:	801a      	strh	r2, [r3, #0]
			alarmIsOn = true; // always on when editing this alarm
 8004612:	4b5e      	ldr	r3, [pc, #376]	; (800478c <main+0x970>)
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004618:	4b5d      	ldr	r3, [pc, #372]	; (8004790 <main+0x974>)
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	495d      	ldr	r1, [pc, #372]	; (8004794 <main+0x978>)
 8004620:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//Exit Alarm Time Mode
		if (pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 200){
 8004624:	4b56      	ldr	r3, [pc, #344]	; (8004780 <main+0x964>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02f      	beq.n	800468c <main+0x870>
 800462c:	4b55      	ldr	r3, [pc, #340]	; (8004784 <main+0x968>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f083 0301 	eor.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d028      	beq.n	800468c <main+0x870>
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <main+0x974>)
 800463c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004640:	4b54      	ldr	r3, [pc, #336]	; (8004794 <main+0x978>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	1a86      	subs	r6, r0, r2
 8004648:	603e      	str	r6, [r7, #0]
 800464a:	eb61 0303 	sbc.w	r3, r1, r3
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800465c:	428b      	cmp	r3, r1
 800465e:	bf08      	it	eq
 8004660:	4282      	cmpeq	r2, r0
 8004662:	d213      	bcs.n	800468c <main+0x870>
 8004664:	4b48      	ldr	r3, [pc, #288]	; (8004788 <main+0x96c>)
 8004666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800466a:	2bc8      	cmp	r3, #200	; 0xc8
 800466c:	d10e      	bne.n	800468c <main+0x870>
			isPressButton2 = true;
 800466e:	4b45      	ldr	r3, [pc, #276]	; (8004784 <main+0x968>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
			modeEdit = 1;  // Reset to Hour First time
 8004674:	4b3d      	ldr	r3, [pc, #244]	; (800476c <main+0x950>)
 8004676:	2201      	movs	r2, #1
 8004678:	801a      	strh	r2, [r3, #0]
			mode = 2;
 800467a:	4b43      	ldr	r3, [pc, #268]	; (8004788 <main+0x96c>)
 800467c:	2202      	movs	r2, #2
 800467e:	801a      	strh	r2, [r3, #0]
			prevSecondCounter = millisecondHAL;
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <main+0x974>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	4943      	ldr	r1, [pc, #268]	; (8004794 <main+0x978>)
 8004688:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//Edit Mode
		if (pressButton1 == true && isPressButton1 == false && mode == 200){ // increase mode only once
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <main+0x97c>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d022      	beq.n	80046da <main+0x8be>
 8004694:	4b41      	ldr	r3, [pc, #260]	; (800479c <main+0x980>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f083 0301 	eor.w	r3, r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01b      	beq.n	80046da <main+0x8be>
 80046a2:	4b39      	ldr	r3, [pc, #228]	; (8004788 <main+0x96c>)
 80046a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a8:	2bc8      	cmp	r3, #200	; 0xc8
 80046aa:	d116      	bne.n	80046da <main+0x8be>
			modeEdit++;
 80046ac:	4b2f      	ldr	r3, [pc, #188]	; (800476c <main+0x950>)
 80046ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	b21a      	sxth	r2, r3
 80046ba:	4b2c      	ldr	r3, [pc, #176]	; (800476c <main+0x950>)
 80046bc:	801a      	strh	r2, [r3, #0]
			isPressButton1 = true;
 80046be:	4b37      	ldr	r3, [pc, #220]	; (800479c <main+0x980>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
			if (modeEdit == 3){	 // finish loop edit
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <main+0x950>)
 80046c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d105      	bne.n	80046da <main+0x8be>
				modeEdit = 1; // Reset to Hour
 80046ce:	4b27      	ldr	r3, [pc, #156]	; (800476c <main+0x950>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	801a      	strh	r2, [r3, #0]
				mode = 2;	  // Back to Alarm Mode
 80046d4:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <main+0x96c>)
 80046d6:	2202      	movs	r2, #2
 80046d8:	801a      	strh	r2, [r3, #0]
			}
		}
		//Forward
		if (pressButton3 == true && isPressButton3 == false && mode == 200){ // increase value
 80046da:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <main+0x984>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d028      	beq.n	8004734 <main+0x918>
 80046e2:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <main+0x988>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	f083 0301 	eor.w	r3, r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d021      	beq.n	8004734 <main+0x918>
 80046f0:	4b25      	ldr	r3, [pc, #148]	; (8004788 <main+0x96c>)
 80046f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f6:	2bc8      	cmp	r3, #200	; 0xc8
 80046f8:	d11c      	bne.n	8004734 <main+0x918>
			if (modeEdit == 1){
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <main+0x950>)
 80046fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <main+0x8f4>
				alarmHour--;
 8004704:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <main+0x98c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3b01      	subs	r3, #1
 800470a:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <main+0x98c>)
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e009      	b.n	8004724 <main+0x908>
			}else if (modeEdit == 2){
 8004710:	4b16      	ldr	r3, [pc, #88]	; (800476c <main+0x950>)
 8004712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d104      	bne.n	8004724 <main+0x908>
				alarmMinute--;
 800471a:	4b24      	ldr	r3, [pc, #144]	; (80047ac <main+0x990>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3b01      	subs	r3, #1
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <main+0x990>)
 8004722:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <main+0x95c>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 800472a:	f7ff f823 	bl	8003774 <resetPrevAlarm>
			isPressButton3 = true;
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <main+0x988>)
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
		}
		//Backward
		if (pressButton4 == true && isPressButton4 == false && mode == 200){ // decrease value
 8004734:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <main+0x994>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d04d      	beq.n	80047d8 <main+0x9bc>
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <main+0x960>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f083 0301 	eor.w	r3, r3, #1
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d046      	beq.n	80047d8 <main+0x9bc>
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <main+0x96c>)
 800474c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004750:	2bc8      	cmp	r3, #200	; 0xc8
 8004752:	d141      	bne.n	80047d8 <main+0x9bc>
			if (modeEdit == 1){
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <main+0x950>)
 8004756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d12a      	bne.n	80047b4 <main+0x998>
				alarmHour++;
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <main+0x98c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a10      	ldr	r2, [pc, #64]	; (80047a8 <main+0x98c>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e02e      	b.n	80047c8 <main+0x9ac>
 800476a:	bf00      	nop
 800476c:	2000005a 	.word	0x2000005a
 8004770:	2000003c 	.word	0x2000003c
 8004774:	20000038 	.word	0x20000038
 8004778:	20000050 	.word	0x20000050
 800477c:	200002ed 	.word	0x200002ed
 8004780:	200002e7 	.word	0x200002e7
 8004784:	200002eb 	.word	0x200002eb
 8004788:	200002e4 	.word	0x200002e4
 800478c:	20000060 	.word	0x20000060
 8004790:	200002f8 	.word	0x200002f8
 8004794:	200002f0 	.word	0x200002f0
 8004798:	200002e6 	.word	0x200002e6
 800479c:	200002ea 	.word	0x200002ea
 80047a0:	200002e8 	.word	0x200002e8
 80047a4:	200002ec 	.word	0x200002ec
 80047a8:	200002d0 	.word	0x200002d0
 80047ac:	200002cc 	.word	0x200002cc
 80047b0:	200002e9 	.word	0x200002e9
			}else if (modeEdit == 2){
 80047b4:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <main+0xa14>)
 80047b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d104      	bne.n	80047c8 <main+0x9ac>
				alarmMinute++;
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <main+0xa18>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3301      	adds	r3, #1
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <main+0xa18>)
 80047c6:	6013      	str	r3, [r2, #0]
			}
			halfsecondState = false;
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <main+0xa1c>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
			resetPrevAlarm();
 80047ce:	f7fe ffd1 	bl	8003774 <resetPrevAlarm>
			isPressButton4 = true;
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <main+0xa20>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
		}


		//Reset isPressButton
		if (pressButton1 == false){
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <main+0xa24>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	f083 0301 	eor.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <main+0x9d0>
			isPressButton1 = false;
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <main+0xa28>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton2 == false){
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <main+0xa2c>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	f083 0301 	eor.w	r3, r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <main+0x9e4>
			isPressButton2 = false;
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <main+0xa30>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton3 == false){
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <main+0xa34>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f083 0301 	eor.w	r3, r3, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <main+0x9f8>
			isPressButton3 = false;
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <main+0xa38>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
		}
		if (pressButton4 == false){
 8004814:	4b10      	ldr	r3, [pc, #64]	; (8004858 <main+0xa3c>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f083 0301 	eor.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	f43f ab3d 	beq.w	8003e9e <main+0x82>
			isPressButton4 = false;
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <main+0xa20>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
		calculationClock();
 800482a:	f7ff bb38 	b.w	8003e9e <main+0x82>
 800482e:	bf00      	nop
 8004830:	2000005a 	.word	0x2000005a
 8004834:	200002cc 	.word	0x200002cc
 8004838:	20000050 	.word	0x20000050
 800483c:	200002ed 	.word	0x200002ed
 8004840:	200002e6 	.word	0x200002e6
 8004844:	200002ea 	.word	0x200002ea
 8004848:	200002e7 	.word	0x200002e7
 800484c:	200002eb 	.word	0x200002eb
 8004850:	200002e8 	.word	0x200002e8
 8004854:	200002ec 	.word	0x200002ec
 8004858:	200002e9 	.word	0x200002e9

0800485c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b0b8      	sub	sp, #224	; 0xe0
 8004860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004862:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004866:	2234      	movs	r2, #52	; 0x34
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f007 f916 	bl	800ba9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004870:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004880:	f107 0308 	add.w	r3, r7, #8
 8004884:	2290      	movs	r2, #144	; 0x90
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f007 f907 	bl	800ba9c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800488e:	f003 fc45 	bl	800811c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b3e      	ldr	r3, [pc, #248]	; (800498c <SystemClock_Config+0x130>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	4a3d      	ldr	r2, [pc, #244]	; (800498c <SystemClock_Config+0x130>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	6413      	str	r3, [r2, #64]	; 0x40
 800489e:	4b3b      	ldr	r3, [pc, #236]	; (800498c <SystemClock_Config+0x130>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048aa:	4b39      	ldr	r3, [pc, #228]	; (8004990 <SystemClock_Config+0x134>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a38      	ldr	r2, [pc, #224]	; (8004990 <SystemClock_Config+0x134>)
 80048b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <SystemClock_Config+0x134>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80048c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80048cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048d0:	2302      	movs	r3, #2
 80048d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80048de:	2304      	movs	r3, #4
 80048e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 80048e4:	23c8      	movs	r3, #200	; 0xc8
 80048e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048ea:	2302      	movs	r3, #2
 80048ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80048f0:	2309      	movs	r3, #9
 80048f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80048f6:	2302      	movs	r3, #2
 80048f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004900:	4618      	mov	r0, r3
 8004902:	f003 fc6b 	bl	80081dc <HAL_RCC_OscConfig>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800490c:	f000 f8a6 	bl	8004a5c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004910:	f003 fc14 	bl	800813c <HAL_PWREx_EnableOverDrive>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800491a:	f000 f89f 	bl	8004a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800491e:	230f      	movs	r3, #15
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004924:	2302      	movs	r3, #2
 8004926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800493c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004940:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004944:	2106      	movs	r1, #6
 8004946:	4618      	mov	r0, r3
 8004948:	f003 fef6 	bl	8008738 <HAL_RCC_ClockConfig>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8004952:	f000 f883 	bl	8004a5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <SystemClock_Config+0x138>)
 8004958:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800495a:	2300      	movs	r3, #0
 800495c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800495e:	2300      	movs	r3, #0
 8004960:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004962:	2300      	movs	r3, #0
 8004964:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004966:	2300      	movs	r3, #0
 8004968:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800496a:	2300      	movs	r3, #0
 800496c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004970:	f107 0308 	add.w	r3, r7, #8
 8004974:	4618      	mov	r0, r3
 8004976:	f004 f8e1 	bl	8008b3c <HAL_RCCEx_PeriphCLKConfig>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8004980:	f000 f86c 	bl	8004a5c <Error_Handler>
  }
}
 8004984:	bf00      	nop
 8004986:	37e0      	adds	r7, #224	; 0xe0
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023800 	.word	0x40023800
 8004990:	40007000 	.word	0x40007000
 8004994:	00204340 	.word	0x00204340

08004998 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 80049a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049a8:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 80049aa:	2300      	movs	r3, #0
 80049ac:	737b      	strb	r3, [r7, #13]

	while (length--){
 80049ae:	e023      	b.n	80049f8 <CRC16_2+0x60>
		crc ^= *ptr++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	4053      	eors	r3, r2
 80049be:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 80049c0:	2300      	movs	r3, #0
 80049c2:	737b      	strb	r3, [r7, #13]
 80049c4:	e015      	b.n	80049f2 <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <CRC16_2+0x4e>
				crc >>= 1;
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 80049d6:	89fb      	ldrh	r3, [r7, #14]
 80049d8:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80049dc:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80049e0:	43db      	mvns	r3, r3
 80049e2:	81fb      	strh	r3, [r7, #14]
 80049e4:	e002      	b.n	80049ec <CRC16_2+0x54>
			}
			else
				crc >>= 1;
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++){
 80049ec:	7b7b      	ldrb	r3, [r7, #13]
 80049ee:	3301      	adds	r3, #1
 80049f0:	737b      	strb	r3, [r7, #13]
 80049f2:	7b7b      	ldrb	r3, [r7, #13]
 80049f4:	2b07      	cmp	r3, #7
 80049f6:	d9e6      	bls.n	80049c6 <CRC16_2+0x2e>
	while (length--){
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	1e5a      	subs	r2, r3, #1
 80049fc:	70fa      	strb	r2, [r7, #3]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1d6      	bne.n	80049b0 <CRC16_2+0x18>
		}
	}
	return crc;
 8004a02:	89fb      	ldrh	r3, [r7, #14]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]

	//On Board
	//Blue
	if (GPIO_Pin == GPIO_PIN_13){
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a20:	d110      	bne.n	8004a44 <HAL_GPIO_EXTI_Callback+0x34>
		userResetButton = 1;
 8004a22:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Interrupt pin13 \n\r");
 8004a28:	4909      	ldr	r1, [pc, #36]	; (8004a50 <HAL_GPIO_EXTI_Callback+0x40>)
 8004a2a:	480a      	ldr	r0, [pc, #40]	; (8004a54 <HAL_GPIO_EXTI_Callback+0x44>)
 8004a2c:	f007 fc82 	bl	800c334 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8004a30:	4808      	ldr	r0, [pc, #32]	; (8004a54 <HAL_GPIO_EXTI_Callback+0x44>)
 8004a32:	f7fb fc05 	bl	8000240 <strlen>
 8004a36:	4603      	mov	r3, r0
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	23c8      	movs	r3, #200	; 0xc8
 8004a3c:	4905      	ldr	r1, [pc, #20]	; (8004a54 <HAL_GPIO_EXTI_Callback+0x44>)
 8004a3e:	4806      	ldr	r0, [pc, #24]	; (8004a58 <HAL_GPIO_EXTI_Callback+0x48>)
 8004a40:	f006 fad4 	bl	800afec <HAL_UART_Transmit>
	}

}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200002ee 	.word	0x200002ee
 8004a50:	0800e844 	.word	0x0800e844
 8004a54:	2000043c 	.word	0x2000043c
 8004a58:	2000062c 	.word	0x2000062c

08004a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8004a60:	e7fe      	b.n	8004a60 <Error_Handler+0x4>
	...

08004a64 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <MX_RNG_Init+0x20>)
 8004a6a:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <MX_RNG_Init+0x24>)
 8004a6c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004a6e:	4805      	ldr	r0, [pc, #20]	; (8004a84 <MX_RNG_Init+0x20>)
 8004a70:	f004 fc8c 	bl	800938c <HAL_RNG_Init>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8004a7a:	f7ff ffef 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200004d4 	.word	0x200004d4
 8004a88:	50060800 	.word	0x50060800

08004a8c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <HAL_RNG_MspInit+0x38>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10b      	bne.n	8004ab6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RNG_MspInit+0x3c>)
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <HAL_RNG_MspInit+0x3c>)
 8004aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa8:	6353      	str	r3, [r2, #52]	; 0x34
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <HAL_RNG_MspInit+0x3c>)
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	50060800 	.word	0x50060800
 8004ac8:	40023800 	.word	0x40023800

08004acc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <MX_SPI5_Init+0x78>)
 8004ad4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004adc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004ade:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004aea:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afe:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004b2a:	4805      	ldr	r0, [pc, #20]	; (8004b40 <MX_SPI5_Init+0x74>)
 8004b2c:	f004 fc58 	bl	80093e0 <HAL_SPI_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8004b36:	f7ff ff91 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200004e4 	.word	0x200004e4
 8004b44:	40015000 	.word	0x40015000

08004b48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b50:	f107 0314 	add.w	r3, r7, #20
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	609a      	str	r2, [r3, #8]
 8004b5c:	60da      	str	r2, [r3, #12]
 8004b5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a17      	ldr	r2, [pc, #92]	; (8004bc4 <HAL_SPI_MspInit+0x7c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d128      	bne.n	8004bbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <HAL_SPI_MspInit+0x80>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <HAL_SPI_MspInit+0x80>)
 8004b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b74:	6453      	str	r3, [r2, #68]	; 0x44
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <HAL_SPI_MspInit+0x80>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <HAL_SPI_MspInit+0x80>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <HAL_SPI_MspInit+0x80>)
 8004b88:	f043 0320 	orr.w	r3, r3, #32
 8004b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <HAL_SPI_MspInit+0x80>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004b9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004bac:	2305      	movs	r3, #5
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004bb0:	f107 0314 	add.w	r3, r7, #20
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4805      	ldr	r0, [pc, #20]	; (8004bcc <HAL_SPI_MspInit+0x84>)
 8004bb8:	f002 f8f2 	bl	8006da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40015000 	.word	0x40015000
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40021400 	.word	0x40021400

08004bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <HAL_MspInit+0x44>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <HAL_MspInit+0x44>)
 8004bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6413      	str	r3, [r2, #64]	; 0x40
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_MspInit+0x44>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <HAL_MspInit+0x44>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <HAL_MspInit+0x44>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_MspInit+0x44>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c1c:	f001 fb7c 	bl	8006318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c28:	4807      	ldr	r0, [pc, #28]	; (8004c48 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8004c2a:	f005 f9ff 	bl	800a02c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <TIM1_UP_TIM10_IRQHandler+0x28>)
 8004c36:	6013      	str	r3, [r2, #0]
  millisecondStopWatch++;
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004c40:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000594 	.word	0x20000594
 8004c4c:	200002d4 	.word	0x200002d4
 8004c50:	200002d8 	.word	0x200002d8

08004c54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c58:	4803      	ldr	r0, [pc, #12]	; (8004c68 <TIM2_IRQHandler+0x14>)
 8004c5a:	f005 f9e7 	bl	800a02c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 8004c5e:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <TIM2_IRQHandler+0x18>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c64:	bf00      	nop
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	200005e0 	.word	0x200005e0
 8004c6c:	200002dc 	.word	0x200002dc

08004c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c78:	f002 fa70 	bl	800715c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
	return 1;
 8004c84:	2301      	movs	r3, #1
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <_kill>:

int _kill(int pid, int sig)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c9a:	f006 fed5 	bl	800ba48 <__errno>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2216      	movs	r2, #22
 8004ca2:	601a      	str	r2, [r3, #0]
	return -1;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <_exit>:

void _exit (int status)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ffe7 	bl	8004c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cc2:	e7fe      	b.n	8004cc2 <_exit+0x12>

08004cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e00a      	b.n	8004cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cd6:	f3af 8000 	nop.w
 8004cda:	4601      	mov	r1, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	60ba      	str	r2, [r7, #8]
 8004ce2:	b2ca      	uxtb	r2, r1
 8004ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	dbf0      	blt.n	8004cd6 <_read+0x12>
	}

return len;
 8004cf4:	687b      	ldr	r3, [r7, #4]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e009      	b.n	8004d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	60ba      	str	r2, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3301      	adds	r3, #1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	dbf1      	blt.n	8004d10 <_write+0x12>
	}
	return len;
 8004d2c:	687b      	ldr	r3, [r7, #4]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <_close>:

int _close(int file)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <_isatty>:

int _isatty(int file)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
	return 1;
 8004d76:	2301      	movs	r3, #1
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004da8:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <_sbrk+0x5c>)
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <_sbrk+0x60>)
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <_sbrk+0x64>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dbc:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <_sbrk+0x64>)
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <_sbrk+0x68>)
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <_sbrk+0x64>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d207      	bcs.n	8004de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dd0:	f006 fe3a 	bl	800ba48 <__errno>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	220c      	movs	r2, #12
 8004dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295
 8004dde:	e009      	b.n	8004df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004de0:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <_sbrk+0x64>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <_sbrk+0x64>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <_sbrk+0x64>)
 8004df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20080000 	.word	0x20080000
 8004e00:	00000400 	.word	0x00000400
 8004e04:	2000038c 	.word	0x2000038c
 8004e08:	200007d0 	.word	0x200007d0

08004e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e10:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <SystemInit+0x5c>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <SystemInit+0x5c>)
 8004e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e20:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <SystemInit+0x60>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <SystemInit+0x60>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <SystemInit+0x60>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e32:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <SystemInit+0x60>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	490d      	ldr	r1, [pc, #52]	; (8004e6c <SystemInit+0x60>)
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <SystemInit+0x64>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <SystemInit+0x60>)
 8004e40:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <SystemInit+0x68>)
 8004e42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <SystemInit+0x60>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <SystemInit+0x60>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <SystemInit+0x60>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <SystemInit+0x5c>)
 8004e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e5c:	609a      	str	r2, [r3, #8]
#endif
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000ed00 	.word	0xe000ed00
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	fef6ffff 	.word	0xfef6ffff
 8004e74:	24003010 	.word	0x24003010

08004e78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e7e:	f107 0310 	add.w	r3, r7, #16
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	609a      	str	r2, [r3, #8]
 8004e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004e98:	4a20      	ldr	r2, [pc, #128]	; (8004f1c <MX_TIM1_Init+0xa4>)
 8004e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004e9e:	22c7      	movs	r2, #199	; 0xc7
 8004ea0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea2:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004eaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004eb6:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ebc:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004ec2:	4815      	ldr	r0, [pc, #84]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004ec4:	f004 fe06 	bl	8009ad4 <HAL_TIM_Base_Init>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004ece:	f7ff fdc5 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ed8:	f107 0310 	add.w	r3, r7, #16
 8004edc:	4619      	mov	r1, r3
 8004ede:	480e      	ldr	r0, [pc, #56]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004ee0:	f005 fad4 	bl	800a48c <HAL_TIM_ConfigClockSource>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004eea:	f7ff fdb7 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004efa:	1d3b      	adds	r3, r7, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4806      	ldr	r0, [pc, #24]	; (8004f18 <MX_TIM1_Init+0xa0>)
 8004f00:	f005 ff7a 	bl	800adf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004f0a:	f7ff fda7 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004f0e:	bf00      	nop
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000594 	.word	0x20000594
 8004f1c:	40010000 	.word	0x40010000

08004f20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f26:	f107 0310 	add.w	r3, r7, #16
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	609a      	str	r2, [r3, #8]
 8004f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8004f46:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8004f54:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f56:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5c:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f68:	4813      	ldr	r0, [pc, #76]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f6a:	f004 fdb3 	bl	8009ad4 <HAL_TIM_Base_Init>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004f74:	f7ff fd72 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	4619      	mov	r1, r3
 8004f84:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004f86:	f005 fa81 	bl	800a48c <HAL_TIM_ConfigClockSource>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004f90:	f7ff fd64 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f94:	2300      	movs	r3, #0
 8004f96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4805      	ldr	r0, [pc, #20]	; (8004fb8 <MX_TIM2_Init+0x98>)
 8004fa2:	f005 ff29 	bl	800adf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004fac:	f7ff fd56 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004fb0:	bf00      	nop
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	200005e0 	.word	0x200005e0

08004fbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	609a      	str	r2, [r3, #8]
 8004fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fd0:	f107 031c 	add.w	r3, r7, #28
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fdc:	463b      	mov	r3, r7
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
 8004fe6:	60da      	str	r2, [r3, #12]
 8004fe8:	611a      	str	r2, [r3, #16]
 8004fea:	615a      	str	r2, [r3, #20]
 8004fec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004fee:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8004ff0:	4a2d      	ldr	r2, [pc, #180]	; (80050a8 <MX_TIM3_Init+0xec>)
 8004ff2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 8004ff4:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8004ff6:	22f9      	movs	r2, #249	; 0xf9
 8004ff8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ffa:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005000:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005006:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005008:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <MX_TIM3_Init+0xe8>)
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800500e:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005010:	2200      	movs	r2, #0
 8005012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005014:	4823      	ldr	r0, [pc, #140]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005016:	f004 fd5d 	bl	8009ad4 <HAL_TIM_Base_Init>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005020:	f7ff fd1c 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005028:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800502a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800502e:	4619      	mov	r1, r3
 8005030:	481c      	ldr	r0, [pc, #112]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005032:	f005 fa2b 	bl	800a48c <HAL_TIM_ConfigClockSource>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800503c:	f7ff fd0e 	bl	8004a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005040:	4818      	ldr	r0, [pc, #96]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005042:	f004 fe17 	bl	8009c74 <HAL_TIM_PWM_Init>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800504c:	f7ff fd06 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005054:	2300      	movs	r3, #0
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005058:	f107 031c 	add.w	r3, r7, #28
 800505c:	4619      	mov	r1, r3
 800505e:	4811      	ldr	r0, [pc, #68]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005060:	f005 feca 	bl	800adf8 <HAL_TIMEx_MasterConfigSynchronization>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800506a:	f7ff fcf7 	bl	8004a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800506e:	2360      	movs	r3, #96	; 0x60
 8005070:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 8005072:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005076:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005080:	463b      	mov	r3, r7
 8005082:	2200      	movs	r2, #0
 8005084:	4619      	mov	r1, r3
 8005086:	4807      	ldr	r0, [pc, #28]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005088:	f005 f8f0 	bl	800a26c <HAL_TIM_PWM_ConfigChannel>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8005092:	f7ff fce3 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005096:	4803      	ldr	r0, [pc, #12]	; (80050a4 <MX_TIM3_Init+0xe8>)
 8005098:	f000 f85c 	bl	8005154 <HAL_TIM_MspPostInit>

}
 800509c:	bf00      	nop
 800509e:	3738      	adds	r7, #56	; 0x38
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000548 	.word	0x20000548
 80050a8:	40000400 	.word	0x40000400

080050ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a23      	ldr	r2, [pc, #140]	; (8005148 <HAL_TIM_Base_MspInit+0x9c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d114      	bne.n	80050e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	4a22      	ldr	r2, [pc, #136]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2101      	movs	r1, #1
 80050da:	2019      	movs	r0, #25
 80050dc:	f001 fe29 	bl	8006d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050e0:	2019      	movs	r0, #25
 80050e2:	f001 fe42 	bl	8006d6a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80050e6:	e02a      	b.n	800513e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d114      	bne.n	800511c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6413      	str	r3, [r2, #64]	; 0x40
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800510a:	2200      	movs	r2, #0
 800510c:	2102      	movs	r1, #2
 800510e:	201c      	movs	r0, #28
 8005110:	f001 fe0f 	bl	8006d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005114:	201c      	movs	r0, #28
 8005116:	f001 fe28 	bl	8006d6a <HAL_NVIC_EnableIRQ>
}
 800511a:	e010      	b.n	800513e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <HAL_TIM_Base_MspInit+0xa4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10b      	bne.n	800513e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	6413      	str	r3, [r2, #64]	; 0x40
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_TIM_Base_MspInit+0xa0>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40023800 	.word	0x40023800
 8005150:	40000400 	.word	0x40000400

08005154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <HAL_TIM_MspPostInit+0x64>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d11b      	bne.n	80051ae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_TIM_MspPostInit+0x68>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <HAL_TIM_MspPostInit+0x68>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6313      	str	r3, [r2, #48]	; 0x30
 8005182:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <HAL_TIM_MspPostInit+0x68>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800518e:	2340      	movs	r3, #64	; 0x40
 8005190:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	2302      	movs	r3, #2
 8005194:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800519e:	2302      	movs	r3, #2
 80051a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a2:	f107 030c 	add.w	r3, r7, #12
 80051a6:	4619      	mov	r1, r3
 80051a8:	4805      	ldr	r0, [pc, #20]	; (80051c0 <HAL_TIM_MspPostInit+0x6c>)
 80051aa:	f001 fdf9 	bl	8006da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80051ae:	bf00      	nop
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40020000 	.word	0x40020000

080051c4 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <MX_UART4_Init+0x58>)
 80051ca:	4a15      	ldr	r2, [pc, #84]	; (8005220 <MX_UART4_Init+0x5c>)
 80051cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <MX_UART4_Init+0x58>)
 80051d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <MX_UART4_Init+0x58>)
 80051d8:	2200      	movs	r2, #0
 80051da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <MX_UART4_Init+0x58>)
 80051de:	2200      	movs	r2, #0
 80051e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80051e2:	4b0e      	ldr	r3, [pc, #56]	; (800521c <MX_UART4_Init+0x58>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <MX_UART4_Init+0x58>)
 80051ea:	220c      	movs	r2, #12
 80051ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <MX_UART4_Init+0x58>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <MX_UART4_Init+0x58>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <MX_UART4_Init+0x58>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <MX_UART4_Init+0x58>)
 8005202:	2200      	movs	r2, #0
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005206:	4805      	ldr	r0, [pc, #20]	; (800521c <MX_UART4_Init+0x58>)
 8005208:	f005 fea2 	bl	800af50 <HAL_UART_Init>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005212:	f7ff fc23 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000734 	.word	0x20000734
 8005220:	40004c00 	.word	0x40004c00

08005224 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <MX_USART1_UART_Init+0x58>)
 800522a:	4a15      	ldr	r2, [pc, #84]	; (8005280 <MX_USART1_UART_Init+0x5c>)
 800522c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <MX_USART1_UART_Init+0x58>)
 8005230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <MX_USART1_UART_Init+0x58>)
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <MX_USART1_UART_Init+0x58>)
 800523e:	2200      	movs	r2, #0
 8005240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005242:	4b0e      	ldr	r3, [pc, #56]	; (800527c <MX_USART1_UART_Init+0x58>)
 8005244:	2200      	movs	r2, #0
 8005246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <MX_USART1_UART_Init+0x58>)
 800524a:	220c      	movs	r2, #12
 800524c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <MX_USART1_UART_Init+0x58>)
 8005250:	2200      	movs	r2, #0
 8005252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <MX_USART1_UART_Init+0x58>)
 8005256:	2200      	movs	r2, #0
 8005258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <MX_USART1_UART_Init+0x58>)
 800525c:	2200      	movs	r2, #0
 800525e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <MX_USART1_UART_Init+0x58>)
 8005262:	2200      	movs	r2, #0
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005266:	4805      	ldr	r0, [pc, #20]	; (800527c <MX_USART1_UART_Init+0x58>)
 8005268:	f005 fe72 	bl	800af50 <HAL_UART_Init>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005272:	f7ff fbf3 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005276:	bf00      	nop
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	200006b0 	.word	0x200006b0
 8005280:	40011000 	.word	0x40011000

08005284 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005288:	4b14      	ldr	r3, [pc, #80]	; (80052dc <MX_USART3_UART_Init+0x58>)
 800528a:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <MX_USART3_UART_Init+0x5c>)
 800528c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <MX_USART3_UART_Init+0x58>)
 8005290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005294:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005296:	4b11      	ldr	r3, [pc, #68]	; (80052dc <MX_USART3_UART_Init+0x58>)
 8005298:	2200      	movs	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <MX_USART3_UART_Init+0x58>)
 800529e:	2200      	movs	r2, #0
 80052a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80052a2:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <MX_USART3_UART_Init+0x58>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <MX_USART3_UART_Init+0x58>)
 80052aa:	220c      	movs	r2, #12
 80052ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <MX_USART3_UART_Init+0x58>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <MX_USART3_UART_Init+0x58>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <MX_USART3_UART_Init+0x58>)
 80052bc:	2200      	movs	r2, #0
 80052be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <MX_USART3_UART_Init+0x58>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80052c6:	4805      	ldr	r0, [pc, #20]	; (80052dc <MX_USART3_UART_Init+0x58>)
 80052c8:	f005 fe42 	bl	800af50 <HAL_UART_Init>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80052d2:	f7ff fbc3 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	2000062c 	.word	0x2000062c
 80052e0:	40004800 	.word	0x40004800

080052e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a4e      	ldr	r2, [pc, #312]	; (800543c <HAL_UART_MspInit+0x158>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d128      	bne.n	8005358 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005306:	4b4e      	ldr	r3, [pc, #312]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	4a4d      	ldr	r2, [pc, #308]	; (8005440 <HAL_UART_MspInit+0x15c>)
 800530c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005310:	6413      	str	r3, [r2, #64]	; 0x40
 8005312:	4b4b      	ldr	r3, [pc, #300]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800531e:	4b48      	ldr	r3, [pc, #288]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a47      	ldr	r2, [pc, #284]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
 800532a:	4b45      	ldr	r3, [pc, #276]	; (8005440 <HAL_UART_MspInit+0x15c>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005336:	2303      	movs	r3, #3
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533a:	2302      	movs	r3, #2
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	2300      	movs	r3, #0
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005342:	2303      	movs	r3, #3
 8005344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005346:	2308      	movs	r3, #8
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800534a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800534e:	4619      	mov	r1, r3
 8005350:	483c      	ldr	r0, [pc, #240]	; (8005444 <HAL_UART_MspInit+0x160>)
 8005352:	f001 fd25 	bl	8006da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005356:	e06c      	b.n	8005432 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3a      	ldr	r2, [pc, #232]	; (8005448 <HAL_UART_MspInit+0x164>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d139      	bne.n	80053d6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005362:	4b37      	ldr	r3, [pc, #220]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	4a36      	ldr	r2, [pc, #216]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005368:	f043 0310 	orr.w	r3, r3, #16
 800536c:	6453      	str	r3, [r2, #68]	; 0x44
 800536e:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800537a:	4b31      	ldr	r3, [pc, #196]	; (8005440 <HAL_UART_MspInit+0x15c>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	6313      	str	r3, [r2, #48]	; 0x30
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a0:	2303      	movs	r3, #3
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80053a4:	2304      	movs	r3, #4
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ac:	4619      	mov	r1, r3
 80053ae:	4827      	ldr	r0, [pc, #156]	; (800544c <HAL_UART_MspInit+0x168>)
 80053b0:	f001 fcf6 	bl	8006da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b8:	2302      	movs	r3, #2
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c0:	2303      	movs	r3, #3
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053c4:	2307      	movs	r3, #7
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053cc:	4619      	mov	r1, r3
 80053ce:	481f      	ldr	r0, [pc, #124]	; (800544c <HAL_UART_MspInit+0x168>)
 80053d0:	f001 fce6 	bl	8006da0 <HAL_GPIO_Init>
}
 80053d4:	e02d      	b.n	8005432 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART3)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <HAL_UART_MspInit+0x16c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d128      	bne.n	8005432 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053e0:	4b17      	ldr	r3, [pc, #92]	; (8005440 <HAL_UART_MspInit+0x15c>)
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <HAL_UART_MspInit+0x15c>)
 80053e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ea:	6413      	str	r3, [r2, #64]	; 0x40
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <HAL_UART_MspInit+0x15c>)
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <HAL_UART_MspInit+0x15c>)
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	4a10      	ldr	r2, [pc, #64]	; (8005440 <HAL_UART_MspInit+0x15c>)
 80053fe:	f043 0308 	orr.w	r3, r3, #8
 8005402:	6313      	str	r3, [r2, #48]	; 0x30
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <HAL_UART_MspInit+0x15c>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005410:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005416:	2302      	movs	r3, #2
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541a:	2300      	movs	r3, #0
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800541e:	2303      	movs	r3, #3
 8005420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005422:	2307      	movs	r3, #7
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800542a:	4619      	mov	r1, r3
 800542c:	4805      	ldr	r0, [pc, #20]	; (8005444 <HAL_UART_MspInit+0x160>)
 800542e:	f001 fcb7 	bl	8006da0 <HAL_GPIO_Init>
}
 8005432:	bf00      	nop
 8005434:	3738      	adds	r7, #56	; 0x38
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40004c00 	.word	0x40004c00
 8005440:	40023800 	.word	0x40023800
 8005444:	40020c00 	.word	0x40020c00
 8005448:	40011000 	.word	0x40011000
 800544c:	40020400 	.word	0x40020400
 8005450:	40004800 	.word	0x40004800

08005454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800548c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800545a:	e003      	b.n	8005464 <LoopCopyDataInit>

0800545c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800545e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005462:	3104      	adds	r1, #4

08005464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005464:	480b      	ldr	r0, [pc, #44]	; (8005494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800546a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800546c:	d3f6      	bcc.n	800545c <CopyDataInit>
  ldr  r2, =_sbss
 800546e:	4a0b      	ldr	r2, [pc, #44]	; (800549c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005470:	e002      	b.n	8005478 <LoopFillZerobss>

08005472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005474:	f842 3b04 	str.w	r3, [r2], #4

08005478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800547a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800547c:	d3f9      	bcc.n	8005472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800547e:	f7ff fcc5 	bl	8004e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005482:	f006 fae7 	bl	800ba54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005486:	f7fe fcc9 	bl	8003e1c <main>
  bx  lr    
 800548a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800548c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005490:	0800eea4 	.word	0x0800eea4
  ldr  r0, =_sdata
 8005494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005498:	200002ac 	.word	0x200002ac
  ldr  r2, =_sbss
 800549c:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 80054a0:	200007cc 	.word	0x200007cc

080054a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054a4:	e7fe      	b.n	80054a4 <ADC_IRQHandler>

080054a6 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80054a6:	b590      	push	{r4, r7, lr}
 80054a8:	b08b      	sub	sp, #44	; 0x2c
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	4604      	mov	r4, r0
 80054ae:	4608      	mov	r0, r1
 80054b0:	4611      	mov	r1, r2
 80054b2:	461a      	mov	r2, r3
 80054b4:	4623      	mov	r3, r4
 80054b6:	80fb      	strh	r3, [r7, #6]
 80054b8:	4603      	mov	r3, r0
 80054ba:	80bb      	strh	r3, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
 80054c0:	4613      	mov	r3, r2
 80054c2:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	f1c3 0301 	rsb	r3, r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80054de:	e061      	b.n	80055a4 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	e018      	b.n	800551c <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	b298      	uxth	r0, r3
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	88bb      	ldrh	r3, [r7, #4]
 80054f4:	4413      	add	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	883a      	ldrh	r2, [r7, #0]
 80054fa:	4619      	mov	r1, r3
 80054fc:	f000 fd02 	bl	8005f04 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	b298      	uxth	r0, r3
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	b29b      	uxth	r3, r3
 8005508:	88ba      	ldrh	r2, [r7, #4]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	b29b      	uxth	r3, r3
 800550e:	883a      	ldrh	r2, [r7, #0]
 8005510:	4619      	mov	r1, r3
 8005512:	f000 fcf7 	bl	8005f04 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	3301      	adds	r3, #1
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	4413      	add	r3, r2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	429a      	cmp	r2, r3
 8005526:	dde0      	ble.n	80054ea <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e018      	b.n	8005564 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	b298      	uxth	r0, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	b29a      	uxth	r2, r3
 800553a:	88bb      	ldrh	r3, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	883a      	ldrh	r2, [r7, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	f000 fcde 	bl	8005f04 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	b298      	uxth	r0, r3
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	b29b      	uxth	r3, r3
 8005550:	88ba      	ldrh	r2, [r7, #4]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	b29b      	uxth	r3, r3
 8005556:	883a      	ldrh	r2, [r7, #0]
 8005558:	4619      	mov	r1, r3
 800555a:	f000 fcd3 	bl	8005f04 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	4413      	add	r3, r2
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	dde0      	ble.n	8005532 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	3301      	adds	r3, #1
 8005574:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	4413      	add	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	3302      	adds	r3, #2
 8005582:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	005a      	lsls	r2, r3, #1
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	dd09      	ble.n	80055a4 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	3b01      	subs	r3, #1
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3302      	adds	r3, #2
 80055a2:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	da99      	bge.n	80054e0 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	372c      	adds	r7, #44	; 0x2c
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}

080055b6 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80055b6:	b590      	push	{r4, r7, lr}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	4604      	mov	r4, r0
 80055be:	4608      	mov	r0, r1
 80055c0:	4611      	mov	r1, r2
 80055c2:	461a      	mov	r2, r3
 80055c4:	4623      	mov	r3, r4
 80055c6:	80fb      	strh	r3, [r7, #6]
 80055c8:	4603      	mov	r3, r0
 80055ca:	80bb      	strh	r3, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
 80055d0:	4613      	mov	r3, r2
 80055d2:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80055ea:	887a      	ldrh	r2, [r7, #2]
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f8:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80055fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	d501      	bpl.n	800560e <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 800560a:	2301      	movs	r3, #1
 800560c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8005614:	883a      	ldrh	r2, [r7, #0]
 8005616:	88bb      	ldrh	r3, [r7, #4]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005622:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8005626:	edd7 7a03 	vldr	s15, [r7, #12]
 800562a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005632:	d501      	bpl.n	8005638 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8005634:	2301      	movs	r3, #1
 8005636:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 800563e:	887a      	ldrh	r2, [r7, #2]
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	82fb      	strh	r3, [r7, #22]
 8005646:	e003      	b.n	8005650 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	887b      	ldrh	r3, [r7, #2]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8005650:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005652:	8afa      	ldrh	r2, [r7, #22]
 8005654:	88b9      	ldrh	r1, [r7, #4]
 8005656:	88f8      	ldrh	r0, [r7, #6]
 8005658:	f000 fd8a 	bl	8006170 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 800565c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800565e:	8afa      	ldrh	r2, [r7, #22]
 8005660:	8839      	ldrh	r1, [r7, #0]
 8005662:	88f8      	ldrh	r0, [r7, #6]
 8005664:	f000 fd84 	bl	8006170 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005668:	7cbb      	ldrb	r3, [r7, #18]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 800566e:	883a      	ldrh	r2, [r7, #0]
 8005670:	88bb      	ldrh	r3, [r7, #4]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	82bb      	strh	r3, [r7, #20]
 8005676:	e003      	b.n	8005680 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8005678:	88ba      	ldrh	r2, [r7, #4]
 800567a:	883b      	ldrh	r3, [r7, #0]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8005680:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005682:	8aba      	ldrh	r2, [r7, #20]
 8005684:	88b9      	ldrh	r1, [r7, #4]
 8005686:	88f8      	ldrh	r0, [r7, #6]
 8005688:	f000 fdb6 	bl	80061f8 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 800568c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800568e:	8aba      	ldrh	r2, [r7, #20]
 8005690:	88b9      	ldrh	r1, [r7, #4]
 8005692:	8878      	ldrh	r0, [r7, #2]
 8005694:	f000 fdb0 	bl	80061f8 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8005698:	8afb      	ldrh	r3, [r7, #22]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800569e:	8abb      	ldrh	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80056a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80056a6:	8839      	ldrh	r1, [r7, #0]
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fc2a 	bl	8005f04 <ILI9341_Draw_Pixel>
	}
	
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd90      	pop	{r4, r7, pc}

080056b8 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af02      	add	r7, sp, #8
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	4623      	mov	r3, r4
 80056c8:	80fb      	strh	r3, [r7, #6]
 80056ca:	4603      	mov	r3, r0
 80056cc:	80bb      	strh	r3, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	807b      	strh	r3, [r7, #2]
 80056d2:	4613      	mov	r3, r2
 80056d4:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80056f2:	887a      	ldrh	r2, [r7, #2]
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	da01      	bge.n	8005704 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8005700:	2301      	movs	r3, #1
 8005702:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8005708:	883a      	ldrh	r2, [r7, #0]
 800570a:	88bb      	ldrh	r3, [r7, #4]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da01      	bge.n	800571a <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8005716:	2301      	movs	r3, #1
 8005718:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800571a:	7cfb      	ldrb	r3, [r7, #19]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8005720:	887a      	ldrh	r2, [r7, #2]
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	823b      	strh	r3, [r7, #16]
 800572c:	e005      	b.n	800573a <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8005736:	887b      	ldrh	r3, [r7, #2]
 8005738:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 800573a:	7cbb      	ldrb	r3, [r7, #18]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d106      	bne.n	800574e <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8005740:	883a      	ldrh	r2, [r7, #0]
 8005742:	88bb      	ldrh	r3, [r7, #4]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	81fb      	strh	r3, [r7, #14]
 800574c:	e005      	b.n	800575a <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800574e:	88ba      	ldrh	r2, [r7, #4]
 8005750:	883b      	ldrh	r3, [r7, #0]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8005756:	883b      	ldrh	r3, [r7, #0]
 8005758:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 800575a:	8abc      	ldrh	r4, [r7, #20]
 800575c:	8afa      	ldrh	r2, [r7, #22]
 800575e:	89f9      	ldrh	r1, [r7, #14]
 8005760:	8a38      	ldrh	r0, [r7, #16]
 8005762:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	4623      	mov	r3, r4
 8005768:	f000 fca6 	bl	80060b8 <ILI9341_Draw_Rectangle>
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af02      	add	r7, sp, #8
 800577a:	4604      	mov	r4, r0
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	461a      	mov	r2, r3
 8005782:	4623      	mov	r3, r4
 8005784:	71fb      	strb	r3, [r7, #7]
 8005786:	4603      	mov	r3, r0
 8005788:	71bb      	strb	r3, [r7, #6]
 800578a:	460b      	mov	r3, r1
 800578c:	717b      	strb	r3, [r7, #5]
 800578e:	4613      	mov	r3, r2
 8005790:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	2b1f      	cmp	r3, #31
 800579a:	d802      	bhi.n	80057a2 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	71fb      	strb	r3, [r7, #7]
 80057a0:	e002      	b.n	80057a8 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	3b20      	subs	r3, #32
 80057a6:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	753b      	strb	r3, [r7, #20]
 80057ac:	e012      	b.n	80057d4 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80057ae:	7dfa      	ldrb	r2, [r7, #23]
 80057b0:	7d38      	ldrb	r0, [r7, #20]
 80057b2:	7d39      	ldrb	r1, [r7, #20]
 80057b4:	4c3c      	ldr	r4, [pc, #240]	; (80058a8 <ILI9341_Draw_Char+0x134>)
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4423      	add	r3, r4
 80057c0:	4403      	add	r3, r0
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	f107 0318 	add.w	r3, r7, #24
 80057c8:	440b      	add	r3, r1
 80057ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80057ce:	7d3b      	ldrb	r3, [r7, #20]
 80057d0:	3301      	adds	r3, #1
 80057d2:	753b      	strb	r3, [r7, #20]
 80057d4:	7d3b      	ldrb	r3, [r7, #20]
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	d9e9      	bls.n	80057ae <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80057da:	79bb      	ldrb	r3, [r7, #6]
 80057dc:	b298      	uxth	r0, r3
 80057de:	797b      	ldrb	r3, [r7, #5]
 80057e0:	b299      	uxth	r1, r3
 80057e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057e4:	461a      	mov	r2, r3
 80057e6:	0052      	lsls	r2, r2, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	b29c      	uxth	r4, r3
 80057f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4623      	mov	r3, r4
 80057fa:	f000 fc5d 	bl	80060b8 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80057fe:	2300      	movs	r3, #0
 8005800:	757b      	strb	r3, [r7, #21]
 8005802:	e048      	b.n	8005896 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005804:	2300      	movs	r3, #0
 8005806:	75bb      	strb	r3, [r7, #22]
 8005808:	e03f      	b.n	800588a <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 800580a:	7d7b      	ldrb	r3, [r7, #21]
 800580c:	f107 0218 	add.w	r2, r7, #24
 8005810:	4413      	add	r3, r2
 8005812:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005816:	461a      	mov	r2, r3
 8005818:	7dbb      	ldrb	r3, [r7, #22]
 800581a:	fa42 f303 	asr.w	r3, r2, r3
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02e      	beq.n	8005884 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8005826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005828:	2b01      	cmp	r3, #1
 800582a:	d110      	bne.n	800584e <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800582c:	79bb      	ldrb	r3, [r7, #6]
 800582e:	b29a      	uxth	r2, r3
 8005830:	7d7b      	ldrb	r3, [r7, #21]
 8005832:	b29b      	uxth	r3, r3
 8005834:	4413      	add	r3, r2
 8005836:	b298      	uxth	r0, r3
 8005838:	797b      	ldrb	r3, [r7, #5]
 800583a:	b29a      	uxth	r2, r3
 800583c:	7dbb      	ldrb	r3, [r7, #22]
 800583e:	b29b      	uxth	r3, r3
 8005840:	4413      	add	r3, r2
 8005842:	b29b      	uxth	r3, r3
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	4619      	mov	r1, r3
 8005848:	f000 fb5c 	bl	8005f04 <ILI9341_Draw_Pixel>
 800584c:	e01a      	b.n	8005884 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800584e:	79bb      	ldrb	r3, [r7, #6]
 8005850:	b29a      	uxth	r2, r3
 8005852:	7d7b      	ldrb	r3, [r7, #21]
 8005854:	b29b      	uxth	r3, r3
 8005856:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005858:	fb11 f303 	smulbb	r3, r1, r3
 800585c:	b29b      	uxth	r3, r3
 800585e:	4413      	add	r3, r2
 8005860:	b298      	uxth	r0, r3
 8005862:	797b      	ldrb	r3, [r7, #5]
 8005864:	b29a      	uxth	r2, r3
 8005866:	7dbb      	ldrb	r3, [r7, #22]
 8005868:	b29b      	uxth	r3, r3
 800586a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800586c:	fb11 f303 	smulbb	r3, r1, r3
 8005870:	b29b      	uxth	r3, r3
 8005872:	4413      	add	r3, r2
 8005874:	b299      	uxth	r1, r3
 8005876:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8005878:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	4623      	mov	r3, r4
 8005880:	f000 fc1a 	bl	80060b8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005884:	7dbb      	ldrb	r3, [r7, #22]
 8005886:	3301      	adds	r3, #1
 8005888:	75bb      	strb	r3, [r7, #22]
 800588a:	7dbb      	ldrb	r3, [r7, #22]
 800588c:	2b07      	cmp	r3, #7
 800588e:	d9bc      	bls.n	800580a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005890:	7d7b      	ldrb	r3, [r7, #21]
 8005892:	3301      	adds	r3, #1
 8005894:	757b      	strb	r3, [r7, #21]
 8005896:	7d7b      	ldrb	r3, [r7, #21]
 8005898:	2b05      	cmp	r3, #5
 800589a:	d9b3      	bls.n	8005804 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd90      	pop	{r4, r7, pc}
 80058a6:	bf00      	nop
 80058a8:	0800e870 	.word	0x0800e870

080058ac <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	461a      	mov	r2, r3
 80058ba:	4603      	mov	r3, r0
 80058bc:	70fb      	strb	r3, [r7, #3]
 80058be:	460b      	mov	r3, r1
 80058c0:	70bb      	strb	r3, [r7, #2]
 80058c2:	4613      	mov	r3, r2
 80058c4:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80058c6:	e017      	b.n	80058f8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	7818      	ldrb	r0, [r3, #0]
 80058d0:	883c      	ldrh	r4, [r7, #0]
 80058d2:	78ba      	ldrb	r2, [r7, #2]
 80058d4:	78f9      	ldrb	r1, [r7, #3]
 80058d6:	8bbb      	ldrh	r3, [r7, #28]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	8b3b      	ldrh	r3, [r7, #24]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4623      	mov	r3, r4
 80058e0:	f7ff ff48 	bl	8005774 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80058e4:	8b3b      	ldrh	r3, [r7, #24]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	0052      	lsls	r2, r2, #1
 80058ec:	4413      	add	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	4413      	add	r3, r2
 80058f6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e3      	bne.n	80058c8 <ILI9341_Draw_Text+0x1c>
    }
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bd90      	pop	{r4, r7, pc}
	...

0800590c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8005910:	f7ff f8dc 	bl	8004acc <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8005914:	f7fb f886 	bl	8000a24 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800591e:	4802      	ldr	r0, [pc, #8]	; (8005928 <ILI9341_SPI_Init+0x1c>)
 8005920:	f001 fc02 	bl	8007128 <HAL_GPIO_WritePin>
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40020800 	.word	0x40020800

0800592c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005936:	1df9      	adds	r1, r7, #7
 8005938:	2301      	movs	r3, #1
 800593a:	2201      	movs	r2, #1
 800593c:	4803      	ldr	r0, [pc, #12]	; (800594c <ILI9341_SPI_Send+0x20>)
 800593e:	f003 fdfa 	bl	8009536 <HAL_SPI_Transmit>
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200004e4 	.word	0x200004e4

08005950 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800595a:	2200      	movs	r2, #0
 800595c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005960:	480b      	ldr	r0, [pc, #44]	; (8005990 <ILI9341_Write_Command+0x40>)
 8005962:	f001 fbe1 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005966:	2200      	movs	r2, #0
 8005968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800596c:	4808      	ldr	r0, [pc, #32]	; (8005990 <ILI9341_Write_Command+0x40>)
 800596e:	f001 fbdb 	bl	8007128 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff ffd9 	bl	800592c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800597a:	2201      	movs	r2, #1
 800597c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005980:	4803      	ldr	r0, [pc, #12]	; (8005990 <ILI9341_Write_Command+0x40>)
 8005982:	f001 fbd1 	bl	8007128 <HAL_GPIO_WritePin>
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40020800 	.word	0x40020800

08005994 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800599e:	2201      	movs	r2, #1
 80059a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059a4:	480b      	ldr	r0, [pc, #44]	; (80059d4 <ILI9341_Write_Data+0x40>)
 80059a6:	f001 fbbf 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80059aa:	2200      	movs	r2, #0
 80059ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059b0:	4808      	ldr	r0, [pc, #32]	; (80059d4 <ILI9341_Write_Data+0x40>)
 80059b2:	f001 fbb9 	bl	8007128 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff ffb7 	bl	800592c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80059be:	2201      	movs	r2, #1
 80059c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059c4:	4803      	ldr	r0, [pc, #12]	; (80059d4 <ILI9341_Write_Data+0x40>)
 80059c6:	f001 fbaf 	bl	8007128 <HAL_GPIO_WritePin>
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40020800 	.word	0x40020800

080059d8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	80fb      	strh	r3, [r7, #6]
 80059ea:	4603      	mov	r3, r0
 80059ec:	80bb      	strh	r3, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	807b      	strh	r3, [r7, #2]
 80059f2:	4613      	mov	r3, r2
 80059f4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80059f6:	202a      	movs	r0, #42	; 0x2a
 80059f8:	f7ff ffaa 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff ffc5 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff ffc0 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff ffb9 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8005a22:	887b      	ldrh	r3, [r7, #2]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff ffb4 	bl	8005994 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8005a2c:	202b      	movs	r0, #43	; 0x2b
 8005a2e:	f7ff ff8f 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8005a32:	88bb      	ldrh	r3, [r7, #4]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff ffaa 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8005a40:	88bb      	ldrh	r3, [r7, #4]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ffa5 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8005a4a:	883b      	ldrh	r3, [r7, #0]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff ff9e 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8005a58:	883b      	ldrh	r3, [r7, #0]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff ff99 	bl	8005994 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8005a62:	202c      	movs	r0, #44	; 0x2c
 8005a64:	f7ff ff74 	bl	8005950 <ILI9341_Write_Command>
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd90      	pop	{r4, r7, pc}

08005a70 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005a74:	2201      	movs	r2, #1
 8005a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a7a:	480b      	ldr	r0, [pc, #44]	; (8005aa8 <ILI9341_Reset+0x38>)
 8005a7c:	f001 fb54 	bl	8007128 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005a80:	20c8      	movs	r0, #200	; 0xc8
 8005a82:	f000 fc69 	bl	8006358 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005a86:	2200      	movs	r2, #0
 8005a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a8c:	4806      	ldr	r0, [pc, #24]	; (8005aa8 <ILI9341_Reset+0x38>)
 8005a8e:	f001 fb4b 	bl	8007128 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005a92:	20c8      	movs	r0, #200	; 0xc8
 8005a94:	f000 fc60 	bl	8006358 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a9e:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <ILI9341_Reset+0x38>)
 8005aa0:	f001 fb42 	bl	8007128 <HAL_GPIO_WritePin>
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40020800 	.word	0x40020800

08005aac <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8005aba:	2036      	movs	r0, #54	; 0x36
 8005abc:	f7ff ff48 	bl	8005950 <ILI9341_Write_Command>
HAL_Delay(1);
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f000 fc49 	bl	8006358 <HAL_Delay>
	
switch(screen_rotation) 
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d837      	bhi.n	8005b3c <ILI9341_Set_Rotation+0x90>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <ILI9341_Set_Rotation+0x28>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005afb 	.word	0x08005afb
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b27 	.word	0x08005b27
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8005ae4:	2048      	movs	r0, #72	; 0x48
 8005ae6:	f7ff ff55 	bl	8005994 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8005aea:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <ILI9341_Set_Rotation+0x9c>)
 8005aec:	22f0      	movs	r2, #240	; 0xf0
 8005aee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005af0:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <ILI9341_Set_Rotation+0xa0>)
 8005af2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005af6:	801a      	strh	r2, [r3, #0]
			break;
 8005af8:	e021      	b.n	8005b3e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8005afa:	2028      	movs	r0, #40	; 0x28
 8005afc:	f7ff ff4a 	bl	8005994 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <ILI9341_Set_Rotation+0x9c>)
 8005b02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b06:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005b08:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <ILI9341_Set_Rotation+0xa0>)
 8005b0a:	22f0      	movs	r2, #240	; 0xf0
 8005b0c:	801a      	strh	r2, [r3, #0]
			break;
 8005b0e:	e016      	b.n	8005b3e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8005b10:	2088      	movs	r0, #136	; 0x88
 8005b12:	f7ff ff3f 	bl	8005994 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <ILI9341_Set_Rotation+0x9c>)
 8005b18:	22f0      	movs	r2, #240	; 0xf0
 8005b1a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <ILI9341_Set_Rotation+0xa0>)
 8005b1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b22:	801a      	strh	r2, [r3, #0]
			break;
 8005b24:	e00b      	b.n	8005b3e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8005b26:	20e8      	movs	r0, #232	; 0xe8
 8005b28:	f7ff ff34 	bl	8005994 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <ILI9341_Set_Rotation+0x9c>)
 8005b2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b32:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <ILI9341_Set_Rotation+0xa0>)
 8005b36:	22f0      	movs	r2, #240	; 0xf0
 8005b38:	801a      	strh	r2, [r3, #0]
			break;
 8005b3a:	e000      	b.n	8005b3e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8005b3c:	bf00      	nop
	}
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200000d2 	.word	0x200000d2
 8005b4c:	200000d0 	.word	0x200000d0

08005b50 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005b54:	2201      	movs	r2, #1
 8005b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b5a:	4802      	ldr	r0, [pc, #8]	; (8005b64 <ILI9341_Enable+0x14>)
 8005b5c:	f001 fae4 	bl	8007128 <HAL_GPIO_WritePin>
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40020800 	.word	0x40020800

08005b68 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8005b6c:	f7ff fff0 	bl	8005b50 <ILI9341_Enable>
ILI9341_SPI_Init();
 8005b70:	f7ff fecc 	bl	800590c <ILI9341_SPI_Init>
ILI9341_Reset();
 8005b74:	f7ff ff7c 	bl	8005a70 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8005b78:	2001      	movs	r0, #1
 8005b7a:	f7ff fee9 	bl	8005950 <ILI9341_Write_Command>
HAL_Delay(1000);
 8005b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b82:	f000 fbe9 	bl	8006358 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8005b86:	20cb      	movs	r0, #203	; 0xcb
 8005b88:	f7ff fee2 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8005b8c:	2039      	movs	r0, #57	; 0x39
 8005b8e:	f7ff ff01 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8005b92:	202c      	movs	r0, #44	; 0x2c
 8005b94:	f7ff fefe 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f7ff fefb 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8005b9e:	2034      	movs	r0, #52	; 0x34
 8005ba0:	f7ff fef8 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8005ba4:	2002      	movs	r0, #2
 8005ba6:	f7ff fef5 	bl	8005994 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8005baa:	20cf      	movs	r0, #207	; 0xcf
 8005bac:	f7ff fed0 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f7ff feef 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005bb6:	20c1      	movs	r0, #193	; 0xc1
 8005bb8:	f7ff feec 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8005bbc:	2030      	movs	r0, #48	; 0x30
 8005bbe:	f7ff fee9 	bl	8005994 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8005bc2:	20e8      	movs	r0, #232	; 0xe8
 8005bc4:	f7ff fec4 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8005bc8:	2085      	movs	r0, #133	; 0x85
 8005bca:	f7ff fee3 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f7ff fee0 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8005bd4:	2078      	movs	r0, #120	; 0x78
 8005bd6:	f7ff fedd 	bl	8005994 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8005bda:	20ea      	movs	r0, #234	; 0xea
 8005bdc:	f7ff feb8 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7ff fed7 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005be6:	2000      	movs	r0, #0
 8005be8:	f7ff fed4 	bl	8005994 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8005bec:	20ed      	movs	r0, #237	; 0xed
 8005bee:	f7ff feaf 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8005bf2:	2064      	movs	r0, #100	; 0x64
 8005bf4:	f7ff fece 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005bf8:	2003      	movs	r0, #3
 8005bfa:	f7ff fecb 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8005bfe:	2012      	movs	r0, #18
 8005c00:	f7ff fec8 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8005c04:	2081      	movs	r0, #129	; 0x81
 8005c06:	f7ff fec5 	bl	8005994 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8005c0a:	20f7      	movs	r0, #247	; 0xf7
 8005c0c:	f7ff fea0 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8005c10:	2020      	movs	r0, #32
 8005c12:	f7ff febf 	bl	8005994 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8005c16:	20c0      	movs	r0, #192	; 0xc0
 8005c18:	f7ff fe9a 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8005c1c:	2023      	movs	r0, #35	; 0x23
 8005c1e:	f7ff feb9 	bl	8005994 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8005c22:	20c1      	movs	r0, #193	; 0xc1
 8005c24:	f7ff fe94 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8005c28:	2010      	movs	r0, #16
 8005c2a:	f7ff feb3 	bl	8005994 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8005c2e:	20c5      	movs	r0, #197	; 0xc5
 8005c30:	f7ff fe8e 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8005c34:	203e      	movs	r0, #62	; 0x3e
 8005c36:	f7ff fead 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8005c3a:	2028      	movs	r0, #40	; 0x28
 8005c3c:	f7ff feaa 	bl	8005994 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8005c40:	20c7      	movs	r0, #199	; 0xc7
 8005c42:	f7ff fe85 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8005c46:	2086      	movs	r0, #134	; 0x86
 8005c48:	f7ff fea4 	bl	8005994 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8005c4c:	2036      	movs	r0, #54	; 0x36
 8005c4e:	f7ff fe7f 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8005c52:	2048      	movs	r0, #72	; 0x48
 8005c54:	f7ff fe9e 	bl	8005994 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8005c58:	203a      	movs	r0, #58	; 0x3a
 8005c5a:	f7ff fe79 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8005c5e:	2055      	movs	r0, #85	; 0x55
 8005c60:	f7ff fe98 	bl	8005994 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8005c64:	20b1      	movs	r0, #177	; 0xb1
 8005c66:	f7ff fe73 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f7ff fe92 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8005c70:	2018      	movs	r0, #24
 8005c72:	f7ff fe8f 	bl	8005994 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8005c76:	20b6      	movs	r0, #182	; 0xb6
 8005c78:	f7ff fe6a 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8005c7c:	2008      	movs	r0, #8
 8005c7e:	f7ff fe89 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8005c82:	2082      	movs	r0, #130	; 0x82
 8005c84:	f7ff fe86 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8005c88:	2027      	movs	r0, #39	; 0x27
 8005c8a:	f7ff fe83 	bl	8005994 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8005c8e:	20f2      	movs	r0, #242	; 0xf2
 8005c90:	f7ff fe5e 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005c94:	2000      	movs	r0, #0
 8005c96:	f7ff fe7d 	bl	8005994 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8005c9a:	2026      	movs	r0, #38	; 0x26
 8005c9c:	f7ff fe58 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f7ff fe77 	bl	8005994 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8005ca6:	20e0      	movs	r0, #224	; 0xe0
 8005ca8:	f7ff fe52 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8005cac:	200f      	movs	r0, #15
 8005cae:	f7ff fe71 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005cb2:	2031      	movs	r0, #49	; 0x31
 8005cb4:	f7ff fe6e 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8005cb8:	202b      	movs	r0, #43	; 0x2b
 8005cba:	f7ff fe6b 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8005cbe:	200c      	movs	r0, #12
 8005cc0:	f7ff fe68 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005cc4:	200e      	movs	r0, #14
 8005cc6:	f7ff fe65 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8005cca:	2008      	movs	r0, #8
 8005ccc:	f7ff fe62 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8005cd0:	204e      	movs	r0, #78	; 0x4e
 8005cd2:	f7ff fe5f 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8005cd6:	20f1      	movs	r0, #241	; 0xf1
 8005cd8:	f7ff fe5c 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8005cdc:	2037      	movs	r0, #55	; 0x37
 8005cde:	f7ff fe59 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8005ce2:	2007      	movs	r0, #7
 8005ce4:	f7ff fe56 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8005ce8:	2010      	movs	r0, #16
 8005cea:	f7ff fe53 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005cee:	2003      	movs	r0, #3
 8005cf0:	f7ff fe50 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005cf4:	200e      	movs	r0, #14
 8005cf6:	f7ff fe4d 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8005cfa:	2009      	movs	r0, #9
 8005cfc:	f7ff fe4a 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005d00:	2000      	movs	r0, #0
 8005d02:	f7ff fe47 	bl	8005994 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8005d06:	20e1      	movs	r0, #225	; 0xe1
 8005d08:	f7ff fe22 	bl	8005950 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f7ff fe41 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005d12:	200e      	movs	r0, #14
 8005d14:	f7ff fe3e 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8005d18:	2014      	movs	r0, #20
 8005d1a:	f7ff fe3b 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005d1e:	2003      	movs	r0, #3
 8005d20:	f7ff fe38 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8005d24:	2011      	movs	r0, #17
 8005d26:	f7ff fe35 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8005d2a:	2007      	movs	r0, #7
 8005d2c:	f7ff fe32 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005d30:	2031      	movs	r0, #49	; 0x31
 8005d32:	f7ff fe2f 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005d36:	20c1      	movs	r0, #193	; 0xc1
 8005d38:	f7ff fe2c 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8005d3c:	2048      	movs	r0, #72	; 0x48
 8005d3e:	f7ff fe29 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8005d42:	2008      	movs	r0, #8
 8005d44:	f7ff fe26 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005d48:	200f      	movs	r0, #15
 8005d4a:	f7ff fe23 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8005d4e:	200c      	movs	r0, #12
 8005d50:	f7ff fe20 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005d54:	2031      	movs	r0, #49	; 0x31
 8005d56:	f7ff fe1d 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8005d5a:	2036      	movs	r0, #54	; 0x36
 8005d5c:	f7ff fe1a 	bl	8005994 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005d60:	200f      	movs	r0, #15
 8005d62:	f7ff fe17 	bl	8005994 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8005d66:	2011      	movs	r0, #17
 8005d68:	f7ff fdf2 	bl	8005950 <ILI9341_Write_Command>
HAL_Delay(120);
 8005d6c:	2078      	movs	r0, #120	; 0x78
 8005d6e:	f000 faf3 	bl	8006358 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8005d72:	2029      	movs	r0, #41	; 0x29
 8005d74:	f7ff fdec 	bl	8005950 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7ff fe97 	bl	8005aac <ILI9341_Set_Rotation>
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b08c      	sub	sp, #48	; 0x30
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	6039      	str	r1, [r7, #0]
 8005d8e:	80fb      	strh	r3, [r7, #6]
 8005d90:	466b      	mov	r3, sp
 8005d92:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005da0:	d202      	bcs.n	8005da8 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	e002      	b.n	8005dae <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8005da8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005dae:	2201      	movs	r2, #1
 8005db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005db4:	483e      	ldr	r0, [pc, #248]	; (8005eb0 <ILI9341_Draw_Colour_Burst+0x12c>)
 8005db6:	f001 f9b7 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dc0:	483b      	ldr	r0, [pc, #236]	; (8005eb0 <ILI9341_Draw_Colour_Burst+0x12c>)
 8005dc2:	f001 f9b1 	bl	8007128 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	0a1b      	lsrs	r3, r3, #8
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8005dd0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f04f 0100 	mov.w	r1, #0
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	00cb      	lsls	r3, r1, #3
 8005de8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005dec:	00c2      	lsls	r2, r0, #3
 8005dee:	4620      	mov	r0, r4
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	00cb      	lsls	r3, r1, #3
 8005dfe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005e02:	00c2      	lsls	r2, r0, #3
 8005e04:	1de3      	adds	r3, r4, #7
 8005e06:	08db      	lsrs	r3, r3, #3
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	ebad 0d03 	sub.w	sp, sp, r3
 8005e0e:	466b      	mov	r3, sp
 8005e10:	3300      	adds	r3, #0
 8005e12:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005e14:	2300      	movs	r3, #0
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e18:	e00e      	b.n	8005e38 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	4413      	add	r3, r2
 8005e20:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005e24:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	3301      	adds	r3, #1
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	b2d1      	uxtb	r1, r2
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	3302      	adds	r3, #2
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3ec      	bcc.n	8005e1a <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e54:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e5a:	fb01 f202 	mul.w	r2, r1, r2
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d010      	beq.n	8005e8a <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6c:	e009      	b.n	8005e82 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8005e6e:	69b9      	ldr	r1, [r7, #24]
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	230a      	movs	r3, #10
 8005e76:	480f      	ldr	r0, [pc, #60]	; (8005eb4 <ILI9341_Draw_Colour_Burst+0x130>)
 8005e78:	f003 fb5d 	bl	8009536 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	3301      	adds	r3, #1
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d3f1      	bcc.n	8005e6e <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8005e8a:	69b9      	ldr	r1, [r7, #24]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	230a      	movs	r3, #10
 8005e92:	4808      	ldr	r0, [pc, #32]	; (8005eb4 <ILI9341_Draw_Colour_Burst+0x130>)
 8005e94:	f003 fb4f 	bl	8009536 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e9e:	4804      	ldr	r0, [pc, #16]	; (8005eb0 <ILI9341_Draw_Colour_Burst+0x12c>)
 8005ea0:	f001 f942 	bl	8007128 <HAL_GPIO_WritePin>
 8005ea4:	46ad      	mov	sp, r5
}
 8005ea6:	bf00      	nop
 8005ea8:	3730      	adds	r7, #48	; 0x30
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bdb0      	pop	{r4, r5, r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40020800 	.word	0x40020800
 8005eb4:	200004e4 	.word	0x200004e4

08005eb8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <ILI9341_Fill_Screen+0x44>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <ILI9341_Fill_Screen+0x48>)
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2100      	movs	r1, #0
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7ff fd81 	bl	80059d8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <ILI9341_Fill_Screen+0x44>)
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <ILI9341_Fill_Screen+0x48>)
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	fb03 f302 	mul.w	r3, r3, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	4611      	mov	r1, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff ff48 	bl	8005d84 <ILI9341_Draw_Colour_Burst>
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	200000d2 	.word	0x200000d2
 8005f00:	200000d0 	.word	0x200000d0

08005f04 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	80fb      	strh	r3, [r7, #6]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	80bb      	strh	r3, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005f16:	4b64      	ldr	r3, [pc, #400]	; (80060a8 <ILI9341_Draw_Pixel+0x1a4>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	f080 80be 	bcs.w	80060a0 <ILI9341_Draw_Pixel+0x19c>
 8005f24:	4b61      	ldr	r3, [pc, #388]	; (80060ac <ILI9341_Draw_Pixel+0x1a8>)
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	88ba      	ldrh	r2, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	f080 80b7 	bcs.w	80060a0 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005f32:	2200      	movs	r2, #0
 8005f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f38:	485d      	ldr	r0, [pc, #372]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005f3a:	f001 f8f5 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f44:	485a      	ldr	r0, [pc, #360]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005f46:	f001 f8ef 	bl	8007128 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8005f4a:	202a      	movs	r0, #42	; 0x2a
 8005f4c:	f7ff fcee 	bl	800592c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005f50:	2201      	movs	r2, #1
 8005f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f56:	4856      	ldr	r0, [pc, #344]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005f58:	f001 f8e6 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f62:	4853      	ldr	r0, [pc, #332]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005f64:	f001 f8e0 	bl	8007128 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f6e:	4850      	ldr	r0, [pc, #320]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005f70:	f001 f8da 	bl	8007128 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	753b      	strb	r3, [r7, #20]
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	757b      	strb	r3, [r7, #21]
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	3301      	adds	r3, #1
 8005f88:	121b      	asrs	r3, r3, #8
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	75bb      	strb	r3, [r7, #22]
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	3301      	adds	r3, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005f98:	f107 0114 	add.w	r1, r7, #20
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	4844      	ldr	r0, [pc, #272]	; (80060b4 <ILI9341_Draw_Pixel+0x1b0>)
 8005fa2:	f003 fac8 	bl	8009536 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fac:	4840      	ldr	r0, [pc, #256]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005fae:	f001 f8bb 	bl	8007128 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fb8:	483d      	ldr	r0, [pc, #244]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005fba:	f001 f8b5 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fc4:	483a      	ldr	r0, [pc, #232]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005fc6:	f001 f8af 	bl	8007128 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8005fca:	202b      	movs	r0, #43	; 0x2b
 8005fcc:	f7ff fcae 	bl	800592c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fd6:	4836      	ldr	r0, [pc, #216]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005fd8:	f001 f8a6 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fe2:	4833      	ldr	r0, [pc, #204]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005fe4:	f001 f8a0 	bl	8007128 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fee:	4830      	ldr	r0, [pc, #192]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8005ff0:	f001 f89a 	bl	8007128 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8005ff4:	88bb      	ldrh	r3, [r7, #4]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	743b      	strb	r3, [r7, #16]
 8005ffe:	88bb      	ldrh	r3, [r7, #4]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	747b      	strb	r3, [r7, #17]
 8006004:	88bb      	ldrh	r3, [r7, #4]
 8006006:	3301      	adds	r3, #1
 8006008:	121b      	asrs	r3, r3, #8
 800600a:	b2db      	uxtb	r3, r3
 800600c:	74bb      	strb	r3, [r7, #18]
 800600e:	88bb      	ldrh	r3, [r7, #4]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	3301      	adds	r3, #1
 8006014:	b2db      	uxtb	r3, r3
 8006016:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8006018:	f107 0110 	add.w	r1, r7, #16
 800601c:	2301      	movs	r3, #1
 800601e:	2204      	movs	r2, #4
 8006020:	4824      	ldr	r0, [pc, #144]	; (80060b4 <ILI9341_Draw_Pixel+0x1b0>)
 8006022:	f003 fa88 	bl	8009536 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006026:	2201      	movs	r2, #1
 8006028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800602c:	4820      	ldr	r0, [pc, #128]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 800602e:	f001 f87b 	bl	8007128 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006032:	2200      	movs	r2, #0
 8006034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006038:	481d      	ldr	r0, [pc, #116]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 800603a:	f001 f875 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800603e:	2200      	movs	r2, #0
 8006040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006044:	481a      	ldr	r0, [pc, #104]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8006046:	f001 f86f 	bl	8007128 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800604a:	202c      	movs	r0, #44	; 0x2c
 800604c:	f7ff fc6e 	bl	800592c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006050:	2201      	movs	r2, #1
 8006052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006056:	4816      	ldr	r0, [pc, #88]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8006058:	f001 f866 	bl	8007128 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800605c:	2201      	movs	r2, #1
 800605e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006062:	4813      	ldr	r0, [pc, #76]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8006064:	f001 f860 	bl	8007128 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006068:	2200      	movs	r2, #0
 800606a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800606e:	4810      	ldr	r0, [pc, #64]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 8006070:	f001 f85a 	bl	8007128 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8006074:	887b      	ldrh	r3, [r7, #2]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	b29b      	uxth	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	733b      	strb	r3, [r7, #12]
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8006084:	f107 010c 	add.w	r1, r7, #12
 8006088:	2301      	movs	r3, #1
 800608a:	2202      	movs	r2, #2
 800608c:	4809      	ldr	r0, [pc, #36]	; (80060b4 <ILI9341_Draw_Pixel+0x1b0>)
 800608e:	f003 fa52 	bl	8009536 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006092:	2201      	movs	r2, #1
 8006094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006098:	4805      	ldr	r0, [pc, #20]	; (80060b0 <ILI9341_Draw_Pixel+0x1ac>)
 800609a:	f001 f845 	bl	8007128 <HAL_GPIO_WritePin>
 800609e:	e000      	b.n	80060a2 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80060a0:	bf00      	nop
	
}
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	200000d2 	.word	0x200000d2
 80060ac:	200000d0 	.word	0x200000d0
 80060b0:	40020800 	.word	0x40020800
 80060b4:	200004e4 	.word	0x200004e4

080060b8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	4611      	mov	r1, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	4623      	mov	r3, r4
 80060c8:	80fb      	strh	r3, [r7, #6]
 80060ca:	4603      	mov	r3, r0
 80060cc:	80bb      	strh	r3, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	807b      	strh	r3, [r7, #2]
 80060d2:	4613      	mov	r3, r2
 80060d4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80060d6:	4b24      	ldr	r3, [pc, #144]	; (8006168 <ILI9341_Draw_Rectangle+0xb0>)
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d23d      	bcs.n	800615e <ILI9341_Draw_Rectangle+0xa6>
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <ILI9341_Draw_Rectangle+0xb4>)
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	88ba      	ldrh	r2, [r7, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d237      	bcs.n	800615e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	887b      	ldrh	r3, [r7, #2]
 80060f2:	4413      	add	r3, r2
 80060f4:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <ILI9341_Draw_Rectangle+0xb0>)
 80060f6:	8812      	ldrh	r2, [r2, #0]
 80060f8:	b292      	uxth	r2, r2
 80060fa:	4293      	cmp	r3, r2
 80060fc:	dd05      	ble.n	800610a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80060fe:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <ILI9341_Draw_Rectangle+0xb0>)
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29a      	uxth	r2, r3
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800610a:	88ba      	ldrh	r2, [r7, #4]
 800610c:	883b      	ldrh	r3, [r7, #0]
 800610e:	4413      	add	r3, r2
 8006110:	4a16      	ldr	r2, [pc, #88]	; (800616c <ILI9341_Draw_Rectangle+0xb4>)
 8006112:	8812      	ldrh	r2, [r2, #0]
 8006114:	b292      	uxth	r2, r2
 8006116:	4293      	cmp	r3, r2
 8006118:	dd05      	ble.n	8006126 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800611a:	4b14      	ldr	r3, [pc, #80]	; (800616c <ILI9341_Draw_Rectangle+0xb4>)
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29a      	uxth	r2, r3
 8006120:	88bb      	ldrh	r3, [r7, #4]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8006126:	88fa      	ldrh	r2, [r7, #6]
 8006128:	887b      	ldrh	r3, [r7, #2]
 800612a:	4413      	add	r3, r2
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29c      	uxth	r4, r3
 8006132:	88ba      	ldrh	r2, [r7, #4]
 8006134:	883b      	ldrh	r3, [r7, #0]
 8006136:	4413      	add	r3, r2
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29b      	uxth	r3, r3
 800613e:	88b9      	ldrh	r1, [r7, #4]
 8006140:	88f8      	ldrh	r0, [r7, #6]
 8006142:	4622      	mov	r2, r4
 8006144:	f7ff fc48 	bl	80059d8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8006148:	883b      	ldrh	r3, [r7, #0]
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	461a      	mov	r2, r3
 8006152:	8b3b      	ldrh	r3, [r7, #24]
 8006154:	4611      	mov	r1, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fe14 	bl	8005d84 <ILI9341_Draw_Colour_Burst>
 800615c:	e000      	b.n	8006160 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800615e:	bf00      	nop
}
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	bd90      	pop	{r4, r7, pc}
 8006166:	bf00      	nop
 8006168:	200000d2 	.word	0x200000d2
 800616c:	200000d0 	.word	0x200000d0

08006170 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	4611      	mov	r1, r2
 800617c:	461a      	mov	r2, r3
 800617e:	4623      	mov	r3, r4
 8006180:	80fb      	strh	r3, [r7, #6]
 8006182:	4603      	mov	r3, r0
 8006184:	80bb      	strh	r3, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	807b      	strh	r3, [r7, #2]
 800618a:	4613      	mov	r3, r2
 800618c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800618e:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	429a      	cmp	r2, r3
 8006198:	d225      	bcs.n	80061e6 <ILI9341_Draw_Horizontal_Line+0x76>
 800619a:	4b16      	ldr	r3, [pc, #88]	; (80061f4 <ILI9341_Draw_Horizontal_Line+0x84>)
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	88ba      	ldrh	r2, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d21f      	bcs.n	80061e6 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	887b      	ldrh	r3, [r7, #2]
 80061aa:	4413      	add	r3, r2
 80061ac:	4a10      	ldr	r2, [pc, #64]	; (80061f0 <ILI9341_Draw_Horizontal_Line+0x80>)
 80061ae:	8812      	ldrh	r2, [r2, #0]
 80061b0:	b292      	uxth	r2, r2
 80061b2:	4293      	cmp	r3, r2
 80061b4:	dd05      	ble.n	80061c2 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 80061b6:	4b0e      	ldr	r3, [pc, #56]	; (80061f0 <ILI9341_Draw_Horizontal_Line+0x80>)
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	4413      	add	r3, r2
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	88bb      	ldrh	r3, [r7, #4]
 80061d0:	88b9      	ldrh	r1, [r7, #4]
 80061d2:	88f8      	ldrh	r0, [r7, #6]
 80061d4:	f7ff fc00 	bl	80059d8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80061d8:	887a      	ldrh	r2, [r7, #2]
 80061da:	883b      	ldrh	r3, [r7, #0]
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fdd0 	bl	8005d84 <ILI9341_Draw_Colour_Burst>
 80061e4:	e000      	b.n	80061e8 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80061e6:	bf00      	nop
}
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd90      	pop	{r4, r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200000d2 	.word	0x200000d2
 80061f4:	200000d0 	.word	0x200000d0

080061f8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4623      	mov	r3, r4
 8006208:	80fb      	strh	r3, [r7, #6]
 800620a:	4603      	mov	r3, r0
 800620c:	80bb      	strh	r3, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	807b      	strh	r3, [r7, #2]
 8006212:	4613      	mov	r3, r2
 8006214:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006216:	4b18      	ldr	r3, [pc, #96]	; (8006278 <ILI9341_Draw_Vertical_Line+0x80>)
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	429a      	cmp	r2, r3
 8006220:	d225      	bcs.n	800626e <ILI9341_Draw_Vertical_Line+0x76>
 8006222:	4b16      	ldr	r3, [pc, #88]	; (800627c <ILI9341_Draw_Vertical_Line+0x84>)
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	88ba      	ldrh	r2, [r7, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d21f      	bcs.n	800626e <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800622e:	88ba      	ldrh	r2, [r7, #4]
 8006230:	887b      	ldrh	r3, [r7, #2]
 8006232:	4413      	add	r3, r2
 8006234:	4a11      	ldr	r2, [pc, #68]	; (800627c <ILI9341_Draw_Vertical_Line+0x84>)
 8006236:	8812      	ldrh	r2, [r2, #0]
 8006238:	b292      	uxth	r2, r2
 800623a:	4293      	cmp	r3, r2
 800623c:	dd05      	ble.n	800624a <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <ILI9341_Draw_Vertical_Line+0x84>)
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29a      	uxth	r2, r3
 8006244:	88bb      	ldrh	r3, [r7, #4]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800624a:	88ba      	ldrh	r2, [r7, #4]
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	4413      	add	r3, r2
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29b      	uxth	r3, r3
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	88b9      	ldrh	r1, [r7, #4]
 800625a:	88f8      	ldrh	r0, [r7, #6]
 800625c:	f7ff fbbc 	bl	80059d8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8006260:	887a      	ldrh	r2, [r7, #2]
 8006262:	883b      	ldrh	r3, [r7, #0]
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fd8c 	bl	8005d84 <ILI9341_Draw_Colour_Burst>
 800626c:	e000      	b.n	8006270 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800626e:	bf00      	nop
}
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}
 8006276:	bf00      	nop
 8006278:	200000d2 	.word	0x200000d2
 800627c:	200000d0 	.word	0x200000d0

08006280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <HAL_Init+0x34>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <HAL_Init+0x34>)
 800628a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800628e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006290:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <HAL_Init+0x34>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a07      	ldr	r2, [pc, #28]	; (80062b4 <HAL_Init+0x34>)
 8006296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800629a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800629c:	2003      	movs	r0, #3
 800629e:	f000 fd3d 	bl	8006d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062a2:	2000      	movs	r0, #0
 80062a4:	f000 f808 	bl	80062b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80062a8:	f7fe fc92 	bl	8004bd0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	40023c00 	.word	0x40023c00

080062b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <HAL_InitTick+0x54>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_InitTick+0x58>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	4619      	mov	r1, r3
 80062ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80062d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fd55 	bl	8006d86 <HAL_SYSTICK_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e00e      	b.n	8006304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b0f      	cmp	r3, #15
 80062ea:	d80a      	bhi.n	8006302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062ec:	2200      	movs	r2, #0
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	f000 fd1d 	bl	8006d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062f8:	4a06      	ldr	r2, [pc, #24]	; (8006314 <HAL_InitTick+0x5c>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	e000      	b.n	8006304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200000cc 	.word	0x200000cc
 8006310:	200000d8 	.word	0x200000d8
 8006314:	200000d4 	.word	0x200000d4

08006318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <HAL_IncTick+0x20>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <HAL_IncTick+0x24>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4413      	add	r3, r2
 8006328:	4a04      	ldr	r2, [pc, #16]	; (800633c <HAL_IncTick+0x24>)
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	bf00      	nop
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	200000d8 	.word	0x200000d8
 800633c:	200007b8 	.word	0x200007b8

08006340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  return uwTick;
 8006344:	4b03      	ldr	r3, [pc, #12]	; (8006354 <HAL_GetTick+0x14>)
 8006346:	681b      	ldr	r3, [r3, #0]
}
 8006348:	4618      	mov	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	200007b8 	.word	0x200007b8

08006358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006360:	f7ff ffee 	bl	8006340 <HAL_GetTick>
 8006364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d005      	beq.n	800637e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006372:	4b0a      	ldr	r3, [pc, #40]	; (800639c <HAL_Delay+0x44>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800637e:	bf00      	nop
 8006380:	f7ff ffde 	bl	8006340 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d8f7      	bhi.n	8006380 <HAL_Delay+0x28>
  {
  }
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	200000d8 	.word	0x200000d8

080063a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e031      	b.n	800641a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fa faf0 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d116      	bne.n	800640c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e2:	4b10      	ldr	r3, [pc, #64]	; (8006424 <HAL_ADC_Init+0x84>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	f043 0202 	orr.w	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 faca 	bl	8006988 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f023 0303 	bic.w	r3, r3, #3
 8006402:	f043 0201 	orr.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40
 800640a:	e001      	b.n	8006410 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	ffffeefd 	.word	0xffffeefd

08006428 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_ADC_Start+0x1a>
 800643e:	2302      	movs	r3, #2
 8006440:	e0ad      	b.n	800659e <HAL_ADC_Start+0x176>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d018      	beq.n	800648a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006468:	4b50      	ldr	r3, [pc, #320]	; (80065ac <HAL_ADC_Start+0x184>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a50      	ldr	r2, [pc, #320]	; (80065b0 <HAL_ADC_Start+0x188>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	0c9a      	lsrs	r2, r3, #18
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800647c:	e002      	b.n	8006484 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b01      	subs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f9      	bne.n	800647e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d175      	bne.n	8006584 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649c:	4b45      	ldr	r3, [pc, #276]	; (80065b4 <HAL_ADC_Start+0x18c>)
 800649e:	4013      	ands	r3, r2
 80064a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	d106      	bne.n	80064e2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d8:	f023 0206 	bic.w	r2, r3, #6
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	645a      	str	r2, [r3, #68]	; 0x44
 80064e0:	e002      	b.n	80064e8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80064f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80064fa:	4b2f      	ldr	r3, [pc, #188]	; (80065b8 <HAL_ADC_Start+0x190>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10f      	bne.n	8006526 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d143      	bne.n	800659c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	e03a      	b.n	800659c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a24      	ldr	r2, [pc, #144]	; (80065bc <HAL_ADC_Start+0x194>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10e      	bne.n	800654e <HAL_ADC_Start+0x126>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d107      	bne.n	800654e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800654c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800654e:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <HAL_ADC_Start+0x190>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	d120      	bne.n	800659c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_ADC_Start+0x198>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d11b      	bne.n	800659c <HAL_ADC_Start+0x174>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d114      	bne.n	800659c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006580:	609a      	str	r2, [r3, #8]
 8006582:	e00b      	b.n	800659c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0210 	orr.w	r2, r3, #16
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006594:	f043 0201 	orr.w	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	200000cc 	.word	0x200000cc
 80065b0:	431bde83 	.word	0x431bde83
 80065b4:	fffff8fe 	.word	0xfffff8fe
 80065b8:	40012300 	.word	0x40012300
 80065bc:	40012000 	.word	0x40012000
 80065c0:	40012200 	.word	0x40012200

080065c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e0:	d113      	bne.n	800660a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80065ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f0:	d10b      	bne.n	800660a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f043 0220 	orr.w	r2, r3, #32
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e063      	b.n	80066d2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800660a:	f7ff fe99 	bl	8006340 <HAL_GetTick>
 800660e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006610:	e021      	b.n	8006656 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d01d      	beq.n	8006656 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_ADC_PollForConversion+0x6c>
 8006620:	f7ff fe8e 	bl	8006340 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d212      	bcs.n	8006656 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b02      	cmp	r3, #2
 800663c:	d00b      	beq.n	8006656 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0204 	orr.w	r2, r3, #4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e03d      	b.n	80066d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d1d6      	bne.n	8006612 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0212 	mvn.w	r2, #18
 800666c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d123      	bne.n	80066d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11f      	bne.n	80066d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800669a:	2b00      	cmp	r3, #0
 800669c:	d006      	beq.n	80066ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d111      	bne.n	80066d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	f043 0201 	orr.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_ADC_ConfigChannel+0x1c>
 800670c:	2302      	movs	r3, #2
 800670e:	e12a      	b.n	8006966 <HAL_ADC_ConfigChannel+0x272>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b09      	cmp	r3, #9
 800671e:	d93a      	bls.n	8006796 <HAL_ADC_ConfigChannel+0xa2>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006728:	d035      	beq.n	8006796 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68d9      	ldr	r1, [r3, #12]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	4613      	mov	r3, r2
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	4413      	add	r3, r2
 800673e:	3b1e      	subs	r3, #30
 8006740:	2207      	movs	r2, #7
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43da      	mvns	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	400a      	ands	r2, r1
 800674e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a87      	ldr	r2, [pc, #540]	; (8006974 <HAL_ADC_ConfigChannel+0x280>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d10a      	bne.n	8006770 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68d9      	ldr	r1, [r3, #12]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	061a      	lsls	r2, r3, #24
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800676e:	e035      	b.n	80067dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68d9      	ldr	r1, [r3, #12]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	4618      	mov	r0, r3
 8006782:	4603      	mov	r3, r0
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4403      	add	r3, r0
 8006788:	3b1e      	subs	r3, #30
 800678a:	409a      	lsls	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006794:	e022      	b.n	80067dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6919      	ldr	r1, [r3, #16]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	4613      	mov	r3, r2
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	4413      	add	r3, r2
 80067aa:	2207      	movs	r2, #7
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43da      	mvns	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	400a      	ands	r2, r1
 80067b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6919      	ldr	r1, [r3, #16]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	4618      	mov	r0, r3
 80067cc:	4603      	mov	r3, r0
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	4403      	add	r3, r0
 80067d2:	409a      	lsls	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b06      	cmp	r3, #6
 80067e2:	d824      	bhi.n	800682e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	3b05      	subs	r3, #5
 80067f6:	221f      	movs	r2, #31
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	43da      	mvns	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	400a      	ands	r2, r1
 8006804:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	4618      	mov	r0, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	3b05      	subs	r3, #5
 8006820:	fa00 f203 	lsl.w	r2, r0, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	635a      	str	r2, [r3, #52]	; 0x34
 800682c:	e04c      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d824      	bhi.n	8006880 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	3b23      	subs	r3, #35	; 0x23
 8006848:	221f      	movs	r2, #31
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43da      	mvns	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	400a      	ands	r2, r1
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	4618      	mov	r0, r3
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	3b23      	subs	r3, #35	; 0x23
 8006872:	fa00 f203 	lsl.w	r2, r0, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
 800687e:	e023      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	3b41      	subs	r3, #65	; 0x41
 8006892:	221f      	movs	r2, #31
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	43da      	mvns	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	400a      	ands	r2, r1
 80068a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	4618      	mov	r0, r3
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	3b41      	subs	r3, #65	; 0x41
 80068bc:	fa00 f203 	lsl.w	r2, r0, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <HAL_ADC_ConfigChannel+0x284>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10a      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x1f4>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068da:	d105      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80068dc:	4b27      	ldr	r3, [pc, #156]	; (800697c <HAL_ADC_ConfigChannel+0x288>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a26      	ldr	r2, [pc, #152]	; (800697c <HAL_ADC_ConfigChannel+0x288>)
 80068e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80068e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a22      	ldr	r2, [pc, #136]	; (8006978 <HAL_ADC_ConfigChannel+0x284>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d109      	bne.n	8006906 <HAL_ADC_ConfigChannel+0x212>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b12      	cmp	r3, #18
 80068f8:	d105      	bne.n	8006906 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <HAL_ADC_ConfigChannel+0x288>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	4a1f      	ldr	r2, [pc, #124]	; (800697c <HAL_ADC_ConfigChannel+0x288>)
 8006900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006904:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <HAL_ADC_ConfigChannel+0x284>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d125      	bne.n	800695c <HAL_ADC_ConfigChannel+0x268>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a17      	ldr	r2, [pc, #92]	; (8006974 <HAL_ADC_ConfigChannel+0x280>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <HAL_ADC_ConfigChannel+0x22e>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b11      	cmp	r3, #17
 8006920:	d11c      	bne.n	800695c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006922:	4b16      	ldr	r3, [pc, #88]	; (800697c <HAL_ADC_ConfigChannel+0x288>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4a15      	ldr	r2, [pc, #84]	; (800697c <HAL_ADC_ConfigChannel+0x288>)
 8006928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800692c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <HAL_ADC_ConfigChannel+0x280>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d111      	bne.n	800695c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <HAL_ADC_ConfigChannel+0x28c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a11      	ldr	r2, [pc, #68]	; (8006984 <HAL_ADC_ConfigChannel+0x290>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	0c9a      	lsrs	r2, r3, #18
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800694e:	e002      	b.n	8006956 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3b01      	subs	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f9      	bne.n	8006950 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	10000012 	.word	0x10000012
 8006978:	40012000 	.word	0x40012000
 800697c:	40012300 	.word	0x40012300
 8006980:	200000cc 	.word	0x200000cc
 8006984:	431bde83 	.word	0x431bde83

08006988 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006990:	4b78      	ldr	r3, [pc, #480]	; (8006b74 <ADC_Init+0x1ec>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4a77      	ldr	r2, [pc, #476]	; (8006b74 <ADC_Init+0x1ec>)
 8006996:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800699a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800699c:	4b75      	ldr	r3, [pc, #468]	; (8006b74 <ADC_Init+0x1ec>)
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4973      	ldr	r1, [pc, #460]	; (8006b74 <ADC_Init+0x1ec>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6859      	ldr	r1, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	021a      	lsls	r2, r3, #8
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80069dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6859      	ldr	r1, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6899      	ldr	r1, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	4a58      	ldr	r2, [pc, #352]	; (8006b78 <ADC_Init+0x1f0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6899      	ldr	r1, [r3, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6899      	ldr	r1, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	e00f      	b.n	8006a82 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0202 	bic.w	r2, r2, #2
 8006a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6899      	ldr	r1, [r3, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	005a      	lsls	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006abe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006ace:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6859      	ldr	r1, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	3b01      	subs	r3, #1
 8006adc:	035a      	lsls	r2, r3, #13
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	e007      	b.n	8006af8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006af6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	051a      	lsls	r2, r3, #20
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6899      	ldr	r1, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b3a:	025a      	lsls	r2, r3, #9
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6899      	ldr	r1, [r3, #8]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	029a      	lsls	r2, r3, #10
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	40012300 	.word	0x40012300
 8006b78:	0f000001 	.word	0x0f000001

08006b7c <__NVIC_SetPriorityGrouping>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <__NVIC_SetPriorityGrouping+0x40>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b98:	4013      	ands	r3, r2
 8006b9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ba4:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006baa:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <__NVIC_SetPriorityGrouping+0x40>)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	60d3      	str	r3, [r2, #12]
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	e000ed00 	.word	0xe000ed00
 8006bc0:	05fa0000 	.word	0x05fa0000

08006bc4 <__NVIC_GetPriorityGrouping>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bc8:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <__NVIC_GetPriorityGrouping+0x18>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	f003 0307 	and.w	r3, r3, #7
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	e000ed00 	.word	0xe000ed00

08006be0 <__NVIC_EnableIRQ>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	db0b      	blt.n	8006c0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	f003 021f 	and.w	r2, r3, #31
 8006bf8:	4907      	ldr	r1, [pc, #28]	; (8006c18 <__NVIC_EnableIRQ+0x38>)
 8006bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2001      	movs	r0, #1
 8006c02:	fa00 f202 	lsl.w	r2, r0, r2
 8006c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	e000e100 	.word	0xe000e100

08006c1c <__NVIC_SetPriority>:
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	6039      	str	r1, [r7, #0]
 8006c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	db0a      	blt.n	8006c46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	490c      	ldr	r1, [pc, #48]	; (8006c68 <__NVIC_SetPriority+0x4c>)
 8006c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3a:	0112      	lsls	r2, r2, #4
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	440b      	add	r3, r1
 8006c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c44:	e00a      	b.n	8006c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4908      	ldr	r1, [pc, #32]	; (8006c6c <__NVIC_SetPriority+0x50>)
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	3b04      	subs	r3, #4
 8006c54:	0112      	lsls	r2, r2, #4
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	440b      	add	r3, r1
 8006c5a:	761a      	strb	r2, [r3, #24]
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	e000e100 	.word	0xe000e100
 8006c6c:	e000ed00 	.word	0xe000ed00

08006c70 <NVIC_EncodePriority>:
{
 8006c70:	b480      	push	{r7}
 8006c72:	b089      	sub	sp, #36	; 0x24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f1c3 0307 	rsb	r3, r3, #7
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	bf28      	it	cs
 8006c8e:	2304      	movcs	r3, #4
 8006c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	3304      	adds	r3, #4
 8006c96:	2b06      	cmp	r3, #6
 8006c98:	d902      	bls.n	8006ca0 <NVIC_EncodePriority+0x30>
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3b03      	subs	r3, #3
 8006c9e:	e000      	b.n	8006ca2 <NVIC_EncodePriority+0x32>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	43da      	mvns	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	43d9      	mvns	r1, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cc8:	4313      	orrs	r3, r2
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3724      	adds	r7, #36	; 0x24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ce8:	d301      	bcc.n	8006cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cea:	2301      	movs	r3, #1
 8006cec:	e00f      	b.n	8006d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cee:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <SysTick_Config+0x40>)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cf6:	210f      	movs	r1, #15
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	f7ff ff8e 	bl	8006c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <SysTick_Config+0x40>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d06:	4b04      	ldr	r3, [pc, #16]	; (8006d18 <SysTick_Config+0x40>)
 8006d08:	2207      	movs	r2, #7
 8006d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	e000e010 	.word	0xe000e010

08006d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ff29 	bl	8006b7c <__NVIC_SetPriorityGrouping>
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b086      	sub	sp, #24
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	4603      	mov	r3, r0
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d44:	f7ff ff3e 	bl	8006bc4 <__NVIC_GetPriorityGrouping>
 8006d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f7ff ff8e 	bl	8006c70 <NVIC_EncodePriority>
 8006d54:	4602      	mov	r2, r0
 8006d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff ff5d 	bl	8006c1c <__NVIC_SetPriority>
}
 8006d62:	bf00      	nop
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	4603      	mov	r3, r0
 8006d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff ff31 	bl	8006be0 <__NVIC_EnableIRQ>
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff ffa2 	bl	8006cd8 <SysTick_Config>
 8006d94:	4603      	mov	r3, r0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b089      	sub	sp, #36	; 0x24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	e175      	b.n	80070ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	f040 8164 	bne.w	80070a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d00b      	beq.n	8006dfe <HAL_GPIO_Init+0x5e>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d007      	beq.n	8006dfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006df2:	2b11      	cmp	r3, #17
 8006df4:	d003      	beq.n	8006dfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b12      	cmp	r3, #18
 8006dfc:	d130      	bne.n	8006e60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	2203      	movs	r2, #3
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	43db      	mvns	r3, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	4013      	ands	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e34:	2201      	movs	r2, #1
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4013      	ands	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	f003 0201 	and.w	r2, r3, #1
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	43db      	mvns	r3, r3
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4013      	ands	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d003      	beq.n	8006ea0 <HAL_GPIO_Init+0x100>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b12      	cmp	r3, #18
 8006e9e:	d123      	bne.n	8006ee8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	08da      	lsrs	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3208      	adds	r2, #8
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	220f      	movs	r2, #15
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	08da      	lsrs	r2, r3, #3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3208      	adds	r2, #8
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	4013      	ands	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 0203 	and.w	r2, r3, #3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80be 	beq.w	80070a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f2a:	4b66      	ldr	r3, [pc, #408]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	4a65      	ldr	r2, [pc, #404]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8006f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f34:	6453      	str	r3, [r2, #68]	; 0x44
 8006f36:	4b63      	ldr	r3, [pc, #396]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006f42:	4a61      	ldr	r2, [pc, #388]	; (80070c8 <HAL_GPIO_Init+0x328>)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	3302      	adds	r3, #2
 8006f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	220f      	movs	r2, #15
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4013      	ands	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a58      	ldr	r2, [pc, #352]	; (80070cc <HAL_GPIO_Init+0x32c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d037      	beq.n	8006fde <HAL_GPIO_Init+0x23e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a57      	ldr	r2, [pc, #348]	; (80070d0 <HAL_GPIO_Init+0x330>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d031      	beq.n	8006fda <HAL_GPIO_Init+0x23a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a56      	ldr	r2, [pc, #344]	; (80070d4 <HAL_GPIO_Init+0x334>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d02b      	beq.n	8006fd6 <HAL_GPIO_Init+0x236>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a55      	ldr	r2, [pc, #340]	; (80070d8 <HAL_GPIO_Init+0x338>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d025      	beq.n	8006fd2 <HAL_GPIO_Init+0x232>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a54      	ldr	r2, [pc, #336]	; (80070dc <HAL_GPIO_Init+0x33c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d01f      	beq.n	8006fce <HAL_GPIO_Init+0x22e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a53      	ldr	r2, [pc, #332]	; (80070e0 <HAL_GPIO_Init+0x340>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d019      	beq.n	8006fca <HAL_GPIO_Init+0x22a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a52      	ldr	r2, [pc, #328]	; (80070e4 <HAL_GPIO_Init+0x344>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_GPIO_Init+0x226>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a51      	ldr	r2, [pc, #324]	; (80070e8 <HAL_GPIO_Init+0x348>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00d      	beq.n	8006fc2 <HAL_GPIO_Init+0x222>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a50      	ldr	r2, [pc, #320]	; (80070ec <HAL_GPIO_Init+0x34c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <HAL_GPIO_Init+0x21e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a4f      	ldr	r2, [pc, #316]	; (80070f0 <HAL_GPIO_Init+0x350>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d101      	bne.n	8006fba <HAL_GPIO_Init+0x21a>
 8006fb6:	2309      	movs	r3, #9
 8006fb8:	e012      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fba:	230a      	movs	r3, #10
 8006fbc:	e010      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	e00e      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fc2:	2307      	movs	r3, #7
 8006fc4:	e00c      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fc6:	2306      	movs	r3, #6
 8006fc8:	e00a      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fca:	2305      	movs	r3, #5
 8006fcc:	e008      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fce:	2304      	movs	r3, #4
 8006fd0:	e006      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e004      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e002      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <HAL_GPIO_Init+0x240>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	f002 0203 	and.w	r2, r2, #3
 8006fe6:	0092      	lsls	r2, r2, #2
 8006fe8:	4093      	lsls	r3, r2
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006ff0:	4935      	ldr	r1, [pc, #212]	; (80070c8 <HAL_GPIO_Init+0x328>)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	089b      	lsrs	r3, r3, #2
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ffe:	4b3d      	ldr	r3, [pc, #244]	; (80070f4 <HAL_GPIO_Init+0x354>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	43db      	mvns	r3, r3
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	4013      	ands	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007022:	4a34      	ldr	r2, [pc, #208]	; (80070f4 <HAL_GPIO_Init+0x354>)
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007028:	4b32      	ldr	r3, [pc, #200]	; (80070f4 <HAL_GPIO_Init+0x354>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	43db      	mvns	r3, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4013      	ands	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800704c:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <HAL_GPIO_Init+0x354>)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007052:	4b28      	ldr	r3, [pc, #160]	; (80070f4 <HAL_GPIO_Init+0x354>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	43db      	mvns	r3, r3
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	4013      	ands	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007076:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <HAL_GPIO_Init+0x354>)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800707c:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <HAL_GPIO_Init+0x354>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	43db      	mvns	r3, r3
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	4013      	ands	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070a0:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <HAL_GPIO_Init+0x354>)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	3301      	adds	r3, #1
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	2b0f      	cmp	r3, #15
 80070b0:	f67f ae86 	bls.w	8006dc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	3724      	adds	r7, #36	; 0x24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40023800 	.word	0x40023800
 80070c8:	40013800 	.word	0x40013800
 80070cc:	40020000 	.word	0x40020000
 80070d0:	40020400 	.word	0x40020400
 80070d4:	40020800 	.word	0x40020800
 80070d8:	40020c00 	.word	0x40020c00
 80070dc:	40021000 	.word	0x40021000
 80070e0:	40021400 	.word	0x40021400
 80070e4:	40021800 	.word	0x40021800
 80070e8:	40021c00 	.word	0x40021c00
 80070ec:	40022000 	.word	0x40022000
 80070f0:	40022400 	.word	0x40022400
 80070f4:	40013c00 	.word	0x40013c00

080070f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e001      	b.n	800711a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	807b      	strh	r3, [r7, #2]
 8007134:	4613      	mov	r3, r2
 8007136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007138:	787b      	ldrb	r3, [r7, #1]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800713e:	887a      	ldrh	r2, [r7, #2]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007144:	e003      	b.n	800714e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007146:	887b      	ldrh	r3, [r7, #2]
 8007148:	041a      	lsls	r2, r3, #16
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	619a      	str	r2, [r3, #24]
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
	...

0800715c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007166:	4b08      	ldr	r3, [pc, #32]	; (8007188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	4013      	ands	r3, r2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d006      	beq.n	8007180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007172:	4a05      	ldr	r2, [pc, #20]	; (8007188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	4618      	mov	r0, r3
 800717c:	f7fd fc48 	bl	8004a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40013c00 	.word	0x40013c00

0800718c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e07f      	b.n	800729e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7f9 fdc0 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2224      	movs	r2, #36	; 0x24
 80071bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0201 	bic.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d107      	bne.n	8007206 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	e006      	b.n	8007214 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007212:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b02      	cmp	r3, #2
 800721a:	d104      	bne.n	8007226 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6859      	ldr	r1, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <HAL_I2C_Init+0x11c>)
 8007232:	430b      	orrs	r3, r1
 8007234:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007244:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	ea42 0103 	orr.w	r1, r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	021a      	lsls	r2, r3, #8
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	69d9      	ldr	r1, [r3, #28]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	02008000 	.word	0x02008000

080072ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	461a      	mov	r2, r3
 80072b8:	460b      	mov	r3, r1
 80072ba:	817b      	strh	r3, [r7, #10]
 80072bc:	4613      	mov	r3, r2
 80072be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	f040 80da 	bne.w	8007482 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_I2C_Master_Transmit+0x30>
 80072d8:	2302      	movs	r3, #2
 80072da:	e0d3      	b.n	8007484 <HAL_I2C_Master_Transmit+0x1d8>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072e4:	f7ff f82c 	bl	8006340 <HAL_GetTick>
 80072e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	2319      	movs	r3, #25
 80072f0:	2201      	movs	r2, #1
 80072f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fcbc 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e0be      	b.n	8007484 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2221      	movs	r2, #33	; 0x21
 800730a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2210      	movs	r2, #16
 8007312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	893a      	ldrh	r2, [r7, #8]
 8007326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007332:	b29b      	uxth	r3, r3
 8007334:	2bff      	cmp	r3, #255	; 0xff
 8007336:	d90e      	bls.n	8007356 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	22ff      	movs	r2, #255	; 0xff
 800733c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007342:	b2da      	uxtb	r2, r3
 8007344:	8979      	ldrh	r1, [r7, #10]
 8007346:	4b51      	ldr	r3, [pc, #324]	; (800748c <HAL_I2C_Master_Transmit+0x1e0>)
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fe1e 	bl	8007f90 <I2C_TransferConfig>
 8007354:	e06c      	b.n	8007430 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007364:	b2da      	uxtb	r2, r3
 8007366:	8979      	ldrh	r1, [r7, #10]
 8007368:	4b48      	ldr	r3, [pc, #288]	; (800748c <HAL_I2C_Master_Transmit+0x1e0>)
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fe0d 	bl	8007f90 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007376:	e05b      	b.n	8007430 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	6a39      	ldr	r1, [r7, #32]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fcb9 	bl	8007cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e07b      	b.n	8007484 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d034      	beq.n	8007430 <HAL_I2C_Master_Transmit+0x184>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d130      	bne.n	8007430 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	2200      	movs	r2, #0
 80073d6:	2180      	movs	r1, #128	; 0x80
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fc4b 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e04d      	b.n	8007484 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2bff      	cmp	r3, #255	; 0xff
 80073f0:	d90e      	bls.n	8007410 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	8979      	ldrh	r1, [r7, #10]
 8007400:	2300      	movs	r3, #0
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fdc1 	bl	8007f90 <I2C_TransferConfig>
 800740e:	e00f      	b.n	8007430 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741e:	b2da      	uxtb	r2, r3
 8007420:	8979      	ldrh	r1, [r7, #10]
 8007422:	2300      	movs	r3, #0
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 fdb0 	bl	8007f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d19e      	bne.n	8007378 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	6a39      	ldr	r1, [r7, #32]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fc98 	bl	8007d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e01a      	b.n	8007484 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2220      	movs	r2, #32
 8007454:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6859      	ldr	r1, [r3, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <HAL_I2C_Master_Transmit+0x1e4>)
 8007462:	400b      	ands	r3, r1
 8007464:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	e000      	b.n	8007484 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007482:	2302      	movs	r3, #2
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	80002000 	.word	0x80002000
 8007490:	fe00e800 	.word	0xfe00e800

08007494 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af02      	add	r7, sp, #8
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	461a      	mov	r2, r3
 80074a0:	460b      	mov	r3, r1
 80074a2:	817b      	strh	r3, [r7, #10]
 80074a4:	4613      	mov	r3, r2
 80074a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	f040 80db 	bne.w	800766c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_I2C_Master_Receive+0x30>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e0d4      	b.n	800766e <HAL_I2C_Master_Receive+0x1da>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074cc:	f7fe ff38 	bl	8006340 <HAL_GetTick>
 80074d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	2319      	movs	r3, #25
 80074d8:	2201      	movs	r2, #1
 80074da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fbc8 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e0bf      	b.n	800766e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2222      	movs	r2, #34	; 0x22
 80074f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2210      	movs	r2, #16
 80074fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	893a      	ldrh	r2, [r7, #8]
 800750e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	2bff      	cmp	r3, #255	; 0xff
 800751e:	d90e      	bls.n	800753e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	22ff      	movs	r2, #255	; 0xff
 8007524:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752a:	b2da      	uxtb	r2, r3
 800752c:	8979      	ldrh	r1, [r7, #10]
 800752e:	4b52      	ldr	r3, [pc, #328]	; (8007678 <HAL_I2C_Master_Receive+0x1e4>)
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fd2a 	bl	8007f90 <I2C_TransferConfig>
 800753c:	e06d      	b.n	800761a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754c:	b2da      	uxtb	r2, r3
 800754e:	8979      	ldrh	r1, [r7, #10]
 8007550:	4b49      	ldr	r3, [pc, #292]	; (8007678 <HAL_I2C_Master_Receive+0x1e4>)
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fd19 	bl	8007f90 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800755e:	e05c      	b.n	800761a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	6a39      	ldr	r1, [r7, #32]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fc41 	bl	8007dec <I2C_WaitOnRXNEFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e07c      	b.n	800766e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d034      	beq.n	800761a <HAL_I2C_Master_Receive+0x186>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d130      	bne.n	800761a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	2200      	movs	r2, #0
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fb56 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e04d      	b.n	800766e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2bff      	cmp	r3, #255	; 0xff
 80075da:	d90e      	bls.n	80075fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	22ff      	movs	r2, #255	; 0xff
 80075e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	8979      	ldrh	r1, [r7, #10]
 80075ea:	2300      	movs	r3, #0
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 fccc 	bl	8007f90 <I2C_TransferConfig>
 80075f8:	e00f      	b.n	800761a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007608:	b2da      	uxtb	r2, r3
 800760a:	8979      	ldrh	r1, [r7, #10]
 800760c:	2300      	movs	r3, #0
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fcbb 	bl	8007f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d19d      	bne.n	8007560 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	6a39      	ldr	r1, [r7, #32]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fba3 	bl	8007d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e01a      	b.n	800766e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2220      	movs	r2, #32
 800763e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6859      	ldr	r1, [r3, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	4b0c      	ldr	r3, [pc, #48]	; (800767c <HAL_I2C_Master_Receive+0x1e8>)
 800764c:	400b      	ands	r3, r1
 800764e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	80002400 	.word	0x80002400
 800767c:	fe00e800 	.word	0xfe00e800

08007680 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	4608      	mov	r0, r1
 800768a:	4611      	mov	r1, r2
 800768c:	461a      	mov	r2, r3
 800768e:	4603      	mov	r3, r0
 8007690:	817b      	strh	r3, [r7, #10]
 8007692:	460b      	mov	r3, r1
 8007694:	813b      	strh	r3, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	f040 80f9 	bne.w	800789a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <HAL_I2C_Mem_Write+0x34>
 80076ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e0ed      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_I2C_Mem_Write+0x4e>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e0e6      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076d6:	f7fe fe33 	bl	8006340 <HAL_GetTick>
 80076da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	2319      	movs	r3, #25
 80076e2:	2201      	movs	r2, #1
 80076e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fac3 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e0d1      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2221      	movs	r2, #33	; 0x21
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2240      	movs	r2, #64	; 0x40
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a3a      	ldr	r2, [r7, #32]
 8007712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007720:	88f8      	ldrh	r0, [r7, #6]
 8007722:	893a      	ldrh	r2, [r7, #8]
 8007724:	8979      	ldrh	r1, [r7, #10]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4603      	mov	r3, r0
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f9d3 	bl	8007adc <I2C_RequestMemoryWrite>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0a9      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774c:	b29b      	uxth	r3, r3
 800774e:	2bff      	cmp	r3, #255	; 0xff
 8007750:	d90e      	bls.n	8007770 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	22ff      	movs	r2, #255	; 0xff
 8007756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775c:	b2da      	uxtb	r2, r3
 800775e:	8979      	ldrh	r1, [r7, #10]
 8007760:	2300      	movs	r3, #0
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fc11 	bl	8007f90 <I2C_TransferConfig>
 800776e:	e00f      	b.n	8007790 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777e:	b2da      	uxtb	r2, r3
 8007780:	8979      	ldrh	r1, [r7, #10]
 8007782:	2300      	movs	r3, #0
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 fc00 	bl	8007f90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 faad 	bl	8007cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e07b      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d034      	beq.n	8007848 <HAL_I2C_Mem_Write+0x1c8>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d130      	bne.n	8007848 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	2200      	movs	r2, #0
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fa3f 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e04d      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2bff      	cmp	r3, #255	; 0xff
 8007808:	d90e      	bls.n	8007828 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	22ff      	movs	r2, #255	; 0xff
 800780e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007814:	b2da      	uxtb	r2, r3
 8007816:	8979      	ldrh	r1, [r7, #10]
 8007818:	2300      	movs	r3, #0
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fbb5 	bl	8007f90 <I2C_TransferConfig>
 8007826:	e00f      	b.n	8007848 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007836:	b2da      	uxtb	r2, r3
 8007838:	8979      	ldrh	r1, [r7, #10]
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fba4 	bl	8007f90 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d19e      	bne.n	8007790 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fa8c 	bl	8007d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e01a      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2220      	movs	r2, #32
 800786c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6859      	ldr	r1, [r3, #4]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <HAL_I2C_Mem_Write+0x224>)
 800787a:	400b      	ands	r3, r1
 800787c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	e000      	b.n	800789c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800789a:	2302      	movs	r3, #2
  }
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	fe00e800 	.word	0xfe00e800

080078a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	4608      	mov	r0, r1
 80078b2:	4611      	mov	r1, r2
 80078b4:	461a      	mov	r2, r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	817b      	strh	r3, [r7, #10]
 80078ba:	460b      	mov	r3, r1
 80078bc:	813b      	strh	r3, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	f040 80fd 	bne.w	8007aca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_I2C_Mem_Read+0x34>
 80078d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0f1      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_I2C_Mem_Read+0x4e>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e0ea      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078fe:	f7fe fd1f 	bl	8006340 <HAL_GetTick>
 8007902:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2319      	movs	r3, #25
 800790a:	2201      	movs	r2, #1
 800790c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f9af 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0d5      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2222      	movs	r2, #34	; 0x22
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2240      	movs	r2, #64	; 0x40
 800792c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007948:	88f8      	ldrh	r0, [r7, #6]
 800794a:	893a      	ldrh	r2, [r7, #8]
 800794c:	8979      	ldrh	r1, [r7, #10]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	4603      	mov	r3, r0
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f913 	bl	8007b84 <I2C_RequestMemoryRead>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0ad      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2bff      	cmp	r3, #255	; 0xff
 8007978:	d90e      	bls.n	8007998 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007984:	b2da      	uxtb	r2, r3
 8007986:	8979      	ldrh	r1, [r7, #10]
 8007988:	4b52      	ldr	r3, [pc, #328]	; (8007ad4 <HAL_I2C_Mem_Read+0x22c>)
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fafd 	bl	8007f90 <I2C_TransferConfig>
 8007996:	e00f      	b.n	80079b8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	8979      	ldrh	r1, [r7, #10]
 80079aa:	4b4a      	ldr	r3, [pc, #296]	; (8007ad4 <HAL_I2C_Mem_Read+0x22c>)
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 faec 	bl	8007f90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	2200      	movs	r2, #0
 80079c0:	2104      	movs	r1, #4
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f956 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e07c      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	b2d2      	uxtb	r2, r2
 80079de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d034      	beq.n	8007a78 <HAL_I2C_Mem_Read+0x1d0>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d130      	bne.n	8007a78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2180      	movs	r1, #128	; 0x80
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f927 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e04d      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2bff      	cmp	r3, #255	; 0xff
 8007a38:	d90e      	bls.n	8007a58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	22ff      	movs	r2, #255	; 0xff
 8007a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	8979      	ldrh	r1, [r7, #10]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fa9d 	bl	8007f90 <I2C_TransferConfig>
 8007a56:	e00f      	b.n	8007a78 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	8979      	ldrh	r1, [r7, #10]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fa8c 	bl	8007f90 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d19a      	bne.n	80079b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f974 	bl	8007d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e01a      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6859      	ldr	r1, [r3, #4]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <HAL_I2C_Mem_Read+0x230>)
 8007aaa:	400b      	ands	r3, r1
 8007aac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
  }
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	80002400 	.word	0x80002400
 8007ad8:	fe00e800 	.word	0xfe00e800

08007adc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4603      	mov	r3, r0
 8007aec:	817b      	strh	r3, [r7, #10]
 8007aee:	460b      	mov	r3, r1
 8007af0:	813b      	strh	r3, [r7, #8]
 8007af2:	4613      	mov	r3, r2
 8007af4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	8979      	ldrh	r1, [r7, #10]
 8007afc:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <I2C_RequestMemoryWrite+0xa4>)
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fa43 	bl	8007f90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	69b9      	ldr	r1, [r7, #24]
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f8f0 	bl	8007cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e02c      	b.n	8007b78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d105      	bne.n	8007b30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b24:	893b      	ldrh	r3, [r7, #8]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8007b2e:	e015      	b.n	8007b5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	69b9      	ldr	r1, [r7, #24]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f8d6 	bl	8007cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e012      	b.n	8007b78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b52:	893b      	ldrh	r3, [r7, #8]
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	2200      	movs	r2, #0
 8007b64:	2180      	movs	r1, #128	; 0x80
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f884 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	80002000 	.word	0x80002000

08007b84 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	461a      	mov	r2, r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	817b      	strh	r3, [r7, #10]
 8007b96:	460b      	mov	r3, r1
 8007b98:	813b      	strh	r3, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	8979      	ldrh	r1, [r7, #10]
 8007ba4:	4b20      	ldr	r3, [pc, #128]	; (8007c28 <I2C_RequestMemoryRead+0xa4>)
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f9f0 	bl	8007f90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	69b9      	ldr	r1, [r7, #24]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f89d 	bl	8007cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e02c      	b.n	8007c1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d105      	bne.n	8007bd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bca:	893b      	ldrh	r3, [r7, #8]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8007bd4:	e015      	b.n	8007c02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bd6:	893b      	ldrh	r3, [r7, #8]
 8007bd8:	0a1b      	lsrs	r3, r3, #8
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	69b9      	ldr	r1, [r7, #24]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f883 	bl	8007cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e012      	b.n	8007c1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf8:	893b      	ldrh	r3, [r7, #8]
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2140      	movs	r1, #64	; 0x40
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f831 	bl	8007c74 <I2C_WaitOnFlagUntilTimeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	80002000 	.word	0x80002000

08007c2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d103      	bne.n	8007c4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2200      	movs	r2, #0
 8007c48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d007      	beq.n	8007c68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699a      	ldr	r2, [r3, #24]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	619a      	str	r2, [r3, #24]
  }
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c84:	e022      	b.n	8007ccc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d01e      	beq.n	8007ccc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7fe fb57 	bl	8006340 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d113      	bne.n	8007ccc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca8:	f043 0220 	orr.w	r2, r3, #32
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e00f      	b.n	8007cec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	bf0c      	ite	eq
 8007cdc:	2301      	moveq	r3, #1
 8007cde:	2300      	movne	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d0cd      	beq.n	8007c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d00:	e02c      	b.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	68b9      	ldr	r1, [r7, #8]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f8dc 	bl	8007ec4 <I2C_IsAcknowledgeFailed>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e02a      	b.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d01e      	beq.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1e:	f7fe fb0f 	bl	8006340 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d302      	bcc.n	8007d34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d113      	bne.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d38:	f043 0220 	orr.w	r2, r3, #32
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e007      	b.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d1cb      	bne.n	8007d02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d80:	e028      	b.n	8007dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f89c 	bl	8007ec4 <I2C_IsAcknowledgeFailed>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e026      	b.n	8007de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d96:	f7fe fad3 	bl	8006340 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d302      	bcc.n	8007dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d113      	bne.n	8007dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db0:	f043 0220 	orr.w	r2, r3, #32
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e007      	b.n	8007de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	d1cf      	bne.n	8007d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007df8:	e055      	b.n	8007ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	68b9      	ldr	r1, [r7, #8]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f860 	bl	8007ec4 <I2C_IsAcknowledgeFailed>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e053      	b.n	8007eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d129      	bne.n	8007e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d105      	bne.n	8007e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e03f      	b.n	8007eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6859      	ldr	r1, [r3, #4]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	4b1d      	ldr	r3, [pc, #116]	; (8007ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007e4a:	400b      	ands	r3, r1
 8007e4c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e022      	b.n	8007eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e70:	f7fe fa66 	bl	8006340 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10f      	bne.n	8007ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	f043 0220 	orr.w	r2, r3, #32
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e007      	b.n	8007eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d1a2      	bne.n	8007dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	fe00e800 	.word	0xfe00e800

08007ec4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f003 0310 	and.w	r3, r3, #16
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d151      	bne.n	8007f82 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ede:	e022      	b.n	8007f26 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d01e      	beq.n	8007f26 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee8:	f7fe fa2a 	bl	8006340 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d302      	bcc.n	8007efe <I2C_IsAcknowledgeFailed+0x3a>
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d113      	bne.n	8007f26 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	f043 0220 	orr.w	r2, r3, #32
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e02e      	b.n	8007f84 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d1d5      	bne.n	8007ee0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2210      	movs	r2, #16
 8007f3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2220      	movs	r2, #32
 8007f42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff fe71 	bl	8007c2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6859      	ldr	r1, [r3, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <I2C_IsAcknowledgeFailed+0xc8>)
 8007f56:	400b      	ands	r3, r1
 8007f58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5e:	f043 0204 	orr.w	r2, r3, #4
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e000      	b.n	8007f84 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	fe00e800 	.word	0xfe00e800

08007f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	817b      	strh	r3, [r7, #10]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	0d5b      	lsrs	r3, r3, #21
 8007fac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <I2C_TransferConfig+0x58>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	ea02 0103 	and.w	r1, r2, r3
 8007fba:	897b      	ldrh	r3, [r7, #10]
 8007fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007fc0:	7a7b      	ldrb	r3, [r7, #9]
 8007fc2:	041b      	lsls	r3, r3, #16
 8007fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	03ff63ff 	.word	0x03ff63ff

08007fec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d138      	bne.n	8008074 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800800c:	2302      	movs	r3, #2
 800800e:	e032      	b.n	8008076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2224      	movs	r2, #36	; 0x24
 800801c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800803e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6819      	ldr	r1, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	e000      	b.n	8008076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b20      	cmp	r3, #32
 8008096:	d139      	bne.n	800810c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080a2:	2302      	movs	r3, #2
 80080a4:	e033      	b.n	800810e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2224      	movs	r2, #36	; 0x24
 80080b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0201 	bic.w	r2, r2, #1
 80080c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
	...

0800811c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a04      	ldr	r2, [pc, #16]	; (8008138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800812a:	6013      	str	r3, [r2, #0]
}
 800812c:	bf00      	nop
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	40007000 	.word	0x40007000

0800813c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008146:	4b23      	ldr	r3, [pc, #140]	; (80081d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	4a22      	ldr	r2, [pc, #136]	; (80081d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800814c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008150:	6413      	str	r3, [r2, #64]	; 0x40
 8008152:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800815e:	4b1e      	ldr	r3, [pc, #120]	; (80081d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1d      	ldr	r2, [pc, #116]	; (80081d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008168:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800816a:	f7fe f8e9 	bl	8006340 <HAL_GetTick>
 800816e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008170:	e009      	b.n	8008186 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008172:	f7fe f8e5 	bl	8006340 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008180:	d901      	bls.n	8008186 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e022      	b.n	80081cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800818e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008192:	d1ee      	bne.n	8008172 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a0f      	ldr	r2, [pc, #60]	; (80081d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800819a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800819e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80081a0:	f7fe f8ce 	bl	8006340 <HAL_GetTick>
 80081a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081a6:	e009      	b.n	80081bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80081a8:	f7fe f8ca 	bl	8006340 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081b6:	d901      	bls.n	80081bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e007      	b.n	80081cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c8:	d1ee      	bne.n	80081a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	40023800 	.word	0x40023800
 80081d8:	40007000 	.word	0x40007000

080081dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e29b      	b.n	800872a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8087 	beq.w	800830e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008200:	4b96      	ldr	r3, [pc, #600]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 030c 	and.w	r3, r3, #12
 8008208:	2b04      	cmp	r3, #4
 800820a:	d00c      	beq.n	8008226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800820c:	4b93      	ldr	r3, [pc, #588]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 030c 	and.w	r3, r3, #12
 8008214:	2b08      	cmp	r3, #8
 8008216:	d112      	bne.n	800823e <HAL_RCC_OscConfig+0x62>
 8008218:	4b90      	ldr	r3, [pc, #576]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008224:	d10b      	bne.n	800823e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008226:	4b8d      	ldr	r3, [pc, #564]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d06c      	beq.n	800830c <HAL_RCC_OscConfig+0x130>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d168      	bne.n	800830c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e275      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008246:	d106      	bne.n	8008256 <HAL_RCC_OscConfig+0x7a>
 8008248:	4b84      	ldr	r3, [pc, #528]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a83      	ldr	r2, [pc, #524]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800824e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	e02e      	b.n	80082b4 <HAL_RCC_OscConfig+0xd8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10c      	bne.n	8008278 <HAL_RCC_OscConfig+0x9c>
 800825e:	4b7f      	ldr	r3, [pc, #508]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a7e      	ldr	r2, [pc, #504]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	4b7c      	ldr	r3, [pc, #496]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a7b      	ldr	r2, [pc, #492]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	e01d      	b.n	80082b4 <HAL_RCC_OscConfig+0xd8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008280:	d10c      	bne.n	800829c <HAL_RCC_OscConfig+0xc0>
 8008282:	4b76      	ldr	r3, [pc, #472]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a75      	ldr	r2, [pc, #468]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	4b73      	ldr	r3, [pc, #460]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a72      	ldr	r2, [pc, #456]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e00b      	b.n	80082b4 <HAL_RCC_OscConfig+0xd8>
 800829c:	4b6f      	ldr	r3, [pc, #444]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a6e      	ldr	r2, [pc, #440]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80082a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	4b6c      	ldr	r3, [pc, #432]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a6b      	ldr	r2, [pc, #428]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80082ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d013      	beq.n	80082e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fe f840 	bl	8006340 <HAL_GetTick>
 80082c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c4:	f7fe f83c 	bl	8006340 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b64      	cmp	r3, #100	; 0x64
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e229      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082d6:	4b61      	ldr	r3, [pc, #388]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f0      	beq.n	80082c4 <HAL_RCC_OscConfig+0xe8>
 80082e2:	e014      	b.n	800830e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fe f82c 	bl	8006340 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082ec:	f7fe f828 	bl	8006340 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b64      	cmp	r3, #100	; 0x64
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e215      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082fe:	4b57      	ldr	r3, [pc, #348]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f0      	bne.n	80082ec <HAL_RCC_OscConfig+0x110>
 800830a:	e000      	b.n	800830e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800830c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d069      	beq.n	80083ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800831a:	4b50      	ldr	r3, [pc, #320]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 030c 	and.w	r3, r3, #12
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008326:	4b4d      	ldr	r3, [pc, #308]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 030c 	and.w	r3, r3, #12
 800832e:	2b08      	cmp	r3, #8
 8008330:	d11c      	bne.n	800836c <HAL_RCC_OscConfig+0x190>
 8008332:	4b4a      	ldr	r3, [pc, #296]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d116      	bne.n	800836c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800833e:	4b47      	ldr	r3, [pc, #284]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_RCC_OscConfig+0x17a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d001      	beq.n	8008356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e1e9      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008356:	4b41      	ldr	r3, [pc, #260]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	493d      	ldr	r1, [pc, #244]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008366:	4313      	orrs	r3, r2
 8008368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800836a:	e040      	b.n	80083ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d023      	beq.n	80083bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008374:	4b39      	ldr	r3, [pc, #228]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a38      	ldr	r2, [pc, #224]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7fd ffde 	bl	8006340 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008388:	f7fd ffda 	bl	8006340 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e1c7      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800839a:	4b30      	ldr	r3, [pc, #192]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a6:	4b2d      	ldr	r3, [pc, #180]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4929      	ldr	r1, [pc, #164]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	600b      	str	r3, [r1, #0]
 80083ba:	e018      	b.n	80083ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083bc:	4b27      	ldr	r3, [pc, #156]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a26      	ldr	r2, [pc, #152]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c8:	f7fd ffba 	bl	8006340 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083d0:	f7fd ffb6 	bl	8006340 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e1a3      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e2:	4b1e      	ldr	r3, [pc, #120]	; (800845c <HAL_RCC_OscConfig+0x280>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f0      	bne.n	80083d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d038      	beq.n	800846c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d019      	beq.n	8008436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008402:	4b16      	ldr	r3, [pc, #88]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008406:	4a15      	ldr	r2, [pc, #84]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800840e:	f7fd ff97 	bl	8006340 <HAL_GetTick>
 8008412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008414:	e008      	b.n	8008428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008416:	f7fd ff93 	bl	8006340 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e180      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008428:	4b0c      	ldr	r3, [pc, #48]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800842a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0f0      	beq.n	8008416 <HAL_RCC_OscConfig+0x23a>
 8008434:	e01a      	b.n	800846c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <HAL_RCC_OscConfig+0x280>)
 8008438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843a:	4a08      	ldr	r2, [pc, #32]	; (800845c <HAL_RCC_OscConfig+0x280>)
 800843c:	f023 0301 	bic.w	r3, r3, #1
 8008440:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008442:	f7fd ff7d 	bl	8006340 <HAL_GetTick>
 8008446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008448:	e00a      	b.n	8008460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800844a:	f7fd ff79 	bl	8006340 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d903      	bls.n	8008460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e166      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
 800845c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008460:	4b92      	ldr	r3, [pc, #584]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1ee      	bne.n	800844a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80a4 	beq.w	80085c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800847a:	4b8c      	ldr	r3, [pc, #560]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008486:	4b89      	ldr	r3, [pc, #548]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	4a88      	ldr	r2, [pc, #544]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800848c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008490:	6413      	str	r3, [r2, #64]	; 0x40
 8008492:	4b86      	ldr	r3, [pc, #536]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849a:	60bb      	str	r3, [r7, #8]
 800849c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800849e:	2301      	movs	r3, #1
 80084a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084a2:	4b83      	ldr	r3, [pc, #524]	; (80086b0 <HAL_RCC_OscConfig+0x4d4>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d118      	bne.n	80084e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80084ae:	4b80      	ldr	r3, [pc, #512]	; (80086b0 <HAL_RCC_OscConfig+0x4d4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a7f      	ldr	r2, [pc, #508]	; (80086b0 <HAL_RCC_OscConfig+0x4d4>)
 80084b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084ba:	f7fd ff41 	bl	8006340 <HAL_GetTick>
 80084be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084c0:	e008      	b.n	80084d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084c2:	f7fd ff3d 	bl	8006340 <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b64      	cmp	r3, #100	; 0x64
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e12a      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084d4:	4b76      	ldr	r3, [pc, #472]	; (80086b0 <HAL_RCC_OscConfig+0x4d4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0f0      	beq.n	80084c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d106      	bne.n	80084f6 <HAL_RCC_OscConfig+0x31a>
 80084e8:	4b70      	ldr	r3, [pc, #448]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80084ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ec:	4a6f      	ldr	r2, [pc, #444]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80084ee:	f043 0301 	orr.w	r3, r3, #1
 80084f2:	6713      	str	r3, [r2, #112]	; 0x70
 80084f4:	e02d      	b.n	8008552 <HAL_RCC_OscConfig+0x376>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10c      	bne.n	8008518 <HAL_RCC_OscConfig+0x33c>
 80084fe:	4b6b      	ldr	r3, [pc, #428]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	4a6a      	ldr	r2, [pc, #424]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008504:	f023 0301 	bic.w	r3, r3, #1
 8008508:	6713      	str	r3, [r2, #112]	; 0x70
 800850a:	4b68      	ldr	r3, [pc, #416]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800850c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850e:	4a67      	ldr	r2, [pc, #412]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008510:	f023 0304 	bic.w	r3, r3, #4
 8008514:	6713      	str	r3, [r2, #112]	; 0x70
 8008516:	e01c      	b.n	8008552 <HAL_RCC_OscConfig+0x376>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b05      	cmp	r3, #5
 800851e:	d10c      	bne.n	800853a <HAL_RCC_OscConfig+0x35e>
 8008520:	4b62      	ldr	r3, [pc, #392]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008524:	4a61      	ldr	r2, [pc, #388]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008526:	f043 0304 	orr.w	r3, r3, #4
 800852a:	6713      	str	r3, [r2, #112]	; 0x70
 800852c:	4b5f      	ldr	r3, [pc, #380]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800852e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008530:	4a5e      	ldr	r2, [pc, #376]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	6713      	str	r3, [r2, #112]	; 0x70
 8008538:	e00b      	b.n	8008552 <HAL_RCC_OscConfig+0x376>
 800853a:	4b5c      	ldr	r3, [pc, #368]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800853c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853e:	4a5b      	ldr	r2, [pc, #364]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	6713      	str	r3, [r2, #112]	; 0x70
 8008546:	4b59      	ldr	r3, [pc, #356]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854a:	4a58      	ldr	r2, [pc, #352]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800854c:	f023 0304 	bic.w	r3, r3, #4
 8008550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d015      	beq.n	8008586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800855a:	f7fd fef1 	bl	8006340 <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008560:	e00a      	b.n	8008578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008562:	f7fd feed 	bl	8006340 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008570:	4293      	cmp	r3, r2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e0d8      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008578:	4b4c      	ldr	r3, [pc, #304]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800857a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0ee      	beq.n	8008562 <HAL_RCC_OscConfig+0x386>
 8008584:	e014      	b.n	80085b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008586:	f7fd fedb 	bl	8006340 <HAL_GetTick>
 800858a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800858c:	e00a      	b.n	80085a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800858e:	f7fd fed7 	bl	8006340 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	4293      	cmp	r3, r2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e0c2      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085a4:	4b41      	ldr	r3, [pc, #260]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80085a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1ee      	bne.n	800858e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d105      	bne.n	80085c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085b6:	4b3d      	ldr	r3, [pc, #244]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	4a3c      	ldr	r2, [pc, #240]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80085bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 80ae 	beq.w	8008728 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085cc:	4b37      	ldr	r3, [pc, #220]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 030c 	and.w	r3, r3, #12
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d06d      	beq.n	80086b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d14b      	bne.n	8008678 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e0:	4b32      	ldr	r3, [pc, #200]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a31      	ldr	r2, [pc, #196]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80085e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ec:	f7fd fea8 	bl	8006340 <HAL_GetTick>
 80085f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085f4:	f7fd fea4 	bl	8006340 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e091      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f0      	bne.n	80085f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69da      	ldr	r2, [r3, #28]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	019b      	lsls	r3, r3, #6
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	3b01      	subs	r3, #1
 800862c:	041b      	lsls	r3, r3, #16
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	061b      	lsls	r3, r3, #24
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	071b      	lsls	r3, r3, #28
 800863e:	491b      	ldr	r1, [pc, #108]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008640:	4313      	orrs	r3, r2
 8008642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008644:	4b19      	ldr	r3, [pc, #100]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a18      	ldr	r2, [pc, #96]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800864a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800864e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008650:	f7fd fe76 	bl	8006340 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008658:	f7fd fe72 	bl	8006340 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e05f      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800866a:	4b10      	ldr	r3, [pc, #64]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f0      	beq.n	8008658 <HAL_RCC_OscConfig+0x47c>
 8008676:	e057      	b.n	8008728 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a0b      	ldr	r2, [pc, #44]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 800867e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008684:	f7fd fe5c 	bl	8006340 <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800868c:	f7fd fe58 	bl	8006340 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e045      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800869e:	4b03      	ldr	r3, [pc, #12]	; (80086ac <HAL_RCC_OscConfig+0x4d0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f0      	bne.n	800868c <HAL_RCC_OscConfig+0x4b0>
 80086aa:	e03d      	b.n	8008728 <HAL_RCC_OscConfig+0x54c>
 80086ac:	40023800 	.word	0x40023800
 80086b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80086b4:	4b1f      	ldr	r3, [pc, #124]	; (8008734 <HAL_RCC_OscConfig+0x558>)
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d030      	beq.n	8008724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d129      	bne.n	8008724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d122      	bne.n	8008724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086e4:	4013      	ands	r3, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d119      	bne.n	8008724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	085b      	lsrs	r3, r3, #1
 80086fc:	3b01      	subs	r3, #1
 80086fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008700:	429a      	cmp	r2, r3
 8008702:	d10f      	bne.n	8008724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008710:	429a      	cmp	r2, r3
 8008712:	d107      	bne.n	8008724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	d001      	beq.n	8008728 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40023800 	.word	0x40023800

08008738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0d0      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008750:	4b6a      	ldr	r3, [pc, #424]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d910      	bls.n	8008780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800875e:	4b67      	ldr	r3, [pc, #412]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f023 020f 	bic.w	r2, r3, #15
 8008766:	4965      	ldr	r1, [pc, #404]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	4313      	orrs	r3, r2
 800876c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800876e:	4b63      	ldr	r3, [pc, #396]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 030f 	and.w	r3, r3, #15
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d001      	beq.n	8008780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e0b8      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d020      	beq.n	80087ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008798:	4b59      	ldr	r3, [pc, #356]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	4a58      	ldr	r2, [pc, #352]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 800879e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087b0:	4b53      	ldr	r3, [pc, #332]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	4a52      	ldr	r2, [pc, #328]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80087b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087bc:	4b50      	ldr	r3, [pc, #320]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	494d      	ldr	r1, [pc, #308]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d040      	beq.n	800885c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d107      	bne.n	80087f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087e2:	4b47      	ldr	r3, [pc, #284]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d115      	bne.n	800881a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e07f      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d107      	bne.n	800880a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087fa:	4b41      	ldr	r3, [pc, #260]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e073      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800880a:	4b3d      	ldr	r3, [pc, #244]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e06b      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800881a:	4b39      	ldr	r3, [pc, #228]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f023 0203 	bic.w	r2, r3, #3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	4936      	ldr	r1, [pc, #216]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 8008828:	4313      	orrs	r3, r2
 800882a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882c:	f7fd fd88 	bl	8006340 <HAL_GetTick>
 8008830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008832:	e00a      	b.n	800884a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008834:	f7fd fd84 	bl	8006340 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008842:	4293      	cmp	r3, r2
 8008844:	d901      	bls.n	800884a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e053      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800884a:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 020c 	and.w	r2, r3, #12
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	429a      	cmp	r2, r3
 800885a:	d1eb      	bne.n	8008834 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800885c:	4b27      	ldr	r3, [pc, #156]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d210      	bcs.n	800888c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800886a:	4b24      	ldr	r3, [pc, #144]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f023 020f 	bic.w	r2, r3, #15
 8008872:	4922      	ldr	r1, [pc, #136]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	4313      	orrs	r3, r2
 8008878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800887a:	4b20      	ldr	r3, [pc, #128]	; (80088fc <HAL_RCC_ClockConfig+0x1c4>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e032      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4916      	ldr	r1, [pc, #88]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80088b6:	4b12      	ldr	r3, [pc, #72]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	490e      	ldr	r1, [pc, #56]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80088ca:	f000 f821 	bl	8008910 <HAL_RCC_GetSysClockFreq>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <HAL_RCC_ClockConfig+0x1c8>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	091b      	lsrs	r3, r3, #4
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	490a      	ldr	r1, [pc, #40]	; (8008904 <HAL_RCC_ClockConfig+0x1cc>)
 80088dc:	5ccb      	ldrb	r3, [r1, r3]
 80088de:	fa22 f303 	lsr.w	r3, r2, r3
 80088e2:	4a09      	ldr	r2, [pc, #36]	; (8008908 <HAL_RCC_ClockConfig+0x1d0>)
 80088e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <HAL_RCC_ClockConfig+0x1d4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fd fce4 	bl	80062b8 <HAL_InitTick>

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40023c00 	.word	0x40023c00
 8008900:	40023800 	.word	0x40023800
 8008904:	0800e858 	.word	0x0800e858
 8008908:	200000cc 	.word	0x200000cc
 800890c:	200000d4 	.word	0x200000d4

08008910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	2300      	movs	r3, #0
 8008922:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008928:	4b67      	ldr	r3, [pc, #412]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 030c 	and.w	r3, r3, #12
 8008930:	2b08      	cmp	r3, #8
 8008932:	d00d      	beq.n	8008950 <HAL_RCC_GetSysClockFreq+0x40>
 8008934:	2b08      	cmp	r3, #8
 8008936:	f200 80bd 	bhi.w	8008ab4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <HAL_RCC_GetSysClockFreq+0x34>
 800893e:	2b04      	cmp	r3, #4
 8008940:	d003      	beq.n	800894a <HAL_RCC_GetSysClockFreq+0x3a>
 8008942:	e0b7      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008944:	4b61      	ldr	r3, [pc, #388]	; (8008acc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008946:	60bb      	str	r3, [r7, #8]
      break;
 8008948:	e0b7      	b.n	8008aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800894a:	4b61      	ldr	r3, [pc, #388]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800894c:	60bb      	str	r3, [r7, #8]
      break;
 800894e:	e0b4      	b.n	8008aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008950:	4b5d      	ldr	r3, [pc, #372]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008958:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800895a:	4b5b      	ldr	r3, [pc, #364]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d04d      	beq.n	8008a02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008966:	4b58      	ldr	r3, [pc, #352]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	099b      	lsrs	r3, r3, #6
 800896c:	461a      	mov	r2, r3
 800896e:	f04f 0300 	mov.w	r3, #0
 8008972:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008976:	f04f 0100 	mov.w	r1, #0
 800897a:	ea02 0800 	and.w	r8, r2, r0
 800897e:	ea03 0901 	and.w	r9, r3, r1
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	014b      	lsls	r3, r1, #5
 8008990:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008994:	0142      	lsls	r2, r0, #5
 8008996:	4610      	mov	r0, r2
 8008998:	4619      	mov	r1, r3
 800899a:	ebb0 0008 	subs.w	r0, r0, r8
 800899e:	eb61 0109 	sbc.w	r1, r1, r9
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	f04f 0300 	mov.w	r3, #0
 80089aa:	018b      	lsls	r3, r1, #6
 80089ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80089b0:	0182      	lsls	r2, r0, #6
 80089b2:	1a12      	subs	r2, r2, r0
 80089b4:	eb63 0301 	sbc.w	r3, r3, r1
 80089b8:	f04f 0000 	mov.w	r0, #0
 80089bc:	f04f 0100 	mov.w	r1, #0
 80089c0:	00d9      	lsls	r1, r3, #3
 80089c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089c6:	00d0      	lsls	r0, r2, #3
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	eb12 0208 	adds.w	r2, r2, r8
 80089d0:	eb43 0309 	adc.w	r3, r3, r9
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	f04f 0100 	mov.w	r1, #0
 80089dc:	0259      	lsls	r1, r3, #9
 80089de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80089e2:	0250      	lsls	r0, r2, #9
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4610      	mov	r0, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	f7f7 fc7c 	bl	80002f0 <__aeabi_uldivmod>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4613      	mov	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e04a      	b.n	8008a98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a02:	4b31      	ldr	r3, [pc, #196]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	099b      	lsrs	r3, r3, #6
 8008a08:	461a      	mov	r2, r3
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008a12:	f04f 0100 	mov.w	r1, #0
 8008a16:	ea02 0400 	and.w	r4, r2, r0
 8008a1a:	ea03 0501 	and.w	r5, r3, r1
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	014b      	lsls	r3, r1, #5
 8008a2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008a30:	0142      	lsls	r2, r0, #5
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	1b00      	subs	r0, r0, r4
 8008a38:	eb61 0105 	sbc.w	r1, r1, r5
 8008a3c:	f04f 0200 	mov.w	r2, #0
 8008a40:	f04f 0300 	mov.w	r3, #0
 8008a44:	018b      	lsls	r3, r1, #6
 8008a46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008a4a:	0182      	lsls	r2, r0, #6
 8008a4c:	1a12      	subs	r2, r2, r0
 8008a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	f04f 0100 	mov.w	r1, #0
 8008a5a:	00d9      	lsls	r1, r3, #3
 8008a5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a60:	00d0      	lsls	r0, r2, #3
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	1912      	adds	r2, r2, r4
 8008a68:	eb45 0303 	adc.w	r3, r5, r3
 8008a6c:	f04f 0000 	mov.w	r0, #0
 8008a70:	f04f 0100 	mov.w	r1, #0
 8008a74:	0299      	lsls	r1, r3, #10
 8008a76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008a7a:	0290      	lsls	r0, r2, #10
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4610      	mov	r0, r2
 8008a82:	4619      	mov	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	f7f7 fc30 	bl	80002f0 <__aeabi_uldivmod>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4613      	mov	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008a98:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	0c1b      	lsrs	r3, r3, #16
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab0:	60bb      	str	r3, [r7, #8]
      break;
 8008ab2:	e002      	b.n	8008aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008ab6:	60bb      	str	r3, [r7, #8]
      break;
 8008ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008aba:	68bb      	ldr	r3, [r7, #8]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40023800 	.word	0x40023800
 8008acc:	00f42400 	.word	0x00f42400
 8008ad0:	007a1200 	.word	0x007a1200

08008ad4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ad8:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ada:	681b      	ldr	r3, [r3, #0]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	200000cc 	.word	0x200000cc

08008aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008af0:	f7ff fff0 	bl	8008ad4 <HAL_RCC_GetHCLKFreq>
 8008af4:	4602      	mov	r2, r0
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	0a9b      	lsrs	r3, r3, #10
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	4903      	ldr	r1, [pc, #12]	; (8008b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b02:	5ccb      	ldrb	r3, [r1, r3]
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40023800 	.word	0x40023800
 8008b10:	0800e868 	.word	0x0800e868

08008b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b18:	f7ff ffdc 	bl	8008ad4 <HAL_RCC_GetHCLKFreq>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	0b5b      	lsrs	r3, r3, #13
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	4903      	ldr	r1, [pc, #12]	; (8008b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b2a:	5ccb      	ldrb	r3, [r1, r3]
 8008b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40023800 	.word	0x40023800
 8008b38:	0800e868 	.word	0x0800e868

08008b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d012      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b64:	4b69      	ldr	r3, [pc, #420]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	4a68      	ldr	r2, [pc, #416]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b6e:	6093      	str	r3, [r2, #8]
 8008b70:	4b66      	ldr	r3, [pc, #408]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b78:	4964      	ldr	r1, [pc, #400]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008b86:	2301      	movs	r3, #1
 8008b88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d017      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b96:	4b5d      	ldr	r3, [pc, #372]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba4:	4959      	ldr	r1, [pc, #356]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb4:	d101      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d017      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008bd2:	4b4e      	ldr	r3, [pc, #312]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	494a      	ldr	r1, [pc, #296]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bf0:	d101      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 808b 	beq.w	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c20:	4b3a      	ldr	r3, [pc, #232]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	4a39      	ldr	r2, [pc, #228]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8008c2c:	4b37      	ldr	r3, [pc, #220]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c34:	60bb      	str	r3, [r7, #8]
 8008c36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c38:	4b35      	ldr	r3, [pc, #212]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a34      	ldr	r2, [pc, #208]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c44:	f7fd fb7c 	bl	8006340 <HAL_GetTick>
 8008c48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c4c:	f7fd fb78 	bl	8006340 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b64      	cmp	r3, #100	; 0x64
 8008c58:	d901      	bls.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e38f      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c5e:	4b2c      	ldr	r3, [pc, #176]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0f0      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c6a:	4b28      	ldr	r3, [pc, #160]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d035      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d02e      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c88:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c92:	4b1e      	ldr	r3, [pc, #120]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	4a1d      	ldr	r2, [pc, #116]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c9e:	4b1b      	ldr	r3, [pc, #108]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	4a1a      	ldr	r2, [pc, #104]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ca8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008caa:	4a18      	ldr	r2, [pc, #96]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008cb0:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d114      	bne.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cbc:	f7fd fb40 	bl	8006340 <HAL_GetTick>
 8008cc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cc2:	e00a      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc4:	f7fd fb3c 	bl	8006340 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e351      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0ee      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cf2:	d111      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008d02:	400b      	ands	r3, r1
 8008d04:	4901      	ldr	r1, [pc, #4]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	608b      	str	r3, [r1, #8]
 8008d0a:	e00b      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	40007000 	.word	0x40007000
 8008d14:	0ffffcff 	.word	0x0ffffcff
 8008d18:	4bb3      	ldr	r3, [pc, #716]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	4ab2      	ldr	r2, [pc, #712]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008d22:	6093      	str	r3, [r2, #8]
 8008d24:	4bb0      	ldr	r3, [pc, #704]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d30:	49ad      	ldr	r1, [pc, #692]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0310 	and.w	r3, r3, #16
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d010      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d42:	4ba9      	ldr	r3, [pc, #676]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d48:	4aa7      	ldr	r2, [pc, #668]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008d52:	4ba5      	ldr	r3, [pc, #660]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	49a2      	ldr	r1, [pc, #648]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00a      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d70:	4b9d      	ldr	r3, [pc, #628]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d7e:	499a      	ldr	r1, [pc, #616]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d92:	4b95      	ldr	r3, [pc, #596]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008da0:	4991      	ldr	r1, [pc, #580]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008db4:	4b8c      	ldr	r3, [pc, #560]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc2:	4989      	ldr	r1, [pc, #548]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dd6:	4b84      	ldr	r3, [pc, #528]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de4:	4980      	ldr	r1, [pc, #512]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008df8:	4b7b      	ldr	r3, [pc, #492]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfe:	f023 0203 	bic.w	r2, r3, #3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e06:	4978      	ldr	r1, [pc, #480]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e1a:	4b73      	ldr	r3, [pc, #460]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e20:	f023 020c 	bic.w	r2, r3, #12
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e28:	496f      	ldr	r1, [pc, #444]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e3c:	4b6a      	ldr	r3, [pc, #424]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4a:	4967      	ldr	r1, [pc, #412]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e5e:	4b62      	ldr	r3, [pc, #392]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6c:	495e      	ldr	r1, [pc, #376]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e80:	4b59      	ldr	r3, [pc, #356]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8e:	4956      	ldr	r1, [pc, #344]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008ea2:	4b51      	ldr	r3, [pc, #324]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb0:	494d      	ldr	r1, [pc, #308]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008ec4:	4b48      	ldr	r3, [pc, #288]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed2:	4945      	ldr	r1, [pc, #276]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008ee6:	4b40      	ldr	r3, [pc, #256]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef4:	493c      	ldr	r1, [pc, #240]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f08:	4b37      	ldr	r3, [pc, #220]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f16:	4934      	ldr	r1, [pc, #208]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d011      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f2a:	4b2f      	ldr	r3, [pc, #188]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f38:	492b      	ldr	r1, [pc, #172]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f48:	d101      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f78:	491b      	ldr	r1, [pc, #108]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f8c:	4b16      	ldr	r3, [pc, #88]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9c:	4912      	ldr	r1, [pc, #72]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008fb0:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc0:	4909      	ldr	r1, [pc, #36]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00f      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fd4:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe4:	e002      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008fe6:	bf00      	nop
 8008fe8:	40023800 	.word	0x40023800
 8008fec:	4986      	ldr	r1, [pc, #536]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009000:	4b81      	ldr	r3, [pc, #516]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009006:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009010:	497d      	ldr	r1, [pc, #500]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009012:	4313      	orrs	r3, r2
 8009014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d006      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 80d6 	beq.w	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800902c:	4b76      	ldr	r3, [pc, #472]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a75      	ldr	r2, [pc, #468]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009032:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009038:	f7fd f982 	bl	8006340 <HAL_GetTick>
 800903c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800903e:	e008      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009040:	f7fd f97e 	bl	8006340 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b64      	cmp	r3, #100	; 0x64
 800904c:	d901      	bls.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e195      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009052:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f0      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d021      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906e:	2b00      	cmp	r3, #0
 8009070:	d11d      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009072:	4b65      	ldr	r3, [pc, #404]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009080:	4b61      	ldr	r3, [pc, #388]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009086:	0e1b      	lsrs	r3, r3, #24
 8009088:	f003 030f 	and.w	r3, r3, #15
 800908c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	019a      	lsls	r2, r3, #6
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	041b      	lsls	r3, r3, #16
 8009098:	431a      	orrs	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	061b      	lsls	r3, r3, #24
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	071b      	lsls	r3, r3, #28
 80090a6:	4958      	ldr	r1, [pc, #352]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090c2:	d00a      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d02e      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090d8:	d129      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80090da:	4b4b      	ldr	r3, [pc, #300]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e0:	0c1b      	lsrs	r3, r3, #16
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090e8:	4b47      	ldr	r3, [pc, #284]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ee:	0f1b      	lsrs	r3, r3, #28
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	019a      	lsls	r2, r3, #6
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	061b      	lsls	r3, r3, #24
 8009108:	431a      	orrs	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	071b      	lsls	r3, r3, #28
 800910e:	493e      	ldr	r1, [pc, #248]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009110:	4313      	orrs	r3, r2
 8009112:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009116:	4b3c      	ldr	r3, [pc, #240]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800911c:	f023 021f 	bic.w	r2, r3, #31
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	3b01      	subs	r3, #1
 8009126:	4938      	ldr	r1, [pc, #224]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009128:	4313      	orrs	r3, r2
 800912a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01d      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800913a:	4b33      	ldr	r3, [pc, #204]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800913c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009140:	0e1b      	lsrs	r3, r3, #24
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009148:	4b2f      	ldr	r3, [pc, #188]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800914a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800914e:	0f1b      	lsrs	r3, r3, #28
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	019a      	lsls	r2, r3, #6
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	041b      	lsls	r3, r3, #16
 8009162:	431a      	orrs	r2, r3
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	061b      	lsls	r3, r3, #24
 8009168:	431a      	orrs	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	071b      	lsls	r3, r3, #28
 800916e:	4926      	ldr	r1, [pc, #152]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009170:	4313      	orrs	r3, r2
 8009172:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d011      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	019a      	lsls	r2, r3, #6
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	041b      	lsls	r3, r3, #16
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	061b      	lsls	r3, r3, #24
 8009196:	431a      	orrs	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	071b      	lsls	r3, r3, #28
 800919e:	491a      	ldr	r1, [pc, #104]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091a6:	4b18      	ldr	r3, [pc, #96]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a17      	ldr	r2, [pc, #92]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091b2:	f7fd f8c5 	bl	8006340 <HAL_GetTick>
 80091b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091b8:	e008      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091ba:	f7fd f8c1 	bl	8006340 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	2b64      	cmp	r3, #100	; 0x64
 80091c6:	d901      	bls.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e0d8      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0f0      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	f040 80ce 	bne.w	800937c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80091e0:	4b09      	ldr	r3, [pc, #36]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a08      	ldr	r2, [pc, #32]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ec:	f7fd f8a8 	bl	8006340 <HAL_GetTick>
 80091f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091f2:	e00b      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80091f4:	f7fd f8a4 	bl	8006340 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b64      	cmp	r3, #100	; 0x64
 8009200:	d904      	bls.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e0bb      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009206:	bf00      	nop
 8009208:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800920c:	4b5e      	ldr	r3, [pc, #376]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009218:	d0ec      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009236:	2b00      	cmp	r3, #0
 8009238:	d02e      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	d12a      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009242:	4b51      	ldr	r3, [pc, #324]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009248:	0c1b      	lsrs	r3, r3, #16
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009250:	4b4d      	ldr	r3, [pc, #308]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009256:	0f1b      	lsrs	r3, r3, #28
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	019a      	lsls	r2, r3, #6
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	061b      	lsls	r3, r3, #24
 8009270:	431a      	orrs	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	071b      	lsls	r3, r3, #28
 8009276:	4944      	ldr	r1, [pc, #272]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009278:	4313      	orrs	r3, r2
 800927a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800927e:	4b42      	ldr	r3, [pc, #264]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009284:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	3b01      	subs	r3, #1
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	493d      	ldr	r1, [pc, #244]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009292:	4313      	orrs	r3, r2
 8009294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d022      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ac:	d11d      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092ae:	4b36      	ldr	r3, [pc, #216]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b4:	0e1b      	lsrs	r3, r3, #24
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092bc:	4b32      	ldr	r3, [pc, #200]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c2:	0f1b      	lsrs	r3, r3, #28
 80092c4:	f003 0307 	and.w	r3, r3, #7
 80092c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	019a      	lsls	r2, r3, #6
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	041b      	lsls	r3, r3, #16
 80092d6:	431a      	orrs	r2, r3
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	061b      	lsls	r3, r3, #24
 80092dc:	431a      	orrs	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	071b      	lsls	r3, r3, #28
 80092e2:	4929      	ldr	r1, [pc, #164]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0308 	and.w	r3, r3, #8
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d028      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092f6:	4b24      	ldr	r3, [pc, #144]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fc:	0e1b      	lsrs	r3, r3, #24
 80092fe:	f003 030f 	and.w	r3, r3, #15
 8009302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009304:	4b20      	ldr	r3, [pc, #128]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	019a      	lsls	r2, r3, #6
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	041b      	lsls	r3, r3, #16
 800931c:	431a      	orrs	r2, r3
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	061b      	lsls	r3, r3, #24
 8009322:	431a      	orrs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	071b      	lsls	r3, r3, #28
 800932a:	4917      	ldr	r1, [pc, #92]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800932c:	4313      	orrs	r3, r2
 800932e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	4911      	ldr	r1, [pc, #68]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009342:	4313      	orrs	r3, r2
 8009344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009348:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a0e      	ldr	r2, [pc, #56]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800934e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009354:	f7fc fff4 	bl	8006340 <HAL_GetTick>
 8009358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800935a:	e008      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800935c:	f7fc fff0 	bl	8006340 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b64      	cmp	r3, #100	; 0x64
 8009368:	d901      	bls.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e007      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800936e:	4b06      	ldr	r3, [pc, #24]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800937a:	d1ef      	bne.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	40023800 	.word	0x40023800

0800938c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e01c      	b.n	80093d8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	795b      	ldrb	r3, [r3, #5]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d105      	bne.n	80093b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7fb fb6c 	bl	8004a8c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0204 	orr.w	r2, r2, #4
 80093c8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e09d      	b.n	800952e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d108      	bne.n	800940c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009402:	d009      	beq.n	8009418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	61da      	str	r2, [r3, #28]
 800940a:	e005      	b.n	8009418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d106      	bne.n	8009438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7fb fb88 	bl	8004b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800944e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009458:	d902      	bls.n	8009460 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e002      	b.n	8009466 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009464:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800946e:	d007      	beq.n	8009480 <HAL_SPI_Init+0xa0>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009478:	d002      	beq.n	8009480 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009490:	431a      	orrs	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c2:	ea42 0103 	orr.w	r1, r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	0c1b      	lsrs	r3, r3, #16
 80094dc:	f003 0204 	and.w	r2, r3, #4
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	431a      	orrs	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	f003 0308 	and.w	r3, r3, #8
 80094f2:	431a      	orrs	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80094fc:	ea42 0103 	orr.w	r1, r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69da      	ldr	r2, [r3, #28]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800951c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b088      	sub	sp, #32
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	603b      	str	r3, [r7, #0]
 8009542:	4613      	mov	r3, r2
 8009544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_SPI_Transmit+0x22>
 8009554:	2302      	movs	r3, #2
 8009556:	e158      	b.n	800980a <HAL_SPI_Transmit+0x2d4>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009560:	f7fc feee 	bl	8006340 <HAL_GetTick>
 8009564:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009566:	88fb      	ldrh	r3, [r7, #6]
 8009568:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b01      	cmp	r3, #1
 8009574:	d002      	beq.n	800957c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009576:	2302      	movs	r3, #2
 8009578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800957a:	e13d      	b.n	80097f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <HAL_SPI_Transmit+0x52>
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d102      	bne.n	800958e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800958c:	e134      	b.n	80097f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2203      	movs	r2, #3
 8009592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	88fa      	ldrh	r2, [r7, #6]
 80095a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	88fa      	ldrh	r2, [r7, #6]
 80095ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095d8:	d10f      	bne.n	80095fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b40      	cmp	r3, #64	; 0x40
 8009606:	d007      	beq.n	8009618 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009620:	d94b      	bls.n	80096ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <HAL_SPI_Transmit+0xfa>
 800962a:	8afb      	ldrh	r3, [r7, #22]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d13e      	bne.n	80096ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	881a      	ldrh	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	1c9a      	adds	r2, r3, #2
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009654:	e02b      	b.n	80096ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b02      	cmp	r3, #2
 8009662:	d112      	bne.n	800968a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	881a      	ldrh	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009674:	1c9a      	adds	r2, r3, #2
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800967e:	b29b      	uxth	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	b29a      	uxth	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009688:	e011      	b.n	80096ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800968a:	f7fc fe59 	bl	8006340 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d803      	bhi.n	80096a2 <HAL_SPI_Transmit+0x16c>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a0:	d102      	bne.n	80096a8 <HAL_SPI_Transmit+0x172>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096ac:	e0a4      	b.n	80097f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1ce      	bne.n	8009656 <HAL_SPI_Transmit+0x120>
 80096b8:	e07c      	b.n	80097b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d002      	beq.n	80096c8 <HAL_SPI_Transmit+0x192>
 80096c2:	8afb      	ldrh	r3, [r7, #22]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d170      	bne.n	80097aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d912      	bls.n	80096f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	881a      	ldrh	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	1c9a      	adds	r2, r3, #2
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b02      	subs	r3, #2
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096f6:	e058      	b.n	80097aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	330c      	adds	r3, #12
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800971e:	e044      	b.n	80097aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d12b      	bne.n	8009786 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009732:	b29b      	uxth	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	d912      	bls.n	800975e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	881a      	ldrh	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	1c9a      	adds	r2, r3, #2
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009752:	b29b      	uxth	r3, r3
 8009754:	3b02      	subs	r3, #2
 8009756:	b29a      	uxth	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800975c:	e025      	b.n	80097aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	330c      	adds	r3, #12
 8009768:	7812      	ldrb	r2, [r2, #0]
 800976a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800977a:	b29b      	uxth	r3, r3
 800977c:	3b01      	subs	r3, #1
 800977e:	b29a      	uxth	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009784:	e011      	b.n	80097aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009786:	f7fc fddb 	bl	8006340 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	429a      	cmp	r2, r3
 8009794:	d803      	bhi.n	800979e <HAL_SPI_Transmit+0x268>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979c:	d102      	bne.n	80097a4 <HAL_SPI_Transmit+0x26e>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d102      	bne.n	80097aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097a8:	e026      	b.n	80097f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1b5      	bne.n	8009720 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f945 	bl	8009a48 <SPI_EndRxTxTransaction>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2220      	movs	r2, #32
 80097c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e000      	b.n	80097f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80097f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009808:	7ffb      	ldrb	r3, [r7, #31]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	603b      	str	r3, [r7, #0]
 8009820:	4613      	mov	r3, r2
 8009822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009824:	f7fc fd8c 	bl	8006340 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	1a9b      	subs	r3, r3, r2
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	4413      	add	r3, r2
 8009832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009834:	f7fc fd84 	bl	8006340 <HAL_GetTick>
 8009838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800983a:	4b39      	ldr	r3, [pc, #228]	; (8009920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	015b      	lsls	r3, r3, #5
 8009840:	0d1b      	lsrs	r3, r3, #20
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	fb02 f303 	mul.w	r3, r2, r3
 8009848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800984a:	e054      	b.n	80098f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009852:	d050      	beq.n	80098f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009854:	f7fc fd74 	bl	8006340 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	429a      	cmp	r2, r3
 8009862:	d902      	bls.n	800986a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d13d      	bne.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009882:	d111      	bne.n	80098a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800988c:	d004      	beq.n	8009898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009896:	d107      	bne.n	80098a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098b0:	d10f      	bne.n	80098d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e017      	b.n	8009916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4013      	ands	r3, r2
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	429a      	cmp	r2, r3
 8009904:	bf0c      	ite	eq
 8009906:	2301      	moveq	r3, #1
 8009908:	2300      	movne	r3, #0
 800990a:	b2db      	uxtb	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	429a      	cmp	r2, r3
 8009912:	d19b      	bne.n	800984c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3720      	adds	r7, #32
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200000cc 	.word	0x200000cc

08009924 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009932:	f7fc fd05 	bl	8006340 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	1a9b      	subs	r3, r3, r2
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	4413      	add	r3, r2
 8009940:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009942:	f7fc fcfd 	bl	8006340 <HAL_GetTick>
 8009946:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009948:	4b3e      	ldr	r3, [pc, #248]	; (8009a44 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	00da      	lsls	r2, r3, #3
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	0d1b      	lsrs	r3, r3, #20
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	fb02 f303 	mul.w	r3, r2, r3
 800995e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8009960:	e062      	b.n	8009a28 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009968:	d109      	bne.n	800997e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d106      	bne.n	800997e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	b2db      	uxtb	r3, r3
 800997a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800997c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009984:	d050      	beq.n	8009a28 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009986:	f7fc fcdb 	bl	8006340 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	429a      	cmp	r2, r3
 8009994:	d902      	bls.n	800999c <SPI_WaitFifoStateUntilTimeout+0x78>
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d13d      	bne.n	8009a18 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099b4:	d111      	bne.n	80099da <SPI_WaitFifoStateUntilTimeout+0xb6>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099be:	d004      	beq.n	80099ca <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c8:	d107      	bne.n	80099da <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099e2:	d10f      	bne.n	8009a04 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e010      	b.n	8009a3a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689a      	ldr	r2, [r3, #8]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	4013      	ands	r3, r2
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d194      	bne.n	8009962 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	200000cc 	.word	0x200000cc

08009a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f7ff ff5f 	bl	8009924 <SPI_WaitFifoStateUntilTimeout>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a70:	f043 0220 	orr.w	r2, r3, #32
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e027      	b.n	8009acc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	2180      	movs	r1, #128	; 0x80
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7ff fec4 	bl	8009814 <SPI_WaitFlagStateUntilTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d007      	beq.n	8009aa2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a96:	f043 0220 	orr.w	r2, r3, #32
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e014      	b.n	8009acc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff ff38 	bl	8009924 <SPI_WaitFifoStateUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d007      	beq.n	8009aca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abe:	f043 0220 	orr.w	r2, r3, #32
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e000      	b.n	8009acc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e049      	b.n	8009b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fb fad6 	bl	80050ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f000 fdb2 	bl	800a67c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d001      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e054      	b.n	8009c46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a26      	ldr	r2, [pc, #152]	; (8009c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d022      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x80>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc6:	d01d      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x80>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a22      	ldr	r2, [pc, #136]	; (8009c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d018      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x80>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a21      	ldr	r2, [pc, #132]	; (8009c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d013      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x80>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a1f      	ldr	r2, [pc, #124]	; (8009c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d00e      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x80>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a1e      	ldr	r2, [pc, #120]	; (8009c64 <HAL_TIM_Base_Start_IT+0xe0>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d009      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x80>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a1c      	ldr	r2, [pc, #112]	; (8009c68 <HAL_TIM_Base_Start_IT+0xe4>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d004      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x80>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a1b      	ldr	r2, [pc, #108]	; (8009c6c <HAL_TIM_Base_Start_IT+0xe8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d115      	bne.n	8009c30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689a      	ldr	r2, [r3, #8]
 8009c0a:	4b19      	ldr	r3, [pc, #100]	; (8009c70 <HAL_TIM_Base_Start_IT+0xec>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b06      	cmp	r3, #6
 8009c14:	d015      	beq.n	8009c42 <HAL_TIM_Base_Start_IT+0xbe>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1c:	d011      	beq.n	8009c42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f042 0201 	orr.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c2e:	e008      	b.n	8009c42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0201 	orr.w	r2, r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	e000      	b.n	8009c44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40000400 	.word	0x40000400
 8009c5c:	40000800 	.word	0x40000800
 8009c60:	40000c00 	.word	0x40000c00
 8009c64:	40010400 	.word	0x40010400
 8009c68:	40014000 	.word	0x40014000
 8009c6c:	40001800 	.word	0x40001800
 8009c70:	00010007 	.word	0x00010007

08009c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e049      	b.n	8009d1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d106      	bne.n	8009ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f841 	bl	8009d22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f000 fce2 	bl	800a67c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b083      	sub	sp, #12
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d2a:	bf00      	nop
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
	...

08009d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <HAL_TIM_PWM_Start+0x24>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	bf14      	ite	ne
 8009d54:	2301      	movne	r3, #1
 8009d56:	2300      	moveq	r3, #0
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	e03c      	b.n	8009dd6 <HAL_TIM_PWM_Start+0x9e>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d109      	bne.n	8009d76 <HAL_TIM_PWM_Start+0x3e>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	bf14      	ite	ne
 8009d6e:	2301      	movne	r3, #1
 8009d70:	2300      	moveq	r3, #0
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	e02f      	b.n	8009dd6 <HAL_TIM_PWM_Start+0x9e>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d109      	bne.n	8009d90 <HAL_TIM_PWM_Start+0x58>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	bf14      	ite	ne
 8009d88:	2301      	movne	r3, #1
 8009d8a:	2300      	moveq	r3, #0
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	e022      	b.n	8009dd6 <HAL_TIM_PWM_Start+0x9e>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b0c      	cmp	r3, #12
 8009d94:	d109      	bne.n	8009daa <HAL_TIM_PWM_Start+0x72>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	bf14      	ite	ne
 8009da2:	2301      	movne	r3, #1
 8009da4:	2300      	moveq	r3, #0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	e015      	b.n	8009dd6 <HAL_TIM_PWM_Start+0x9e>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d109      	bne.n	8009dc4 <HAL_TIM_PWM_Start+0x8c>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	bf14      	ite	ne
 8009dbc:	2301      	movne	r3, #1
 8009dbe:	2300      	moveq	r3, #0
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	e008      	b.n	8009dd6 <HAL_TIM_PWM_Start+0x9e>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	bf14      	ite	ne
 8009dd0:	2301      	movne	r3, #1
 8009dd2:	2300      	moveq	r3, #0
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e092      	b.n	8009f04 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <HAL_TIM_PWM_Start+0xb6>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dec:	e023      	b.n	8009e36 <HAL_TIM_PWM_Start+0xfe>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d104      	bne.n	8009dfe <HAL_TIM_PWM_Start+0xc6>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dfc:	e01b      	b.n	8009e36 <HAL_TIM_PWM_Start+0xfe>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	d104      	bne.n	8009e0e <HAL_TIM_PWM_Start+0xd6>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e0c:	e013      	b.n	8009e36 <HAL_TIM_PWM_Start+0xfe>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b0c      	cmp	r3, #12
 8009e12:	d104      	bne.n	8009e1e <HAL_TIM_PWM_Start+0xe6>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e1c:	e00b      	b.n	8009e36 <HAL_TIM_PWM_Start+0xfe>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b10      	cmp	r3, #16
 8009e22:	d104      	bne.n	8009e2e <HAL_TIM_PWM_Start+0xf6>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e2c:	e003      	b.n	8009e36 <HAL_TIM_PWM_Start+0xfe>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2202      	movs	r2, #2
 8009e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 ffb4 	bl	800adac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a30      	ldr	r2, [pc, #192]	; (8009f0c <HAL_TIM_PWM_Start+0x1d4>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d004      	beq.n	8009e58 <HAL_TIM_PWM_Start+0x120>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a2f      	ldr	r2, [pc, #188]	; (8009f10 <HAL_TIM_PWM_Start+0x1d8>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d101      	bne.n	8009e5c <HAL_TIM_PWM_Start+0x124>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e000      	b.n	8009e5e <HAL_TIM_PWM_Start+0x126>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a25      	ldr	r2, [pc, #148]	; (8009f0c <HAL_TIM_PWM_Start+0x1d4>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d022      	beq.n	8009ec2 <HAL_TIM_PWM_Start+0x18a>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e84:	d01d      	beq.n	8009ec2 <HAL_TIM_PWM_Start+0x18a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a22      	ldr	r2, [pc, #136]	; (8009f14 <HAL_TIM_PWM_Start+0x1dc>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d018      	beq.n	8009ec2 <HAL_TIM_PWM_Start+0x18a>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a20      	ldr	r2, [pc, #128]	; (8009f18 <HAL_TIM_PWM_Start+0x1e0>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d013      	beq.n	8009ec2 <HAL_TIM_PWM_Start+0x18a>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a1f      	ldr	r2, [pc, #124]	; (8009f1c <HAL_TIM_PWM_Start+0x1e4>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00e      	beq.n	8009ec2 <HAL_TIM_PWM_Start+0x18a>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a19      	ldr	r2, [pc, #100]	; (8009f10 <HAL_TIM_PWM_Start+0x1d8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d009      	beq.n	8009ec2 <HAL_TIM_PWM_Start+0x18a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a1b      	ldr	r2, [pc, #108]	; (8009f20 <HAL_TIM_PWM_Start+0x1e8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d004      	beq.n	8009ec2 <HAL_TIM_PWM_Start+0x18a>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a19      	ldr	r2, [pc, #100]	; (8009f24 <HAL_TIM_PWM_Start+0x1ec>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d115      	bne.n	8009eee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <HAL_TIM_PWM_Start+0x1f0>)
 8009eca:	4013      	ands	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b06      	cmp	r3, #6
 8009ed2:	d015      	beq.n	8009f00 <HAL_TIM_PWM_Start+0x1c8>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eda:	d011      	beq.n	8009f00 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f042 0201 	orr.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eec:	e008      	b.n	8009f00 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f042 0201 	orr.w	r2, r2, #1
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	e000      	b.n	8009f02 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	40010000 	.word	0x40010000
 8009f10:	40010400 	.word	0x40010400
 8009f14:	40000400 	.word	0x40000400
 8009f18:	40000800 	.word	0x40000800
 8009f1c:	40000c00 	.word	0x40000c00
 8009f20:	40014000 	.word	0x40014000
 8009f24:	40001800 	.word	0x40001800
 8009f28:	00010007 	.word	0x00010007

08009f2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 ff34 	bl	800adac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a36      	ldr	r2, [pc, #216]	; (800a024 <HAL_TIM_PWM_Stop+0xf8>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d004      	beq.n	8009f58 <HAL_TIM_PWM_Stop+0x2c>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a35      	ldr	r2, [pc, #212]	; (800a028 <HAL_TIM_PWM_Stop+0xfc>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d101      	bne.n	8009f5c <HAL_TIM_PWM_Stop+0x30>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <HAL_TIM_PWM_Stop+0x32>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d017      	beq.n	8009f92 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6a1a      	ldr	r2, [r3, #32]
 8009f68:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10f      	bne.n	8009f92 <HAL_TIM_PWM_Stop+0x66>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6a1a      	ldr	r2, [r3, #32]
 8009f78:	f240 4344 	movw	r3, #1092	; 0x444
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d107      	bne.n	8009f92 <HAL_TIM_PWM_Stop+0x66>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6a1a      	ldr	r2, [r3, #32]
 8009f98:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <HAL_TIM_PWM_Stop+0x96>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6a1a      	ldr	r2, [r3, #32]
 8009fa8:	f240 4344 	movw	r3, #1092	; 0x444
 8009fac:	4013      	ands	r3, r2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d107      	bne.n	8009fc2 <HAL_TIM_PWM_Stop+0x96>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0201 	bic.w	r2, r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d104      	bne.n	8009fd2 <HAL_TIM_PWM_Stop+0xa6>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fd0:	e023      	b.n	800a01a <HAL_TIM_PWM_Stop+0xee>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2b04      	cmp	r3, #4
 8009fd6:	d104      	bne.n	8009fe2 <HAL_TIM_PWM_Stop+0xb6>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fe0:	e01b      	b.n	800a01a <HAL_TIM_PWM_Stop+0xee>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d104      	bne.n	8009ff2 <HAL_TIM_PWM_Stop+0xc6>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ff0:	e013      	b.n	800a01a <HAL_TIM_PWM_Stop+0xee>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b0c      	cmp	r3, #12
 8009ff6:	d104      	bne.n	800a002 <HAL_TIM_PWM_Stop+0xd6>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a000:	e00b      	b.n	800a01a <HAL_TIM_PWM_Stop+0xee>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b10      	cmp	r3, #16
 800a006:	d104      	bne.n	800a012 <HAL_TIM_PWM_Stop+0xe6>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a010:	e003      	b.n	800a01a <HAL_TIM_PWM_Stop+0xee>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	40010000 	.word	0x40010000
 800a028:	40010400 	.word	0x40010400

0800a02c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d122      	bne.n	800a088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d11b      	bne.n	800a088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0202 	mvn.w	r2, #2
 800a058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fae6 	bl	800a640 <HAL_TIM_IC_CaptureCallback>
 800a074:	e005      	b.n	800a082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fad8 	bl	800a62c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fae9 	bl	800a654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b04      	cmp	r3, #4
 800a094:	d122      	bne.n	800a0dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d11b      	bne.n	800a0dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f06f 0204 	mvn.w	r2, #4
 800a0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fabc 	bl	800a640 <HAL_TIM_IC_CaptureCallback>
 800a0c8:	e005      	b.n	800a0d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 faae 	bl	800a62c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fabf 	bl	800a654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d122      	bne.n	800a130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f003 0308 	and.w	r3, r3, #8
 800a0f4:	2b08      	cmp	r3, #8
 800a0f6:	d11b      	bne.n	800a130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f06f 0208 	mvn.w	r2, #8
 800a100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2204      	movs	r2, #4
 800a106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa92 	bl	800a640 <HAL_TIM_IC_CaptureCallback>
 800a11c:	e005      	b.n	800a12a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa84 	bl	800a62c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fa95 	bl	800a654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	f003 0310 	and.w	r3, r3, #16
 800a13a:	2b10      	cmp	r3, #16
 800a13c:	d122      	bne.n	800a184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b10      	cmp	r3, #16
 800a14a:	d11b      	bne.n	800a184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f06f 0210 	mvn.w	r2, #16
 800a154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2208      	movs	r2, #8
 800a15a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa68 	bl	800a640 <HAL_TIM_IC_CaptureCallback>
 800a170:	e005      	b.n	800a17e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa5a 	bl	800a62c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa6b 	bl	800a654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d10e      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d107      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f06f 0201 	mvn.w	r2, #1
 800a1a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa34 	bl	800a618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ba:	2b80      	cmp	r3, #128	; 0x80
 800a1bc:	d10e      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c8:	2b80      	cmp	r3, #128	; 0x80
 800a1ca:	d107      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fea6 	bl	800af28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ea:	d10e      	bne.n	800a20a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f6:	2b80      	cmp	r3, #128	; 0x80
 800a1f8:	d107      	bne.n	800a20a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fe99 	bl	800af3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d10e      	bne.n	800a236 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a222:	2b40      	cmp	r3, #64	; 0x40
 800a224:	d107      	bne.n	800a236 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fa19 	bl	800a668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b20      	cmp	r3, #32
 800a242:	d10e      	bne.n	800a262 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b20      	cmp	r3, #32
 800a250:	d107      	bne.n	800a262 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f06f 0220 	mvn.w	r2, #32
 800a25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fe59 	bl	800af14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a262:	bf00      	nop
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d101      	bne.n	800a286 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a282:	2302      	movs	r3, #2
 800a284:	e0fd      	b.n	800a482 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b14      	cmp	r3, #20
 800a292:	f200 80f0 	bhi.w	800a476 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a296:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a2f1 	.word	0x0800a2f1
 800a2a0:	0800a477 	.word	0x0800a477
 800a2a4:	0800a477 	.word	0x0800a477
 800a2a8:	0800a477 	.word	0x0800a477
 800a2ac:	0800a331 	.word	0x0800a331
 800a2b0:	0800a477 	.word	0x0800a477
 800a2b4:	0800a477 	.word	0x0800a477
 800a2b8:	0800a477 	.word	0x0800a477
 800a2bc:	0800a373 	.word	0x0800a373
 800a2c0:	0800a477 	.word	0x0800a477
 800a2c4:	0800a477 	.word	0x0800a477
 800a2c8:	0800a477 	.word	0x0800a477
 800a2cc:	0800a3b3 	.word	0x0800a3b3
 800a2d0:	0800a477 	.word	0x0800a477
 800a2d4:	0800a477 	.word	0x0800a477
 800a2d8:	0800a477 	.word	0x0800a477
 800a2dc:	0800a3f5 	.word	0x0800a3f5
 800a2e0:	0800a477 	.word	0x0800a477
 800a2e4:	0800a477 	.word	0x0800a477
 800a2e8:	0800a477 	.word	0x0800a477
 800a2ec:	0800a435 	.word	0x0800a435
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fa60 	bl	800a7bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699a      	ldr	r2, [r3, #24]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0208 	orr.w	r2, r2, #8
 800a30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	699a      	ldr	r2, [r3, #24]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f022 0204 	bic.w	r2, r2, #4
 800a31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6999      	ldr	r1, [r3, #24]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	691a      	ldr	r2, [r3, #16]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	619a      	str	r2, [r3, #24]
      break;
 800a32e:	e0a3      	b.n	800a478 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68b9      	ldr	r1, [r7, #8]
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fab2 	bl	800a8a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a34a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	699a      	ldr	r2, [r3, #24]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a35a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6999      	ldr	r1, [r3, #24]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	021a      	lsls	r2, r3, #8
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	619a      	str	r2, [r3, #24]
      break;
 800a370:	e082      	b.n	800a478 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fb09 	bl	800a990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69da      	ldr	r2, [r3, #28]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f042 0208 	orr.w	r2, r2, #8
 800a38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69da      	ldr	r2, [r3, #28]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0204 	bic.w	r2, r2, #4
 800a39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	69d9      	ldr	r1, [r3, #28]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	691a      	ldr	r2, [r3, #16]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	61da      	str	r2, [r3, #28]
      break;
 800a3b0:	e062      	b.n	800a478 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fb5f 	bl	800aa7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69da      	ldr	r2, [r3, #28]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69d9      	ldr	r1, [r3, #28]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	021a      	lsls	r2, r3, #8
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	61da      	str	r2, [r3, #28]
      break;
 800a3f2:	e041      	b.n	800a478 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68b9      	ldr	r1, [r7, #8]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fb96 	bl	800ab2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f042 0208 	orr.w	r2, r2, #8
 800a40e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0204 	bic.w	r2, r2, #4
 800a41e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	691a      	ldr	r2, [r3, #16]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a432:	e021      	b.n	800a478 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68b9      	ldr	r1, [r7, #8]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 fbc8 	bl	800abd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a44e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a45e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	021a      	lsls	r2, r3, #8
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a474:	e000      	b.n	800a478 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a476:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop

0800a48c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_TIM_ConfigClockSource+0x18>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e0b3      	b.n	800a60c <HAL_TIM_ConfigClockSource+0x180>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4b55      	ldr	r3, [pc, #340]	; (800a614 <HAL_TIM_ConfigClockSource+0x188>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4dc:	d03e      	beq.n	800a55c <HAL_TIM_ConfigClockSource+0xd0>
 800a4de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4e2:	f200 8087 	bhi.w	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ea:	f000 8085 	beq.w	800a5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f2:	d87f      	bhi.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a4f4:	2b70      	cmp	r3, #112	; 0x70
 800a4f6:	d01a      	beq.n	800a52e <HAL_TIM_ConfigClockSource+0xa2>
 800a4f8:	2b70      	cmp	r3, #112	; 0x70
 800a4fa:	d87b      	bhi.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a4fc:	2b60      	cmp	r3, #96	; 0x60
 800a4fe:	d050      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0x116>
 800a500:	2b60      	cmp	r3, #96	; 0x60
 800a502:	d877      	bhi.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a504:	2b50      	cmp	r3, #80	; 0x50
 800a506:	d03c      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0xf6>
 800a508:	2b50      	cmp	r3, #80	; 0x50
 800a50a:	d873      	bhi.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a50c:	2b40      	cmp	r3, #64	; 0x40
 800a50e:	d058      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x136>
 800a510:	2b40      	cmp	r3, #64	; 0x40
 800a512:	d86f      	bhi.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a514:	2b30      	cmp	r3, #48	; 0x30
 800a516:	d064      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x156>
 800a518:	2b30      	cmp	r3, #48	; 0x30
 800a51a:	d86b      	bhi.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d060      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x156>
 800a520:	2b20      	cmp	r3, #32
 800a522:	d867      	bhi.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
 800a524:	2b00      	cmp	r3, #0
 800a526:	d05c      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x156>
 800a528:	2b10      	cmp	r3, #16
 800a52a:	d05a      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a52c:	e062      	b.n	800a5f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6818      	ldr	r0, [r3, #0]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6899      	ldr	r1, [r3, #8]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f000 fc15 	bl	800ad6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a550:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	609a      	str	r2, [r3, #8]
      break;
 800a55a:	e04e      	b.n	800a5fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6818      	ldr	r0, [r3, #0]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	6899      	ldr	r1, [r3, #8]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f000 fbfe 	bl	800ad6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a57e:	609a      	str	r2, [r3, #8]
      break;
 800a580:	e03b      	b.n	800a5fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	6859      	ldr	r1, [r3, #4]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	461a      	mov	r2, r3
 800a590:	f000 fb72 	bl	800ac78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2150      	movs	r1, #80	; 0x50
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fbcb 	bl	800ad36 <TIM_ITRx_SetConfig>
      break;
 800a5a0:	e02b      	b.n	800a5fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	6859      	ldr	r1, [r3, #4]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f000 fb91 	bl	800acd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2160      	movs	r1, #96	; 0x60
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fbbb 	bl	800ad36 <TIM_ITRx_SetConfig>
      break;
 800a5c0:	e01b      	b.n	800a5fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6818      	ldr	r0, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	6859      	ldr	r1, [r3, #4]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f000 fb52 	bl	800ac78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2140      	movs	r1, #64	; 0x40
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fbab 	bl	800ad36 <TIM_ITRx_SetConfig>
      break;
 800a5e0:	e00b      	b.n	800a5fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f000 fba2 	bl	800ad36 <TIM_ITRx_SetConfig>
        break;
 800a5f2:	e002      	b.n	800a5fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5f4:	bf00      	nop
 800a5f6:	e000      	b.n	800a5fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	fffeff88 	.word	0xfffeff88

0800a618 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a40      	ldr	r2, [pc, #256]	; (800a790 <TIM_Base_SetConfig+0x114>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d013      	beq.n	800a6bc <TIM_Base_SetConfig+0x40>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69a:	d00f      	beq.n	800a6bc <TIM_Base_SetConfig+0x40>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a3d      	ldr	r2, [pc, #244]	; (800a794 <TIM_Base_SetConfig+0x118>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00b      	beq.n	800a6bc <TIM_Base_SetConfig+0x40>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a3c      	ldr	r2, [pc, #240]	; (800a798 <TIM_Base_SetConfig+0x11c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d007      	beq.n	800a6bc <TIM_Base_SetConfig+0x40>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a3b      	ldr	r2, [pc, #236]	; (800a79c <TIM_Base_SetConfig+0x120>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d003      	beq.n	800a6bc <TIM_Base_SetConfig+0x40>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a3a      	ldr	r2, [pc, #232]	; (800a7a0 <TIM_Base_SetConfig+0x124>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d108      	bne.n	800a6ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a2f      	ldr	r2, [pc, #188]	; (800a790 <TIM_Base_SetConfig+0x114>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d02b      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6dc:	d027      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a2c      	ldr	r2, [pc, #176]	; (800a794 <TIM_Base_SetConfig+0x118>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d023      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a2b      	ldr	r2, [pc, #172]	; (800a798 <TIM_Base_SetConfig+0x11c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d01f      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a2a      	ldr	r2, [pc, #168]	; (800a79c <TIM_Base_SetConfig+0x120>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d01b      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a29      	ldr	r2, [pc, #164]	; (800a7a0 <TIM_Base_SetConfig+0x124>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d017      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a28      	ldr	r2, [pc, #160]	; (800a7a4 <TIM_Base_SetConfig+0x128>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d013      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a27      	ldr	r2, [pc, #156]	; (800a7a8 <TIM_Base_SetConfig+0x12c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d00f      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a26      	ldr	r2, [pc, #152]	; (800a7ac <TIM_Base_SetConfig+0x130>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d00b      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a25      	ldr	r2, [pc, #148]	; (800a7b0 <TIM_Base_SetConfig+0x134>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d007      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a24      	ldr	r2, [pc, #144]	; (800a7b4 <TIM_Base_SetConfig+0x138>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d003      	beq.n	800a72e <TIM_Base_SetConfig+0xb2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a23      	ldr	r2, [pc, #140]	; (800a7b8 <TIM_Base_SetConfig+0x13c>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d108      	bne.n	800a740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	689a      	ldr	r2, [r3, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a0a      	ldr	r2, [pc, #40]	; (800a790 <TIM_Base_SetConfig+0x114>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d003      	beq.n	800a774 <TIM_Base_SetConfig+0xf8>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a0c      	ldr	r2, [pc, #48]	; (800a7a0 <TIM_Base_SetConfig+0x124>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d103      	bne.n	800a77c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	691a      	ldr	r2, [r3, #16]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	615a      	str	r2, [r3, #20]
}
 800a782:	bf00      	nop
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	40010000 	.word	0x40010000
 800a794:	40000400 	.word	0x40000400
 800a798:	40000800 	.word	0x40000800
 800a79c:	40000c00 	.word	0x40000c00
 800a7a0:	40010400 	.word	0x40010400
 800a7a4:	40014000 	.word	0x40014000
 800a7a8:	40014400 	.word	0x40014400
 800a7ac:	40014800 	.word	0x40014800
 800a7b0:	40001800 	.word	0x40001800
 800a7b4:	40001c00 	.word	0x40001c00
 800a7b8:	40002000 	.word	0x40002000

0800a7bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	f023 0201 	bic.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	4b2b      	ldr	r3, [pc, #172]	; (800a894 <TIM_OC1_SetConfig+0xd8>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 0303 	bic.w	r3, r3, #3
 800a7f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f023 0302 	bic.w	r3, r3, #2
 800a804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a21      	ldr	r2, [pc, #132]	; (800a898 <TIM_OC1_SetConfig+0xdc>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d003      	beq.n	800a820 <TIM_OC1_SetConfig+0x64>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a20      	ldr	r2, [pc, #128]	; (800a89c <TIM_OC1_SetConfig+0xe0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10c      	bne.n	800a83a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f023 0308 	bic.w	r3, r3, #8
 800a826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	4313      	orrs	r3, r2
 800a830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f023 0304 	bic.w	r3, r3, #4
 800a838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a16      	ldr	r2, [pc, #88]	; (800a898 <TIM_OC1_SetConfig+0xdc>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d003      	beq.n	800a84a <TIM_OC1_SetConfig+0x8e>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a15      	ldr	r2, [pc, #84]	; (800a89c <TIM_OC1_SetConfig+0xe0>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d111      	bne.n	800a86e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4313      	orrs	r3, r2
 800a862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	621a      	str	r2, [r3, #32]
}
 800a888:	bf00      	nop
 800a88a:	371c      	adds	r7, #28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	fffeff8f 	.word	0xfffeff8f
 800a898:	40010000 	.word	0x40010000
 800a89c:	40010400 	.word	0x40010400

0800a8a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	f023 0210 	bic.w	r2, r3, #16
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4b2e      	ldr	r3, [pc, #184]	; (800a984 <TIM_OC2_SetConfig+0xe4>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f023 0320 	bic.w	r3, r3, #32
 800a8ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a23      	ldr	r2, [pc, #140]	; (800a988 <TIM_OC2_SetConfig+0xe8>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d003      	beq.n	800a908 <TIM_OC2_SetConfig+0x68>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a22      	ldr	r2, [pc, #136]	; (800a98c <TIM_OC2_SetConfig+0xec>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d10d      	bne.n	800a924 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a90e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	011b      	lsls	r3, r3, #4
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4313      	orrs	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a18      	ldr	r2, [pc, #96]	; (800a988 <TIM_OC2_SetConfig+0xe8>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_OC2_SetConfig+0x94>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a17      	ldr	r2, [pc, #92]	; (800a98c <TIM_OC2_SetConfig+0xec>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d113      	bne.n	800a95c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a93a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	621a      	str	r2, [r3, #32]
}
 800a976:	bf00      	nop
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	feff8fff 	.word	0xfeff8fff
 800a988:	40010000 	.word	0x40010000
 800a98c:	40010400 	.word	0x40010400

0800a990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4b2d      	ldr	r3, [pc, #180]	; (800aa70 <TIM_OC3_SetConfig+0xe0>)
 800a9bc:	4013      	ands	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	021b      	lsls	r3, r3, #8
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a22      	ldr	r2, [pc, #136]	; (800aa74 <TIM_OC3_SetConfig+0xe4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d003      	beq.n	800a9f6 <TIM_OC3_SetConfig+0x66>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a21      	ldr	r2, [pc, #132]	; (800aa78 <TIM_OC3_SetConfig+0xe8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d10d      	bne.n	800aa12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a17      	ldr	r2, [pc, #92]	; (800aa74 <TIM_OC3_SetConfig+0xe4>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d003      	beq.n	800aa22 <TIM_OC3_SetConfig+0x92>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a16      	ldr	r2, [pc, #88]	; (800aa78 <TIM_OC3_SetConfig+0xe8>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d113      	bne.n	800aa4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	011b      	lsls	r3, r3, #4
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	011b      	lsls	r3, r3, #4
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	621a      	str	r2, [r3, #32]
}
 800aa64:	bf00      	nop
 800aa66:	371c      	adds	r7, #28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	fffeff8f 	.word	0xfffeff8f
 800aa74:	40010000 	.word	0x40010000
 800aa78:	40010400 	.word	0x40010400

0800aa7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b087      	sub	sp, #28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4b1e      	ldr	r3, [pc, #120]	; (800ab20 <TIM_OC4_SetConfig+0xa4>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	031b      	lsls	r3, r3, #12
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a13      	ldr	r2, [pc, #76]	; (800ab24 <TIM_OC4_SetConfig+0xa8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d003      	beq.n	800aae4 <TIM_OC4_SetConfig+0x68>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a12      	ldr	r2, [pc, #72]	; (800ab28 <TIM_OC4_SetConfig+0xac>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d109      	bne.n	800aaf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	019b      	lsls	r3, r3, #6
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	621a      	str	r2, [r3, #32]
}
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	feff8fff 	.word	0xfeff8fff
 800ab24:	40010000 	.word	0x40010000
 800ab28:	40010400 	.word	0x40010400

0800ab2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4b1b      	ldr	r3, [pc, #108]	; (800abc4 <TIM_OC5_SetConfig+0x98>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ab6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	041b      	lsls	r3, r3, #16
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a12      	ldr	r2, [pc, #72]	; (800abc8 <TIM_OC5_SetConfig+0x9c>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d003      	beq.n	800ab8a <TIM_OC5_SetConfig+0x5e>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a11      	ldr	r2, [pc, #68]	; (800abcc <TIM_OC5_SetConfig+0xa0>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d109      	bne.n	800ab9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	021b      	lsls	r3, r3, #8
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	621a      	str	r2, [r3, #32]
}
 800abb8:	bf00      	nop
 800abba:	371c      	adds	r7, #28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	fffeff8f 	.word	0xfffeff8f
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40010400 	.word	0x40010400

0800abd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4b1c      	ldr	r3, [pc, #112]	; (800ac6c <TIM_OC6_SetConfig+0x9c>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	051b      	lsls	r3, r3, #20
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a13      	ldr	r2, [pc, #76]	; (800ac70 <TIM_OC6_SetConfig+0xa0>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d003      	beq.n	800ac30 <TIM_OC6_SetConfig+0x60>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a12      	ldr	r2, [pc, #72]	; (800ac74 <TIM_OC6_SetConfig+0xa4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d109      	bne.n	800ac44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	029b      	lsls	r3, r3, #10
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	621a      	str	r2, [r3, #32]
}
 800ac5e:	bf00      	nop
 800ac60:	371c      	adds	r7, #28
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	feff8fff 	.word	0xfeff8fff
 800ac70:	40010000 	.word	0x40010000
 800ac74:	40010400 	.word	0x40010400

0800ac78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	f023 0201 	bic.w	r2, r3, #1
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4313      	orrs	r3, r2
 800acac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f023 030a 	bic.w	r3, r3, #10
 800acb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	4313      	orrs	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	621a      	str	r2, [r3, #32]
}
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b087      	sub	sp, #28
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	f023 0210 	bic.w	r2, r3, #16
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	031b      	lsls	r3, r3, #12
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	011b      	lsls	r3, r3, #4
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	621a      	str	r2, [r3, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b085      	sub	sp, #20
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	f043 0307 	orr.w	r3, r3, #7
 800ad58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	609a      	str	r2, [r3, #8]
}
 800ad60:	bf00      	nop
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	021a      	lsls	r2, r3, #8
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	609a      	str	r2, [r3, #8]
}
 800ada0:	bf00      	nop
 800ada2:	371c      	adds	r7, #28
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800adac:	b480      	push	{r7}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f003 031f 	and.w	r3, r3, #31
 800adbe:	2201      	movs	r2, #1
 800adc0:	fa02 f303 	lsl.w	r3, r2, r3
 800adc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a1a      	ldr	r2, [r3, #32]
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	43db      	mvns	r3, r3
 800adce:	401a      	ands	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a1a      	ldr	r2, [r3, #32]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f003 031f 	and.w	r3, r3, #31
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	fa01 f303 	lsl.w	r3, r1, r3
 800ade4:	431a      	orrs	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	621a      	str	r2, [r3, #32]
}
 800adea:	bf00      	nop
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
	...

0800adf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d101      	bne.n	800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e06d      	b.n	800aeec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a30      	ldr	r2, [pc, #192]	; (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d004      	beq.n	800ae44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a2f      	ldr	r2, [pc, #188]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d108      	bne.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a20      	ldr	r2, [pc, #128]	; (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d022      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae82:	d01d      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a1d      	ldr	r2, [pc, #116]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d018      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a1c      	ldr	r2, [pc, #112]	; (800af04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d013      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a1a      	ldr	r2, [pc, #104]	; (800af08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00e      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a15      	ldr	r2, [pc, #84]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d009      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a16      	ldr	r2, [pc, #88]	; (800af0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d004      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a15      	ldr	r2, [pc, #84]	; (800af10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d10c      	bne.n	800aeda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	40010000 	.word	0x40010000
 800aefc:	40010400 	.word	0x40010400
 800af00:	40000400 	.word	0x40000400
 800af04:	40000800 	.word	0x40000800
 800af08:	40000c00 	.word	0x40000c00
 800af0c:	40014000 	.word	0x40014000
 800af10:	40001800 	.word	0x40001800

0800af14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e040      	b.n	800afe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7fa f9b6 	bl	80052e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2224      	movs	r2, #36	; 0x24
 800af7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f022 0201 	bic.w	r2, r2, #1
 800af8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f990 	bl	800b2b4 <UART_SetConfig>
 800af94:	4603      	mov	r3, r0
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e022      	b.n	800afe4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fbe6 	bl	800b778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689a      	ldr	r2, [r3, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f042 0201 	orr.w	r2, r2, #1
 800afda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fc6d 	bl	800b8bc <UART_CheckIdleState>
 800afe2:	4603      	mov	r3, r0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08a      	sub	sp, #40	; 0x28
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	603b      	str	r3, [r7, #0]
 800aff8:	4613      	mov	r3, r2
 800affa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b000:	2b20      	cmp	r3, #32
 800b002:	f040 8081 	bne.w	800b108 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <HAL_UART_Transmit+0x26>
 800b00c:	88fb      	ldrh	r3, [r7, #6]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e079      	b.n	800b10a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_UART_Transmit+0x38>
 800b020:	2302      	movs	r3, #2
 800b022:	e072      	b.n	800b10a <HAL_UART_Transmit+0x11e>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2221      	movs	r2, #33	; 0x21
 800b038:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b03a:	f7fb f981 	bl	8006340 <HAL_GetTick>
 800b03e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	88fa      	ldrh	r2, [r7, #6]
 800b044:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	88fa      	ldrh	r2, [r7, #6]
 800b04c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b058:	d108      	bne.n	800b06c <HAL_UART_Transmit+0x80>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d104      	bne.n	800b06c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	61bb      	str	r3, [r7, #24]
 800b06a:	e003      	b.n	800b074 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b07c:	e02c      	b.n	800b0d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2200      	movs	r2, #0
 800b086:	2180      	movs	r1, #128	; 0x80
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 fc60 	bl	800b94e <UART_WaitOnFlagUntilTimeout>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e038      	b.n	800b10a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10b      	bne.n	800b0b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	3302      	adds	r3, #2
 800b0b2:	61bb      	str	r3, [r7, #24]
 800b0b4:	e007      	b.n	800b0c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	781a      	ldrb	r2, [r3, #0]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1cc      	bne.n	800b07e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2140      	movs	r1, #64	; 0x40
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 fc2d 	bl	800b94e <UART_WaitOnFlagUntilTimeout>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d001      	beq.n	800b0fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e005      	b.n	800b10a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2220      	movs	r2, #32
 800b102:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	e000      	b.n	800b10a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b108:	2302      	movs	r3, #2
  }
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b08a      	sub	sp, #40	; 0x28
 800b116:	af02      	add	r7, sp, #8
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	603b      	str	r3, [r7, #0]
 800b11e:	4613      	mov	r3, r2
 800b120:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b126:	2b20      	cmp	r3, #32
 800b128:	f040 80be 	bne.w	800b2a8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <HAL_UART_Receive+0x26>
 800b132:	88fb      	ldrh	r3, [r7, #6]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e0b6      	b.n	800b2aa <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b142:	2b01      	cmp	r3, #1
 800b144:	d101      	bne.n	800b14a <HAL_UART_Receive+0x38>
 800b146:	2302      	movs	r3, #2
 800b148:	e0af      	b.n	800b2aa <HAL_UART_Receive+0x198>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2222      	movs	r2, #34	; 0x22
 800b15e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b166:	f7fb f8eb 	bl	8006340 <HAL_GetTick>
 800b16a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	88fa      	ldrh	r2, [r7, #6]
 800b170:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	88fa      	ldrh	r2, [r7, #6]
 800b178:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b184:	d10e      	bne.n	800b1a4 <HAL_UART_Receive+0x92>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d105      	bne.n	800b19a <HAL_UART_Receive+0x88>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b198:	e02d      	b.n	800b1f6 <HAL_UART_Receive+0xe4>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	22ff      	movs	r2, #255	; 0xff
 800b19e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1a2:	e028      	b.n	800b1f6 <HAL_UART_Receive+0xe4>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10d      	bne.n	800b1c8 <HAL_UART_Receive+0xb6>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d104      	bne.n	800b1be <HAL_UART_Receive+0xac>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	22ff      	movs	r2, #255	; 0xff
 800b1b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1bc:	e01b      	b.n	800b1f6 <HAL_UART_Receive+0xe4>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	227f      	movs	r2, #127	; 0x7f
 800b1c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1c6:	e016      	b.n	800b1f6 <HAL_UART_Receive+0xe4>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1d0:	d10d      	bne.n	800b1ee <HAL_UART_Receive+0xdc>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d104      	bne.n	800b1e4 <HAL_UART_Receive+0xd2>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	227f      	movs	r2, #127	; 0x7f
 800b1de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1e2:	e008      	b.n	800b1f6 <HAL_UART_Receive+0xe4>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	223f      	movs	r2, #63	; 0x3f
 800b1e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1ec:	e003      	b.n	800b1f6 <HAL_UART_Receive+0xe4>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b206:	d108      	bne.n	800b21a <HAL_UART_Receive+0x108>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d104      	bne.n	800b21a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b210:	2300      	movs	r3, #0
 800b212:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	61bb      	str	r3, [r7, #24]
 800b218:	e003      	b.n	800b222 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b22a:	e032      	b.n	800b292 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2200      	movs	r2, #0
 800b234:	2120      	movs	r1, #32
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 fb89 	bl	800b94e <UART_WaitOnFlagUntilTimeout>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e031      	b.n	800b2aa <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10c      	bne.n	800b266 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b252:	b29a      	uxth	r2, r3
 800b254:	8a7b      	ldrh	r3, [r7, #18]
 800b256:	4013      	ands	r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	3302      	adds	r3, #2
 800b262:	61bb      	str	r3, [r7, #24]
 800b264:	e00c      	b.n	800b280 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	8a7b      	ldrh	r3, [r7, #18]
 800b270:	b2db      	uxtb	r3, r3
 800b272:	4013      	ands	r3, r2
 800b274:	b2da      	uxtb	r2, r3
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	3301      	adds	r3, #1
 800b27e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b286:	b29b      	uxth	r3, r3
 800b288:	3b01      	subs	r3, #1
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b298:	b29b      	uxth	r3, r3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1c6      	bne.n	800b22c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e000      	b.n	800b2aa <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800b2a8:	2302      	movs	r3, #2
  }
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	4ba7      	ldr	r3, [pc, #668]	; (800b57c <UART_SetConfig+0x2c8>)
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	6812      	ldr	r2, [r2, #0]
 800b2e6:	6979      	ldr	r1, [r7, #20]
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68da      	ldr	r2, [r3, #12]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a1b      	ldr	r3, [r3, #32]
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	4313      	orrs	r3, r2
 800b310:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	430a      	orrs	r2, r1
 800b324:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a95      	ldr	r2, [pc, #596]	; (800b580 <UART_SetConfig+0x2cc>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d120      	bne.n	800b372 <UART_SetConfig+0xbe>
 800b330:	4b94      	ldr	r3, [pc, #592]	; (800b584 <UART_SetConfig+0x2d0>)
 800b332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	d816      	bhi.n	800b36c <UART_SetConfig+0xb8>
 800b33e:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <UART_SetConfig+0x90>)
 800b340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b344:	0800b355 	.word	0x0800b355
 800b348:	0800b361 	.word	0x0800b361
 800b34c:	0800b35b 	.word	0x0800b35b
 800b350:	0800b367 	.word	0x0800b367
 800b354:	2301      	movs	r3, #1
 800b356:	77fb      	strb	r3, [r7, #31]
 800b358:	e14f      	b.n	800b5fa <UART_SetConfig+0x346>
 800b35a:	2302      	movs	r3, #2
 800b35c:	77fb      	strb	r3, [r7, #31]
 800b35e:	e14c      	b.n	800b5fa <UART_SetConfig+0x346>
 800b360:	2304      	movs	r3, #4
 800b362:	77fb      	strb	r3, [r7, #31]
 800b364:	e149      	b.n	800b5fa <UART_SetConfig+0x346>
 800b366:	2308      	movs	r3, #8
 800b368:	77fb      	strb	r3, [r7, #31]
 800b36a:	e146      	b.n	800b5fa <UART_SetConfig+0x346>
 800b36c:	2310      	movs	r3, #16
 800b36e:	77fb      	strb	r3, [r7, #31]
 800b370:	e143      	b.n	800b5fa <UART_SetConfig+0x346>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a84      	ldr	r2, [pc, #528]	; (800b588 <UART_SetConfig+0x2d4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d132      	bne.n	800b3e2 <UART_SetConfig+0x12e>
 800b37c:	4b81      	ldr	r3, [pc, #516]	; (800b584 <UART_SetConfig+0x2d0>)
 800b37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b382:	f003 030c 	and.w	r3, r3, #12
 800b386:	2b0c      	cmp	r3, #12
 800b388:	d828      	bhi.n	800b3dc <UART_SetConfig+0x128>
 800b38a:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <UART_SetConfig+0xdc>)
 800b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b390:	0800b3c5 	.word	0x0800b3c5
 800b394:	0800b3dd 	.word	0x0800b3dd
 800b398:	0800b3dd 	.word	0x0800b3dd
 800b39c:	0800b3dd 	.word	0x0800b3dd
 800b3a0:	0800b3d1 	.word	0x0800b3d1
 800b3a4:	0800b3dd 	.word	0x0800b3dd
 800b3a8:	0800b3dd 	.word	0x0800b3dd
 800b3ac:	0800b3dd 	.word	0x0800b3dd
 800b3b0:	0800b3cb 	.word	0x0800b3cb
 800b3b4:	0800b3dd 	.word	0x0800b3dd
 800b3b8:	0800b3dd 	.word	0x0800b3dd
 800b3bc:	0800b3dd 	.word	0x0800b3dd
 800b3c0:	0800b3d7 	.word	0x0800b3d7
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	77fb      	strb	r3, [r7, #31]
 800b3c8:	e117      	b.n	800b5fa <UART_SetConfig+0x346>
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	77fb      	strb	r3, [r7, #31]
 800b3ce:	e114      	b.n	800b5fa <UART_SetConfig+0x346>
 800b3d0:	2304      	movs	r3, #4
 800b3d2:	77fb      	strb	r3, [r7, #31]
 800b3d4:	e111      	b.n	800b5fa <UART_SetConfig+0x346>
 800b3d6:	2308      	movs	r3, #8
 800b3d8:	77fb      	strb	r3, [r7, #31]
 800b3da:	e10e      	b.n	800b5fa <UART_SetConfig+0x346>
 800b3dc:	2310      	movs	r3, #16
 800b3de:	77fb      	strb	r3, [r7, #31]
 800b3e0:	e10b      	b.n	800b5fa <UART_SetConfig+0x346>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a69      	ldr	r2, [pc, #420]	; (800b58c <UART_SetConfig+0x2d8>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d120      	bne.n	800b42e <UART_SetConfig+0x17a>
 800b3ec:	4b65      	ldr	r3, [pc, #404]	; (800b584 <UART_SetConfig+0x2d0>)
 800b3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3f6:	2b30      	cmp	r3, #48	; 0x30
 800b3f8:	d013      	beq.n	800b422 <UART_SetConfig+0x16e>
 800b3fa:	2b30      	cmp	r3, #48	; 0x30
 800b3fc:	d814      	bhi.n	800b428 <UART_SetConfig+0x174>
 800b3fe:	2b20      	cmp	r3, #32
 800b400:	d009      	beq.n	800b416 <UART_SetConfig+0x162>
 800b402:	2b20      	cmp	r3, #32
 800b404:	d810      	bhi.n	800b428 <UART_SetConfig+0x174>
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <UART_SetConfig+0x15c>
 800b40a:	2b10      	cmp	r3, #16
 800b40c:	d006      	beq.n	800b41c <UART_SetConfig+0x168>
 800b40e:	e00b      	b.n	800b428 <UART_SetConfig+0x174>
 800b410:	2300      	movs	r3, #0
 800b412:	77fb      	strb	r3, [r7, #31]
 800b414:	e0f1      	b.n	800b5fa <UART_SetConfig+0x346>
 800b416:	2302      	movs	r3, #2
 800b418:	77fb      	strb	r3, [r7, #31]
 800b41a:	e0ee      	b.n	800b5fa <UART_SetConfig+0x346>
 800b41c:	2304      	movs	r3, #4
 800b41e:	77fb      	strb	r3, [r7, #31]
 800b420:	e0eb      	b.n	800b5fa <UART_SetConfig+0x346>
 800b422:	2308      	movs	r3, #8
 800b424:	77fb      	strb	r3, [r7, #31]
 800b426:	e0e8      	b.n	800b5fa <UART_SetConfig+0x346>
 800b428:	2310      	movs	r3, #16
 800b42a:	77fb      	strb	r3, [r7, #31]
 800b42c:	e0e5      	b.n	800b5fa <UART_SetConfig+0x346>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a57      	ldr	r2, [pc, #348]	; (800b590 <UART_SetConfig+0x2dc>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d120      	bne.n	800b47a <UART_SetConfig+0x1c6>
 800b438:	4b52      	ldr	r3, [pc, #328]	; (800b584 <UART_SetConfig+0x2d0>)
 800b43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b43e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b442:	2bc0      	cmp	r3, #192	; 0xc0
 800b444:	d013      	beq.n	800b46e <UART_SetConfig+0x1ba>
 800b446:	2bc0      	cmp	r3, #192	; 0xc0
 800b448:	d814      	bhi.n	800b474 <UART_SetConfig+0x1c0>
 800b44a:	2b80      	cmp	r3, #128	; 0x80
 800b44c:	d009      	beq.n	800b462 <UART_SetConfig+0x1ae>
 800b44e:	2b80      	cmp	r3, #128	; 0x80
 800b450:	d810      	bhi.n	800b474 <UART_SetConfig+0x1c0>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d002      	beq.n	800b45c <UART_SetConfig+0x1a8>
 800b456:	2b40      	cmp	r3, #64	; 0x40
 800b458:	d006      	beq.n	800b468 <UART_SetConfig+0x1b4>
 800b45a:	e00b      	b.n	800b474 <UART_SetConfig+0x1c0>
 800b45c:	2300      	movs	r3, #0
 800b45e:	77fb      	strb	r3, [r7, #31]
 800b460:	e0cb      	b.n	800b5fa <UART_SetConfig+0x346>
 800b462:	2302      	movs	r3, #2
 800b464:	77fb      	strb	r3, [r7, #31]
 800b466:	e0c8      	b.n	800b5fa <UART_SetConfig+0x346>
 800b468:	2304      	movs	r3, #4
 800b46a:	77fb      	strb	r3, [r7, #31]
 800b46c:	e0c5      	b.n	800b5fa <UART_SetConfig+0x346>
 800b46e:	2308      	movs	r3, #8
 800b470:	77fb      	strb	r3, [r7, #31]
 800b472:	e0c2      	b.n	800b5fa <UART_SetConfig+0x346>
 800b474:	2310      	movs	r3, #16
 800b476:	77fb      	strb	r3, [r7, #31]
 800b478:	e0bf      	b.n	800b5fa <UART_SetConfig+0x346>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a45      	ldr	r2, [pc, #276]	; (800b594 <UART_SetConfig+0x2e0>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d125      	bne.n	800b4d0 <UART_SetConfig+0x21c>
 800b484:	4b3f      	ldr	r3, [pc, #252]	; (800b584 <UART_SetConfig+0x2d0>)
 800b486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b48a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b48e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b492:	d017      	beq.n	800b4c4 <UART_SetConfig+0x210>
 800b494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b498:	d817      	bhi.n	800b4ca <UART_SetConfig+0x216>
 800b49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b49e:	d00b      	beq.n	800b4b8 <UART_SetConfig+0x204>
 800b4a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a4:	d811      	bhi.n	800b4ca <UART_SetConfig+0x216>
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <UART_SetConfig+0x1fe>
 800b4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ae:	d006      	beq.n	800b4be <UART_SetConfig+0x20a>
 800b4b0:	e00b      	b.n	800b4ca <UART_SetConfig+0x216>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	77fb      	strb	r3, [r7, #31]
 800b4b6:	e0a0      	b.n	800b5fa <UART_SetConfig+0x346>
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	77fb      	strb	r3, [r7, #31]
 800b4bc:	e09d      	b.n	800b5fa <UART_SetConfig+0x346>
 800b4be:	2304      	movs	r3, #4
 800b4c0:	77fb      	strb	r3, [r7, #31]
 800b4c2:	e09a      	b.n	800b5fa <UART_SetConfig+0x346>
 800b4c4:	2308      	movs	r3, #8
 800b4c6:	77fb      	strb	r3, [r7, #31]
 800b4c8:	e097      	b.n	800b5fa <UART_SetConfig+0x346>
 800b4ca:	2310      	movs	r3, #16
 800b4cc:	77fb      	strb	r3, [r7, #31]
 800b4ce:	e094      	b.n	800b5fa <UART_SetConfig+0x346>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a30      	ldr	r2, [pc, #192]	; (800b598 <UART_SetConfig+0x2e4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d125      	bne.n	800b526 <UART_SetConfig+0x272>
 800b4da:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <UART_SetConfig+0x2d0>)
 800b4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4e8:	d017      	beq.n	800b51a <UART_SetConfig+0x266>
 800b4ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4ee:	d817      	bhi.n	800b520 <UART_SetConfig+0x26c>
 800b4f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f4:	d00b      	beq.n	800b50e <UART_SetConfig+0x25a>
 800b4f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4fa:	d811      	bhi.n	800b520 <UART_SetConfig+0x26c>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <UART_SetConfig+0x254>
 800b500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b504:	d006      	beq.n	800b514 <UART_SetConfig+0x260>
 800b506:	e00b      	b.n	800b520 <UART_SetConfig+0x26c>
 800b508:	2301      	movs	r3, #1
 800b50a:	77fb      	strb	r3, [r7, #31]
 800b50c:	e075      	b.n	800b5fa <UART_SetConfig+0x346>
 800b50e:	2302      	movs	r3, #2
 800b510:	77fb      	strb	r3, [r7, #31]
 800b512:	e072      	b.n	800b5fa <UART_SetConfig+0x346>
 800b514:	2304      	movs	r3, #4
 800b516:	77fb      	strb	r3, [r7, #31]
 800b518:	e06f      	b.n	800b5fa <UART_SetConfig+0x346>
 800b51a:	2308      	movs	r3, #8
 800b51c:	77fb      	strb	r3, [r7, #31]
 800b51e:	e06c      	b.n	800b5fa <UART_SetConfig+0x346>
 800b520:	2310      	movs	r3, #16
 800b522:	77fb      	strb	r3, [r7, #31]
 800b524:	e069      	b.n	800b5fa <UART_SetConfig+0x346>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a1c      	ldr	r2, [pc, #112]	; (800b59c <UART_SetConfig+0x2e8>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d137      	bne.n	800b5a0 <UART_SetConfig+0x2ec>
 800b530:	4b14      	ldr	r3, [pc, #80]	; (800b584 <UART_SetConfig+0x2d0>)
 800b532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b536:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b53a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b53e:	d017      	beq.n	800b570 <UART_SetConfig+0x2bc>
 800b540:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b544:	d817      	bhi.n	800b576 <UART_SetConfig+0x2c2>
 800b546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b54a:	d00b      	beq.n	800b564 <UART_SetConfig+0x2b0>
 800b54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b550:	d811      	bhi.n	800b576 <UART_SetConfig+0x2c2>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <UART_SetConfig+0x2aa>
 800b556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b55a:	d006      	beq.n	800b56a <UART_SetConfig+0x2b6>
 800b55c:	e00b      	b.n	800b576 <UART_SetConfig+0x2c2>
 800b55e:	2300      	movs	r3, #0
 800b560:	77fb      	strb	r3, [r7, #31]
 800b562:	e04a      	b.n	800b5fa <UART_SetConfig+0x346>
 800b564:	2302      	movs	r3, #2
 800b566:	77fb      	strb	r3, [r7, #31]
 800b568:	e047      	b.n	800b5fa <UART_SetConfig+0x346>
 800b56a:	2304      	movs	r3, #4
 800b56c:	77fb      	strb	r3, [r7, #31]
 800b56e:	e044      	b.n	800b5fa <UART_SetConfig+0x346>
 800b570:	2308      	movs	r3, #8
 800b572:	77fb      	strb	r3, [r7, #31]
 800b574:	e041      	b.n	800b5fa <UART_SetConfig+0x346>
 800b576:	2310      	movs	r3, #16
 800b578:	77fb      	strb	r3, [r7, #31]
 800b57a:	e03e      	b.n	800b5fa <UART_SetConfig+0x346>
 800b57c:	efff69f3 	.word	0xefff69f3
 800b580:	40011000 	.word	0x40011000
 800b584:	40023800 	.word	0x40023800
 800b588:	40004400 	.word	0x40004400
 800b58c:	40004800 	.word	0x40004800
 800b590:	40004c00 	.word	0x40004c00
 800b594:	40005000 	.word	0x40005000
 800b598:	40011400 	.word	0x40011400
 800b59c:	40007800 	.word	0x40007800
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a71      	ldr	r2, [pc, #452]	; (800b76c <UART_SetConfig+0x4b8>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d125      	bne.n	800b5f6 <UART_SetConfig+0x342>
 800b5aa:	4b71      	ldr	r3, [pc, #452]	; (800b770 <UART_SetConfig+0x4bc>)
 800b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5b8:	d017      	beq.n	800b5ea <UART_SetConfig+0x336>
 800b5ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5be:	d817      	bhi.n	800b5f0 <UART_SetConfig+0x33c>
 800b5c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c4:	d00b      	beq.n	800b5de <UART_SetConfig+0x32a>
 800b5c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ca:	d811      	bhi.n	800b5f0 <UART_SetConfig+0x33c>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <UART_SetConfig+0x324>
 800b5d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5d4:	d006      	beq.n	800b5e4 <UART_SetConfig+0x330>
 800b5d6:	e00b      	b.n	800b5f0 <UART_SetConfig+0x33c>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	77fb      	strb	r3, [r7, #31]
 800b5dc:	e00d      	b.n	800b5fa <UART_SetConfig+0x346>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	77fb      	strb	r3, [r7, #31]
 800b5e2:	e00a      	b.n	800b5fa <UART_SetConfig+0x346>
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	77fb      	strb	r3, [r7, #31]
 800b5e8:	e007      	b.n	800b5fa <UART_SetConfig+0x346>
 800b5ea:	2308      	movs	r3, #8
 800b5ec:	77fb      	strb	r3, [r7, #31]
 800b5ee:	e004      	b.n	800b5fa <UART_SetConfig+0x346>
 800b5f0:	2310      	movs	r3, #16
 800b5f2:	77fb      	strb	r3, [r7, #31]
 800b5f4:	e001      	b.n	800b5fa <UART_SetConfig+0x346>
 800b5f6:	2310      	movs	r3, #16
 800b5f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b602:	d15b      	bne.n	800b6bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b604:	7ffb      	ldrb	r3, [r7, #31]
 800b606:	2b08      	cmp	r3, #8
 800b608:	d827      	bhi.n	800b65a <UART_SetConfig+0x3a6>
 800b60a:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <UART_SetConfig+0x35c>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b635 	.word	0x0800b635
 800b614:	0800b63d 	.word	0x0800b63d
 800b618:	0800b645 	.word	0x0800b645
 800b61c:	0800b65b 	.word	0x0800b65b
 800b620:	0800b64b 	.word	0x0800b64b
 800b624:	0800b65b 	.word	0x0800b65b
 800b628:	0800b65b 	.word	0x0800b65b
 800b62c:	0800b65b 	.word	0x0800b65b
 800b630:	0800b653 	.word	0x0800b653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b634:	f7fd fa5a 	bl	8008aec <HAL_RCC_GetPCLK1Freq>
 800b638:	61b8      	str	r0, [r7, #24]
        break;
 800b63a:	e013      	b.n	800b664 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b63c:	f7fd fa6a 	bl	8008b14 <HAL_RCC_GetPCLK2Freq>
 800b640:	61b8      	str	r0, [r7, #24]
        break;
 800b642:	e00f      	b.n	800b664 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b644:	4b4b      	ldr	r3, [pc, #300]	; (800b774 <UART_SetConfig+0x4c0>)
 800b646:	61bb      	str	r3, [r7, #24]
        break;
 800b648:	e00c      	b.n	800b664 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b64a:	f7fd f961 	bl	8008910 <HAL_RCC_GetSysClockFreq>
 800b64e:	61b8      	str	r0, [r7, #24]
        break;
 800b650:	e008      	b.n	800b664 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b656:	61bb      	str	r3, [r7, #24]
        break;
 800b658:	e004      	b.n	800b664 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	77bb      	strb	r3, [r7, #30]
        break;
 800b662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d074      	beq.n	800b754 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	005a      	lsls	r2, r3, #1
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	085b      	lsrs	r3, r3, #1
 800b674:	441a      	add	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b67e:	b29b      	uxth	r3, r3
 800b680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	2b0f      	cmp	r3, #15
 800b686:	d916      	bls.n	800b6b6 <UART_SetConfig+0x402>
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68e:	d212      	bcs.n	800b6b6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	b29b      	uxth	r3, r3
 800b694:	f023 030f 	bic.w	r3, r3, #15
 800b698:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	085b      	lsrs	r3, r3, #1
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f003 0307 	and.w	r3, r3, #7
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	89fb      	ldrh	r3, [r7, #14]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	89fa      	ldrh	r2, [r7, #14]
 800b6b2:	60da      	str	r2, [r3, #12]
 800b6b4:	e04e      	b.n	800b754 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	77bb      	strb	r3, [r7, #30]
 800b6ba:	e04b      	b.n	800b754 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6bc:	7ffb      	ldrb	r3, [r7, #31]
 800b6be:	2b08      	cmp	r3, #8
 800b6c0:	d827      	bhi.n	800b712 <UART_SetConfig+0x45e>
 800b6c2:	a201      	add	r2, pc, #4	; (adr r2, 800b6c8 <UART_SetConfig+0x414>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b6ed 	.word	0x0800b6ed
 800b6cc:	0800b6f5 	.word	0x0800b6f5
 800b6d0:	0800b6fd 	.word	0x0800b6fd
 800b6d4:	0800b713 	.word	0x0800b713
 800b6d8:	0800b703 	.word	0x0800b703
 800b6dc:	0800b713 	.word	0x0800b713
 800b6e0:	0800b713 	.word	0x0800b713
 800b6e4:	0800b713 	.word	0x0800b713
 800b6e8:	0800b70b 	.word	0x0800b70b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6ec:	f7fd f9fe 	bl	8008aec <HAL_RCC_GetPCLK1Freq>
 800b6f0:	61b8      	str	r0, [r7, #24]
        break;
 800b6f2:	e013      	b.n	800b71c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6f4:	f7fd fa0e 	bl	8008b14 <HAL_RCC_GetPCLK2Freq>
 800b6f8:	61b8      	str	r0, [r7, #24]
        break;
 800b6fa:	e00f      	b.n	800b71c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6fc:	4b1d      	ldr	r3, [pc, #116]	; (800b774 <UART_SetConfig+0x4c0>)
 800b6fe:	61bb      	str	r3, [r7, #24]
        break;
 800b700:	e00c      	b.n	800b71c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b702:	f7fd f905 	bl	8008910 <HAL_RCC_GetSysClockFreq>
 800b706:	61b8      	str	r0, [r7, #24]
        break;
 800b708:	e008      	b.n	800b71c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b70e:	61bb      	str	r3, [r7, #24]
        break;
 800b710:	e004      	b.n	800b71c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b712:	2300      	movs	r3, #0
 800b714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	77bb      	strb	r3, [r7, #30]
        break;
 800b71a:	bf00      	nop
    }

    if (pclk != 0U)
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d018      	beq.n	800b754 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	085a      	lsrs	r2, r3, #1
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	441a      	add	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	fbb2 f3f3 	udiv	r3, r2, r3
 800b734:	b29b      	uxth	r3, r3
 800b736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	2b0f      	cmp	r3, #15
 800b73c:	d908      	bls.n	800b750 <UART_SetConfig+0x49c>
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b744:	d204      	bcs.n	800b750 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	60da      	str	r2, [r3, #12]
 800b74e:	e001      	b.n	800b754 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b760:	7fbb      	ldrb	r3, [r7, #30]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3720      	adds	r7, #32
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	40007c00 	.word	0x40007c00
 800b770:	40023800 	.word	0x40023800
 800b774:	00f42400 	.word	0x00f42400

0800b778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00a      	beq.n	800b7a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	f003 0302 	and.w	r3, r3, #2
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00a      	beq.n	800b7c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	430a      	orrs	r2, r1
 800b7c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	f003 0304 	and.w	r3, r3, #4
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00a      	beq.n	800b7e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ea:	f003 0308 	and.w	r3, r3, #8
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00a      	beq.n	800b808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80c:	f003 0310 	and.w	r3, r3, #16
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00a      	beq.n	800b82a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	f003 0320 	and.w	r3, r3, #32
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00a      	beq.n	800b84c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01a      	beq.n	800b88e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	430a      	orrs	r2, r1
 800b86c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b876:	d10a      	bne.n	800b88e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	605a      	str	r2, [r3, #4]
  }
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af02      	add	r7, sp, #8
 800b8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8cc:	f7fa fd38 	bl	8006340 <HAL_GetTick>
 800b8d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 0308 	and.w	r3, r3, #8
 800b8dc:	2b08      	cmp	r3, #8
 800b8de:	d10e      	bne.n	800b8fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f82d 	bl	800b94e <UART_WaitOnFlagUntilTimeout>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e023      	b.n	800b946 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b04      	cmp	r3, #4
 800b90a:	d10e      	bne.n	800b92a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b90c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f817 	bl	800b94e <UART_WaitOnFlagUntilTimeout>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	e00d      	b.n	800b946 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2220      	movs	r2, #32
 800b92e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2220      	movs	r2, #32
 800b934:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	603b      	str	r3, [r7, #0]
 800b95a:	4613      	mov	r3, r2
 800b95c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b95e:	e05e      	b.n	800ba1e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b966:	d05a      	beq.n	800ba1e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b968:	f7fa fcea 	bl	8006340 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	429a      	cmp	r2, r3
 800b976:	d302      	bcc.n	800b97e <UART_WaitOnFlagUntilTimeout+0x30>
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d11b      	bne.n	800b9b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b98c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	689a      	ldr	r2, [r3, #8]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 0201 	bic.w	r2, r2, #1
 800b99c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e043      	b.n	800ba3e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0304 	and.w	r3, r3, #4
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d02c      	beq.n	800ba1e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9d2:	d124      	bne.n	800ba1e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	689a      	ldr	r2, [r3, #8]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f022 0201 	bic.w	r2, r2, #1
 800b9fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2220      	movs	r2, #32
 800ba02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2220      	movs	r2, #32
 800ba08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2220      	movs	r2, #32
 800ba0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e00f      	b.n	800ba3e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	69da      	ldr	r2, [r3, #28]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	4013      	ands	r3, r2
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	bf0c      	ite	eq
 800ba2e:	2301      	moveq	r3, #1
 800ba30:	2300      	movne	r3, #0
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	461a      	mov	r2, r3
 800ba36:	79fb      	ldrb	r3, [r7, #7]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d091      	beq.n	800b960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <__errno>:
 800ba48:	4b01      	ldr	r3, [pc, #4]	; (800ba50 <__errno+0x8>)
 800ba4a:	6818      	ldr	r0, [r3, #0]
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	200000dc 	.word	0x200000dc

0800ba54 <__libc_init_array>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	4d0d      	ldr	r5, [pc, #52]	; (800ba8c <__libc_init_array+0x38>)
 800ba58:	4c0d      	ldr	r4, [pc, #52]	; (800ba90 <__libc_init_array+0x3c>)
 800ba5a:	1b64      	subs	r4, r4, r5
 800ba5c:	10a4      	asrs	r4, r4, #2
 800ba5e:	2600      	movs	r6, #0
 800ba60:	42a6      	cmp	r6, r4
 800ba62:	d109      	bne.n	800ba78 <__libc_init_array+0x24>
 800ba64:	4d0b      	ldr	r5, [pc, #44]	; (800ba94 <__libc_init_array+0x40>)
 800ba66:	4c0c      	ldr	r4, [pc, #48]	; (800ba98 <__libc_init_array+0x44>)
 800ba68:	f002 fe26 	bl	800e6b8 <_init>
 800ba6c:	1b64      	subs	r4, r4, r5
 800ba6e:	10a4      	asrs	r4, r4, #2
 800ba70:	2600      	movs	r6, #0
 800ba72:	42a6      	cmp	r6, r4
 800ba74:	d105      	bne.n	800ba82 <__libc_init_array+0x2e>
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba7c:	4798      	blx	r3
 800ba7e:	3601      	adds	r6, #1
 800ba80:	e7ee      	b.n	800ba60 <__libc_init_array+0xc>
 800ba82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba86:	4798      	blx	r3
 800ba88:	3601      	adds	r6, #1
 800ba8a:	e7f2      	b.n	800ba72 <__libc_init_array+0x1e>
 800ba8c:	0800ee9c 	.word	0x0800ee9c
 800ba90:	0800ee9c 	.word	0x0800ee9c
 800ba94:	0800ee9c 	.word	0x0800ee9c
 800ba98:	0800eea0 	.word	0x0800eea0

0800ba9c <memset>:
 800ba9c:	4402      	add	r2, r0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d100      	bne.n	800baa6 <memset+0xa>
 800baa4:	4770      	bx	lr
 800baa6:	f803 1b01 	strb.w	r1, [r3], #1
 800baaa:	e7f9      	b.n	800baa0 <memset+0x4>

0800baac <__cvt>:
 800baac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baae:	ed2d 8b02 	vpush	{d8}
 800bab2:	eeb0 8b40 	vmov.f64	d8, d0
 800bab6:	b085      	sub	sp, #20
 800bab8:	4617      	mov	r7, r2
 800baba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800babc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800babe:	ee18 2a90 	vmov	r2, s17
 800bac2:	f025 0520 	bic.w	r5, r5, #32
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	bfb6      	itet	lt
 800baca:	222d      	movlt	r2, #45	; 0x2d
 800bacc:	2200      	movge	r2, #0
 800bace:	eeb1 8b40 	vneglt.f64	d8, d0
 800bad2:	2d46      	cmp	r5, #70	; 0x46
 800bad4:	460c      	mov	r4, r1
 800bad6:	701a      	strb	r2, [r3, #0]
 800bad8:	d004      	beq.n	800bae4 <__cvt+0x38>
 800bada:	2d45      	cmp	r5, #69	; 0x45
 800badc:	d100      	bne.n	800bae0 <__cvt+0x34>
 800bade:	3401      	adds	r4, #1
 800bae0:	2102      	movs	r1, #2
 800bae2:	e000      	b.n	800bae6 <__cvt+0x3a>
 800bae4:	2103      	movs	r1, #3
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	ab02      	add	r3, sp, #8
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	4622      	mov	r2, r4
 800baf0:	4633      	mov	r3, r6
 800baf2:	eeb0 0b48 	vmov.f64	d0, d8
 800baf6:	f000 fccb 	bl	800c490 <_dtoa_r>
 800bafa:	2d47      	cmp	r5, #71	; 0x47
 800bafc:	d109      	bne.n	800bb12 <__cvt+0x66>
 800bafe:	07fb      	lsls	r3, r7, #31
 800bb00:	d407      	bmi.n	800bb12 <__cvt+0x66>
 800bb02:	9b03      	ldr	r3, [sp, #12]
 800bb04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb06:	1a1b      	subs	r3, r3, r0
 800bb08:	6013      	str	r3, [r2, #0]
 800bb0a:	b005      	add	sp, #20
 800bb0c:	ecbd 8b02 	vpop	{d8}
 800bb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb12:	2d46      	cmp	r5, #70	; 0x46
 800bb14:	eb00 0204 	add.w	r2, r0, r4
 800bb18:	d10c      	bne.n	800bb34 <__cvt+0x88>
 800bb1a:	7803      	ldrb	r3, [r0, #0]
 800bb1c:	2b30      	cmp	r3, #48	; 0x30
 800bb1e:	d107      	bne.n	800bb30 <__cvt+0x84>
 800bb20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb28:	bf1c      	itt	ne
 800bb2a:	f1c4 0401 	rsbne	r4, r4, #1
 800bb2e:	6034      	strne	r4, [r6, #0]
 800bb30:	6833      	ldr	r3, [r6, #0]
 800bb32:	441a      	add	r2, r3
 800bb34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb3c:	bf08      	it	eq
 800bb3e:	9203      	streq	r2, [sp, #12]
 800bb40:	2130      	movs	r1, #48	; 0x30
 800bb42:	9b03      	ldr	r3, [sp, #12]
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d2dc      	bcs.n	800bb02 <__cvt+0x56>
 800bb48:	1c5c      	adds	r4, r3, #1
 800bb4a:	9403      	str	r4, [sp, #12]
 800bb4c:	7019      	strb	r1, [r3, #0]
 800bb4e:	e7f8      	b.n	800bb42 <__cvt+0x96>

0800bb50 <__exponent>:
 800bb50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb52:	4603      	mov	r3, r0
 800bb54:	2900      	cmp	r1, #0
 800bb56:	bfb8      	it	lt
 800bb58:	4249      	neglt	r1, r1
 800bb5a:	f803 2b02 	strb.w	r2, [r3], #2
 800bb5e:	bfb4      	ite	lt
 800bb60:	222d      	movlt	r2, #45	; 0x2d
 800bb62:	222b      	movge	r2, #43	; 0x2b
 800bb64:	2909      	cmp	r1, #9
 800bb66:	7042      	strb	r2, [r0, #1]
 800bb68:	dd2a      	ble.n	800bbc0 <__exponent+0x70>
 800bb6a:	f10d 0407 	add.w	r4, sp, #7
 800bb6e:	46a4      	mov	ip, r4
 800bb70:	270a      	movs	r7, #10
 800bb72:	46a6      	mov	lr, r4
 800bb74:	460a      	mov	r2, r1
 800bb76:	fb91 f6f7 	sdiv	r6, r1, r7
 800bb7a:	fb07 1516 	mls	r5, r7, r6, r1
 800bb7e:	3530      	adds	r5, #48	; 0x30
 800bb80:	2a63      	cmp	r2, #99	; 0x63
 800bb82:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	dcf1      	bgt.n	800bb72 <__exponent+0x22>
 800bb8e:	3130      	adds	r1, #48	; 0x30
 800bb90:	f1ae 0502 	sub.w	r5, lr, #2
 800bb94:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb98:	1c44      	adds	r4, r0, #1
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4561      	cmp	r1, ip
 800bb9e:	d30a      	bcc.n	800bbb6 <__exponent+0x66>
 800bba0:	f10d 0209 	add.w	r2, sp, #9
 800bba4:	eba2 020e 	sub.w	r2, r2, lr
 800bba8:	4565      	cmp	r5, ip
 800bbaa:	bf88      	it	hi
 800bbac:	2200      	movhi	r2, #0
 800bbae:	4413      	add	r3, r2
 800bbb0:	1a18      	subs	r0, r3, r0
 800bbb2:	b003      	add	sp, #12
 800bbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bbbe:	e7ed      	b.n	800bb9c <__exponent+0x4c>
 800bbc0:	2330      	movs	r3, #48	; 0x30
 800bbc2:	3130      	adds	r1, #48	; 0x30
 800bbc4:	7083      	strb	r3, [r0, #2]
 800bbc6:	70c1      	strb	r1, [r0, #3]
 800bbc8:	1d03      	adds	r3, r0, #4
 800bbca:	e7f1      	b.n	800bbb0 <__exponent+0x60>
 800bbcc:	0000      	movs	r0, r0
	...

0800bbd0 <_printf_float>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	b08b      	sub	sp, #44	; 0x2c
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bbdc:	4616      	mov	r6, r2
 800bbde:	461f      	mov	r7, r3
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	f001 f9d7 	bl	800cf94 <_localeconv_r>
 800bbe6:	f8d0 b000 	ldr.w	fp, [r0]
 800bbea:	4658      	mov	r0, fp
 800bbec:	f7f4 fb28 	bl	8000240 <strlen>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	9308      	str	r3, [sp, #32]
 800bbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bbfc:	6822      	ldr	r2, [r4, #0]
 800bbfe:	3307      	adds	r3, #7
 800bc00:	f023 0307 	bic.w	r3, r3, #7
 800bc04:	f103 0108 	add.w	r1, r3, #8
 800bc08:	f8c8 1000 	str.w	r1, [r8]
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc12:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800bc16:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800be78 <_printf_float+0x2a8>
 800bc1a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800bc1e:	eeb0 6bc0 	vabs.f64	d6, d0
 800bc22:	eeb4 6b47 	vcmp.f64	d6, d7
 800bc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2a:	dd24      	ble.n	800bc76 <_printf_float+0xa6>
 800bc2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc34:	d502      	bpl.n	800bc3c <_printf_float+0x6c>
 800bc36:	232d      	movs	r3, #45	; 0x2d
 800bc38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc3c:	4b90      	ldr	r3, [pc, #576]	; (800be80 <_printf_float+0x2b0>)
 800bc3e:	4891      	ldr	r0, [pc, #580]	; (800be84 <_printf_float+0x2b4>)
 800bc40:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bc44:	bf94      	ite	ls
 800bc46:	4698      	movls	r8, r3
 800bc48:	4680      	movhi	r8, r0
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	f022 0204 	bic.w	r2, r2, #4
 800bc52:	2300      	movs	r3, #0
 800bc54:	6022      	str	r2, [r4, #0]
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	9700      	str	r7, [sp, #0]
 800bc5a:	4633      	mov	r3, r6
 800bc5c:	aa09      	add	r2, sp, #36	; 0x24
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4628      	mov	r0, r5
 800bc62:	f000 f9d3 	bl	800c00c <_printf_common>
 800bc66:	3001      	adds	r0, #1
 800bc68:	f040 808a 	bne.w	800bd80 <_printf_float+0x1b0>
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc70:	b00b      	add	sp, #44	; 0x2c
 800bc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc76:	eeb4 0b40 	vcmp.f64	d0, d0
 800bc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7e:	d709      	bvc.n	800bc94 <_printf_float+0xc4>
 800bc80:	ee10 3a90 	vmov	r3, s1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bfbc      	itt	lt
 800bc88:	232d      	movlt	r3, #45	; 0x2d
 800bc8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc8e:	487e      	ldr	r0, [pc, #504]	; (800be88 <_printf_float+0x2b8>)
 800bc90:	4b7e      	ldr	r3, [pc, #504]	; (800be8c <_printf_float+0x2bc>)
 800bc92:	e7d5      	b.n	800bc40 <_printf_float+0x70>
 800bc94:	6863      	ldr	r3, [r4, #4]
 800bc96:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bc9a:	9104      	str	r1, [sp, #16]
 800bc9c:	1c59      	adds	r1, r3, #1
 800bc9e:	d13c      	bne.n	800bd1a <_printf_float+0x14a>
 800bca0:	2306      	movs	r3, #6
 800bca2:	6063      	str	r3, [r4, #4]
 800bca4:	2300      	movs	r3, #0
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	ab08      	add	r3, sp, #32
 800bcaa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bcae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bcb2:	ab07      	add	r3, sp, #28
 800bcb4:	6861      	ldr	r1, [r4, #4]
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	6022      	str	r2, [r4, #0]
 800bcba:	f10d 031b 	add.w	r3, sp, #27
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f7ff fef4 	bl	800baac <__cvt>
 800bcc4:	9b04      	ldr	r3, [sp, #16]
 800bcc6:	9907      	ldr	r1, [sp, #28]
 800bcc8:	2b47      	cmp	r3, #71	; 0x47
 800bcca:	4680      	mov	r8, r0
 800bccc:	d108      	bne.n	800bce0 <_printf_float+0x110>
 800bcce:	1cc8      	adds	r0, r1, #3
 800bcd0:	db02      	blt.n	800bcd8 <_printf_float+0x108>
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	4299      	cmp	r1, r3
 800bcd6:	dd41      	ble.n	800bd5c <_printf_float+0x18c>
 800bcd8:	f1a9 0902 	sub.w	r9, r9, #2
 800bcdc:	fa5f f989 	uxtb.w	r9, r9
 800bce0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bce4:	d820      	bhi.n	800bd28 <_printf_float+0x158>
 800bce6:	3901      	subs	r1, #1
 800bce8:	464a      	mov	r2, r9
 800bcea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bcee:	9107      	str	r1, [sp, #28]
 800bcf0:	f7ff ff2e 	bl	800bb50 <__exponent>
 800bcf4:	9a08      	ldr	r2, [sp, #32]
 800bcf6:	9004      	str	r0, [sp, #16]
 800bcf8:	1813      	adds	r3, r2, r0
 800bcfa:	2a01      	cmp	r2, #1
 800bcfc:	6123      	str	r3, [r4, #16]
 800bcfe:	dc02      	bgt.n	800bd06 <_printf_float+0x136>
 800bd00:	6822      	ldr	r2, [r4, #0]
 800bd02:	07d2      	lsls	r2, r2, #31
 800bd04:	d501      	bpl.n	800bd0a <_printf_float+0x13a>
 800bd06:	3301      	adds	r3, #1
 800bd08:	6123      	str	r3, [r4, #16]
 800bd0a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0a2      	beq.n	800bc58 <_printf_float+0x88>
 800bd12:	232d      	movs	r3, #45	; 0x2d
 800bd14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd18:	e79e      	b.n	800bc58 <_printf_float+0x88>
 800bd1a:	9904      	ldr	r1, [sp, #16]
 800bd1c:	2947      	cmp	r1, #71	; 0x47
 800bd1e:	d1c1      	bne.n	800bca4 <_printf_float+0xd4>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1bf      	bne.n	800bca4 <_printf_float+0xd4>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e7bc      	b.n	800bca2 <_printf_float+0xd2>
 800bd28:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bd2c:	d118      	bne.n	800bd60 <_printf_float+0x190>
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	6863      	ldr	r3, [r4, #4]
 800bd32:	dd0b      	ble.n	800bd4c <_printf_float+0x17c>
 800bd34:	6121      	str	r1, [r4, #16]
 800bd36:	b913      	cbnz	r3, 800bd3e <_printf_float+0x16e>
 800bd38:	6822      	ldr	r2, [r4, #0]
 800bd3a:	07d0      	lsls	r0, r2, #31
 800bd3c:	d502      	bpl.n	800bd44 <_printf_float+0x174>
 800bd3e:	3301      	adds	r3, #1
 800bd40:	440b      	add	r3, r1
 800bd42:	6123      	str	r3, [r4, #16]
 800bd44:	2300      	movs	r3, #0
 800bd46:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd48:	9304      	str	r3, [sp, #16]
 800bd4a:	e7de      	b.n	800bd0a <_printf_float+0x13a>
 800bd4c:	b913      	cbnz	r3, 800bd54 <_printf_float+0x184>
 800bd4e:	6822      	ldr	r2, [r4, #0]
 800bd50:	07d2      	lsls	r2, r2, #31
 800bd52:	d501      	bpl.n	800bd58 <_printf_float+0x188>
 800bd54:	3302      	adds	r3, #2
 800bd56:	e7f4      	b.n	800bd42 <_printf_float+0x172>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e7f2      	b.n	800bd42 <_printf_float+0x172>
 800bd5c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	4299      	cmp	r1, r3
 800bd64:	db05      	blt.n	800bd72 <_printf_float+0x1a2>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	6121      	str	r1, [r4, #16]
 800bd6a:	07d8      	lsls	r0, r3, #31
 800bd6c:	d5ea      	bpl.n	800bd44 <_printf_float+0x174>
 800bd6e:	1c4b      	adds	r3, r1, #1
 800bd70:	e7e7      	b.n	800bd42 <_printf_float+0x172>
 800bd72:	2900      	cmp	r1, #0
 800bd74:	bfd4      	ite	le
 800bd76:	f1c1 0202 	rsble	r2, r1, #2
 800bd7a:	2201      	movgt	r2, #1
 800bd7c:	4413      	add	r3, r2
 800bd7e:	e7e0      	b.n	800bd42 <_printf_float+0x172>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	055a      	lsls	r2, r3, #21
 800bd84:	d407      	bmi.n	800bd96 <_printf_float+0x1c6>
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	4642      	mov	r2, r8
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	d12a      	bne.n	800bdea <_printf_float+0x21a>
 800bd94:	e76a      	b.n	800bc6c <_printf_float+0x9c>
 800bd96:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bd9a:	f240 80e2 	bls.w	800bf62 <_printf_float+0x392>
 800bd9e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bda2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdaa:	d133      	bne.n	800be14 <_printf_float+0x244>
 800bdac:	4a38      	ldr	r2, [pc, #224]	; (800be90 <_printf_float+0x2c0>)
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	47b8      	blx	r7
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	f43f af58 	beq.w	800bc6c <_printf_float+0x9c>
 800bdbc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	db02      	blt.n	800bdca <_printf_float+0x1fa>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	07d8      	lsls	r0, r3, #31
 800bdc8:	d50f      	bpl.n	800bdea <_printf_float+0x21a>
 800bdca:	4653      	mov	r3, sl
 800bdcc:	465a      	mov	r2, fp
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b8      	blx	r7
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f43f af49 	beq.w	800bc6c <_printf_float+0x9c>
 800bdda:	f04f 0800 	mov.w	r8, #0
 800bdde:	f104 091a 	add.w	r9, r4, #26
 800bde2:	9b08      	ldr	r3, [sp, #32]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	4543      	cmp	r3, r8
 800bde8:	dc09      	bgt.n	800bdfe <_printf_float+0x22e>
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	079b      	lsls	r3, r3, #30
 800bdee:	f100 8108 	bmi.w	800c002 <_printf_float+0x432>
 800bdf2:	68e0      	ldr	r0, [r4, #12]
 800bdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf6:	4298      	cmp	r0, r3
 800bdf8:	bfb8      	it	lt
 800bdfa:	4618      	movlt	r0, r3
 800bdfc:	e738      	b.n	800bc70 <_printf_float+0xa0>
 800bdfe:	2301      	movs	r3, #1
 800be00:	464a      	mov	r2, r9
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	47b8      	blx	r7
 800be08:	3001      	adds	r0, #1
 800be0a:	f43f af2f 	beq.w	800bc6c <_printf_float+0x9c>
 800be0e:	f108 0801 	add.w	r8, r8, #1
 800be12:	e7e6      	b.n	800bde2 <_printf_float+0x212>
 800be14:	9b07      	ldr	r3, [sp, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	dc3c      	bgt.n	800be94 <_printf_float+0x2c4>
 800be1a:	4a1d      	ldr	r2, [pc, #116]	; (800be90 <_printf_float+0x2c0>)
 800be1c:	2301      	movs	r3, #1
 800be1e:	4631      	mov	r1, r6
 800be20:	4628      	mov	r0, r5
 800be22:	47b8      	blx	r7
 800be24:	3001      	adds	r0, #1
 800be26:	f43f af21 	beq.w	800bc6c <_printf_float+0x9c>
 800be2a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800be2e:	4313      	orrs	r3, r2
 800be30:	d102      	bne.n	800be38 <_printf_float+0x268>
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	07d9      	lsls	r1, r3, #31
 800be36:	d5d8      	bpl.n	800bdea <_printf_float+0x21a>
 800be38:	4653      	mov	r3, sl
 800be3a:	465a      	mov	r2, fp
 800be3c:	4631      	mov	r1, r6
 800be3e:	4628      	mov	r0, r5
 800be40:	47b8      	blx	r7
 800be42:	3001      	adds	r0, #1
 800be44:	f43f af12 	beq.w	800bc6c <_printf_float+0x9c>
 800be48:	f04f 0900 	mov.w	r9, #0
 800be4c:	f104 0a1a 	add.w	sl, r4, #26
 800be50:	9b07      	ldr	r3, [sp, #28]
 800be52:	425b      	negs	r3, r3
 800be54:	454b      	cmp	r3, r9
 800be56:	dc01      	bgt.n	800be5c <_printf_float+0x28c>
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	e795      	b.n	800bd88 <_printf_float+0x1b8>
 800be5c:	2301      	movs	r3, #1
 800be5e:	4652      	mov	r2, sl
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	f43f af00 	beq.w	800bc6c <_printf_float+0x9c>
 800be6c:	f109 0901 	add.w	r9, r9, #1
 800be70:	e7ee      	b.n	800be50 <_printf_float+0x280>
 800be72:	bf00      	nop
 800be74:	f3af 8000 	nop.w
 800be78:	ffffffff 	.word	0xffffffff
 800be7c:	7fefffff 	.word	0x7fefffff
 800be80:	0800eab4 	.word	0x0800eab4
 800be84:	0800eab8 	.word	0x0800eab8
 800be88:	0800eac0 	.word	0x0800eac0
 800be8c:	0800eabc 	.word	0x0800eabc
 800be90:	0800eac4 	.word	0x0800eac4
 800be94:	9a08      	ldr	r2, [sp, #32]
 800be96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be98:	429a      	cmp	r2, r3
 800be9a:	bfa8      	it	ge
 800be9c:	461a      	movge	r2, r3
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	4691      	mov	r9, r2
 800bea2:	dc38      	bgt.n	800bf16 <_printf_float+0x346>
 800bea4:	2300      	movs	r3, #0
 800bea6:	9305      	str	r3, [sp, #20]
 800bea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800beac:	f104 021a 	add.w	r2, r4, #26
 800beb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800beb2:	9905      	ldr	r1, [sp, #20]
 800beb4:	9304      	str	r3, [sp, #16]
 800beb6:	eba3 0309 	sub.w	r3, r3, r9
 800beba:	428b      	cmp	r3, r1
 800bebc:	dc33      	bgt.n	800bf26 <_printf_float+0x356>
 800bebe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	db3c      	blt.n	800bf40 <_printf_float+0x370>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	07da      	lsls	r2, r3, #31
 800beca:	d439      	bmi.n	800bf40 <_printf_float+0x370>
 800becc:	9a08      	ldr	r2, [sp, #32]
 800bece:	9b04      	ldr	r3, [sp, #16]
 800bed0:	9907      	ldr	r1, [sp, #28]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	eba2 0901 	sub.w	r9, r2, r1
 800bed8:	4599      	cmp	r9, r3
 800beda:	bfa8      	it	ge
 800bedc:	4699      	movge	r9, r3
 800bede:	f1b9 0f00 	cmp.w	r9, #0
 800bee2:	dc35      	bgt.n	800bf50 <_printf_float+0x380>
 800bee4:	f04f 0800 	mov.w	r8, #0
 800bee8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800beec:	f104 0a1a 	add.w	sl, r4, #26
 800bef0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bef4:	1a9b      	subs	r3, r3, r2
 800bef6:	eba3 0309 	sub.w	r3, r3, r9
 800befa:	4543      	cmp	r3, r8
 800befc:	f77f af75 	ble.w	800bdea <_printf_float+0x21a>
 800bf00:	2301      	movs	r3, #1
 800bf02:	4652      	mov	r2, sl
 800bf04:	4631      	mov	r1, r6
 800bf06:	4628      	mov	r0, r5
 800bf08:	47b8      	blx	r7
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	f43f aeae 	beq.w	800bc6c <_printf_float+0x9c>
 800bf10:	f108 0801 	add.w	r8, r8, #1
 800bf14:	e7ec      	b.n	800bef0 <_printf_float+0x320>
 800bf16:	4613      	mov	r3, r2
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4642      	mov	r2, r8
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	47b8      	blx	r7
 800bf20:	3001      	adds	r0, #1
 800bf22:	d1bf      	bne.n	800bea4 <_printf_float+0x2d4>
 800bf24:	e6a2      	b.n	800bc6c <_printf_float+0x9c>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	9204      	str	r2, [sp, #16]
 800bf2e:	47b8      	blx	r7
 800bf30:	3001      	adds	r0, #1
 800bf32:	f43f ae9b 	beq.w	800bc6c <_printf_float+0x9c>
 800bf36:	9b05      	ldr	r3, [sp, #20]
 800bf38:	9a04      	ldr	r2, [sp, #16]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	9305      	str	r3, [sp, #20]
 800bf3e:	e7b7      	b.n	800beb0 <_printf_float+0x2e0>
 800bf40:	4653      	mov	r3, sl
 800bf42:	465a      	mov	r2, fp
 800bf44:	4631      	mov	r1, r6
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b8      	blx	r7
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	d1be      	bne.n	800becc <_printf_float+0x2fc>
 800bf4e:	e68d      	b.n	800bc6c <_printf_float+0x9c>
 800bf50:	9a04      	ldr	r2, [sp, #16]
 800bf52:	464b      	mov	r3, r9
 800bf54:	4442      	add	r2, r8
 800bf56:	4631      	mov	r1, r6
 800bf58:	4628      	mov	r0, r5
 800bf5a:	47b8      	blx	r7
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	d1c1      	bne.n	800bee4 <_printf_float+0x314>
 800bf60:	e684      	b.n	800bc6c <_printf_float+0x9c>
 800bf62:	9a08      	ldr	r2, [sp, #32]
 800bf64:	2a01      	cmp	r2, #1
 800bf66:	dc01      	bgt.n	800bf6c <_printf_float+0x39c>
 800bf68:	07db      	lsls	r3, r3, #31
 800bf6a:	d537      	bpl.n	800bfdc <_printf_float+0x40c>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	4642      	mov	r2, r8
 800bf70:	4631      	mov	r1, r6
 800bf72:	4628      	mov	r0, r5
 800bf74:	47b8      	blx	r7
 800bf76:	3001      	adds	r0, #1
 800bf78:	f43f ae78 	beq.w	800bc6c <_printf_float+0x9c>
 800bf7c:	4653      	mov	r3, sl
 800bf7e:	465a      	mov	r2, fp
 800bf80:	4631      	mov	r1, r6
 800bf82:	4628      	mov	r0, r5
 800bf84:	47b8      	blx	r7
 800bf86:	3001      	adds	r0, #1
 800bf88:	f43f ae70 	beq.w	800bc6c <_printf_float+0x9c>
 800bf8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bf90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf98:	d01b      	beq.n	800bfd2 <_printf_float+0x402>
 800bf9a:	9b08      	ldr	r3, [sp, #32]
 800bf9c:	f108 0201 	add.w	r2, r8, #1
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	47b8      	blx	r7
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d10e      	bne.n	800bfca <_printf_float+0x3fa>
 800bfac:	e65e      	b.n	800bc6c <_printf_float+0x9c>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	464a      	mov	r2, r9
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b8      	blx	r7
 800bfb8:	3001      	adds	r0, #1
 800bfba:	f43f ae57 	beq.w	800bc6c <_printf_float+0x9c>
 800bfbe:	f108 0801 	add.w	r8, r8, #1
 800bfc2:	9b08      	ldr	r3, [sp, #32]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	4543      	cmp	r3, r8
 800bfc8:	dcf1      	bgt.n	800bfae <_printf_float+0x3de>
 800bfca:	9b04      	ldr	r3, [sp, #16]
 800bfcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bfd0:	e6db      	b.n	800bd8a <_printf_float+0x1ba>
 800bfd2:	f04f 0800 	mov.w	r8, #0
 800bfd6:	f104 091a 	add.w	r9, r4, #26
 800bfda:	e7f2      	b.n	800bfc2 <_printf_float+0x3f2>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	4642      	mov	r2, r8
 800bfe0:	e7df      	b.n	800bfa2 <_printf_float+0x3d2>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	464a      	mov	r2, r9
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	4628      	mov	r0, r5
 800bfea:	47b8      	blx	r7
 800bfec:	3001      	adds	r0, #1
 800bfee:	f43f ae3d 	beq.w	800bc6c <_printf_float+0x9c>
 800bff2:	f108 0801 	add.w	r8, r8, #1
 800bff6:	68e3      	ldr	r3, [r4, #12]
 800bff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bffa:	1a5b      	subs	r3, r3, r1
 800bffc:	4543      	cmp	r3, r8
 800bffe:	dcf0      	bgt.n	800bfe2 <_printf_float+0x412>
 800c000:	e6f7      	b.n	800bdf2 <_printf_float+0x222>
 800c002:	f04f 0800 	mov.w	r8, #0
 800c006:	f104 0919 	add.w	r9, r4, #25
 800c00a:	e7f4      	b.n	800bff6 <_printf_float+0x426>

0800c00c <_printf_common>:
 800c00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c010:	4616      	mov	r6, r2
 800c012:	4699      	mov	r9, r3
 800c014:	688a      	ldr	r2, [r1, #8]
 800c016:	690b      	ldr	r3, [r1, #16]
 800c018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c01c:	4293      	cmp	r3, r2
 800c01e:	bfb8      	it	lt
 800c020:	4613      	movlt	r3, r2
 800c022:	6033      	str	r3, [r6, #0]
 800c024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c028:	4607      	mov	r7, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	b10a      	cbz	r2, 800c032 <_printf_common+0x26>
 800c02e:	3301      	adds	r3, #1
 800c030:	6033      	str	r3, [r6, #0]
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	0699      	lsls	r1, r3, #26
 800c036:	bf42      	ittt	mi
 800c038:	6833      	ldrmi	r3, [r6, #0]
 800c03a:	3302      	addmi	r3, #2
 800c03c:	6033      	strmi	r3, [r6, #0]
 800c03e:	6825      	ldr	r5, [r4, #0]
 800c040:	f015 0506 	ands.w	r5, r5, #6
 800c044:	d106      	bne.n	800c054 <_printf_common+0x48>
 800c046:	f104 0a19 	add.w	sl, r4, #25
 800c04a:	68e3      	ldr	r3, [r4, #12]
 800c04c:	6832      	ldr	r2, [r6, #0]
 800c04e:	1a9b      	subs	r3, r3, r2
 800c050:	42ab      	cmp	r3, r5
 800c052:	dc26      	bgt.n	800c0a2 <_printf_common+0x96>
 800c054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c058:	1e13      	subs	r3, r2, #0
 800c05a:	6822      	ldr	r2, [r4, #0]
 800c05c:	bf18      	it	ne
 800c05e:	2301      	movne	r3, #1
 800c060:	0692      	lsls	r2, r2, #26
 800c062:	d42b      	bmi.n	800c0bc <_printf_common+0xb0>
 800c064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c068:	4649      	mov	r1, r9
 800c06a:	4638      	mov	r0, r7
 800c06c:	47c0      	blx	r8
 800c06e:	3001      	adds	r0, #1
 800c070:	d01e      	beq.n	800c0b0 <_printf_common+0xa4>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	68e5      	ldr	r5, [r4, #12]
 800c076:	6832      	ldr	r2, [r6, #0]
 800c078:	f003 0306 	and.w	r3, r3, #6
 800c07c:	2b04      	cmp	r3, #4
 800c07e:	bf08      	it	eq
 800c080:	1aad      	subeq	r5, r5, r2
 800c082:	68a3      	ldr	r3, [r4, #8]
 800c084:	6922      	ldr	r2, [r4, #16]
 800c086:	bf0c      	ite	eq
 800c088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c08c:	2500      	movne	r5, #0
 800c08e:	4293      	cmp	r3, r2
 800c090:	bfc4      	itt	gt
 800c092:	1a9b      	subgt	r3, r3, r2
 800c094:	18ed      	addgt	r5, r5, r3
 800c096:	2600      	movs	r6, #0
 800c098:	341a      	adds	r4, #26
 800c09a:	42b5      	cmp	r5, r6
 800c09c:	d11a      	bne.n	800c0d4 <_printf_common+0xc8>
 800c09e:	2000      	movs	r0, #0
 800c0a0:	e008      	b.n	800c0b4 <_printf_common+0xa8>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	4652      	mov	r2, sl
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	47c0      	blx	r8
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	d103      	bne.n	800c0b8 <_printf_common+0xac>
 800c0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b8:	3501      	adds	r5, #1
 800c0ba:	e7c6      	b.n	800c04a <_printf_common+0x3e>
 800c0bc:	18e1      	adds	r1, r4, r3
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	2030      	movs	r0, #48	; 0x30
 800c0c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0c6:	4422      	add	r2, r4
 800c0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0d0:	3302      	adds	r3, #2
 800c0d2:	e7c7      	b.n	800c064 <_printf_common+0x58>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	4622      	mov	r2, r4
 800c0d8:	4649      	mov	r1, r9
 800c0da:	4638      	mov	r0, r7
 800c0dc:	47c0      	blx	r8
 800c0de:	3001      	adds	r0, #1
 800c0e0:	d0e6      	beq.n	800c0b0 <_printf_common+0xa4>
 800c0e2:	3601      	adds	r6, #1
 800c0e4:	e7d9      	b.n	800c09a <_printf_common+0x8e>
	...

0800c0e8 <_printf_i>:
 800c0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	4691      	mov	r9, r2
 800c0f0:	7e27      	ldrb	r7, [r4, #24]
 800c0f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c0f4:	2f78      	cmp	r7, #120	; 0x78
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	469a      	mov	sl, r3
 800c0fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0fe:	d807      	bhi.n	800c110 <_printf_i+0x28>
 800c100:	2f62      	cmp	r7, #98	; 0x62
 800c102:	d80a      	bhi.n	800c11a <_printf_i+0x32>
 800c104:	2f00      	cmp	r7, #0
 800c106:	f000 80d8 	beq.w	800c2ba <_printf_i+0x1d2>
 800c10a:	2f58      	cmp	r7, #88	; 0x58
 800c10c:	f000 80a3 	beq.w	800c256 <_printf_i+0x16e>
 800c110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c118:	e03a      	b.n	800c190 <_printf_i+0xa8>
 800c11a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c11e:	2b15      	cmp	r3, #21
 800c120:	d8f6      	bhi.n	800c110 <_printf_i+0x28>
 800c122:	a001      	add	r0, pc, #4	; (adr r0, 800c128 <_printf_i+0x40>)
 800c124:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c128:	0800c181 	.word	0x0800c181
 800c12c:	0800c195 	.word	0x0800c195
 800c130:	0800c111 	.word	0x0800c111
 800c134:	0800c111 	.word	0x0800c111
 800c138:	0800c111 	.word	0x0800c111
 800c13c:	0800c111 	.word	0x0800c111
 800c140:	0800c195 	.word	0x0800c195
 800c144:	0800c111 	.word	0x0800c111
 800c148:	0800c111 	.word	0x0800c111
 800c14c:	0800c111 	.word	0x0800c111
 800c150:	0800c111 	.word	0x0800c111
 800c154:	0800c2a1 	.word	0x0800c2a1
 800c158:	0800c1c5 	.word	0x0800c1c5
 800c15c:	0800c283 	.word	0x0800c283
 800c160:	0800c111 	.word	0x0800c111
 800c164:	0800c111 	.word	0x0800c111
 800c168:	0800c2c3 	.word	0x0800c2c3
 800c16c:	0800c111 	.word	0x0800c111
 800c170:	0800c1c5 	.word	0x0800c1c5
 800c174:	0800c111 	.word	0x0800c111
 800c178:	0800c111 	.word	0x0800c111
 800c17c:	0800c28b 	.word	0x0800c28b
 800c180:	680b      	ldr	r3, [r1, #0]
 800c182:	1d1a      	adds	r2, r3, #4
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	600a      	str	r2, [r1, #0]
 800c188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c18c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c190:	2301      	movs	r3, #1
 800c192:	e0a3      	b.n	800c2dc <_printf_i+0x1f4>
 800c194:	6825      	ldr	r5, [r4, #0]
 800c196:	6808      	ldr	r0, [r1, #0]
 800c198:	062e      	lsls	r6, r5, #24
 800c19a:	f100 0304 	add.w	r3, r0, #4
 800c19e:	d50a      	bpl.n	800c1b6 <_printf_i+0xce>
 800c1a0:	6805      	ldr	r5, [r0, #0]
 800c1a2:	600b      	str	r3, [r1, #0]
 800c1a4:	2d00      	cmp	r5, #0
 800c1a6:	da03      	bge.n	800c1b0 <_printf_i+0xc8>
 800c1a8:	232d      	movs	r3, #45	; 0x2d
 800c1aa:	426d      	negs	r5, r5
 800c1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1b0:	485e      	ldr	r0, [pc, #376]	; (800c32c <_printf_i+0x244>)
 800c1b2:	230a      	movs	r3, #10
 800c1b4:	e019      	b.n	800c1ea <_printf_i+0x102>
 800c1b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c1ba:	6805      	ldr	r5, [r0, #0]
 800c1bc:	600b      	str	r3, [r1, #0]
 800c1be:	bf18      	it	ne
 800c1c0:	b22d      	sxthne	r5, r5
 800c1c2:	e7ef      	b.n	800c1a4 <_printf_i+0xbc>
 800c1c4:	680b      	ldr	r3, [r1, #0]
 800c1c6:	6825      	ldr	r5, [r4, #0]
 800c1c8:	1d18      	adds	r0, r3, #4
 800c1ca:	6008      	str	r0, [r1, #0]
 800c1cc:	0628      	lsls	r0, r5, #24
 800c1ce:	d501      	bpl.n	800c1d4 <_printf_i+0xec>
 800c1d0:	681d      	ldr	r5, [r3, #0]
 800c1d2:	e002      	b.n	800c1da <_printf_i+0xf2>
 800c1d4:	0669      	lsls	r1, r5, #25
 800c1d6:	d5fb      	bpl.n	800c1d0 <_printf_i+0xe8>
 800c1d8:	881d      	ldrh	r5, [r3, #0]
 800c1da:	4854      	ldr	r0, [pc, #336]	; (800c32c <_printf_i+0x244>)
 800c1dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c1de:	bf0c      	ite	eq
 800c1e0:	2308      	moveq	r3, #8
 800c1e2:	230a      	movne	r3, #10
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1ea:	6866      	ldr	r6, [r4, #4]
 800c1ec:	60a6      	str	r6, [r4, #8]
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	bfa2      	ittt	ge
 800c1f2:	6821      	ldrge	r1, [r4, #0]
 800c1f4:	f021 0104 	bicge.w	r1, r1, #4
 800c1f8:	6021      	strge	r1, [r4, #0]
 800c1fa:	b90d      	cbnz	r5, 800c200 <_printf_i+0x118>
 800c1fc:	2e00      	cmp	r6, #0
 800c1fe:	d04d      	beq.n	800c29c <_printf_i+0x1b4>
 800c200:	4616      	mov	r6, r2
 800c202:	fbb5 f1f3 	udiv	r1, r5, r3
 800c206:	fb03 5711 	mls	r7, r3, r1, r5
 800c20a:	5dc7      	ldrb	r7, [r0, r7]
 800c20c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c210:	462f      	mov	r7, r5
 800c212:	42bb      	cmp	r3, r7
 800c214:	460d      	mov	r5, r1
 800c216:	d9f4      	bls.n	800c202 <_printf_i+0x11a>
 800c218:	2b08      	cmp	r3, #8
 800c21a:	d10b      	bne.n	800c234 <_printf_i+0x14c>
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	07df      	lsls	r7, r3, #31
 800c220:	d508      	bpl.n	800c234 <_printf_i+0x14c>
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	6861      	ldr	r1, [r4, #4]
 800c226:	4299      	cmp	r1, r3
 800c228:	bfde      	ittt	le
 800c22a:	2330      	movle	r3, #48	; 0x30
 800c22c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c230:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c234:	1b92      	subs	r2, r2, r6
 800c236:	6122      	str	r2, [r4, #16]
 800c238:	f8cd a000 	str.w	sl, [sp]
 800c23c:	464b      	mov	r3, r9
 800c23e:	aa03      	add	r2, sp, #12
 800c240:	4621      	mov	r1, r4
 800c242:	4640      	mov	r0, r8
 800c244:	f7ff fee2 	bl	800c00c <_printf_common>
 800c248:	3001      	adds	r0, #1
 800c24a:	d14c      	bne.n	800c2e6 <_printf_i+0x1fe>
 800c24c:	f04f 30ff 	mov.w	r0, #4294967295
 800c250:	b004      	add	sp, #16
 800c252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c256:	4835      	ldr	r0, [pc, #212]	; (800c32c <_printf_i+0x244>)
 800c258:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	680e      	ldr	r6, [r1, #0]
 800c260:	061f      	lsls	r7, r3, #24
 800c262:	f856 5b04 	ldr.w	r5, [r6], #4
 800c266:	600e      	str	r6, [r1, #0]
 800c268:	d514      	bpl.n	800c294 <_printf_i+0x1ac>
 800c26a:	07d9      	lsls	r1, r3, #31
 800c26c:	bf44      	itt	mi
 800c26e:	f043 0320 	orrmi.w	r3, r3, #32
 800c272:	6023      	strmi	r3, [r4, #0]
 800c274:	b91d      	cbnz	r5, 800c27e <_printf_i+0x196>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	f023 0320 	bic.w	r3, r3, #32
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	2310      	movs	r3, #16
 800c280:	e7b0      	b.n	800c1e4 <_printf_i+0xfc>
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	f043 0320 	orr.w	r3, r3, #32
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	2378      	movs	r3, #120	; 0x78
 800c28c:	4828      	ldr	r0, [pc, #160]	; (800c330 <_printf_i+0x248>)
 800c28e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c292:	e7e3      	b.n	800c25c <_printf_i+0x174>
 800c294:	065e      	lsls	r6, r3, #25
 800c296:	bf48      	it	mi
 800c298:	b2ad      	uxthmi	r5, r5
 800c29a:	e7e6      	b.n	800c26a <_printf_i+0x182>
 800c29c:	4616      	mov	r6, r2
 800c29e:	e7bb      	b.n	800c218 <_printf_i+0x130>
 800c2a0:	680b      	ldr	r3, [r1, #0]
 800c2a2:	6826      	ldr	r6, [r4, #0]
 800c2a4:	6960      	ldr	r0, [r4, #20]
 800c2a6:	1d1d      	adds	r5, r3, #4
 800c2a8:	600d      	str	r5, [r1, #0]
 800c2aa:	0635      	lsls	r5, r6, #24
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	d501      	bpl.n	800c2b4 <_printf_i+0x1cc>
 800c2b0:	6018      	str	r0, [r3, #0]
 800c2b2:	e002      	b.n	800c2ba <_printf_i+0x1d2>
 800c2b4:	0671      	lsls	r1, r6, #25
 800c2b6:	d5fb      	bpl.n	800c2b0 <_printf_i+0x1c8>
 800c2b8:	8018      	strh	r0, [r3, #0]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	6123      	str	r3, [r4, #16]
 800c2be:	4616      	mov	r6, r2
 800c2c0:	e7ba      	b.n	800c238 <_printf_i+0x150>
 800c2c2:	680b      	ldr	r3, [r1, #0]
 800c2c4:	1d1a      	adds	r2, r3, #4
 800c2c6:	600a      	str	r2, [r1, #0]
 800c2c8:	681e      	ldr	r6, [r3, #0]
 800c2ca:	6862      	ldr	r2, [r4, #4]
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f7f3 ffbe 	bl	8000250 <memchr>
 800c2d4:	b108      	cbz	r0, 800c2da <_printf_i+0x1f2>
 800c2d6:	1b80      	subs	r0, r0, r6
 800c2d8:	6060      	str	r0, [r4, #4]
 800c2da:	6863      	ldr	r3, [r4, #4]
 800c2dc:	6123      	str	r3, [r4, #16]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2e4:	e7a8      	b.n	800c238 <_printf_i+0x150>
 800c2e6:	6923      	ldr	r3, [r4, #16]
 800c2e8:	4632      	mov	r2, r6
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	4640      	mov	r0, r8
 800c2ee:	47d0      	blx	sl
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	d0ab      	beq.n	800c24c <_printf_i+0x164>
 800c2f4:	6823      	ldr	r3, [r4, #0]
 800c2f6:	079b      	lsls	r3, r3, #30
 800c2f8:	d413      	bmi.n	800c322 <_printf_i+0x23a>
 800c2fa:	68e0      	ldr	r0, [r4, #12]
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	4298      	cmp	r0, r3
 800c300:	bfb8      	it	lt
 800c302:	4618      	movlt	r0, r3
 800c304:	e7a4      	b.n	800c250 <_printf_i+0x168>
 800c306:	2301      	movs	r3, #1
 800c308:	4632      	mov	r2, r6
 800c30a:	4649      	mov	r1, r9
 800c30c:	4640      	mov	r0, r8
 800c30e:	47d0      	blx	sl
 800c310:	3001      	adds	r0, #1
 800c312:	d09b      	beq.n	800c24c <_printf_i+0x164>
 800c314:	3501      	adds	r5, #1
 800c316:	68e3      	ldr	r3, [r4, #12]
 800c318:	9903      	ldr	r1, [sp, #12]
 800c31a:	1a5b      	subs	r3, r3, r1
 800c31c:	42ab      	cmp	r3, r5
 800c31e:	dcf2      	bgt.n	800c306 <_printf_i+0x21e>
 800c320:	e7eb      	b.n	800c2fa <_printf_i+0x212>
 800c322:	2500      	movs	r5, #0
 800c324:	f104 0619 	add.w	r6, r4, #25
 800c328:	e7f5      	b.n	800c316 <_printf_i+0x22e>
 800c32a:	bf00      	nop
 800c32c:	0800eac6 	.word	0x0800eac6
 800c330:	0800ead7 	.word	0x0800ead7

0800c334 <siprintf>:
 800c334:	b40e      	push	{r1, r2, r3}
 800c336:	b500      	push	{lr}
 800c338:	b09c      	sub	sp, #112	; 0x70
 800c33a:	ab1d      	add	r3, sp, #116	; 0x74
 800c33c:	9002      	str	r0, [sp, #8]
 800c33e:	9006      	str	r0, [sp, #24]
 800c340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c344:	4809      	ldr	r0, [pc, #36]	; (800c36c <siprintf+0x38>)
 800c346:	9107      	str	r1, [sp, #28]
 800c348:	9104      	str	r1, [sp, #16]
 800c34a:	4909      	ldr	r1, [pc, #36]	; (800c370 <siprintf+0x3c>)
 800c34c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c350:	9105      	str	r1, [sp, #20]
 800c352:	6800      	ldr	r0, [r0, #0]
 800c354:	9301      	str	r3, [sp, #4]
 800c356:	a902      	add	r1, sp, #8
 800c358:	f001 faca 	bl	800d8f0 <_svfiprintf_r>
 800c35c:	9b02      	ldr	r3, [sp, #8]
 800c35e:	2200      	movs	r2, #0
 800c360:	701a      	strb	r2, [r3, #0]
 800c362:	b01c      	add	sp, #112	; 0x70
 800c364:	f85d eb04 	ldr.w	lr, [sp], #4
 800c368:	b003      	add	sp, #12
 800c36a:	4770      	bx	lr
 800c36c:	200000dc 	.word	0x200000dc
 800c370:	ffff0208 	.word	0xffff0208

0800c374 <quorem>:
 800c374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c378:	6903      	ldr	r3, [r0, #16]
 800c37a:	690c      	ldr	r4, [r1, #16]
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	4607      	mov	r7, r0
 800c380:	f2c0 8081 	blt.w	800c486 <quorem+0x112>
 800c384:	3c01      	subs	r4, #1
 800c386:	f101 0814 	add.w	r8, r1, #20
 800c38a:	f100 0514 	add.w	r5, r0, #20
 800c38e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c39c:	3301      	adds	r3, #1
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c3a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3ac:	d331      	bcc.n	800c412 <quorem+0x9e>
 800c3ae:	f04f 0e00 	mov.w	lr, #0
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	46ac      	mov	ip, r5
 800c3b6:	46f2      	mov	sl, lr
 800c3b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3bc:	b293      	uxth	r3, r2
 800c3be:	fb06 e303 	mla	r3, r6, r3, lr
 800c3c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	ebaa 0303 	sub.w	r3, sl, r3
 800c3cc:	0c12      	lsrs	r2, r2, #16
 800c3ce:	f8dc a000 	ldr.w	sl, [ip]
 800c3d2:	fb06 e202 	mla	r2, r6, r2, lr
 800c3d6:	fa13 f38a 	uxtah	r3, r3, sl
 800c3da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3de:	fa1f fa82 	uxth.w	sl, r2
 800c3e2:	f8dc 2000 	ldr.w	r2, [ip]
 800c3e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c3ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3f4:	4581      	cmp	r9, r0
 800c3f6:	f84c 3b04 	str.w	r3, [ip], #4
 800c3fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3fe:	d2db      	bcs.n	800c3b8 <quorem+0x44>
 800c400:	f855 300b 	ldr.w	r3, [r5, fp]
 800c404:	b92b      	cbnz	r3, 800c412 <quorem+0x9e>
 800c406:	9b01      	ldr	r3, [sp, #4]
 800c408:	3b04      	subs	r3, #4
 800c40a:	429d      	cmp	r5, r3
 800c40c:	461a      	mov	r2, r3
 800c40e:	d32e      	bcc.n	800c46e <quorem+0xfa>
 800c410:	613c      	str	r4, [r7, #16]
 800c412:	4638      	mov	r0, r7
 800c414:	f001 f856 	bl	800d4c4 <__mcmp>
 800c418:	2800      	cmp	r0, #0
 800c41a:	db24      	blt.n	800c466 <quorem+0xf2>
 800c41c:	3601      	adds	r6, #1
 800c41e:	4628      	mov	r0, r5
 800c420:	f04f 0c00 	mov.w	ip, #0
 800c424:	f858 2b04 	ldr.w	r2, [r8], #4
 800c428:	f8d0 e000 	ldr.w	lr, [r0]
 800c42c:	b293      	uxth	r3, r2
 800c42e:	ebac 0303 	sub.w	r3, ip, r3
 800c432:	0c12      	lsrs	r2, r2, #16
 800c434:	fa13 f38e 	uxtah	r3, r3, lr
 800c438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c440:	b29b      	uxth	r3, r3
 800c442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c446:	45c1      	cmp	r9, r8
 800c448:	f840 3b04 	str.w	r3, [r0], #4
 800c44c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c450:	d2e8      	bcs.n	800c424 <quorem+0xb0>
 800c452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c45a:	b922      	cbnz	r2, 800c466 <quorem+0xf2>
 800c45c:	3b04      	subs	r3, #4
 800c45e:	429d      	cmp	r5, r3
 800c460:	461a      	mov	r2, r3
 800c462:	d30a      	bcc.n	800c47a <quorem+0x106>
 800c464:	613c      	str	r4, [r7, #16]
 800c466:	4630      	mov	r0, r6
 800c468:	b003      	add	sp, #12
 800c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46e:	6812      	ldr	r2, [r2, #0]
 800c470:	3b04      	subs	r3, #4
 800c472:	2a00      	cmp	r2, #0
 800c474:	d1cc      	bne.n	800c410 <quorem+0x9c>
 800c476:	3c01      	subs	r4, #1
 800c478:	e7c7      	b.n	800c40a <quorem+0x96>
 800c47a:	6812      	ldr	r2, [r2, #0]
 800c47c:	3b04      	subs	r3, #4
 800c47e:	2a00      	cmp	r2, #0
 800c480:	d1f0      	bne.n	800c464 <quorem+0xf0>
 800c482:	3c01      	subs	r4, #1
 800c484:	e7eb      	b.n	800c45e <quorem+0xea>
 800c486:	2000      	movs	r0, #0
 800c488:	e7ee      	b.n	800c468 <quorem+0xf4>
 800c48a:	0000      	movs	r0, r0
 800c48c:	0000      	movs	r0, r0
	...

0800c490 <_dtoa_r>:
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	ec59 8b10 	vmov	r8, r9, d0
 800c498:	b095      	sub	sp, #84	; 0x54
 800c49a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c49c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c49e:	9107      	str	r1, [sp, #28]
 800c4a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4a8:	9310      	str	r3, [sp, #64]	; 0x40
 800c4aa:	b975      	cbnz	r5, 800c4ca <_dtoa_r+0x3a>
 800c4ac:	2010      	movs	r0, #16
 800c4ae:	f000 fd75 	bl	800cf9c <malloc>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	6270      	str	r0, [r6, #36]	; 0x24
 800c4b6:	b920      	cbnz	r0, 800c4c2 <_dtoa_r+0x32>
 800c4b8:	4bab      	ldr	r3, [pc, #684]	; (800c768 <_dtoa_r+0x2d8>)
 800c4ba:	21ea      	movs	r1, #234	; 0xea
 800c4bc:	48ab      	ldr	r0, [pc, #684]	; (800c76c <_dtoa_r+0x2dc>)
 800c4be:	f001 fb27 	bl	800db10 <__assert_func>
 800c4c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4c6:	6005      	str	r5, [r0, #0]
 800c4c8:	60c5      	str	r5, [r0, #12]
 800c4ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c4cc:	6819      	ldr	r1, [r3, #0]
 800c4ce:	b151      	cbz	r1, 800c4e6 <_dtoa_r+0x56>
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	604a      	str	r2, [r1, #4]
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	4093      	lsls	r3, r2
 800c4d8:	608b      	str	r3, [r1, #8]
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f000 fdb4 	bl	800d048 <_Bfree>
 800c4e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	f1b9 0300 	subs.w	r3, r9, #0
 800c4ea:	bfbb      	ittet	lt
 800c4ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c4f0:	9303      	strlt	r3, [sp, #12]
 800c4f2:	2300      	movge	r3, #0
 800c4f4:	2201      	movlt	r2, #1
 800c4f6:	bfac      	ite	ge
 800c4f8:	6023      	strge	r3, [r4, #0]
 800c4fa:	6022      	strlt	r2, [r4, #0]
 800c4fc:	4b9c      	ldr	r3, [pc, #624]	; (800c770 <_dtoa_r+0x2e0>)
 800c4fe:	9c03      	ldr	r4, [sp, #12]
 800c500:	43a3      	bics	r3, r4
 800c502:	d11a      	bne.n	800c53a <_dtoa_r+0xaa>
 800c504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c506:	f242 730f 	movw	r3, #9999	; 0x270f
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c510:	ea53 0308 	orrs.w	r3, r3, r8
 800c514:	f000 8512 	beq.w	800cf3c <_dtoa_r+0xaac>
 800c518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c51a:	b953      	cbnz	r3, 800c532 <_dtoa_r+0xa2>
 800c51c:	4b95      	ldr	r3, [pc, #596]	; (800c774 <_dtoa_r+0x2e4>)
 800c51e:	e01f      	b.n	800c560 <_dtoa_r+0xd0>
 800c520:	4b95      	ldr	r3, [pc, #596]	; (800c778 <_dtoa_r+0x2e8>)
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	3308      	adds	r3, #8
 800c526:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	9800      	ldr	r0, [sp, #0]
 800c52c:	b015      	add	sp, #84	; 0x54
 800c52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c532:	4b90      	ldr	r3, [pc, #576]	; (800c774 <_dtoa_r+0x2e4>)
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	3303      	adds	r3, #3
 800c538:	e7f5      	b.n	800c526 <_dtoa_r+0x96>
 800c53a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c53e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c546:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c54a:	d10b      	bne.n	800c564 <_dtoa_r+0xd4>
 800c54c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c54e:	2301      	movs	r3, #1
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 84ee 	beq.w	800cf36 <_dtoa_r+0xaa6>
 800c55a:	4888      	ldr	r0, [pc, #544]	; (800c77c <_dtoa_r+0x2ec>)
 800c55c:	6018      	str	r0, [r3, #0]
 800c55e:	1e43      	subs	r3, r0, #1
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	e7e2      	b.n	800c52a <_dtoa_r+0x9a>
 800c564:	a913      	add	r1, sp, #76	; 0x4c
 800c566:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c56a:	aa12      	add	r2, sp, #72	; 0x48
 800c56c:	4630      	mov	r0, r6
 800c56e:	f001 f84d 	bl	800d60c <__d2b>
 800c572:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c576:	4605      	mov	r5, r0
 800c578:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c57a:	2900      	cmp	r1, #0
 800c57c:	d047      	beq.n	800c60e <_dtoa_r+0x17e>
 800c57e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c580:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c588:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c58c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c590:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c594:	2400      	movs	r4, #0
 800c596:	ec43 2b16 	vmov	d6, r2, r3
 800c59a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c59e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800c750 <_dtoa_r+0x2c0>
 800c5a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c5a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800c758 <_dtoa_r+0x2c8>
 800c5aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c5ae:	eeb0 7b46 	vmov.f64	d7, d6
 800c5b2:	ee06 1a90 	vmov	s13, r1
 800c5b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800c5ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c760 <_dtoa_r+0x2d0>
 800c5be:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c5c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c5c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ce:	ee16 ba90 	vmov	fp, s13
 800c5d2:	9411      	str	r4, [sp, #68]	; 0x44
 800c5d4:	d508      	bpl.n	800c5e8 <_dtoa_r+0x158>
 800c5d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c5da:	eeb4 6b47 	vcmp.f64	d6, d7
 800c5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e2:	bf18      	it	ne
 800c5e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c5e8:	f1bb 0f16 	cmp.w	fp, #22
 800c5ec:	d832      	bhi.n	800c654 <_dtoa_r+0x1c4>
 800c5ee:	4b64      	ldr	r3, [pc, #400]	; (800c780 <_dtoa_r+0x2f0>)
 800c5f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5f4:	ed93 7b00 	vldr	d7, [r3]
 800c5f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c5fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c604:	d501      	bpl.n	800c60a <_dtoa_r+0x17a>
 800c606:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c60a:	2300      	movs	r3, #0
 800c60c:	e023      	b.n	800c656 <_dtoa_r+0x1c6>
 800c60e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c610:	4401      	add	r1, r0
 800c612:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c616:	2b20      	cmp	r3, #32
 800c618:	bfc3      	ittte	gt
 800c61a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c61e:	fa04 f303 	lslgt.w	r3, r4, r3
 800c622:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c626:	f1c3 0320 	rsble	r3, r3, #32
 800c62a:	bfc6      	itte	gt
 800c62c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c630:	ea43 0308 	orrgt.w	r3, r3, r8
 800c634:	fa08 f303 	lslle.w	r3, r8, r3
 800c638:	ee07 3a90 	vmov	s15, r3
 800c63c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c640:	3901      	subs	r1, #1
 800c642:	ed8d 7b00 	vstr	d7, [sp]
 800c646:	9c01      	ldr	r4, [sp, #4]
 800c648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c64c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c650:	2401      	movs	r4, #1
 800c652:	e7a0      	b.n	800c596 <_dtoa_r+0x106>
 800c654:	2301      	movs	r3, #1
 800c656:	930f      	str	r3, [sp, #60]	; 0x3c
 800c658:	1a43      	subs	r3, r0, r1
 800c65a:	1e5a      	subs	r2, r3, #1
 800c65c:	bf45      	ittet	mi
 800c65e:	f1c3 0301 	rsbmi	r3, r3, #1
 800c662:	9305      	strmi	r3, [sp, #20]
 800c664:	2300      	movpl	r3, #0
 800c666:	2300      	movmi	r3, #0
 800c668:	9206      	str	r2, [sp, #24]
 800c66a:	bf54      	ite	pl
 800c66c:	9305      	strpl	r3, [sp, #20]
 800c66e:	9306      	strmi	r3, [sp, #24]
 800c670:	f1bb 0f00 	cmp.w	fp, #0
 800c674:	db18      	blt.n	800c6a8 <_dtoa_r+0x218>
 800c676:	9b06      	ldr	r3, [sp, #24]
 800c678:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800c67c:	445b      	add	r3, fp
 800c67e:	9306      	str	r3, [sp, #24]
 800c680:	2300      	movs	r3, #0
 800c682:	9a07      	ldr	r2, [sp, #28]
 800c684:	2a09      	cmp	r2, #9
 800c686:	d849      	bhi.n	800c71c <_dtoa_r+0x28c>
 800c688:	2a05      	cmp	r2, #5
 800c68a:	bfc4      	itt	gt
 800c68c:	3a04      	subgt	r2, #4
 800c68e:	9207      	strgt	r2, [sp, #28]
 800c690:	9a07      	ldr	r2, [sp, #28]
 800c692:	f1a2 0202 	sub.w	r2, r2, #2
 800c696:	bfcc      	ite	gt
 800c698:	2400      	movgt	r4, #0
 800c69a:	2401      	movle	r4, #1
 800c69c:	2a03      	cmp	r2, #3
 800c69e:	d848      	bhi.n	800c732 <_dtoa_r+0x2a2>
 800c6a0:	e8df f002 	tbb	[pc, r2]
 800c6a4:	3a2c2e0b 	.word	0x3a2c2e0b
 800c6a8:	9b05      	ldr	r3, [sp, #20]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	eba3 030b 	sub.w	r3, r3, fp
 800c6b0:	9305      	str	r3, [sp, #20]
 800c6b2:	920e      	str	r2, [sp, #56]	; 0x38
 800c6b4:	f1cb 0300 	rsb	r3, fp, #0
 800c6b8:	e7e3      	b.n	800c682 <_dtoa_r+0x1f2>
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	9208      	str	r2, [sp, #32]
 800c6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6c0:	2a00      	cmp	r2, #0
 800c6c2:	dc39      	bgt.n	800c738 <_dtoa_r+0x2a8>
 800c6c4:	f04f 0a01 	mov.w	sl, #1
 800c6c8:	46d1      	mov	r9, sl
 800c6ca:	4652      	mov	r2, sl
 800c6cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c6d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	6079      	str	r1, [r7, #4]
 800c6d6:	2004      	movs	r0, #4
 800c6d8:	f100 0c14 	add.w	ip, r0, #20
 800c6dc:	4594      	cmp	ip, r2
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	d92f      	bls.n	800c742 <_dtoa_r+0x2b2>
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	930c      	str	r3, [sp, #48]	; 0x30
 800c6e6:	f000 fc6f 	bl	800cfc8 <_Balloc>
 800c6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6ec:	9000      	str	r0, [sp, #0]
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d149      	bne.n	800c788 <_dtoa_r+0x2f8>
 800c6f4:	4b23      	ldr	r3, [pc, #140]	; (800c784 <_dtoa_r+0x2f4>)
 800c6f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c6fa:	e6df      	b.n	800c4bc <_dtoa_r+0x2c>
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	e7dd      	b.n	800c6bc <_dtoa_r+0x22c>
 800c700:	2200      	movs	r2, #0
 800c702:	9208      	str	r2, [sp, #32]
 800c704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c706:	eb0b 0a02 	add.w	sl, fp, r2
 800c70a:	f10a 0901 	add.w	r9, sl, #1
 800c70e:	464a      	mov	r2, r9
 800c710:	2a01      	cmp	r2, #1
 800c712:	bfb8      	it	lt
 800c714:	2201      	movlt	r2, #1
 800c716:	e7db      	b.n	800c6d0 <_dtoa_r+0x240>
 800c718:	2201      	movs	r2, #1
 800c71a:	e7f2      	b.n	800c702 <_dtoa_r+0x272>
 800c71c:	2401      	movs	r4, #1
 800c71e:	2200      	movs	r2, #0
 800c720:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c724:	f04f 3aff 	mov.w	sl, #4294967295
 800c728:	2100      	movs	r1, #0
 800c72a:	46d1      	mov	r9, sl
 800c72c:	2212      	movs	r2, #18
 800c72e:	9109      	str	r1, [sp, #36]	; 0x24
 800c730:	e7ce      	b.n	800c6d0 <_dtoa_r+0x240>
 800c732:	2201      	movs	r2, #1
 800c734:	9208      	str	r2, [sp, #32]
 800c736:	e7f5      	b.n	800c724 <_dtoa_r+0x294>
 800c738:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800c73c:	46d1      	mov	r9, sl
 800c73e:	4652      	mov	r2, sl
 800c740:	e7c6      	b.n	800c6d0 <_dtoa_r+0x240>
 800c742:	3101      	adds	r1, #1
 800c744:	6079      	str	r1, [r7, #4]
 800c746:	0040      	lsls	r0, r0, #1
 800c748:	e7c6      	b.n	800c6d8 <_dtoa_r+0x248>
 800c74a:	bf00      	nop
 800c74c:	f3af 8000 	nop.w
 800c750:	636f4361 	.word	0x636f4361
 800c754:	3fd287a7 	.word	0x3fd287a7
 800c758:	8b60c8b3 	.word	0x8b60c8b3
 800c75c:	3fc68a28 	.word	0x3fc68a28
 800c760:	509f79fb 	.word	0x509f79fb
 800c764:	3fd34413 	.word	0x3fd34413
 800c768:	0800eaf5 	.word	0x0800eaf5
 800c76c:	0800eb0c 	.word	0x0800eb0c
 800c770:	7ff00000 	.word	0x7ff00000
 800c774:	0800eaf1 	.word	0x0800eaf1
 800c778:	0800eae8 	.word	0x0800eae8
 800c77c:	0800eac5 	.word	0x0800eac5
 800c780:	0800ec08 	.word	0x0800ec08
 800c784:	0800eb6b 	.word	0x0800eb6b
 800c788:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c78a:	9900      	ldr	r1, [sp, #0]
 800c78c:	6011      	str	r1, [r2, #0]
 800c78e:	f1b9 0f0e 	cmp.w	r9, #14
 800c792:	d872      	bhi.n	800c87a <_dtoa_r+0x3ea>
 800c794:	2c00      	cmp	r4, #0
 800c796:	d070      	beq.n	800c87a <_dtoa_r+0x3ea>
 800c798:	f1bb 0f00 	cmp.w	fp, #0
 800c79c:	f340 80a6 	ble.w	800c8ec <_dtoa_r+0x45c>
 800c7a0:	49ca      	ldr	r1, [pc, #808]	; (800cacc <_dtoa_r+0x63c>)
 800c7a2:	f00b 020f 	and.w	r2, fp, #15
 800c7a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c7aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c7ae:	ed92 7b00 	vldr	d7, [r2]
 800c7b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c7b6:	f000 808d 	beq.w	800c8d4 <_dtoa_r+0x444>
 800c7ba:	4ac5      	ldr	r2, [pc, #788]	; (800cad0 <_dtoa_r+0x640>)
 800c7bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c7c0:	ed92 6b08 	vldr	d6, [r2, #32]
 800c7c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800c7c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c7cc:	f001 010f 	and.w	r1, r1, #15
 800c7d0:	2203      	movs	r2, #3
 800c7d2:	48bf      	ldr	r0, [pc, #764]	; (800cad0 <_dtoa_r+0x640>)
 800c7d4:	2900      	cmp	r1, #0
 800c7d6:	d17f      	bne.n	800c8d8 <_dtoa_r+0x448>
 800c7d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c7dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c7e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c7e6:	2900      	cmp	r1, #0
 800c7e8:	f000 80b2 	beq.w	800c950 <_dtoa_r+0x4c0>
 800c7ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c7f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fc:	f140 80a8 	bpl.w	800c950 <_dtoa_r+0x4c0>
 800c800:	f1b9 0f00 	cmp.w	r9, #0
 800c804:	f000 80a4 	beq.w	800c950 <_dtoa_r+0x4c0>
 800c808:	f1ba 0f00 	cmp.w	sl, #0
 800c80c:	dd31      	ble.n	800c872 <_dtoa_r+0x3e2>
 800c80e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c812:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c816:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c81a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c81e:	3201      	adds	r2, #1
 800c820:	4650      	mov	r0, sl
 800c822:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c826:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c82a:	ee07 2a90 	vmov	s15, r2
 800c82e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c832:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c836:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c83a:	9c03      	ldr	r4, [sp, #12]
 800c83c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c840:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c844:	2800      	cmp	r0, #0
 800c846:	f040 8086 	bne.w	800c956 <_dtoa_r+0x4c6>
 800c84a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c84e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c852:	ec42 1b17 	vmov	d7, r1, r2
 800c856:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c85e:	f300 8272 	bgt.w	800cd46 <_dtoa_r+0x8b6>
 800c862:	eeb1 7b47 	vneg.f64	d7, d7
 800c866:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86e:	f100 8267 	bmi.w	800cd40 <_dtoa_r+0x8b0>
 800c872:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800c876:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c87a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c87c:	2a00      	cmp	r2, #0
 800c87e:	f2c0 8129 	blt.w	800cad4 <_dtoa_r+0x644>
 800c882:	f1bb 0f0e 	cmp.w	fp, #14
 800c886:	f300 8125 	bgt.w	800cad4 <_dtoa_r+0x644>
 800c88a:	4b90      	ldr	r3, [pc, #576]	; (800cacc <_dtoa_r+0x63c>)
 800c88c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c890:	ed93 6b00 	vldr	d6, [r3]
 800c894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c896:	2b00      	cmp	r3, #0
 800c898:	f280 80c3 	bge.w	800ca22 <_dtoa_r+0x592>
 800c89c:	f1b9 0f00 	cmp.w	r9, #0
 800c8a0:	f300 80bf 	bgt.w	800ca22 <_dtoa_r+0x592>
 800c8a4:	f040 824c 	bne.w	800cd40 <_dtoa_r+0x8b0>
 800c8a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c8ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c8b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8bc:	464c      	mov	r4, r9
 800c8be:	464f      	mov	r7, r9
 800c8c0:	f280 8222 	bge.w	800cd08 <_dtoa_r+0x878>
 800c8c4:	f8dd 8000 	ldr.w	r8, [sp]
 800c8c8:	2331      	movs	r3, #49	; 0x31
 800c8ca:	f808 3b01 	strb.w	r3, [r8], #1
 800c8ce:	f10b 0b01 	add.w	fp, fp, #1
 800c8d2:	e21e      	b.n	800cd12 <_dtoa_r+0x882>
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	e77c      	b.n	800c7d2 <_dtoa_r+0x342>
 800c8d8:	07cc      	lsls	r4, r1, #31
 800c8da:	d504      	bpl.n	800c8e6 <_dtoa_r+0x456>
 800c8dc:	ed90 6b00 	vldr	d6, [r0]
 800c8e0:	3201      	adds	r2, #1
 800c8e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8e6:	1049      	asrs	r1, r1, #1
 800c8e8:	3008      	adds	r0, #8
 800c8ea:	e773      	b.n	800c7d4 <_dtoa_r+0x344>
 800c8ec:	d02e      	beq.n	800c94c <_dtoa_r+0x4bc>
 800c8ee:	f1cb 0100 	rsb	r1, fp, #0
 800c8f2:	4a76      	ldr	r2, [pc, #472]	; (800cacc <_dtoa_r+0x63c>)
 800c8f4:	f001 000f 	and.w	r0, r1, #15
 800c8f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c8fc:	ed92 7b00 	vldr	d7, [r2]
 800c900:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c904:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c908:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c90c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800c910:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c914:	486e      	ldr	r0, [pc, #440]	; (800cad0 <_dtoa_r+0x640>)
 800c916:	1109      	asrs	r1, r1, #4
 800c918:	2400      	movs	r4, #0
 800c91a:	2202      	movs	r2, #2
 800c91c:	b939      	cbnz	r1, 800c92e <_dtoa_r+0x49e>
 800c91e:	2c00      	cmp	r4, #0
 800c920:	f43f af60 	beq.w	800c7e4 <_dtoa_r+0x354>
 800c924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c92c:	e75a      	b.n	800c7e4 <_dtoa_r+0x354>
 800c92e:	07cf      	lsls	r7, r1, #31
 800c930:	d509      	bpl.n	800c946 <_dtoa_r+0x4b6>
 800c932:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c936:	ed90 7b00 	vldr	d7, [r0]
 800c93a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c93e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c942:	3201      	adds	r2, #1
 800c944:	2401      	movs	r4, #1
 800c946:	1049      	asrs	r1, r1, #1
 800c948:	3008      	adds	r0, #8
 800c94a:	e7e7      	b.n	800c91c <_dtoa_r+0x48c>
 800c94c:	2202      	movs	r2, #2
 800c94e:	e749      	b.n	800c7e4 <_dtoa_r+0x354>
 800c950:	465f      	mov	r7, fp
 800c952:	4648      	mov	r0, r9
 800c954:	e765      	b.n	800c822 <_dtoa_r+0x392>
 800c956:	ec42 1b17 	vmov	d7, r1, r2
 800c95a:	4a5c      	ldr	r2, [pc, #368]	; (800cacc <_dtoa_r+0x63c>)
 800c95c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c960:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c964:	9a00      	ldr	r2, [sp, #0]
 800c966:	1814      	adds	r4, r2, r0
 800c968:	9a08      	ldr	r2, [sp, #32]
 800c96a:	b352      	cbz	r2, 800c9c2 <_dtoa_r+0x532>
 800c96c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c970:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c974:	f8dd 8000 	ldr.w	r8, [sp]
 800c978:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c97c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c980:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c984:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c988:	ee14 2a90 	vmov	r2, s9
 800c98c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c990:	3230      	adds	r2, #48	; 0x30
 800c992:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c996:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c99e:	f808 2b01 	strb.w	r2, [r8], #1
 800c9a2:	d439      	bmi.n	800ca18 <_dtoa_r+0x588>
 800c9a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c9a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b0:	d472      	bmi.n	800ca98 <_dtoa_r+0x608>
 800c9b2:	45a0      	cmp	r8, r4
 800c9b4:	f43f af5d 	beq.w	800c872 <_dtoa_r+0x3e2>
 800c9b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c9bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c9c0:	e7e0      	b.n	800c984 <_dtoa_r+0x4f4>
 800c9c2:	f8dd 8000 	ldr.w	r8, [sp]
 800c9c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c9d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c9d4:	ee14 2a90 	vmov	r2, s9
 800c9d8:	3230      	adds	r2, #48	; 0x30
 800c9da:	f808 2b01 	strb.w	r2, [r8], #1
 800c9de:	45a0      	cmp	r8, r4
 800c9e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c9e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c9e8:	d118      	bne.n	800ca1c <_dtoa_r+0x58c>
 800c9ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c9ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c9f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9fa:	dc4d      	bgt.n	800ca98 <_dtoa_r+0x608>
 800c9fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ca00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca08:	f57f af33 	bpl.w	800c872 <_dtoa_r+0x3e2>
 800ca0c:	4688      	mov	r8, r1
 800ca0e:	3901      	subs	r1, #1
 800ca10:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ca14:	2b30      	cmp	r3, #48	; 0x30
 800ca16:	d0f9      	beq.n	800ca0c <_dtoa_r+0x57c>
 800ca18:	46bb      	mov	fp, r7
 800ca1a:	e02a      	b.n	800ca72 <_dtoa_r+0x5e2>
 800ca1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ca20:	e7d6      	b.n	800c9d0 <_dtoa_r+0x540>
 800ca22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca26:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ca2a:	f8dd 8000 	ldr.w	r8, [sp]
 800ca2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ca32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ca36:	ee15 3a10 	vmov	r3, s10
 800ca3a:	3330      	adds	r3, #48	; 0x30
 800ca3c:	f808 3b01 	strb.w	r3, [r8], #1
 800ca40:	9b00      	ldr	r3, [sp, #0]
 800ca42:	eba8 0303 	sub.w	r3, r8, r3
 800ca46:	4599      	cmp	r9, r3
 800ca48:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ca4c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ca50:	d133      	bne.n	800caba <_dtoa_r+0x62a>
 800ca52:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ca56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5e:	dc1a      	bgt.n	800ca96 <_dtoa_r+0x606>
 800ca60:	eeb4 7b46 	vcmp.f64	d7, d6
 800ca64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca68:	d103      	bne.n	800ca72 <_dtoa_r+0x5e2>
 800ca6a:	ee15 3a10 	vmov	r3, s10
 800ca6e:	07d9      	lsls	r1, r3, #31
 800ca70:	d411      	bmi.n	800ca96 <_dtoa_r+0x606>
 800ca72:	4629      	mov	r1, r5
 800ca74:	4630      	mov	r0, r6
 800ca76:	f000 fae7 	bl	800d048 <_Bfree>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca7e:	f888 3000 	strb.w	r3, [r8]
 800ca82:	f10b 0301 	add.w	r3, fp, #1
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f43f ad4d 	beq.w	800c52a <_dtoa_r+0x9a>
 800ca90:	f8c3 8000 	str.w	r8, [r3]
 800ca94:	e549      	b.n	800c52a <_dtoa_r+0x9a>
 800ca96:	465f      	mov	r7, fp
 800ca98:	4643      	mov	r3, r8
 800ca9a:	4698      	mov	r8, r3
 800ca9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800caa0:	2a39      	cmp	r2, #57	; 0x39
 800caa2:	d106      	bne.n	800cab2 <_dtoa_r+0x622>
 800caa4:	9a00      	ldr	r2, [sp, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d1f7      	bne.n	800ca9a <_dtoa_r+0x60a>
 800caaa:	9900      	ldr	r1, [sp, #0]
 800caac:	2230      	movs	r2, #48	; 0x30
 800caae:	3701      	adds	r7, #1
 800cab0:	700a      	strb	r2, [r1, #0]
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	3201      	adds	r2, #1
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	e7ae      	b.n	800ca18 <_dtoa_r+0x588>
 800caba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cabe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac6:	d1b2      	bne.n	800ca2e <_dtoa_r+0x59e>
 800cac8:	e7d3      	b.n	800ca72 <_dtoa_r+0x5e2>
 800caca:	bf00      	nop
 800cacc:	0800ec08 	.word	0x0800ec08
 800cad0:	0800ebe0 	.word	0x0800ebe0
 800cad4:	9908      	ldr	r1, [sp, #32]
 800cad6:	2900      	cmp	r1, #0
 800cad8:	f000 80d1 	beq.w	800cc7e <_dtoa_r+0x7ee>
 800cadc:	9907      	ldr	r1, [sp, #28]
 800cade:	2901      	cmp	r1, #1
 800cae0:	f300 80b4 	bgt.w	800cc4c <_dtoa_r+0x7bc>
 800cae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cae6:	2900      	cmp	r1, #0
 800cae8:	f000 80ac 	beq.w	800cc44 <_dtoa_r+0x7b4>
 800caec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800caf0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800caf4:	461c      	mov	r4, r3
 800caf6:	930a      	str	r3, [sp, #40]	; 0x28
 800caf8:	9b05      	ldr	r3, [sp, #20]
 800cafa:	4413      	add	r3, r2
 800cafc:	9305      	str	r3, [sp, #20]
 800cafe:	9b06      	ldr	r3, [sp, #24]
 800cb00:	2101      	movs	r1, #1
 800cb02:	4413      	add	r3, r2
 800cb04:	4630      	mov	r0, r6
 800cb06:	9306      	str	r3, [sp, #24]
 800cb08:	f000 fb5a 	bl	800d1c0 <__i2b>
 800cb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb0e:	4607      	mov	r7, r0
 800cb10:	f1b8 0f00 	cmp.w	r8, #0
 800cb14:	dd0d      	ble.n	800cb32 <_dtoa_r+0x6a2>
 800cb16:	9a06      	ldr	r2, [sp, #24]
 800cb18:	2a00      	cmp	r2, #0
 800cb1a:	dd0a      	ble.n	800cb32 <_dtoa_r+0x6a2>
 800cb1c:	4542      	cmp	r2, r8
 800cb1e:	9905      	ldr	r1, [sp, #20]
 800cb20:	bfa8      	it	ge
 800cb22:	4642      	movge	r2, r8
 800cb24:	1a89      	subs	r1, r1, r2
 800cb26:	9105      	str	r1, [sp, #20]
 800cb28:	9906      	ldr	r1, [sp, #24]
 800cb2a:	eba8 0802 	sub.w	r8, r8, r2
 800cb2e:	1a8a      	subs	r2, r1, r2
 800cb30:	9206      	str	r2, [sp, #24]
 800cb32:	b303      	cbz	r3, 800cb76 <_dtoa_r+0x6e6>
 800cb34:	9a08      	ldr	r2, [sp, #32]
 800cb36:	2a00      	cmp	r2, #0
 800cb38:	f000 80a6 	beq.w	800cc88 <_dtoa_r+0x7f8>
 800cb3c:	2c00      	cmp	r4, #0
 800cb3e:	dd13      	ble.n	800cb68 <_dtoa_r+0x6d8>
 800cb40:	4639      	mov	r1, r7
 800cb42:	4622      	mov	r2, r4
 800cb44:	4630      	mov	r0, r6
 800cb46:	930c      	str	r3, [sp, #48]	; 0x30
 800cb48:	f000 fbf6 	bl	800d338 <__pow5mult>
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	4601      	mov	r1, r0
 800cb50:	4607      	mov	r7, r0
 800cb52:	4630      	mov	r0, r6
 800cb54:	f000 fb4a 	bl	800d1ec <__multiply>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	900a      	str	r0, [sp, #40]	; 0x28
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f000 fa73 	bl	800d048 <_Bfree>
 800cb62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb66:	4615      	mov	r5, r2
 800cb68:	1b1a      	subs	r2, r3, r4
 800cb6a:	d004      	beq.n	800cb76 <_dtoa_r+0x6e6>
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f000 fbe2 	bl	800d338 <__pow5mult>
 800cb74:	4605      	mov	r5, r0
 800cb76:	2101      	movs	r1, #1
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f000 fb21 	bl	800d1c0 <__i2b>
 800cb7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	f340 8082 	ble.w	800cc8c <_dtoa_r+0x7fc>
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f000 fbd3 	bl	800d338 <__pow5mult>
 800cb92:	9b07      	ldr	r3, [sp, #28]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	4604      	mov	r4, r0
 800cb98:	dd7b      	ble.n	800cc92 <_dtoa_r+0x802>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	930a      	str	r3, [sp, #40]	; 0x28
 800cb9e:	6922      	ldr	r2, [r4, #16]
 800cba0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cba4:	6910      	ldr	r0, [r2, #16]
 800cba6:	f000 fabb 	bl	800d120 <__hi0bits>
 800cbaa:	f1c0 0020 	rsb	r0, r0, #32
 800cbae:	9b06      	ldr	r3, [sp, #24]
 800cbb0:	4418      	add	r0, r3
 800cbb2:	f010 001f 	ands.w	r0, r0, #31
 800cbb6:	f000 808d 	beq.w	800ccd4 <_dtoa_r+0x844>
 800cbba:	f1c0 0220 	rsb	r2, r0, #32
 800cbbe:	2a04      	cmp	r2, #4
 800cbc0:	f340 8086 	ble.w	800ccd0 <_dtoa_r+0x840>
 800cbc4:	f1c0 001c 	rsb	r0, r0, #28
 800cbc8:	9b05      	ldr	r3, [sp, #20]
 800cbca:	4403      	add	r3, r0
 800cbcc:	9305      	str	r3, [sp, #20]
 800cbce:	9b06      	ldr	r3, [sp, #24]
 800cbd0:	4403      	add	r3, r0
 800cbd2:	4480      	add	r8, r0
 800cbd4:	9306      	str	r3, [sp, #24]
 800cbd6:	9b05      	ldr	r3, [sp, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dd05      	ble.n	800cbe8 <_dtoa_r+0x758>
 800cbdc:	4629      	mov	r1, r5
 800cbde:	461a      	mov	r2, r3
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f000 fc03 	bl	800d3ec <__lshift>
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	9b06      	ldr	r3, [sp, #24]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	dd05      	ble.n	800cbfa <_dtoa_r+0x76a>
 800cbee:	4621      	mov	r1, r4
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f000 fbfa 	bl	800d3ec <__lshift>
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d06b      	beq.n	800ccd8 <_dtoa_r+0x848>
 800cc00:	4621      	mov	r1, r4
 800cc02:	4628      	mov	r0, r5
 800cc04:	f000 fc5e 	bl	800d4c4 <__mcmp>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	da65      	bge.n	800ccd8 <_dtoa_r+0x848>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4629      	mov	r1, r5
 800cc10:	220a      	movs	r2, #10
 800cc12:	4630      	mov	r0, r6
 800cc14:	f000 fa3a 	bl	800d08c <__multadd>
 800cc18:	9b08      	ldr	r3, [sp, #32]
 800cc1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc1e:	4605      	mov	r5, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 8192 	beq.w	800cf4a <_dtoa_r+0xaba>
 800cc26:	4639      	mov	r1, r7
 800cc28:	2300      	movs	r3, #0
 800cc2a:	220a      	movs	r2, #10
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f000 fa2d 	bl	800d08c <__multadd>
 800cc32:	f1ba 0f00 	cmp.w	sl, #0
 800cc36:	4607      	mov	r7, r0
 800cc38:	f300 808e 	bgt.w	800cd58 <_dtoa_r+0x8c8>
 800cc3c:	9b07      	ldr	r3, [sp, #28]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	dc51      	bgt.n	800cce6 <_dtoa_r+0x856>
 800cc42:	e089      	b.n	800cd58 <_dtoa_r+0x8c8>
 800cc44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cc4a:	e751      	b.n	800caf0 <_dtoa_r+0x660>
 800cc4c:	f109 34ff 	add.w	r4, r9, #4294967295
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	bfbf      	itttt	lt
 800cc54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800cc56:	1ae3      	sublt	r3, r4, r3
 800cc58:	18d2      	addlt	r2, r2, r3
 800cc5a:	4613      	movlt	r3, r2
 800cc5c:	bfb7      	itett	lt
 800cc5e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cc60:	1b1c      	subge	r4, r3, r4
 800cc62:	4623      	movlt	r3, r4
 800cc64:	2400      	movlt	r4, #0
 800cc66:	f1b9 0f00 	cmp.w	r9, #0
 800cc6a:	bfb5      	itete	lt
 800cc6c:	9a05      	ldrlt	r2, [sp, #20]
 800cc6e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800cc72:	eba2 0809 	sublt.w	r8, r2, r9
 800cc76:	464a      	movge	r2, r9
 800cc78:	bfb8      	it	lt
 800cc7a:	2200      	movlt	r2, #0
 800cc7c:	e73b      	b.n	800caf6 <_dtoa_r+0x666>
 800cc7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cc82:	9f08      	ldr	r7, [sp, #32]
 800cc84:	461c      	mov	r4, r3
 800cc86:	e743      	b.n	800cb10 <_dtoa_r+0x680>
 800cc88:	461a      	mov	r2, r3
 800cc8a:	e76f      	b.n	800cb6c <_dtoa_r+0x6dc>
 800cc8c:	9b07      	ldr	r3, [sp, #28]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	dc18      	bgt.n	800ccc4 <_dtoa_r+0x834>
 800cc92:	9b02      	ldr	r3, [sp, #8]
 800cc94:	b9b3      	cbnz	r3, 800ccc4 <_dtoa_r+0x834>
 800cc96:	9b03      	ldr	r3, [sp, #12]
 800cc98:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cc9c:	b9a2      	cbnz	r2, 800ccc8 <_dtoa_r+0x838>
 800cc9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cca2:	0d12      	lsrs	r2, r2, #20
 800cca4:	0512      	lsls	r2, r2, #20
 800cca6:	b18a      	cbz	r2, 800cccc <_dtoa_r+0x83c>
 800cca8:	9b05      	ldr	r3, [sp, #20]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	9305      	str	r3, [sp, #20]
 800ccae:	9b06      	ldr	r3, [sp, #24]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	9306      	str	r3, [sp, #24]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	930a      	str	r3, [sp, #40]	; 0x28
 800ccb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f47f af6f 	bne.w	800cb9e <_dtoa_r+0x70e>
 800ccc0:	2001      	movs	r0, #1
 800ccc2:	e774      	b.n	800cbae <_dtoa_r+0x71e>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	e7f6      	b.n	800ccb6 <_dtoa_r+0x826>
 800ccc8:	9b02      	ldr	r3, [sp, #8]
 800ccca:	e7f4      	b.n	800ccb6 <_dtoa_r+0x826>
 800cccc:	920a      	str	r2, [sp, #40]	; 0x28
 800ccce:	e7f3      	b.n	800ccb8 <_dtoa_r+0x828>
 800ccd0:	d081      	beq.n	800cbd6 <_dtoa_r+0x746>
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	301c      	adds	r0, #28
 800ccd6:	e777      	b.n	800cbc8 <_dtoa_r+0x738>
 800ccd8:	f1b9 0f00 	cmp.w	r9, #0
 800ccdc:	dc37      	bgt.n	800cd4e <_dtoa_r+0x8be>
 800ccde:	9b07      	ldr	r3, [sp, #28]
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	dd34      	ble.n	800cd4e <_dtoa_r+0x8be>
 800cce4:	46ca      	mov	sl, r9
 800cce6:	f1ba 0f00 	cmp.w	sl, #0
 800ccea:	d10d      	bne.n	800cd08 <_dtoa_r+0x878>
 800ccec:	4621      	mov	r1, r4
 800ccee:	4653      	mov	r3, sl
 800ccf0:	2205      	movs	r2, #5
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f000 f9ca 	bl	800d08c <__multadd>
 800ccf8:	4601      	mov	r1, r0
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f000 fbe1 	bl	800d4c4 <__mcmp>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	f73f adde 	bgt.w	800c8c4 <_dtoa_r+0x434>
 800cd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd0a:	f8dd 8000 	ldr.w	r8, [sp]
 800cd0e:	ea6f 0b03 	mvn.w	fp, r3
 800cd12:	f04f 0900 	mov.w	r9, #0
 800cd16:	4621      	mov	r1, r4
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f000 f995 	bl	800d048 <_Bfree>
 800cd1e:	2f00      	cmp	r7, #0
 800cd20:	f43f aea7 	beq.w	800ca72 <_dtoa_r+0x5e2>
 800cd24:	f1b9 0f00 	cmp.w	r9, #0
 800cd28:	d005      	beq.n	800cd36 <_dtoa_r+0x8a6>
 800cd2a:	45b9      	cmp	r9, r7
 800cd2c:	d003      	beq.n	800cd36 <_dtoa_r+0x8a6>
 800cd2e:	4649      	mov	r1, r9
 800cd30:	4630      	mov	r0, r6
 800cd32:	f000 f989 	bl	800d048 <_Bfree>
 800cd36:	4639      	mov	r1, r7
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f000 f985 	bl	800d048 <_Bfree>
 800cd3e:	e698      	b.n	800ca72 <_dtoa_r+0x5e2>
 800cd40:	2400      	movs	r4, #0
 800cd42:	4627      	mov	r7, r4
 800cd44:	e7e0      	b.n	800cd08 <_dtoa_r+0x878>
 800cd46:	46bb      	mov	fp, r7
 800cd48:	4604      	mov	r4, r0
 800cd4a:	4607      	mov	r7, r0
 800cd4c:	e5ba      	b.n	800c8c4 <_dtoa_r+0x434>
 800cd4e:	9b08      	ldr	r3, [sp, #32]
 800cd50:	46ca      	mov	sl, r9
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 8100 	beq.w	800cf58 <_dtoa_r+0xac8>
 800cd58:	f1b8 0f00 	cmp.w	r8, #0
 800cd5c:	dd05      	ble.n	800cd6a <_dtoa_r+0x8da>
 800cd5e:	4639      	mov	r1, r7
 800cd60:	4642      	mov	r2, r8
 800cd62:	4630      	mov	r0, r6
 800cd64:	f000 fb42 	bl	800d3ec <__lshift>
 800cd68:	4607      	mov	r7, r0
 800cd6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d05d      	beq.n	800ce2c <_dtoa_r+0x99c>
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	4630      	mov	r0, r6
 800cd74:	f000 f928 	bl	800cfc8 <_Balloc>
 800cd78:	4680      	mov	r8, r0
 800cd7a:	b928      	cbnz	r0, 800cd88 <_dtoa_r+0x8f8>
 800cd7c:	4b82      	ldr	r3, [pc, #520]	; (800cf88 <_dtoa_r+0xaf8>)
 800cd7e:	4602      	mov	r2, r0
 800cd80:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd84:	f7ff bb9a 	b.w	800c4bc <_dtoa_r+0x2c>
 800cd88:	693a      	ldr	r2, [r7, #16]
 800cd8a:	3202      	adds	r2, #2
 800cd8c:	0092      	lsls	r2, r2, #2
 800cd8e:	f107 010c 	add.w	r1, r7, #12
 800cd92:	300c      	adds	r0, #12
 800cd94:	f000 f90a 	bl	800cfac <memcpy>
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4641      	mov	r1, r8
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f000 fb25 	bl	800d3ec <__lshift>
 800cda2:	9b00      	ldr	r3, [sp, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	9305      	str	r3, [sp, #20]
 800cda8:	9b00      	ldr	r3, [sp, #0]
 800cdaa:	4453      	add	r3, sl
 800cdac:	9309      	str	r3, [sp, #36]	; 0x24
 800cdae:	9b02      	ldr	r3, [sp, #8]
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	46b9      	mov	r9, r7
 800cdb6:	9308      	str	r3, [sp, #32]
 800cdb8:	4607      	mov	r7, r0
 800cdba:	9b05      	ldr	r3, [sp, #20]
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	9302      	str	r3, [sp, #8]
 800cdc4:	f7ff fad6 	bl	800c374 <quorem>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	3330      	adds	r3, #48	; 0x30
 800cdcc:	9006      	str	r0, [sp, #24]
 800cdce:	4649      	mov	r1, r9
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	930a      	str	r3, [sp, #40]	; 0x28
 800cdd4:	f000 fb76 	bl	800d4c4 <__mcmp>
 800cdd8:	463a      	mov	r2, r7
 800cdda:	4682      	mov	sl, r0
 800cddc:	4621      	mov	r1, r4
 800cdde:	4630      	mov	r0, r6
 800cde0:	f000 fb8c 	bl	800d4fc <__mdiff>
 800cde4:	68c2      	ldr	r2, [r0, #12]
 800cde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde8:	4680      	mov	r8, r0
 800cdea:	bb0a      	cbnz	r2, 800ce30 <_dtoa_r+0x9a0>
 800cdec:	4601      	mov	r1, r0
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f000 fb68 	bl	800d4c4 <__mcmp>
 800cdf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	4641      	mov	r1, r8
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	920e      	str	r2, [sp, #56]	; 0x38
 800cdfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ce00:	f000 f922 	bl	800d048 <_Bfree>
 800ce04:	9b07      	ldr	r3, [sp, #28]
 800ce06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce08:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ce0c:	ea43 0102 	orr.w	r1, r3, r2
 800ce10:	9b08      	ldr	r3, [sp, #32]
 800ce12:	430b      	orrs	r3, r1
 800ce14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce16:	d10d      	bne.n	800ce34 <_dtoa_r+0x9a4>
 800ce18:	2b39      	cmp	r3, #57	; 0x39
 800ce1a:	d029      	beq.n	800ce70 <_dtoa_r+0x9e0>
 800ce1c:	f1ba 0f00 	cmp.w	sl, #0
 800ce20:	dd01      	ble.n	800ce26 <_dtoa_r+0x996>
 800ce22:	9b06      	ldr	r3, [sp, #24]
 800ce24:	3331      	adds	r3, #49	; 0x31
 800ce26:	9a02      	ldr	r2, [sp, #8]
 800ce28:	7013      	strb	r3, [r2, #0]
 800ce2a:	e774      	b.n	800cd16 <_dtoa_r+0x886>
 800ce2c:	4638      	mov	r0, r7
 800ce2e:	e7b8      	b.n	800cda2 <_dtoa_r+0x912>
 800ce30:	2201      	movs	r2, #1
 800ce32:	e7e1      	b.n	800cdf8 <_dtoa_r+0x968>
 800ce34:	f1ba 0f00 	cmp.w	sl, #0
 800ce38:	db06      	blt.n	800ce48 <_dtoa_r+0x9b8>
 800ce3a:	9907      	ldr	r1, [sp, #28]
 800ce3c:	ea41 0a0a 	orr.w	sl, r1, sl
 800ce40:	9908      	ldr	r1, [sp, #32]
 800ce42:	ea5a 0101 	orrs.w	r1, sl, r1
 800ce46:	d120      	bne.n	800ce8a <_dtoa_r+0x9fa>
 800ce48:	2a00      	cmp	r2, #0
 800ce4a:	ddec      	ble.n	800ce26 <_dtoa_r+0x996>
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	2201      	movs	r2, #1
 800ce50:	4630      	mov	r0, r6
 800ce52:	9305      	str	r3, [sp, #20]
 800ce54:	f000 faca 	bl	800d3ec <__lshift>
 800ce58:	4621      	mov	r1, r4
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	f000 fb32 	bl	800d4c4 <__mcmp>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	9b05      	ldr	r3, [sp, #20]
 800ce64:	dc02      	bgt.n	800ce6c <_dtoa_r+0x9dc>
 800ce66:	d1de      	bne.n	800ce26 <_dtoa_r+0x996>
 800ce68:	07da      	lsls	r2, r3, #31
 800ce6a:	d5dc      	bpl.n	800ce26 <_dtoa_r+0x996>
 800ce6c:	2b39      	cmp	r3, #57	; 0x39
 800ce6e:	d1d8      	bne.n	800ce22 <_dtoa_r+0x992>
 800ce70:	9a02      	ldr	r2, [sp, #8]
 800ce72:	2339      	movs	r3, #57	; 0x39
 800ce74:	7013      	strb	r3, [r2, #0]
 800ce76:	4643      	mov	r3, r8
 800ce78:	4698      	mov	r8, r3
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ce80:	2a39      	cmp	r2, #57	; 0x39
 800ce82:	d051      	beq.n	800cf28 <_dtoa_r+0xa98>
 800ce84:	3201      	adds	r2, #1
 800ce86:	701a      	strb	r2, [r3, #0]
 800ce88:	e745      	b.n	800cd16 <_dtoa_r+0x886>
 800ce8a:	2a00      	cmp	r2, #0
 800ce8c:	dd03      	ble.n	800ce96 <_dtoa_r+0xa06>
 800ce8e:	2b39      	cmp	r3, #57	; 0x39
 800ce90:	d0ee      	beq.n	800ce70 <_dtoa_r+0x9e0>
 800ce92:	3301      	adds	r3, #1
 800ce94:	e7c7      	b.n	800ce26 <_dtoa_r+0x996>
 800ce96:	9a05      	ldr	r2, [sp, #20]
 800ce98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce9a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce9e:	428a      	cmp	r2, r1
 800cea0:	d02b      	beq.n	800cefa <_dtoa_r+0xa6a>
 800cea2:	4629      	mov	r1, r5
 800cea4:	2300      	movs	r3, #0
 800cea6:	220a      	movs	r2, #10
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f000 f8ef 	bl	800d08c <__multadd>
 800ceae:	45b9      	cmp	r9, r7
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	f04f 0300 	mov.w	r3, #0
 800ceb6:	f04f 020a 	mov.w	r2, #10
 800ceba:	4649      	mov	r1, r9
 800cebc:	4630      	mov	r0, r6
 800cebe:	d107      	bne.n	800ced0 <_dtoa_r+0xa40>
 800cec0:	f000 f8e4 	bl	800d08c <__multadd>
 800cec4:	4681      	mov	r9, r0
 800cec6:	4607      	mov	r7, r0
 800cec8:	9b05      	ldr	r3, [sp, #20]
 800ceca:	3301      	adds	r3, #1
 800cecc:	9305      	str	r3, [sp, #20]
 800cece:	e774      	b.n	800cdba <_dtoa_r+0x92a>
 800ced0:	f000 f8dc 	bl	800d08c <__multadd>
 800ced4:	4639      	mov	r1, r7
 800ced6:	4681      	mov	r9, r0
 800ced8:	2300      	movs	r3, #0
 800ceda:	220a      	movs	r2, #10
 800cedc:	4630      	mov	r0, r6
 800cede:	f000 f8d5 	bl	800d08c <__multadd>
 800cee2:	4607      	mov	r7, r0
 800cee4:	e7f0      	b.n	800cec8 <_dtoa_r+0xa38>
 800cee6:	f1ba 0f00 	cmp.w	sl, #0
 800ceea:	9a00      	ldr	r2, [sp, #0]
 800ceec:	bfcc      	ite	gt
 800ceee:	46d0      	movgt	r8, sl
 800cef0:	f04f 0801 	movle.w	r8, #1
 800cef4:	4490      	add	r8, r2
 800cef6:	f04f 0900 	mov.w	r9, #0
 800cefa:	4629      	mov	r1, r5
 800cefc:	2201      	movs	r2, #1
 800cefe:	4630      	mov	r0, r6
 800cf00:	9302      	str	r3, [sp, #8]
 800cf02:	f000 fa73 	bl	800d3ec <__lshift>
 800cf06:	4621      	mov	r1, r4
 800cf08:	4605      	mov	r5, r0
 800cf0a:	f000 fadb 	bl	800d4c4 <__mcmp>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	dcb1      	bgt.n	800ce76 <_dtoa_r+0x9e6>
 800cf12:	d102      	bne.n	800cf1a <_dtoa_r+0xa8a>
 800cf14:	9b02      	ldr	r3, [sp, #8]
 800cf16:	07db      	lsls	r3, r3, #31
 800cf18:	d4ad      	bmi.n	800ce76 <_dtoa_r+0x9e6>
 800cf1a:	4643      	mov	r3, r8
 800cf1c:	4698      	mov	r8, r3
 800cf1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf22:	2a30      	cmp	r2, #48	; 0x30
 800cf24:	d0fa      	beq.n	800cf1c <_dtoa_r+0xa8c>
 800cf26:	e6f6      	b.n	800cd16 <_dtoa_r+0x886>
 800cf28:	9a00      	ldr	r2, [sp, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d1a4      	bne.n	800ce78 <_dtoa_r+0x9e8>
 800cf2e:	f10b 0b01 	add.w	fp, fp, #1
 800cf32:	2331      	movs	r3, #49	; 0x31
 800cf34:	e778      	b.n	800ce28 <_dtoa_r+0x998>
 800cf36:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <_dtoa_r+0xafc>)
 800cf38:	f7ff bb12 	b.w	800c560 <_dtoa_r+0xd0>
 800cf3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f47f aaee 	bne.w	800c520 <_dtoa_r+0x90>
 800cf44:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <_dtoa_r+0xb00>)
 800cf46:	f7ff bb0b 	b.w	800c560 <_dtoa_r+0xd0>
 800cf4a:	f1ba 0f00 	cmp.w	sl, #0
 800cf4e:	dc03      	bgt.n	800cf58 <_dtoa_r+0xac8>
 800cf50:	9b07      	ldr	r3, [sp, #28]
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	f73f aec7 	bgt.w	800cce6 <_dtoa_r+0x856>
 800cf58:	f8dd 8000 	ldr.w	r8, [sp]
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	4628      	mov	r0, r5
 800cf60:	f7ff fa08 	bl	800c374 <quorem>
 800cf64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf68:	f808 3b01 	strb.w	r3, [r8], #1
 800cf6c:	9a00      	ldr	r2, [sp, #0]
 800cf6e:	eba8 0202 	sub.w	r2, r8, r2
 800cf72:	4592      	cmp	sl, r2
 800cf74:	ddb7      	ble.n	800cee6 <_dtoa_r+0xa56>
 800cf76:	4629      	mov	r1, r5
 800cf78:	2300      	movs	r3, #0
 800cf7a:	220a      	movs	r2, #10
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f000 f885 	bl	800d08c <__multadd>
 800cf82:	4605      	mov	r5, r0
 800cf84:	e7ea      	b.n	800cf5c <_dtoa_r+0xacc>
 800cf86:	bf00      	nop
 800cf88:	0800eb6b 	.word	0x0800eb6b
 800cf8c:	0800eac4 	.word	0x0800eac4
 800cf90:	0800eae8 	.word	0x0800eae8

0800cf94 <_localeconv_r>:
 800cf94:	4800      	ldr	r0, [pc, #0]	; (800cf98 <_localeconv_r+0x4>)
 800cf96:	4770      	bx	lr
 800cf98:	20000230 	.word	0x20000230

0800cf9c <malloc>:
 800cf9c:	4b02      	ldr	r3, [pc, #8]	; (800cfa8 <malloc+0xc>)
 800cf9e:	4601      	mov	r1, r0
 800cfa0:	6818      	ldr	r0, [r3, #0]
 800cfa2:	f000 bbef 	b.w	800d784 <_malloc_r>
 800cfa6:	bf00      	nop
 800cfa8:	200000dc 	.word	0x200000dc

0800cfac <memcpy>:
 800cfac:	440a      	add	r2, r1
 800cfae:	4291      	cmp	r1, r2
 800cfb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfb4:	d100      	bne.n	800cfb8 <memcpy+0xc>
 800cfb6:	4770      	bx	lr
 800cfb8:	b510      	push	{r4, lr}
 800cfba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfc2:	4291      	cmp	r1, r2
 800cfc4:	d1f9      	bne.n	800cfba <memcpy+0xe>
 800cfc6:	bd10      	pop	{r4, pc}

0800cfc8 <_Balloc>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfcc:	4604      	mov	r4, r0
 800cfce:	460d      	mov	r5, r1
 800cfd0:	b976      	cbnz	r6, 800cff0 <_Balloc+0x28>
 800cfd2:	2010      	movs	r0, #16
 800cfd4:	f7ff ffe2 	bl	800cf9c <malloc>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	6260      	str	r0, [r4, #36]	; 0x24
 800cfdc:	b920      	cbnz	r0, 800cfe8 <_Balloc+0x20>
 800cfde:	4b18      	ldr	r3, [pc, #96]	; (800d040 <_Balloc+0x78>)
 800cfe0:	4818      	ldr	r0, [pc, #96]	; (800d044 <_Balloc+0x7c>)
 800cfe2:	2166      	movs	r1, #102	; 0x66
 800cfe4:	f000 fd94 	bl	800db10 <__assert_func>
 800cfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfec:	6006      	str	r6, [r0, #0]
 800cfee:	60c6      	str	r6, [r0, #12]
 800cff0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cff2:	68f3      	ldr	r3, [r6, #12]
 800cff4:	b183      	cbz	r3, 800d018 <_Balloc+0x50>
 800cff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cffe:	b9b8      	cbnz	r0, 800d030 <_Balloc+0x68>
 800d000:	2101      	movs	r1, #1
 800d002:	fa01 f605 	lsl.w	r6, r1, r5
 800d006:	1d72      	adds	r2, r6, #5
 800d008:	0092      	lsls	r2, r2, #2
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fb5a 	bl	800d6c4 <_calloc_r>
 800d010:	b160      	cbz	r0, 800d02c <_Balloc+0x64>
 800d012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d016:	e00e      	b.n	800d036 <_Balloc+0x6e>
 800d018:	2221      	movs	r2, #33	; 0x21
 800d01a:	2104      	movs	r1, #4
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fb51 	bl	800d6c4 <_calloc_r>
 800d022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d024:	60f0      	str	r0, [r6, #12]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1e4      	bne.n	800cff6 <_Balloc+0x2e>
 800d02c:	2000      	movs	r0, #0
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	6802      	ldr	r2, [r0, #0]
 800d032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d036:	2300      	movs	r3, #0
 800d038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d03c:	e7f7      	b.n	800d02e <_Balloc+0x66>
 800d03e:	bf00      	nop
 800d040:	0800eaf5 	.word	0x0800eaf5
 800d044:	0800eb7c 	.word	0x0800eb7c

0800d048 <_Bfree>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d04c:	4605      	mov	r5, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	b976      	cbnz	r6, 800d070 <_Bfree+0x28>
 800d052:	2010      	movs	r0, #16
 800d054:	f7ff ffa2 	bl	800cf9c <malloc>
 800d058:	4602      	mov	r2, r0
 800d05a:	6268      	str	r0, [r5, #36]	; 0x24
 800d05c:	b920      	cbnz	r0, 800d068 <_Bfree+0x20>
 800d05e:	4b09      	ldr	r3, [pc, #36]	; (800d084 <_Bfree+0x3c>)
 800d060:	4809      	ldr	r0, [pc, #36]	; (800d088 <_Bfree+0x40>)
 800d062:	218a      	movs	r1, #138	; 0x8a
 800d064:	f000 fd54 	bl	800db10 <__assert_func>
 800d068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d06c:	6006      	str	r6, [r0, #0]
 800d06e:	60c6      	str	r6, [r0, #12]
 800d070:	b13c      	cbz	r4, 800d082 <_Bfree+0x3a>
 800d072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d074:	6862      	ldr	r2, [r4, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d07c:	6021      	str	r1, [r4, #0]
 800d07e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d082:	bd70      	pop	{r4, r5, r6, pc}
 800d084:	0800eaf5 	.word	0x0800eaf5
 800d088:	0800eb7c 	.word	0x0800eb7c

0800d08c <__multadd>:
 800d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d090:	690e      	ldr	r6, [r1, #16]
 800d092:	4607      	mov	r7, r0
 800d094:	4698      	mov	r8, r3
 800d096:	460c      	mov	r4, r1
 800d098:	f101 0014 	add.w	r0, r1, #20
 800d09c:	2300      	movs	r3, #0
 800d09e:	6805      	ldr	r5, [r0, #0]
 800d0a0:	b2a9      	uxth	r1, r5
 800d0a2:	fb02 8101 	mla	r1, r2, r1, r8
 800d0a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d0aa:	0c2d      	lsrs	r5, r5, #16
 800d0ac:	fb02 c505 	mla	r5, r2, r5, ip
 800d0b0:	b289      	uxth	r1, r1
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d0b8:	429e      	cmp	r6, r3
 800d0ba:	f840 1b04 	str.w	r1, [r0], #4
 800d0be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d0c2:	dcec      	bgt.n	800d09e <__multadd+0x12>
 800d0c4:	f1b8 0f00 	cmp.w	r8, #0
 800d0c8:	d022      	beq.n	800d110 <__multadd+0x84>
 800d0ca:	68a3      	ldr	r3, [r4, #8]
 800d0cc:	42b3      	cmp	r3, r6
 800d0ce:	dc19      	bgt.n	800d104 <__multadd+0x78>
 800d0d0:	6861      	ldr	r1, [r4, #4]
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	3101      	adds	r1, #1
 800d0d6:	f7ff ff77 	bl	800cfc8 <_Balloc>
 800d0da:	4605      	mov	r5, r0
 800d0dc:	b928      	cbnz	r0, 800d0ea <__multadd+0x5e>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	4b0d      	ldr	r3, [pc, #52]	; (800d118 <__multadd+0x8c>)
 800d0e2:	480e      	ldr	r0, [pc, #56]	; (800d11c <__multadd+0x90>)
 800d0e4:	21b5      	movs	r1, #181	; 0xb5
 800d0e6:	f000 fd13 	bl	800db10 <__assert_func>
 800d0ea:	6922      	ldr	r2, [r4, #16]
 800d0ec:	3202      	adds	r2, #2
 800d0ee:	f104 010c 	add.w	r1, r4, #12
 800d0f2:	0092      	lsls	r2, r2, #2
 800d0f4:	300c      	adds	r0, #12
 800d0f6:	f7ff ff59 	bl	800cfac <memcpy>
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	f7ff ffa3 	bl	800d048 <_Bfree>
 800d102:	462c      	mov	r4, r5
 800d104:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d108:	3601      	adds	r6, #1
 800d10a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d10e:	6126      	str	r6, [r4, #16]
 800d110:	4620      	mov	r0, r4
 800d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d116:	bf00      	nop
 800d118:	0800eb6b 	.word	0x0800eb6b
 800d11c:	0800eb7c 	.word	0x0800eb7c

0800d120 <__hi0bits>:
 800d120:	0c03      	lsrs	r3, r0, #16
 800d122:	041b      	lsls	r3, r3, #16
 800d124:	b9d3      	cbnz	r3, 800d15c <__hi0bits+0x3c>
 800d126:	0400      	lsls	r0, r0, #16
 800d128:	2310      	movs	r3, #16
 800d12a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d12e:	bf04      	itt	eq
 800d130:	0200      	lsleq	r0, r0, #8
 800d132:	3308      	addeq	r3, #8
 800d134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d138:	bf04      	itt	eq
 800d13a:	0100      	lsleq	r0, r0, #4
 800d13c:	3304      	addeq	r3, #4
 800d13e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d142:	bf04      	itt	eq
 800d144:	0080      	lsleq	r0, r0, #2
 800d146:	3302      	addeq	r3, #2
 800d148:	2800      	cmp	r0, #0
 800d14a:	db05      	blt.n	800d158 <__hi0bits+0x38>
 800d14c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d150:	f103 0301 	add.w	r3, r3, #1
 800d154:	bf08      	it	eq
 800d156:	2320      	moveq	r3, #32
 800d158:	4618      	mov	r0, r3
 800d15a:	4770      	bx	lr
 800d15c:	2300      	movs	r3, #0
 800d15e:	e7e4      	b.n	800d12a <__hi0bits+0xa>

0800d160 <__lo0bits>:
 800d160:	6803      	ldr	r3, [r0, #0]
 800d162:	f013 0207 	ands.w	r2, r3, #7
 800d166:	4601      	mov	r1, r0
 800d168:	d00b      	beq.n	800d182 <__lo0bits+0x22>
 800d16a:	07da      	lsls	r2, r3, #31
 800d16c:	d424      	bmi.n	800d1b8 <__lo0bits+0x58>
 800d16e:	0798      	lsls	r0, r3, #30
 800d170:	bf49      	itett	mi
 800d172:	085b      	lsrmi	r3, r3, #1
 800d174:	089b      	lsrpl	r3, r3, #2
 800d176:	2001      	movmi	r0, #1
 800d178:	600b      	strmi	r3, [r1, #0]
 800d17a:	bf5c      	itt	pl
 800d17c:	600b      	strpl	r3, [r1, #0]
 800d17e:	2002      	movpl	r0, #2
 800d180:	4770      	bx	lr
 800d182:	b298      	uxth	r0, r3
 800d184:	b9b0      	cbnz	r0, 800d1b4 <__lo0bits+0x54>
 800d186:	0c1b      	lsrs	r3, r3, #16
 800d188:	2010      	movs	r0, #16
 800d18a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d18e:	bf04      	itt	eq
 800d190:	0a1b      	lsreq	r3, r3, #8
 800d192:	3008      	addeq	r0, #8
 800d194:	071a      	lsls	r2, r3, #28
 800d196:	bf04      	itt	eq
 800d198:	091b      	lsreq	r3, r3, #4
 800d19a:	3004      	addeq	r0, #4
 800d19c:	079a      	lsls	r2, r3, #30
 800d19e:	bf04      	itt	eq
 800d1a0:	089b      	lsreq	r3, r3, #2
 800d1a2:	3002      	addeq	r0, #2
 800d1a4:	07da      	lsls	r2, r3, #31
 800d1a6:	d403      	bmi.n	800d1b0 <__lo0bits+0x50>
 800d1a8:	085b      	lsrs	r3, r3, #1
 800d1aa:	f100 0001 	add.w	r0, r0, #1
 800d1ae:	d005      	beq.n	800d1bc <__lo0bits+0x5c>
 800d1b0:	600b      	str	r3, [r1, #0]
 800d1b2:	4770      	bx	lr
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	e7e8      	b.n	800d18a <__lo0bits+0x2a>
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	4770      	bx	lr
 800d1bc:	2020      	movs	r0, #32
 800d1be:	4770      	bx	lr

0800d1c0 <__i2b>:
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	f7ff feff 	bl	800cfc8 <_Balloc>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	b928      	cbnz	r0, 800d1da <__i2b+0x1a>
 800d1ce:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <__i2b+0x24>)
 800d1d0:	4805      	ldr	r0, [pc, #20]	; (800d1e8 <__i2b+0x28>)
 800d1d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1d6:	f000 fc9b 	bl	800db10 <__assert_func>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	6144      	str	r4, [r0, #20]
 800d1de:	6103      	str	r3, [r0, #16]
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	bf00      	nop
 800d1e4:	0800eb6b 	.word	0x0800eb6b
 800d1e8:	0800eb7c 	.word	0x0800eb7c

0800d1ec <__multiply>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	690a      	ldr	r2, [r1, #16]
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	bfb8      	it	lt
 800d1fa:	460b      	movlt	r3, r1
 800d1fc:	460d      	mov	r5, r1
 800d1fe:	bfbc      	itt	lt
 800d200:	4625      	movlt	r5, r4
 800d202:	461c      	movlt	r4, r3
 800d204:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d208:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d20c:	68ab      	ldr	r3, [r5, #8]
 800d20e:	6869      	ldr	r1, [r5, #4]
 800d210:	eb0a 0709 	add.w	r7, sl, r9
 800d214:	42bb      	cmp	r3, r7
 800d216:	b085      	sub	sp, #20
 800d218:	bfb8      	it	lt
 800d21a:	3101      	addlt	r1, #1
 800d21c:	f7ff fed4 	bl	800cfc8 <_Balloc>
 800d220:	b930      	cbnz	r0, 800d230 <__multiply+0x44>
 800d222:	4602      	mov	r2, r0
 800d224:	4b42      	ldr	r3, [pc, #264]	; (800d330 <__multiply+0x144>)
 800d226:	4843      	ldr	r0, [pc, #268]	; (800d334 <__multiply+0x148>)
 800d228:	f240 115d 	movw	r1, #349	; 0x15d
 800d22c:	f000 fc70 	bl	800db10 <__assert_func>
 800d230:	f100 0614 	add.w	r6, r0, #20
 800d234:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d238:	4633      	mov	r3, r6
 800d23a:	2200      	movs	r2, #0
 800d23c:	4543      	cmp	r3, r8
 800d23e:	d31e      	bcc.n	800d27e <__multiply+0x92>
 800d240:	f105 0c14 	add.w	ip, r5, #20
 800d244:	f104 0314 	add.w	r3, r4, #20
 800d248:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d24c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d250:	9202      	str	r2, [sp, #8]
 800d252:	ebac 0205 	sub.w	r2, ip, r5
 800d256:	3a15      	subs	r2, #21
 800d258:	f022 0203 	bic.w	r2, r2, #3
 800d25c:	3204      	adds	r2, #4
 800d25e:	f105 0115 	add.w	r1, r5, #21
 800d262:	458c      	cmp	ip, r1
 800d264:	bf38      	it	cc
 800d266:	2204      	movcc	r2, #4
 800d268:	9201      	str	r2, [sp, #4]
 800d26a:	9a02      	ldr	r2, [sp, #8]
 800d26c:	9303      	str	r3, [sp, #12]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d808      	bhi.n	800d284 <__multiply+0x98>
 800d272:	2f00      	cmp	r7, #0
 800d274:	dc55      	bgt.n	800d322 <__multiply+0x136>
 800d276:	6107      	str	r7, [r0, #16]
 800d278:	b005      	add	sp, #20
 800d27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27e:	f843 2b04 	str.w	r2, [r3], #4
 800d282:	e7db      	b.n	800d23c <__multiply+0x50>
 800d284:	f8b3 a000 	ldrh.w	sl, [r3]
 800d288:	f1ba 0f00 	cmp.w	sl, #0
 800d28c:	d020      	beq.n	800d2d0 <__multiply+0xe4>
 800d28e:	f105 0e14 	add.w	lr, r5, #20
 800d292:	46b1      	mov	r9, r6
 800d294:	2200      	movs	r2, #0
 800d296:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d29a:	f8d9 b000 	ldr.w	fp, [r9]
 800d29e:	b2a1      	uxth	r1, r4
 800d2a0:	fa1f fb8b 	uxth.w	fp, fp
 800d2a4:	fb0a b101 	mla	r1, sl, r1, fp
 800d2a8:	4411      	add	r1, r2
 800d2aa:	f8d9 2000 	ldr.w	r2, [r9]
 800d2ae:	0c24      	lsrs	r4, r4, #16
 800d2b0:	0c12      	lsrs	r2, r2, #16
 800d2b2:	fb0a 2404 	mla	r4, sl, r4, r2
 800d2b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d2ba:	b289      	uxth	r1, r1
 800d2bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d2c0:	45f4      	cmp	ip, lr
 800d2c2:	f849 1b04 	str.w	r1, [r9], #4
 800d2c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d2ca:	d8e4      	bhi.n	800d296 <__multiply+0xaa>
 800d2cc:	9901      	ldr	r1, [sp, #4]
 800d2ce:	5072      	str	r2, [r6, r1]
 800d2d0:	9a03      	ldr	r2, [sp, #12]
 800d2d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2d6:	3304      	adds	r3, #4
 800d2d8:	f1b9 0f00 	cmp.w	r9, #0
 800d2dc:	d01f      	beq.n	800d31e <__multiply+0x132>
 800d2de:	6834      	ldr	r4, [r6, #0]
 800d2e0:	f105 0114 	add.w	r1, r5, #20
 800d2e4:	46b6      	mov	lr, r6
 800d2e6:	f04f 0a00 	mov.w	sl, #0
 800d2ea:	880a      	ldrh	r2, [r1, #0]
 800d2ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d2f0:	fb09 b202 	mla	r2, r9, r2, fp
 800d2f4:	4492      	add	sl, r2
 800d2f6:	b2a4      	uxth	r4, r4
 800d2f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d2fc:	f84e 4b04 	str.w	r4, [lr], #4
 800d300:	f851 4b04 	ldr.w	r4, [r1], #4
 800d304:	f8be 2000 	ldrh.w	r2, [lr]
 800d308:	0c24      	lsrs	r4, r4, #16
 800d30a:	fb09 2404 	mla	r4, r9, r4, r2
 800d30e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d312:	458c      	cmp	ip, r1
 800d314:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d318:	d8e7      	bhi.n	800d2ea <__multiply+0xfe>
 800d31a:	9a01      	ldr	r2, [sp, #4]
 800d31c:	50b4      	str	r4, [r6, r2]
 800d31e:	3604      	adds	r6, #4
 800d320:	e7a3      	b.n	800d26a <__multiply+0x7e>
 800d322:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1a5      	bne.n	800d276 <__multiply+0x8a>
 800d32a:	3f01      	subs	r7, #1
 800d32c:	e7a1      	b.n	800d272 <__multiply+0x86>
 800d32e:	bf00      	nop
 800d330:	0800eb6b 	.word	0x0800eb6b
 800d334:	0800eb7c 	.word	0x0800eb7c

0800d338 <__pow5mult>:
 800d338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d33c:	4615      	mov	r5, r2
 800d33e:	f012 0203 	ands.w	r2, r2, #3
 800d342:	4606      	mov	r6, r0
 800d344:	460f      	mov	r7, r1
 800d346:	d007      	beq.n	800d358 <__pow5mult+0x20>
 800d348:	4c25      	ldr	r4, [pc, #148]	; (800d3e0 <__pow5mult+0xa8>)
 800d34a:	3a01      	subs	r2, #1
 800d34c:	2300      	movs	r3, #0
 800d34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d352:	f7ff fe9b 	bl	800d08c <__multadd>
 800d356:	4607      	mov	r7, r0
 800d358:	10ad      	asrs	r5, r5, #2
 800d35a:	d03d      	beq.n	800d3d8 <__pow5mult+0xa0>
 800d35c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d35e:	b97c      	cbnz	r4, 800d380 <__pow5mult+0x48>
 800d360:	2010      	movs	r0, #16
 800d362:	f7ff fe1b 	bl	800cf9c <malloc>
 800d366:	4602      	mov	r2, r0
 800d368:	6270      	str	r0, [r6, #36]	; 0x24
 800d36a:	b928      	cbnz	r0, 800d378 <__pow5mult+0x40>
 800d36c:	4b1d      	ldr	r3, [pc, #116]	; (800d3e4 <__pow5mult+0xac>)
 800d36e:	481e      	ldr	r0, [pc, #120]	; (800d3e8 <__pow5mult+0xb0>)
 800d370:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d374:	f000 fbcc 	bl	800db10 <__assert_func>
 800d378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d37c:	6004      	str	r4, [r0, #0]
 800d37e:	60c4      	str	r4, [r0, #12]
 800d380:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d388:	b94c      	cbnz	r4, 800d39e <__pow5mult+0x66>
 800d38a:	f240 2171 	movw	r1, #625	; 0x271
 800d38e:	4630      	mov	r0, r6
 800d390:	f7ff ff16 	bl	800d1c0 <__i2b>
 800d394:	2300      	movs	r3, #0
 800d396:	f8c8 0008 	str.w	r0, [r8, #8]
 800d39a:	4604      	mov	r4, r0
 800d39c:	6003      	str	r3, [r0, #0]
 800d39e:	f04f 0900 	mov.w	r9, #0
 800d3a2:	07eb      	lsls	r3, r5, #31
 800d3a4:	d50a      	bpl.n	800d3bc <__pow5mult+0x84>
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	4622      	mov	r2, r4
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f7ff ff1e 	bl	800d1ec <__multiply>
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	4680      	mov	r8, r0
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	f7ff fe47 	bl	800d048 <_Bfree>
 800d3ba:	4647      	mov	r7, r8
 800d3bc:	106d      	asrs	r5, r5, #1
 800d3be:	d00b      	beq.n	800d3d8 <__pow5mult+0xa0>
 800d3c0:	6820      	ldr	r0, [r4, #0]
 800d3c2:	b938      	cbnz	r0, 800d3d4 <__pow5mult+0x9c>
 800d3c4:	4622      	mov	r2, r4
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff ff0f 	bl	800d1ec <__multiply>
 800d3ce:	6020      	str	r0, [r4, #0]
 800d3d0:	f8c0 9000 	str.w	r9, [r0]
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	e7e4      	b.n	800d3a2 <__pow5mult+0x6a>
 800d3d8:	4638      	mov	r0, r7
 800d3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3de:	bf00      	nop
 800d3e0:	0800ecd0 	.word	0x0800ecd0
 800d3e4:	0800eaf5 	.word	0x0800eaf5
 800d3e8:	0800eb7c 	.word	0x0800eb7c

0800d3ec <__lshift>:
 800d3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	6849      	ldr	r1, [r1, #4]
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3fa:	68a3      	ldr	r3, [r4, #8]
 800d3fc:	4607      	mov	r7, r0
 800d3fe:	4691      	mov	r9, r2
 800d400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d404:	f108 0601 	add.w	r6, r8, #1
 800d408:	42b3      	cmp	r3, r6
 800d40a:	db0b      	blt.n	800d424 <__lshift+0x38>
 800d40c:	4638      	mov	r0, r7
 800d40e:	f7ff fddb 	bl	800cfc8 <_Balloc>
 800d412:	4605      	mov	r5, r0
 800d414:	b948      	cbnz	r0, 800d42a <__lshift+0x3e>
 800d416:	4602      	mov	r2, r0
 800d418:	4b28      	ldr	r3, [pc, #160]	; (800d4bc <__lshift+0xd0>)
 800d41a:	4829      	ldr	r0, [pc, #164]	; (800d4c0 <__lshift+0xd4>)
 800d41c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d420:	f000 fb76 	bl	800db10 <__assert_func>
 800d424:	3101      	adds	r1, #1
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	e7ee      	b.n	800d408 <__lshift+0x1c>
 800d42a:	2300      	movs	r3, #0
 800d42c:	f100 0114 	add.w	r1, r0, #20
 800d430:	f100 0210 	add.w	r2, r0, #16
 800d434:	4618      	mov	r0, r3
 800d436:	4553      	cmp	r3, sl
 800d438:	db33      	blt.n	800d4a2 <__lshift+0xb6>
 800d43a:	6920      	ldr	r0, [r4, #16]
 800d43c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d440:	f104 0314 	add.w	r3, r4, #20
 800d444:	f019 091f 	ands.w	r9, r9, #31
 800d448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d44c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d450:	d02b      	beq.n	800d4aa <__lshift+0xbe>
 800d452:	f1c9 0e20 	rsb	lr, r9, #32
 800d456:	468a      	mov	sl, r1
 800d458:	2200      	movs	r2, #0
 800d45a:	6818      	ldr	r0, [r3, #0]
 800d45c:	fa00 f009 	lsl.w	r0, r0, r9
 800d460:	4302      	orrs	r2, r0
 800d462:	f84a 2b04 	str.w	r2, [sl], #4
 800d466:	f853 2b04 	ldr.w	r2, [r3], #4
 800d46a:	459c      	cmp	ip, r3
 800d46c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d470:	d8f3      	bhi.n	800d45a <__lshift+0x6e>
 800d472:	ebac 0304 	sub.w	r3, ip, r4
 800d476:	3b15      	subs	r3, #21
 800d478:	f023 0303 	bic.w	r3, r3, #3
 800d47c:	3304      	adds	r3, #4
 800d47e:	f104 0015 	add.w	r0, r4, #21
 800d482:	4584      	cmp	ip, r0
 800d484:	bf38      	it	cc
 800d486:	2304      	movcc	r3, #4
 800d488:	50ca      	str	r2, [r1, r3]
 800d48a:	b10a      	cbz	r2, 800d490 <__lshift+0xa4>
 800d48c:	f108 0602 	add.w	r6, r8, #2
 800d490:	3e01      	subs	r6, #1
 800d492:	4638      	mov	r0, r7
 800d494:	612e      	str	r6, [r5, #16]
 800d496:	4621      	mov	r1, r4
 800d498:	f7ff fdd6 	bl	800d048 <_Bfree>
 800d49c:	4628      	mov	r0, r5
 800d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	e7c5      	b.n	800d436 <__lshift+0x4a>
 800d4aa:	3904      	subs	r1, #4
 800d4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4b4:	459c      	cmp	ip, r3
 800d4b6:	d8f9      	bhi.n	800d4ac <__lshift+0xc0>
 800d4b8:	e7ea      	b.n	800d490 <__lshift+0xa4>
 800d4ba:	bf00      	nop
 800d4bc:	0800eb6b 	.word	0x0800eb6b
 800d4c0:	0800eb7c 	.word	0x0800eb7c

0800d4c4 <__mcmp>:
 800d4c4:	b530      	push	{r4, r5, lr}
 800d4c6:	6902      	ldr	r2, [r0, #16]
 800d4c8:	690c      	ldr	r4, [r1, #16]
 800d4ca:	1b12      	subs	r2, r2, r4
 800d4cc:	d10e      	bne.n	800d4ec <__mcmp+0x28>
 800d4ce:	f100 0314 	add.w	r3, r0, #20
 800d4d2:	3114      	adds	r1, #20
 800d4d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4e4:	42a5      	cmp	r5, r4
 800d4e6:	d003      	beq.n	800d4f0 <__mcmp+0x2c>
 800d4e8:	d305      	bcc.n	800d4f6 <__mcmp+0x32>
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	bd30      	pop	{r4, r5, pc}
 800d4f0:	4283      	cmp	r3, r0
 800d4f2:	d3f3      	bcc.n	800d4dc <__mcmp+0x18>
 800d4f4:	e7fa      	b.n	800d4ec <__mcmp+0x28>
 800d4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4fa:	e7f7      	b.n	800d4ec <__mcmp+0x28>

0800d4fc <__mdiff>:
 800d4fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d500:	460c      	mov	r4, r1
 800d502:	4606      	mov	r6, r0
 800d504:	4611      	mov	r1, r2
 800d506:	4620      	mov	r0, r4
 800d508:	4617      	mov	r7, r2
 800d50a:	f7ff ffdb 	bl	800d4c4 <__mcmp>
 800d50e:	1e05      	subs	r5, r0, #0
 800d510:	d110      	bne.n	800d534 <__mdiff+0x38>
 800d512:	4629      	mov	r1, r5
 800d514:	4630      	mov	r0, r6
 800d516:	f7ff fd57 	bl	800cfc8 <_Balloc>
 800d51a:	b930      	cbnz	r0, 800d52a <__mdiff+0x2e>
 800d51c:	4b39      	ldr	r3, [pc, #228]	; (800d604 <__mdiff+0x108>)
 800d51e:	4602      	mov	r2, r0
 800d520:	f240 2132 	movw	r1, #562	; 0x232
 800d524:	4838      	ldr	r0, [pc, #224]	; (800d608 <__mdiff+0x10c>)
 800d526:	f000 faf3 	bl	800db10 <__assert_func>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d534:	bfa4      	itt	ge
 800d536:	463b      	movge	r3, r7
 800d538:	4627      	movge	r7, r4
 800d53a:	4630      	mov	r0, r6
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	bfa6      	itte	ge
 800d540:	461c      	movge	r4, r3
 800d542:	2500      	movge	r5, #0
 800d544:	2501      	movlt	r5, #1
 800d546:	f7ff fd3f 	bl	800cfc8 <_Balloc>
 800d54a:	b920      	cbnz	r0, 800d556 <__mdiff+0x5a>
 800d54c:	4b2d      	ldr	r3, [pc, #180]	; (800d604 <__mdiff+0x108>)
 800d54e:	4602      	mov	r2, r0
 800d550:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d554:	e7e6      	b.n	800d524 <__mdiff+0x28>
 800d556:	693e      	ldr	r6, [r7, #16]
 800d558:	60c5      	str	r5, [r0, #12]
 800d55a:	6925      	ldr	r5, [r4, #16]
 800d55c:	f107 0114 	add.w	r1, r7, #20
 800d560:	f104 0914 	add.w	r9, r4, #20
 800d564:	f100 0e14 	add.w	lr, r0, #20
 800d568:	f107 0210 	add.w	r2, r7, #16
 800d56c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d570:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d574:	46f2      	mov	sl, lr
 800d576:	2700      	movs	r7, #0
 800d578:	f859 3b04 	ldr.w	r3, [r9], #4
 800d57c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d580:	fa1f f883 	uxth.w	r8, r3
 800d584:	fa17 f78b 	uxtah	r7, r7, fp
 800d588:	0c1b      	lsrs	r3, r3, #16
 800d58a:	eba7 0808 	sub.w	r8, r7, r8
 800d58e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d592:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d596:	fa1f f888 	uxth.w	r8, r8
 800d59a:	141f      	asrs	r7, r3, #16
 800d59c:	454d      	cmp	r5, r9
 800d59e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5a2:	f84a 3b04 	str.w	r3, [sl], #4
 800d5a6:	d8e7      	bhi.n	800d578 <__mdiff+0x7c>
 800d5a8:	1b2b      	subs	r3, r5, r4
 800d5aa:	3b15      	subs	r3, #21
 800d5ac:	f023 0303 	bic.w	r3, r3, #3
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	3415      	adds	r4, #21
 800d5b4:	42a5      	cmp	r5, r4
 800d5b6:	bf38      	it	cc
 800d5b8:	2304      	movcc	r3, #4
 800d5ba:	4419      	add	r1, r3
 800d5bc:	4473      	add	r3, lr
 800d5be:	469e      	mov	lr, r3
 800d5c0:	460d      	mov	r5, r1
 800d5c2:	4565      	cmp	r5, ip
 800d5c4:	d30e      	bcc.n	800d5e4 <__mdiff+0xe8>
 800d5c6:	f10c 0203 	add.w	r2, ip, #3
 800d5ca:	1a52      	subs	r2, r2, r1
 800d5cc:	f022 0203 	bic.w	r2, r2, #3
 800d5d0:	3903      	subs	r1, #3
 800d5d2:	458c      	cmp	ip, r1
 800d5d4:	bf38      	it	cc
 800d5d6:	2200      	movcc	r2, #0
 800d5d8:	441a      	add	r2, r3
 800d5da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5de:	b17b      	cbz	r3, 800d600 <__mdiff+0x104>
 800d5e0:	6106      	str	r6, [r0, #16]
 800d5e2:	e7a5      	b.n	800d530 <__mdiff+0x34>
 800d5e4:	f855 8b04 	ldr.w	r8, [r5], #4
 800d5e8:	fa17 f488 	uxtah	r4, r7, r8
 800d5ec:	1422      	asrs	r2, r4, #16
 800d5ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d5f2:	b2a4      	uxth	r4, r4
 800d5f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d5f8:	f84e 4b04 	str.w	r4, [lr], #4
 800d5fc:	1417      	asrs	r7, r2, #16
 800d5fe:	e7e0      	b.n	800d5c2 <__mdiff+0xc6>
 800d600:	3e01      	subs	r6, #1
 800d602:	e7ea      	b.n	800d5da <__mdiff+0xde>
 800d604:	0800eb6b 	.word	0x0800eb6b
 800d608:	0800eb7c 	.word	0x0800eb7c

0800d60c <__d2b>:
 800d60c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d610:	4689      	mov	r9, r1
 800d612:	2101      	movs	r1, #1
 800d614:	ec57 6b10 	vmov	r6, r7, d0
 800d618:	4690      	mov	r8, r2
 800d61a:	f7ff fcd5 	bl	800cfc8 <_Balloc>
 800d61e:	4604      	mov	r4, r0
 800d620:	b930      	cbnz	r0, 800d630 <__d2b+0x24>
 800d622:	4602      	mov	r2, r0
 800d624:	4b25      	ldr	r3, [pc, #148]	; (800d6bc <__d2b+0xb0>)
 800d626:	4826      	ldr	r0, [pc, #152]	; (800d6c0 <__d2b+0xb4>)
 800d628:	f240 310a 	movw	r1, #778	; 0x30a
 800d62c:	f000 fa70 	bl	800db10 <__assert_func>
 800d630:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d634:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d638:	bb35      	cbnz	r5, 800d688 <__d2b+0x7c>
 800d63a:	2e00      	cmp	r6, #0
 800d63c:	9301      	str	r3, [sp, #4]
 800d63e:	d028      	beq.n	800d692 <__d2b+0x86>
 800d640:	4668      	mov	r0, sp
 800d642:	9600      	str	r6, [sp, #0]
 800d644:	f7ff fd8c 	bl	800d160 <__lo0bits>
 800d648:	9900      	ldr	r1, [sp, #0]
 800d64a:	b300      	cbz	r0, 800d68e <__d2b+0x82>
 800d64c:	9a01      	ldr	r2, [sp, #4]
 800d64e:	f1c0 0320 	rsb	r3, r0, #32
 800d652:	fa02 f303 	lsl.w	r3, r2, r3
 800d656:	430b      	orrs	r3, r1
 800d658:	40c2      	lsrs	r2, r0
 800d65a:	6163      	str	r3, [r4, #20]
 800d65c:	9201      	str	r2, [sp, #4]
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	61a3      	str	r3, [r4, #24]
 800d662:	2b00      	cmp	r3, #0
 800d664:	bf14      	ite	ne
 800d666:	2202      	movne	r2, #2
 800d668:	2201      	moveq	r2, #1
 800d66a:	6122      	str	r2, [r4, #16]
 800d66c:	b1d5      	cbz	r5, 800d6a4 <__d2b+0x98>
 800d66e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d672:	4405      	add	r5, r0
 800d674:	f8c9 5000 	str.w	r5, [r9]
 800d678:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d67c:	f8c8 0000 	str.w	r0, [r8]
 800d680:	4620      	mov	r0, r4
 800d682:	b003      	add	sp, #12
 800d684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d68c:	e7d5      	b.n	800d63a <__d2b+0x2e>
 800d68e:	6161      	str	r1, [r4, #20]
 800d690:	e7e5      	b.n	800d65e <__d2b+0x52>
 800d692:	a801      	add	r0, sp, #4
 800d694:	f7ff fd64 	bl	800d160 <__lo0bits>
 800d698:	9b01      	ldr	r3, [sp, #4]
 800d69a:	6163      	str	r3, [r4, #20]
 800d69c:	2201      	movs	r2, #1
 800d69e:	6122      	str	r2, [r4, #16]
 800d6a0:	3020      	adds	r0, #32
 800d6a2:	e7e3      	b.n	800d66c <__d2b+0x60>
 800d6a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d6ac:	f8c9 0000 	str.w	r0, [r9]
 800d6b0:	6918      	ldr	r0, [r3, #16]
 800d6b2:	f7ff fd35 	bl	800d120 <__hi0bits>
 800d6b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6ba:	e7df      	b.n	800d67c <__d2b+0x70>
 800d6bc:	0800eb6b 	.word	0x0800eb6b
 800d6c0:	0800eb7c 	.word	0x0800eb7c

0800d6c4 <_calloc_r>:
 800d6c4:	b513      	push	{r0, r1, r4, lr}
 800d6c6:	434a      	muls	r2, r1
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	9201      	str	r2, [sp, #4]
 800d6cc:	f000 f85a 	bl	800d784 <_malloc_r>
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	b118      	cbz	r0, 800d6dc <_calloc_r+0x18>
 800d6d4:	9a01      	ldr	r2, [sp, #4]
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	f7fe f9e0 	bl	800ba9c <memset>
 800d6dc:	4620      	mov	r0, r4
 800d6de:	b002      	add	sp, #8
 800d6e0:	bd10      	pop	{r4, pc}
	...

0800d6e4 <_free_r>:
 800d6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6e6:	2900      	cmp	r1, #0
 800d6e8:	d048      	beq.n	800d77c <_free_r+0x98>
 800d6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ee:	9001      	str	r0, [sp, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d6f6:	bfb8      	it	lt
 800d6f8:	18e4      	addlt	r4, r4, r3
 800d6fa:	f000 fa65 	bl	800dbc8 <__malloc_lock>
 800d6fe:	4a20      	ldr	r2, [pc, #128]	; (800d780 <_free_r+0x9c>)
 800d700:	9801      	ldr	r0, [sp, #4]
 800d702:	6813      	ldr	r3, [r2, #0]
 800d704:	4615      	mov	r5, r2
 800d706:	b933      	cbnz	r3, 800d716 <_free_r+0x32>
 800d708:	6063      	str	r3, [r4, #4]
 800d70a:	6014      	str	r4, [r2, #0]
 800d70c:	b003      	add	sp, #12
 800d70e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d712:	f000 ba5f 	b.w	800dbd4 <__malloc_unlock>
 800d716:	42a3      	cmp	r3, r4
 800d718:	d90b      	bls.n	800d732 <_free_r+0x4e>
 800d71a:	6821      	ldr	r1, [r4, #0]
 800d71c:	1862      	adds	r2, r4, r1
 800d71e:	4293      	cmp	r3, r2
 800d720:	bf04      	itt	eq
 800d722:	681a      	ldreq	r2, [r3, #0]
 800d724:	685b      	ldreq	r3, [r3, #4]
 800d726:	6063      	str	r3, [r4, #4]
 800d728:	bf04      	itt	eq
 800d72a:	1852      	addeq	r2, r2, r1
 800d72c:	6022      	streq	r2, [r4, #0]
 800d72e:	602c      	str	r4, [r5, #0]
 800d730:	e7ec      	b.n	800d70c <_free_r+0x28>
 800d732:	461a      	mov	r2, r3
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	b10b      	cbz	r3, 800d73c <_free_r+0x58>
 800d738:	42a3      	cmp	r3, r4
 800d73a:	d9fa      	bls.n	800d732 <_free_r+0x4e>
 800d73c:	6811      	ldr	r1, [r2, #0]
 800d73e:	1855      	adds	r5, r2, r1
 800d740:	42a5      	cmp	r5, r4
 800d742:	d10b      	bne.n	800d75c <_free_r+0x78>
 800d744:	6824      	ldr	r4, [r4, #0]
 800d746:	4421      	add	r1, r4
 800d748:	1854      	adds	r4, r2, r1
 800d74a:	42a3      	cmp	r3, r4
 800d74c:	6011      	str	r1, [r2, #0]
 800d74e:	d1dd      	bne.n	800d70c <_free_r+0x28>
 800d750:	681c      	ldr	r4, [r3, #0]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	6053      	str	r3, [r2, #4]
 800d756:	4421      	add	r1, r4
 800d758:	6011      	str	r1, [r2, #0]
 800d75a:	e7d7      	b.n	800d70c <_free_r+0x28>
 800d75c:	d902      	bls.n	800d764 <_free_r+0x80>
 800d75e:	230c      	movs	r3, #12
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	e7d3      	b.n	800d70c <_free_r+0x28>
 800d764:	6825      	ldr	r5, [r4, #0]
 800d766:	1961      	adds	r1, r4, r5
 800d768:	428b      	cmp	r3, r1
 800d76a:	bf04      	itt	eq
 800d76c:	6819      	ldreq	r1, [r3, #0]
 800d76e:	685b      	ldreq	r3, [r3, #4]
 800d770:	6063      	str	r3, [r4, #4]
 800d772:	bf04      	itt	eq
 800d774:	1949      	addeq	r1, r1, r5
 800d776:	6021      	streq	r1, [r4, #0]
 800d778:	6054      	str	r4, [r2, #4]
 800d77a:	e7c7      	b.n	800d70c <_free_r+0x28>
 800d77c:	b003      	add	sp, #12
 800d77e:	bd30      	pop	{r4, r5, pc}
 800d780:	20000390 	.word	0x20000390

0800d784 <_malloc_r>:
 800d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d786:	1ccd      	adds	r5, r1, #3
 800d788:	f025 0503 	bic.w	r5, r5, #3
 800d78c:	3508      	adds	r5, #8
 800d78e:	2d0c      	cmp	r5, #12
 800d790:	bf38      	it	cc
 800d792:	250c      	movcc	r5, #12
 800d794:	2d00      	cmp	r5, #0
 800d796:	4606      	mov	r6, r0
 800d798:	db01      	blt.n	800d79e <_malloc_r+0x1a>
 800d79a:	42a9      	cmp	r1, r5
 800d79c:	d903      	bls.n	800d7a6 <_malloc_r+0x22>
 800d79e:	230c      	movs	r3, #12
 800d7a0:	6033      	str	r3, [r6, #0]
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7a6:	f000 fa0f 	bl	800dbc8 <__malloc_lock>
 800d7aa:	4921      	ldr	r1, [pc, #132]	; (800d830 <_malloc_r+0xac>)
 800d7ac:	680a      	ldr	r2, [r1, #0]
 800d7ae:	4614      	mov	r4, r2
 800d7b0:	b99c      	cbnz	r4, 800d7da <_malloc_r+0x56>
 800d7b2:	4f20      	ldr	r7, [pc, #128]	; (800d834 <_malloc_r+0xb0>)
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	b923      	cbnz	r3, 800d7c2 <_malloc_r+0x3e>
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f000 f998 	bl	800daf0 <_sbrk_r>
 800d7c0:	6038      	str	r0, [r7, #0]
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f000 f993 	bl	800daf0 <_sbrk_r>
 800d7ca:	1c43      	adds	r3, r0, #1
 800d7cc:	d123      	bne.n	800d816 <_malloc_r+0x92>
 800d7ce:	230c      	movs	r3, #12
 800d7d0:	6033      	str	r3, [r6, #0]
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f000 f9fe 	bl	800dbd4 <__malloc_unlock>
 800d7d8:	e7e3      	b.n	800d7a2 <_malloc_r+0x1e>
 800d7da:	6823      	ldr	r3, [r4, #0]
 800d7dc:	1b5b      	subs	r3, r3, r5
 800d7de:	d417      	bmi.n	800d810 <_malloc_r+0x8c>
 800d7e0:	2b0b      	cmp	r3, #11
 800d7e2:	d903      	bls.n	800d7ec <_malloc_r+0x68>
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	441c      	add	r4, r3
 800d7e8:	6025      	str	r5, [r4, #0]
 800d7ea:	e004      	b.n	800d7f6 <_malloc_r+0x72>
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	42a2      	cmp	r2, r4
 800d7f0:	bf0c      	ite	eq
 800d7f2:	600b      	streq	r3, [r1, #0]
 800d7f4:	6053      	strne	r3, [r2, #4]
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f000 f9ec 	bl	800dbd4 <__malloc_unlock>
 800d7fc:	f104 000b 	add.w	r0, r4, #11
 800d800:	1d23      	adds	r3, r4, #4
 800d802:	f020 0007 	bic.w	r0, r0, #7
 800d806:	1ac2      	subs	r2, r0, r3
 800d808:	d0cc      	beq.n	800d7a4 <_malloc_r+0x20>
 800d80a:	1a1b      	subs	r3, r3, r0
 800d80c:	50a3      	str	r3, [r4, r2]
 800d80e:	e7c9      	b.n	800d7a4 <_malloc_r+0x20>
 800d810:	4622      	mov	r2, r4
 800d812:	6864      	ldr	r4, [r4, #4]
 800d814:	e7cc      	b.n	800d7b0 <_malloc_r+0x2c>
 800d816:	1cc4      	adds	r4, r0, #3
 800d818:	f024 0403 	bic.w	r4, r4, #3
 800d81c:	42a0      	cmp	r0, r4
 800d81e:	d0e3      	beq.n	800d7e8 <_malloc_r+0x64>
 800d820:	1a21      	subs	r1, r4, r0
 800d822:	4630      	mov	r0, r6
 800d824:	f000 f964 	bl	800daf0 <_sbrk_r>
 800d828:	3001      	adds	r0, #1
 800d82a:	d1dd      	bne.n	800d7e8 <_malloc_r+0x64>
 800d82c:	e7cf      	b.n	800d7ce <_malloc_r+0x4a>
 800d82e:	bf00      	nop
 800d830:	20000390 	.word	0x20000390
 800d834:	20000394 	.word	0x20000394

0800d838 <__ssputs_r>:
 800d838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	688e      	ldr	r6, [r1, #8]
 800d83e:	429e      	cmp	r6, r3
 800d840:	4682      	mov	sl, r0
 800d842:	460c      	mov	r4, r1
 800d844:	4690      	mov	r8, r2
 800d846:	461f      	mov	r7, r3
 800d848:	d838      	bhi.n	800d8bc <__ssputs_r+0x84>
 800d84a:	898a      	ldrh	r2, [r1, #12]
 800d84c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d850:	d032      	beq.n	800d8b8 <__ssputs_r+0x80>
 800d852:	6825      	ldr	r5, [r4, #0]
 800d854:	6909      	ldr	r1, [r1, #16]
 800d856:	eba5 0901 	sub.w	r9, r5, r1
 800d85a:	6965      	ldr	r5, [r4, #20]
 800d85c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d864:	3301      	adds	r3, #1
 800d866:	444b      	add	r3, r9
 800d868:	106d      	asrs	r5, r5, #1
 800d86a:	429d      	cmp	r5, r3
 800d86c:	bf38      	it	cc
 800d86e:	461d      	movcc	r5, r3
 800d870:	0553      	lsls	r3, r2, #21
 800d872:	d531      	bpl.n	800d8d8 <__ssputs_r+0xa0>
 800d874:	4629      	mov	r1, r5
 800d876:	f7ff ff85 	bl	800d784 <_malloc_r>
 800d87a:	4606      	mov	r6, r0
 800d87c:	b950      	cbnz	r0, 800d894 <__ssputs_r+0x5c>
 800d87e:	230c      	movs	r3, #12
 800d880:	f8ca 3000 	str.w	r3, [sl]
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d88a:	81a3      	strh	r3, [r4, #12]
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295
 800d890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d894:	6921      	ldr	r1, [r4, #16]
 800d896:	464a      	mov	r2, r9
 800d898:	f7ff fb88 	bl	800cfac <memcpy>
 800d89c:	89a3      	ldrh	r3, [r4, #12]
 800d89e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	6126      	str	r6, [r4, #16]
 800d8aa:	6165      	str	r5, [r4, #20]
 800d8ac:	444e      	add	r6, r9
 800d8ae:	eba5 0509 	sub.w	r5, r5, r9
 800d8b2:	6026      	str	r6, [r4, #0]
 800d8b4:	60a5      	str	r5, [r4, #8]
 800d8b6:	463e      	mov	r6, r7
 800d8b8:	42be      	cmp	r6, r7
 800d8ba:	d900      	bls.n	800d8be <__ssputs_r+0x86>
 800d8bc:	463e      	mov	r6, r7
 800d8be:	4632      	mov	r2, r6
 800d8c0:	6820      	ldr	r0, [r4, #0]
 800d8c2:	4641      	mov	r1, r8
 800d8c4:	f000 f966 	bl	800db94 <memmove>
 800d8c8:	68a3      	ldr	r3, [r4, #8]
 800d8ca:	6822      	ldr	r2, [r4, #0]
 800d8cc:	1b9b      	subs	r3, r3, r6
 800d8ce:	4432      	add	r2, r6
 800d8d0:	60a3      	str	r3, [r4, #8]
 800d8d2:	6022      	str	r2, [r4, #0]
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	e7db      	b.n	800d890 <__ssputs_r+0x58>
 800d8d8:	462a      	mov	r2, r5
 800d8da:	f000 f981 	bl	800dbe0 <_realloc_r>
 800d8de:	4606      	mov	r6, r0
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d1e1      	bne.n	800d8a8 <__ssputs_r+0x70>
 800d8e4:	6921      	ldr	r1, [r4, #16]
 800d8e6:	4650      	mov	r0, sl
 800d8e8:	f7ff fefc 	bl	800d6e4 <_free_r>
 800d8ec:	e7c7      	b.n	800d87e <__ssputs_r+0x46>
	...

0800d8f0 <_svfiprintf_r>:
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	4698      	mov	r8, r3
 800d8f6:	898b      	ldrh	r3, [r1, #12]
 800d8f8:	061b      	lsls	r3, r3, #24
 800d8fa:	b09d      	sub	sp, #116	; 0x74
 800d8fc:	4607      	mov	r7, r0
 800d8fe:	460d      	mov	r5, r1
 800d900:	4614      	mov	r4, r2
 800d902:	d50e      	bpl.n	800d922 <_svfiprintf_r+0x32>
 800d904:	690b      	ldr	r3, [r1, #16]
 800d906:	b963      	cbnz	r3, 800d922 <_svfiprintf_r+0x32>
 800d908:	2140      	movs	r1, #64	; 0x40
 800d90a:	f7ff ff3b 	bl	800d784 <_malloc_r>
 800d90e:	6028      	str	r0, [r5, #0]
 800d910:	6128      	str	r0, [r5, #16]
 800d912:	b920      	cbnz	r0, 800d91e <_svfiprintf_r+0x2e>
 800d914:	230c      	movs	r3, #12
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	e0d1      	b.n	800dac2 <_svfiprintf_r+0x1d2>
 800d91e:	2340      	movs	r3, #64	; 0x40
 800d920:	616b      	str	r3, [r5, #20]
 800d922:	2300      	movs	r3, #0
 800d924:	9309      	str	r3, [sp, #36]	; 0x24
 800d926:	2320      	movs	r3, #32
 800d928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d92c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d930:	2330      	movs	r3, #48	; 0x30
 800d932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dadc <_svfiprintf_r+0x1ec>
 800d936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d93a:	f04f 0901 	mov.w	r9, #1
 800d93e:	4623      	mov	r3, r4
 800d940:	469a      	mov	sl, r3
 800d942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d946:	b10a      	cbz	r2, 800d94c <_svfiprintf_r+0x5c>
 800d948:	2a25      	cmp	r2, #37	; 0x25
 800d94a:	d1f9      	bne.n	800d940 <_svfiprintf_r+0x50>
 800d94c:	ebba 0b04 	subs.w	fp, sl, r4
 800d950:	d00b      	beq.n	800d96a <_svfiprintf_r+0x7a>
 800d952:	465b      	mov	r3, fp
 800d954:	4622      	mov	r2, r4
 800d956:	4629      	mov	r1, r5
 800d958:	4638      	mov	r0, r7
 800d95a:	f7ff ff6d 	bl	800d838 <__ssputs_r>
 800d95e:	3001      	adds	r0, #1
 800d960:	f000 80aa 	beq.w	800dab8 <_svfiprintf_r+0x1c8>
 800d964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d966:	445a      	add	r2, fp
 800d968:	9209      	str	r2, [sp, #36]	; 0x24
 800d96a:	f89a 3000 	ldrb.w	r3, [sl]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f000 80a2 	beq.w	800dab8 <_svfiprintf_r+0x1c8>
 800d974:	2300      	movs	r3, #0
 800d976:	f04f 32ff 	mov.w	r2, #4294967295
 800d97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d97e:	f10a 0a01 	add.w	sl, sl, #1
 800d982:	9304      	str	r3, [sp, #16]
 800d984:	9307      	str	r3, [sp, #28]
 800d986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d98a:	931a      	str	r3, [sp, #104]	; 0x68
 800d98c:	4654      	mov	r4, sl
 800d98e:	2205      	movs	r2, #5
 800d990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d994:	4851      	ldr	r0, [pc, #324]	; (800dadc <_svfiprintf_r+0x1ec>)
 800d996:	f7f2 fc5b 	bl	8000250 <memchr>
 800d99a:	9a04      	ldr	r2, [sp, #16]
 800d99c:	b9d8      	cbnz	r0, 800d9d6 <_svfiprintf_r+0xe6>
 800d99e:	06d0      	lsls	r0, r2, #27
 800d9a0:	bf44      	itt	mi
 800d9a2:	2320      	movmi	r3, #32
 800d9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9a8:	0711      	lsls	r1, r2, #28
 800d9aa:	bf44      	itt	mi
 800d9ac:	232b      	movmi	r3, #43	; 0x2b
 800d9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d9b8:	d015      	beq.n	800d9e6 <_svfiprintf_r+0xf6>
 800d9ba:	9a07      	ldr	r2, [sp, #28]
 800d9bc:	4654      	mov	r4, sl
 800d9be:	2000      	movs	r0, #0
 800d9c0:	f04f 0c0a 	mov.w	ip, #10
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9ca:	3b30      	subs	r3, #48	; 0x30
 800d9cc:	2b09      	cmp	r3, #9
 800d9ce:	d94e      	bls.n	800da6e <_svfiprintf_r+0x17e>
 800d9d0:	b1b0      	cbz	r0, 800da00 <_svfiprintf_r+0x110>
 800d9d2:	9207      	str	r2, [sp, #28]
 800d9d4:	e014      	b.n	800da00 <_svfiprintf_r+0x110>
 800d9d6:	eba0 0308 	sub.w	r3, r0, r8
 800d9da:	fa09 f303 	lsl.w	r3, r9, r3
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	9304      	str	r3, [sp, #16]
 800d9e2:	46a2      	mov	sl, r4
 800d9e4:	e7d2      	b.n	800d98c <_svfiprintf_r+0x9c>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	1d19      	adds	r1, r3, #4
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	9103      	str	r1, [sp, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bfbb      	ittet	lt
 800d9f2:	425b      	neglt	r3, r3
 800d9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d9f8:	9307      	strge	r3, [sp, #28]
 800d9fa:	9307      	strlt	r3, [sp, #28]
 800d9fc:	bfb8      	it	lt
 800d9fe:	9204      	strlt	r2, [sp, #16]
 800da00:	7823      	ldrb	r3, [r4, #0]
 800da02:	2b2e      	cmp	r3, #46	; 0x2e
 800da04:	d10c      	bne.n	800da20 <_svfiprintf_r+0x130>
 800da06:	7863      	ldrb	r3, [r4, #1]
 800da08:	2b2a      	cmp	r3, #42	; 0x2a
 800da0a:	d135      	bne.n	800da78 <_svfiprintf_r+0x188>
 800da0c:	9b03      	ldr	r3, [sp, #12]
 800da0e:	1d1a      	adds	r2, r3, #4
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	9203      	str	r2, [sp, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	bfb8      	it	lt
 800da18:	f04f 33ff 	movlt.w	r3, #4294967295
 800da1c:	3402      	adds	r4, #2
 800da1e:	9305      	str	r3, [sp, #20]
 800da20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800daec <_svfiprintf_r+0x1fc>
 800da24:	7821      	ldrb	r1, [r4, #0]
 800da26:	2203      	movs	r2, #3
 800da28:	4650      	mov	r0, sl
 800da2a:	f7f2 fc11 	bl	8000250 <memchr>
 800da2e:	b140      	cbz	r0, 800da42 <_svfiprintf_r+0x152>
 800da30:	2340      	movs	r3, #64	; 0x40
 800da32:	eba0 000a 	sub.w	r0, r0, sl
 800da36:	fa03 f000 	lsl.w	r0, r3, r0
 800da3a:	9b04      	ldr	r3, [sp, #16]
 800da3c:	4303      	orrs	r3, r0
 800da3e:	3401      	adds	r4, #1
 800da40:	9304      	str	r3, [sp, #16]
 800da42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da46:	4826      	ldr	r0, [pc, #152]	; (800dae0 <_svfiprintf_r+0x1f0>)
 800da48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da4c:	2206      	movs	r2, #6
 800da4e:	f7f2 fbff 	bl	8000250 <memchr>
 800da52:	2800      	cmp	r0, #0
 800da54:	d038      	beq.n	800dac8 <_svfiprintf_r+0x1d8>
 800da56:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <_svfiprintf_r+0x1f4>)
 800da58:	bb1b      	cbnz	r3, 800daa2 <_svfiprintf_r+0x1b2>
 800da5a:	9b03      	ldr	r3, [sp, #12]
 800da5c:	3307      	adds	r3, #7
 800da5e:	f023 0307 	bic.w	r3, r3, #7
 800da62:	3308      	adds	r3, #8
 800da64:	9303      	str	r3, [sp, #12]
 800da66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da68:	4433      	add	r3, r6
 800da6a:	9309      	str	r3, [sp, #36]	; 0x24
 800da6c:	e767      	b.n	800d93e <_svfiprintf_r+0x4e>
 800da6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800da72:	460c      	mov	r4, r1
 800da74:	2001      	movs	r0, #1
 800da76:	e7a5      	b.n	800d9c4 <_svfiprintf_r+0xd4>
 800da78:	2300      	movs	r3, #0
 800da7a:	3401      	adds	r4, #1
 800da7c:	9305      	str	r3, [sp, #20]
 800da7e:	4619      	mov	r1, r3
 800da80:	f04f 0c0a 	mov.w	ip, #10
 800da84:	4620      	mov	r0, r4
 800da86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da8a:	3a30      	subs	r2, #48	; 0x30
 800da8c:	2a09      	cmp	r2, #9
 800da8e:	d903      	bls.n	800da98 <_svfiprintf_r+0x1a8>
 800da90:	2b00      	cmp	r3, #0
 800da92:	d0c5      	beq.n	800da20 <_svfiprintf_r+0x130>
 800da94:	9105      	str	r1, [sp, #20]
 800da96:	e7c3      	b.n	800da20 <_svfiprintf_r+0x130>
 800da98:	fb0c 2101 	mla	r1, ip, r1, r2
 800da9c:	4604      	mov	r4, r0
 800da9e:	2301      	movs	r3, #1
 800daa0:	e7f0      	b.n	800da84 <_svfiprintf_r+0x194>
 800daa2:	ab03      	add	r3, sp, #12
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	462a      	mov	r2, r5
 800daa8:	4b0f      	ldr	r3, [pc, #60]	; (800dae8 <_svfiprintf_r+0x1f8>)
 800daaa:	a904      	add	r1, sp, #16
 800daac:	4638      	mov	r0, r7
 800daae:	f7fe f88f 	bl	800bbd0 <_printf_float>
 800dab2:	1c42      	adds	r2, r0, #1
 800dab4:	4606      	mov	r6, r0
 800dab6:	d1d6      	bne.n	800da66 <_svfiprintf_r+0x176>
 800dab8:	89ab      	ldrh	r3, [r5, #12]
 800daba:	065b      	lsls	r3, r3, #25
 800dabc:	f53f af2c 	bmi.w	800d918 <_svfiprintf_r+0x28>
 800dac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dac2:	b01d      	add	sp, #116	; 0x74
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	ab03      	add	r3, sp, #12
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	462a      	mov	r2, r5
 800dace:	4b06      	ldr	r3, [pc, #24]	; (800dae8 <_svfiprintf_r+0x1f8>)
 800dad0:	a904      	add	r1, sp, #16
 800dad2:	4638      	mov	r0, r7
 800dad4:	f7fe fb08 	bl	800c0e8 <_printf_i>
 800dad8:	e7eb      	b.n	800dab2 <_svfiprintf_r+0x1c2>
 800dada:	bf00      	nop
 800dadc:	0800ecdc 	.word	0x0800ecdc
 800dae0:	0800ece6 	.word	0x0800ece6
 800dae4:	0800bbd1 	.word	0x0800bbd1
 800dae8:	0800d839 	.word	0x0800d839
 800daec:	0800ece2 	.word	0x0800ece2

0800daf0 <_sbrk_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4d06      	ldr	r5, [pc, #24]	; (800db0c <_sbrk_r+0x1c>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	602b      	str	r3, [r5, #0]
 800dafc:	f7f7 f950 	bl	8004da0 <_sbrk>
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	d102      	bne.n	800db0a <_sbrk_r+0x1a>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	b103      	cbz	r3, 800db0a <_sbrk_r+0x1a>
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	bd38      	pop	{r3, r4, r5, pc}
 800db0c:	200007bc 	.word	0x200007bc

0800db10 <__assert_func>:
 800db10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db12:	4614      	mov	r4, r2
 800db14:	461a      	mov	r2, r3
 800db16:	4b09      	ldr	r3, [pc, #36]	; (800db3c <__assert_func+0x2c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4605      	mov	r5, r0
 800db1c:	68d8      	ldr	r0, [r3, #12]
 800db1e:	b14c      	cbz	r4, 800db34 <__assert_func+0x24>
 800db20:	4b07      	ldr	r3, [pc, #28]	; (800db40 <__assert_func+0x30>)
 800db22:	9100      	str	r1, [sp, #0]
 800db24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db28:	4906      	ldr	r1, [pc, #24]	; (800db44 <__assert_func+0x34>)
 800db2a:	462b      	mov	r3, r5
 800db2c:	f000 f80e 	bl	800db4c <fiprintf>
 800db30:	f000 faa4 	bl	800e07c <abort>
 800db34:	4b04      	ldr	r3, [pc, #16]	; (800db48 <__assert_func+0x38>)
 800db36:	461c      	mov	r4, r3
 800db38:	e7f3      	b.n	800db22 <__assert_func+0x12>
 800db3a:	bf00      	nop
 800db3c:	200000dc 	.word	0x200000dc
 800db40:	0800eced 	.word	0x0800eced
 800db44:	0800ecfa 	.word	0x0800ecfa
 800db48:	0800ed28 	.word	0x0800ed28

0800db4c <fiprintf>:
 800db4c:	b40e      	push	{r1, r2, r3}
 800db4e:	b503      	push	{r0, r1, lr}
 800db50:	4601      	mov	r1, r0
 800db52:	ab03      	add	r3, sp, #12
 800db54:	4805      	ldr	r0, [pc, #20]	; (800db6c <fiprintf+0x20>)
 800db56:	f853 2b04 	ldr.w	r2, [r3], #4
 800db5a:	6800      	ldr	r0, [r0, #0]
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	f000 f88f 	bl	800dc80 <_vfiprintf_r>
 800db62:	b002      	add	sp, #8
 800db64:	f85d eb04 	ldr.w	lr, [sp], #4
 800db68:	b003      	add	sp, #12
 800db6a:	4770      	bx	lr
 800db6c:	200000dc 	.word	0x200000dc

0800db70 <__ascii_mbtowc>:
 800db70:	b082      	sub	sp, #8
 800db72:	b901      	cbnz	r1, 800db76 <__ascii_mbtowc+0x6>
 800db74:	a901      	add	r1, sp, #4
 800db76:	b142      	cbz	r2, 800db8a <__ascii_mbtowc+0x1a>
 800db78:	b14b      	cbz	r3, 800db8e <__ascii_mbtowc+0x1e>
 800db7a:	7813      	ldrb	r3, [r2, #0]
 800db7c:	600b      	str	r3, [r1, #0]
 800db7e:	7812      	ldrb	r2, [r2, #0]
 800db80:	1e10      	subs	r0, r2, #0
 800db82:	bf18      	it	ne
 800db84:	2001      	movne	r0, #1
 800db86:	b002      	add	sp, #8
 800db88:	4770      	bx	lr
 800db8a:	4610      	mov	r0, r2
 800db8c:	e7fb      	b.n	800db86 <__ascii_mbtowc+0x16>
 800db8e:	f06f 0001 	mvn.w	r0, #1
 800db92:	e7f8      	b.n	800db86 <__ascii_mbtowc+0x16>

0800db94 <memmove>:
 800db94:	4288      	cmp	r0, r1
 800db96:	b510      	push	{r4, lr}
 800db98:	eb01 0402 	add.w	r4, r1, r2
 800db9c:	d902      	bls.n	800dba4 <memmove+0x10>
 800db9e:	4284      	cmp	r4, r0
 800dba0:	4623      	mov	r3, r4
 800dba2:	d807      	bhi.n	800dbb4 <memmove+0x20>
 800dba4:	1e43      	subs	r3, r0, #1
 800dba6:	42a1      	cmp	r1, r4
 800dba8:	d008      	beq.n	800dbbc <memmove+0x28>
 800dbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbb2:	e7f8      	b.n	800dba6 <memmove+0x12>
 800dbb4:	4402      	add	r2, r0
 800dbb6:	4601      	mov	r1, r0
 800dbb8:	428a      	cmp	r2, r1
 800dbba:	d100      	bne.n	800dbbe <memmove+0x2a>
 800dbbc:	bd10      	pop	{r4, pc}
 800dbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbc6:	e7f7      	b.n	800dbb8 <memmove+0x24>

0800dbc8 <__malloc_lock>:
 800dbc8:	4801      	ldr	r0, [pc, #4]	; (800dbd0 <__malloc_lock+0x8>)
 800dbca:	f000 bc17 	b.w	800e3fc <__retarget_lock_acquire_recursive>
 800dbce:	bf00      	nop
 800dbd0:	200007c4 	.word	0x200007c4

0800dbd4 <__malloc_unlock>:
 800dbd4:	4801      	ldr	r0, [pc, #4]	; (800dbdc <__malloc_unlock+0x8>)
 800dbd6:	f000 bc12 	b.w	800e3fe <__retarget_lock_release_recursive>
 800dbda:	bf00      	nop
 800dbdc:	200007c4 	.word	0x200007c4

0800dbe0 <_realloc_r>:
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	4607      	mov	r7, r0
 800dbe4:	4614      	mov	r4, r2
 800dbe6:	460e      	mov	r6, r1
 800dbe8:	b921      	cbnz	r1, 800dbf4 <_realloc_r+0x14>
 800dbea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbee:	4611      	mov	r1, r2
 800dbf0:	f7ff bdc8 	b.w	800d784 <_malloc_r>
 800dbf4:	b922      	cbnz	r2, 800dc00 <_realloc_r+0x20>
 800dbf6:	f7ff fd75 	bl	800d6e4 <_free_r>
 800dbfa:	4625      	mov	r5, r4
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc00:	f000 fc62 	bl	800e4c8 <_malloc_usable_size_r>
 800dc04:	42a0      	cmp	r0, r4
 800dc06:	d20f      	bcs.n	800dc28 <_realloc_r+0x48>
 800dc08:	4621      	mov	r1, r4
 800dc0a:	4638      	mov	r0, r7
 800dc0c:	f7ff fdba 	bl	800d784 <_malloc_r>
 800dc10:	4605      	mov	r5, r0
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d0f2      	beq.n	800dbfc <_realloc_r+0x1c>
 800dc16:	4631      	mov	r1, r6
 800dc18:	4622      	mov	r2, r4
 800dc1a:	f7ff f9c7 	bl	800cfac <memcpy>
 800dc1e:	4631      	mov	r1, r6
 800dc20:	4638      	mov	r0, r7
 800dc22:	f7ff fd5f 	bl	800d6e4 <_free_r>
 800dc26:	e7e9      	b.n	800dbfc <_realloc_r+0x1c>
 800dc28:	4635      	mov	r5, r6
 800dc2a:	e7e7      	b.n	800dbfc <_realloc_r+0x1c>

0800dc2c <__sfputc_r>:
 800dc2c:	6893      	ldr	r3, [r2, #8]
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	b410      	push	{r4}
 800dc34:	6093      	str	r3, [r2, #8]
 800dc36:	da08      	bge.n	800dc4a <__sfputc_r+0x1e>
 800dc38:	6994      	ldr	r4, [r2, #24]
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	db01      	blt.n	800dc42 <__sfputc_r+0x16>
 800dc3e:	290a      	cmp	r1, #10
 800dc40:	d103      	bne.n	800dc4a <__sfputc_r+0x1e>
 800dc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc46:	f000 b94b 	b.w	800dee0 <__swbuf_r>
 800dc4a:	6813      	ldr	r3, [r2, #0]
 800dc4c:	1c58      	adds	r0, r3, #1
 800dc4e:	6010      	str	r0, [r2, #0]
 800dc50:	7019      	strb	r1, [r3, #0]
 800dc52:	4608      	mov	r0, r1
 800dc54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <__sfputs_r>:
 800dc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	460f      	mov	r7, r1
 800dc60:	4614      	mov	r4, r2
 800dc62:	18d5      	adds	r5, r2, r3
 800dc64:	42ac      	cmp	r4, r5
 800dc66:	d101      	bne.n	800dc6c <__sfputs_r+0x12>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e007      	b.n	800dc7c <__sfputs_r+0x22>
 800dc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc70:	463a      	mov	r2, r7
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7ff ffda 	bl	800dc2c <__sfputc_r>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d1f3      	bne.n	800dc64 <__sfputs_r+0xa>
 800dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc80 <_vfiprintf_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	460d      	mov	r5, r1
 800dc86:	b09d      	sub	sp, #116	; 0x74
 800dc88:	4614      	mov	r4, r2
 800dc8a:	4698      	mov	r8, r3
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	b118      	cbz	r0, 800dc98 <_vfiprintf_r+0x18>
 800dc90:	6983      	ldr	r3, [r0, #24]
 800dc92:	b90b      	cbnz	r3, 800dc98 <_vfiprintf_r+0x18>
 800dc94:	f000 fb14 	bl	800e2c0 <__sinit>
 800dc98:	4b89      	ldr	r3, [pc, #548]	; (800dec0 <_vfiprintf_r+0x240>)
 800dc9a:	429d      	cmp	r5, r3
 800dc9c:	d11b      	bne.n	800dcd6 <_vfiprintf_r+0x56>
 800dc9e:	6875      	ldr	r5, [r6, #4]
 800dca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dca2:	07d9      	lsls	r1, r3, #31
 800dca4:	d405      	bmi.n	800dcb2 <_vfiprintf_r+0x32>
 800dca6:	89ab      	ldrh	r3, [r5, #12]
 800dca8:	059a      	lsls	r2, r3, #22
 800dcaa:	d402      	bmi.n	800dcb2 <_vfiprintf_r+0x32>
 800dcac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcae:	f000 fba5 	bl	800e3fc <__retarget_lock_acquire_recursive>
 800dcb2:	89ab      	ldrh	r3, [r5, #12]
 800dcb4:	071b      	lsls	r3, r3, #28
 800dcb6:	d501      	bpl.n	800dcbc <_vfiprintf_r+0x3c>
 800dcb8:	692b      	ldr	r3, [r5, #16]
 800dcba:	b9eb      	cbnz	r3, 800dcf8 <_vfiprintf_r+0x78>
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f000 f96e 	bl	800dfa0 <__swsetup_r>
 800dcc4:	b1c0      	cbz	r0, 800dcf8 <_vfiprintf_r+0x78>
 800dcc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcc8:	07dc      	lsls	r4, r3, #31
 800dcca:	d50e      	bpl.n	800dcea <_vfiprintf_r+0x6a>
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd0:	b01d      	add	sp, #116	; 0x74
 800dcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd6:	4b7b      	ldr	r3, [pc, #492]	; (800dec4 <_vfiprintf_r+0x244>)
 800dcd8:	429d      	cmp	r5, r3
 800dcda:	d101      	bne.n	800dce0 <_vfiprintf_r+0x60>
 800dcdc:	68b5      	ldr	r5, [r6, #8]
 800dcde:	e7df      	b.n	800dca0 <_vfiprintf_r+0x20>
 800dce0:	4b79      	ldr	r3, [pc, #484]	; (800dec8 <_vfiprintf_r+0x248>)
 800dce2:	429d      	cmp	r5, r3
 800dce4:	bf08      	it	eq
 800dce6:	68f5      	ldreq	r5, [r6, #12]
 800dce8:	e7da      	b.n	800dca0 <_vfiprintf_r+0x20>
 800dcea:	89ab      	ldrh	r3, [r5, #12]
 800dcec:	0598      	lsls	r0, r3, #22
 800dcee:	d4ed      	bmi.n	800dccc <_vfiprintf_r+0x4c>
 800dcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf2:	f000 fb84 	bl	800e3fe <__retarget_lock_release_recursive>
 800dcf6:	e7e9      	b.n	800dccc <_vfiprintf_r+0x4c>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800dcfc:	2320      	movs	r3, #32
 800dcfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd02:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd06:	2330      	movs	r3, #48	; 0x30
 800dd08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800decc <_vfiprintf_r+0x24c>
 800dd0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd10:	f04f 0901 	mov.w	r9, #1
 800dd14:	4623      	mov	r3, r4
 800dd16:	469a      	mov	sl, r3
 800dd18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd1c:	b10a      	cbz	r2, 800dd22 <_vfiprintf_r+0xa2>
 800dd1e:	2a25      	cmp	r2, #37	; 0x25
 800dd20:	d1f9      	bne.n	800dd16 <_vfiprintf_r+0x96>
 800dd22:	ebba 0b04 	subs.w	fp, sl, r4
 800dd26:	d00b      	beq.n	800dd40 <_vfiprintf_r+0xc0>
 800dd28:	465b      	mov	r3, fp
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	4630      	mov	r0, r6
 800dd30:	f7ff ff93 	bl	800dc5a <__sfputs_r>
 800dd34:	3001      	adds	r0, #1
 800dd36:	f000 80aa 	beq.w	800de8e <_vfiprintf_r+0x20e>
 800dd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd3c:	445a      	add	r2, fp
 800dd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd40:	f89a 3000 	ldrb.w	r3, [sl]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 80a2 	beq.w	800de8e <_vfiprintf_r+0x20e>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd54:	f10a 0a01 	add.w	sl, sl, #1
 800dd58:	9304      	str	r3, [sp, #16]
 800dd5a:	9307      	str	r3, [sp, #28]
 800dd5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd60:	931a      	str	r3, [sp, #104]	; 0x68
 800dd62:	4654      	mov	r4, sl
 800dd64:	2205      	movs	r2, #5
 800dd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd6a:	4858      	ldr	r0, [pc, #352]	; (800decc <_vfiprintf_r+0x24c>)
 800dd6c:	f7f2 fa70 	bl	8000250 <memchr>
 800dd70:	9a04      	ldr	r2, [sp, #16]
 800dd72:	b9d8      	cbnz	r0, 800ddac <_vfiprintf_r+0x12c>
 800dd74:	06d1      	lsls	r1, r2, #27
 800dd76:	bf44      	itt	mi
 800dd78:	2320      	movmi	r3, #32
 800dd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd7e:	0713      	lsls	r3, r2, #28
 800dd80:	bf44      	itt	mi
 800dd82:	232b      	movmi	r3, #43	; 0x2b
 800dd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd88:	f89a 3000 	ldrb.w	r3, [sl]
 800dd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd8e:	d015      	beq.n	800ddbc <_vfiprintf_r+0x13c>
 800dd90:	9a07      	ldr	r2, [sp, #28]
 800dd92:	4654      	mov	r4, sl
 800dd94:	2000      	movs	r0, #0
 800dd96:	f04f 0c0a 	mov.w	ip, #10
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dda0:	3b30      	subs	r3, #48	; 0x30
 800dda2:	2b09      	cmp	r3, #9
 800dda4:	d94e      	bls.n	800de44 <_vfiprintf_r+0x1c4>
 800dda6:	b1b0      	cbz	r0, 800ddd6 <_vfiprintf_r+0x156>
 800dda8:	9207      	str	r2, [sp, #28]
 800ddaa:	e014      	b.n	800ddd6 <_vfiprintf_r+0x156>
 800ddac:	eba0 0308 	sub.w	r3, r0, r8
 800ddb0:	fa09 f303 	lsl.w	r3, r9, r3
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	9304      	str	r3, [sp, #16]
 800ddb8:	46a2      	mov	sl, r4
 800ddba:	e7d2      	b.n	800dd62 <_vfiprintf_r+0xe2>
 800ddbc:	9b03      	ldr	r3, [sp, #12]
 800ddbe:	1d19      	adds	r1, r3, #4
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	9103      	str	r1, [sp, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	bfbb      	ittet	lt
 800ddc8:	425b      	neglt	r3, r3
 800ddca:	f042 0202 	orrlt.w	r2, r2, #2
 800ddce:	9307      	strge	r3, [sp, #28]
 800ddd0:	9307      	strlt	r3, [sp, #28]
 800ddd2:	bfb8      	it	lt
 800ddd4:	9204      	strlt	r2, [sp, #16]
 800ddd6:	7823      	ldrb	r3, [r4, #0]
 800ddd8:	2b2e      	cmp	r3, #46	; 0x2e
 800ddda:	d10c      	bne.n	800ddf6 <_vfiprintf_r+0x176>
 800dddc:	7863      	ldrb	r3, [r4, #1]
 800ddde:	2b2a      	cmp	r3, #42	; 0x2a
 800dde0:	d135      	bne.n	800de4e <_vfiprintf_r+0x1ce>
 800dde2:	9b03      	ldr	r3, [sp, #12]
 800dde4:	1d1a      	adds	r2, r3, #4
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	9203      	str	r2, [sp, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	bfb8      	it	lt
 800ddee:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddf2:	3402      	adds	r4, #2
 800ddf4:	9305      	str	r3, [sp, #20]
 800ddf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dedc <_vfiprintf_r+0x25c>
 800ddfa:	7821      	ldrb	r1, [r4, #0]
 800ddfc:	2203      	movs	r2, #3
 800ddfe:	4650      	mov	r0, sl
 800de00:	f7f2 fa26 	bl	8000250 <memchr>
 800de04:	b140      	cbz	r0, 800de18 <_vfiprintf_r+0x198>
 800de06:	2340      	movs	r3, #64	; 0x40
 800de08:	eba0 000a 	sub.w	r0, r0, sl
 800de0c:	fa03 f000 	lsl.w	r0, r3, r0
 800de10:	9b04      	ldr	r3, [sp, #16]
 800de12:	4303      	orrs	r3, r0
 800de14:	3401      	adds	r4, #1
 800de16:	9304      	str	r3, [sp, #16]
 800de18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de1c:	482c      	ldr	r0, [pc, #176]	; (800ded0 <_vfiprintf_r+0x250>)
 800de1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de22:	2206      	movs	r2, #6
 800de24:	f7f2 fa14 	bl	8000250 <memchr>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d03f      	beq.n	800deac <_vfiprintf_r+0x22c>
 800de2c:	4b29      	ldr	r3, [pc, #164]	; (800ded4 <_vfiprintf_r+0x254>)
 800de2e:	bb1b      	cbnz	r3, 800de78 <_vfiprintf_r+0x1f8>
 800de30:	9b03      	ldr	r3, [sp, #12]
 800de32:	3307      	adds	r3, #7
 800de34:	f023 0307 	bic.w	r3, r3, #7
 800de38:	3308      	adds	r3, #8
 800de3a:	9303      	str	r3, [sp, #12]
 800de3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3e:	443b      	add	r3, r7
 800de40:	9309      	str	r3, [sp, #36]	; 0x24
 800de42:	e767      	b.n	800dd14 <_vfiprintf_r+0x94>
 800de44:	fb0c 3202 	mla	r2, ip, r2, r3
 800de48:	460c      	mov	r4, r1
 800de4a:	2001      	movs	r0, #1
 800de4c:	e7a5      	b.n	800dd9a <_vfiprintf_r+0x11a>
 800de4e:	2300      	movs	r3, #0
 800de50:	3401      	adds	r4, #1
 800de52:	9305      	str	r3, [sp, #20]
 800de54:	4619      	mov	r1, r3
 800de56:	f04f 0c0a 	mov.w	ip, #10
 800de5a:	4620      	mov	r0, r4
 800de5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de60:	3a30      	subs	r2, #48	; 0x30
 800de62:	2a09      	cmp	r2, #9
 800de64:	d903      	bls.n	800de6e <_vfiprintf_r+0x1ee>
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0c5      	beq.n	800ddf6 <_vfiprintf_r+0x176>
 800de6a:	9105      	str	r1, [sp, #20]
 800de6c:	e7c3      	b.n	800ddf6 <_vfiprintf_r+0x176>
 800de6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800de72:	4604      	mov	r4, r0
 800de74:	2301      	movs	r3, #1
 800de76:	e7f0      	b.n	800de5a <_vfiprintf_r+0x1da>
 800de78:	ab03      	add	r3, sp, #12
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	462a      	mov	r2, r5
 800de7e:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <_vfiprintf_r+0x258>)
 800de80:	a904      	add	r1, sp, #16
 800de82:	4630      	mov	r0, r6
 800de84:	f7fd fea4 	bl	800bbd0 <_printf_float>
 800de88:	4607      	mov	r7, r0
 800de8a:	1c78      	adds	r0, r7, #1
 800de8c:	d1d6      	bne.n	800de3c <_vfiprintf_r+0x1bc>
 800de8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de90:	07d9      	lsls	r1, r3, #31
 800de92:	d405      	bmi.n	800dea0 <_vfiprintf_r+0x220>
 800de94:	89ab      	ldrh	r3, [r5, #12]
 800de96:	059a      	lsls	r2, r3, #22
 800de98:	d402      	bmi.n	800dea0 <_vfiprintf_r+0x220>
 800de9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de9c:	f000 faaf 	bl	800e3fe <__retarget_lock_release_recursive>
 800dea0:	89ab      	ldrh	r3, [r5, #12]
 800dea2:	065b      	lsls	r3, r3, #25
 800dea4:	f53f af12 	bmi.w	800dccc <_vfiprintf_r+0x4c>
 800dea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deaa:	e711      	b.n	800dcd0 <_vfiprintf_r+0x50>
 800deac:	ab03      	add	r3, sp, #12
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	462a      	mov	r2, r5
 800deb2:	4b09      	ldr	r3, [pc, #36]	; (800ded8 <_vfiprintf_r+0x258>)
 800deb4:	a904      	add	r1, sp, #16
 800deb6:	4630      	mov	r0, r6
 800deb8:	f7fe f916 	bl	800c0e8 <_printf_i>
 800debc:	e7e4      	b.n	800de88 <_vfiprintf_r+0x208>
 800debe:	bf00      	nop
 800dec0:	0800ee54 	.word	0x0800ee54
 800dec4:	0800ee74 	.word	0x0800ee74
 800dec8:	0800ee34 	.word	0x0800ee34
 800decc:	0800ecdc 	.word	0x0800ecdc
 800ded0:	0800ece6 	.word	0x0800ece6
 800ded4:	0800bbd1 	.word	0x0800bbd1
 800ded8:	0800dc5b 	.word	0x0800dc5b
 800dedc:	0800ece2 	.word	0x0800ece2

0800dee0 <__swbuf_r>:
 800dee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee2:	460e      	mov	r6, r1
 800dee4:	4614      	mov	r4, r2
 800dee6:	4605      	mov	r5, r0
 800dee8:	b118      	cbz	r0, 800def2 <__swbuf_r+0x12>
 800deea:	6983      	ldr	r3, [r0, #24]
 800deec:	b90b      	cbnz	r3, 800def2 <__swbuf_r+0x12>
 800deee:	f000 f9e7 	bl	800e2c0 <__sinit>
 800def2:	4b21      	ldr	r3, [pc, #132]	; (800df78 <__swbuf_r+0x98>)
 800def4:	429c      	cmp	r4, r3
 800def6:	d12b      	bne.n	800df50 <__swbuf_r+0x70>
 800def8:	686c      	ldr	r4, [r5, #4]
 800defa:	69a3      	ldr	r3, [r4, #24]
 800defc:	60a3      	str	r3, [r4, #8]
 800defe:	89a3      	ldrh	r3, [r4, #12]
 800df00:	071a      	lsls	r2, r3, #28
 800df02:	d52f      	bpl.n	800df64 <__swbuf_r+0x84>
 800df04:	6923      	ldr	r3, [r4, #16]
 800df06:	b36b      	cbz	r3, 800df64 <__swbuf_r+0x84>
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	6820      	ldr	r0, [r4, #0]
 800df0c:	1ac0      	subs	r0, r0, r3
 800df0e:	6963      	ldr	r3, [r4, #20]
 800df10:	b2f6      	uxtb	r6, r6
 800df12:	4283      	cmp	r3, r0
 800df14:	4637      	mov	r7, r6
 800df16:	dc04      	bgt.n	800df22 <__swbuf_r+0x42>
 800df18:	4621      	mov	r1, r4
 800df1a:	4628      	mov	r0, r5
 800df1c:	f000 f93c 	bl	800e198 <_fflush_r>
 800df20:	bb30      	cbnz	r0, 800df70 <__swbuf_r+0x90>
 800df22:	68a3      	ldr	r3, [r4, #8]
 800df24:	3b01      	subs	r3, #1
 800df26:	60a3      	str	r3, [r4, #8]
 800df28:	6823      	ldr	r3, [r4, #0]
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	6022      	str	r2, [r4, #0]
 800df2e:	701e      	strb	r6, [r3, #0]
 800df30:	6963      	ldr	r3, [r4, #20]
 800df32:	3001      	adds	r0, #1
 800df34:	4283      	cmp	r3, r0
 800df36:	d004      	beq.n	800df42 <__swbuf_r+0x62>
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	07db      	lsls	r3, r3, #31
 800df3c:	d506      	bpl.n	800df4c <__swbuf_r+0x6c>
 800df3e:	2e0a      	cmp	r6, #10
 800df40:	d104      	bne.n	800df4c <__swbuf_r+0x6c>
 800df42:	4621      	mov	r1, r4
 800df44:	4628      	mov	r0, r5
 800df46:	f000 f927 	bl	800e198 <_fflush_r>
 800df4a:	b988      	cbnz	r0, 800df70 <__swbuf_r+0x90>
 800df4c:	4638      	mov	r0, r7
 800df4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df50:	4b0a      	ldr	r3, [pc, #40]	; (800df7c <__swbuf_r+0x9c>)
 800df52:	429c      	cmp	r4, r3
 800df54:	d101      	bne.n	800df5a <__swbuf_r+0x7a>
 800df56:	68ac      	ldr	r4, [r5, #8]
 800df58:	e7cf      	b.n	800defa <__swbuf_r+0x1a>
 800df5a:	4b09      	ldr	r3, [pc, #36]	; (800df80 <__swbuf_r+0xa0>)
 800df5c:	429c      	cmp	r4, r3
 800df5e:	bf08      	it	eq
 800df60:	68ec      	ldreq	r4, [r5, #12]
 800df62:	e7ca      	b.n	800defa <__swbuf_r+0x1a>
 800df64:	4621      	mov	r1, r4
 800df66:	4628      	mov	r0, r5
 800df68:	f000 f81a 	bl	800dfa0 <__swsetup_r>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d0cb      	beq.n	800df08 <__swbuf_r+0x28>
 800df70:	f04f 37ff 	mov.w	r7, #4294967295
 800df74:	e7ea      	b.n	800df4c <__swbuf_r+0x6c>
 800df76:	bf00      	nop
 800df78:	0800ee54 	.word	0x0800ee54
 800df7c:	0800ee74 	.word	0x0800ee74
 800df80:	0800ee34 	.word	0x0800ee34

0800df84 <__ascii_wctomb>:
 800df84:	b149      	cbz	r1, 800df9a <__ascii_wctomb+0x16>
 800df86:	2aff      	cmp	r2, #255	; 0xff
 800df88:	bf85      	ittet	hi
 800df8a:	238a      	movhi	r3, #138	; 0x8a
 800df8c:	6003      	strhi	r3, [r0, #0]
 800df8e:	700a      	strbls	r2, [r1, #0]
 800df90:	f04f 30ff 	movhi.w	r0, #4294967295
 800df94:	bf98      	it	ls
 800df96:	2001      	movls	r0, #1
 800df98:	4770      	bx	lr
 800df9a:	4608      	mov	r0, r1
 800df9c:	4770      	bx	lr
	...

0800dfa0 <__swsetup_r>:
 800dfa0:	4b32      	ldr	r3, [pc, #200]	; (800e06c <__swsetup_r+0xcc>)
 800dfa2:	b570      	push	{r4, r5, r6, lr}
 800dfa4:	681d      	ldr	r5, [r3, #0]
 800dfa6:	4606      	mov	r6, r0
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	b125      	cbz	r5, 800dfb6 <__swsetup_r+0x16>
 800dfac:	69ab      	ldr	r3, [r5, #24]
 800dfae:	b913      	cbnz	r3, 800dfb6 <__swsetup_r+0x16>
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f000 f985 	bl	800e2c0 <__sinit>
 800dfb6:	4b2e      	ldr	r3, [pc, #184]	; (800e070 <__swsetup_r+0xd0>)
 800dfb8:	429c      	cmp	r4, r3
 800dfba:	d10f      	bne.n	800dfdc <__swsetup_r+0x3c>
 800dfbc:	686c      	ldr	r4, [r5, #4]
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfc4:	0719      	lsls	r1, r3, #28
 800dfc6:	d42c      	bmi.n	800e022 <__swsetup_r+0x82>
 800dfc8:	06dd      	lsls	r5, r3, #27
 800dfca:	d411      	bmi.n	800dff0 <__swsetup_r+0x50>
 800dfcc:	2309      	movs	r3, #9
 800dfce:	6033      	str	r3, [r6, #0]
 800dfd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfd4:	81a3      	strh	r3, [r4, #12]
 800dfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfda:	e03e      	b.n	800e05a <__swsetup_r+0xba>
 800dfdc:	4b25      	ldr	r3, [pc, #148]	; (800e074 <__swsetup_r+0xd4>)
 800dfde:	429c      	cmp	r4, r3
 800dfe0:	d101      	bne.n	800dfe6 <__swsetup_r+0x46>
 800dfe2:	68ac      	ldr	r4, [r5, #8]
 800dfe4:	e7eb      	b.n	800dfbe <__swsetup_r+0x1e>
 800dfe6:	4b24      	ldr	r3, [pc, #144]	; (800e078 <__swsetup_r+0xd8>)
 800dfe8:	429c      	cmp	r4, r3
 800dfea:	bf08      	it	eq
 800dfec:	68ec      	ldreq	r4, [r5, #12]
 800dfee:	e7e6      	b.n	800dfbe <__swsetup_r+0x1e>
 800dff0:	0758      	lsls	r0, r3, #29
 800dff2:	d512      	bpl.n	800e01a <__swsetup_r+0x7a>
 800dff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dff6:	b141      	cbz	r1, 800e00a <__swsetup_r+0x6a>
 800dff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dffc:	4299      	cmp	r1, r3
 800dffe:	d002      	beq.n	800e006 <__swsetup_r+0x66>
 800e000:	4630      	mov	r0, r6
 800e002:	f7ff fb6f 	bl	800d6e4 <_free_r>
 800e006:	2300      	movs	r3, #0
 800e008:	6363      	str	r3, [r4, #52]	; 0x34
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	2300      	movs	r3, #0
 800e014:	6063      	str	r3, [r4, #4]
 800e016:	6923      	ldr	r3, [r4, #16]
 800e018:	6023      	str	r3, [r4, #0]
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	f043 0308 	orr.w	r3, r3, #8
 800e020:	81a3      	strh	r3, [r4, #12]
 800e022:	6923      	ldr	r3, [r4, #16]
 800e024:	b94b      	cbnz	r3, 800e03a <__swsetup_r+0x9a>
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e030:	d003      	beq.n	800e03a <__swsetup_r+0x9a>
 800e032:	4621      	mov	r1, r4
 800e034:	4630      	mov	r0, r6
 800e036:	f000 fa07 	bl	800e448 <__smakebuf_r>
 800e03a:	89a0      	ldrh	r0, [r4, #12]
 800e03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e040:	f010 0301 	ands.w	r3, r0, #1
 800e044:	d00a      	beq.n	800e05c <__swsetup_r+0xbc>
 800e046:	2300      	movs	r3, #0
 800e048:	60a3      	str	r3, [r4, #8]
 800e04a:	6963      	ldr	r3, [r4, #20]
 800e04c:	425b      	negs	r3, r3
 800e04e:	61a3      	str	r3, [r4, #24]
 800e050:	6923      	ldr	r3, [r4, #16]
 800e052:	b943      	cbnz	r3, 800e066 <__swsetup_r+0xc6>
 800e054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e058:	d1ba      	bne.n	800dfd0 <__swsetup_r+0x30>
 800e05a:	bd70      	pop	{r4, r5, r6, pc}
 800e05c:	0781      	lsls	r1, r0, #30
 800e05e:	bf58      	it	pl
 800e060:	6963      	ldrpl	r3, [r4, #20]
 800e062:	60a3      	str	r3, [r4, #8]
 800e064:	e7f4      	b.n	800e050 <__swsetup_r+0xb0>
 800e066:	2000      	movs	r0, #0
 800e068:	e7f7      	b.n	800e05a <__swsetup_r+0xba>
 800e06a:	bf00      	nop
 800e06c:	200000dc 	.word	0x200000dc
 800e070:	0800ee54 	.word	0x0800ee54
 800e074:	0800ee74 	.word	0x0800ee74
 800e078:	0800ee34 	.word	0x0800ee34

0800e07c <abort>:
 800e07c:	b508      	push	{r3, lr}
 800e07e:	2006      	movs	r0, #6
 800e080:	f000 fa52 	bl	800e528 <raise>
 800e084:	2001      	movs	r0, #1
 800e086:	f7f6 fe13 	bl	8004cb0 <_exit>
	...

0800e08c <__sflush_r>:
 800e08c:	898a      	ldrh	r2, [r1, #12]
 800e08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e092:	4605      	mov	r5, r0
 800e094:	0710      	lsls	r0, r2, #28
 800e096:	460c      	mov	r4, r1
 800e098:	d458      	bmi.n	800e14c <__sflush_r+0xc0>
 800e09a:	684b      	ldr	r3, [r1, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	dc05      	bgt.n	800e0ac <__sflush_r+0x20>
 800e0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dc02      	bgt.n	800e0ac <__sflush_r+0x20>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0ae:	2e00      	cmp	r6, #0
 800e0b0:	d0f9      	beq.n	800e0a6 <__sflush_r+0x1a>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0b8:	682f      	ldr	r7, [r5, #0]
 800e0ba:	602b      	str	r3, [r5, #0]
 800e0bc:	d032      	beq.n	800e124 <__sflush_r+0x98>
 800e0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0c0:	89a3      	ldrh	r3, [r4, #12]
 800e0c2:	075a      	lsls	r2, r3, #29
 800e0c4:	d505      	bpl.n	800e0d2 <__sflush_r+0x46>
 800e0c6:	6863      	ldr	r3, [r4, #4]
 800e0c8:	1ac0      	subs	r0, r0, r3
 800e0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0cc:	b10b      	cbz	r3, 800e0d2 <__sflush_r+0x46>
 800e0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0d0:	1ac0      	subs	r0, r0, r3
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0d8:	6a21      	ldr	r1, [r4, #32]
 800e0da:	4628      	mov	r0, r5
 800e0dc:	47b0      	blx	r6
 800e0de:	1c43      	adds	r3, r0, #1
 800e0e0:	89a3      	ldrh	r3, [r4, #12]
 800e0e2:	d106      	bne.n	800e0f2 <__sflush_r+0x66>
 800e0e4:	6829      	ldr	r1, [r5, #0]
 800e0e6:	291d      	cmp	r1, #29
 800e0e8:	d82c      	bhi.n	800e144 <__sflush_r+0xb8>
 800e0ea:	4a2a      	ldr	r2, [pc, #168]	; (800e194 <__sflush_r+0x108>)
 800e0ec:	40ca      	lsrs	r2, r1
 800e0ee:	07d6      	lsls	r6, r2, #31
 800e0f0:	d528      	bpl.n	800e144 <__sflush_r+0xb8>
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	6062      	str	r2, [r4, #4]
 800e0f6:	04d9      	lsls	r1, r3, #19
 800e0f8:	6922      	ldr	r2, [r4, #16]
 800e0fa:	6022      	str	r2, [r4, #0]
 800e0fc:	d504      	bpl.n	800e108 <__sflush_r+0x7c>
 800e0fe:	1c42      	adds	r2, r0, #1
 800e100:	d101      	bne.n	800e106 <__sflush_r+0x7a>
 800e102:	682b      	ldr	r3, [r5, #0]
 800e104:	b903      	cbnz	r3, 800e108 <__sflush_r+0x7c>
 800e106:	6560      	str	r0, [r4, #84]	; 0x54
 800e108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e10a:	602f      	str	r7, [r5, #0]
 800e10c:	2900      	cmp	r1, #0
 800e10e:	d0ca      	beq.n	800e0a6 <__sflush_r+0x1a>
 800e110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e114:	4299      	cmp	r1, r3
 800e116:	d002      	beq.n	800e11e <__sflush_r+0x92>
 800e118:	4628      	mov	r0, r5
 800e11a:	f7ff fae3 	bl	800d6e4 <_free_r>
 800e11e:	2000      	movs	r0, #0
 800e120:	6360      	str	r0, [r4, #52]	; 0x34
 800e122:	e7c1      	b.n	800e0a8 <__sflush_r+0x1c>
 800e124:	6a21      	ldr	r1, [r4, #32]
 800e126:	2301      	movs	r3, #1
 800e128:	4628      	mov	r0, r5
 800e12a:	47b0      	blx	r6
 800e12c:	1c41      	adds	r1, r0, #1
 800e12e:	d1c7      	bne.n	800e0c0 <__sflush_r+0x34>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d0c4      	beq.n	800e0c0 <__sflush_r+0x34>
 800e136:	2b1d      	cmp	r3, #29
 800e138:	d001      	beq.n	800e13e <__sflush_r+0xb2>
 800e13a:	2b16      	cmp	r3, #22
 800e13c:	d101      	bne.n	800e142 <__sflush_r+0xb6>
 800e13e:	602f      	str	r7, [r5, #0]
 800e140:	e7b1      	b.n	800e0a6 <__sflush_r+0x1a>
 800e142:	89a3      	ldrh	r3, [r4, #12]
 800e144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e148:	81a3      	strh	r3, [r4, #12]
 800e14a:	e7ad      	b.n	800e0a8 <__sflush_r+0x1c>
 800e14c:	690f      	ldr	r7, [r1, #16]
 800e14e:	2f00      	cmp	r7, #0
 800e150:	d0a9      	beq.n	800e0a6 <__sflush_r+0x1a>
 800e152:	0793      	lsls	r3, r2, #30
 800e154:	680e      	ldr	r6, [r1, #0]
 800e156:	bf08      	it	eq
 800e158:	694b      	ldreq	r3, [r1, #20]
 800e15a:	600f      	str	r7, [r1, #0]
 800e15c:	bf18      	it	ne
 800e15e:	2300      	movne	r3, #0
 800e160:	eba6 0807 	sub.w	r8, r6, r7
 800e164:	608b      	str	r3, [r1, #8]
 800e166:	f1b8 0f00 	cmp.w	r8, #0
 800e16a:	dd9c      	ble.n	800e0a6 <__sflush_r+0x1a>
 800e16c:	6a21      	ldr	r1, [r4, #32]
 800e16e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e170:	4643      	mov	r3, r8
 800e172:	463a      	mov	r2, r7
 800e174:	4628      	mov	r0, r5
 800e176:	47b0      	blx	r6
 800e178:	2800      	cmp	r0, #0
 800e17a:	dc06      	bgt.n	800e18a <__sflush_r+0xfe>
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e182:	81a3      	strh	r3, [r4, #12]
 800e184:	f04f 30ff 	mov.w	r0, #4294967295
 800e188:	e78e      	b.n	800e0a8 <__sflush_r+0x1c>
 800e18a:	4407      	add	r7, r0
 800e18c:	eba8 0800 	sub.w	r8, r8, r0
 800e190:	e7e9      	b.n	800e166 <__sflush_r+0xda>
 800e192:	bf00      	nop
 800e194:	20400001 	.word	0x20400001

0800e198 <_fflush_r>:
 800e198:	b538      	push	{r3, r4, r5, lr}
 800e19a:	690b      	ldr	r3, [r1, #16]
 800e19c:	4605      	mov	r5, r0
 800e19e:	460c      	mov	r4, r1
 800e1a0:	b913      	cbnz	r3, 800e1a8 <_fflush_r+0x10>
 800e1a2:	2500      	movs	r5, #0
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	b118      	cbz	r0, 800e1b2 <_fflush_r+0x1a>
 800e1aa:	6983      	ldr	r3, [r0, #24]
 800e1ac:	b90b      	cbnz	r3, 800e1b2 <_fflush_r+0x1a>
 800e1ae:	f000 f887 	bl	800e2c0 <__sinit>
 800e1b2:	4b14      	ldr	r3, [pc, #80]	; (800e204 <_fflush_r+0x6c>)
 800e1b4:	429c      	cmp	r4, r3
 800e1b6:	d11b      	bne.n	800e1f0 <_fflush_r+0x58>
 800e1b8:	686c      	ldr	r4, [r5, #4]
 800e1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d0ef      	beq.n	800e1a2 <_fflush_r+0xa>
 800e1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1c4:	07d0      	lsls	r0, r2, #31
 800e1c6:	d404      	bmi.n	800e1d2 <_fflush_r+0x3a>
 800e1c8:	0599      	lsls	r1, r3, #22
 800e1ca:	d402      	bmi.n	800e1d2 <_fflush_r+0x3a>
 800e1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ce:	f000 f915 	bl	800e3fc <__retarget_lock_acquire_recursive>
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	f7ff ff59 	bl	800e08c <__sflush_r>
 800e1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1dc:	07da      	lsls	r2, r3, #31
 800e1de:	4605      	mov	r5, r0
 800e1e0:	d4e0      	bmi.n	800e1a4 <_fflush_r+0xc>
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	059b      	lsls	r3, r3, #22
 800e1e6:	d4dd      	bmi.n	800e1a4 <_fflush_r+0xc>
 800e1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ea:	f000 f908 	bl	800e3fe <__retarget_lock_release_recursive>
 800e1ee:	e7d9      	b.n	800e1a4 <_fflush_r+0xc>
 800e1f0:	4b05      	ldr	r3, [pc, #20]	; (800e208 <_fflush_r+0x70>)
 800e1f2:	429c      	cmp	r4, r3
 800e1f4:	d101      	bne.n	800e1fa <_fflush_r+0x62>
 800e1f6:	68ac      	ldr	r4, [r5, #8]
 800e1f8:	e7df      	b.n	800e1ba <_fflush_r+0x22>
 800e1fa:	4b04      	ldr	r3, [pc, #16]	; (800e20c <_fflush_r+0x74>)
 800e1fc:	429c      	cmp	r4, r3
 800e1fe:	bf08      	it	eq
 800e200:	68ec      	ldreq	r4, [r5, #12]
 800e202:	e7da      	b.n	800e1ba <_fflush_r+0x22>
 800e204:	0800ee54 	.word	0x0800ee54
 800e208:	0800ee74 	.word	0x0800ee74
 800e20c:	0800ee34 	.word	0x0800ee34

0800e210 <std>:
 800e210:	2300      	movs	r3, #0
 800e212:	b510      	push	{r4, lr}
 800e214:	4604      	mov	r4, r0
 800e216:	e9c0 3300 	strd	r3, r3, [r0]
 800e21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e21e:	6083      	str	r3, [r0, #8]
 800e220:	8181      	strh	r1, [r0, #12]
 800e222:	6643      	str	r3, [r0, #100]	; 0x64
 800e224:	81c2      	strh	r2, [r0, #14]
 800e226:	6183      	str	r3, [r0, #24]
 800e228:	4619      	mov	r1, r3
 800e22a:	2208      	movs	r2, #8
 800e22c:	305c      	adds	r0, #92	; 0x5c
 800e22e:	f7fd fc35 	bl	800ba9c <memset>
 800e232:	4b05      	ldr	r3, [pc, #20]	; (800e248 <std+0x38>)
 800e234:	6263      	str	r3, [r4, #36]	; 0x24
 800e236:	4b05      	ldr	r3, [pc, #20]	; (800e24c <std+0x3c>)
 800e238:	62a3      	str	r3, [r4, #40]	; 0x28
 800e23a:	4b05      	ldr	r3, [pc, #20]	; (800e250 <std+0x40>)
 800e23c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e23e:	4b05      	ldr	r3, [pc, #20]	; (800e254 <std+0x44>)
 800e240:	6224      	str	r4, [r4, #32]
 800e242:	6323      	str	r3, [r4, #48]	; 0x30
 800e244:	bd10      	pop	{r4, pc}
 800e246:	bf00      	nop
 800e248:	0800e561 	.word	0x0800e561
 800e24c:	0800e583 	.word	0x0800e583
 800e250:	0800e5bb 	.word	0x0800e5bb
 800e254:	0800e5df 	.word	0x0800e5df

0800e258 <_cleanup_r>:
 800e258:	4901      	ldr	r1, [pc, #4]	; (800e260 <_cleanup_r+0x8>)
 800e25a:	f000 b8af 	b.w	800e3bc <_fwalk_reent>
 800e25e:	bf00      	nop
 800e260:	0800e199 	.word	0x0800e199

0800e264 <__sfmoreglue>:
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	1e4a      	subs	r2, r1, #1
 800e268:	2568      	movs	r5, #104	; 0x68
 800e26a:	4355      	muls	r5, r2
 800e26c:	460e      	mov	r6, r1
 800e26e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e272:	f7ff fa87 	bl	800d784 <_malloc_r>
 800e276:	4604      	mov	r4, r0
 800e278:	b140      	cbz	r0, 800e28c <__sfmoreglue+0x28>
 800e27a:	2100      	movs	r1, #0
 800e27c:	e9c0 1600 	strd	r1, r6, [r0]
 800e280:	300c      	adds	r0, #12
 800e282:	60a0      	str	r0, [r4, #8]
 800e284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e288:	f7fd fc08 	bl	800ba9c <memset>
 800e28c:	4620      	mov	r0, r4
 800e28e:	bd70      	pop	{r4, r5, r6, pc}

0800e290 <__sfp_lock_acquire>:
 800e290:	4801      	ldr	r0, [pc, #4]	; (800e298 <__sfp_lock_acquire+0x8>)
 800e292:	f000 b8b3 	b.w	800e3fc <__retarget_lock_acquire_recursive>
 800e296:	bf00      	nop
 800e298:	200007c8 	.word	0x200007c8

0800e29c <__sfp_lock_release>:
 800e29c:	4801      	ldr	r0, [pc, #4]	; (800e2a4 <__sfp_lock_release+0x8>)
 800e29e:	f000 b8ae 	b.w	800e3fe <__retarget_lock_release_recursive>
 800e2a2:	bf00      	nop
 800e2a4:	200007c8 	.word	0x200007c8

0800e2a8 <__sinit_lock_acquire>:
 800e2a8:	4801      	ldr	r0, [pc, #4]	; (800e2b0 <__sinit_lock_acquire+0x8>)
 800e2aa:	f000 b8a7 	b.w	800e3fc <__retarget_lock_acquire_recursive>
 800e2ae:	bf00      	nop
 800e2b0:	200007c3 	.word	0x200007c3

0800e2b4 <__sinit_lock_release>:
 800e2b4:	4801      	ldr	r0, [pc, #4]	; (800e2bc <__sinit_lock_release+0x8>)
 800e2b6:	f000 b8a2 	b.w	800e3fe <__retarget_lock_release_recursive>
 800e2ba:	bf00      	nop
 800e2bc:	200007c3 	.word	0x200007c3

0800e2c0 <__sinit>:
 800e2c0:	b510      	push	{r4, lr}
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	f7ff fff0 	bl	800e2a8 <__sinit_lock_acquire>
 800e2c8:	69a3      	ldr	r3, [r4, #24]
 800e2ca:	b11b      	cbz	r3, 800e2d4 <__sinit+0x14>
 800e2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d0:	f7ff bff0 	b.w	800e2b4 <__sinit_lock_release>
 800e2d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2d8:	6523      	str	r3, [r4, #80]	; 0x50
 800e2da:	4b13      	ldr	r3, [pc, #76]	; (800e328 <__sinit+0x68>)
 800e2dc:	4a13      	ldr	r2, [pc, #76]	; (800e32c <__sinit+0x6c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2e2:	42a3      	cmp	r3, r4
 800e2e4:	bf04      	itt	eq
 800e2e6:	2301      	moveq	r3, #1
 800e2e8:	61a3      	streq	r3, [r4, #24]
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f000 f820 	bl	800e330 <__sfp>
 800e2f0:	6060      	str	r0, [r4, #4]
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 f81c 	bl	800e330 <__sfp>
 800e2f8:	60a0      	str	r0, [r4, #8]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f000 f818 	bl	800e330 <__sfp>
 800e300:	2200      	movs	r2, #0
 800e302:	60e0      	str	r0, [r4, #12]
 800e304:	2104      	movs	r1, #4
 800e306:	6860      	ldr	r0, [r4, #4]
 800e308:	f7ff ff82 	bl	800e210 <std>
 800e30c:	68a0      	ldr	r0, [r4, #8]
 800e30e:	2201      	movs	r2, #1
 800e310:	2109      	movs	r1, #9
 800e312:	f7ff ff7d 	bl	800e210 <std>
 800e316:	68e0      	ldr	r0, [r4, #12]
 800e318:	2202      	movs	r2, #2
 800e31a:	2112      	movs	r1, #18
 800e31c:	f7ff ff78 	bl	800e210 <std>
 800e320:	2301      	movs	r3, #1
 800e322:	61a3      	str	r3, [r4, #24]
 800e324:	e7d2      	b.n	800e2cc <__sinit+0xc>
 800e326:	bf00      	nop
 800e328:	0800eab0 	.word	0x0800eab0
 800e32c:	0800e259 	.word	0x0800e259

0800e330 <__sfp>:
 800e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e332:	4607      	mov	r7, r0
 800e334:	f7ff ffac 	bl	800e290 <__sfp_lock_acquire>
 800e338:	4b1e      	ldr	r3, [pc, #120]	; (800e3b4 <__sfp+0x84>)
 800e33a:	681e      	ldr	r6, [r3, #0]
 800e33c:	69b3      	ldr	r3, [r6, #24]
 800e33e:	b913      	cbnz	r3, 800e346 <__sfp+0x16>
 800e340:	4630      	mov	r0, r6
 800e342:	f7ff ffbd 	bl	800e2c0 <__sinit>
 800e346:	3648      	adds	r6, #72	; 0x48
 800e348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	d503      	bpl.n	800e358 <__sfp+0x28>
 800e350:	6833      	ldr	r3, [r6, #0]
 800e352:	b30b      	cbz	r3, 800e398 <__sfp+0x68>
 800e354:	6836      	ldr	r6, [r6, #0]
 800e356:	e7f7      	b.n	800e348 <__sfp+0x18>
 800e358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e35c:	b9d5      	cbnz	r5, 800e394 <__sfp+0x64>
 800e35e:	4b16      	ldr	r3, [pc, #88]	; (800e3b8 <__sfp+0x88>)
 800e360:	60e3      	str	r3, [r4, #12]
 800e362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e366:	6665      	str	r5, [r4, #100]	; 0x64
 800e368:	f000 f847 	bl	800e3fa <__retarget_lock_init_recursive>
 800e36c:	f7ff ff96 	bl	800e29c <__sfp_lock_release>
 800e370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e378:	6025      	str	r5, [r4, #0]
 800e37a:	61a5      	str	r5, [r4, #24]
 800e37c:	2208      	movs	r2, #8
 800e37e:	4629      	mov	r1, r5
 800e380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e384:	f7fd fb8a 	bl	800ba9c <memset>
 800e388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e38c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e390:	4620      	mov	r0, r4
 800e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e394:	3468      	adds	r4, #104	; 0x68
 800e396:	e7d9      	b.n	800e34c <__sfp+0x1c>
 800e398:	2104      	movs	r1, #4
 800e39a:	4638      	mov	r0, r7
 800e39c:	f7ff ff62 	bl	800e264 <__sfmoreglue>
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	6030      	str	r0, [r6, #0]
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d1d5      	bne.n	800e354 <__sfp+0x24>
 800e3a8:	f7ff ff78 	bl	800e29c <__sfp_lock_release>
 800e3ac:	230c      	movs	r3, #12
 800e3ae:	603b      	str	r3, [r7, #0]
 800e3b0:	e7ee      	b.n	800e390 <__sfp+0x60>
 800e3b2:	bf00      	nop
 800e3b4:	0800eab0 	.word	0x0800eab0
 800e3b8:	ffff0001 	.word	0xffff0001

0800e3bc <_fwalk_reent>:
 800e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	4688      	mov	r8, r1
 800e3c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3c8:	2700      	movs	r7, #0
 800e3ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3ce:	f1b9 0901 	subs.w	r9, r9, #1
 800e3d2:	d505      	bpl.n	800e3e0 <_fwalk_reent+0x24>
 800e3d4:	6824      	ldr	r4, [r4, #0]
 800e3d6:	2c00      	cmp	r4, #0
 800e3d8:	d1f7      	bne.n	800e3ca <_fwalk_reent+0xe>
 800e3da:	4638      	mov	r0, r7
 800e3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e0:	89ab      	ldrh	r3, [r5, #12]
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d907      	bls.n	800e3f6 <_fwalk_reent+0x3a>
 800e3e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	d003      	beq.n	800e3f6 <_fwalk_reent+0x3a>
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	47c0      	blx	r8
 800e3f4:	4307      	orrs	r7, r0
 800e3f6:	3568      	adds	r5, #104	; 0x68
 800e3f8:	e7e9      	b.n	800e3ce <_fwalk_reent+0x12>

0800e3fa <__retarget_lock_init_recursive>:
 800e3fa:	4770      	bx	lr

0800e3fc <__retarget_lock_acquire_recursive>:
 800e3fc:	4770      	bx	lr

0800e3fe <__retarget_lock_release_recursive>:
 800e3fe:	4770      	bx	lr

0800e400 <__swhatbuf_r>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	460e      	mov	r6, r1
 800e404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e408:	2900      	cmp	r1, #0
 800e40a:	b096      	sub	sp, #88	; 0x58
 800e40c:	4614      	mov	r4, r2
 800e40e:	461d      	mov	r5, r3
 800e410:	da07      	bge.n	800e422 <__swhatbuf_r+0x22>
 800e412:	2300      	movs	r3, #0
 800e414:	602b      	str	r3, [r5, #0]
 800e416:	89b3      	ldrh	r3, [r6, #12]
 800e418:	061a      	lsls	r2, r3, #24
 800e41a:	d410      	bmi.n	800e43e <__swhatbuf_r+0x3e>
 800e41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e420:	e00e      	b.n	800e440 <__swhatbuf_r+0x40>
 800e422:	466a      	mov	r2, sp
 800e424:	f000 f902 	bl	800e62c <_fstat_r>
 800e428:	2800      	cmp	r0, #0
 800e42a:	dbf2      	blt.n	800e412 <__swhatbuf_r+0x12>
 800e42c:	9a01      	ldr	r2, [sp, #4]
 800e42e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e432:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e436:	425a      	negs	r2, r3
 800e438:	415a      	adcs	r2, r3
 800e43a:	602a      	str	r2, [r5, #0]
 800e43c:	e7ee      	b.n	800e41c <__swhatbuf_r+0x1c>
 800e43e:	2340      	movs	r3, #64	; 0x40
 800e440:	2000      	movs	r0, #0
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	b016      	add	sp, #88	; 0x58
 800e446:	bd70      	pop	{r4, r5, r6, pc}

0800e448 <__smakebuf_r>:
 800e448:	898b      	ldrh	r3, [r1, #12]
 800e44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e44c:	079d      	lsls	r5, r3, #30
 800e44e:	4606      	mov	r6, r0
 800e450:	460c      	mov	r4, r1
 800e452:	d507      	bpl.n	800e464 <__smakebuf_r+0x1c>
 800e454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	6123      	str	r3, [r4, #16]
 800e45c:	2301      	movs	r3, #1
 800e45e:	6163      	str	r3, [r4, #20]
 800e460:	b002      	add	sp, #8
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	ab01      	add	r3, sp, #4
 800e466:	466a      	mov	r2, sp
 800e468:	f7ff ffca 	bl	800e400 <__swhatbuf_r>
 800e46c:	9900      	ldr	r1, [sp, #0]
 800e46e:	4605      	mov	r5, r0
 800e470:	4630      	mov	r0, r6
 800e472:	f7ff f987 	bl	800d784 <_malloc_r>
 800e476:	b948      	cbnz	r0, 800e48c <__smakebuf_r+0x44>
 800e478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47c:	059a      	lsls	r2, r3, #22
 800e47e:	d4ef      	bmi.n	800e460 <__smakebuf_r+0x18>
 800e480:	f023 0303 	bic.w	r3, r3, #3
 800e484:	f043 0302 	orr.w	r3, r3, #2
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	e7e3      	b.n	800e454 <__smakebuf_r+0xc>
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <__smakebuf_r+0x7c>)
 800e48e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e490:	89a3      	ldrh	r3, [r4, #12]
 800e492:	6020      	str	r0, [r4, #0]
 800e494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e498:	81a3      	strh	r3, [r4, #12]
 800e49a:	9b00      	ldr	r3, [sp, #0]
 800e49c:	6163      	str	r3, [r4, #20]
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	6120      	str	r0, [r4, #16]
 800e4a2:	b15b      	cbz	r3, 800e4bc <__smakebuf_r+0x74>
 800e4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f000 f8d1 	bl	800e650 <_isatty_r>
 800e4ae:	b128      	cbz	r0, 800e4bc <__smakebuf_r+0x74>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f023 0303 	bic.w	r3, r3, #3
 800e4b6:	f043 0301 	orr.w	r3, r3, #1
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	89a0      	ldrh	r0, [r4, #12]
 800e4be:	4305      	orrs	r5, r0
 800e4c0:	81a5      	strh	r5, [r4, #12]
 800e4c2:	e7cd      	b.n	800e460 <__smakebuf_r+0x18>
 800e4c4:	0800e259 	.word	0x0800e259

0800e4c8 <_malloc_usable_size_r>:
 800e4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4cc:	1f18      	subs	r0, r3, #4
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	bfbc      	itt	lt
 800e4d2:	580b      	ldrlt	r3, [r1, r0]
 800e4d4:	18c0      	addlt	r0, r0, r3
 800e4d6:	4770      	bx	lr

0800e4d8 <_raise_r>:
 800e4d8:	291f      	cmp	r1, #31
 800e4da:	b538      	push	{r3, r4, r5, lr}
 800e4dc:	4604      	mov	r4, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	d904      	bls.n	800e4ec <_raise_r+0x14>
 800e4e2:	2316      	movs	r3, #22
 800e4e4:	6003      	str	r3, [r0, #0]
 800e4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4ee:	b112      	cbz	r2, 800e4f6 <_raise_r+0x1e>
 800e4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4f4:	b94b      	cbnz	r3, 800e50a <_raise_r+0x32>
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f000 f830 	bl	800e55c <_getpid_r>
 800e4fc:	462a      	mov	r2, r5
 800e4fe:	4601      	mov	r1, r0
 800e500:	4620      	mov	r0, r4
 800e502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e506:	f000 b817 	b.w	800e538 <_kill_r>
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d00a      	beq.n	800e524 <_raise_r+0x4c>
 800e50e:	1c59      	adds	r1, r3, #1
 800e510:	d103      	bne.n	800e51a <_raise_r+0x42>
 800e512:	2316      	movs	r3, #22
 800e514:	6003      	str	r3, [r0, #0]
 800e516:	2001      	movs	r0, #1
 800e518:	e7e7      	b.n	800e4ea <_raise_r+0x12>
 800e51a:	2400      	movs	r4, #0
 800e51c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e520:	4628      	mov	r0, r5
 800e522:	4798      	blx	r3
 800e524:	2000      	movs	r0, #0
 800e526:	e7e0      	b.n	800e4ea <_raise_r+0x12>

0800e528 <raise>:
 800e528:	4b02      	ldr	r3, [pc, #8]	; (800e534 <raise+0xc>)
 800e52a:	4601      	mov	r1, r0
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	f7ff bfd3 	b.w	800e4d8 <_raise_r>
 800e532:	bf00      	nop
 800e534:	200000dc 	.word	0x200000dc

0800e538 <_kill_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4d07      	ldr	r5, [pc, #28]	; (800e558 <_kill_r+0x20>)
 800e53c:	2300      	movs	r3, #0
 800e53e:	4604      	mov	r4, r0
 800e540:	4608      	mov	r0, r1
 800e542:	4611      	mov	r1, r2
 800e544:	602b      	str	r3, [r5, #0]
 800e546:	f7f6 fba3 	bl	8004c90 <_kill>
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	d102      	bne.n	800e554 <_kill_r+0x1c>
 800e54e:	682b      	ldr	r3, [r5, #0]
 800e550:	b103      	cbz	r3, 800e554 <_kill_r+0x1c>
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	bf00      	nop
 800e558:	200007bc 	.word	0x200007bc

0800e55c <_getpid_r>:
 800e55c:	f7f6 bb90 	b.w	8004c80 <_getpid>

0800e560 <__sread>:
 800e560:	b510      	push	{r4, lr}
 800e562:	460c      	mov	r4, r1
 800e564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e568:	f000 f894 	bl	800e694 <_read_r>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	bfab      	itete	ge
 800e570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e572:	89a3      	ldrhlt	r3, [r4, #12]
 800e574:	181b      	addge	r3, r3, r0
 800e576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e57a:	bfac      	ite	ge
 800e57c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e57e:	81a3      	strhlt	r3, [r4, #12]
 800e580:	bd10      	pop	{r4, pc}

0800e582 <__swrite>:
 800e582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e586:	461f      	mov	r7, r3
 800e588:	898b      	ldrh	r3, [r1, #12]
 800e58a:	05db      	lsls	r3, r3, #23
 800e58c:	4605      	mov	r5, r0
 800e58e:	460c      	mov	r4, r1
 800e590:	4616      	mov	r6, r2
 800e592:	d505      	bpl.n	800e5a0 <__swrite+0x1e>
 800e594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e598:	2302      	movs	r3, #2
 800e59a:	2200      	movs	r2, #0
 800e59c:	f000 f868 	bl	800e670 <_lseek_r>
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5aa:	81a3      	strh	r3, [r4, #12]
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	463b      	mov	r3, r7
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b6:	f000 b817 	b.w	800e5e8 <_write_r>

0800e5ba <__sseek>:
 800e5ba:	b510      	push	{r4, lr}
 800e5bc:	460c      	mov	r4, r1
 800e5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c2:	f000 f855 	bl	800e670 <_lseek_r>
 800e5c6:	1c43      	adds	r3, r0, #1
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	bf15      	itete	ne
 800e5cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5d6:	81a3      	strheq	r3, [r4, #12]
 800e5d8:	bf18      	it	ne
 800e5da:	81a3      	strhne	r3, [r4, #12]
 800e5dc:	bd10      	pop	{r4, pc}

0800e5de <__sclose>:
 800e5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e2:	f000 b813 	b.w	800e60c <_close_r>
	...

0800e5e8 <_write_r>:
 800e5e8:	b538      	push	{r3, r4, r5, lr}
 800e5ea:	4d07      	ldr	r5, [pc, #28]	; (800e608 <_write_r+0x20>)
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f7f6 fb81 	bl	8004cfe <_write>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d102      	bne.n	800e606 <_write_r+0x1e>
 800e600:	682b      	ldr	r3, [r5, #0]
 800e602:	b103      	cbz	r3, 800e606 <_write_r+0x1e>
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	bd38      	pop	{r3, r4, r5, pc}
 800e608:	200007bc 	.word	0x200007bc

0800e60c <_close_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d06      	ldr	r5, [pc, #24]	; (800e628 <_close_r+0x1c>)
 800e610:	2300      	movs	r3, #0
 800e612:	4604      	mov	r4, r0
 800e614:	4608      	mov	r0, r1
 800e616:	602b      	str	r3, [r5, #0]
 800e618:	f7f6 fb8d 	bl	8004d36 <_close>
 800e61c:	1c43      	adds	r3, r0, #1
 800e61e:	d102      	bne.n	800e626 <_close_r+0x1a>
 800e620:	682b      	ldr	r3, [r5, #0]
 800e622:	b103      	cbz	r3, 800e626 <_close_r+0x1a>
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	bd38      	pop	{r3, r4, r5, pc}
 800e628:	200007bc 	.word	0x200007bc

0800e62c <_fstat_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4d07      	ldr	r5, [pc, #28]	; (800e64c <_fstat_r+0x20>)
 800e630:	2300      	movs	r3, #0
 800e632:	4604      	mov	r4, r0
 800e634:	4608      	mov	r0, r1
 800e636:	4611      	mov	r1, r2
 800e638:	602b      	str	r3, [r5, #0]
 800e63a:	f7f6 fb88 	bl	8004d4e <_fstat>
 800e63e:	1c43      	adds	r3, r0, #1
 800e640:	d102      	bne.n	800e648 <_fstat_r+0x1c>
 800e642:	682b      	ldr	r3, [r5, #0]
 800e644:	b103      	cbz	r3, 800e648 <_fstat_r+0x1c>
 800e646:	6023      	str	r3, [r4, #0]
 800e648:	bd38      	pop	{r3, r4, r5, pc}
 800e64a:	bf00      	nop
 800e64c:	200007bc 	.word	0x200007bc

0800e650 <_isatty_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4d06      	ldr	r5, [pc, #24]	; (800e66c <_isatty_r+0x1c>)
 800e654:	2300      	movs	r3, #0
 800e656:	4604      	mov	r4, r0
 800e658:	4608      	mov	r0, r1
 800e65a:	602b      	str	r3, [r5, #0]
 800e65c:	f7f6 fb87 	bl	8004d6e <_isatty>
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	d102      	bne.n	800e66a <_isatty_r+0x1a>
 800e664:	682b      	ldr	r3, [r5, #0]
 800e666:	b103      	cbz	r3, 800e66a <_isatty_r+0x1a>
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	bd38      	pop	{r3, r4, r5, pc}
 800e66c:	200007bc 	.word	0x200007bc

0800e670 <_lseek_r>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4d07      	ldr	r5, [pc, #28]	; (800e690 <_lseek_r+0x20>)
 800e674:	4604      	mov	r4, r0
 800e676:	4608      	mov	r0, r1
 800e678:	4611      	mov	r1, r2
 800e67a:	2200      	movs	r2, #0
 800e67c:	602a      	str	r2, [r5, #0]
 800e67e:	461a      	mov	r2, r3
 800e680:	f7f6 fb80 	bl	8004d84 <_lseek>
 800e684:	1c43      	adds	r3, r0, #1
 800e686:	d102      	bne.n	800e68e <_lseek_r+0x1e>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	b103      	cbz	r3, 800e68e <_lseek_r+0x1e>
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	bd38      	pop	{r3, r4, r5, pc}
 800e690:	200007bc 	.word	0x200007bc

0800e694 <_read_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d07      	ldr	r5, [pc, #28]	; (800e6b4 <_read_r+0x20>)
 800e698:	4604      	mov	r4, r0
 800e69a:	4608      	mov	r0, r1
 800e69c:	4611      	mov	r1, r2
 800e69e:	2200      	movs	r2, #0
 800e6a0:	602a      	str	r2, [r5, #0]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f7f6 fb0e 	bl	8004cc4 <_read>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d102      	bne.n	800e6b2 <_read_r+0x1e>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	b103      	cbz	r3, 800e6b2 <_read_r+0x1e>
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	200007bc 	.word	0x200007bc

0800e6b8 <_init>:
 800e6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ba:	bf00      	nop
 800e6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6be:	bc08      	pop	{r3}
 800e6c0:	469e      	mov	lr, r3
 800e6c2:	4770      	bx	lr

0800e6c4 <_fini>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	bf00      	nop
 800e6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ca:	bc08      	pop	{r3}
 800e6cc:	469e      	mov	lr, r3
 800e6ce:	4770      	bx	lr
